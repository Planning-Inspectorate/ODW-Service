{
	"name": "py_0_create_config_tables",
	"properties": {
		"folder": {
			"name": "archive"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "974eecc3-bf7c-4419-8e70-2392492a86cb"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw",
				"name": "pinssynspodw",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"%run  /0-odw-source-to-raw/Fileshare/SAP_HR/py_0_source_to_raw_hr_functions"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def create_config_tables():\r\n",
					"    '''\r\n",
					"    Parameters:\r\n",
					"    None\r\n",
					"\r\n",
					"    Returns:\r\n",
					"    None\r\n",
					"\r\n",
					"    Actions:\r\n",
					"    '''\r\n",
					"    ### module imports\r\n",
					"    from pyspark.sql import SparkSession\r\n",
					"    import logging\r\n",
					"    spark = SparkSession.builder.getOrCreate()\r\n",
					"    import json\r\n",
					"    from notebookutils import mssparkutils\r\n",
					"    import pandas as pd\r\n",
					"    logger = logging.getLogger(__name__)\r\n",
					"    from datetime import datetime, timedelta, date\r\n",
					"    from pyspark.sql.types import StringType,BooleanType,DateType,TimestampType,IntegerType, FloatType, StructType\r\n",
					"    from delta.tables import DeltaTable\r\n",
					"    from croniter import croniter\r\n",
					"    import re\r\n",
					"    from pyspark.sql.functions import col, lit\r\n",
					"    import calendar\r\n",
					"\r\n",
					"    ### use the ADLS gen2 assoicated with the synapse resource in any environment (DR/Dev/Stage/Prod)\r\n",
					"    storage_acc_name = spark.sparkContext.environment.get('dataLakeAccountName', 'get')\r\n",
					"\r\n",
					"    ### create outstanding files table\r\n",
					"    outstanding_files_table_json = spark.read.text(\"abfss://odw-config@\"+storage_acc_name+\".dfs.core.windows.net/orchestration/scheduling_outstanding_files_table.json\", wholetext=True).first().value\r\n",
					"    create_table_from_schema(outstanding_files_table_json, \"odw_config_db\", \"raw_to_std_outstanding_files\", \"abfss://odw-standardised@\"+storage_acc_name+\".dfs.core.windows.net/\", \"config/raw_to_std_outstanding_files\" )\r\n",
					"\r\n",
					"    orchestration_json = spark.read.text(\"abfss://odw-config@\"+storage_acc_name+\".dfs.core.windows.net/orchestration/orchestration.json\", wholetext=True).first().value\r\n",
					"    json_config_dict = json.loads(orchestration_json)\r\n",
					"    definitions = json_config_dict['definitions']\r\n",
					"    for defs in definitions:\r\n",
					"        standardised_container = \"abfss://odw-standardised@\"+storage_acc_name+\".dfs.core.windows.net/\" \r\n",
					"        standardised_table_name = defs['Standardised_Table_Name']\r\n",
					"        standardised_path = defs['Standardised_Path'] + \"/\"\r\n",
					"        standardised_table_loc = \"abfss://odw-config@\"+storage_acc_name+\".dfs.core.windows.net/\" + defs['Standardised_Table_Definition']\r\n",
					"        standardised_table_def_json = spark.read.text(standardised_table_loc, wholetext=True).first().value\r\n",
					"        create_table_from_schema(standardised_table_def_json, \"odw_standardised_db\", standardised_table_name,standardised_container , standardised_path+standardised_table_name)"
				],
				"execution_count": 3
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"create_config_tables()"
				],
				"execution_count": 4
			}
		]
	}
}