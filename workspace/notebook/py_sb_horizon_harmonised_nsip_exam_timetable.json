{
	"name": "py_sb_horizon_harmonised_nsip_exam_timetable",
	"properties": {
		"folder": {
			"name": "odw-harmonised"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "e54cc2a3-3ebb-4d16-bdb7-c8b5edc11cc3"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw",
				"name": "pinssynspodw",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"from pyspark.sql.types import IntegerType, ArrayType, StructType, StructField\n",
					"from pyspark.sql import Row\n",
					"from pyspark.sql.functions import *"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"service_bus_table = \"odw_harmonised_db.sb_nsip_exam_timetable\" \n",
					"horizon_table = \"odw_standardised_db.horizon_examination_timetable\" \n",
					"spark_table_final = \"odw_harmonised_db.nsip_exam_timetable\""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Get data out of the service bus with additional fields needed for Horizon data\n",
					"service_bus_data = spark.sql(f\"\"\"\n",
					"                        SELECT DISTINCT\n",
					"                            NSIPExaminationTimetableID\n",
					"                            ,caseReference\n",
					"                            ,published\n",
					"                            ,events\n",
					"                            ,Migrated\n",
					"                            ,ODTSourceSystem\n",
					"                            ,SourceSystemID\n",
					"                            ,IngestionDate \n",
					"                            ,NULLIF(ValidTo, '') AS ValidTo\n",
					"                            ,'' as RowID\n",
					"                            ,IsActive\n",
					"                        FROM \n",
					"                            {service_bus_table}\n",
					"                    \"\"\")"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Get data out of Horizon and matching the SB schema (with additional fields and ensure data types match)\n",
					"horizon_data = spark.sql(f\"\"\"\n",
					"                    SELECT DISTINCT\n",
					"                        CAST(NULL AS Long) as NSIPExaminationTimetableID\n",
					"                        ,Horizon.CaseReference\n",
					"                        ,NULL as published\n",
					"                        ,CAST(Horizon.ID AS Integer) As eventId\n",
					"                        ,Horizon.typeofexamination As type\n",
					"                        ,Horizon.Name As eventTitle\n",
					"                        ,Horizon.NameWelsh As eventTitleWelsh\n",
					"                        ,Horizon.Description As description\n",
					"                        ,Horizon.DescriptionWelsh As descriptionWelsh\n",
					"                        ,Horizon.DeadlineStartDateTime As eventDeadlineStartDate\n",
					"                        ,Horizon.Date As date\n",
					"                        ,\"0\" as Migrated\n",
					"                        ,\"Horizon\" as ODTSourceSystem\n",
					"                        ,NULL AS SourceSystemID\n",
					"                        ,to_timestamp(Horizon.expected_from)  AS IngestionDate\n",
					"                        ,CAST(NULL AS String) as ValidTo -- to avoid any null descrepancies\n",
					"                        ,'' as RowID\n",
					"                        ,'Y' as IsActive\n",
					"                    FROM\n",
					"                        {horizon_table} AS Horizon\n",
					"                    WHERE ingested_datetime = (SELECT MAX(ingested_datetime) FROM {horizon_table})\n",
					"                \"\"\")"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"display(horizon_data.filter(\"caseReference = 'EN010120'\"))"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#Establish aggregated view of events\n",
					"event_columns = [\"eventId\", \"type\", \"eventTitle\", \"eventTitleWelsh\", \"description\", \"descriptionWelsh\", \"eventDeadlineStartDate\", \"date\"]\n",
					"\n",
					"horizon_events = horizon_data.groupBy(\"caseReference\").agg(collect_list(struct(event_columns)).alias(\"events\"))\n",
					"horizon_data = horizon_data.drop(*event_columns)\n",
					"horizon_data = horizon_data.join(horizon_events, on=\"caseReference\", how=\"inner\")\n",
					"\n",
					"# adding eventLineItems column for each event\n",
					"horizon_data = horizon_data.withColumn(\"events\",\n",
					"    transform(col(\"events\"),\n",
					"        lambda event: event.withField(\"eventLineItems\", expr(\"array()\"))\n",
					"    )\n",
					")\n",
					"\n",
					"#sort columns into same order as service bus\n",
					"horizon_data = horizon_data.select(service_bus_data.columns).drop_duplicates()"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"results = service_bus_data.union(horizon_data)\n",
					"results.write.format(\"delta\").mode(\"Overwrite\").option(\"overwriteSchema\", \"true\").partitionBy(\"IsActive\").saveAsTable(f\"{spark_table_final}\")"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"CREATE OR REPLACE TEMPORARY VIEW vw_nsip_exam_timetable_calculations_base\n",
					"AS\n",
					"SELECT  \n",
					"    row_number() OVER(PARTITION BY caseReference ORDER BY IngestionDate DESC) AS ReverseOrderProcessed\n",
					"    ,row_number() OVER(ORDER BY IngestionDate asc, caseReference asc) AS NSIPExaminationTimetableID\n",
					"    ,caseReference\n",
					"    ,IngestionDate\n",
					"    ,ValidTo\n",
					"    ,'0' AS Migrated\n",
					"    ,CASE row_number() OVER(PARTITION BY caseReference ORDER BY IngestionDate DESC)\n",
					"        WHEN 1 THEN\n",
					"            'Y'\n",
					"        ELSE\n",
					"            'N'\n",
					"    END AS IsActive                \n",
					"FROM\n",
					"    odw_harmonised_db.nsip_exam_timetable"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df_calcs = spark.sql(\"\"\"\n",
					"                        SELECT\n",
					"                            CurrentRow.NSIPExaminationTimetableID\n",
					"                            ,CurrentRow.caseReference \n",
					"                            ,CurrentRow.IngestionDate\n",
					"                            ,COALESCE(NULLIF(CurrentRow.ValidTo,''), NextRow.IngestionDate) AS ValidTo\n",
					"                            ,CASE\n",
					"                                WHEN raw.caseReference IS NOT NULL THEN \n",
					"                                    \"1\"\n",
					"                                ELSE \n",
					"                                    \"0\"\n",
					"                            END AS Migrated\n",
					"                            ,CurrentRow.IsActive\n",
					"                        FROM\n",
					"                            vw_nsip_exam_timetable_calculations_base AS CurrentRow\n",
					"                            LEFT OUTER JOIN vw_nsip_exam_timetable_calculations_base AS NextRow\n",
					"                                ON CurrentRow.caseReference = NextRow.caseReference\n",
					"                                AND CurrentRow.ReverseOrderProcessed - 1 = NextRow.ReverseOrderProcessed\n",
					"                            LEFT OUTER JOIN (SELECT DISTINCT caseReference FROM  odw_harmonised_db.sb_nsip_exam_timetable) AS Raw\n",
					"                                ON CurrentRow.caseReference = Raw.caseReference \n",
					"                            ORDER BY currentRow.ReverseOrderProcessed\n",
					"                    \"\"\")\n",
					"\n",
					"df_calcs = df_calcs.withColumnRenamed(\"caseReference\", \"temp_caseReference\").withColumnRenamed(\"IngestionDate\", \"temp_IngestionDate\")"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"results = spark.sql(f\"\"\"\n",
					"                    SELECT DISTINCT \n",
					"                        NSIPExaminationTimetableID\n",
					"                        ,caseReference\n",
					"                        ,published\n",
					"                        ,events\n",
					"                        ,Migrated\n",
					"                        ,ODTSourceSystem\n",
					"                        ,IngestionDate\n",
					"                        ,ValidTo\n",
					"                        ,MD5(CONCAT(\n",
					"                                IFNULL(CAST(NSIPExaminationTimetableID AS bigint), '.')\n",
					"                                ,IFNULL(CAST(caseReference AS integer), '.')\n",
					"                                ,IFNULL(CAST(published AS String), '.')\n",
					"                                ,IFNULL(CAST(events AS String), '.')\n",
					"                                ,IFNULL(CAST(Migrated AS String), '.')\n",
					"                                ,IFNULL(CAST(ODTSourceSystem AS String), '.')\n",
					"                                ,IFNULL(CAST(IngestionDate AS String), '.')\n",
					"                                ,IFNULL(CAST(ValidTo AS String), '.')\n",
					"                            )\n",
					"                        ) AS RowID\n",
					"                        ,IsActive\n",
					"    FROM \n",
					"        {spark_table_final}\"\"\")\n",
					"    "
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"columns = results.columns\n",
					"results = results.drop(\"NSIPExaminationTimetableID\", \"ValidTo\", \"Migrated\", \"IsActive\")\n",
					"final_df = results.join(df_calcs, (df_calcs[\"temp_caseReference\"] == results[\"caseReference\"]) & (df_calcs[\"temp_IngestionDate\"] == results[\"IngestionDate\"])).select(columns)\n",
					"final_df = final_df.drop_duplicates()"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"final_df.write.format(\"delta\").mode(\"Overwrite\").option(\"overwriteSchema\", \"true\").partitionBy(\"IsActive\").saveAsTable(f\"{spark_table_final}\")"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"df_hzn_std = spark.sql(\"select * from odw_standardised_db.horizon_examination_timetable where casereference = 'EN010120' and ingested_datetime = (select max(ingested_datetime) from odw_standardised_db.horizon_examination_timetable)\")\n",
					"df_sb_hrm = spark.sql(\"select * from odw_harmonised_db.sb_nsip_exam_timetable where casereference = 'EN010120'\")\n",
					"df_hrm = spark.sql(\"select * from odw_harmonised_db.nsip_exam_timetable where casereference = 'EN010120'\")\n",
					"\n",
					"display(df_hzn_std)\n",
					"display(df_sb_hrm)\n",
					"display(df_hrm)"
				],
				"execution_count": null
			}
		]
	}
}