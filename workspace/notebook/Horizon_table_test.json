{
	"name": "Horizon_table_test",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw34",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "ed6efb0e-24f3-4f2b-bb68-ec501038c7ad"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw34",
				"name": "pinssynspodw34",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw34",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"# from pyspark.sql import SparkSession\n",
					"\n",
					"# def drop_loop_test_tables(database_name):\n",
					"#     spark = SparkSession.builder.getOrCreate()\n",
					"    \n",
					"#     # Get list of tables in the database\n",
					"#     tables = spark.catalog.listTables(database_name)\n",
					"    \n",
					"#     # Filter tables that start with 'loop_test_'\n",
					"#     loop_test_tables = [table.name for table in tables if table.name.startswith('loop_test_')]\n",
					"    \n",
					"#     # Drop each table\n",
					"#     for table_name in loop_test_tables:\n",
					"#         spark.sql(f\"DROP TABLE {database_name}.{table_name}\")\n",
					"#         print(f\"Dropped table: {database_name}.{table_name}\")\n",
					"\n",
					"# # Example usage\n",
					"# drop_loop_test_tables('odw_standardised_db')"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"source": [
					"from pyspark.sql import SparkSession\n",
					"\n",
					"def get_loop_test_table_counts(database_name):\n",
					"    spark = SparkSession.builder.getOrCreate()\n",
					"    \n",
					"    # Get list of tables in the database\n",
					"    tables = spark.catalog.listTables(database_name)\n",
					"    \n",
					"    # Filter tables that start with 'loop_test_'\n",
					"    loop_test_tables = [table.name for table in tables if table.name.startswith('loop_test_')]\n",
					"    \n",
					"    # Get count of records for each table\n",
					"    table_counts = {}\n",
					"    for table_name in loop_test_tables:\n",
					"        count = spark.sql(f\"SELECT COUNT(*) FROM {database_name}.{table_name}\").collect()[0][0]\n",
					"        table_counts[table_name] = count\n",
					"        print(f\"Table: {database_name}.{table_name}, Count: {count}\")\n",
					"    \n",
					"    return table_counts\n",
					"# Example usage\n",
					"database_name = 'odw_standardised_db'\n",
					"table_counts = get_loop_test_table_counts(database_name)\n",
					"print(table_counts)"
				],
				"execution_count": 4
			},
			{
				"cell_type": "code",
				"source": [
					"from pyspark.sql import SparkSession\n",
					"\n",
					"# Initialize Spark session with additional configuration checks\n",
					"spark = SparkSession.builder \\\n",
					"    .appName(\"TableComparison\") \\\n",
					"    .config(\"spark.some.config.option\", \"some-value\") \\\n",
					"    .getOrCreate()\n",
					"\n",
					"# Retrieve list of tables from the database\n",
					"tables = spark.catalog.listTables(\"odw_standardised_db\")\n",
					"\n",
					"# Separate tables with and without 'loop_test_' prefix\n",
					"loop_test_tables = [table.name for table in tables if table.name.startswith(\"loop_test_\")]\n",
					"other_tables = [table.name for table in tables if not table.name.startswith(\"loop_test_\")]\n",
					"\n",
					"# Function to remove prefix\n",
					"def remove_prefix(table_name, prefix=\"loop_test_\"):\n",
					"    if table_name.startswith(prefix):\n",
					"        return table_name[len(prefix):]\n",
					"    return table_name\n",
					"\n",
					"# Create a dictionary to store table counts\n",
					"table_counts = {}\n",
					"\n",
					"# Get counts for loop_test_tables\n",
					"for table in loop_test_tables:\n",
					"    table_name = remove_prefix(table)\n",
					"    count = spark.table(f\"odw_standardised_db.{table}\").count()\n",
					"    table_counts[table_name] = {\"loop_test_count\": count}\n",
					"\n",
					"# Get counts for other_tables and compare\n",
					"for table in other_tables:\n",
					"    table_name = remove_prefix(table)\n",
					"    if table_name in table_counts:\n",
					"        # Get count for the latest ingested_datetime\n",
					"        query = f\"\"\"\n",
					"        SELECT count(*) FROM odw_standardised_db.{table}\n",
					"        WHERE ingested_datetime = (SELECT max(ingested_datetime) FROM odw_standardised_db.{table})\n",
					"        \"\"\"\n",
					"        count = spark.sql(query).collect()[0][0]\n",
					"        table_counts[table_name][\"other_table_count\"] = count\n",
					"\n",
					"# Print the comparison results\n",
					"print(\"Comparison of table names and record counts:\")\n",
					"for table, counts in table_counts.items():\n",
					"    print(f\"Table: {table}\")\n",
					"    print(f\"  loop_test_count: {counts.get('loop_test_count', 'N/A')}\")\n",
					"    print(f\"  other_table_count: {counts.get('other_table_count', 'N/A')}\")\n",
					"    print()\n",
					"\n",
					"# Stop the Spark session\n",
					"spark.stop()"
				],
				"execution_count": 12
			},
			{
				"cell_type": "code",
				"source": [
					"from pyspark.sql import SparkSession\n",
					"\n",
					"# Initialize Spark session\n",
					"spark = SparkSession.builder.appName(\"SchemaComparison\").getOrCreate()\n",
					"\n",
					"# Retrieve list of tables from the database\n",
					"tables = spark.catalog.listTables(\"odw_standardised_db\")\n",
					"\n",
					"# Separate tables with and without 'loop_test_' prefix\n",
					"loop_test_tables = [table.name for table in tables if table.name.startswith(\"loop_test_\")]\n",
					"other_tables = [table.name for table in tables if not table.name.startswith(\"loop_test_\")]\n",
					"\n",
					"# Function to remove prefix\n",
					"def remove_prefix(table_name, prefix=\"loop_test_\"):\n",
					"    if table_name.startswith(prefix):\n",
					"        return table_name[len(prefix):]\n",
					"    return table_name\n",
					"\n",
					"# Create a dictionary to store table schemas\n",
					"table_schemas = {}\n",
					"\n",
					"# Get schemas for loop_test_tables\n",
					"for table in loop_test_tables:\n",
					"    table_name = remove_prefix(table)\n",
					"    schema = spark.table(f\"odw_standardised_db.{table}\").schema\n",
					"    table_schemas[table_name] = {\"loop_test_schema\": schema}\n",
					"\n",
					"# Get schemas for other_tables and compare\n",
					"for table in other_tables:\n",
					"    schema = spark.table(f\"odw_standardised_db.{table}\").schema\n",
					"    if table in table_schemas:\n",
					"        table_schemas[table][\"other_table_schema\"] = schema\n",
					"    else:\n",
					"        table_schemas[table] = {\"other_table_schema\": schema}\n",
					"\n",
					"# Print the comparison results\n",
					"for table, schemas in table_schemas.items():\n",
					"    print(f\"Table: {table}\")\n",
					"    print(f\"  loop_test_schema: {schemas.get('loop_test_schema', 'N/A')}\")\n",
					"    print(f\"  other_table_schema: {schemas.get('other_table_schema', 'N/A')}\")\n",
					"    print()\n",
					"\n",
					"# Stop the Spark session\n",
					"spark.stop()"
				],
				"execution_count": 10
			}
		]
	}
}