{
	"name": "py_inspector_raw_harmonised_layer1_transform",
	"properties": {
		"folder": {
			"name": "archive"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw34",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "7e44911d-8062-4f80-8837-834c3880478e"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw34",
				"name": "pinssynspodw34",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw34",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"drop table if exists odw_workspace_db.inspector_raw_layer1_harmonised;\r\n",
					"create table odw_workspace_db.inspector_raw_layer1_harmonised as \r\n",
					"SELECT\r\n",
					"\t\tid\r\n",
					"\t\t,case LEFT( r.PINS_Staff_Number, 2)\r\n",
					"\t\twhen '50' then case char_length(r.PINS_Staff_Number) \r\n",
					"\t\twhen 6 then  r.PINS_Staff_Number\r\n",
					"\t\telse substring(cast( r.PINS_Staff_Number as varchar(50)), 3, char_length(cast( r.PINS_staff_Number as varchar(50))))\r\n",
					"\t\t\tend\r\n",
					"\t\telse  r.PINS_Staff_Number\r\n",
					"\t\t\tend PINS_Join_staff_number\r\n",
					"\t\t, r.Family_Name \r\n",
					"\t\t,left(r.given_names\r\n",
					"\t\t, case when instr(' ', r.Given_Names)=0 then char_length(r.Given_Names) else instr(' ', r.Given_Names)- 1 end) as JOIN_Last_Name\r\n",
					"\t\t,r.Grade\r\n",
					"\t\t,r.PDAC_ETL_Date\r\n",
					" FROM odw_standardised_db.inspector_raw r\r\n",
					"where r.PDAC_ETL_Date > (select LastRun from odw_config_db.pipeline_runs where sourceName ='inspector_raw' )\t\r\n",
					" "
				],
				"execution_count": 16
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					}
				},
				"source": [
					"%%sql\r\n",
					"merge into odw_config_db.pipeline_runs target\r\n",
					"using (select 'inspector_raw' as source_name , max(PDAC_ETL_Date ) as max_PDAC_ETL_Date from odw_workspace_db.sap_hr_layer1_harmonised ) updates\r\n",
					"on target.sourceName=updates.source_name\r\n",
					"WHEN MATCHED THEN\r\n",
					"  UPDATE SET target.LastRun = updates.max_PDAC_ETL_Date\r\n",
					"WHEN NOT MATCHED\r\n",
					"  THEN INSERT (sourceName,LastRun) VALUES (source_name, max_PDAC_ETL_Date)"
				],
				"execution_count": null
			}
		]
	}
}