{
	"name": "Referential Integrity",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "80247606-6dfd-4587-973b-986042e377b9"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "python"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw",
				"name": "pinssynspodw",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### s51 test"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"data_s51 = spark.sql(\"\"\"\n",
					"    SELECT\n",
					"    s51.adviceId\n",
					"    ,s51.adviceReference\n",
					"    ,CASE s51.caseID\n",
					"        WHEN 'None' THEN \n",
					"            CAST(\"-1\" as INT)\n",
					"        ELSE \n",
					"            s51.caseId\n",
					"    END AS caseId\n",
					"    ,s51.caseReference\n",
					"    ,s51.title\n",
					"    ,s51.titleWelsh\n",
					"    ,s51.from\n",
					"    ,CASE LOWER(s51.agent)\n",
					"        WHEN 'none' THEN \n",
					"            NULL\n",
					"        ELSE \n",
					"            s51.agent\n",
					"    END AS agent\n",
					"    ,CASE LOWER(s51.method)\n",
					"        WHEN 'none' THEN \n",
					"            NULL\n",
					"        ELSE \n",
					"            LOWER(s51.method)\n",
					"    END AS method\n",
					"    ,s51.enquiryDate\n",
					"    ,s51.enquiryDetails\n",
					"    ,s51.enquiryDetailsWelsh\n",
					"    ,s51.adviceGivenBy\n",
					"    ,s51.adviceDate\n",
					"    ,s51.adviceDetails\n",
					"    ,s51.adviceDetailsWelsh\n",
					"    ,CASE\n",
					"        WHEN s51.status IN ('Not Checked','unchecked','Depublished') THEN \n",
					"            \"unchecked\"\n",
					"        WHEN s51.status = 'Do Not Publish' THEN \n",
					"            'donotpublish'\n",
					"        ELSE LOWER(s51.status)\n",
					"    END AS status\n",
					"    ,s51.redactionStatus\n",
					"    ,s51.attachmentIds\n",
					"FROM \n",
					"    odw_harmonised_db.nsip_s51_advice AS s51\n",
					"WHERE \n",
					"    s51.IsActive = 'Y' \"\"\")"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"row_count = data_s51.count()\n",
					"print(f\"Total rows: {row_count}\")"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"data_s51_after = spark.sql(\"\"\"\n",
					"SELECT \n",
					"    s51.adviceId\n",
					"    ,s51.adviceReference\n",
					"    ,CASE s51.caseID\n",
					"        WHEN 'None' THEN \n",
					"            CAST(\"-1\" as INT)\n",
					"        ELSE \n",
					"            s51.caseId\n",
					"    END AS caseId\n",
					"    ,proj.caseReference\n",
					"    ,s51.title\n",
					"    ,s51.titleWelsh\n",
					"    ,s51.from\n",
					"    ,CASE LOWER(s51.agent)\n",
					"        WHEN 'none' THEN \n",
					"            NULL\n",
					"        ELSE \n",
					"            s51.agent\n",
					"    END AS agent\n",
					"    ,CASE LOWER(s51.method)\n",
					"        WHEN 'none' THEN \n",
					"            NULL\n",
					"        ELSE \n",
					"            LOWER(s51.method)\n",
					"    END AS method\n",
					"    ,s51.enquiryDate\n",
					"    ,s51.enquiryDetails\n",
					"    ,s51.enquiryDetailsWelsh\n",
					"    ,s51.adviceGivenBy\n",
					"    ,s51.adviceDate\n",
					"    ,s51.adviceDetails\n",
					"    ,s51.adviceDetailsWelsh\n",
					"    ,CASE\n",
					"        WHEN s51.status IN ('Not Checked','unchecked','Depublished') THEN \n",
					"            \"unchecked\"\n",
					"        WHEN s51.status = 'Do Not Publish' THEN \n",
					"            'donotpublish'\n",
					"        ELSE LOWER(s51.status)\n",
					"    END AS status\n",
					"    ,s51.redactionStatus\n",
					"    ,s51.attachmentIds\n",
					"FROM \n",
					"    odw_harmonised_db.nsip_s51_advice AS s51\n",
					"    INNER JOIN odw_curated_db.nsip_project AS proj\n",
					"        ON s51.caseId = proj.caseId\n",
					"WHERE \n",
					"    s51.IsActive = 'Y'\n",
					"UNION \n",
					"SELECT -- We have general S51 advice not linked to a case. Unioning to make sure we bring that in too\n",
					"    s51.adviceId\n",
					"    ,s51.adviceReference\n",
					"    ,CASE s51.caseID\n",
					"        WHEN 'None' THEN \n",
					"            CAST(\"-1\" as INT)\n",
					"        ELSE \n",
					"            s51.caseId\n",
					"    END AS caseId\n",
					"    ,s51.caseReference\n",
					"    ,s51.title\n",
					"    ,s51.titleWelsh\n",
					"    ,s51.from\n",
					"    ,CASE LOWER(s51.agent)\n",
					"        WHEN 'none' THEN \n",
					"            NULL\n",
					"        ELSE \n",
					"            s51.agent\n",
					"    END AS agent\n",
					"    ,CASE LOWER(s51.method)\n",
					"        WHEN 'none' THEN \n",
					"            NULL\n",
					"        ELSE \n",
					"            LOWER(s51.method)\n",
					"    END AS method\n",
					"    ,s51.enquiryDate\n",
					"    ,s51.enquiryDetails\n",
					"    ,s51.enquiryDetailsWelsh\n",
					"    ,s51.adviceGivenBy\n",
					"    ,s51.adviceDate\n",
					"    ,s51.adviceDetails\n",
					"    ,s51.adviceDetailsWelsh\n",
					"    ,CASE\n",
					"        WHEN s51.status IN ('Not Checked','unchecked','Depublished') THEN \n",
					"            \"unchecked\"\n",
					"        WHEN s51.status = 'Do Not Publish' THEN \n",
					"            'donotpublish'\n",
					"        ELSE LOWER(s51.status)\n",
					"    END AS status\n",
					"    ,s51.redactionStatus\n",
					"    ,s51.attachmentIds\n",
					"FROM \n",
					"    odw_harmonised_db.nsip_s51_advice AS s51\n",
					"WHERE \n",
					"    s51.IsActive = 'Y'\n",
					"    AND caseReference = 'General'\"\"\")"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"row_count_a = data_s51_after.count()\n",
					"print(f\"Total rows: {row_count_a}\")"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"nsip_data = spark.sql(\"Select distinct caseReference from odw_curated_db.nsip_data nsip_d \")"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Perform a left join\n",
					"df_joined = data_s51.join(nsip_data, on='caseReference', how='left')\n",
					"\n",
					"# Filter rows where the id from df2 is null\n",
					"df_not_in_df2 = df_joined.filter(nsip_data['caseReference'].isNull())\n",
					"\n",
					"# Show the result\n",
					"\n",
					"display(df_not_in_df2.select(\"casereference\").distinct())"
				],
				"execution_count": null
			}
		]
	}
}