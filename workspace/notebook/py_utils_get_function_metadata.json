{
	"name": "py_utils_get_function_metadata",
	"properties": {
		"folder": {
			"name": "utils"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "edcc0cb4-c471-408f-b929-3b0db2afc41b"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": true,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw",
				"name": "pinssynspodw",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 32,
				"automaticScaleJobs": true
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Code to extract function metadata"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"import inspect\r\n",
					"import pandas as pd\r\n",
					"import pprint\r\n",
					"import json"
				],
				"execution_count": 1
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#### Import other functions to test this properly"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%run utils/data-validation/py_utils_data_validation_functions"
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def myfunc1(my_age: int, other_age: int) -> bool:\r\n",
					"    \"\"\"\r\n",
					"    This is a function to compare 2 ages\r\n",
					"    \"\"\"\r\n",
					"    if my_age == other_age:\r\n",
					"        age_equal = True\r\n",
					"    else:\r\n",
					"        age_equal = False\r\n",
					"\r\n",
					"    return age_equal\r\n",
					"    # return print(f'Age equal: {age_equal}')\r\n",
					"    \r\n",
					"def myfunc2(birth_town: str, country: str) -> str:\r\n",
					"    \"\"\"\r\n",
					"    This is a function to print the birth town and country of birth\r\n",
					"    \"\"\"\r\n",
					"    mybirthplace = f'I live in {birth_town} in {country}'\r\n",
					"    return mybirthplace"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#### Extract metadata from functions"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Get the current module (the module where your Jupyter Notebook is running)\r\n",
					"current_module = globals()\r\n",
					"\r\n",
					"# Initialize lists to store function information\r\n",
					"function_info = []\r\n",
					"\r\n",
					"# Filter and extract only functions\r\n",
					"functions = [item for item in current_module.items() if inspect.isfunction(item[1])]\r\n",
					"\r\n",
					"# Loop through the list of functions and gather information\r\n",
					"for name, function in functions:\r\n",
					"    # Exclude the 'main' function if it exists and others that we're not interested in\r\n",
					"    # alternatively, list the ones you ARE interested in, e.g. if name in ('func1', 'func2') etc\r\n",
					"    if name not in ('main', 'open', 'function', 'exit', 'initializeLHContext', 'display'):  \r\n",
					"\r\n",
					"        # Get function docstring\r\n",
					"        docstring = inspect.getdoc(function)\r\n",
					"\r\n",
					"        # Get function signature (arguments and type hints)\r\n",
					"        signature = inspect.signature(function)\r\n",
					"        args_with_type_hints = []\r\n",
					"        type_hints = []\r\n",
					"        for param_name, param in signature.parameters.items():\r\n",
					"            arg_with_type_hint = f\"{param_name}: {param.annotation}\"\r\n",
					"            args_with_type_hints.append(arg_with_type_hint)\r\n",
					"\r\n",
					"        return_value = None\r\n",
					"        try:\r\n",
					"            return_value = function.__annotations__['return']\r\n",
					"        except KeyError:\r\n",
					"            pass\r\n",
					"\r\n",
					"        # Add the function information to the list\r\n",
					"        function_info.append({\r\n",
					"            \"Name\": name,\r\n",
					"            \"Arguments and Type Hints\": \", \".join(args_with_type_hints),\r\n",
					"            \"Return Value\": return_value,\r\n",
					"            \"Docstring\": docstring\r\n",
					"        })\r\n",
					"\r\n",
					"# Create a DataFrame for the function information\r\n",
					"function_df = pd.DataFrame(function_info)\r\n",
					"\r\n",
					"# Set alignment for specific columns\r\n",
					"# this causes the type hints not to be displayed for some reason\r\n",
					"# function_df = function_df.style.set_properties(**{'text-align': 'left'}, subset=['Docstring'])"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#### Show the table"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Display the DataFrame\r\n",
					"function_df"
				],
				"execution_count": null
			}
		]
	}
}