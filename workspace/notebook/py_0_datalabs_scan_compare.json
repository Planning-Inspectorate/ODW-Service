{
	"name": "py_0_datalabs_scan_compare",
	"properties": {
		"folder": {
			"name": "0-odw-source-to-raw"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "5fc22cc2-ac3c-4229-9b92-0a4f4ecd2f2d"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"deltapath = \"abfss://odw-config@pinsstodwdevuks9h80mb.dfs.core.windows.net/\"+\"datalabs_log/\"\r\n",
					"def new_files_to_ingest(deltapath):\r\n",
					"    '''\r\n",
					"    Function\r\n",
					"    Args\r\n",
					"    Returns\r\n",
					"    Exceptions\r\n",
					"    '''\r\n",
					"    from pyspark.sql.functions import col\r\n",
					"    ### reads delta log\r\n",
					"    dfp = spark.read \\\r\n",
					"        .format(\"delta\") \\\r\n",
					"        .load(deltapath) \r\n",
					"    ### compares two latest partitions\r\n",
					"    all_datetimes = dfp.select('Process_Date').distinct().collect()\r\n",
					"    print(type(all_datetimes))\r\n",
					"    delta_datetimes = [datetime.datetime.now() - pd[0] for pd in all_datetimes]\r\n",
					"    \r\n",
					"    import numpy as np\r\n",
					"    sorted_delta_args = np.argsort(np.array(delta_datetimes))\r\n",
					"    print(all_datetimes, sorted_delta_args )\r\n",
					"    sorted_datetimes = [all_datetimes[i] for i in sorted_delta_args]\r\n",
					"    \r\n",
					"    ### identifies new files \r\n",
					"    latest_filenames = dfp.filter(col(\"Process_Date\") == sorted_datetimes[0][0])\r\n",
					"    latest_min1_filenames = dfp.filter(col(\"Process_Date\") == sorted_datetimes[1][0])\r\n",
					"    ### passes these parameters on in a json with msspark utils\r\n",
					"    import pandas as pd\r\n",
					"    ap = a.toPandas()\r\n",
					"    ap = ap[ap.columns.drop('Process_Date')]\r\n",
					"    bp = b.toPandas()\r\n",
					"    bp = bp[bp.columns.drop('Process_Date')]\r\n",
					"    import pandas as pd\r\n",
					"    filepaths = ','.join(pd.concat([ap,bp]).drop_duplicates(keep=False)['Filepath'])\r\n",
					"\r\n",
					"    from notebookutils import mssparkutils\r\n",
					"    # mssparkutils.notebook.exit(filepaths) \r\n",
					"    return ap\r\n",
					"ap = new_files_to_ingest(deltapath)"
				],
				"execution_count": 141
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"ap"
				],
				"execution_count": 142
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					""
				],
				"execution_count": null
			}
		]
	}
}