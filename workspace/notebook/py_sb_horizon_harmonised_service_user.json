{
	"name": "py_sb_horizon_harmonised_service_user",
	"properties": {
		"folder": {
			"name": "odw-harmonised"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "9ff2a366-a242-4ba3-bc7b-d6efb70dbf08"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw",
				"name": "pinssynspodw",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"from pyspark.sql.types import IntegerType, ArrayType, StructType, StructField\n",
					"from pyspark.sql import Row\n",
					"from pyspark.sql.functions import *"
				],
				"execution_count": 17
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# service bus source\n",
					"service_bus_table = \"odw_harmonised_db.sb_service_user\"\n",
					"\n",
					"# horizon sources\n",
					"hzn_service_user_table = \"odw_standardised_db.horizon_case_involvement\"\n",
					"hzn_nsip_project_table = \"odw_standardised_db.horizon_nsip_data\"\n",
					"hzn_nsip_representation_table = \"odw_standardised_db.horizon_nsip_relevant_representation\"\n",
					"\n",
					"# target table\n",
					"spark_table_final = \"odw_harmonised_db.service_user\""
				],
				"execution_count": 18
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### Extract Service Bus data"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Get data out of the service bus with additional fields needed for Horizon data\n",
					"service_bus_data = spark.sql(f\"\"\"\n",
					"    SELECT DISTINCT\n",
					"        ServiceUserID\n",
					"        ,id\n",
					"        ,salutation\n",
					"        ,firstname\n",
					"        ,lastname\n",
					"        ,addressline1\n",
					"        ,addressline2\n",
					"        ,addressTown\n",
					"        ,addressCounty\n",
					"        ,postcode\n",
					"        ,addressCountry\n",
					"        ,organisation\n",
					"        ,organisationType\n",
					"        ,role\n",
					"        ,telephoneNumber\n",
					"        ,otherPhoneNumber\n",
					"        ,faxNumber\n",
					"        ,emailAddress\n",
					"        ,webAddress\n",
					"        ,serviceUserType\n",
					"        ,caseReference\n",
					"        ,sourceSystem\n",
					"        ,sourceSuid\n",
					"        \n",
					"        ,Migrated\n",
					"        ,ODTSourceSystem\n",
					"        ,SourceSystemID\n",
					"        ,IngestionDate \n",
					"        ,NULLIF(ValidTo, '') AS ValidTo\n",
					"        ,'' as RowID\n",
					"        ,IsActive\n",
					"    FROM \n",
					"        {service_bus_table}\n",
					"    \"\"\")"
				],
				"execution_count": 19
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"service_bus_data.count()"
				],
				"execution_count": 20
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### Extract Horizon Data"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Appeals Case work (Appellant)"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"appeal_casework_appellant_data = spark.sql(f\"\"\"\n",
					"    SELECT DISTINCT \n",
					"        CAST(NULL AS Long) as ServiceUserID\n",
					"        ,CAST(ContactId AS String) as id\n",
					"        ,Cast(Title AS String) as salutation\n",
					"        ,Cast(FirstName AS String) as firstName\n",
					"        ,Cast(LastName AS String) as lastName\n",
					"        ,Cast(Address1 AS String) as addressLine1\n",
					"        ,Cast(Address2 AS String) as addressLine2\n",
					"        ,Cast(City AS String) as addressTown\n",
					"        ,Cast(County AS String) as addressCounty\n",
					"        ,Cast(PostCode AS String) as postcode\n",
					"        ,Cast(Country AS String) as addressCountry\n",
					"        ,Cast(OrganisationName AS String) as organisation\n",
					"        ,Cast(OrganisationTypeName AS String) as organisationType\n",
					"        ,Cast(NULL AS String) as role\n",
					"        ,Cast(TelephoneOffice AS String) as telephoneNumber\n",
					"        ,Cast(TelephoneMobile AS String) as otherPhoneNumber\n",
					"        ,Cast(Fax AS String) as faxNumber\n",
					"        ,Cast(Email AS String) as emailAddress\n",
					"        ,Cast(NULL AS String) as webAddress\n",
					"        ,Cast('Appellant' AS String) as serviceUserType\n",
					"        ,Cast(case_number AS String) as caseReference\n",
					"        ,Cast('Horizon' AS String) as sourceSystem\n",
					"        ,Cast(ContactID AS String) as sourceSuid\n",
					"\n",
					"        ,\"0\" as Migrated\n",
					"        ,\"Horizon\" as ODTSourceSystem\n",
					"        ,NULL AS SourceSystemID\n",
					"        , to_timestamp(expected_from)  AS IngestionDate\n",
					"        ,CAST(null as string) as ValidTo -- to avoid any null descrepancies\n",
					"        ,'' as RowID\n",
					"        ,'Y' as IsActive\n",
					"    FROM\n",
					"        {hzn_service_user_table}\n",
					"    WHERE\n",
					"        expected_from = (SELECT MAX(expected_from) FROM {hzn_service_user_table})\n",
					"        AND typeOfInvolvement IN ('Appellant', 'tAppellant', 'Apellant')\n",
					"\"\"\")"
				],
				"execution_count": 21
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"appeal_casework_appellant_data.count()"
				],
				"execution_count": 22
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Appeals Case work (Agent)"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"appeal_casework_agent_data = spark.sql(f\"\"\"\n",
					"    SELECT DISTINCT \n",
					"        CAST(NULL AS Long) as ServiceUserID\n",
					"        ,CAST(ContactId AS String) as id\n",
					"        ,Cast(Title AS String) as salutation\n",
					"        ,Cast(FirstName AS String) as firstName\n",
					"        ,Cast(LastName AS String) as lastName\n",
					"        ,Cast(Address1 AS String) as addressLine1\n",
					"        ,Cast(Address2 AS String) as addressLine2\n",
					"        ,Cast(City AS String) as addressTown\n",
					"        ,Cast(County AS String) as addressCounty\n",
					"        ,Cast(PostCode AS String) as postcode\n",
					"        ,Cast(Country AS String) as addressCountry\n",
					"        ,Cast(OrganisationName AS String) as organisation\n",
					"        ,Cast(OrganisationTypeName AS String) as organisationType\n",
					"        ,Cast(NULL AS String) as role\n",
					"        ,Cast(TelephoneOffice AS String) as telephoneNumber\n",
					"        ,Cast(TelephoneMobile AS String) as otherPhoneNumber\n",
					"        ,Cast(Fax AS String) as faxNumber\n",
					"        ,Cast(Email AS String) as emailAddress\n",
					"        ,Cast(NULL AS String) as webAddress\n",
					"        ,Cast('Appellant' AS String) as serviceUserType\n",
					"        ,Cast(case_number AS String) as caseReference\n",
					"        ,Cast('Horizon' AS String) as sourceSystem\n",
					"        ,Cast(ContactID AS String) as sourceSuid\n",
					"\n",
					"        ,\"0\" as Migrated\n",
					"        ,\"Horizon\" as ODTSourceSystem\n",
					"        ,NULL AS SourceSystemID\n",
					"        , to_timestamp(expected_from)  AS IngestionDate\n",
					"        ,CAST(null as string) as ValidTo -- to avoid any null descrepancies\n",
					"        ,'' as RowID\n",
					"        ,'Y' as IsActive\n",
					"    FROM\n",
					"        {hzn_service_user_table}\n",
					"    WHERE\n",
					"        expected_from = (SELECT MAX(expected_from) FROM {hzn_service_user_table})\n",
					"        AND typeOfInvolvement = 'Agent'\n",
					"\"\"\")"
				],
				"execution_count": 23
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"appeal_casework_agent_data.count()"
				],
				"execution_count": 24
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### NSIP Project"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"appeal_casework_agent_data = spark.sql(f\"\"\"\n",
					"                SELECT DISTINCT \n",
					"                    CAST(NULL AS Long) as ServiceUserID\n",
					"                    ,CAST(ContactId AS String) as id\n",
					"                    ,Cast(Title AS String) as salutation\n",
					"                    ,Cast(FirstName AS String) as firstName\n",
					"                    ,Cast(LastName AS String) as lastName\n",
					"                    ,Cast(Address1 AS String) as addressLine1\n",
					"                    ,Cast(Address2 AS String) as addressLine2\n",
					"                    ,Cast(City AS String) as addressTown\n",
					"                    ,Cast(County AS String) as addressCounty\n",
					"                    ,Cast(PostCode AS String) as postcode\n",
					"                    ,Cast(Country AS String) as addressCountry\n",
					"                    ,Cast(OrganisationName AS String) as organisation\n",
					"                    ,Cast(OrganisationTypeName AS String) as organisationType\n",
					"                    ,Cast(NULL AS String) as role\n",
					"                    ,Cast(TelephoneOffice AS String) as telephoneNumber\n",
					"                    ,Cast(TelephoneMobile AS String) as otherPhoneNumber\n",
					"                    ,Cast(Fax AS String) as faxNumber\n",
					"                    ,Cast(Email AS String) as emailAddress\n",
					"                    ,Cast(NULL AS String) as webAddress\n",
					"                    ,Cast('Appellant' AS String) as serviceUserType\n",
					"                    ,Cast(case_number AS String) as caseReference\n",
					"                    ,Cast('Horizon' AS String) as sourceSystem\n",
					"                    ,Cast(ContactID AS String) as sourceSuid\n",
					"\n",
					"                    ,\"0\" as Migrated\n",
					"                    ,\"Horizon\" as ODTSourceSystem\n",
					"                    ,NULL AS SourceSystemID\n",
					"                    , to_timestamp(expected_from)  AS IngestionDate\n",
					"                    ,CAST(null as string) as ValidTo -- to avoid any null descrepancies\n",
					"                    ,'' as RowID\n",
					"                    ,'Y' as IsActive\n",
					"                FROM\n",
					"                    {hzn_service_user_table}\n",
					"                WHERE\n",
					"                    expected_from = (SELECT MAX(expected_from) FROM {hzn_service_user_table})\n",
					"                    AND typeOfInvolvement = 'Agent'\n",
					"            \"\"\")"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#Establish aggregated view of attachmentIds\n",
					"horizon_attachement= horizon_data.groupBy(\"adviceid\").agg(collect_list(\"attachmentIds\").alias(\"attachmentIds\"))\n",
					"horizon_data = horizon_data.drop(\"attachmentIds\")\n",
					"horizon_data = horizon_data.join(horizon_attachement, on=\"adviceid\", how=\"inner\")\n",
					"\n",
					"#sort columns into same order as service bus\n",
					"horizon_data = horizon_data.select(service_bus_data.columns)"
				],
				"execution_count": 5
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"results = service_bus_data.union(horizon_data)"
				],
				"execution_count": 6
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"results.write.format(\"delta\").mode(\"Overwrite\").option(\"overwriteSchema\", \"true\").partitionBy(\"IsActive\").saveAsTable(f\"{spark_table_final}\")"
				],
				"execution_count": 7
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"\n",
					"Now need to sort internal ids, IsActive flags, and valid_to dates"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"CREATE OR REPLACE TEMPORARY VIEW vw_nsip_s51_advice_calculations_base\n",
					"AS\n",
					"SELECT  \n",
					"    row_number() OVER(PARTITION BY adviceid ORDER BY IngestionDate DESC) AS ReverseOrderProcessed\n",
					"    ,row_number() OVER(ORDER BY IngestionDate asc, adviceid asc) AS NSIPAdviceID\n",
					"    ,adviceid\n",
					"    ,IngestionDate\n",
					"    ,ValidTo\n",
					"    ,'0' AS Migrated\n",
					"    ,CASE row_number() OVER(PARTITION BY adviceid ORDER BY IngestionDate DESC)\n",
					"        WHEN 1 THEN\n",
					"            'Y'\n",
					"        ELSE\n",
					"            'N'\n",
					"    END AS IsActive                \n",
					"FROM\n",
					"    odw_harmonised_db.nsip_s51_advice"
				],
				"execution_count": 8
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df_calcs = spark.sql(\"\"\"\n",
					"                        SELECT\n",
					"                            CurrentRow.NSIPAdviceID\n",
					"                            ,CurrentRow.adviceid \n",
					"                            ,CurrentRow.IngestionDate\n",
					"                            ,COALESCE(NULLIF(CurrentRow.ValidTo,''), NextRow.IngestionDate) AS ValidTo\n",
					"                            ,CASE\n",
					"                                WHEN raw.adviceid IS NOT NULL THEN \n",
					"                                    \"1\"\n",
					"                                ELSE \n",
					"                                    \"0\"\n",
					"                            END AS Migrated\n",
					"                            ,CurrentRow.IsActive\n",
					"                        FROM\n",
					"                            vw_nsip_s51_advice_calculations_base AS CurrentRow\n",
					"                            LEFT OUTER JOIN vw_nsip_s51_advice_calculations_base AS NextRow\n",
					"                                ON CurrentRow.adviceid = NextRow.adviceid\n",
					"                                AND CurrentRow.ReverseOrderProcessed - 1 = NextRow.ReverseOrderProcessed\n",
					"                            LEFT OUTER JOIN (SELECT DISTINCT adviceid FROM  odw_harmonised_db.sb_s51_advice) AS Raw\n",
					"                                ON CurrentRow.adviceid = Raw.adviceid \n",
					"                            ORDER BY currentRow.ReverseOrderProcessed\n",
					"                    \"\"\")"
				],
				"execution_count": 9
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df_calcs =df_calcs.withColumnRenamed(\"adviceid\", \"temp_adviceid\").withColumnRenamed(\"IngestionDate\", \"temp_IngestionDate\")\n",
					""
				],
				"execution_count": 10
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"results = spark.sql(f\"\"\"\n",
					"                    SELECT DISTINCT NSIPAdviceID\n",
					"                        ,adviceId\n",
					"                        ,adviceReference\n",
					"                        ,caseId\n",
					"                        ,caseReference\n",
					"                        ,title\n",
					"                        ,titleWelsh\n",
					"                        ,from\n",
					"                        ,agent\n",
					"                        ,method\n",
					"                        ,enquiryDate\n",
					"                        ,enquiryDetails\n",
					"                        ,enquiryDetailsWelsh\n",
					"                        ,adviceGivenBy \n",
					"                        ,adviceDate\n",
					"                        ,adviceDetails\n",
					"                        ,adviceDetailsWelsh\n",
					"                        ,status\n",
					"                        ,redactionStatus\n",
					"                        ,attachmentIds\n",
					"\n",
					"                        --Start Horizon only fields\n",
					"                        ,Section51Advice\n",
					"                        ,EnquirerFirstName\n",
					"                        ,EnquirerLastName\n",
					"                        ,AdviceLastModified\n",
					"                        ,AttachmentCount\n",
					"                        ,AttachmentsLastModified\n",
					"                        ,LastPublishedDate\n",
					"                        ,WelshLanguage\n",
					"                        ,CaseWorkType\n",
					"                        --End Horizon only fields\n",
					"\n",
					"                        ,Migrated\n",
					"                        ,ODTSourceSystem\n",
					"                        ,IngestionDate\n",
					"                        ,ValidTo\n",
					"                        ,MD5(CONCAT(\n",
					"                                    IFNULL(CAST(NSIPAdviceID AS bigint), '.')\n",
					"                                    ,IFNULL(CAST(adviceId AS integer), '.')\n",
					"                                    ,IFNULL(CAST(adviceReference AS String), '.')\n",
					"                                    ,IFNULL(CAST(caseId AS integer), '.')\n",
					"                                    ,IFNULL(CAST(caseReference AS String), '.')\n",
					"                                    ,IFNULL(CAST(title AS String), '.')\n",
					"                                    ,IFNULL(CAST(titleWelsh AS String), '.')\n",
					"                                    ,IFNULL(CAST(from AS String), '.')\n",
					"                                    ,IFNULL(CAST(agent AS String), '.')\n",
					"                                    ,IFNULL(CAST(method AS String), '.')\n",
					"                                    ,IFNULL(CAST(enquiryDate AS String), '.')\n",
					"                                    ,IFNULL(CAST(enquiryDetails AS String), '.')\n",
					"                                    ,IFNULL(CAST(enquiryDetailsWelsh AS String), '.')\n",
					"                                    ,IFNULL(CAST(adviceGivenBy AS String), '.')\n",
					"                                    ,IFNULL(CAST(adviceDate AS String), '.')\n",
					"                                    ,IFNULL(CAST(adviceDetails AS String), '.')\n",
					"                                    ,IFNULL(CAST(adviceDetailsWelsh AS String), '.')\n",
					"                                    ,IFNULL(CAST(status AS String), '.')\n",
					"                                    ,IFNULL(CAST(redactionStatus AS String), '.')\n",
					"                                    ,IFNULL(CAST(attachmentIds AS String), '.')\n",
					"\n",
					"                                    ,IFNULL(CAST(Section51Advice AS String), '.')\n",
					"                                    ,IFNULL(CAST(EnquirerFirstName AS String), '.')\n",
					"                                    ,IFNULL(CAST(EnquirerLastName AS String), '.')\n",
					"                                    ,IFNULL(CAST(AdviceLastModified AS String), '.')\n",
					"                                    ,IFNULL(CAST(AttachmentCount AS String), '.')\n",
					"                                    ,IFNULL(CAST(AttachmentsLastModified AS String), '.')\n",
					"                                    ,IFNULL(CAST(LastPublishedDate AS String), '.')\n",
					"                                    ,IFNULL(CAST(WelshLanguage AS String), '.')\n",
					"                                    ,IFNULL(CAST(CaseWorkType AS String), '.')\n",
					"\n",
					"                                    ,IFNULL(CAST(Migrated AS String), '.')\n",
					"                                    ,IFNULL(CAST(ODTSourceSystem AS String), '.')\n",
					"                                    ,IFNULL(CAST(IngestionDate AS String), '.')\n",
					"                                    ,IFNULL(CAST(ValidTo AS String), '.')\n",
					"                            )\n",
					"                        ) AS RowID\n",
					"                        ,IsActive\n",
					"    FROM \n",
					"        {spark_table_final}\"\"\")\n",
					"    "
				],
				"execution_count": 11
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"columns = results.columns\n",
					"\n",
					"results = results.drop(\"NSIPAdviceID\", \"ValidTo\", \"Migrated\", \"IsActive\")"
				],
				"execution_count": 12
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"final_df = results.join(df_calcs, (df_calcs[\"temp_adviceid\"] == results[\"adviceid\"]) & (df_calcs[\"temp_IngestionDate\"] == results[\"IngestionDate\"])).select(columns)\n",
					"final_df = final_df.drop_duplicates()"
				],
				"execution_count": 13
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"\n",
					"final_df.write.format(\"delta\").mode(\"Overwrite\").option(\"overwriteSchema\", \"true\").partitionBy(\"IsActive\").saveAsTable(f\"{spark_table_final}\")"
				],
				"execution_count": 14
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"select count(*) from odw_harmonised_db.nsip_s51_advice where isactive='Y'"
				],
				"execution_count": 15
			}
		]
	}
}