{
	"name": "py_create_random_test_data",
	"properties": {
		"folder": {
			"name": "utils"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pynssynspodw34",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "da64709d-e3ec-411a-9a5d-e81bb028af2b"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": true,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pynssynspodw34",
				"name": "pynssynspodw34",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pynssynspodw34",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### This can be amended to generate some random test data for a given entity. It currently works with a flat schema so would need expanding to handle nested structs."
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import pprint\r\n",
					"import json\r\n",
					"from pyspark.sql.types import *\r\n",
					"import random\r\n",
					"from datetime import datetime, timedelta\r\n",
					"from faker import Faker\r\n",
					"from pyspark.sql.functions import lit, monotonically_increasing_id, col, when\r\n",
					"from pyspark.sql import Row, DataFrame"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"entity_name = \"nsip-subscription\"\r\n",
					"primary_key = \"subscriptionId\"\r\n",
					"std_db_name = \"odw_standardised_db\"\r\n",
					"hrm_db_name = \"odw_harmonised_db\""
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Define schemas for standardised and harmonised"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"std_schema = StructType.fromJson(json.loads(mssparkutils.notebook.run(path=\"service-bus/py_create_spark_schema\", \r\n",
					"                            arguments={\"entity_name\": entity_name, \"db_name\": std_db_name})))\r\n",
					"\r\n",
					"hrm_schema = StructType.fromJson(json.loads(mssparkutils.notebook.run(path=\"service-bus/py_create_spark_schema\", \r\n",
					"                            arguments={\"entity_name\": entity_name, \"db_name\": hrm_db_name})))"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Functions to generate a DataFrame with random values"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"faker = Faker()\r\n",
					"\r\n",
					"def generate_unique_uuids(existing_ids, count):\r\n",
					"    new_uuids = []\r\n",
					"    while len(new_uuids) < count:\r\n",
					"        new_id = faker.unique.uuid4()\r\n",
					"        if new_id not in existing_ids:\r\n",
					"            new_uuids.append(new_id)\r\n",
					"            existing_ids.add(new_id)\r\n",
					"    return new_uuids\r\n",
					"    \r\n",
					"def generate_random_value(field_name: str, field_type):\r\n",
					"    \"\"\"Generate a random value based on the field's data type.\"\"\"\r\n",
					"    if field_name == \"message_type\":\r\n",
					"        return \"Create\"\r\n",
					"    if field_name == \"message_id\":\r\n",
					"        return faker.unique.uuid4()\r\n",
					"    if field_name == \"IsActive\":\r\n",
					"        return random.choice([\"Y\"])\r\n",
					"    if field_name == \"caseReference\":\r\n",
					"        return f\"TR{random.randint(1, 10**6)}\"\r\n",
					"    if isinstance(field_type, StringType):\r\n",
					"        return faker.word()\r\n",
					"    elif isinstance(field_type, LongType):\r\n",
					"        return random.randint(1, 10**9)\r\n",
					"    elif isinstance(field_type, IntegerType):\r\n",
					"        return random.randint(1, 10**5)\r\n",
					"    elif isinstance(field_type, DoubleType):\r\n",
					"        return random.uniform(1.0, 1000.0)\r\n",
					"    elif isinstance(field_type, FloatType):\r\n",
					"        return random.uniform(1.0, 100.0)\r\n",
					"    elif isinstance(field_type, TimestampType):\r\n",
					"        return datetime.now() - timedelta(seconds=random.randint(0, 86400 * 365))\r\n",
					"    elif isinstance(field_type, DateType):\r\n",
					"        return datetime.now().date() - timedelta(days=random.randint(0, 365))\r\n",
					"    elif isinstance(field_type, BooleanType):\r\n",
					"        return random.choice([True, False])\r\n",
					"    else:\r\n",
					"        return None\r\n",
					"\r\n",
					"def generate_random_row(schema):\r\n",
					"    \"\"\"Generate a random row of data based on the schema.\"\"\"\r\n",
					"    return {field.name: generate_random_value(field.name, field.dataType) for field in schema.fields}\r\n",
					"\r\n",
					"def generate_random_dataframe(schema: StructType, num_records: int):\r\n",
					"    \"\"\"Generate a PySpark DataFrame with random data based on the schema.\"\"\"\r\n",
					"    # Generate random data\r\n",
					"    data = [generate_random_row(schema) for _ in range(num_records)]\r\n",
					"    \r\n",
					"    # Create DataFrame\r\n",
					"    return spark.createDataFrame(data, schema=schema)"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Create standardised DataFrame"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"num_records = 10_000\r\n",
					"std_df = generate_random_dataframe(std_schema, num_records)"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"display(std_df.head(10))"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Create harmonised DataFrame"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"num_records = 10_000\r\n",
					"hrm_df = generate_random_dataframe(hrm_schema, num_records)"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"display(hrm_df.head(10))"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"# sample size is how many deletes we want to generate \r\n",
					"sample_size = 1_000\r\n",
					"sample_hrm_df = hrm_df.limit(sample_size)\r\n",
					"sample_std_df = std_df.limit(sample_size)\r\n",
					"\r\n",
					"sample_records = (\r\n",
					"    sample_hrm_df.select(primary_key).distinct()\r\n",
					"    )\r\n",
					"\r\n",
					"sample_records_list = sample_records.select(primary_key).rdd.flatMap(lambda x: x).collect()\r\n",
					"\r\n",
					"# print(sample_records_list)"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"updated_rows = spark.createDataFrame(\r\n",
					"    [\r\n",
					"        row.asDict() | {primary_key: sample_records_list[i], \"message_type\": \"Delete\"}\r\n",
					"        for i, row in enumerate(sample_std_df.collect())\r\n",
					"    ],\r\n",
					"    schema=std_df.schema,\r\n",
					")\r\n",
					"\r\n",
					"display(updated_rows.head(10))"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"final_std_df = std_df.union(updated_rows)\r\n",
					"display(final_std_df.head(10))"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Tests"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def test_deletes(df: DataFrame):\r\n",
					"    \"\"\"\r\n",
					"    Assert that all rows where IsActive = N have a ValidTo set\r\n",
					"    \"\"\"\r\n",
					"    deleted_rows = df.filter(col(\"IsActive\") == \"N\").collect()\r\n",
					"    for row in deleted_rows:\r\n",
					"        assert row[\"ValidTo\"] is not None, f\"Row with subscriptionId={row['subscriptionId']} has IsActive='N' but ValidTo is null\"\r\n",
					"\r\n",
					"test_deletes(joined_df)"
				],
				"execution_count": null
			}
		]
	}
}