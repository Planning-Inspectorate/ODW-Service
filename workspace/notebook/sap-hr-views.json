{
	"name": "sap-hr-views",
	"properties": {
		"folder": {
			"name": "odw-harmonised/SAP-HR"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "b5249950-a040-4549-b605-e474aefe043f"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw",
				"name": "pinssynspodw",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net",
					"authHeader": null
				},
				"sparkVersion": "3.2",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"extraHeader": null
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql   \r\n",
					"\r\n",
					"CREATE OR REPLACE VIEW odw_standardised_db.vw_absences\r\n",
					"\r\n",
					"AS\r\n",
					"\r\n",
					"SELECT \r\n",
					"    CASE \r\n",
					"        WHEN LENGTH(Staff_Number) = 6 AND SUBSTR(Staff_Number,1,1) = 5\r\n",
					"        THEN CONCAT('00',Staff_Number)\r\n",
					"        WHEN LENGTH(Staff_Number) = 6 AND SUBSTR(Staff_Number,1,1) = 4\r\n",
					"        THEN CONCAT('50',Staff_Number)        \r\n",
					"        ELSE Staff_Number\r\n",
					"    END as Staff_Number,\r\n",
					"    Abs_Type,\r\n",
					"    Sickness_Group,\r\n",
					"    Start_Date,\r\n",
					"    End_Date,\r\n",
					"    Attendance_or_Absence_Type,\r\n",
					"    Days,\r\n",
					"    Hrs,\r\n",
					"    Start,\r\n",
					"    End_time,\r\n",
					"    Cal_days,\r\n",
					"    Work_Schedule_Rule,\r\n",
					"    Wk_Hrs,\r\n",
					"    Hrs_Day,\r\n",
					"    WkDys,\r\n",
					"    Annual_Leave_Start,\r\n",
					"    ingested_datetime,\r\n",
					"    expected_from,\r\n",
					"    expected_to\r\n",
					"\r\n",
					"FROM odw_standardised_db.hr_absences T1\r\n",
					"INNER JOIN (SELECT MAX(expected_from) AS Max_expectedfrom FROM odw_standardised_db.hr_absences) MEF ON T1.expected_from = MEF.Max_expectedfrom"
				],
				"execution_count": 11
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql   \r\n",
					"\r\n",
					"CREATE OR REPLACE VIEW odw_standardised_db.vw_addresses\r\n",
					"\r\n",
					"AS\r\n",
					"\r\n",
					"SELECT \r\n",
					"    CASE \r\n",
					"        WHEN LENGTH(Staff_Number) = 6 AND SUBSTR(Staff_Number,1,1) = 5\r\n",
					"        THEN CONCAT('00',Staff_Number)\r\n",
					"        WHEN LENGTH(Staff_Number) = 6 AND SUBSTR(Staff_Number,1,1) = 4\r\n",
					"        THEN CONCAT('50',Staff_Number)        \r\n",
					"        ELSE Staff_Number\r\n",
					"    END as Staff_Number,\r\n",
					"    Street_and_House_Number,\r\n",
					"    `2nd_Address_Line`,\r\n",
					"    City,\r\n",
					"    District,\r\n",
					"    Postal_Code,\r\n",
					"    Region_State_Province_Count,\r\n",
					"    Start_Date,\r\n",
					"    End_Date,\r\n",
					"    Charting_Officer,\r\n",
					"    Charting_Officer_for_Inspector,\r\n",
					"    Subs_PS_Group,\r\n",
					"    Tel_No,\r\n",
					"    Personal_Mobile,\r\n",
					"    Work_Mobile,\r\n",
					"    Chngd_on,\r\n",
					"    ingested_datetime,\r\n",
					"    expected_from,\r\n",
					"    expected_to\r\n",
					"\r\n",
					"FROM odw_standardised_db.hr_addresses T1\r\n",
					"INNER JOIN (SELECT MAX(expected_from) AS Max_expectedfrom FROM odw_standardised_db.hr_addresses) MEF ON T1.expected_from = MEF.Max_expectedfrom\r\n",
					""
				],
				"execution_count": 12
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql   \r\n",
					"\r\n",
					"CREATE OR REPLACE VIEW odw_standardised_db.vw_email\r\n",
					"\r\n",
					"AS\r\n",
					"\r\n",
					"SELECT \r\n",
					"    CASE \r\n",
					"        WHEN LENGTH(Staff_Number) = 6 AND SUBSTR(Staff_Number,1,1) = 5\r\n",
					"        THEN CONCAT('00',Staff_Number)\r\n",
					"        WHEN LENGTH(Staff_Number) = 6 AND SUBSTR(Staff_Number,1,1) = 4\r\n",
					"        THEN CONCAT('50',Staff_Number)        \r\n",
					"        ELSE Staff_Number\r\n",
					"    END as Staff_Number,\r\n",
					"    first_name,\r\n",
					"    last_name,\r\n",
					"    email_address,\r\n",
					"    text_line_manager,\r\n",
					"    lm_e_mail,\r\n",
					"    ingested_datetime,\r\n",
					"    expected_from,\r\n",
					"    expected_to\r\n",
					"\r\n",
					"FROM odw_standardised_db.hr_email T1\r\n",
					"INNER JOIN (SELECT MAX(expected_from) AS Max_expectedfrom FROM odw_standardised_db.hr_email) MEF ON T1.expected_from = MEF.Max_expectedfrom"
				],
				"execution_count": 13
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql   \r\n",
					"\r\n",
					"CREATE OR REPLACE VIEW odw_standardised_db.vw_leave\r\n",
					"\r\n",
					"AS\r\n",
					"\r\n",
					"SELECT \r\n",
					"    CASE \r\n",
					"        WHEN LENGTH(Staff_Number) = 6 AND SUBSTR(Staff_Number,1,1) = 5\r\n",
					"        THEN CONCAT('00',Staff_Number)\r\n",
					"        WHEN LENGTH(Staff_Number) = 6 AND SUBSTR(Staff_Number,1,1) = 4\r\n",
					"        THEN CONCAT('50',Staff_Number)        \r\n",
					"        ELSE Staff_Number\r\n",
					"    END as Staff_Number,\r\n",
					"    number,\r\n",
					"    deduction,\r\n",
					"    ded_from,\r\n",
					"    ded_to,\r\n",
					"    absence_quota_type,\r\n",
					"    ingested_datetime,\r\n",
					"    expected_from,\r\n",
					"    expected_to\r\n",
					"\r\n",
					"FROM odw_standardised_db.hr_leave T1\r\n",
					"INNER JOIN (SELECT MAX(expected_from) AS Max_expectedfrom FROM odw_standardised_db.hr_leave) MEF ON T1.expected_from = MEF.Max_expectedfrom"
				],
				"execution_count": 14
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql   \r\n",
					"\r\n",
					"CREATE OR REPLACE VIEW odw_standardised_db.vw_leavers\r\n",
					"\r\n",
					"AS\r\n",
					"\r\n",
					"SELECT \r\n",
					"    CASE \r\n",
					"        WHEN LENGTH(Pers_No) = 6 AND SUBSTR(Pers_No,1,1) = 5\r\n",
					"        THEN CONCAT('00',Pers_No)\r\n",
					"        WHEN LENGTH(Pers_No) = 6 AND SUBSTR(Pers_No,1,1) = 4\r\n",
					"        THEN CONCAT('50',Pers_No)        \r\n",
					"        ELSE Pers_No\r\n",
					"    END as Pers_No,\r\n",
					"    Last_name,\r\n",
					"    First_name,\r\n",
					"    CoCd,\r\n",
					"    Company_Code,\r\n",
					"    Loc,\r\n",
					"    Location,\r\n",
					"    PS_group,\r\n",
					"    Pay_Band_Description,\r\n",
					"    Org_unit,\r\n",
					"    Organizational_Unit,\r\n",
					"    PA,\r\n",
					"    Personnel_Area,\r\n",
					"    Personnel_Subarea,\r\n",
					"    WorkC,\r\n",
					"    Work_Contract,\r\n",
					"    Org_Start_Date,\r\n",
					"    Leaving,\r\n",
					"    Act,\r\n",
					"    Action_Type,\r\n",
					"    ActR,\r\n",
					"    Reason_for_Action,\r\n",
					"    S,\r\n",
					"    Employment_Status,\r\n",
					"    Employee_No,\r\n",
					"    Position,\r\n",
					"    Position_1,\r\n",
					"    Annual_salary,\r\n",
					"    Curr,\r\n",
					"    User_ID,\r\n",
					"    Email_Address,\r\n",
					"    Pers_No_1,\r\n",
					"    Name_of_Manager_OM,\r\n",
					"    Manager_Position,\r\n",
					"    MAnager_Position_Text,\r\n",
					"    LM_E_mail,\r\n",
					"    ingested_datetime,\r\n",
					"    expected_from,\r\n",
					"    expected_to\r\n",
					"\r\n",
					"FROM odw_standardised_db.hr_leavers T1\r\n",
					"INNER JOIN (SELECT MAX(expected_from) AS Max_expectedfrom FROM odw_standardised_db.hr_leavers) MEF ON T1.expected_from = MEF.Max_expectedfrom"
				],
				"execution_count": 15
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql   \r\n",
					"\r\n",
					"CREATE OR REPLACE VIEW odw_standardised_db.vw_protected_characteristics\r\n",
					"\r\n",
					"AS\r\n",
					"\r\n",
					"SELECT \r\n",
					"    ref_no,\r\n",
					"    ethnic_origin,\r\n",
					"    religious_denomination_key,\r\n",
					"    sxo,\r\n",
					"    disability_text,\r\n",
					"    disability_code_description,\r\n",
					"    disabled,\r\n",
					"    ethnicity,\r\n",
					"    religion,\r\n",
					"    sexual_orientation,\r\n",
					"    grade\r\n",
					"    ingested_datetime,\r\n",
					"    expected_from,\r\n",
					"    expected_to\r\n",
					"\r\n",
					"FROM odw_standardised_db.hr_protected_characteristics T1\r\n",
					"INNER JOIN (SELECT MAX(expected_from) AS Max_expectedfrom FROM odw_standardised_db.hr_protected_characteristics) MEF ON T1.expected_from = MEF.Max_expectedfrom"
				],
				"execution_count": 16
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql   \r\n",
					"\r\n",
					"CREATE OR REPLACE VIEW odw_standardised_db.vw_saphr\r\n",
					"\r\n",
					"AS\r\n",
					"\r\n",
					"SELECT \r\n",
					"    CASE \r\n",
					"        WHEN LENGTH(Pers_No) = 6 AND SUBSTR(Pers_No,1,1) = 5\r\n",
					"        THEN CONCAT('00',Pers_No)\r\n",
					"        WHEN LENGTH(Pers_No) = 6 AND SUBSTR(Pers_No,1,1) = 4\r\n",
					"        THEN CONCAT('50',Pers_No)        \r\n",
					"        ELSE Pers_No\r\n",
					"    END as Pers_No,\r\n",
					"    First_name,\r\n",
					"    Last_name,\r\n",
					"    Employee_No,\r\n",
					"    CoCd,\r\n",
					"    Company_Code,\r\n",
					"    PA,\r\n",
					"    Personnel_Area,\r\n",
					"    PSubarea,\r\n",
					"    Personnel_Subarea,\r\n",
					"    Org_Unit,\r\n",
					"    Organizational_Unit,\r\n",
					"    Organizational_key1,\r\n",
					"    Organizational_key2,\r\n",
					"    WorkC,\r\n",
					"    Work_Contract,\r\n",
					"    CT,\r\n",
					"    Contract_Type,\r\n",
					"    PS_Group,\r\n",
					"    Pay_Band_Description,\r\n",
					"    FTE,\r\n",
					"    Wk_hrs,\r\n",
					"    Indicator_Part_Time_Employee,\r\n",
					"    S,\r\n",
					"    Employment_Status,\r\n",
					"    Gender_Key,\r\n",
					"    TRA_Start_Date,\r\n",
					"    TRA_End_Date,\r\n",
					"    TRA_Status,\r\n",
					"    TRA_Grade,\r\n",
					"    Prev_PersNo,\r\n",
					"    ActR,\r\n",
					"    Reason_for_Action,\r\n",
					"    Position,\r\n",
					"    Position_1,\r\n",
					"    Cost_Ctr,\r\n",
					"    Cost_Centre,\r\n",
					"    Civil_Service_Start,\r\n",
					"    Date_to_Current_Job,\r\n",
					"    Seniority_Date,\r\n",
					"    Date_to_Subst_Grade,\r\n",
					"    Pers_No_1,\r\n",
					"    Name_of_Manager_OM,\r\n",
					"    Manager_Position,\r\n",
					"    Manager_Position_Text,\r\n",
					"    Counter_Sign_Manager,\r\n",
					"    Loc,\r\n",
					"    Location,\r\n",
					"    Org_Start_Date,\r\n",
					"    Fix_Term_End_Date,\r\n",
					"    Loan_Start_Date,\r\n",
					"    Loan_End_Date,\r\n",
					"    EEGrp,\r\n",
					"    Employee_Group,\r\n",
					"    Annual_salary,\r\n",
					"    Curr,\r\n",
					"    NI_number,\r\n",
					"    Birth_date,\r\n",
					"    Age_of_employee,\r\n",
					"    EO,\r\n",
					"    Ethnic_origin,\r\n",
					"    NID,\r\n",
					"    Rel,\r\n",
					"    Religious_Denomination_Key,\r\n",
					"    SxO,\r\n",
					"    Wage_Type,\r\n",
					"    Employee_Subgroup,\r\n",
					"    LOA_Abs_Type,\r\n",
					"    LOA_Absence_Type_Text,\r\n",
					"    Scheme_reference,\r\n",
					"    Pension_Scheme_Name,\r\n",
					"    Disability_Code,\r\n",
					"    Disability_Text,\r\n",
					"    Disability_Code_Description,\r\n",
					"    PArea,\r\n",
					"    Payroll_Area,\r\n",
					"    Assignment_Number,\r\n",
					"    FTE_2,\r\n",
					"    ingested_datetime,\r\n",
					"    expected_from,\r\n",
					"    expected_to\r\n",
					"\r\n",
					"FROM odw_standardised_db.hr_saphr T1\r\n",
					"INNER JOIN (SELECT MAX(expected_from) AS Max_expectedfrom FROM odw_standardised_db.hr_saphr) MEF ON T1.expected_from = MEF.Max_expectedfrom"
				],
				"execution_count": 17
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql   \r\n",
					"\r\n",
					"CREATE OR REPLACE VIEW odw_standardised_db.vw_specialisms\r\n",
					"\r\n",
					"AS\r\n",
					"\r\n",
					"SELECT \r\n",
					"    CASE \r\n",
					"        WHEN LENGTH(Staff_Number) = 6 AND SUBSTR(Staff_Number,1,1) = 5\r\n",
					"        THEN CONCAT('00',Staff_Number)\r\n",
					"        WHEN LENGTH(Staff_Number) = 6 AND SUBSTR(Staff_Number,1,1) = 4\r\n",
					"        THEN CONCAT('50',Staff_Number)        \r\n",
					"        ELSE Staff_Number\r\n",
					"    END as Staff_Number,\r\n",
					"    first_name,\r\n",
					"    last_name,\r\n",
					"    qualification_name,\r\n",
					"    proficien,\r\n",
					"    ingested_datetime,\r\n",
					"    expected_from,\r\n",
					"    expected_to\r\n",
					"\r\n",
					"FROM odw_standardised_db.hr_specialisms T1\r\n",
					"INNER JOIN (SELECT MAX(expected_from) AS Max_expectedfrom FROM odw_standardised_db.hr_specialisms) MEF ON T1.expected_from = MEF.Max_expectedfrom"
				],
				"execution_count": 18
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql   \r\n",
					"\r\n",
					"CREATE OR REPLACE VIEW odw_standardised_db.vw_saphr_historic\r\n",
					"\r\n",
					"AS\r\n",
					"\r\n",
					"SELECT \r\n",
					"    CASE \r\n",
					"        WHEN LENGTH(T1.Pers_No) = 6 AND SUBSTR(T1.Pers_No,1,1) = 5\r\n",
					"        THEN CONCAT('00',T1.Pers_No)\r\n",
					"        WHEN LENGTH(T1.Pers_No) = 6 AND SUBSTR(T1.Pers_No,1,1) = 4\r\n",
					"        THEN CONCAT('50',T1.Pers_No)        \r\n",
					"        ELSE T1.Pers_No\r\n",
					"    END as Pers_No,\r\n",
					"    First_name,\r\n",
					"    Last_name,\r\n",
					"    Employee_No,\r\n",
					"    CoCd,\r\n",
					"    Company_Code,\r\n",
					"    PA,\r\n",
					"    Personnel_Area,\r\n",
					"    PSubarea,\r\n",
					"    Personnel_Subarea,\r\n",
					"    Org_Unit,\r\n",
					"    Organizational_Unit,\r\n",
					"    Organizational_key,\r\n",
					"    Organizational_key1,\r\n",
					"    WorkC,\r\n",
					"    Work_Contract,\r\n",
					"    CT,\r\n",
					"    Contract_Type,\r\n",
					"    PS_Group,\r\n",
					"    Pay_Band_Description,\r\n",
					"    FTE,\r\n",
					"    Wk_hrs,\r\n",
					"    Indicator_Part_Time_Employee,\r\n",
					"    S,\r\n",
					"    Employment_Status,\r\n",
					"    Gender_Key,\r\n",
					"    TRA_Start_Date,\r\n",
					"    TRA_End_Date,\r\n",
					"    TRA_Status,\r\n",
					"    TRA_Grade,\r\n",
					"    Prev_PersNo,\r\n",
					"    ActR,\r\n",
					"    Reason_for_Action,\r\n",
					"    Position,\r\n",
					"    Position1,\r\n",
					"    Cost_Ctr,\r\n",
					"    Cost_Centre,\r\n",
					"    Civil_Service_Start,\r\n",
					"    Date_to_Current_Job,\r\n",
					"    Seniority_Date,\r\n",
					"    Date_to_Subst_Grade,\r\n",
					"    Pers_No_1,\r\n",
					"    Name_of_Manager_OM,\r\n",
					"    Manager_Position,\r\n",
					"    Manager_Position_Text,\r\n",
					"    Counter_Sign_Manager,\r\n",
					"    Loc,\r\n",
					"    Location,\r\n",
					"    Org_Start_Date,\r\n",
					"    Fix_Term_End_Date,\r\n",
					"    Loan_Start_Date,\r\n",
					"    Loan_End_Date,\r\n",
					"    EEGrp,\r\n",
					"    Employee_Group,\r\n",
					"    Annual_salary,\r\n",
					"    Curr,\r\n",
					"    NI_number,\r\n",
					"    Birth_date,\r\n",
					"    Age_of_employee,\r\n",
					"    EO,\r\n",
					"    Ethnic_origin,\r\n",
					"    NID,\r\n",
					"    Rel,\r\n",
					"    Religious_Denomination_Key,\r\n",
					"    SxO,\r\n",
					"    Wage_Type,\r\n",
					"    Employee_Subgroup,\r\n",
					"    LOA_Abs_Type,\r\n",
					"    LOA_Absence_Type_Text,\r\n",
					"    Scheme_reference,\r\n",
					"    Pension_Scheme_Name,\r\n",
					"    Disability_Code,\r\n",
					"    Disability_Text,\r\n",
					"    Disability_Code_Description,\r\n",
					"    PArea,\r\n",
					"    Payroll_Area,\r\n",
					"    Assignment_Number,\r\n",
					"    FTE_2,\r\n",
					"    ingested_datetime,\r\n",
					"    expected_from,\r\n",
					"    expected_to,\r\n",
					"    report_monthend_date\r\n",
					"\r\n",
					"FROM odw_standardised_db.sap_hr_historic T1\r\n",
					"INNER JOIN (    SELECT MAX(expected_from) AS Max_expectedfrom FROM odw_standardised_db.sap_hr_historic) MEF ON T1.expected_from = MEF.Max_expectedfrom\r\n",
					"INNER JOIN (    SELECT Pers_No, MAX(report_monthend_date) AS Max_Rpt_Monthend_Date\r\n",
					"                FROM odw_standardised_db.sap_hr_historic\r\n",
					"                Group by Pers_No) Rpt_Date ON T1.Pers_No = Rpt_Date.Pers_No AND\r\n",
					"                                        T1.report_monthend_date = Rpt_Date.Max_Rpt_Monthend_Date"
				],
				"execution_count": 19
			}
		]
	}
}