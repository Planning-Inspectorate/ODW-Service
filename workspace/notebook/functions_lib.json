{
	"name": "functions_lib",
	"properties": {
		"description": "functions to be used across different folders",
		"folder": {
			"name": "utils"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "7b099fe0-3925-4bb7-9ca5-f8516ae1b1d8"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "python"
			},
			"language_info": {
				"name": "python"
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"def ingest_excel_to_df(storage_acc, filepath, sheet_name, header):\r\n",
					"\r\n",
					"    ### initialising spark session and setting appopriate spark variables\r\n",
					"    from pyspark.sql import SparkSession\r\n",
					"    spark = SparkSession.builder.getOrCreate()\r\n",
					"    source_full_storage_account_name = storage_acc\r\n",
					"    spark.conf.set(f\"spark.storage.synapse.{source_full_storage_account_name}.linkedServiceName\", \"ls_storage\")\r\n",
					"    spark.conf.set(f\"fs.azure.account.oauth.provider.type.{source_full_storage_account_name}\", \"com.microsoft.azure.synapse.tokenlibrary.LinkedServiceBasedTokenProvider\")\r\n",
					"\r\n",
					"    ### reading file with abfss file format\r\n",
					"    import pandas as pd\r\n",
					"    df = pd.read_excel(\"abfss://temp-sap-hr-data@pinsstodwdevuks9h80mb.dfs.core.windows.net/HR Absence Data 20220731.xlsx\")\r\n",
					"    return df"
				],
				"execution_count": null
			}
		]
	}
}