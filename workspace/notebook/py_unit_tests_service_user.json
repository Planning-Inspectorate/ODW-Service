{
	"name": "py_unit_tests_service_user",
	"properties": {
		"folder": {
			"name": "utils/unit-tests"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "4383e448-5b3e-4fdf-b0df-ef07e1be4dda"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": true,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw",
				"name": "pinssynspodw",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import json\n",
					"from pyspark.sql.types import *\n",
					"from pyspark.sql import DataFrame\n",
					"import pprint\n",
					"from pyspark.sql.functions import col\n",
					"from pyspark.sql import functions as F\n",
					""
				],
				"execution_count": 79
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#keep track of the exitCodes, if the exit code is not zero then we've had failures, we flip the boolean\n",
					"exitCode: int = 0"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"entity_name: str = 'service-user'\n",
					"\n",
					"std_db_name: str = 'odw_standardised_db'\n",
					"hrm_db_name: str = 'odw_harmonised_db'\n",
					"curated_db_name: str = 'odw_curated_db'\n",
					"curated_migration_db_name: str = 'odw_curated_migration_db'\n",
					"\n",
					"std_table_name: str = 'sb_service_user'\n",
					"hrm_table_name: str = 'sb_service_user'\n",
					"hrm_table_final: str = 'service_user'\n",
					"\n",
					"# curated tables\n",
					"service_user_appeal_table: str = 'appeal_service_user'\n",
					"service_user_migration_table: str = 'service_user'"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%run /utils/unit-tests/py_unit_tests_functions"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"sb_std_schema = create_spark_schema(std_db_name, entity_name)\n",
					"sb_std_table_schema = spark.table(f\"{std_db_name}.{std_table_name}\").schema\n",
					"\n",
					"sb_hrm_schema = create_spark_schema(hrm_db_name, entity_name)\n",
					"sb_hrm_table_schema = spark.table(f\"{hrm_db_name}.{hrm_table_name}\").schema\n",
					"\n",
					"curated_schema = create_spark_schema(curated_db_name, entity_name)\n",
					"curated_table_schema = spark.table(f\"{curated_db_name}.{service_user_appeal_table}\").schema\n",
					"\n",
					"curated_migration_schema = create_spark_schema(curated_migration_db_name, entity_name)\n",
					"curated_migration_table_schema = spark.table(f\"{curated_migration_db_name}.{service_user_migration_table}\").schema"
				],
				"execution_count": 68
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Compare schemas"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"std_schema_correct: bool = test_compare_schemas(sb_std_schema, sb_std_table_schema)\n",
					"exitCode += int(not std_schema_correct)\n",
					"print(f\"Service bus standardised schema correct: {std_schema_correct}\\nTable: {std_db_name}.{std_table_name}\\nDifferences shown above (if any)\")\n",
					"\n",
					"hrm_schema_correct: bool = test_compare_schemas(sb_hrm_schema, sb_hrm_table_schema)\n",
					"print(f\"Service bus harmonised schema correct: {hrm_schema_correct}\\nTable: {hrm_db_name}.{hrm_table_name}\\nDifferences shown above (if any)\")\n",
					"exitCode += int(not hrm_schema_correct)\n",
					"\n",
					"cur_schema_correct: bool = test_compare_schemas(curated_schema, curated_table_schema)\n",
					"exitCode += int(not cur_schema_correct)\n",
					"print(f\"Curated schema correct: {cur_schema_correct}\\nTable: {curated_db_name}.{service_user_appeal_table}\\nDifferences shown above (if any)\")\n",
					"\n",
					"# note - 21-10-24 this code was previously commented out, when run it is finding a column that isn't in the schema so need to check if it's the correct way to make the schema for the migration table \n",
					"#cur_migration_schema_correct: bool = test_compare_schemas(curated_migration_schema, curated_migration_table_schema)\n",
					"#print(f\"Curated migration schema correct: {cur_migration_schema_correct}\\nTable: {curated_migration_db_name}.{service_user_migration_table}\\nDifferences shown above (if any)\")\n",
					"#exitCode += int(not cur_migration_schema_correct)"
				],
				"execution_count": 69
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Compare service bus standardised with harmonised\n",
					"Should be the same count"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"standardised_count, harmonised_count, counts_match = test_std_same_rows_hrm(std_table_name, hrm_table_name)\n",
					"print(f\"Standardised Count: {standardised_count: ,}\\nHarmonised Count: {harmonised_count: ,}\\nCounts match: {counts_match}\")\n",
					"\n",
					"if standardised_count > harmonised_count:\n",
					"    print(f\"{standardised_count - harmonised_count} rows from Standardised are missing in Harmonised.\" )\n",
					"    differentiate_std_and_hrm(f\"{std_db_name}.{std_table_name}\", f\"{hrm_db_name}.{hrm_table_name}\", [])\n",
					"    #this is classed as an error\n",
					"    exitCode += 1 "
				],
				"execution_count": 70
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#service bus standardised to service bus harmonised no dropping records\n",
					"if test_sb_std_to_sb_hrm_no_dropping_records(std_table_name, hrm_table_name, 'id'):\n",
					"    pass\n",
					"else:\n",
					"    exitCode += 1"
				],
				"execution_count": 71
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# commented out because it's being silly about the extra argument even though it's committed to the functions notebook - turn back on once work is done\n",
					"#if test_sb_hrm_to_hrm_final_no_dropping_records(hrm_table_name, hrm_table_final, 'id'):\n",
					"#    pass\n",
					"#else:\n",
					"#    exitCode += 1"
				],
				"execution_count": 72
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"if test_hrm_to_curated_no_dropping_records(hrm_table_final, service_user_appeal_table, 'id'):\n",
					"    pass\n",
					"else:\n",
					"    exitCode += 1"
				],
				"execution_count": 73
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"if test_curated_unique_hzn_only(curated_db_name, service_user_appeal_table, 'id'):\n",
					"    pass\n",
					"else:\n",
					"    exitCode += 1"
				],
				"execution_count": 74
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### Unit Tests from Requirements\n",
					"https://pins-ds.atlassian.net/wiki/spaces/ODW/pages/1797488641/Requirements+-+Service+User+Migration"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#### There should be a single applicant for every project.  "
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"# Check if there are multiple applicants for a single project\n",
					"def test_single_applicant_per_project():\n",
					"    df = spark.sql(f\"\"\"\n",
					"        SELECT caseReference, COUNT(*) AS applicant_count\n",
					"        FROM odw_curated_migration_db.service_user\n",
					"        WHERE serviceUserType = 'Applicant'\n",
					"        GROUP BY caseReference\n",
					"        HAVING COUNT(*) > 1;\n",
					"    \"\"\")\n",
					"\n",
					"    return df.count() == 0\n",
					"\n",
					"if test_single_applicant_per_project():\n",
					"    print('PASS: There is a single applicant per project')\n",
					"else:\n",
					"    exitCode += 1  "
				],
				"execution_count": 75
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Verify that every project has an applicant\n",
					"def test_project_with_no_applicant():\n",
					"    df = spark.sql(f\"\"\"\n",
					"        SELECT p.caseReference\n",
					"        FROM odw_curated_migration_db.nsip_project p\n",
					"        LEFT JOIN odw_curated_migration_db.service_user u \n",
					"            ON p.caseReference = u.caseReference\n",
					"        WHERE u.caseReference IS NULL \n",
					"            AND p.caseReference IS NOT NULL ;\n",
					"    \"\"\")\n",
					"\n",
					"    return df.count() == 0\n",
					"\n",
					"if test_project_with_no_applicant(): \n",
					"    print('PASS: Each project has an applicant')\n",
					"else:\n",
					"    print('FAIL: Each project has an applicant')\n",
					"    exitCode += 1  "
				],
				"execution_count": 76
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#### The count of Representations for each case must be the following in dev/test\n",
					"- EN010004: 6410\n",
					"- EN010044: 618\n",
					"- EN010080: 154\n",
					"- TR040004: 39"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"table= 'odw_harmonised_db.service_user'\n",
					"\n",
					"df_service_user_represented = spark.table(table).filter((col('IsActive') == 'Y') & (col(\"serviceUserTypeInternal\") == \"RepresentationContact_Represented\"))\n",
					"\n",
					"count_EN010004 = df_service_user_represented.filter(col(\"caseReference\") == \"EN010004\").count()\n",
					"count_EN010044 = df_service_user_represented.filter(col(\"caseReference\") == \"EN010044\").count()\n",
					"count_EN010080 = df_service_user_represented.filter(col(\"caseReference\") == \"EN010080\").count()\n",
					"count_TR040004 = df_service_user_represented.filter(col(\"caseReference\") == \"TR040004\").count()\n",
					"\n",
					"if count_EN010004 == 6410 and count_EN010044 == 618 and count_EN010080 == 154 and count_TR040004 == 39:\n",
					"    print('PASS: Expected count of representations match')\n",
					"else:\n",
					"    print('FAIL: Expected count of representations match')\n",
					"    exitCode += 1"
				],
				"execution_count": 77
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"mssparkutils.notebook.exit(exitCode)"
				],
				"execution_count": 78
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"storage_account: str = mssparkutils.notebook.run('/utils/py_utils_get_storage_account')\n",
					"path_to_orchestration_file: str = \"abfss://odw-config@\"+storage_account+\"orchestration/orchestration.json\""
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Tests below were created on the back of BUG 1378 to check if service user and rep counts were matching correctly"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def test_case_exists(case: str) -> bool:\n",
					"    df: DataFrame = spark.sql(f\"select * from odw_curated_db.nsip_project where caseReference = '{case}'\")\n",
					"    return df.count() > 0"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def test_case_exists_in_service_user(case: str) -> bool:\n",
					"    df: DataFrame = spark.sql(f\"\"\"select distinct caseReference\n",
					"                    from odw_curated_db.service_user\n",
					"                    where caseReference in\n",
					"                    (\n",
					"                        select distinct caseId \n",
					"                        from odw_curated_db.nsip_representation\n",
					"                        where caseRef = '{case}'\n",
					"                    )\"\"\")\n",
					"    return df.count() > 0"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def test_case_exists_in_nsip_representation(case: str) -> bool:\n",
					"    df: DataFrame = spark.sql(f\"select * from odw_curated_db.nsip_representation where caseRef = '{case}'\")\n",
					"    return df.count() > 0"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def test_reps_counts_match(query1: str, query2: str) -> tuple:\n",
					"    df1 = spark.sql(query1)\n",
					"    df2 = spark.sql(query2)\n",
					"    return (df1.count() == df2.count(), df1.count(), df2.count())"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"case = 'TR020002'\n",
					"\n",
					"query1 = f\"\"\"SELECT *\n",
					"FROM\n",
					"odw_curated_db.nsip_representation AS reps \n",
					"INNER JOIN odw_curated_db.appeal.service_user AS suser\n",
					"ON reps.representativeId = suser.id \n",
					"OR reps.representedId = suser.id\n",
					"WHERE reps.caseRef = '{case}' \n",
					"AND sourceSystem IN ('horizon','Horizon')\n",
					"\"\"\"\n",
					"\n",
					"query2 = f\"\"\"\n",
					"SELECT * \n",
					"FROM\n",
					"odw_curated_db.nsip_representation AS reps \n",
					"INNER JOIN odw_curated_db.appeal.service_user AS suser\n",
					"ON reps.representativeId = suser.id \n",
					"OR reps.representedId = suser.id\n",
					"AND suser.caseReference = reps.caseId\n",
					"WHERE reps.caseRef = '{case}' \n",
					"AND sourceSystem IN ('horizon','Horizon') \n",
					"\"\"\""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"print(f\"Case exists in nsip_project: {test_case_exists(case)}\")\n",
					"print(f\"Case exists in service user: {test_case_exists_in_service_user(case)}\")\n",
					"print(f\"Case exists in nsip_representation: {test_case_exists_in_nsip_representation(case)}\")\n",
					"print(f\"Reps counts match: {test_reps_counts_match(query1, query2)}\")"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"SELECT count (*) FROM\n",
					"odw_curated_db.nsip_representation AS reps \n",
					"INNER JOIN odw_curated_db.service_user AS suser\n",
					"ON reps.representativeId = suser.id \n",
					"OR reps.representedId = suser.id\n",
					"WHERE caseRef = 'TR020002' \n",
					"\n",
					"-- should be 53\n",
					"-- https://pins-ds.atlassian.net/browse/THEODW-1319?focusedCommentId=74458"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"SELECT count (*) FROM\n",
					"odw_curated_db.nsip_representation AS reps \n",
					"INNER JOIN odw_curated_db.service_user AS suser\n",
					"ON reps.representativeId = suser.id \n",
					"OR reps.representedId = suser.id\n",
					"WHERE caseRef = 'TR020002' \n",
					"AND sourceSystem IN ('horizon','Horizon')\n",
					"AND suser.caseReference = '3148447' \n",
					"\n",
					"-- should be 53\n",
					"-- https://pins-ds.atlassian.net/browse/THEODW-1319?focusedCommentId=74458"
				],
				"execution_count": null
			}
		]
	}
}