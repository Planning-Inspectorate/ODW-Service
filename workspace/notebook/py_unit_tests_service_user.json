{
	"name": "py_unit_tests_service_user",
	"properties": {
		"folder": {
			"name": "utils/unit-tests"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "02db2ee8-c2f2-4ce2-a992-01e31a692dbd"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw",
				"name": "pinssynspodw",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import json\r\n",
					"from pyspark.sql.types import *\r\n",
					"from pyspark.sql import DataFrame\r\n",
					"import pprint\r\n",
					"from pyspark.sql.functions import col"
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"entity_name: str = 'service-user'\r\n",
					"std_db_name: str = 'odw_standardised_db'\r\n",
					"hrm_db_name: str = 'odw_harmonised_db'\r\n",
					"curated_db_name: str = 'odw_curated_db'\r\n",
					"std_table_name: str = 'service_user'\r\n",
					"hrm_table_name: str = 'service_user'\r\n",
					"hrm_table_final: str = 'service_user'\r\n",
					"curated_table_name: str = 'nsip_service_user'"
				],
				"execution_count": 3
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"storage_account: str = mssparkutils.notebook.run('/utils/py_utils_get_storage_account')\r\n",
					"path_to_orchestration_file: str = \"abfss://odw-config@\"+storage_account+\"orchestration/orchestration.json\""
				],
				"execution_count": 4
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def get_incremental_key(entity_name: str, storage_account: str, path_to_orchestration_file: str) -> str:\r\n",
					"    # getting the incremental key from the odw-config/orchestration\r\n",
					"    df: DataFrame = spark.read.option(\"multiline\",\"true\").json(path_to_orchestration_file)\r\n",
					"    definitions: list = json.loads(df.toJSON().first())['definitions']\r\n",
					"    definition: dict = next((d for d in definitions if entity_name == d['Source_Filename_Start']), None)\r\n",
					"    return definition['Harmonised_Incremental_Key'] if definition and 'Harmonised_Incremental_Key' in definition else None"
				],
				"execution_count": 5
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def create_spark_schema(db_name: str, entity_name: str) -> StructType:\r\n",
					"    incremental_key: str = get_incremental_key(entity_name, storage_account, path_to_orchestration_file) if db_name == 'odw_harmonised_db' else None\r\n",
					"    schema = mssparkutils.notebook.run(\"/py_create_spark_schema\", 30, {\"db_name\": db_name, \"entity_name\": entity_name, \"incremental_key\": incremental_key})\r\n",
					"    spark_schema = StructType.fromJson(json.loads(schema))\r\n",
					"    return spark_schema"
				],
				"execution_count": 6
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def create_spark_dataframe() -> DataFrame:\r\n",
					"    spark_dataframe: DataFrame = spark.createDataFrame([], schema=create_spark_schema(db_name, entity_name))\r\n",
					"    return spark_dataframe"
				],
				"execution_count": 7
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"sb_std_schema = create_spark_schema(std_db_name, entity_name)\r\n",
					"sb_std_table_schema = spark.table(f\"{std_db_name}.{std_table_name}\").schema\r\n",
					"sb_hrm_schema = create_spark_schema(hrm_db_name, entity_name)\r\n",
					"sb_hrm_table_schema = spark.table(f\"{hrm_db_name}.{hrm_table_name}\").schema"
				],
				"execution_count": 8
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"def extract_schema_structure(schema: StructType) -> dict:\r\n",
					"    def extract_field(field):\r\n",
					"        if isinstance(field.dataType, StructType):\r\n",
					"            return {field.name: {subfield.name: str(subfield.dataType) for subfield in field.dataType.fields}}\r\n",
					"        elif isinstance(field.dataType, ArrayType):\r\n",
					"            element_type = field.dataType.elementType\r\n",
					"            if isinstance(element_type, StructType):\r\n",
					"                return {field.name: {subfield.name: str(subfield.dataType) for subfield in element_type.fields}}\r\n",
					"            else:\r\n",
					"                return {field.name: f'array<{str(element_type)}>'}\r\n",
					"        else:\r\n",
					"            return {field.name: str(field.dataType)}\r\n",
					"    \r\n",
					"    result = {}\r\n",
					"    for field in schema.fields:\r\n",
					"        result.update(extract_field(field))\r\n",
					"    return result"
				],
				"execution_count": 9
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def test_compare_schemas(schema1: StructType, schema2: StructType) -> bool:\r\n",
					"    structure1: dict = extract_schema_structure(schema1)\r\n",
					"    structure2: dict = extract_schema_structure(schema2)\r\n",
					"    \r\n",
					"    differences: list[tuple] = []\r\n",
					"    \r\n",
					"    all_fields: set = set(structure1.keys()).union(set(structure2.keys()))\r\n",
					"    \r\n",
					"    for field in all_fields:\r\n",
					"        if field not in structure1:\r\n",
					"            differences.append((field, \"Field not in schema1\", structure2[field]))\r\n",
					"        elif field not in structure2:\r\n",
					"            differences.append((field, structure1[field], \"Field not in schema2\"))\r\n",
					"        else:\r\n",
					"            if structure1[field] != structure2[field]:\r\n",
					"                if isinstance(structure1[field], dict) and isinstance(structure2[field], dict):\r\n",
					"                    subfields: set = set(structure1[field].keys()).union(set(structure2[field].keys()))\r\n",
					"                    for subfield in subfields:\r\n",
					"                        if subfield not in structure1[field]:\r\n",
					"                            differences.append((f\"{field}.{subfield}\", \"Field not in schema1\", structure2[field][subfield]))\r\n",
					"                        elif subfield not in structure2[field]:\r\n",
					"                            differences.append((f\"{field}.{subfield}\", structure1[field][subfield], \"Field not in schema2\"))\r\n",
					"                        elif structure1[field][subfield] != structure2[field][subfield]:\r\n",
					"                            differences.append((f\"{field}.{subfield}\", structure1[field][subfield], structure2[field][subfield]))\r\n",
					"                else:\r\n",
					"                    differences.append((field, structure1[field], structure2[field]))\r\n",
					"    \r\n",
					"    if differences:\r\n",
					"        # Create a Spark DataFrame to display the differences\r\n",
					"        differences_df: DataFrame = spark.createDataFrame(differences, [\"Field\", \"Schema 1\", \"Schema 2\"])\r\n",
					"        display(differences_df)\r\n",
					"        return False\r\n",
					"    else:\r\n",
					"        return True"
				],
				"execution_count": 10
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def test_std_same_rows_hrm(std_table: str, hrm_table: str) -> tuple[int, int, bool]:\r\n",
					"    std_table_full: str = f\"{std_db_name}.{std_table}\"\r\n",
					"    hrm_table_full: str = f\"{hrm_db_name}.{hrm_table}\"\r\n",
					"    std_count: int = spark.table(std_table_full).count()\r\n",
					"    hrm_count: int = spark.table(hrm_table_full).count()\r\n",
					"    return (std_count, hrm_count, std_count == hrm_count)"
				],
				"execution_count": 11
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def test_std_same_rows_hrm_Horizon(std_table: str, hrm_table: str) -> tuple[int, int, bool]:\r\n",
					"    std_table_full: str = f\"{std_db_name}.{std_table}\"\r\n",
					"    hrm_table_full: str = f\"{hrm_db_name}.{hrm_table}\"\r\n",
					"    std_count: int = spark.table(std_table_full).count()\r\n",
					"    hrm_count: int = spark.table(hrm_table_full).filter([sourceSystem] == \"Casework\").count()\r\n",
					"    return (std_count, hrm_count, std_count == hrm_count)"
				],
				"execution_count": 12
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def test_std_same_rows_hrm_Applications(std_table: str, hrm_table: str) -> tuple[int, int, bool]:\r\n",
					"    std_table_full: str = f\"{std_db_name}.{std_table}\"\r\n",
					"    hrm_table_full: str = f\"{hrm_db_name}.{hrm_table}\"\r\n",
					"    std_count: int = spark.table(std_table_full).filter(col(\"sourceSystem\") == \"back-office-applications\").count()\r\n",
					"    hrm_count: int = spark.table(hrm_table_full).filter(col(\"sourceSystem\") == \"back-office-applications\").count()\r\n",
					"    return (std_count, hrm_count, std_count == hrm_count)"
				],
				"execution_count": 13
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def test_std_same_rows_hrm_Appeals(std_table: str, hrm_table: str) -> tuple[int, int, bool]:\r\n",
					"    std_table_full: str = f\"{std_db_name}.{std_table}\"\r\n",
					"    hrm_table_full: str = f\"{hrm_db_name}.{hrm_table}\"\r\n",
					"    std_count: int = spark.table(std_table_full).filter(col(\"sourceSystem\") == \"back-office-appeals\").count()\r\n",
					"    hrm_count: int = spark.table(hrm_table_full).filter(col(\"sourceSystem\") == \"back-office-appeals\").count()\r\n",
					"    return (std_count, hrm_count, std_count == hrm_count)"
				],
				"execution_count": 14
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def test_curated_row_count(hrm_table_final: str, curated_table: str) -> tuple[int, int, bool]:\r\n",
					"    hrm_table_full: str = f\"{hrm_db_name}.{hrm_table_final}\"\r\n",
					"    curated_table_full: str = f\"{curated_db_name}.{curated_table_name}\"\r\n",
					"    hrm_count: int = spark.sql(f\"select * from {hrm_table_full} where IsActive = 'Y'\").count()\r\n",
					"    curated_count: int = spark.table(curated_table_full).count()\r\n",
					"    return (hrm_count, curated_count, hrm_count == curated_count)"
				],
				"execution_count": 15
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"Standard unit tests aren't being used as this entity merges data across the platform and so testing can not be automated easily.\r\n",
					"\r\n",
					"Test 1: check counts match"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"SELECT\r\n",
					"    COUNT(*)\r\n",
					"FROM\r\n",
					"    odw_harmonised_db.curated_service_user"
				],
				"execution_count": 87
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#Re-run service_user notebook"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"SELECT\r\n",
					"    COUNT(*)\r\n",
					"FROM\r\n",
					"    odw_harmonised_db.curated_service_user"
				],
				"execution_count": 88
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"Test 2: Trace random record from service bus and check data integrity"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"SELECT\r\n",
					"    *\r\n",
					"FROM\r\n",
					"    odw_standardised_db.sb_service_user"
				],
				"execution_count": 42
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"SELECT\r\n",
					"    *\r\n",
					"FROM\r\n",
					"    odw_standardised_db.sb_service_user\r\n",
					"WHERE\r\n",
					"    id = 100010068"
				],
				"execution_count": 47
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"SELECT\r\n",
					"    *\r\n",
					"FROM\r\n",
					"    odw_harmonised_db.sb_service_user\r\n",
					"WHERE\r\n",
					"    id = 100010068\r\n",
					""
				],
				"execution_count": 48
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"SELECT\r\n",
					"    *\r\n",
					"FROM\r\n",
					"    odw_harmonised_db.curated_service_user\r\n",
					"WHERE\r\n",
					"    id = 100010068"
				],
				"execution_count": 50
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"Test 3: Trace random record from Horizon service_user equivalent\r\n",
					"\r\n",
					"Note: we start with curated to find the record as the Horizon data has service_user types we're not ready to bring in"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"SELECT * FROM odw_harmonised_db.curated_service_user WHERE source_priority = 2"
				],
				"execution_count": 52
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"SELECT * from odw_harmonised_db.casework_case_involvement_dim where ContactID = 'P_2003' and ingestionDate = (SELECT MAX(IngestionDate) FROM odw_harmonised_db.casework_case_involvement_dim)"
				],
				"execution_count": 57
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"SELECT count(*) from odw_harmonised_db.casework_case_involvement_dim where ContactID = 'P_2003' and ingestionDate = (SELECT MAX(IngestionDate) FROM odw_harmonised_db.casework_case_involvement_dim)"
				],
				"execution_count": 58
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"SELECT COUNT(*) from odw_harmonised_db.curated_service_user where sourceSuid = 'P_2003'"
				],
				"execution_count": 62
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"SELECT * from odw_harmonised_db.casework_case_involvement_dim where ContactID = 'P_2003' and ingestionDate = (SELECT MAX(IngestionDate) FROM odw_harmonised_db.casework_case_involvement_dim) and CaseReference = 3004527"
				],
				"execution_count": 63
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"SELECT * from odw_harmonised_db.curated_service_user where sourceSuid = 'P_2003' and CaseReference = 3004527"
				],
				"execution_count": 64
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"Test 4: S51"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"SELECT caseReference, count(*) FROM odw_harmonised_db.nsip_s51_advice where IsActive = 'Y' Group by caseReference"
				],
				"execution_count": 67
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"SELECT * FROM odw_harmonised_db.nsip_s51_advice WHERE isActive = 'Y' and caseReference='EN010067'"
				],
				"execution_count": 69
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"SELECT * FROM odw_harmonised_db.curated_service_user WHERE caseReference = 15357831"
				],
				"execution_count": 86
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"Test 5: nsip project"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"SELECT * FROM odw_harmonised_db.nsip_project where caseid = '3148289'"
				],
				"execution_count": 94
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"SELECT * FROM odw_harmonised_db.curated_service_user where caseReference = '3148289' and ServiceUserType = 'Applicant'"
				],
				"execution_count": 93
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"Test 6: Relevant reps"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"SELECT\r\n",
					"    *\r\n",
					"FROM\r\n",
					"    odw_harmonised_db.nsip_relevant_representation\r\n",
					"WHERE\r\n",
					"    caseId = '3148289'"
				],
				"execution_count": 96
			}
		]
	}
}