{
	"name": "py_utils_get_tables_metadata",
	"properties": {
		"folder": {
			"name": "utils"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "87d86bdd-5f81-45d5-a25e-23d6cb61f1f8"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw",
				"name": "pinssynspodw",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": false
				},
				"source": [
					"def get_metadata(db_name, table_name):\n",
					"    df = spark.sql(f\"DESCRIBE FORMATTED {db_name}.{table_name}\")\n",
					"\n",
					"    # Convert to dictionary\n",
					"    metadata = (\n",
					"        df.filter(df.col_name.isin(\"Type\", \"Provider\", \"Location\"))\n",
					"        .rdd.map(lambda row: (row[\"col_name\"], row[\"data_type\"]))\n",
					"        .collectAsMap()\n",
					"    )\n",
					"\n",
					"    return {\n",
					"        \"type\": metadata.get(\"Type\"),\n",
					"        \"format\": metadata.get(\"Provider\"),\n",
					"        \"location\": metadata.get(\"Location\"),\n",
					"        \"db_name\": db_name,\n",
					"        \"table_name\": table_name\n",
					"    }"
				],
				"execution_count": 92
			},
			{
				"cell_type": "code",
				"source": [
					"databases: list = spark.catalog.listDatabases()\n",
					"\n",
					"metadata_list: list = []\n",
					"\n",
					"for db in databases:\n",
					"    tables: list = spark.catalog.listTables(db.name)\n",
					"    for table in tables:\n",
					"        metadata_list.append(get_metadata(db.name, table.name))"
				],
				"execution_count": 93
			},
			{
				"cell_type": "code",
				"source": [
					"final_df = spark.createDataFrame(metadata_list)\n",
					"final_df = final_df.filter(\"type != 'VIEW'\")"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": false
				},
				"source": [
					"display(final_df.orderBy('db_name', 'table_name'))"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Stef Test"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"import requests\n",
					"import json"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"existing_tables = \"https://raw.githubusercontent.com/Planning-Inspectorate/odw-config/refs/heads/main/data-lake/existing-tables-metadata.json\""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"# List of metadata\n",
					"metadata_list = [\n",
					"    'standardised_metadata',\n",
					"    'harmonised_metadata',\n",
					"    'curated_metadata',\n",
					"    'curated_migration_metadata',\n",
					"    'config_metadata',\n",
					"    'logging_metadata'\n",
					"]"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"response = requests.get(existing_tables)\n",
					"exisitng_tables_metadata = response.json()"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"databases = [db[0] for db in spark.sql(\"SHOW DATABASES\").collect()]\n",
					"esisting_tables = set()\n",
					"tables_list = set()\n",
					"\n",
					"for db in databases:\n",
					"    tables = spark.sql(f\"SHOW TABLES IN {db}\").collect()\n",
					"    tables_list.update(tables)\n",
					"    \n",
					"for table in tables_list:\n",
					"    try:\n",
					"        if not table[\"isTemporary\"]:  # Exclude temporary tables\n",
					"            table_name = table[\"tableName\"]\n",
					"            table_db = table[\"namespace\"]\n",
					"            table_desc = spark.sql(f\"DESCRIBE FORMATTED {table_db}.{table_name}\").collect()\n",
					"\n",
					"\n",
					"            # Extract table type correctly from the DESCRIBE FORMATTED output\n",
					"            table_type = next(\n",
					"                (row.asDict()[\"data_type\"] for row in table_desc \n",
					"                    if row.asDict().get(\"col_name\", \"\").strip().upper() == \"TYPE\"),\n",
					"                \"\"\n",
					"            ).upper()\n",
					"\n",
					"            if \"VIEW\" not in table_type:\n",
					"                esisting_tables.add((table_db, table_name))\n",
					"\n",
					"    except Exception as e:\n",
					"        print(f\"Skipping database '{table_db}' due to error: {e}\")\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"esisting_tables"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"expected_tables = set()\n",
					"tables_list = set()  # Initialize outside the loop\n",
					"\n",
					"for metadata_name in metadata_list:\n",
					"    print(f\"Reading {metadata_name.rsplit('_', 1)[0]} tables\")\n",
					"    \n",
					"    # Fix typo: 'exisitng_tables_metadata' -> 'existing_tables_metadata'\n",
					"    metadata = next((item[metadata_name] for item in exisitng_tables_metadata if metadata_name in item), [])\n",
					"\n",
					"    # Ensure metadata is a list\n",
					"    if not isinstance(metadata, list):\n",
					"        metadata = []\n",
					"\n",
					"    # Extract external tables from the JSON and append to expected_tables\n",
					"    expected_tables.update(\n",
					"        (table.get('database_name'), table.get('table_name')) \n",
					"        for table in metadata \n",
					"        if table.get(\"table_type\", \"\").upper() != \"VIEW\"\n",
					"    )\n",
					"\n",
					"# Find missing tables\n",
					"missing_tables = expected_tables - esisting_tables\n",
					"\n",
					"# Print results\n",
					"if missing_tables:\n",
					"    print(\"\\nMissing Tables:\")\n",
					"    for db, table in missing_tables:\n",
					"        print(f\"- {db}.{table}\")\n",
					"else:\n",
					"    print(\"\\nNo missing tables. All expected tables are present.\")\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "sparksql"
					}
				},
				"source": [
					"%%sql\n",
					"describe formatted odw_standardised_db.listed_building"
				],
				"execution_count": null
			}
		]
	}
}