{
	"name": "Log stage",
	"properties": {
		"description": "Generic notebook for logging a step",
		"folder": {
			"name": "utils/main"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "130e0ab8-5dbd-483a-8587-d6a034a977f7"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw",
				"name": "pinssynspodw",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"tags": [
						"parameters"
					]
				},
				"source": [
					"Stage=\"Start\" #Valid values are Start, OnProgress, Fail, Warning, and Completion\r\n",
					"PipelineName = \"master_pipeline\"\r\n",
					"PipelineRunID = \"xxxx-xxxxx-xxxxx-xxxx\"\r\n",
					"Inserts = 0\r\n",
					"Updates = 0\r\n",
					"Deletes = 0\r\n",
					"ErrorMessage = ''\r\n",
					"StatusMessage = ''\r\n",
					"PipelineTriggerID = ''\r\n",
					"PipelineTriggerName = ''\r\n",
					"PipelineTriggerType = ''\r\n",
					"PipelineTriggeredbyPipelineName = ''\r\n",
					"PipelineTriggeredbyPipelineRunID = ''\r\n",
					"PipelineExecutionTimeInSec = ''\r\n",
					"StartTime1 = ''\r\n",
					"EndTime1 = ''\r\n",
					"ActivityType = 'Pipeline'"
				],
				"execution_count": 46
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"if f'{Stage}' == \"Start\":\r\n",
					"    sql =   f\"\"\"\r\n",
					"            SELECT\r\n",
					"                (SELECT IFNULL(MAX(LogId), 0) FROM Logging.PIPELINE_LOGS) + 1 AS LogId\r\n",
					"                ,'{PipelineName}' AS PipelineName                \r\n",
					"                ,'{PipelineRunID}' AS PipelineRunID\r\n",
					"                ,current_timestamp() AS StartTime\r\n",
					"                ,NULL AS EndTime\r\n",
					"                ,NULL AS DurationSeconds\r\n",
					"                ,{Inserts} AS Inserts\r\n",
					"                ,{Updates} AS Updates\r\n",
					"                ,{Deletes} AS Deletes\r\n",
					"                ,'{ErrorMessage}' AS ErrorMessage\r\n",
					"                ,'Starting process' AS StatusMessage\r\n",
					"                ,'{PipelineTriggerID}' AS PipelineTriggerID\r\n",
					"                ,'{PipelineTriggerName}' AS PipelineTriggerName\r\n",
					"                ,'{PipelineTriggerType}' AS PipelineTriggerType\r\n",
					"                ,'{PipelineTriggeredbyPipelineName}' AS PipelineTriggeredbyPipelineName\r\n",
					"                ,'{PipelineTriggeredbyPipelineRunID}' AS PipelineTriggeredbyPipelineRunID\r\n",
					"                ,'{PipelineExecutionTimeInSec}' AS PipelineExecutionTimeInSec\r\n",
					"                ,CAST(current_timestamp() AS varchar) AS StartTime1\r\n",
					"                ,'' AS EndTime1\r\n",
					"                ,'{ActivityType}' AS ActivityType\r\n",
					"            \"\"\"\r\n",
					"    df = spark.sql(sql)\r\n",
					"\r\n",
					"    df.write.mode(\"append\").format(\"delta\").saveAsTable(\"logging.pipeline_logs\")"
				],
				"execution_count": 47
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"if f'{Stage}' == \"OnProgress\":\r\n",
					"    sql =   f\"\"\"\r\n",
					"            SELECT\r\n",
					"                (SELECT IFNULL(MAX(LogId), 0) FROM Logging.PIPELINE_LOGS) + 1 AS LogId\r\n",
					"                ,'{PipelineName}' AS PipelineName                \r\n",
					"                ,'{PipelineRunID}' AS PipelineRunID\r\n",
					"                ,current_timestamp() AS StartTime\r\n",
					"                ,NULL AS EndTime\r\n",
					"                ,NULL AS DurationSeconds\r\n",
					"                ,{Inserts} AS Inserts\r\n",
					"                ,{Updates} AS Updates\r\n",
					"                ,{Deletes} AS Deletes\r\n",
					"                ,'{ErrorMessage}' AS ErrorMessage\r\n",
					"                ,'{StatusMessage}' AS StatusMessage\r\n",
					"                ,'{PipelineTriggerID}' AS PipelineTriggerID\r\n",
					"                ,'{PipelineTriggerName}' AS PipelineTriggerName\r\n",
					"                ,'{PipelineTriggerType}' AS PipelineTriggerType\r\n",
					"                ,'{PipelineTriggeredbyPipelineName}' AS PipelineTriggeredbyPipelineName\r\n",
					"                ,'{PipelineTriggeredbyPipelineRunID}' AS PipelineTriggeredbyPipelineRunID\r\n",
					"                ,'{PipelineExecutionTimeInSec}' AS PipelineExecutionTimeInSec\r\n",
					"                ,CAST(current_timestamp() AS varchar) AS StartTime1\r\n",
					"                ,'' AS EndTime1\r\n",
					"                ,'{ActivityType}' AS ActivityType\r\n",
					"            \"\"\"\r\n",
					"    df = spark.sql(sql)\r\n",
					"\r\n",
					"    df.write.mode(\"append\").format(\"delta\").saveAsTable(\"logging.pipeline_logs\")"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"SELECT * FROM logging.pipeline_logs"
				],
				"execution_count": 52
			}
		]
	}
}