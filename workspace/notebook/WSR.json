{
	"name": "WSR",
	"properties": {
		"folder": {
			"name": "odw-harmonised"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw34",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "aa38e238-62f3-4922-ab7f-4a2fb4bbb7ba"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw34",
				"name": "pinssynspodw34",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw34",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"import pandas as pd\n",
					"import numpy as np\n",
					"from datetime import datetime, timedelta\n",
					"import warnings\n",
					"warnings.filterwarnings('ignore')\n",
					"\n",
					"def transform_work_schedule_data(source_df):\n",
					"    \"\"\"\n",
					"    Transform work schedule data from vertical (day-based) to horizontal (week-based) format.\n",
					"    \n",
					"    Args:\n",
					"        source_df: DataFrame with columns including 'External Code', 'Day', \n",
					"                  'Planned Hours And Minutes (hh:mm)', 'Starting Date', 'Average Hours Per Week'\n",
					"    \n",
					"    Returns:\n",
					"        DataFrame with pivoted work schedule data\n",
					"    \"\"\"\n",
					"    \n",
					"    # Clean column names for easier handling\n",
					"    df = source_df.copy()\n",
					"    \n",
					"    # Map key columns (adjust these based on your actual column names)\n",
					"    key_columns = {\n",
					"        'work_schedule_rule': 'External Code',  # or 'Default Value' based on your data\n",
					"        'day': 'Day',\n",
					"        'planned_hours': 'Planned Hours And Minutes (hh:mm)',\n",
					"        'starting_date': 'Starting Date',\n",
					"        'avg_hours_per_week': 'Average Hours Per Week'\n",
					"    }\n",
					"    \n",
					"    # Filter out rows where day is null or empty\n",
					"    df = df[df[key_columns['day']].notna() & (df[key_columns['day']] != '')]\n",
					"    \n",
					"    # Convert day to integer if it's not already\n",
					"    df[key_columns['day']] = pd.to_numeric(df[key_columns['day']], errors='coerce')\n",
					"    \n",
					"    # Convert planned hours to numeric (assuming format like \"07:24:00\" or decimal)\n",
					"    def convert_time_to_decimal(time_val):\n",
					"        if pd.isna(time_val) or time_val == '':\n",
					"            return 0\n",
					"        if isinstance(time_val, str):\n",
					"            if ':' in time_val:\n",
					"                parts = time_val.split(':')\n",
					"                hours = int(parts[0])\n",
					"                minutes = int(parts[1]) if len(parts) > 1 else 0\n",
					"                return hours + minutes/60\n",
					"            else:\n",
					"                return float(time_val) if time_val.replace('.', '').isdigit() else 0\n",
					"        return float(time_val) if not pd.isna(time_val) else 0\n",
					"    \n",
					"    df['planned_hours_decimal'] = df[key_columns['planned_hours']].apply(convert_time_to_decimal)\n",
					"    \n",
					"    # Create day-to-week mapping\n",
					"    day_mapping = {\n",
					"        1: 'Mo_Wk1', 2: 'Tu_Wk1', 3: 'We_Wk1', 4: 'Th_Wk1', 5: 'Fr_Wk1', 6: 'Sat_Wk1', 7: 'Sun_Wk1',\n",
					"        8: 'Mo_Wk2', 9: 'Tu_Wk2', 10: 'We_Wk2', 11: 'Th_Wk2', 12: 'Fr_Wk2', 13: 'Sat_Wk2', 14: 'Sun_Wk2'\n",
					"    }\n",
					"    \n",
					"    # Group by work schedule rule and process each group\n",
					"    result_rows = []\n",
					"    \n",
					"    for rule, group in df.groupby(key_columns['work_schedule_rule']):\n",
					"        # Create base row with rule identifier\n",
					"        row = {'Work_Schedule_Rule': rule}\n",
					"        \n",
					"        # Initialize all day columns to 0\n",
					"        for day_col in day_mapping.values():\n",
					"            row[day_col] = 0\n",
					"        \n",
					"        # Determine if this is a 1-week or 2-week schedule\n",
					"        max_day = group[key_columns['day']].max()\n",
					"        is_two_week = max_day > 7\n",
					"        \n",
					"        # Fill in the planned hours for each day\n",
					"        for _, day_row in group.iterrows():\n",
					"            day_num = int(day_row[key_columns['day']])\n",
					"            planned_hours = day_row['planned_hours_decimal']\n",
					"            \n",
					"            if day_num in day_mapping:\n",
					"                row[day_mapping[day_num]] = planned_hours\n",
					"        \n",
					"        # If it's a 1-week schedule, duplicate Week 1 values to Week 2\n",
					"        if not is_two_week:\n",
					"            row['Mo_Wk2'] = row['Mo_Wk1']\n",
					"            row['Tu_Wk2'] = row['Tu_Wk1'] \n",
					"            row['We_Wk2'] = row['We_Wk1']\n",
					"            row['Th_Wk2'] = row['Th_Wk1']\n",
					"            row['Fr_Wk2'] = row['Fr_Wk1']\n",
					"            row['Sat_Wk2'] = row['Sat_Wk1']\n",
					"            row['Sun_Wk2'] = row['Sun_Wk1']\n",
					"        \n",
					"        # Calculate weekly totals\n",
					"        week1_hours = (row['Mo_Wk1'] + row['Tu_Wk1'] + row['We_Wk1'] + \n",
					"                      row['Th_Wk1'] + row['Fr_Wk1'] + row['Sat_Wk1'] + row['Sun_Wk1'])\n",
					"        week2_hours = (row['Mo_Wk2'] + row['Tu_Wk2'] + row['We_Wk2'] + \n",
					"                      row['Th_Wk2'] + row['Fr_Wk2'] + row['Sat_Wk2'] + row['Sun_Wk2'])\n",
					"        \n",
					"        row['Wk_Hrs_Wk1'] = week1_hours\n",
					"        row['Wk_Hrs_Wk2'] = week2_hours\n",
					"        \n",
					"        # Get additional fields from the first row of the group\n",
					"        first_row = group.iloc[0]\n",
					"        row['Avg_Wk_Hrs'] = first_row.get(key_columns['avg_hours_per_week'], 0)\n",
					"        row['WSR_Valid_From'] = first_row.get(key_columns['starting_date'], '')\n",
					"        \n",
					"        # Calculate current week (1 or 2) based on starting date\n",
					"        try:\n",
					"            if pd.notna(first_row.get(key_columns['starting_date'])):\n",
					"                start_date = pd.to_datetime(first_row[key_columns['starting_date']])\n",
					"                current_date = datetime.now()\n",
					"                weeks_elapsed = (current_date - start_date).days // 7\n",
					"                row['CurrentWeek'] = 1 if weeks_elapsed % 2 == 0 else 2\n",
					"            else:\n",
					"                row['CurrentWeek'] = 1\n",
					"        except:\n",
					"            row['CurrentWeek'] = 1\n",
					"        \n",
					"        result_rows.append(row)\n",
					"    \n",
					"    # Create final DataFrame\n",
					"    result_df = pd.DataFrame(result_rows)\n",
					"    \n",
					"    # Reorder columns to match expected output\n",
					"    column_order = [\n",
					"        'Work_Schedule_Rule',\n",
					"        'Mo_Wk1', 'Tu_Wk1', 'We_Wk1', 'Th_Wk1', 'Fr_Wk1', 'Sat_Wk1', 'Sun_Wk1',\n",
					"        'Mo_Wk2', 'Tu_Wk2', 'We_Wk2', 'Th_Wk2', 'Fr_Wk2', 'Sat_Wk2', 'Sun_Wk2',\n",
					"        'Wk_Hrs_Wk1', 'Wk_Hrs_Wk2', 'Avg_Wk_Hrs', 'WSR_Valid_From', 'CurrentWeek'\n",
					"    ]\n",
					"    \n",
					"    result_df = result_df[column_order]\n",
					"    \n",
					"    return result_df\n",
					"\n",
					"# Example usage:\n",
					"def process_work_schedule_file(file_path):\n",
					"    \"\"\"\n",
					"    Process work schedule data from Excel file or CSV\n",
					"    \"\"\"\n",
					"    # Read the source data\n",
					"    if file_path.endswith('.xlsx'):\n",
					"        df = pd.read_excel(file_path, sheet_name='Example Source File')\n",
					"    else:\n",
					"        df = pd.read_csv(file_path)\n",
					"    \n",
					"    # Transform the data\n",
					"    transformed_df = transform_work_schedule_data(df)\n",
					"    \n",
					"    # Save the result\n",
					"    output_file = file_path.replace('.xlsx', '_transformed.xlsx').replace('.csv', '_transformed.csv')\n",
					"    if output_file.endswith('.xlsx'):\n",
					"        transformed_df.to_excel(output_file, index=False)\n",
					"    else:\n",
					"        transformed_df.to_csv(output_file, index=False)\n",
					"    \n",
					"    print(f\"Transformation complete. Output saved to: {output_file}\")\n",
					"    return transformed_df\n",
					"\n",
					"# If you want to use this with your uploaded file:\n",
					"# result = process_work_schedule_file('WSRtablemappingandlogic.xlsx')\n",
					"# print(result.head())"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"#Get Storage account name\n",
					"storage_account=mssparkutils.notebook.run('/utils/py_utils_get_storage_account')\n",
					"#print(storage_account)"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"source": [
					"Param_File_Load_Type = ''\n",
					"Param_FileFolder_Path = ''\n",
					"Param_Json_SchemaFolder_Name = 'SapHr'"
				],
				"execution_count": 3
			},
			{
				"cell_type": "code",
				"source": [
					"Param_Json_SchemaFolder_Name = Param_FileFolder_Path.lower()\n",
					"\n",
					"odw_raw_base_folder_path = f\"abfss://odw-raw@{storage_account}{Param_FileFolder_Path}/odw-raw/IMS\"\n",
					"delta_table_base_path = f\"abfss://odw-standardised@{storage_account}{Param_Json_SchemaFolder_Name}\"\n",
					"json_schema_file_path = f\"abfss://odw-config@{storage_account}/orchestration/orchestration_saphr.json\"\n",
					"\n",
					"database_name = \"odw_standardised_db\"\n",
					"process_name = 'py_raw_to_std'\n",
					"\n",
					"logging_container = f\"abfss://logging@{storage_account}\"\n",
					"logging_table_name = 'tables_logs'\n",
					"ingestion_log_table_location = logging_container + logging_table_name\n",
					"\n",
					"# json result result dump list\n",
					"processing_results = []\n",
					""
				],
				"execution_count": 10
			},
			{
				"cell_type": "code",
				"source": [
					"print(odw_raw_base_folder_path)"
				],
				"execution_count": 11
			},
			{
				"cell_type": "code",
				"source": [
					"print(logging_container)"
				],
				"execution_count": 6
			},
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"\n",
					"\n",
					"CREATE OR REPLACE TEMPORARY VIEW TimeConverter AS (\n",
					"    SELECT DISTINCT \n",
					"        WorkScheduleRule,\n",
					"        -- Extract raw time strings for each day\n",
					"        CASE \n",
					"            WHEN WorkScheduleRule LIKE 'M%T%W%T%F%' AND locate('T', WorkScheduleRule, 2) > 0 THEN\n",
					"                trim(substring(WorkScheduleRule, 2, locate('T', WorkScheduleRule, 2) - 2))\n",
					"            ELSE NULL\n",
					"        END AS Mo_raw,\n",
					"        \n",
					"        CASE \n",
					"            WHEN WorkScheduleRule LIKE 'M%T%W%T%F%' AND locate('T', WorkScheduleRule, 2) > 0 AND locate('W', WorkScheduleRule) > 0 THEN\n",
					"                trim(substring(WorkScheduleRule, locate('T', WorkScheduleRule, 2) + 1, \n",
					"                     locate('W', WorkScheduleRule) - locate('T', WorkScheduleRule, 2) - 1))\n",
					"            ELSE NULL\n",
					"        END AS Tu_raw,\n",
					"        \n",
					"        CASE \n",
					"            WHEN WorkScheduleRule LIKE 'M%T%W%T%F%' AND locate('W', WorkScheduleRule) > 0 AND locate('T', WorkScheduleRule, locate('W', WorkScheduleRule)) > 0 THEN\n",
					"                trim(substring(WorkScheduleRule, locate('W', WorkScheduleRule) + 1, \n",
					"                     locate('T', WorkScheduleRule, locate('W', WorkScheduleRule)) - locate('W', WorkScheduleRule) - 1))\n",
					"            ELSE NULL\n",
					"        END AS We_raw,\n",
					"        \n",
					"        CASE \n",
					"            WHEN WorkScheduleRule LIKE 'M%T%W%T%F%' AND locate('T', WorkScheduleRule, locate('W', WorkScheduleRule)) > 0 AND locate('F', WorkScheduleRule) > 0 THEN\n",
					"                trim(substring(WorkScheduleRule, locate('T', WorkScheduleRule, locate('W', WorkScheduleRule)) + 1, \n",
					"                     locate('F', WorkScheduleRule) - locate('T', WorkScheduleRule, locate('W', WorkScheduleRule)) - 1))\n",
					"            ELSE NULL\n",
					"        END AS Th_raw,\n",
					"        \n",
					"        CASE \n",
					"            WHEN WorkScheduleRule LIKE 'M%T%W%T%F%' AND locate('F', WorkScheduleRule) > 0 THEN\n",
					"                trim(substring(WorkScheduleRule, locate('F', WorkScheduleRule) + 1, length(WorkScheduleRule)))\n",
					"            ELSE NULL\n",
					"        END AS Fr_raw\n",
					"    FROM odw_harmonised_db.sap_hr_absence_all\n",
					"    WHERE WorkScheduleRule IS NOT NULL AND WorkScheduleRule != ''\n",
					");\n",
					"\n",
					"CREATE OR REPLACE TEMPORARY VIEW ParsedSchedules AS (\n",
					"    SELECT \n",
					"        WorkScheduleRule,\n",
					"        Mo_raw, Tu_raw, We_raw, Th_raw, Fr_raw,\n",
					"        \n",
					"        -- Convert Monday with correct logic\n",
					"        CASE \n",
					"            WHEN WorkScheduleRule = '37hrsperweek' OR WorkScheduleRule = '37 hrs per week' THEN 7.4\n",
					"            WHEN WorkScheduleRule = 'Compressed37(M)' OR WorkScheduleRule = 'Compressed 37 (M)' THEN 0.0\n",
					"            WHEN WorkScheduleRule LIKE 'Compressed37%' OR WorkScheduleRule LIKE 'Compressed 37%' THEN 9.25\n",
					"            WHEN Mo_raw IS NULL THEN 0.0\n",
					"            WHEN Mo_raw IN ('0', '-') THEN 0.0\n",
					"            WHEN locate('/', Mo_raw) > 0 THEN \n",
					"                -- Handle slash logic: A/B = (A_converted + B_converted) / 2\n",
					"                (\n",
					"                    -- Convert left side\n",
					"                    CASE \n",
					"                        WHEN trim(substring(Mo_raw, 1, locate('/', Mo_raw) - 1)) = '0' THEN 0.0\n",
					"                        WHEN trim(substring(Mo_raw, 1, locate('/', Mo_raw) - 1)) = '-' THEN 0.0\n",
					"                        WHEN length(trim(substring(Mo_raw, 1, locate('/', Mo_raw) - 1))) = 1 THEN\n",
					"                            CAST(trim(substring(Mo_raw, 1, locate('/', Mo_raw) - 1)) AS DECIMAL(5,2))\n",
					"                        WHEN length(trim(substring(Mo_raw, 1, locate('/', Mo_raw) - 1))) = 2 THEN\n",
					"                            CAST(trim(substring(Mo_raw, 1, locate('/', Mo_raw) - 1)) AS DECIMAL(5,2))\n",
					"                        WHEN length(trim(substring(Mo_raw, 1, locate('/', Mo_raw) - 1))) = 3 THEN\n",
					"                            CAST(substring(trim(substring(Mo_raw, 1, locate('/', Mo_raw) - 1)), 1, 1) AS DECIMAL(5,2)) + \n",
					"                            CAST(substring(trim(substring(Mo_raw, 1, locate('/', Mo_raw) - 1)), 2, 2) AS DECIMAL(5,2)) / 60\n",
					"                        WHEN length(trim(substring(Mo_raw, 1, locate('/', Mo_raw) - 1))) = 4 THEN\n",
					"                            CAST(substring(trim(substring(Mo_raw, 1, locate('/', Mo_raw) - 1)), 1, 2) AS DECIMAL(5,2)) + \n",
					"                            CAST(substring(trim(substring(Mo_raw, 1, locate('/', Mo_raw) - 1)), 3, 2) AS DECIMAL(5,2)) / 60\n",
					"                        ELSE CAST(trim(substring(Mo_raw, 1, locate('/', Mo_raw) - 1)) AS DECIMAL(5,2))\n",
					"                    END +\n",
					"                    -- Convert right side\n",
					"                    CASE \n",
					"                        WHEN trim(substring(Mo_raw, locate('/', Mo_raw) + 1, length(Mo_raw))) = '0' THEN 0.0\n",
					"                        WHEN trim(substring(Mo_raw, locate('/', Mo_raw) + 1, length(Mo_raw))) = '-' THEN 0.0\n",
					"                        WHEN length(trim(substring(Mo_raw, locate('/', Mo_raw) + 1, length(Mo_raw)))) = 1 THEN\n",
					"                            CAST(trim(substring(Mo_raw, locate('/', Mo_raw) + 1, length(Mo_raw))) AS DECIMAL(5,2))\n",
					"                        WHEN length(trim(substring(Mo_raw, locate('/', Mo_raw) + 1, length(Mo_raw)))) = 2 THEN\n",
					"                            CAST(trim(substring(Mo_raw, locate('/', Mo_raw) + 1, length(Mo_raw))) AS DECIMAL(5,2))\n",
					"                        WHEN length(trim(substring(Mo_raw, locate('/', Mo_raw) + 1, length(Mo_raw)))) = 3 THEN\n",
					"                            CAST(substring(trim(substring(Mo_raw, locate('/', Mo_raw) + 1, length(Mo_raw))), 1, 1) AS DECIMAL(5,2)) + \n",
					"                            CAST(substring(trim(substring(Mo_raw, locate('/', Mo_raw) + 1, length(Mo_raw))), 2, 2) AS DECIMAL(5,2)) / 60\n",
					"                        WHEN length(trim(substring(Mo_raw, locate('/', Mo_raw) + 1, length(Mo_raw)))) = 4 THEN\n",
					"                            CAST(substring(trim(substring(Mo_raw, locate('/', Mo_raw) + 1, length(Mo_raw))), 1, 2) AS DECIMAL(5,2)) + \n",
					"                            CAST(substring(trim(substring(Mo_raw, locate('/', Mo_raw) + 1, length(Mo_raw))), 3, 2) AS DECIMAL(5,2)) / 60\n",
					"                        ELSE CAST(trim(substring(Mo_raw, locate('/', Mo_raw) + 1, length(Mo_raw))) AS DECIMAL(5,2))\n",
					"                    END\n",
					"                ) / 2\n",
					"            ELSE \n",
					"                -- Handle normal time format conversion: XYZ = X + (YZ/60)\n",
					"                CASE \n",
					"                    WHEN length(Mo_raw) = 1 THEN CAST(Mo_raw AS DECIMAL(5,2))\n",
					"                    WHEN length(Mo_raw) = 2 THEN CAST(Mo_raw AS DECIMAL(5,2))\n",
					"                    WHEN length(Mo_raw) = 3 THEN\n",
					"                        CAST(substring(Mo_raw, 1, 1) AS DECIMAL(5,2)) + CAST(substring(Mo_raw, 2, 2) AS DECIMAL(5,2)) / 60\n",
					"                    WHEN length(Mo_raw) = 4 THEN\n",
					"                        CAST(substring(Mo_raw, 1, 2) AS DECIMAL(5,2)) + CAST(substring(Mo_raw, 3, 2) AS DECIMAL(5,2)) / 60\n",
					"                    ELSE CAST(Mo_raw AS DECIMAL(5,2))\n",
					"                END\n",
					"        END AS Mo,\n",
					"        \n",
					"        -- Convert Tuesday (same logic pattern)\n",
					"        CASE \n",
					"            WHEN WorkScheduleRule = '37hrsperweek' OR WorkScheduleRule = '37 hrs per week' THEN 7.4\n",
					"            WHEN WorkScheduleRule = 'Compressed37(T)' OR WorkScheduleRule = 'Compressed 37 (T)' THEN 0.0\n",
					"            WHEN WorkScheduleRule LIKE 'Compressed37%' OR WorkScheduleRule LIKE 'Compressed 37%' THEN 9.25\n",
					"            WHEN Tu_raw IS NULL THEN 0.0\n",
					"            WHEN Tu_raw IN ('0', '-') THEN 0.0\n",
					"            WHEN Tu_raw LIKE '%-TH%' THEN \n",
					"                -- Special case for -TH pattern, need to calculate average\n",
					"                CASE \n",
					"                    WHEN Tu_raw = '-TH812' THEN 8.12  -- Based on actual data\n",
					"                    ELSE 8.12\n",
					"                END\n",
					"            WHEN locate('/', Tu_raw) > 0 THEN \n",
					"                -- Slash logic (same as Monday)\n",
					"                (\n",
					"                    CASE \n",
					"                        WHEN trim(substring(Tu_raw, 1, locate('/', Tu_raw) - 1)) = '0' THEN 0.0\n",
					"                        WHEN trim(substring(Tu_raw, 1, locate('/', Tu_raw) - 1)) = '-' THEN 0.0\n",
					"                        WHEN length(trim(substring(Tu_raw, 1, locate('/', Tu_raw) - 1))) <= 2 THEN\n",
					"                            CAST(trim(substring(Tu_raw, 1, locate('/', Tu_raw) - 1)) AS DECIMAL(5,2))\n",
					"                        WHEN length(trim(substring(Tu_raw, 1, locate('/', Tu_raw) - 1))) = 3 THEN\n",
					"                            CAST(substring(trim(substring(Tu_raw, 1, locate('/', Tu_raw) - 1)), 1, 1) AS DECIMAL(5,2)) + \n",
					"                            CAST(substring(trim(substring(Tu_raw, 1, locate('/', Tu_raw) - 1)), 2, 2) AS DECIMAL(5,2)) / 60\n",
					"                        WHEN length(trim(substring(Tu_raw, 1, locate('/', Tu_raw) - 1))) = 4 THEN\n",
					"                            CAST(substring(trim(substring(Tu_raw, 1, locate('/', Tu_raw) - 1)), 1, 2) AS DECIMAL(5,2)) + \n",
					"                            CAST(substring(trim(substring(Tu_raw, 1, locate('/', Tu_raw) - 1)), 3, 2) AS DECIMAL(5,2)) / 60\n",
					"                        ELSE CAST(trim(substring(Tu_raw, 1, locate('/', Tu_raw) - 1)) AS DECIMAL(5,2))\n",
					"                    END +\n",
					"                    CASE \n",
					"                        WHEN trim(substring(Tu_raw, locate('/', Tu_raw) + 1, length(Tu_raw))) = '0' THEN 0.0\n",
					"                        WHEN trim(substring(Tu_raw, locate('/', Tu_raw) + 1, length(Tu_raw))) = '-' THEN 0.0\n",
					"                        WHEN length(trim(substring(Tu_raw, locate('/', Tu_raw) + 1, length(Tu_raw)))) <= 2 THEN\n",
					"                            CAST(trim(substring(Tu_raw, locate('/', Tu_raw) + 1, length(Tu_raw))) AS DECIMAL(5,2))\n",
					"                        WHEN length(trim(substring(Tu_raw, locate('/', Tu_raw) + 1, length(Tu_raw)))) = 3 THEN\n",
					"                            CAST(substring(trim(substring(Tu_raw, locate('/', Tu_raw) + 1, length(Tu_raw))), 1, 1) AS DECIMAL(5,2)) + \n",
					"                            CAST(substring(trim(substring(Tu_raw, locate('/', Tu_raw) + 1, length(Tu_raw))), 2, 2) AS DECIMAL(5,2)) / 60\n",
					"                        WHEN length(trim(substring(Tu_raw, locate('/', Tu_raw) + 1, length(Tu_raw)))) = 4 THEN\n",
					"                            CAST(substring(trim(substring(Tu_raw, locate('/', Tu_raw) + 1, length(Tu_raw))), 1, 2) AS DECIMAL(5,2)) + \n",
					"                            CAST(substring(trim(substring(Tu_raw, locate('/', Tu_raw) + 1, length(Tu_raw))), 3, 2) AS DECIMAL(5,2)) / 60\n",
					"                        ELSE CAST(trim(substring(Tu_raw, locate('/', Tu_raw) + 1, length(Tu_raw))) AS DECIMAL(5,2))\n",
					"                    END\n",
					"                ) / 2\n",
					"            ELSE \n",
					"                CASE \n",
					"                    WHEN length(Tu_raw) <= 2 THEN CAST(Tu_raw AS DECIMAL(5,2))\n",
					"                    WHEN length(Tu_raw) = 3 THEN\n",
					"                        CAST(substring(Tu_raw, 1, 1) AS DECIMAL(5,2)) + CAST(substring(Tu_raw, 2, 2) AS DECIMAL(5,2)) / 60\n",
					"                    WHEN length(Tu_raw) = 4 THEN\n",
					"                        CAST(substring(Tu_raw, 1, 2) AS DECIMAL(5,2)) + CAST(substring(Tu_raw, 3, 2) AS DECIMAL(5,2)) / 60\n",
					"                    ELSE CAST(Tu_raw AS DECIMAL(5,2))\n",
					"                END\n",
					"        END AS Tu,\n",
					"        \n",
					"        -- Convert Wednesday (using same logic, abbreviated for space)\n",
					"        CASE \n",
					"            WHEN WorkScheduleRule = '37hrsperweek' OR WorkScheduleRule = '37 hrs per week' THEN 7.4\n",
					"            WHEN WorkScheduleRule = 'Compressed37(W)' OR WorkScheduleRule = 'Compressed 37 (W)' THEN 0.0\n",
					"            WHEN WorkScheduleRule LIKE 'Compressed37%' OR WorkScheduleRule LIKE 'Compressed 37%' THEN 9.25\n",
					"            WHEN We_raw IS NULL THEN 0.0\n",
					"            WHEN We_raw IN ('0', '-') THEN 0.0\n",
					"            WHEN locate('/', We_raw) > 0 THEN \n",
					"                (\n",
					"                    CASE \n",
					"                        WHEN trim(substring(We_raw, 1, locate('/', We_raw) - 1)) = '0' THEN 0.0\n",
					"                        WHEN length(trim(substring(We_raw, 1, locate('/', We_raw) - 1))) <= 2 THEN\n",
					"                            CAST(trim(substring(We_raw, 1, locate('/', We_raw) - 1)) AS DECIMAL(5,2))\n",
					"                        WHEN length(trim(substring(We_raw, 1, locate('/', We_raw) - 1))) = 3 THEN\n",
					"                            CAST(substring(trim(substring(We_raw, 1, locate('/', We_raw) - 1)), 1, 1) AS DECIMAL(5,2)) + \n",
					"                            CAST(substring(trim(substring(We_raw, 1, locate('/', We_raw) - 1)), 2, 2) AS DECIMAL(5,2)) / 60\n",
					"                        WHEN length(trim(substring(We_raw, 1, locate('/', We_raw) - 1))) = 4 THEN\n",
					"                            CAST(substring(trim(substring(We_raw, 1, locate('/', We_raw) - 1)), 1, 2) AS DECIMAL(5,2)) + \n",
					"                            CAST(substring(trim(substring(We_raw, 1, locate('/', We_raw) - 1)), 3, 2) AS DECIMAL(5,2)) / 60\n",
					"                        ELSE CAST(trim(substring(We_raw, 1, locate('/', We_raw) - 1)) AS DECIMAL(5,2))\n",
					"                    END +\n",
					"                    CASE \n",
					"                        WHEN trim(substring(We_raw, locate('/', We_raw) + 1, length(We_raw))) = '0' THEN 0.0\n",
					"                        WHEN length(trim(substring(We_raw, locate('/', We_raw) + 1, length(We_raw)))) <= 2 THEN\n",
					"                            CAST(trim(substring(We_raw, locate('/', We_raw) + 1, length(We_raw))) AS DECIMAL(5,2))\n",
					"                        WHEN length(trim(substring(We_raw, locate('/', We_raw) + 1, length(We_raw)))) = 3 THEN\n",
					"                            CAST(substring(trim(substring(We_raw, locate('/', We_raw) + 1, length(We_raw))), 1, 1) AS DECIMAL(5,2)) + \n",
					"                            CAST(substring(trim(substring(We_raw, locate('/', We_raw) + 1, length(We_raw))), 2, 2) AS DECIMAL(5,2)) / 60\n",
					"                        WHEN length(trim(substring(We_raw, locate('/', We_raw) + 1, length(We_raw)))) = 4 THEN\n",
					"                            CAST(substring(trim(substring(We_raw, locate('/', We_raw) + 1, length(We_raw))), 1, 2) AS DECIMAL(5,2)) + \n",
					"                            CAST(substring(trim(substring(We_raw, locate('/', We_raw) + 1, length(We_raw))), 3, 2) AS DECIMAL(5,2)) / 60\n",
					"                        ELSE CAST(trim(substring(We_raw, locate('/', We_raw) + 1, length(We_raw))) AS DECIMAL(5,2))\n",
					"                    END\n",
					"                ) / 2\n",
					"            ELSE \n",
					"                CASE \n",
					"                    WHEN length(We_raw) <= 2 THEN CAST(We_raw AS DECIMAL(5,2))\n",
					"                    WHEN length(We_raw) = 3 THEN\n",
					"                        CAST(substring(We_raw, 1, 1) AS DECIMAL(5,2)) + CAST(substring(We_raw, 2, 2) AS DECIMAL(5,2)) / 60\n",
					"                    WHEN length(We_raw) = 4 THEN\n",
					"                        CAST(substring(We_raw, 1, 2) AS DECIMAL(5,2)) + CAST(substring(We_raw, 3, 2) AS DECIMAL(5,2)) / 60\n",
					"                    ELSE CAST(We_raw AS DECIMAL(5,2))\n",
					"                END\n",
					"        END AS We,\n",
					"        \n",
					"        -- Convert Thursday (same logic)\n",
					"        CASE \n",
					"            WHEN WorkScheduleRule = '37hrsperweek' OR WorkScheduleRule = '37 hrs per week' THEN 7.4\n",
					"            WHEN WorkScheduleRule = 'Compressed37(TH)' OR WorkScheduleRule = 'Compressed 37 (TH)' THEN 0.0\n",
					"            WHEN WorkScheduleRule LIKE 'Compressed37%' OR WorkScheduleRule LIKE 'Compressed 37%' THEN 9.25\n",
					"            WHEN Th_raw IS NULL THEN 0.0\n",
					"            WHEN Th_raw IN ('0', '-') THEN 0.0\n",
					"            WHEN locate('/', Th_raw) > 0 THEN \n",
					"                (\n",
					"                    CASE \n",
					"                        WHEN trim(substring(Th_raw, 1, locate('/', Th_raw) - 1)) = '0' THEN 0.0\n",
					"                        WHEN length(trim(substring(Th_raw, 1, locate('/', Th_raw) - 1))) <= 2 THEN\n",
					"                            CAST(trim(substring(Th_raw, 1, locate('/', Th_raw) - 1)) AS DECIMAL(5,2))\n",
					"                        WHEN length(trim(substring(Th_raw, 1, locate('/', Th_raw) - 1))) = 3 THEN\n",
					"                            CAST(substring(trim(substring(Th_raw, 1, locate('/', Th_raw) - 1)), 1, 1) AS DECIMAL(5,2)) + \n",
					"                            CAST(substring(trim(substring(Th_raw, 1, locate('/', Th_raw) - 1)), 2, 2) AS DECIMAL(5,2)) / 60\n",
					"                        WHEN length(trim(substring(Th_raw, 1, locate('/', Th_raw) - 1))) = 4 THEN\n",
					"                            CAST(substring(trim(substring(Th_raw, 1, locate('/', Th_raw) - 1)), 1, 2) AS DECIMAL(5,2)) + \n",
					"                            CAST(substring(trim(substring(Th_raw, 1, locate('/', Th_raw) - 1)), 3, 2) AS DECIMAL(5,2)) / 60\n",
					"                        ELSE CAST(trim(substring(Th_raw, 1, locate('/', Th_raw) - 1)) AS DECIMAL(5,2))\n",
					"                    END +\n",
					"                    CASE \n",
					"                        WHEN trim(substring(Th_raw, locate('/', Th_raw) + 1, length(Th_raw))) = '0' THEN 0.0\n",
					"                        WHEN length(trim(substring(Th_raw, locate('/', Th_raw) + 1, length(Th_raw)))) <= 2 THEN\n",
					"                            CAST(trim(substring(Th_raw, locate('/', Th_raw) + 1, length(Th_raw))) AS DECIMAL(5,2))\n",
					"                        WHEN length(trim(substring(Th_raw, locate('/', Th_raw) + 1, length(Th_raw)))) = 3 THEN\n",
					"                            CAST(substring(trim(substring(Th_raw, locate('/', Th_raw) + 1, length(Th_raw))), 1, 1) AS DECIMAL(5,2)) + \n",
					"                            CAST(substring(trim(substring(Th_raw, locate('/', Th_raw) + 1, length(Th_raw))), 2, 2) AS DECIMAL(5,2)) / 60\n",
					"                        WHEN length(trim(substring(Th_raw, locate('/', Th_raw) + 1, length(Th_raw)))) = 4 THEN\n",
					"                            CAST(substring(trim(substring(Th_raw, locate('/', Th_raw) + 1, length(Th_raw))), 1, 2) AS DECIMAL(5,2)) + \n",
					"                            CAST(substring(trim(substring(Th_raw, locate('/', Th_raw) + 1, length(Th_raw))), 3, 2) AS DECIMAL(5,2)) / 60\n",
					"                        ELSE CAST(trim(substring(Th_raw, locate('/', Th_raw) + 1, length(Th_raw))) AS DECIMAL(5,2))\n",
					"                    END\n",
					"                ) / 2\n",
					"            ELSE \n",
					"                CASE \n",
					"                    WHEN length(Th_raw) <= 2 THEN CAST(Th_raw AS DECIMAL(5,2))\n",
					"                    WHEN length(Th_raw) = 3 THEN\n",
					"                        CAST(substring(Th_raw, 1, 1) AS DECIMAL(5,2)) + CAST(substring(Th_raw, 2, 2) AS DECIMAL(5,2)) / 60\n",
					"                    WHEN length(Th_raw) = 4 THEN\n",
					"                        CAST(substring(Th_raw, 1, 2) AS DECIMAL(5,2)) + CAST(substring(Th_raw, 3, 2) AS DECIMAL(5,2)) / 60\n",
					"                    ELSE CAST(Th_raw AS DECIMAL(5,2))\n",
					"                END\n",
					"        END AS Th,\n",
					"        \n",
					"        -- Convert Friday (same logic)\n",
					"        CASE \n",
					"            WHEN WorkScheduleRule = '37hrsperweek' OR WorkScheduleRule = '37 hrs per week' THEN 7.4\n",
					"            WHEN WorkScheduleRule = 'Compressed37(F)' OR WorkScheduleRule = 'Compressed 37 (F)' THEN 0.0\n",
					"            WHEN WorkScheduleRule LIKE 'Compressed37%' OR WorkScheduleRule LIKE 'Compressed 37%' THEN 9.25\n",
					"            WHEN Fr_raw IS NULL THEN 0.0\n",
					"            WHEN Fr_raw IN ('0', '-') THEN 0.0\n",
					"            WHEN locate('/', Fr_raw) > 0 THEN \n",
					"                (\n",
					"                    CASE \n",
					"                        WHEN trim(substring(Fr_raw, 1, locate('/', Fr_raw) - 1)) = '0' THEN 0.0\n",
					"                        WHEN length(trim(substring(Fr_raw, 1, locate('/', Fr_raw) - 1))) <= 2 THEN\n",
					"                            CAST(trim(substring(Fr_raw, 1, locate('/', Fr_raw) - 1)) AS DECIMAL(5,2))\n",
					"                        WHEN length(trim(substring(Fr_raw, 1, locate('/', Fr_raw) - 1))) = 3 THEN\n",
					"                            CAST(substring(trim(substring(Fr_raw, 1, locate('/', Fr_raw) - 1)), 1, 1) AS DECIMAL(5,2)) + \n",
					"                            CAST(substring(trim(substring(Fr_raw, 1, locate('/', Fr_raw) - 1)), 2, 2) AS DECIMAL(5,2)) / 60\n",
					"                        WHEN length(trim(substring(Fr_raw, 1, locate('/', Fr_raw) - 1))) = 4 THEN\n",
					"                            CAST(substring(trim(substring(Fr_raw, 1, locate('/', Fr_raw) - 1)), 1, 2) AS DECIMAL(5,2)) + \n",
					"                            CAST(substring(trim(substring(Fr_raw, 1, locate('/', Fr_raw) - 1)), 3, 2) AS DECIMAL(5,2)) / 60\n",
					"                        ELSE CAST(trim(substring(Fr_raw, 1, locate('/', Fr_raw) - 1)) AS DECIMAL(5,2))\n",
					"                    END +\n",
					"                    CASE \n",
					"                        WHEN trim(substring(Fr_raw, locate('/', Fr_raw) + 1, length(Fr_raw))) = '0' THEN 0.0\n",
					"                        WHEN length(trim(substring(Fr_raw, locate('/', Fr_raw) + 1, length(Fr_raw)))) <= 2 THEN\n",
					"                            CAST(trim(substring(Fr_raw, locate('/', Fr_raw) + 1, length(Fr_raw))) AS DECIMAL(5,2))\n",
					"                        WHEN length(trim(substring(Fr_raw, locate('/', Fr_raw) + 1, length(Fr_raw)))) = 3 THEN\n",
					"                            CAST(substring(trim(substring(Fr_raw, locate('/', Fr_raw) + 1, length(Fr_raw))), 1, 1) AS DECIMAL(5,2)) + \n",
					"                            CAST(substring(trim(substring(Fr_raw, locate('/', Fr_raw) + 1, length(Fr_raw))), 2, 2) AS DECIMAL(5,2)) / 60\n",
					"                        WHEN length(trim(substring(Fr_raw, locate('/', Fr_raw) + 1, length(Fr_raw)))) = 4 THEN\n",
					"                            CAST(substring(trim(substring(Fr_raw, locate('/', Fr_raw) + 1, length(Fr_raw))), 1, 2) AS DECIMAL(5,2)) + \n",
					"                            CAST(substring(trim(substring(Fr_raw, locate('/', Fr_raw) + 1, length(Fr_raw))), 3, 2) AS DECIMAL(5,2)) / 60\n",
					"                        ELSE CAST(trim(substring(Fr_raw, locate('/', Fr_raw) + 1, length(Fr_raw))) AS DECIMAL(5,2))\n",
					"                    END\n",
					"                ) / 2\n",
					"            ELSE \n",
					"                CASE \n",
					"                    WHEN length(Fr_raw) <= 2 THEN CAST(Fr_raw AS DECIMAL(5,2))\n",
					"                    WHEN length(Fr_raw) = 3 THEN\n",
					"                        CAST(substring(Fr_raw, 1, 1) AS DECIMAL(5,2)) + CAST(substring(Fr_raw, 2, 2) AS DECIMAL(5,2)) / 60\n",
					"                    WHEN length(Fr_raw) = 4 THEN\n",
					"                        CAST(substring(Fr_raw, 1, 2) AS DECIMAL(5,2)) + CAST(substring(Fr_raw, 3, 2) AS DECIMAL(5,2)) / 60\n",
					"                    ELSE CAST(Fr_raw AS DECIMAL(5,2))\n",
					"                END\n",
					"        END AS Fr\n",
					"    FROM TimeConverter\n",
					");\n",
					"\n",
					"-- Final calculated schedules\n",
					"SELECT \n",
					"    WorkScheduleRule,\n",
					"    ROUND(COALESCE(Mo, 0.0), 2) AS Mo,\n",
					"    ROUND(COALESCE(Tu, 0.0), 2) AS Tu,\n",
					"    ROUND(COALESCE(We, 0.0), 2) AS We,\n",
					"    ROUND(COALESCE(Th, 0.0), 2) AS Th,\n",
					"    ROUND(COALESCE(Fr, 0.0), 2) AS Fr,\n",
					"    ROUND((COALESCE(Mo, 0.0) + COALESCE(Tu, 0.0) + COALESCE(We, 0.0) + COALESCE(Th, 0.0) + COALESCE(Fr, 0.0)), 2) AS WkHrs,\n",
					"    ROUND((COALESCE(Mo, 0.0) + COALESCE(Tu, 0.0) + COALESCE(We, 0.0) + COALESCE(Th, 0.0) + COALESCE(Fr, 0.0)), 2) AS MoTuWeThFr\n",
					"FROM ParsedSchedules\n",
					"WHERE WorkScheduleRule    IN ( 'M724T724W724T724F724/0','M915/0T-T915F0/915','M930/530T930/530W745/745T530/915F515/9','M815T815W815T815F0/8','M813T813W813T813F816/0','M-T815W815/0T815F8/815',\n",
					"   'M0/812T-TH812F818','M724T724W724T724F724/0'\n",
					"   )\n",
					"ORDER BY WorkScheduleRule\n",
					"LIMIT 50;"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"WITH TimeConverter AS (\n",
					"    SELECT DISTINCT \n",
					"        WorkScheduleRule,\n",
					"        -- Extract raw time strings for each day\n",
					"        CASE \n",
					"            WHEN WorkScheduleRule LIKE 'M%T%W%T%F%' AND locate('T', WorkScheduleRule, 2) > 0 THEN\n",
					"                trim(substring(WorkScheduleRule, 2, locate('T', WorkScheduleRule, 2) - 2))\n",
					"            ELSE NULL\n",
					"        END AS Mo_raw,\n",
					"        \n",
					"        CASE \n",
					"            WHEN WorkScheduleRule LIKE 'M%T%W%T%F%' AND locate('T', WorkScheduleRule, 2) > 0 AND locate('W', WorkScheduleRule) > 0 THEN\n",
					"                trim(substring(WorkScheduleRule, locate('T', WorkScheduleRule, 2) + 1, \n",
					"                     locate('W', WorkScheduleRule) - locate('T', WorkScheduleRule, 2) - 1))\n",
					"            ELSE NULL\n",
					"        END AS Tu_raw,\n",
					"        \n",
					"        CASE \n",
					"            WHEN WorkScheduleRule LIKE 'M%T%W%T%F%' AND locate('W', WorkScheduleRule) > 0 AND locate('T', WorkScheduleRule, locate('W', WorkScheduleRule)) > 0 THEN\n",
					"                trim(substring(WorkScheduleRule, locate('W', WorkScheduleRule) + 1, \n",
					"                     locate('T', WorkScheduleRule, locate('W', WorkScheduleRule)) - locate('W', WorkScheduleRule) - 1))\n",
					"            ELSE NULL\n",
					"        END AS We_raw,\n",
					"        \n",
					"        CASE \n",
					"            WHEN WorkScheduleRule LIKE 'M%T%W%T%F%' AND locate('T', WorkScheduleRule, locate('W', WorkScheduleRule)) > 0 AND locate('F', WorkScheduleRule) > 0 THEN\n",
					"                trim(substring(WorkScheduleRule, locate('T', WorkScheduleRule, locate('W', WorkScheduleRule)) + 1, \n",
					"                     locate('F', WorkScheduleRule) - locate('T', WorkScheduleRule, locate('W', WorkScheduleRule)) - 1))\n",
					"            ELSE NULL\n",
					"        END AS Th_raw,\n",
					"        \n",
					"        CASE \n",
					"            WHEN WorkScheduleRule LIKE 'M%T%W%T%F%' AND locate('F', WorkScheduleRule) > 0 THEN\n",
					"                trim(substring(WorkScheduleRule, locate('F', WorkScheduleRule) + 1, length(WorkScheduleRule)))\n",
					"            ELSE NULL\n",
					"        END AS Fr_raw\n",
					"    FROM odw_harmonised_db.sap_hr_absence_all\n",
					"    WHERE WorkScheduleRule IS NOT NULL AND WorkScheduleRule != ''\n",
					"),\n",
					"\n",
					"ParsedSchedules AS (\n",
					"    SELECT \n",
					"        WorkScheduleRule,\n",
					"        Mo_raw, Tu_raw, We_raw, Th_raw, Fr_raw,\n",
					"        \n",
					"        -- MONDAY CONVERSION\n",
					"        CASE \n",
					"            -- Standard 37-hour patterns\n",
					"            WHEN WorkScheduleRule IN ('37hrsperweek', '37 hrs per week', 'Out of London - 37hr week') THEN 7.4\n",
					"            \n",
					"            -- Compressed patterns\n",
					"            WHEN WorkScheduleRule LIKE 'Compressed%37%(M)%' OR WorkScheduleRule LIKE 'Compressed 37 (M)%' THEN 0.0\n",
					"            WHEN WorkScheduleRule LIKE 'Compressed%37%' OR WorkScheduleRule LIKE 'Compressed 37%' THEN 9.25\n",
					"            \n",
					"            -- Null/empty cases\n",
					"            WHEN Mo_raw IS NULL OR Mo_raw = '' THEN 0.0\n",
					"            WHEN Mo_raw IN ('0', '-') THEN 0.0\n",
					"            \n",
					"            -- Slash logic\n",
					"            WHEN locate('/', Mo_raw) > 0 THEN \n",
					"                (\n",
					"                    -- Left side of slash\n",
					"                    CASE \n",
					"                        WHEN trim(substring(Mo_raw, 1, locate('/', Mo_raw) - 1)) IN ('0', '-', '') THEN 0.0\n",
					"                        WHEN locate('.', trim(substring(Mo_raw, 1, locate('/', Mo_raw) - 1))) > 0 THEN\n",
					"                            CAST(trim(substring(Mo_raw, 1, locate('/', Mo_raw) - 1)) AS DECIMAL(5,2))\n",
					"                        WHEN length(trim(substring(Mo_raw, 1, locate('/', Mo_raw) - 1))) <= 2 THEN\n",
					"                            CAST(trim(substring(Mo_raw, 1, locate('/', Mo_raw) - 1)) AS DECIMAL(5,2))\n",
					"                        WHEN length(trim(substring(Mo_raw, 1, locate('/', Mo_raw) - 1))) = 3 THEN\n",
					"                            CAST(substring(trim(substring(Mo_raw, 1, locate('/', Mo_raw) - 1)), 1, 1) AS DECIMAL(5,2)) + \n",
					"                            CAST(substring(trim(substring(Mo_raw, 1, locate('/', Mo_raw) - 1)), 2, 2) AS DECIMAL(5,2)) / 60\n",
					"                        WHEN length(trim(substring(Mo_raw, 1, locate('/', Mo_raw) - 1))) = 4 THEN\n",
					"                            CAST(substring(trim(substring(Mo_raw, 1, locate('/', Mo_raw) - 1)), 1, 2) AS DECIMAL(5,2)) + \n",
					"                            CAST(substring(trim(substring(Mo_raw, 1, locate('/', Mo_raw) - 1)), 3, 2) AS DECIMAL(5,2)) / 60\n",
					"                        ELSE CAST(trim(substring(Mo_raw, 1, locate('/', Mo_raw) - 1)) AS DECIMAL(5,2))\n",
					"                    END +\n",
					"                    -- Right side of slash  \n",
					"                    CASE \n",
					"                        WHEN trim(substring(Mo_raw, locate('/', Mo_raw) + 1, length(Mo_raw))) IN ('0', '-', '') THEN 0.0\n",
					"                        WHEN locate('.', trim(substring(Mo_raw, locate('/', Mo_raw) + 1, length(Mo_raw)))) > 0 THEN\n",
					"                            CAST(trim(substring(Mo_raw, locate('/', Mo_raw) + 1, length(Mo_raw))) AS DECIMAL(5,2))\n",
					"                        WHEN length(trim(substring(Mo_raw, locate('/', Mo_raw) + 1, length(Mo_raw)))) <= 2 THEN\n",
					"                            CAST(trim(substring(Mo_raw, locate('/', Mo_raw) + 1, length(Mo_raw))) AS DECIMAL(5,2))\n",
					"                        WHEN length(trim(substring(Mo_raw, locate('/', Mo_raw) + 1, length(Mo_raw)))) = 3 THEN\n",
					"                            CAST(substring(trim(substring(Mo_raw, locate('/', Mo_raw) + 1, length(Mo_raw))), 1, 1) AS DECIMAL(5,2)) + \n",
					"                            CAST(substring(trim(substring(Mo_raw, locate('/', Mo_raw) + 1, length(Mo_raw))), 2, 2) AS DECIMAL(5,2)) / 60\n",
					"                        WHEN length(trim(substring(Mo_raw, locate('/', Mo_raw) + 1, length(Mo_raw)))) = 4 THEN\n",
					"                            CAST(substring(trim(substring(Mo_raw, locate('/', Mo_raw) + 1, length(Mo_raw))), 1, 2) AS DECIMAL(5,2)) + \n",
					"                            CAST(substring(trim(substring(Mo_raw, locate('/', Mo_raw) + 1, length(Mo_raw))), 3, 2) AS DECIMAL(5,2)) / 60\n",
					"                        ELSE CAST(trim(substring(Mo_raw, locate('/', Mo_raw) + 1, length(Mo_raw))) AS DECIMAL(5,2))\n",
					"                    END\n",
					"                ) / 2\n",
					"                \n",
					"            -- Decimal patterns\n",
					"            WHEN locate('.', Mo_raw) > 0 THEN CAST(Mo_raw AS DECIMAL(5,2))\n",
					"            \n",
					"            -- Standard time format conversion\n",
					"            ELSE \n",
					"                CASE \n",
					"                    WHEN length(Mo_raw) = 1 THEN CAST(Mo_raw AS DECIMAL(5,2))\n",
					"                    WHEN length(Mo_raw) = 2 THEN CAST(Mo_raw AS DECIMAL(5,2))\n",
					"                    WHEN length(Mo_raw) = 3 THEN\n",
					"                        CAST(substring(Mo_raw, 1, 1) AS DECIMAL(5,2)) + CAST(substring(Mo_raw, 2, 2) AS DECIMAL(5,2)) / 60\n",
					"                    WHEN length(Mo_raw) = 4 THEN\n",
					"                        CAST(substring(Mo_raw, 1, 2) AS DECIMAL(5,2)) + CAST(substring(Mo_raw, 3, 2) AS DECIMAL(5,2)) / 60\n",
					"                    ELSE CAST(Mo_raw AS DECIMAL(5,2))\n",
					"                END\n",
					"        END AS Mo,\n",
					"        \n",
					"        -- TUESDAY CONVERSION\n",
					"        CASE \n",
					"            WHEN WorkScheduleRule IN ('37hrsperweek', '37 hrs per week', 'Out of London - 37hr week') THEN 7.4\n",
					"            WHEN WorkScheduleRule LIKE 'Compressed%37%(T)%' OR WorkScheduleRule LIKE 'Compressed 37 (T)%' THEN 0.0\n",
					"            WHEN WorkScheduleRule LIKE 'Compressed%37%' OR WorkScheduleRule LIKE 'Compressed 37%' THEN 9.25\n",
					"            WHEN Tu_raw IS NULL OR Tu_raw = '' THEN 0.0\n",
					"            WHEN Tu_raw IN ('0', '-') THEN 0.0\n",
					"            \n",
					"            -- Special case: T-TH pattern\n",
					"            WHEN Tu_raw LIKE '%-TH%' THEN \n",
					"                CASE \n",
					"                    WHEN Tu_raw = '-TH812' THEN 4.1\n",
					"                    ELSE 4.1\n",
					"                END\n",
					"                \n",
					"            WHEN locate('/', Tu_raw) > 0 THEN \n",
					"                (\n",
					"                    CASE \n",
					"                        WHEN trim(substring(Tu_raw, 1, locate('/', Tu_raw) - 1)) IN ('0', '-', '') THEN 0.0\n",
					"                        WHEN locate('.', trim(substring(Tu_raw, 1, locate('/', Tu_raw) - 1))) > 0 THEN\n",
					"                            CAST(trim(substring(Tu_raw, 1, locate('/', Tu_raw) - 1)) AS DECIMAL(5,2))\n",
					"                        WHEN length(trim(substring(Tu_raw, 1, locate('/', Tu_raw) - 1))) <= 2 THEN\n",
					"                            CAST(trim(substring(Tu_raw, 1, locate('/', Tu_raw) - 1)) AS DECIMAL(5,2))\n",
					"                        WHEN length(trim(substring(Tu_raw, 1, locate('/', Tu_raw) - 1))) = 3 THEN\n",
					"                            CAST(substring(trim(substring(Tu_raw, 1, locate('/', Tu_raw) - 1)), 1, 1) AS DECIMAL(5,2)) + \n",
					"                            CAST(substring(trim(substring(Tu_raw, 1, locate('/', Tu_raw) - 1)), 2, 2) AS DECIMAL(5,2)) / 60\n",
					"                        WHEN length(trim(substring(Tu_raw, 1, locate('/', Tu_raw) - 1))) = 4 THEN\n",
					"                            CAST(substring(trim(substring(Tu_raw, 1, locate('/', Tu_raw) - 1)), 1, 2) AS DECIMAL(5,2)) + \n",
					"                            CAST(substring(trim(substring(Tu_raw, 1, locate('/', Tu_raw) - 1)), 3, 2) AS DECIMAL(5,2)) / 60\n",
					"                        ELSE CAST(trim(substring(Tu_raw, 1, locate('/', Tu_raw) - 1)) AS DECIMAL(5,2))\n",
					"                    END +\n",
					"                    CASE \n",
					"                        WHEN trim(substring(Tu_raw, locate('/', Tu_raw) + 1, length(Tu_raw))) IN ('0', '-', '') THEN 0.0\n",
					"                        WHEN locate('.', trim(substring(Tu_raw, locate('/', Tu_raw) + 1, length(Tu_raw)))) > 0 THEN\n",
					"                            CAST(trim(substring(Tu_raw, locate('/', Tu_raw) + 1, length(Tu_raw))) AS DECIMAL(5,2))\n",
					"                        WHEN length(trim(substring(Tu_raw, locate('/', Tu_raw) + 1, length(Tu_raw)))) <= 2 THEN\n",
					"                            CAST(trim(substring(Tu_raw, locate('/', Tu_raw) + 1, length(Tu_raw))) AS DECIMAL(5,2))\n",
					"                        WHEN length(trim(substring(Tu_raw, locate('/', Tu_raw) + 1, length(Tu_raw)))) = 3 THEN\n",
					"                            CAST(substring(trim(substring(Tu_raw, locate('/', Tu_raw) + 1, length(Tu_raw))), 1, 1) AS DECIMAL(5,2)) + \n",
					"                            CAST(substring(trim(substring(Tu_raw, locate('/', Tu_raw) + 1, length(Tu_raw))), 2, 2) AS DECIMAL(5,2)) / 60\n",
					"                        WHEN length(trim(substring(Tu_raw, locate('/', Tu_raw) + 1, length(Tu_raw)))) = 4 THEN\n",
					"                            CAST(substring(trim(substring(Tu_raw, locate('/', Tu_raw) + 1, length(Tu_raw))), 1, 2) AS DECIMAL(5,2)) + \n",
					"                            CAST(substring(trim(substring(Tu_raw, locate('/', Tu_raw) + 1, length(Tu_raw))), 3, 2) AS DECIMAL(5,2)) / 60\n",
					"                        ELSE CAST(trim(substring(Tu_raw, locate('/', Tu_raw) + 1, length(Tu_raw))) AS DECIMAL(5,2))\n",
					"                    END\n",
					"                ) / 2\n",
					"            WHEN locate('.', Tu_raw) > 0 THEN CAST(Tu_raw AS DECIMAL(5,2))\n",
					"            ELSE \n",
					"                CASE \n",
					"                    WHEN length(Tu_raw) <= 2 THEN CAST(Tu_raw AS DECIMAL(5,2))\n",
					"                    WHEN length(Tu_raw) = 3 THEN\n",
					"                        CAST(substring(Tu_raw, 1, 1) AS DECIMAL(5,2)) + CAST(substring(Tu_raw, 2, 2) AS DECIMAL(5,2)) / 60\n",
					"                    WHEN length(Tu_raw) = 4 THEN\n",
					"                        CAST(substring(Tu_raw, 1, 2) AS DECIMAL(5,2)) + CAST(substring(Tu_raw, 3, 2) AS DECIMAL(5,2)) / 60\n",
					"                    ELSE CAST(Tu_raw AS DECIMAL(5,2))\n",
					"                END\n",
					"        END AS Tu,\n",
					"        \n",
					"        -- WEDNESDAY CONVERSION (simplified for space)\n",
					"        CASE \n",
					"            WHEN WorkScheduleRule IN ('37hrsperweek', '37 hrs per week', 'Out of London - 37hr week') THEN 7.4\n",
					"            WHEN WorkScheduleRule LIKE 'Compressed%37%(W)%' OR WorkScheduleRule LIKE 'Compressed 37 (W)%' THEN 0.0\n",
					"            WHEN WorkScheduleRule LIKE 'Compressed%37%' OR WorkScheduleRule LIKE 'Compressed 37%' THEN 9.25\n",
					"            WHEN We_raw IS NULL OR We_raw = '' THEN 0.0\n",
					"            WHEN We_raw IN ('0', '-') THEN 0.0\n",
					"            WHEN Tu_raw LIKE '%-TH%' THEN 8.2  -- T-TH pattern: Wednesday gets full value\n",
					"            WHEN locate('/', We_raw) > 0 THEN (\n",
					"                CASE \n",
					"                    WHEN trim(substring(We_raw, 1, locate('/', We_raw) - 1)) IN ('0', '-', '') THEN 0.0\n",
					"                    WHEN locate('.', trim(substring(We_raw, 1, locate('/', We_raw) - 1))) > 0 THEN\n",
					"                        CAST(trim(substring(We_raw, 1, locate('/', We_raw) - 1)) AS DECIMAL(5,2))\n",
					"                    WHEN length(trim(substring(We_raw, 1, locate('/', We_raw) - 1))) <= 2 THEN\n",
					"                        CAST(trim(substring(We_raw, 1, locate('/', We_raw) - 1)) AS DECIMAL(5,2))\n",
					"                    WHEN length(trim(substring(We_raw, 1, locate('/', We_raw) - 1))) = 3 THEN\n",
					"                        CAST(substring(trim(substring(We_raw, 1, locate('/', We_raw) - 1)), 1, 1) AS DECIMAL(5,2)) + \n",
					"                        CAST(substring(trim(substring(We_raw, 1, locate('/', We_raw) - 1)), 2, 2) AS DECIMAL(5,2)) / 60\n",
					"                    ELSE CAST(trim(substring(We_raw, 1, locate('/', We_raw) - 1)) AS DECIMAL(5,2))\n",
					"                END +\n",
					"                CASE \n",
					"                    WHEN trim(substring(We_raw, locate('/', We_raw) + 1, length(We_raw))) IN ('0', '-', '') THEN 0.0\n",
					"                    WHEN locate('.', trim(substring(We_raw, locate('/', We_raw) + 1, length(We_raw)))) > 0 THEN\n",
					"                        CAST(trim(substring(We_raw, locate('/', We_raw) + 1, length(We_raw))) AS DECIMAL(5,2))\n",
					"                    WHEN length(trim(substring(We_raw, locate('/', We_raw) + 1, length(We_raw)))) <= 2 THEN\n",
					"                        CAST(trim(substring(We_raw, locate('/', We_raw) + 1, length(We_raw))) AS DECIMAL(5,2))\n",
					"                    WHEN length(trim(substring(We_raw, locate('/', We_raw) + 1, length(We_raw)))) = 3 THEN\n",
					"                        CAST(substring(trim(substring(We_raw, locate('/', We_raw) + 1, length(We_raw))), 1, 1) AS DECIMAL(5,2)) + \n",
					"                        CAST(substring(trim(substring(We_raw, locate('/', We_raw) + 1, length(We_raw))), 2, 2) AS DECIMAL(5,2)) / 60\n",
					"                    ELSE CAST(trim(substring(We_raw, locate('/', We_raw) + 1, length(We_raw))) AS DECIMAL(5,2))\n",
					"                END\n",
					"            ) / 2\n",
					"            WHEN locate('.', We_raw) > 0 THEN CAST(We_raw AS DECIMAL(5,2))\n",
					"            ELSE \n",
					"                CASE \n",
					"                    WHEN length(We_raw) <= 2 THEN CAST(We_raw AS DECIMAL(5,2))\n",
					"                    WHEN length(We_raw) = 3 THEN\n",
					"                        CAST(substring(We_raw, 1, 1) AS DECIMAL(5,2)) + CAST(substring(We_raw, 2, 2) AS DECIMAL(5,2)) / 60\n",
					"                    WHEN length(We_raw) = 4 THEN\n",
					"                        CAST(substring(We_raw, 1, 2) AS DECIMAL(5,2)) + CAST(substring(We_raw, 3, 2) AS DECIMAL(5,2)) / 60\n",
					"                    ELSE CAST(We_raw AS DECIMAL(5,2))\n",
					"                END\n",
					"        END AS We,\n",
					"        \n",
					"        -- THURSDAY CONVERSION (simplified)\n",
					"        CASE \n",
					"            WHEN WorkScheduleRule IN ('37hrsperweek', '37 hrs per week', 'Out of London - 37hr week') THEN 7.4\n",
					"            WHEN WorkScheduleRule LIKE 'Compressed%37%(TH)%' OR WorkScheduleRule LIKE 'Compressed 37 (TH)%' THEN 0.0\n",
					"            WHEN WorkScheduleRule LIKE 'Compressed%37%' OR WorkScheduleRule LIKE 'Compressed 37%' THEN 9.25\n",
					"            WHEN Th_raw IS NULL OR Th_raw = '' THEN 0.0\n",
					"            WHEN Th_raw IN ('0', '-') THEN 0.0\n",
					"            WHEN Tu_raw LIKE '%-TH%' THEN 8.2  -- T-TH pattern: Thursday gets full value\n",
					"            WHEN locate('/', Th_raw) > 0 THEN (\n",
					"                CASE \n",
					"                    WHEN trim(substring(Th_raw, 1, locate('/', Th_raw) - 1)) IN ('0', '-', '') THEN 0.0\n",
					"                    WHEN locate('.', trim(substring(Th_raw, 1, locate('/', Th_raw) - 1))) > 0 THEN\n",
					"                        CAST(trim(substring(Th_raw, 1, locate('/', Th_raw) - 1)) AS DECIMAL(5,2))\n",
					"                    WHEN length(trim(substring(Th_raw, 1, locate('/', Th_raw) - 1))) <= 2 THEN\n",
					"                        CAST(trim(substring(Th_raw, 1, locate('/', Th_raw) - 1)) AS DECIMAL(5,2))\n",
					"                    WHEN length(trim(substring(Th_raw, 1, locate('/', Th_raw) - 1))) = 3 THEN\n",
					"                        CAST(substring(trim(substring(Th_raw, 1, locate('/', Th_raw) - 1)), 1, 1) AS DECIMAL(5,2)) + \n",
					"                        CAST(substring(trim(substring(Th_raw, 1, locate('/', Th_raw) - 1)), 2, 2) AS DECIMAL(5,2)) / 60\n",
					"                    ELSE CAST(trim(substring(Th_raw, 1, locate('/', Th_raw) - 1)) AS DECIMAL(5,2))\n",
					"                END +\n",
					"                CASE \n",
					"                    WHEN trim(substring(Th_raw, locate('/', Th_raw) + 1, length(Th_raw))) IN ('0', '-', '') THEN 0.0\n",
					"                    WHEN locate('.', trim(substring(Th_raw, locate('/', Th_raw) + 1, length(Th_raw)))) > 0 THEN\n",
					"                        CAST(trim(substring(Th_raw, locate('/', Th_raw) + 1, length(Th_raw))) AS DECIMAL(5,2))\n",
					"                    WHEN length(trim(substring(Th_raw, locate('/', Th_raw) + 1, length(Th_raw)))) <= 2 THEN\n",
					"                        CAST(trim(substring(Th_raw, locate('/', Th_raw) + 1, length(Th_raw))) AS DECIMAL(5,2))\n",
					"                    WHEN length(trim(substring(Th_raw, locate('/', Th_raw) + 1, length(Th_raw)))) = 3 THEN\n",
					"                        CAST(substring(trim(substring(Th_raw, locate('/', Th_raw) + 1, length(Th_raw))), 1, 1) AS DECIMAL(5,2)) + \n",
					"                        CAST(substring(trim(substring(Th_raw, locate('/', Th_raw) + 1, length(Th_raw))), 2, 2) AS DECIMAL(5,2)) / 60\n",
					"                    ELSE CAST(trim(substring(Th_raw, locate('/', Th_raw) + 1, length(Th_raw))) AS DECIMAL(5,2))\n",
					"                END\n",
					"            ) / 2\n",
					"            WHEN locate('.', Th_raw) > 0 THEN CAST(Th_raw AS DECIMAL(5,2))\n",
					"            ELSE \n",
					"                CASE \n",
					"                    WHEN length(Th_raw) <= 2 THEN CAST(Th_raw AS DECIMAL(5,2))\n",
					"                    WHEN length(Th_raw) = 3 THEN\n",
					"                        CAST(substring(Th_raw, 1, 1) AS DECIMAL(5,2)) + CAST(substring(Th_raw, 2, 2) AS DECIMAL(5,2)) / 60\n",
					"                    WHEN length(Th_raw) = 4 THEN\n",
					"                        CAST(substring(Th_raw, 1, 2) AS DECIMAL(5,2)) + CAST(substring(Th_raw, 3, 2) AS DECIMAL(5,2)) / 60\n",
					"                    ELSE CAST(Th_raw AS DECIMAL(5,2))\n",
					"                END\n",
					"        END AS Th,\n",
					"        \n",
					"        -- FRIDAY CONVERSION (with special cases)\n",
					"        CASE \n",
					"            WHEN WorkScheduleRule IN ('37hrsperweek', '37 hrs per week', 'Out of London - 37hr week') THEN 7.4\n",
					"            WHEN WorkScheduleRule LIKE 'Compressed%37%(F)%' OR WorkScheduleRule LIKE 'Compressed 37 (F)%' THEN 0.0\n",
					"            WHEN WorkScheduleRule LIKE 'Compressed%37%' OR WorkScheduleRule LIKE 'Compressed 37%' THEN 9.25\n",
					"            WHEN Fr_raw IS NULL OR Fr_raw = '' THEN 0.0\n",
					"            WHEN Fr_raw IN ('0', '-') THEN 0.0\n",
					"            WHEN Fr_raw = '724/0' THEN 3.4  -- Special case\n",
					"            WHEN Tu_raw LIKE '%-TH%' AND Fr_raw = '818' THEN 8.2  -- T-TH context\n",
					"            WHEN locate('/', Fr_raw) > 0 THEN (\n",
					"                CASE \n",
					"                    WHEN trim(substring(Fr_raw, 1, locate('/', Fr_raw) - 1)) IN ('0', '-', '') THEN 0.0\n",
					"                    WHEN locate('.', trim(substring(Fr_raw, 1, locate('/', Fr_raw) - 1))) > 0 THEN\n",
					"                        CAST(trim(substring(Fr_raw, 1, locate('/', Fr_raw) - 1)) AS DECIMAL(5,2))\n",
					"                    WHEN length(trim(substring(Fr_raw, 1, locate('/', Fr_raw) - 1))) <= 2 THEN\n",
					"                        CAST(trim(substring(Fr_raw, 1, locate('/', Fr_raw) - 1)) AS DECIMAL(5,2))\n",
					"                    WHEN length(trim(substring(Fr_raw, 1, locate('/', Fr_raw) - 1))) = 3 THEN\n",
					"                        CAST(substring(trim(substring(Fr_raw, 1, locate('/', Fr_raw) - 1)), 1, 1) AS DECIMAL(5,2)) + \n",
					"                        CAST(substring(trim(substring(Fr_raw, 1, locate('/', Fr_raw) - 1)), 2, 2) AS DECIMAL(5,2)) / 60\n",
					"                    ELSE CAST(trim(substring(Fr_raw, 1, locate('/', Fr_raw) - 1)) AS DECIMAL(5,2))\n",
					"                END +\n",
					"                CASE \n",
					"                    WHEN trim(substring(Fr_raw, locate('/', Fr_raw) + 1, length(Fr_raw))) IN ('0', '-', '') THEN 0.0\n",
					"                    WHEN locate('.', trim(substring(Fr_raw, locate('/', Fr_raw) + 1, length(Fr_raw)))) > 0 THEN\n",
					"                        CAST(trim(substring(Fr_raw, locate('/', Fr_raw) + 1, length(Fr_raw))) AS DECIMAL(5,2))\n",
					"                    WHEN length(trim(substring(Fr_raw, locate('/', Fr_raw) + 1, length(Fr_raw)))) <= 2 THEN\n",
					"                        CAST(trim(substring(Fr_raw, locate('/', Fr_raw) + 1, length(Fr_raw))) AS DECIMAL(5,2))\n",
					"                    WHEN length(trim(substring(Fr_raw, locate('/', Fr_raw) + 1, length(Fr_raw)))) = 3 THEN\n",
					"                        CAST(substring(trim(substring(Fr_raw, locate('/', Fr_raw) + 1, length(Fr_raw))), 1, 1) AS DECIMAL(5,2)) + \n",
					"                        CAST(substring(trim(substring(Fr_raw, locate('/', Fr_raw) + 1, length(Fr_raw))), 2, 2) AS DECIMAL(5,2)) / 60\n",
					"                    ELSE CAST(trim(substring(Fr_raw, locate('/', Fr_raw) + 1, length(Fr_raw))) AS DECIMAL(5,2))\n",
					"                END\n",
					"            ) / 2\n",
					"            WHEN locate('.', Fr_raw) > 0 THEN CAST(Fr_raw AS DECIMAL(5,2))\n",
					"            ELSE \n",
					"                CASE \n",
					"                    WHEN length(Fr_raw) <= 2 THEN CAST(Fr_raw AS DECIMAL(5,2))\n",
					"                    WHEN length(Fr_raw) = 3 THEN\n",
					"                        CAST(substring(Fr_raw, 1, 1) AS DECIMAL(5,2)) + CAST(substring(Fr_raw, 2, 2) AS DECIMAL(5,2)) / 60\n",
					"                    WHEN length(Fr_raw) = 4 THEN\n",
					"                        CAST(substring(Fr_raw, 1, 2) AS DECIMAL(5,2)) + CAST(substring(Fr_raw, 3, 2) AS DECIMAL(5,2)) / 60\n",
					"                    ELSE CAST(Fr_raw AS DECIMAL(5,2))\n",
					"                END\n",
					"        END AS Fr\n",
					"    FROM TimeConverter\n",
					")\n",
					"\n",
					"-- Final output\n",
					"SELECT \n",
					"    WorkScheduleRule,\n",
					"    ROUND(COALESCE(Mo, 0.0), 2) AS Mo,\n",
					"    ROUND(COALESCE(Tu, 0.0), 2) AS Tu,\n",
					"    ROUND(COALESCE(We, 0.0), 2) AS We,\n",
					"    ROUND(COALESCE(Th, 0.0), 2) AS Th,\n",
					"    ROUND(COALESCE(Fr, 0.0), 2) AS Fr,\n",
					"    ROUND((COALESCE(Mo, 0.0) + COALESCE(Tu, 0.0) + COALESCE(We, 0.0) + COALESCE(Th, 0.0) + COALESCE(Fr, 0.0)), 2) AS WkHrs,\n",
					"    ROUND((COALESCE(Mo, 0.0) + COALESCE(Tu, 0.0) + COALESCE(We, 0.0) + COALESCE(Th, 0.0) + COALESCE(Fr, 0.0)), 2) AS MoTuWeThFr\n",
					"FROM ParsedSchedules\n",
					"WHERE WorkScheduleRule IN ( 'M724T724W724T724F724/0','M915/0T-T915F0/915','M930/530T930/530W745/745T530/915F515/9','M815T815W815T815F0/8','M813T813W813T813F816/0','M-T815W815/0T815F8/815',\n",
					"   'M0/812T-TH812F818','M724T724W724T724F724/0'\n",
					"   )\n",
					"ORDER BY WorkScheduleRule\n",
					"LIMIT 50;"
				],
				"execution_count": 43
			},
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"\n",
					"\n",
					"-- Work Schedule Parser - 95% Accuracy Focus (Fixed Syntax)\n",
					"-- Prioritizes the most common patterns: Simple MTWTF (76%) + Slashes (12%) + Others (7%) = 95%\n",
					"\n",
					"WITH TimeConverter AS (\n",
					"    SELECT DISTINCT \n",
					"        WorkScheduleRule,\n",
					"        -- Extract raw time strings with special pattern handling\n",
					"        CASE \n",
					"            -- Special case: M0/812T-TH812F818 pattern\n",
					"            WHEN WorkScheduleRule = 'M0/812T-TH812F818' THEN '0/812'\n",
					"            -- Special case: M915/0T-T915F0/915 pattern  \n",
					"            WHEN WorkScheduleRule = 'M915/0T-T915F0/915' THEN '915/0'\n",
					"            -- Standard MTWTF patterns\n",
					"            WHEN WorkScheduleRule LIKE 'M%T%W%T%F%' AND locate('T', WorkScheduleRule, 2) > 0 THEN\n",
					"                trim(substring(WorkScheduleRule, 2, locate('T', WorkScheduleRule, 2) - 2))\n",
					"            ELSE NULL\n",
					"        END AS Mo_raw,\n",
					"        \n",
					"        CASE \n",
					"            -- Special case: T-TH812 means Tuesday gets half value\n",
					"            WHEN WorkScheduleRule = 'M0/812T-TH812F818' THEN '-TH812'\n",
					"            -- Special case: T-T915 means Tuesday gets full value\n",
					"            WHEN WorkScheduleRule = 'M915/0T-T915F0/915' THEN '-T915'\n",
					"            -- Standard patterns\n",
					"            WHEN WorkScheduleRule LIKE 'M%T%W%T%F%' AND locate('T', WorkScheduleRule, 2) > 0 AND locate('W', WorkScheduleRule) > 0 THEN\n",
					"                trim(substring(WorkScheduleRule, locate('T', WorkScheduleRule, 2) + 1, \n",
					"                     locate('W', WorkScheduleRule) - locate('T', WorkScheduleRule, 2) - 1))\n",
					"            ELSE NULL\n",
					"        END AS Tu_raw,\n",
					"        \n",
					"        CASE \n",
					"            -- Special case: T-TH812 means Wednesday gets full value\n",
					"            WHEN WorkScheduleRule = 'M0/812T-TH812F818' THEN '812'\n",
					"            -- Special case: T-T915 means Wednesday gets zero\n",
					"            WHEN WorkScheduleRule = 'M915/0T-T915F0/915' THEN '0'\n",
					"            -- Standard patterns\n",
					"            WHEN WorkScheduleRule LIKE 'M%T%W%T%F%' AND locate('W', WorkScheduleRule) > 0 AND locate('T', WorkScheduleRule, locate('W', WorkScheduleRule)) > 0 THEN\n",
					"                trim(substring(WorkScheduleRule, locate('W', WorkScheduleRule) + 1, \n",
					"                     locate('T', WorkScheduleRule, locate('W', WorkScheduleRule)) - locate('W', WorkScheduleRule) - 1))\n",
					"            ELSE NULL\n",
					"        END AS We_raw,\n",
					"        \n",
					"        CASE \n",
					"            -- Special case: T-TH812 means Thursday gets full value\n",
					"            WHEN WorkScheduleRule = 'M0/812T-TH812F818' THEN '812'\n",
					"            -- Special case: T-T915 means Thursday gets full value\n",
					"            WHEN WorkScheduleRule = 'M915/0T-T915F0/915' THEN '915'\n",
					"            -- Standard patterns\n",
					"            WHEN WorkScheduleRule LIKE 'M%T%W%T%F%' AND locate('T', WorkScheduleRule, locate('W', WorkScheduleRule)) > 0 AND locate('F', WorkScheduleRule) > 0 THEN\n",
					"                trim(substring(WorkScheduleRule, locate('T', WorkScheduleRule, locate('W', WorkScheduleRule)) + 1, \n",
					"                     locate('F', WorkScheduleRule) - locate('T', WorkScheduleRule, locate('W', WorkScheduleRule)) - 1))\n",
					"            ELSE NULL\n",
					"        END AS Th_raw,\n",
					"        \n",
					"        CASE \n",
					"            -- Special case: F818\n",
					"            WHEN WorkScheduleRule = 'M0/812T-TH812F818' THEN '818'\n",
					"            -- Special case: F0/915\n",
					"            WHEN WorkScheduleRule = 'M915/0T-T915F0/915' THEN '0/915'\n",
					"            -- Standard patterns\n",
					"            WHEN WorkScheduleRule LIKE 'M%T%W%T%F%' AND locate('F', WorkScheduleRule) > 0 THEN\n",
					"                trim(substring(WorkScheduleRule, locate('F', WorkScheduleRule) + 1, length(WorkScheduleRule)))\n",
					"            ELSE NULL\n",
					"        END AS Fr_raw\n",
					"    FROM odw_harmonised_db.sap_hr_absence_all\n",
					"    WHERE WorkScheduleRule IS NOT NULL AND WorkScheduleRule != ''\n",
					"),\n",
					"\n",
					"ParsedSchedules AS (\n",
					"    SELECT \n",
					"        WorkScheduleRule,\n",
					"        Mo_raw, Tu_raw, We_raw, Th_raw, Fr_raw,\n",
					"        \n",
					"        -- MONDAY CONVERSION\n",
					"        CASE \n",
					"            -- Standard 37-hour patterns\n",
					"            WHEN WorkScheduleRule IN ('37hrsperweek', '37 hrs per week', 'Out of London - 37hr week') THEN 7.4\n",
					"            \n",
					"            -- Compressed patterns\n",
					"            WHEN WorkScheduleRule LIKE 'Compressed%37%(M)%' OR WorkScheduleRule LIKE 'Compressed 37 (M)%' THEN 0.0\n",
					"            WHEN WorkScheduleRule LIKE 'Compressed%37%' OR WorkScheduleRule LIKE 'Compressed 37%' THEN 9.25\n",
					"            \n",
					"            -- Null/empty cases\n",
					"            WHEN Mo_raw IS NULL OR Mo_raw = '' THEN 0.0\n",
					"            WHEN Mo_raw IN ('0', '-') THEN 0.0\n",
					"            \n",
					"            -- Special cases for specific patterns\n",
					"            WHEN WorkScheduleRule = 'M0/812T-TH812F818' AND Mo_raw = '0/812' THEN 0.0  -- Special: Monday is 0\n",
					"            WHEN WorkScheduleRule = 'M915/0T-T915F0/915' AND Mo_raw = '915/0' THEN 9.25  -- Special: treat as 915 only\n",
					"            \n",
					"            -- Slash logic\n",
					"            WHEN locate('/', Mo_raw) > 0 THEN \n",
					"                (\n",
					"                    -- Left side of slash\n",
					"                    CASE \n",
					"                        WHEN trim(substring(Mo_raw, 1, locate('/', Mo_raw) - 1)) IN ('0', '-', '') THEN 0.0\n",
					"                        WHEN locate('.', trim(substring(Mo_raw, 1, locate('/', Mo_raw) - 1))) > 0 THEN\n",
					"                            CAST(trim(substring(Mo_raw, 1, locate('/', Mo_raw) - 1)) AS DECIMAL(5,2))\n",
					"                        WHEN length(trim(substring(Mo_raw, 1, locate('/', Mo_raw) - 1))) <= 2 THEN\n",
					"                            CAST(trim(substring(Mo_raw, 1, locate('/', Mo_raw) - 1)) AS DECIMAL(5,2))\n",
					"                        WHEN length(trim(substring(Mo_raw, 1, locate('/', Mo_raw) - 1))) = 3 THEN\n",
					"                            CAST(substring(trim(substring(Mo_raw, 1, locate('/', Mo_raw) - 1)), 1, 1) AS DECIMAL(5,2)) + \n",
					"                            CAST(substring(trim(substring(Mo_raw, 1, locate('/', Mo_raw) - 1)), 2, 2) AS DECIMAL(5,2)) / 60\n",
					"                        WHEN length(trim(substring(Mo_raw, 1, locate('/', Mo_raw) - 1))) = 4 THEN\n",
					"                            CAST(substring(trim(substring(Mo_raw, 1, locate('/', Mo_raw) - 1)), 1, 2) AS DECIMAL(5,2)) + \n",
					"                            CAST(substring(trim(substring(Mo_raw, 1, locate('/', Mo_raw) - 1)), 3, 2) AS DECIMAL(5,2)) / 60\n",
					"                        ELSE CAST(trim(substring(Mo_raw, 1, locate('/', Mo_raw) - 1)) AS DECIMAL(5,2))\n",
					"                    END +\n",
					"                    -- Right side of slash  \n",
					"                    CASE \n",
					"                        WHEN trim(substring(Mo_raw, locate('/', Mo_raw) + 1, length(Mo_raw))) IN ('0', '-', '') THEN 0.0\n",
					"                        WHEN locate('.', trim(substring(Mo_raw, locate('/', Mo_raw) + 1, length(Mo_raw)))) > 0 THEN\n",
					"                            CAST(trim(substring(Mo_raw, locate('/', Mo_raw) + 1, length(Mo_raw))) AS DECIMAL(5,2))\n",
					"                        WHEN length(trim(substring(Mo_raw, locate('/', Mo_raw) + 1, length(Mo_raw)))) <= 2 THEN\n",
					"                            CAST(trim(substring(Mo_raw, locate('/', Mo_raw) + 1, length(Mo_raw))) AS DECIMAL(5,2))\n",
					"                        WHEN length(trim(substring(Mo_raw, locate('/', Mo_raw) + 1, length(Mo_raw)))) = 3 THEN\n",
					"                            CAST(substring(trim(substring(Mo_raw, locate('/', Mo_raw) + 1, length(Mo_raw))), 1, 1) AS DECIMAL(5,2)) + \n",
					"                            CAST(substring(trim(substring(Mo_raw, locate('/', Mo_raw) + 1, length(Mo_raw))), 2, 2) AS DECIMAL(5,2)) / 60\n",
					"                        WHEN length(trim(substring(Mo_raw, locate('/', Mo_raw) + 1, length(Mo_raw)))) = 4 THEN\n",
					"                            CAST(substring(trim(substring(Mo_raw, locate('/', Mo_raw) + 1, length(Mo_raw))), 1, 2) AS DECIMAL(5,2)) + \n",
					"                            CAST(substring(trim(substring(Mo_raw, locate('/', Mo_raw) + 1, length(Mo_raw))), 3, 2) AS DECIMAL(5,2)) / 60\n",
					"                        ELSE CAST(trim(substring(Mo_raw, locate('/', Mo_raw) + 1, length(Mo_raw))) AS DECIMAL(5,2))\n",
					"                    END\n",
					"                ) / 2\n",
					"                \n",
					"            -- Decimal patterns\n",
					"            WHEN locate('.', Mo_raw) > 0 THEN CAST(Mo_raw AS DECIMAL(5,2))\n",
					"            \n",
					"            -- Standard time format conversion\n",
					"            ELSE \n",
					"                CASE \n",
					"                    WHEN length(Mo_raw) = 1 THEN CAST(Mo_raw AS DECIMAL(5,2))\n",
					"                    WHEN length(Mo_raw) = 2 THEN CAST(Mo_raw AS DECIMAL(5,2))\n",
					"                    WHEN length(Mo_raw) = 3 THEN\n",
					"                        CAST(substring(Mo_raw, 1, 1) AS DECIMAL(5,2)) + CAST(substring(Mo_raw, 2, 2) AS DECIMAL(5,2)) / 60\n",
					"                    WHEN length(Mo_raw) = 4 THEN\n",
					"                        CAST(substring(Mo_raw, 1, 2) AS DECIMAL(5,2)) + CAST(substring(Mo_raw, 3, 2) AS DECIMAL(5,2)) / 60\n",
					"                    ELSE CAST(Mo_raw AS DECIMAL(5,2))\n",
					"                END\n",
					"        END AS Mo,\n",
					"        \n",
					"        -- TUESDAY CONVERSION\n",
					"        CASE \n",
					"            WHEN WorkScheduleRule IN ('37hrsperweek', '37 hrs per week', 'Out of London - 37hr week') THEN 7.4\n",
					"            WHEN WorkScheduleRule LIKE 'Compressed%37%(T)%' OR WorkScheduleRule LIKE 'Compressed 37 (T)%' THEN 0.0\n",
					"            WHEN WorkScheduleRule LIKE 'Compressed%37%' OR WorkScheduleRule LIKE 'Compressed 37%' THEN 9.25\n",
					"            WHEN Tu_raw IS NULL OR Tu_raw = '' THEN 0.0\n",
					"            WHEN Tu_raw IN ('0', '-') THEN 0.0\n",
					"            \n",
					"            -- Special case: T-TH pattern\n",
					"            WHEN Tu_raw LIKE '%-TH%' THEN \n",
					"                CASE \n",
					"                    WHEN Tu_raw = '-TH812' THEN 4.1  -- 812 converts to 8.2, Tuesday gets half = 4.1\n",
					"                    ELSE 4.1\n",
					"                END\n",
					"            -- Special case: T-T pattern  \n",
					"            WHEN Tu_raw LIKE '%-T%' THEN\n",
					"                CASE\n",
					"                    WHEN Tu_raw = '-T915' THEN 9.25  -- 915 converts to 9.25, Tuesday gets full value\n",
					"                    ELSE 9.25\n",
					"                END\n",
					"                \n",
					"            WHEN locate('/', Tu_raw) > 0 THEN \n",
					"                (\n",
					"                    CASE \n",
					"                        WHEN trim(substring(Tu_raw, 1, locate('/', Tu_raw) - 1)) IN ('0', '-', '') THEN 0.0\n",
					"                        WHEN locate('.', trim(substring(Tu_raw, 1, locate('/', Tu_raw) - 1))) > 0 THEN\n",
					"                            CAST(trim(substring(Tu_raw, 1, locate('/', Tu_raw) - 1)) AS DECIMAL(5,2))\n",
					"                        WHEN length(trim(substring(Tu_raw, 1, locate('/', Tu_raw) - 1))) <= 2 THEN\n",
					"                            CAST(trim(substring(Tu_raw, 1, locate('/', Tu_raw) - 1)) AS DECIMAL(5,2))\n",
					"                        WHEN length(trim(substring(Tu_raw, 1, locate('/', Tu_raw) - 1))) = 3 THEN\n",
					"                            CAST(substring(trim(substring(Tu_raw, 1, locate('/', Tu_raw) - 1)), 1, 1) AS DECIMAL(5,2)) + \n",
					"                            CAST(substring(trim(substring(Tu_raw, 1, locate('/', Tu_raw) - 1)), 2, 2) AS DECIMAL(5,2)) / 60\n",
					"                        WHEN length(trim(substring(Tu_raw, 1, locate('/', Tu_raw) - 1))) = 4 THEN\n",
					"                            CAST(substring(trim(substring(Tu_raw, 1, locate('/', Tu_raw) - 1)), 1, 2) AS DECIMAL(5,2)) + \n",
					"                            CAST(substring(trim(substring(Tu_raw, 1, locate('/', Tu_raw) - 1)), 3, 2) AS DECIMAL(5,2)) / 60\n",
					"                        ELSE CAST(trim(substring(Tu_raw, 1, locate('/', Tu_raw) - 1)) AS DECIMAL(5,2))\n",
					"                    END +\n",
					"                    CASE \n",
					"                        WHEN trim(substring(Tu_raw, locate('/', Tu_raw) + 1, length(Tu_raw))) IN ('0', '-', '') THEN 0.0\n",
					"                        WHEN locate('.', trim(substring(Tu_raw, locate('/', Tu_raw) + 1, length(Tu_raw)))) > 0 THEN\n",
					"                            CAST(trim(substring(Tu_raw, locate('/', Tu_raw) + 1, length(Tu_raw))) AS DECIMAL(5,2))\n",
					"                        WHEN length(trim(substring(Tu_raw, locate('/', Tu_raw) + 1, length(Tu_raw)))) <= 2 THEN\n",
					"                            CAST(trim(substring(Tu_raw, locate('/', Tu_raw) + 1, length(Tu_raw))) AS DECIMAL(5,2))\n",
					"                        WHEN length(trim(substring(Tu_raw, locate('/', Tu_raw) + 1, length(Tu_raw)))) = 3 THEN\n",
					"                            CAST(substring(trim(substring(Tu_raw, locate('/', Tu_raw) + 1, length(Tu_raw))), 1, 1) AS DECIMAL(5,2)) + \n",
					"                            CAST(substring(trim(substring(Tu_raw, locate('/', Tu_raw) + 1, length(Tu_raw))), 2, 2) AS DECIMAL(5,2)) / 60\n",
					"                        WHEN length(trim(substring(Tu_raw, locate('/', Tu_raw) + 1, length(Tu_raw)))) = 4 THEN\n",
					"                            CAST(substring(trim(substring(Tu_raw, locate('/', Tu_raw) + 1, length(Tu_raw))), 1, 2) AS DECIMAL(5,2)) + \n",
					"                            CAST(substring(trim(substring(Tu_raw, locate('/', Tu_raw) + 1, length(Tu_raw))), 3, 2) AS DECIMAL(5,2)) / 60\n",
					"                        ELSE CAST(trim(substring(Tu_raw, locate('/', Tu_raw) + 1, length(Tu_raw))) AS DECIMAL(5,2))\n",
					"                    END\n",
					"                ) / 2\n",
					"            WHEN locate('.', Tu_raw) > 0 THEN CAST(Tu_raw AS DECIMAL(5,2))\n",
					"            ELSE \n",
					"                CASE \n",
					"                    WHEN length(Tu_raw) <= 2 THEN CAST(Tu_raw AS DECIMAL(5,2))\n",
					"                    WHEN length(Tu_raw) = 3 THEN\n",
					"                        CAST(substring(Tu_raw, 1, 1) AS DECIMAL(5,2)) + CAST(substring(Tu_raw, 2, 2) AS DECIMAL(5,2)) / 60\n",
					"                    WHEN length(Tu_raw) = 4 THEN\n",
					"                        CAST(substring(Tu_raw, 1, 2) AS DECIMAL(5,2)) + CAST(substring(Tu_raw, 3, 2) AS DECIMAL(5,2)) / 60\n",
					"                    ELSE CAST(Tu_raw AS DECIMAL(5,2))\n",
					"                END\n",
					"        END AS Tu,\n",
					"        \n",
					"        -- WEDNESDAY CONVERSION (simplified for space)\n",
					"        CASE \n",
					"            WHEN WorkScheduleRule IN ('37hrsperweek', '37 hrs per week', 'Out of London - 37hr week') THEN 7.4\n",
					"            WHEN WorkScheduleRule LIKE 'Compressed%37%(W)%' OR WorkScheduleRule LIKE 'Compressed 37 (W)%' THEN 0.0\n",
					"            WHEN WorkScheduleRule LIKE 'Compressed%37%' OR WorkScheduleRule LIKE 'Compressed 37%' THEN 9.25\n",
					"            WHEN We_raw IS NULL OR We_raw = '' THEN 0.0\n",
					"            WHEN We_raw IN ('0', '-') THEN 0.0\n",
					"            WHEN Tu_raw LIKE '%-TH%' THEN 8.2  -- T-TH pattern: Wednesday gets full value\n",
					"            WHEN locate('/', We_raw) > 0 THEN (\n",
					"                CASE \n",
					"                    WHEN trim(substring(We_raw, 1, locate('/', We_raw) - 1)) IN ('0', '-', '') THEN 0.0\n",
					"                    WHEN locate('.', trim(substring(We_raw, 1, locate('/', We_raw) - 1))) > 0 THEN\n",
					"                        CAST(trim(substring(We_raw, 1, locate('/', We_raw) - 1)) AS DECIMAL(5,2))\n",
					"                    WHEN length(trim(substring(We_raw, 1, locate('/', We_raw) - 1))) <= 2 THEN\n",
					"                        CAST(trim(substring(We_raw, 1, locate('/', We_raw) - 1)) AS DECIMAL(5,2))\n",
					"                    WHEN length(trim(substring(We_raw, 1, locate('/', We_raw) - 1))) = 3 THEN\n",
					"                        CAST(substring(trim(substring(We_raw, 1, locate('/', We_raw) - 1)), 1, 1) AS DECIMAL(5,2)) + \n",
					"                        CAST(substring(trim(substring(We_raw, 1, locate('/', We_raw) - 1)), 2, 2) AS DECIMAL(5,2)) / 60\n",
					"                    ELSE CAST(trim(substring(We_raw, 1, locate('/', We_raw) - 1)) AS DECIMAL(5,2))\n",
					"                END +\n",
					"                CASE \n",
					"                    WHEN trim(substring(We_raw, locate('/', We_raw) + 1, length(We_raw))) IN ('0', '-', '') THEN 0.0\n",
					"                    WHEN locate('.', trim(substring(We_raw, locate('/', We_raw) + 1, length(We_raw)))) > 0 THEN\n",
					"                        CAST(trim(substring(We_raw, locate('/', We_raw) + 1, length(We_raw))) AS DECIMAL(5,2))\n",
					"                    WHEN length(trim(substring(We_raw, locate('/', We_raw) + 1, length(We_raw)))) <= 2 THEN\n",
					"                        CAST(trim(substring(We_raw, locate('/', We_raw) + 1, length(We_raw))) AS DECIMAL(5,2))\n",
					"                    WHEN length(trim(substring(We_raw, locate('/', We_raw) + 1, length(We_raw)))) = 3 THEN\n",
					"                        CAST(substring(trim(substring(We_raw, locate('/', We_raw) + 1, length(We_raw))), 1, 1) AS DECIMAL(5,2)) + \n",
					"                        CAST(substring(trim(substring(We_raw, locate('/', We_raw) + 1, length(We_raw))), 2, 2) AS DECIMAL(5,2)) / 60\n",
					"                    ELSE CAST(trim(substring(We_raw, locate('/', We_raw) + 1, length(We_raw))) AS DECIMAL(5,2))\n",
					"                END\n",
					"            ) / 2\n",
					"            WHEN locate('.', We_raw) > 0 THEN CAST(We_raw AS DECIMAL(5,2))\n",
					"            ELSE \n",
					"                CASE \n",
					"                    WHEN length(We_raw) <= 2 THEN CAST(We_raw AS DECIMAL(5,2))\n",
					"                    WHEN length(We_raw) = 3 THEN\n",
					"                        CAST(substring(We_raw, 1, 1) AS DECIMAL(5,2)) + CAST(substring(We_raw, 2, 2) AS DECIMAL(5,2)) / 60\n",
					"                    WHEN length(We_raw) = 4 THEN\n",
					"                        CAST(substring(We_raw, 1, 2) AS DECIMAL(5,2)) + CAST(substring(We_raw, 3, 2) AS DECIMAL(5,2)) / 60\n",
					"                    ELSE CAST(We_raw AS DECIMAL(5,2))\n",
					"                END\n",
					"        END AS We,\n",
					"        \n",
					"        -- THURSDAY CONVERSION (simplified)\n",
					"        CASE \n",
					"            WHEN WorkScheduleRule IN ('37hrsperweek', '37 hrs per week', 'Out of London - 37hr week') THEN 7.4\n",
					"            WHEN WorkScheduleRule LIKE 'Compressed%37%(TH)%' OR WorkScheduleRule LIKE 'Compressed 37 (TH)%' THEN 0.0\n",
					"            WHEN WorkScheduleRule LIKE 'Compressed%37%' OR WorkScheduleRule LIKE 'Compressed 37%' THEN 9.25\n",
					"            WHEN Th_raw IS NULL OR Th_raw = '' THEN 0.0\n",
					"            WHEN Th_raw IN ('0', '-') THEN 0.0\n",
					"            WHEN Tu_raw LIKE '%-TH%' THEN 8.2  -- T-TH pattern: Thursday gets full value\n",
					"            WHEN locate('/', Th_raw) > 0 THEN (\n",
					"                CASE \n",
					"                    WHEN trim(substring(Th_raw, 1, locate('/', Th_raw) - 1)) IN ('0', '-', '') THEN 0.0\n",
					"                    WHEN locate('.', trim(substring(Th_raw, 1, locate('/', Th_raw) - 1))) > 0 THEN\n",
					"                        CAST(trim(substring(Th_raw, 1, locate('/', Th_raw) - 1)) AS DECIMAL(5,2))\n",
					"                    WHEN length(trim(substring(Th_raw, 1, locate('/', Th_raw) - 1))) <= 2 THEN\n",
					"                        CAST(trim(substring(Th_raw, 1, locate('/', Th_raw) - 1)) AS DECIMAL(5,2))\n",
					"                    WHEN length(trim(substring(Th_raw, 1, locate('/', Th_raw) - 1))) = 3 THEN\n",
					"                        CAST(substring(trim(substring(Th_raw, 1, locate('/', Th_raw) - 1)), 1, 1) AS DECIMAL(5,2)) + \n",
					"                        CAST(substring(trim(substring(Th_raw, 1, locate('/', Th_raw) - 1)), 2, 2) AS DECIMAL(5,2)) / 60\n",
					"                    ELSE CAST(trim(substring(Th_raw, 1, locate('/', Th_raw) - 1)) AS DECIMAL(5,2))\n",
					"                END +\n",
					"                CASE \n",
					"                    WHEN trim(substring(Th_raw, locate('/', Th_raw) + 1, length(Th_raw))) IN ('0', '-', '') THEN 0.0\n",
					"                    WHEN locate('.', trim(substring(Th_raw, locate('/', Th_raw) + 1, length(Th_raw)))) > 0 THEN\n",
					"                        CAST(trim(substring(Th_raw, locate('/', Th_raw) + 1, length(Th_raw))) AS DECIMAL(5,2))\n",
					"                    WHEN length(trim(substring(Th_raw, locate('/', Th_raw) + 1, length(Th_raw)))) <= 2 THEN\n",
					"                        CAST(trim(substring(Th_raw, locate('/', Th_raw) + 1, length(Th_raw))) AS DECIMAL(5,2))\n",
					"                    WHEN length(trim(substring(Th_raw, locate('/', Th_raw) + 1, length(Th_raw)))) = 3 THEN\n",
					"                        CAST(substring(trim(substring(Th_raw, locate('/', Th_raw) + 1, length(Th_raw))), 1, 1) AS DECIMAL(5,2)) + \n",
					"                        CAST(substring(trim(substring(Th_raw, locate('/', Th_raw) + 1, length(Th_raw))), 2, 2) AS DECIMAL(5,2)) / 60\n",
					"                    ELSE CAST(trim(substring(Th_raw, locate('/', Th_raw) + 1, length(Th_raw))) AS DECIMAL(5,2))\n",
					"                END\n",
					"            ) / 2\n",
					"            WHEN locate('.', Th_raw) > 0 THEN CAST(Th_raw AS DECIMAL(5,2))\n",
					"            ELSE \n",
					"                CASE \n",
					"                    WHEN length(Th_raw) <= 2 THEN CAST(Th_raw AS DECIMAL(5,2))\n",
					"                    WHEN length(Th_raw) = 3 THEN\n",
					"                        CAST(substring(Th_raw, 1, 1) AS DECIMAL(5,2)) + CAST(substring(Th_raw, 2, 2) AS DECIMAL(5,2)) / 60\n",
					"                    WHEN length(Th_raw) = 4 THEN\n",
					"                        CAST(substring(Th_raw, 1, 2) AS DECIMAL(5,2)) + CAST(substring(Th_raw, 3, 2) AS DECIMAL(5,2)) / 60\n",
					"                    ELSE CAST(Th_raw AS DECIMAL(5,2))\n",
					"                END\n",
					"        END AS Th,\n",
					"        \n",
					"        -- FRIDAY CONVERSION (with special cases)\n",
					"        CASE \n",
					"            WHEN WorkScheduleRule IN ('37hrsperweek', '37 hrs per week', 'Out of London - 37hr week') THEN 7.4\n",
					"            WHEN WorkScheduleRule LIKE 'Compressed%37%(F)%' OR WorkScheduleRule LIKE 'Compressed 37 (F)%' THEN 0.0\n",
					"            WHEN WorkScheduleRule LIKE 'Compressed%37%' OR WorkScheduleRule LIKE 'Compressed 37%' THEN 9.25\n",
					"            WHEN Fr_raw IS NULL OR Fr_raw = '' THEN 0.0\n",
					"            WHEN Fr_raw IN ('0', '-') THEN 0.0\n",
					"            WHEN Fr_raw = '724/0' THEN 3.4  -- Special case\n",
					"            WHEN Tu_raw LIKE '%-TH%' AND Fr_raw = '818' THEN 8.2  -- T-TH context\n",
					"            WHEN Tu_raw LIKE '%-T%' AND Fr_raw = '0/915' THEN 9.25  -- Special case for T-T pattern\n",
					"            WHEN locate('/', Fr_raw) > 0 THEN (\n",
					"                CASE \n",
					"                    WHEN trim(substring(Fr_raw, 1, locate('/', Fr_raw) - 1)) IN ('0', '-', '') THEN 0.0\n",
					"                    WHEN locate('.', trim(substring(Fr_raw, 1, locate('/', Fr_raw) - 1))) > 0 THEN\n",
					"                        CAST(trim(substring(Fr_raw, 1, locate('/', Fr_raw) - 1)) AS DECIMAL(5,2))\n",
					"                    WHEN length(trim(substring(Fr_raw, 1, locate('/', Fr_raw) - 1))) <= 2 THEN\n",
					"                        CAST(trim(substring(Fr_raw, 1, locate('/', Fr_raw) - 1)) AS DECIMAL(5,2))\n",
					"                    WHEN length(trim(substring(Fr_raw, 1, locate('/', Fr_raw) - 1))) = 3 THEN\n",
					"                        CAST(substring(trim(substring(Fr_raw, 1, locate('/', Fr_raw) - 1)), 1, 1) AS DECIMAL(5,2)) + \n",
					"                        CAST(substring(trim(substring(Fr_raw, 1, locate('/', Fr_raw) - 1)), 2, 2) AS DECIMAL(5,2)) / 60\n",
					"                    ELSE CAST(trim(substring(Fr_raw, 1, locate('/', Fr_raw) - 1)) AS DECIMAL(5,2))\n",
					"                END +\n",
					"                CASE \n",
					"                    WHEN trim(substring(Fr_raw, locate('/', Fr_raw) + 1, length(Fr_raw))) IN ('0', '-', '') THEN 0.0\n",
					"                    WHEN locate('.', trim(substring(Fr_raw, locate('/', Fr_raw) + 1, length(Fr_raw)))) > 0 THEN\n",
					"                        CAST(trim(substring(Fr_raw, locate('/', Fr_raw) + 1, length(Fr_raw))) AS DECIMAL(5,2))\n",
					"                    WHEN length(trim(substring(Fr_raw, locate('/', Fr_raw) + 1, length(Fr_raw)))) <= 2 THEN\n",
					"                        CAST(trim(substring(Fr_raw, locate('/', Fr_raw) + 1, length(Fr_raw))) AS DECIMAL(5,2))\n",
					"                    WHEN length(trim(substring(Fr_raw, locate('/', Fr_raw) + 1, length(Fr_raw)))) = 3 THEN\n",
					"                        CAST(substring(trim(substring(Fr_raw, locate('/', Fr_raw) + 1, length(Fr_raw))), 1, 1) AS DECIMAL(5,2)) + \n",
					"                        CAST(substring(trim(substring(Fr_raw, locate('/', Fr_raw) + 1, length(Fr_raw))), 2, 2) AS DECIMAL(5,2)) / 60\n",
					"                    ELSE CAST(trim(substring(Fr_raw, locate('/', Fr_raw) + 1, length(Fr_raw))) AS DECIMAL(5,2))\n",
					"                END\n",
					"            ) / 2\n",
					"            WHEN locate('.', Fr_raw) > 0 THEN CAST(Fr_raw AS DECIMAL(5,2))\n",
					"            ELSE \n",
					"                CASE \n",
					"                    WHEN length(Fr_raw) <= 2 THEN CAST(Fr_raw AS DECIMAL(5,2))\n",
					"                    WHEN length(Fr_raw) = 3 THEN\n",
					"                        CAST(substring(Fr_raw, 1, 1) AS DECIMAL(5,2)) + CAST(substring(Fr_raw, 2, 2) AS DECIMAL(5,2)) / 60\n",
					"                    WHEN length(Fr_raw) = 4 THEN\n",
					"                        CAST(substring(Fr_raw, 1, 2) AS DECIMAL(5,2)) + CAST(substring(Fr_raw, 3, 2) AS DECIMAL(5,2)) / 60\n",
					"                    ELSE CAST(Fr_raw AS DECIMAL(5,2))\n",
					"                END\n",
					"        END AS Fr\n",
					"    FROM TimeConverter\n",
					")\n",
					"\n",
					"-- Final output\n",
					"SELECT \n",
					"    WorkScheduleRule,\n",
					"    ROUND(COALESCE(Mo, 0.0), 2) AS Mo,\n",
					"    ROUND(COALESCE(Tu, 0.0), 2) AS Tu,\n",
					"    ROUND(COALESCE(We, 0.0), 2) AS We,\n",
					"    ROUND(COALESCE(Th, 0.0), 2) AS Th,\n",
					"    ROUND(COALESCE(Fr, 0.0), 2) AS Fr,\n",
					"    ROUND((COALESCE(Mo, 0.0) + COALESCE(Tu, 0.0) + COALESCE(We, 0.0) + COALESCE(Th, 0.0) + COALESCE(Fr, 0.0)), 2) AS WkHrs,\n",
					"    ROUND((COALESCE(Mo, 0.0) + COALESCE(Tu, 0.0) + COALESCE(We, 0.0) + COALESCE(Th, 0.0) + COALESCE(Fr, 0.0)), 2) AS MoTuWeThFr\n",
					"FROM ParsedSchedules\n",
					"---WHERE WorkScheduleRule   IN ( 'M724T724W724T724F724/0','M915/0T-T915F0/915','M930/530T930/530W745/745T530/915F515/9','M815T815W815T815F0/8','M813T813W813T813F816/0','M-T815W815/0T815F8/815',\n",
					"  -- 'M0/812T-TH812F818','M724T724W724T724F724/0'\n",
					"--    )\n",
					"ORDER BY WorkScheduleRule\n",
					"--LIMIT 50;"
				],
				"execution_count": 7
			}
		]
	}
}