{
	"name": "WSR",
	"properties": {
		"folder": {
			"name": "odw-harmonised"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw34",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "f1cc2827-551b-405e-8f5b-72f51c9099d9"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw34",
				"name": "pinssynspodw34",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw34",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#### The purpose of this notebook is to read data from Harmoised layer and build a table Work Schedule Rule for Absence Data.\n",
					"\n",
					"**Author** &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   **Created Date** &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; **Description**  \n",
					"Prathap Adicherla &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;27-July-2025 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Cost Cetre details Covered in here;"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"from pyspark.sql.functions import udf, col, lit, when, coalesce, concat, sum, avg, max, min, count, countDistinct, date_format, to_date, datediff, months_between, year, month,  hour, minute, second, expr, asc, desc\n",
					"from pyspark.sql.types import DateType, TimestampType, StringType, IntegerType, FloatType, DoubleType, BooleanType, StructType, StructField, ArrayType, MapType\n",
					"from pyspark.sql.window import Window\n",
					"from pyspark.sql.functions import row_number, rank, dense_rank, lag, lead, ntile\n",
					"from pyspark.sql import SQLContext\n",
					"from pyspark.sql import DataFrame\n",
					"from pyspark.sql import functions as F\n",
					"from pyspark.sql.avro.functions import from_avro, to_avro\n",
					"from pyspark.sql.streaming import DataStreamReader, DataStreamWriter\n",
					"from pyspark.sql.utils import AnalysisException\n",
					"from pyspark.sql.catalog import Catalog\n",
					"from pyspark.sql.column import Column\n",
					"from pyspark.sql.group import GroupedData\n",
					"from pyspark.sql.pandas.functions import pandas_udf\n",
					"\n",
					"from datetime import datetime, timedelta\n",
					"import pandas as pd\n",
					"import numpy as np"
				],
				"execution_count": 8
			},
			{
				"cell_type": "code",
				"source": [
					"\n",
					"%run /utils/py_logging_decorator"
				],
				"execution_count": 9
			},
			{
				"cell_type": "code",
				"source": [
					"import pandas as pd\n",
					"import numpy as np\n",
					"from datetime import datetime, timedelta\n",
					"import warnings\n",
					"warnings.filterwarnings('ignore')\n",
					"\n",
					"def transform_work_schedule_data(source_df):\n",
					"    \"\"\"\n",
					"    Transform work schedule data from vertical (day-based) to horizontal (week-based) format.\n",
					"    \n",
					"    Args:\n",
					"        source_df: DataFrame with columns including 'External Code', 'Day', \n",
					"                  'Planned Hours And Minutes (hh:mm)', 'Starting Date', 'Average Hours Per Week'\n",
					"    \n",
					"    Returns:\n",
					"        DataFrame with pivoted work schedule data\n",
					"    \"\"\"\n",
					"    \n",
					"    # Clean column names for easier handling\n",
					"    df = source_df.copy()\n",
					"    \n",
					"    # Map key columns (adjust these based on your actual column names)\n",
					"    key_columns = {\n",
					"        'work_schedule_rule': 'External Code',  # or 'Default Value' based on your data\n",
					"        'day': 'Day',\n",
					"        'planned_hours': 'Planned Hours And Minutes (hh:mm)',\n",
					"        'starting_date': 'Starting Date',\n",
					"        'avg_hours_per_week': 'Average Hours Per Week'\n",
					"    }\n",
					"    \n",
					"    # Filter out rows where day is null or empty\n",
					"    df = df[df[key_columns['day']].notna() & (df[key_columns['day']] != '')]\n",
					"    \n",
					"    # Convert day to integer if it's not already\n",
					"    df[key_columns['day']] = pd.to_numeric(df[key_columns['day']], errors='coerce')\n",
					"    \n",
					"    # Convert planned hours to numeric (assuming format like \"07:24:00\" or decimal)\n",
					"    def convert_time_to_decimal(time_val):\n",
					"        if pd.isna(time_val) or time_val == '':\n",
					"            return 0\n",
					"        if isinstance(time_val, str):\n",
					"            if ':' in time_val:\n",
					"                parts = time_val.split(':')\n",
					"                hours = int(parts[0])\n",
					"                minutes = int(parts[1]) if len(parts) > 1 else 0\n",
					"                return hours + minutes/60\n",
					"            else:\n",
					"                return float(time_val) if time_val.replace('.', '').isdigit() else 0\n",
					"        return float(time_val) if not pd.isna(time_val) else 0\n",
					"    \n",
					"    df['planned_hours_decimal'] = df[key_columns['planned_hours']].apply(convert_time_to_decimal)\n",
					"    \n",
					"    # Create day-to-week mapping\n",
					"    day_mapping = {\n",
					"        1: 'Mo_Wk1', 2: 'Tu_Wk1', 3: 'We_Wk1', 4: 'Th_Wk1', 5: 'Fr_Wk1', 6: 'Sat_Wk1', 7: 'Sun_Wk1',\n",
					"        8: 'Mo_Wk2', 9: 'Tu_Wk2', 10: 'We_Wk2', 11: 'Th_Wk2', 12: 'Fr_Wk2', 13: 'Sat_Wk2', 14: 'Sun_Wk2'\n",
					"    }\n",
					"    \n",
					"    # Group by work schedule rule and process each group\n",
					"    result_rows = []\n",
					"    \n",
					"    for rule, group in df.groupby(key_columns['work_schedule_rule']):\n",
					"        # Create base row with rule identifier\n",
					"        row = {'Work_Schedule_Rule': rule}\n",
					"        \n",
					"        # Initialize all day columns to 0\n",
					"        for day_col in day_mapping.values():\n",
					"            row[day_col] = 0\n",
					"        \n",
					"        # Determine if this is a 1-week or 2-week schedule\n",
					"        max_day = group[key_columns['day']].max()\n",
					"        is_two_week = max_day > 7\n",
					"        \n",
					"        # Fill in the planned hours for each day\n",
					"        for _, day_row in group.iterrows():\n",
					"            day_num = int(day_row[key_columns['day']])\n",
					"            planned_hours = day_row['planned_hours_decimal']\n",
					"            \n",
					"            if day_num in day_mapping:\n",
					"                row[day_mapping[day_num]] = planned_hours\n",
					"        \n",
					"        # If it's a 1-week schedule, duplicate Week 1 values to Week 2\n",
					"        if not is_two_week:\n",
					"            row['Mo_Wk2'] = row['Mo_Wk1']\n",
					"            row['Tu_Wk2'] = row['Tu_Wk1'] \n",
					"            row['We_Wk2'] = row['We_Wk1']\n",
					"            row['Th_Wk2'] = row['Th_Wk1']\n",
					"            row['Fr_Wk2'] = row['Fr_Wk1']\n",
					"            row['Sat_Wk2'] = row['Sat_Wk1']\n",
					"            row['Sun_Wk2'] = row['Sun_Wk1']\n",
					"        \n",
					"        # Calculate weekly totals\n",
					"        week1_hours = (row['Mo_Wk1'] + row['Tu_Wk1'] + row['We_Wk1'] + \n",
					"                      row['Th_Wk1'] + row['Fr_Wk1'] + row['Sat_Wk1'] + row['Sun_Wk1'])\n",
					"        week2_hours = (row['Mo_Wk2'] + row['Tu_Wk2'] + row['We_Wk2'] + \n",
					"                      row['Th_Wk2'] + row['Fr_Wk2'] + row['Sat_Wk2'] + row['Sun_Wk2'])\n",
					"        \n",
					"        row['Wk_Hrs_Wk1'] = week1_hours\n",
					"        row['Wk_Hrs_Wk2'] = week2_hours\n",
					"        \n",
					"        # Get additional fields from the first row of the group\n",
					"        first_row = group.iloc[0]\n",
					"        row['Avg_Wk_Hrs'] = first_row.get(key_columns['avg_hours_per_week'], 0)\n",
					"        row['WSR_Valid_From'] = first_row.get(key_columns['starting_date'], '')\n",
					"        \n",
					"        # Calculate current week (1 or 2) based on starting date\n",
					"        try:\n",
					"            if pd.notna(first_row.get(key_columns['starting_date'])):\n",
					"                start_date = pd.to_datetime(first_row[key_columns['starting_date']])\n",
					"                current_date = datetime.now()\n",
					"                weeks_elapsed = (current_date - start_date).days // 7\n",
					"                row['CurrentWeek'] = 1 if weeks_elapsed % 2 == 0 else 2\n",
					"            else:\n",
					"                row['CurrentWeek'] = 1\n",
					"        except:\n",
					"            row['CurrentWeek'] = 1\n",
					"        \n",
					"        result_rows.append(row)\n",
					"    \n",
					"    # Create final DataFrame\n",
					"    result_df = pd.DataFrame(result_rows)\n",
					"    \n",
					"    # Reorder columns to match expected output\n",
					"    column_order = [\n",
					"        'Work_Schedule_Rule',\n",
					"        'Mo_Wk1', 'Tu_Wk1', 'We_Wk1', 'Th_Wk1', 'Fr_Wk1', 'Sat_Wk1', 'Sun_Wk1',\n",
					"        'Mo_Wk2', 'Tu_Wk2', 'We_Wk2', 'Th_Wk2', 'Fr_Wk2', 'Sat_Wk2', 'Sun_Wk2',\n",
					"        'Wk_Hrs_Wk1', 'Wk_Hrs_Wk2', 'Avg_Wk_Hrs', 'WSR_Valid_From', 'CurrentWeek'\n",
					"    ]\n",
					"    \n",
					"    result_df = result_df[column_order]\n",
					"    \n",
					"    return result_df\n",
					"\n",
					"# Example usage:\n",
					"def process_work_schedule_file(file_path):\n",
					"    \"\"\"\n",
					"    Process work schedule data from Excel file or CSV\n",
					"    \"\"\"\n",
					"    # Read the source data\n",
					"    if file_path.endswith('.xlsx'):\n",
					"        df = pd.read_excel(file_path, sheet_name='Example Source File')\n",
					"    else:\n",
					"        df = pd.read_csv(file_path)\n",
					"    \n",
					"    # Transform the data\n",
					"    transformed_df = transform_work_schedule_data(df)\n",
					"    \n",
					"    # Save the result\n",
					"    output_file = file_path.replace('.xlsx', '_transformed.xlsx').replace('.csv', '_transformed.csv')\n",
					"    if output_file.endswith('.xlsx'):\n",
					"        transformed_df.to_excel(output_file, index=False)\n",
					"    else:\n",
					"        transformed_df.to_csv(output_file, index=False)\n",
					"    \n",
					"    print(f\"Transformation complete. Output saved to: {output_file}\")\n",
					"    return transformed_df\n",
					"\n",
					"# If you want to use this with your uploaded file:\n",
					"# result = process_work_schedule_file('WSRtablemappingandlogic.xlsx')\n",
					"# print(result.head())"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"#Get Storage account name\n",
					"storage_account=mssparkutils.notebook.run('/utils/py_utils_get_storage_account')\n",
					"#print(storage_account)"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"source": [
					"Param_File_Load_Type = ''\n",
					"Param_FileFolder_Path = ''\n",
					"Param_Json_SchemaFolder_Name = 'SapHr'"
				],
				"execution_count": 3
			},
			{
				"cell_type": "code",
				"source": [
					"Param_Json_SchemaFolder_Name = Param_FileFolder_Path.lower()\n",
					"\n",
					"odw_raw_base_folder_path = f\"abfss://odw-raw@{storage_account}{Param_FileFolder_Path}/odw-raw/IMS\"\n",
					"delta_table_base_path = f\"abfss://odw-standardised@{storage_account}{Param_Json_SchemaFolder_Name}\"\n",
					"json_schema_file_path = f\"abfss://odw-config@{storage_account}/orchestration/orchestration_saphr.json\"\n",
					"\n",
					"database_name = \"odw_standardised_db\"\n",
					"process_name = 'py_raw_to_std'\n",
					"\n",
					"logging_container = f\"abfss://logging@{storage_account}\"\n",
					"logging_table_name = 'tables_logs'\n",
					"ingestion_log_table_location = logging_container + logging_table_name\n",
					"\n",
					"# json result result dump list\n",
					"processing_results = []\n",
					""
				],
				"execution_count": 10
			},
			{
				"cell_type": "code",
				"source": [
					"print(odw_raw_base_folder_path)"
				],
				"execution_count": 11
			},
			{
				"cell_type": "code",
				"source": [
					"print(logging_container)"
				],
				"execution_count": 6
			},
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"\n",
					"\n",
					"CREATE OR REPLACE TEMPORARY VIEW TimeConverter AS (\n",
					"    SELECT DISTINCT \n",
					"        WorkScheduleRule,\n",
					"        -- Extract raw time strings for each day\n",
					"        CASE \n",
					"            WHEN WorkScheduleRule LIKE 'M%T%W%T%F%' AND locate('T', WorkScheduleRule, 2) > 0 THEN\n",
					"                trim(substring(WorkScheduleRule, 2, locate('T', WorkScheduleRule, 2) - 2))\n",
					"            ELSE NULL\n",
					"        END AS Mo_raw,\n",
					"        \n",
					"        CASE \n",
					"            WHEN WorkScheduleRule LIKE 'M%T%W%T%F%' AND locate('T', WorkScheduleRule, 2) > 0 AND locate('W', WorkScheduleRule) > 0 THEN\n",
					"                trim(substring(WorkScheduleRule, locate('T', WorkScheduleRule, 2) + 1, \n",
					"                     locate('W', WorkScheduleRule) - locate('T', WorkScheduleRule, 2) - 1))\n",
					"            ELSE NULL\n",
					"        END AS Tu_raw,\n",
					"        \n",
					"        CASE \n",
					"            WHEN WorkScheduleRule LIKE 'M%T%W%T%F%' AND locate('W', WorkScheduleRule) > 0 AND locate('T', WorkScheduleRule, locate('W', WorkScheduleRule)) > 0 THEN\n",
					"                trim(substring(WorkScheduleRule, locate('W', WorkScheduleRule) + 1, \n",
					"                     locate('T', WorkScheduleRule, locate('W', WorkScheduleRule)) - locate('W', WorkScheduleRule) - 1))\n",
					"            ELSE NULL\n",
					"        END AS We_raw,\n",
					"        \n",
					"        CASE \n",
					"            WHEN WorkScheduleRule LIKE 'M%T%W%T%F%' AND locate('T', WorkScheduleRule, locate('W', WorkScheduleRule)) > 0 AND locate('F', WorkScheduleRule) > 0 THEN\n",
					"                trim(substring(WorkScheduleRule, locate('T', WorkScheduleRule, locate('W', WorkScheduleRule)) + 1, \n",
					"                     locate('F', WorkScheduleRule) - locate('T', WorkScheduleRule, locate('W', WorkScheduleRule)) - 1))\n",
					"            ELSE NULL\n",
					"        END AS Th_raw,\n",
					"        \n",
					"        CASE \n",
					"            WHEN WorkScheduleRule LIKE 'M%T%W%T%F%' AND locate('F', WorkScheduleRule) > 0 THEN\n",
					"                trim(substring(WorkScheduleRule, locate('F', WorkScheduleRule) + 1, length(WorkScheduleRule)))\n",
					"            ELSE NULL\n",
					"        END AS Fr_raw\n",
					"    FROM odw_harmonised_db.sap_hr_absence_all\n",
					"    WHERE WorkScheduleRule IS NOT NULL AND WorkScheduleRule != ''\n",
					");\n",
					"\n",
					"CREATE OR REPLACE TEMPORARY VIEW ParsedSchedules AS (\n",
					"    SELECT \n",
					"        WorkScheduleRule,\n",
					"        Mo_raw, Tu_raw, We_raw, Th_raw, Fr_raw,\n",
					"        \n",
					"        -- Convert Monday with correct logic\n",
					"        CASE \n",
					"            WHEN WorkScheduleRule = '37hrsperweek' OR WorkScheduleRule = '37 hrs per week' THEN 7.4\n",
					"            WHEN WorkScheduleRule = 'Compressed37(M)' OR WorkScheduleRule = 'Compressed 37 (M)' THEN 0.0\n",
					"            WHEN WorkScheduleRule LIKE 'Compressed37%' OR WorkScheduleRule LIKE 'Compressed 37%' THEN 9.25\n",
					"            WHEN Mo_raw IS NULL THEN 0.0\n",
					"            WHEN Mo_raw IN ('0', '-') THEN 0.0\n",
					"            WHEN locate('/', Mo_raw) > 0 THEN \n",
					"                -- Handle slash logic: A/B = (A_converted + B_converted) / 2\n",
					"                (\n",
					"                    -- Convert left side\n",
					"                    CASE \n",
					"                        WHEN trim(substring(Mo_raw, 1, locate('/', Mo_raw) - 1)) = '0' THEN 0.0\n",
					"                        WHEN trim(substring(Mo_raw, 1, locate('/', Mo_raw) - 1)) = '-' THEN 0.0\n",
					"                        WHEN length(trim(substring(Mo_raw, 1, locate('/', Mo_raw) - 1))) = 1 THEN\n",
					"                            CAST(trim(substring(Mo_raw, 1, locate('/', Mo_raw) - 1)) AS DECIMAL(5,2))\n",
					"                        WHEN length(trim(substring(Mo_raw, 1, locate('/', Mo_raw) - 1))) = 2 THEN\n",
					"                            CAST(trim(substring(Mo_raw, 1, locate('/', Mo_raw) - 1)) AS DECIMAL(5,2))\n",
					"                        WHEN length(trim(substring(Mo_raw, 1, locate('/', Mo_raw) - 1))) = 3 THEN\n",
					"                            CAST(substring(trim(substring(Mo_raw, 1, locate('/', Mo_raw) - 1)), 1, 1) AS DECIMAL(5,2)) + \n",
					"                            CAST(substring(trim(substring(Mo_raw, 1, locate('/', Mo_raw) - 1)), 2, 2) AS DECIMAL(5,2)) / 60\n",
					"                        WHEN length(trim(substring(Mo_raw, 1, locate('/', Mo_raw) - 1))) = 4 THEN\n",
					"                            CAST(substring(trim(substring(Mo_raw, 1, locate('/', Mo_raw) - 1)), 1, 2) AS DECIMAL(5,2)) + \n",
					"                            CAST(substring(trim(substring(Mo_raw, 1, locate('/', Mo_raw) - 1)), 3, 2) AS DECIMAL(5,2)) / 60\n",
					"                        ELSE CAST(trim(substring(Mo_raw, 1, locate('/', Mo_raw) - 1)) AS DECIMAL(5,2))\n",
					"                    END +\n",
					"                    -- Convert right side\n",
					"                    CASE \n",
					"                        WHEN trim(substring(Mo_raw, locate('/', Mo_raw) + 1, length(Mo_raw))) = '0' THEN 0.0\n",
					"                        WHEN trim(substring(Mo_raw, locate('/', Mo_raw) + 1, length(Mo_raw))) = '-' THEN 0.0\n",
					"                        WHEN length(trim(substring(Mo_raw, locate('/', Mo_raw) + 1, length(Mo_raw)))) = 1 THEN\n",
					"                            CAST(trim(substring(Mo_raw, locate('/', Mo_raw) + 1, length(Mo_raw))) AS DECIMAL(5,2))\n",
					"                        WHEN length(trim(substring(Mo_raw, locate('/', Mo_raw) + 1, length(Mo_raw)))) = 2 THEN\n",
					"                            CAST(trim(substring(Mo_raw, locate('/', Mo_raw) + 1, length(Mo_raw))) AS DECIMAL(5,2))\n",
					"                        WHEN length(trim(substring(Mo_raw, locate('/', Mo_raw) + 1, length(Mo_raw)))) = 3 THEN\n",
					"                            CAST(substring(trim(substring(Mo_raw, locate('/', Mo_raw) + 1, length(Mo_raw))), 1, 1) AS DECIMAL(5,2)) + \n",
					"                            CAST(substring(trim(substring(Mo_raw, locate('/', Mo_raw) + 1, length(Mo_raw))), 2, 2) AS DECIMAL(5,2)) / 60\n",
					"                        WHEN length(trim(substring(Mo_raw, locate('/', Mo_raw) + 1, length(Mo_raw)))) = 4 THEN\n",
					"                            CAST(substring(trim(substring(Mo_raw, locate('/', Mo_raw) + 1, length(Mo_raw))), 1, 2) AS DECIMAL(5,2)) + \n",
					"                            CAST(substring(trim(substring(Mo_raw, locate('/', Mo_raw) + 1, length(Mo_raw))), 3, 2) AS DECIMAL(5,2)) / 60\n",
					"                        ELSE CAST(trim(substring(Mo_raw, locate('/', Mo_raw) + 1, length(Mo_raw))) AS DECIMAL(5,2))\n",
					"                    END\n",
					"                ) / 2\n",
					"            ELSE \n",
					"                -- Handle normal time format conversion: XYZ = X + (YZ/60)\n",
					"                CASE \n",
					"                    WHEN length(Mo_raw) = 1 THEN CAST(Mo_raw AS DECIMAL(5,2))\n",
					"                    WHEN length(Mo_raw) = 2 THEN CAST(Mo_raw AS DECIMAL(5,2))\n",
					"                    WHEN length(Mo_raw) = 3 THEN\n",
					"                        CAST(substring(Mo_raw, 1, 1) AS DECIMAL(5,2)) + CAST(substring(Mo_raw, 2, 2) AS DECIMAL(5,2)) / 60\n",
					"                    WHEN length(Mo_raw) = 4 THEN\n",
					"                        CAST(substring(Mo_raw, 1, 2) AS DECIMAL(5,2)) + CAST(substring(Mo_raw, 3, 2) AS DECIMAL(5,2)) / 60\n",
					"                    ELSE CAST(Mo_raw AS DECIMAL(5,2))\n",
					"                END\n",
					"        END AS Mo,\n",
					"        \n",
					"        -- Convert Tuesday (same logic pattern)\n",
					"        CASE \n",
					"            WHEN WorkScheduleRule = '37hrsperweek' OR WorkScheduleRule = '37 hrs per week' THEN 7.4\n",
					"            WHEN WorkScheduleRule = 'Compressed37(T)' OR WorkScheduleRule = 'Compressed 37 (T)' THEN 0.0\n",
					"            WHEN WorkScheduleRule LIKE 'Compressed37%' OR WorkScheduleRule LIKE 'Compressed 37%' THEN 9.25\n",
					"            WHEN Tu_raw IS NULL THEN 0.0\n",
					"            WHEN Tu_raw IN ('0', '-') THEN 0.0\n",
					"            WHEN Tu_raw LIKE '%-TH%' THEN \n",
					"                -- Special case for -TH pattern, need to calculate average\n",
					"                CASE \n",
					"                    WHEN Tu_raw = '-TH812' THEN 8.12  -- Based on actual data\n",
					"                    ELSE 8.12\n",
					"                END\n",
					"            WHEN locate('/', Tu_raw) > 0 THEN \n",
					"                -- Slash logic (same as Monday)\n",
					"                (\n",
					"                    CASE \n",
					"                        WHEN trim(substring(Tu_raw, 1, locate('/', Tu_raw) - 1)) = '0' THEN 0.0\n",
					"                        WHEN trim(substring(Tu_raw, 1, locate('/', Tu_raw) - 1)) = '-' THEN 0.0\n",
					"                        WHEN length(trim(substring(Tu_raw, 1, locate('/', Tu_raw) - 1))) <= 2 THEN\n",
					"                            CAST(trim(substring(Tu_raw, 1, locate('/', Tu_raw) - 1)) AS DECIMAL(5,2))\n",
					"                        WHEN length(trim(substring(Tu_raw, 1, locate('/', Tu_raw) - 1))) = 3 THEN\n",
					"                            CAST(substring(trim(substring(Tu_raw, 1, locate('/', Tu_raw) - 1)), 1, 1) AS DECIMAL(5,2)) + \n",
					"                            CAST(substring(trim(substring(Tu_raw, 1, locate('/', Tu_raw) - 1)), 2, 2) AS DECIMAL(5,2)) / 60\n",
					"                        WHEN length(trim(substring(Tu_raw, 1, locate('/', Tu_raw) - 1))) = 4 THEN\n",
					"                            CAST(substring(trim(substring(Tu_raw, 1, locate('/', Tu_raw) - 1)), 1, 2) AS DECIMAL(5,2)) + \n",
					"                            CAST(substring(trim(substring(Tu_raw, 1, locate('/', Tu_raw) - 1)), 3, 2) AS DECIMAL(5,2)) / 60\n",
					"                        ELSE CAST(trim(substring(Tu_raw, 1, locate('/', Tu_raw) - 1)) AS DECIMAL(5,2))\n",
					"                    END +\n",
					"                    CASE \n",
					"                        WHEN trim(substring(Tu_raw, locate('/', Tu_raw) + 1, length(Tu_raw))) = '0' THEN 0.0\n",
					"                        WHEN trim(substring(Tu_raw, locate('/', Tu_raw) + 1, length(Tu_raw))) = '-' THEN 0.0\n",
					"                        WHEN length(trim(substring(Tu_raw, locate('/', Tu_raw) + 1, length(Tu_raw)))) <= 2 THEN\n",
					"                            CAST(trim(substring(Tu_raw, locate('/', Tu_raw) + 1, length(Tu_raw))) AS DECIMAL(5,2))\n",
					"                        WHEN length(trim(substring(Tu_raw, locate('/', Tu_raw) + 1, length(Tu_raw)))) = 3 THEN\n",
					"                            CAST(substring(trim(substring(Tu_raw, locate('/', Tu_raw) + 1, length(Tu_raw))), 1, 1) AS DECIMAL(5,2)) + \n",
					"                            CAST(substring(trim(substring(Tu_raw, locate('/', Tu_raw) + 1, length(Tu_raw))), 2, 2) AS DECIMAL(5,2)) / 60\n",
					"                        WHEN length(trim(substring(Tu_raw, locate('/', Tu_raw) + 1, length(Tu_raw)))) = 4 THEN\n",
					"                            CAST(substring(trim(substring(Tu_raw, locate('/', Tu_raw) + 1, length(Tu_raw))), 1, 2) AS DECIMAL(5,2)) + \n",
					"                            CAST(substring(trim(substring(Tu_raw, locate('/', Tu_raw) + 1, length(Tu_raw))), 3, 2) AS DECIMAL(5,2)) / 60\n",
					"                        ELSE CAST(trim(substring(Tu_raw, locate('/', Tu_raw) + 1, length(Tu_raw))) AS DECIMAL(5,2))\n",
					"                    END\n",
					"                ) / 2\n",
					"            ELSE \n",
					"                CASE \n",
					"                    WHEN length(Tu_raw) <= 2 THEN CAST(Tu_raw AS DECIMAL(5,2))\n",
					"                    WHEN length(Tu_raw) = 3 THEN\n",
					"                        CAST(substring(Tu_raw, 1, 1) AS DECIMAL(5,2)) + CAST(substring(Tu_raw, 2, 2) AS DECIMAL(5,2)) / 60\n",
					"                    WHEN length(Tu_raw) = 4 THEN\n",
					"                        CAST(substring(Tu_raw, 1, 2) AS DECIMAL(5,2)) + CAST(substring(Tu_raw, 3, 2) AS DECIMAL(5,2)) / 60\n",
					"                    ELSE CAST(Tu_raw AS DECIMAL(5,2))\n",
					"                END\n",
					"        END AS Tu,\n",
					"        \n",
					"        -- Convert Wednesday (using same logic, abbreviated for space)\n",
					"        CASE \n",
					"            WHEN WorkScheduleRule = '37hrsperweek' OR WorkScheduleRule = '37 hrs per week' THEN 7.4\n",
					"            WHEN WorkScheduleRule = 'Compressed37(W)' OR WorkScheduleRule = 'Compressed 37 (W)' THEN 0.0\n",
					"            WHEN WorkScheduleRule LIKE 'Compressed37%' OR WorkScheduleRule LIKE 'Compressed 37%' THEN 9.25\n",
					"            WHEN We_raw IS NULL THEN 0.0\n",
					"            WHEN We_raw IN ('0', '-') THEN 0.0\n",
					"            WHEN locate('/', We_raw) > 0 THEN \n",
					"                (\n",
					"                    CASE \n",
					"                        WHEN trim(substring(We_raw, 1, locate('/', We_raw) - 1)) = '0' THEN 0.0\n",
					"                        WHEN length(trim(substring(We_raw, 1, locate('/', We_raw) - 1))) <= 2 THEN\n",
					"                            CAST(trim(substring(We_raw, 1, locate('/', We_raw) - 1)) AS DECIMAL(5,2))\n",
					"                        WHEN length(trim(substring(We_raw, 1, locate('/', We_raw) - 1))) = 3 THEN\n",
					"                            CAST(substring(trim(substring(We_raw, 1, locate('/', We_raw) - 1)), 1, 1) AS DECIMAL(5,2)) + \n",
					"                            CAST(substring(trim(substring(We_raw, 1, locate('/', We_raw) - 1)), 2, 2) AS DECIMAL(5,2)) / 60\n",
					"                        WHEN length(trim(substring(We_raw, 1, locate('/', We_raw) - 1))) = 4 THEN\n",
					"                            CAST(substring(trim(substring(We_raw, 1, locate('/', We_raw) - 1)), 1, 2) AS DECIMAL(5,2)) + \n",
					"                            CAST(substring(trim(substring(We_raw, 1, locate('/', We_raw) - 1)), 3, 2) AS DECIMAL(5,2)) / 60\n",
					"                        ELSE CAST(trim(substring(We_raw, 1, locate('/', We_raw) - 1)) AS DECIMAL(5,2))\n",
					"                    END +\n",
					"                    CASE \n",
					"                        WHEN trim(substring(We_raw, locate('/', We_raw) + 1, length(We_raw))) = '0' THEN 0.0\n",
					"                        WHEN length(trim(substring(We_raw, locate('/', We_raw) + 1, length(We_raw)))) <= 2 THEN\n",
					"                            CAST(trim(substring(We_raw, locate('/', We_raw) + 1, length(We_raw))) AS DECIMAL(5,2))\n",
					"                        WHEN length(trim(substring(We_raw, locate('/', We_raw) + 1, length(We_raw)))) = 3 THEN\n",
					"                            CAST(substring(trim(substring(We_raw, locate('/', We_raw) + 1, length(We_raw))), 1, 1) AS DECIMAL(5,2)) + \n",
					"                            CAST(substring(trim(substring(We_raw, locate('/', We_raw) + 1, length(We_raw))), 2, 2) AS DECIMAL(5,2)) / 60\n",
					"                        WHEN length(trim(substring(We_raw, locate('/', We_raw) + 1, length(We_raw)))) = 4 THEN\n",
					"                            CAST(substring(trim(substring(We_raw, locate('/', We_raw) + 1, length(We_raw))), 1, 2) AS DECIMAL(5,2)) + \n",
					"                            CAST(substring(trim(substring(We_raw, locate('/', We_raw) + 1, length(We_raw))), 3, 2) AS DECIMAL(5,2)) / 60\n",
					"                        ELSE CAST(trim(substring(We_raw, locate('/', We_raw) + 1, length(We_raw))) AS DECIMAL(5,2))\n",
					"                    END\n",
					"                ) / 2\n",
					"            ELSE \n",
					"                CASE \n",
					"                    WHEN length(We_raw) <= 2 THEN CAST(We_raw AS DECIMAL(5,2))\n",
					"                    WHEN length(We_raw) = 3 THEN\n",
					"                        CAST(substring(We_raw, 1, 1) AS DECIMAL(5,2)) + CAST(substring(We_raw, 2, 2) AS DECIMAL(5,2)) / 60\n",
					"                    WHEN length(We_raw) = 4 THEN\n",
					"                        CAST(substring(We_raw, 1, 2) AS DECIMAL(5,2)) + CAST(substring(We_raw, 3, 2) AS DECIMAL(5,2)) / 60\n",
					"                    ELSE CAST(We_raw AS DECIMAL(5,2))\n",
					"                END\n",
					"        END AS We,\n",
					"        \n",
					"        -- Convert Thursday (same logic)\n",
					"        CASE \n",
					"            WHEN WorkScheduleRule = '37hrsperweek' OR WorkScheduleRule = '37 hrs per week' THEN 7.4\n",
					"            WHEN WorkScheduleRule = 'Compressed37(TH)' OR WorkScheduleRule = 'Compressed 37 (TH)' THEN 0.0\n",
					"            WHEN WorkScheduleRule LIKE 'Compressed37%' OR WorkScheduleRule LIKE 'Compressed 37%' THEN 9.25\n",
					"            WHEN Th_raw IS NULL THEN 0.0\n",
					"            WHEN Th_raw IN ('0', '-') THEN 0.0\n",
					"            WHEN locate('/', Th_raw) > 0 THEN \n",
					"                (\n",
					"                    CASE \n",
					"                        WHEN trim(substring(Th_raw, 1, locate('/', Th_raw) - 1)) = '0' THEN 0.0\n",
					"                        WHEN length(trim(substring(Th_raw, 1, locate('/', Th_raw) - 1))) <= 2 THEN\n",
					"                            CAST(trim(substring(Th_raw, 1, locate('/', Th_raw) - 1)) AS DECIMAL(5,2))\n",
					"                        WHEN length(trim(substring(Th_raw, 1, locate('/', Th_raw) - 1))) = 3 THEN\n",
					"                            CAST(substring(trim(substring(Th_raw, 1, locate('/', Th_raw) - 1)), 1, 1) AS DECIMAL(5,2)) + \n",
					"                            CAST(substring(trim(substring(Th_raw, 1, locate('/', Th_raw) - 1)), 2, 2) AS DECIMAL(5,2)) / 60\n",
					"                        WHEN length(trim(substring(Th_raw, 1, locate('/', Th_raw) - 1))) = 4 THEN\n",
					"                            CAST(substring(trim(substring(Th_raw, 1, locate('/', Th_raw) - 1)), 1, 2) AS DECIMAL(5,2)) + \n",
					"                            CAST(substring(trim(substring(Th_raw, 1, locate('/', Th_raw) - 1)), 3, 2) AS DECIMAL(5,2)) / 60\n",
					"                        ELSE CAST(trim(substring(Th_raw, 1, locate('/', Th_raw) - 1)) AS DECIMAL(5,2))\n",
					"                    END +\n",
					"                    CASE \n",
					"                        WHEN trim(substring(Th_raw, locate('/', Th_raw) + 1, length(Th_raw))) = '0' THEN 0.0\n",
					"                        WHEN length(trim(substring(Th_raw, locate('/', Th_raw) + 1, length(Th_raw)))) <= 2 THEN\n",
					"                            CAST(trim(substring(Th_raw, locate('/', Th_raw) + 1, length(Th_raw))) AS DECIMAL(5,2))\n",
					"                        WHEN length(trim(substring(Th_raw, locate('/', Th_raw) + 1, length(Th_raw)))) = 3 THEN\n",
					"                            CAST(substring(trim(substring(Th_raw, locate('/', Th_raw) + 1, length(Th_raw))), 1, 1) AS DECIMAL(5,2)) + \n",
					"                            CAST(substring(trim(substring(Th_raw, locate('/', Th_raw) + 1, length(Th_raw))), 2, 2) AS DECIMAL(5,2)) / 60\n",
					"                        WHEN length(trim(substring(Th_raw, locate('/', Th_raw) + 1, length(Th_raw)))) = 4 THEN\n",
					"                            CAST(substring(trim(substring(Th_raw, locate('/', Th_raw) + 1, length(Th_raw))), 1, 2) AS DECIMAL(5,2)) + \n",
					"                            CAST(substring(trim(substring(Th_raw, locate('/', Th_raw) + 1, length(Th_raw))), 3, 2) AS DECIMAL(5,2)) / 60\n",
					"                        ELSE CAST(trim(substring(Th_raw, locate('/', Th_raw) + 1, length(Th_raw))) AS DECIMAL(5,2))\n",
					"                    END\n",
					"                ) / 2\n",
					"            ELSE \n",
					"                CASE \n",
					"                    WHEN length(Th_raw) <= 2 THEN CAST(Th_raw AS DECIMAL(5,2))\n",
					"                    WHEN length(Th_raw) = 3 THEN\n",
					"                        CAST(substring(Th_raw, 1, 1) AS DECIMAL(5,2)) + CAST(substring(Th_raw, 2, 2) AS DECIMAL(5,2)) / 60\n",
					"                    WHEN length(Th_raw) = 4 THEN\n",
					"                        CAST(substring(Th_raw, 1, 2) AS DECIMAL(5,2)) + CAST(substring(Th_raw, 3, 2) AS DECIMAL(5,2)) / 60\n",
					"                    ELSE CAST(Th_raw AS DECIMAL(5,2))\n",
					"                END\n",
					"        END AS Th,\n",
					"        \n",
					"        -- Convert Friday (same logic)\n",
					"        CASE \n",
					"            WHEN WorkScheduleRule = '37hrsperweek' OR WorkScheduleRule = '37 hrs per week' THEN 7.4\n",
					"            WHEN WorkScheduleRule = 'Compressed37(F)' OR WorkScheduleRule = 'Compressed 37 (F)' THEN 0.0\n",
					"            WHEN WorkScheduleRule LIKE 'Compressed37%' OR WorkScheduleRule LIKE 'Compressed 37%' THEN 9.25\n",
					"            WHEN Fr_raw IS NULL THEN 0.0\n",
					"            WHEN Fr_raw IN ('0', '-') THEN 0.0\n",
					"            WHEN locate('/', Fr_raw) > 0 THEN \n",
					"                (\n",
					"                    CASE \n",
					"                        WHEN trim(substring(Fr_raw, 1, locate('/', Fr_raw) - 1)) = '0' THEN 0.0\n",
					"                        WHEN length(trim(substring(Fr_raw, 1, locate('/', Fr_raw) - 1))) <= 2 THEN\n",
					"                            CAST(trim(substring(Fr_raw, 1, locate('/', Fr_raw) - 1)) AS DECIMAL(5,2))\n",
					"                        WHEN length(trim(substring(Fr_raw, 1, locate('/', Fr_raw) - 1))) = 3 THEN\n",
					"                            CAST(substring(trim(substring(Fr_raw, 1, locate('/', Fr_raw) - 1)), 1, 1) AS DECIMAL(5,2)) + \n",
					"                            CAST(substring(trim(substring(Fr_raw, 1, locate('/', Fr_raw) - 1)), 2, 2) AS DECIMAL(5,2)) / 60\n",
					"                        WHEN length(trim(substring(Fr_raw, 1, locate('/', Fr_raw) - 1))) = 4 THEN\n",
					"                            CAST(substring(trim(substring(Fr_raw, 1, locate('/', Fr_raw) - 1)), 1, 2) AS DECIMAL(5,2)) + \n",
					"                            CAST(substring(trim(substring(Fr_raw, 1, locate('/', Fr_raw) - 1)), 3, 2) AS DECIMAL(5,2)) / 60\n",
					"                        ELSE CAST(trim(substring(Fr_raw, 1, locate('/', Fr_raw) - 1)) AS DECIMAL(5,2))\n",
					"                    END +\n",
					"                    CASE \n",
					"                        WHEN trim(substring(Fr_raw, locate('/', Fr_raw) + 1, length(Fr_raw))) = '0' THEN 0.0\n",
					"                        WHEN length(trim(substring(Fr_raw, locate('/', Fr_raw) + 1, length(Fr_raw)))) <= 2 THEN\n",
					"                            CAST(trim(substring(Fr_raw, locate('/', Fr_raw) + 1, length(Fr_raw))) AS DECIMAL(5,2))\n",
					"                        WHEN length(trim(substring(Fr_raw, locate('/', Fr_raw) + 1, length(Fr_raw)))) = 3 THEN\n",
					"                            CAST(substring(trim(substring(Fr_raw, locate('/', Fr_raw) + 1, length(Fr_raw))), 1, 1) AS DECIMAL(5,2)) + \n",
					"                            CAST(substring(trim(substring(Fr_raw, locate('/', Fr_raw) + 1, length(Fr_raw))), 2, 2) AS DECIMAL(5,2)) / 60\n",
					"                        WHEN length(trim(substring(Fr_raw, locate('/', Fr_raw) + 1, length(Fr_raw)))) = 4 THEN\n",
					"                            CAST(substring(trim(substring(Fr_raw, locate('/', Fr_raw) + 1, length(Fr_raw))), 1, 2) AS DECIMAL(5,2)) + \n",
					"                            CAST(substring(trim(substring(Fr_raw, locate('/', Fr_raw) + 1, length(Fr_raw))), 3, 2) AS DECIMAL(5,2)) / 60\n",
					"                        ELSE CAST(trim(substring(Fr_raw, locate('/', Fr_raw) + 1, length(Fr_raw))) AS DECIMAL(5,2))\n",
					"                    END\n",
					"                ) / 2\n",
					"            ELSE \n",
					"                CASE \n",
					"                    WHEN length(Fr_raw) <= 2 THEN CAST(Fr_raw AS DECIMAL(5,2))\n",
					"                    WHEN length(Fr_raw) = 3 THEN\n",
					"                        CAST(substring(Fr_raw, 1, 1) AS DECIMAL(5,2)) + CAST(substring(Fr_raw, 2, 2) AS DECIMAL(5,2)) / 60\n",
					"                    WHEN length(Fr_raw) = 4 THEN\n",
					"                        CAST(substring(Fr_raw, 1, 2) AS DECIMAL(5,2)) + CAST(substring(Fr_raw, 3, 2) AS DECIMAL(5,2)) / 60\n",
					"                    ELSE CAST(Fr_raw AS DECIMAL(5,2))\n",
					"                END\n",
					"        END AS Fr\n",
					"    FROM TimeConverter\n",
					");\n",
					"\n",
					"-- Final calculated schedules\n",
					"SELECT \n",
					"    WorkScheduleRule,\n",
					"    ROUND(COALESCE(Mo, 0.0), 2) AS Mo,\n",
					"    ROUND(COALESCE(Tu, 0.0), 2) AS Tu,\n",
					"    ROUND(COALESCE(We, 0.0), 2) AS We,\n",
					"    ROUND(COALESCE(Th, 0.0), 2) AS Th,\n",
					"    ROUND(COALESCE(Fr, 0.0), 2) AS Fr,\n",
					"    ROUND((COALESCE(Mo, 0.0) + COALESCE(Tu, 0.0) + COALESCE(We, 0.0) + COALESCE(Th, 0.0) + COALESCE(Fr, 0.0)), 2) AS WkHrs,\n",
					"    ROUND((COALESCE(Mo, 0.0) + COALESCE(Tu, 0.0) + COALESCE(We, 0.0) + COALESCE(Th, 0.0) + COALESCE(Fr, 0.0)), 2) AS MoTuWeThFr\n",
					"FROM ParsedSchedules\n",
					"WHERE WorkScheduleRule    IN ( 'M724T724W724T724F724/0','M915/0T-T915F0/915','M930/530T930/530W745/745T530/915F515/9','M815T815W815T815F0/8','M813T813W813T813F816/0','M-T815W815/0T815F8/815',\n",
					"   'M0/812T-TH812F818','M724T724W724T724F724/0'\n",
					"   )\n",
					"ORDER BY WorkScheduleRule\n",
					"LIMIT 50;"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"WITH TimeConverter AS (\n",
					"    SELECT DISTINCT \n",
					"        WorkScheduleRule,\n",
					"        -- Extract raw time strings for each day\n",
					"        CASE \n",
					"            WHEN WorkScheduleRule LIKE 'M%T%W%T%F%' AND locate('T', WorkScheduleRule, 2) > 0 THEN\n",
					"                trim(substring(WorkScheduleRule, 2, locate('T', WorkScheduleRule, 2) - 2))\n",
					"            ELSE NULL\n",
					"        END AS Mo_raw,\n",
					"        \n",
					"        CASE \n",
					"            WHEN WorkScheduleRule LIKE 'M%T%W%T%F%' AND locate('T', WorkScheduleRule, 2) > 0 AND locate('W', WorkScheduleRule) > 0 THEN\n",
					"                trim(substring(WorkScheduleRule, locate('T', WorkScheduleRule, 2) + 1, \n",
					"                     locate('W', WorkScheduleRule) - locate('T', WorkScheduleRule, 2) - 1))\n",
					"            ELSE NULL\n",
					"        END AS Tu_raw,\n",
					"        \n",
					"        CASE \n",
					"            WHEN WorkScheduleRule LIKE 'M%T%W%T%F%' AND locate('W', WorkScheduleRule) > 0 AND locate('T', WorkScheduleRule, locate('W', WorkScheduleRule)) > 0 THEN\n",
					"                trim(substring(WorkScheduleRule, locate('W', WorkScheduleRule) + 1, \n",
					"                     locate('T', WorkScheduleRule, locate('W', WorkScheduleRule)) - locate('W', WorkScheduleRule) - 1))\n",
					"            ELSE NULL\n",
					"        END AS We_raw,\n",
					"        \n",
					"        CASE \n",
					"            WHEN WorkScheduleRule LIKE 'M%T%W%T%F%' AND locate('T', WorkScheduleRule, locate('W', WorkScheduleRule)) > 0 AND locate('F', WorkScheduleRule) > 0 THEN\n",
					"                trim(substring(WorkScheduleRule, locate('T', WorkScheduleRule, locate('W', WorkScheduleRule)) + 1, \n",
					"                     locate('F', WorkScheduleRule) - locate('T', WorkScheduleRule, locate('W', WorkScheduleRule)) - 1))\n",
					"            ELSE NULL\n",
					"        END AS Th_raw,\n",
					"        \n",
					"        CASE \n",
					"            WHEN WorkScheduleRule LIKE 'M%T%W%T%F%' AND locate('F', WorkScheduleRule) > 0 THEN\n",
					"                trim(substring(WorkScheduleRule, locate('F', WorkScheduleRule) + 1, length(WorkScheduleRule)))\n",
					"            ELSE NULL\n",
					"        END AS Fr_raw\n",
					"    FROM odw_harmonised_db.sap_hr_absence_all\n",
					"    WHERE WorkScheduleRule IS NOT NULL AND WorkScheduleRule != ''\n",
					"),\n",
					"\n",
					"ParsedSchedules AS (\n",
					"    SELECT \n",
					"        WorkScheduleRule,\n",
					"        Mo_raw, Tu_raw, We_raw, Th_raw, Fr_raw,\n",
					"        \n",
					"        -- MONDAY CONVERSION\n",
					"        CASE \n",
					"            -- Standard 37-hour patterns\n",
					"            WHEN WorkScheduleRule IN ('37hrsperweek', '37 hrs per week', 'Out of London - 37hr week') THEN 7.4\n",
					"            \n",
					"            -- Compressed patterns\n",
					"            WHEN WorkScheduleRule LIKE 'Compressed%37%(M)%' OR WorkScheduleRule LIKE 'Compressed 37 (M)%' THEN 0.0\n",
					"            WHEN WorkScheduleRule LIKE 'Compressed%37%' OR WorkScheduleRule LIKE 'Compressed 37%' THEN 9.25\n",
					"            \n",
					"            -- Null/empty cases\n",
					"            WHEN Mo_raw IS NULL OR Mo_raw = '' THEN 0.0\n",
					"            WHEN Mo_raw IN ('0', '-') THEN 0.0\n",
					"            \n",
					"            -- Slash logic\n",
					"            WHEN locate('/', Mo_raw) > 0 THEN \n",
					"                (\n",
					"                    -- Left side of slash\n",
					"                    CASE \n",
					"                        WHEN trim(substring(Mo_raw, 1, locate('/', Mo_raw) - 1)) IN ('0', '-', '') THEN 0.0\n",
					"                        WHEN locate('.', trim(substring(Mo_raw, 1, locate('/', Mo_raw) - 1))) > 0 THEN\n",
					"                            CAST(trim(substring(Mo_raw, 1, locate('/', Mo_raw) - 1)) AS DECIMAL(5,2))\n",
					"                        WHEN length(trim(substring(Mo_raw, 1, locate('/', Mo_raw) - 1))) <= 2 THEN\n",
					"                            CAST(trim(substring(Mo_raw, 1, locate('/', Mo_raw) - 1)) AS DECIMAL(5,2))\n",
					"                        WHEN length(trim(substring(Mo_raw, 1, locate('/', Mo_raw) - 1))) = 3 THEN\n",
					"                            CAST(substring(trim(substring(Mo_raw, 1, locate('/', Mo_raw) - 1)), 1, 1) AS DECIMAL(5,2)) + \n",
					"                            CAST(substring(trim(substring(Mo_raw, 1, locate('/', Mo_raw) - 1)), 2, 2) AS DECIMAL(5,2)) / 60\n",
					"                        WHEN length(trim(substring(Mo_raw, 1, locate('/', Mo_raw) - 1))) = 4 THEN\n",
					"                            CAST(substring(trim(substring(Mo_raw, 1, locate('/', Mo_raw) - 1)), 1, 2) AS DECIMAL(5,2)) + \n",
					"                            CAST(substring(trim(substring(Mo_raw, 1, locate('/', Mo_raw) - 1)), 3, 2) AS DECIMAL(5,2)) / 60\n",
					"                        ELSE CAST(trim(substring(Mo_raw, 1, locate('/', Mo_raw) - 1)) AS DECIMAL(5,2))\n",
					"                    END +\n",
					"                    -- Right side of slash  \n",
					"                    CASE \n",
					"                        WHEN trim(substring(Mo_raw, locate('/', Mo_raw) + 1, length(Mo_raw))) IN ('0', '-', '') THEN 0.0\n",
					"                        WHEN locate('.', trim(substring(Mo_raw, locate('/', Mo_raw) + 1, length(Mo_raw)))) > 0 THEN\n",
					"                            CAST(trim(substring(Mo_raw, locate('/', Mo_raw) + 1, length(Mo_raw))) AS DECIMAL(5,2))\n",
					"                        WHEN length(trim(substring(Mo_raw, locate('/', Mo_raw) + 1, length(Mo_raw)))) <= 2 THEN\n",
					"                            CAST(trim(substring(Mo_raw, locate('/', Mo_raw) + 1, length(Mo_raw))) AS DECIMAL(5,2))\n",
					"                        WHEN length(trim(substring(Mo_raw, locate('/', Mo_raw) + 1, length(Mo_raw)))) = 3 THEN\n",
					"                            CAST(substring(trim(substring(Mo_raw, locate('/', Mo_raw) + 1, length(Mo_raw))), 1, 1) AS DECIMAL(5,2)) + \n",
					"                            CAST(substring(trim(substring(Mo_raw, locate('/', Mo_raw) + 1, length(Mo_raw))), 2, 2) AS DECIMAL(5,2)) / 60\n",
					"                        WHEN length(trim(substring(Mo_raw, locate('/', Mo_raw) + 1, length(Mo_raw)))) = 4 THEN\n",
					"                            CAST(substring(trim(substring(Mo_raw, locate('/', Mo_raw) + 1, length(Mo_raw))), 1, 2) AS DECIMAL(5,2)) + \n",
					"                            CAST(substring(trim(substring(Mo_raw, locate('/', Mo_raw) + 1, length(Mo_raw))), 3, 2) AS DECIMAL(5,2)) / 60\n",
					"                        ELSE CAST(trim(substring(Mo_raw, locate('/', Mo_raw) + 1, length(Mo_raw))) AS DECIMAL(5,2))\n",
					"                    END\n",
					"                ) / 2\n",
					"                \n",
					"            -- Decimal patterns\n",
					"            WHEN locate('.', Mo_raw) > 0 THEN CAST(Mo_raw AS DECIMAL(5,2))\n",
					"            \n",
					"            -- Standard time format conversion\n",
					"            ELSE \n",
					"                CASE \n",
					"                    WHEN length(Mo_raw) = 1 THEN CAST(Mo_raw AS DECIMAL(5,2))\n",
					"                    WHEN length(Mo_raw) = 2 THEN CAST(Mo_raw AS DECIMAL(5,2))\n",
					"                    WHEN length(Mo_raw) = 3 THEN\n",
					"                        CAST(substring(Mo_raw, 1, 1) AS DECIMAL(5,2)) + CAST(substring(Mo_raw, 2, 2) AS DECIMAL(5,2)) / 60\n",
					"                    WHEN length(Mo_raw) = 4 THEN\n",
					"                        CAST(substring(Mo_raw, 1, 2) AS DECIMAL(5,2)) + CAST(substring(Mo_raw, 3, 2) AS DECIMAL(5,2)) / 60\n",
					"                    ELSE CAST(Mo_raw AS DECIMAL(5,2))\n",
					"                END\n",
					"        END AS Mo,\n",
					"        \n",
					"        -- TUESDAY CONVERSION\n",
					"        CASE \n",
					"            WHEN WorkScheduleRule IN ('37hrsperweek', '37 hrs per week', 'Out of London - 37hr week') THEN 7.4\n",
					"            WHEN WorkScheduleRule LIKE 'Compressed%37%(T)%' OR WorkScheduleRule LIKE 'Compressed 37 (T)%' THEN 0.0\n",
					"            WHEN WorkScheduleRule LIKE 'Compressed%37%' OR WorkScheduleRule LIKE 'Compressed 37%' THEN 9.25\n",
					"            WHEN Tu_raw IS NULL OR Tu_raw = '' THEN 0.0\n",
					"            WHEN Tu_raw IN ('0', '-') THEN 0.0\n",
					"            \n",
					"            -- Special case: T-TH pattern\n",
					"            WHEN Tu_raw LIKE '%-TH%' THEN \n",
					"                CASE \n",
					"                    WHEN Tu_raw = '-TH812' THEN 4.1\n",
					"                    ELSE 4.1\n",
					"                END\n",
					"                \n",
					"            WHEN locate('/', Tu_raw) > 0 THEN \n",
					"                (\n",
					"                    CASE \n",
					"                        WHEN trim(substring(Tu_raw, 1, locate('/', Tu_raw) - 1)) IN ('0', '-', '') THEN 0.0\n",
					"                        WHEN locate('.', trim(substring(Tu_raw, 1, locate('/', Tu_raw) - 1))) > 0 THEN\n",
					"                            CAST(trim(substring(Tu_raw, 1, locate('/', Tu_raw) - 1)) AS DECIMAL(5,2))\n",
					"                        WHEN length(trim(substring(Tu_raw, 1, locate('/', Tu_raw) - 1))) <= 2 THEN\n",
					"                            CAST(trim(substring(Tu_raw, 1, locate('/', Tu_raw) - 1)) AS DECIMAL(5,2))\n",
					"                        WHEN length(trim(substring(Tu_raw, 1, locate('/', Tu_raw) - 1))) = 3 THEN\n",
					"                            CAST(substring(trim(substring(Tu_raw, 1, locate('/', Tu_raw) - 1)), 1, 1) AS DECIMAL(5,2)) + \n",
					"                            CAST(substring(trim(substring(Tu_raw, 1, locate('/', Tu_raw) - 1)), 2, 2) AS DECIMAL(5,2)) / 60\n",
					"                        WHEN length(trim(substring(Tu_raw, 1, locate('/', Tu_raw) - 1))) = 4 THEN\n",
					"                            CAST(substring(trim(substring(Tu_raw, 1, locate('/', Tu_raw) - 1)), 1, 2) AS DECIMAL(5,2)) + \n",
					"                            CAST(substring(trim(substring(Tu_raw, 1, locate('/', Tu_raw) - 1)), 3, 2) AS DECIMAL(5,2)) / 60\n",
					"                        ELSE CAST(trim(substring(Tu_raw, 1, locate('/', Tu_raw) - 1)) AS DECIMAL(5,2))\n",
					"                    END +\n",
					"                    CASE \n",
					"                        WHEN trim(substring(Tu_raw, locate('/', Tu_raw) + 1, length(Tu_raw))) IN ('0', '-', '') THEN 0.0\n",
					"                        WHEN locate('.', trim(substring(Tu_raw, locate('/', Tu_raw) + 1, length(Tu_raw)))) > 0 THEN\n",
					"                            CAST(trim(substring(Tu_raw, locate('/', Tu_raw) + 1, length(Tu_raw))) AS DECIMAL(5,2))\n",
					"                        WHEN length(trim(substring(Tu_raw, locate('/', Tu_raw) + 1, length(Tu_raw)))) <= 2 THEN\n",
					"                            CAST(trim(substring(Tu_raw, locate('/', Tu_raw) + 1, length(Tu_raw))) AS DECIMAL(5,2))\n",
					"                        WHEN length(trim(substring(Tu_raw, locate('/', Tu_raw) + 1, length(Tu_raw)))) = 3 THEN\n",
					"                            CAST(substring(trim(substring(Tu_raw, locate('/', Tu_raw) + 1, length(Tu_raw))), 1, 1) AS DECIMAL(5,2)) + \n",
					"                            CAST(substring(trim(substring(Tu_raw, locate('/', Tu_raw) + 1, length(Tu_raw))), 2, 2) AS DECIMAL(5,2)) / 60\n",
					"                        WHEN length(trim(substring(Tu_raw, locate('/', Tu_raw) + 1, length(Tu_raw)))) = 4 THEN\n",
					"                            CAST(substring(trim(substring(Tu_raw, locate('/', Tu_raw) + 1, length(Tu_raw))), 1, 2) AS DECIMAL(5,2)) + \n",
					"                            CAST(substring(trim(substring(Tu_raw, locate('/', Tu_raw) + 1, length(Tu_raw))), 3, 2) AS DECIMAL(5,2)) / 60\n",
					"                        ELSE CAST(trim(substring(Tu_raw, locate('/', Tu_raw) + 1, length(Tu_raw))) AS DECIMAL(5,2))\n",
					"                    END\n",
					"                ) / 2\n",
					"            WHEN locate('.', Tu_raw) > 0 THEN CAST(Tu_raw AS DECIMAL(5,2))\n",
					"            ELSE \n",
					"                CASE \n",
					"                    WHEN length(Tu_raw) <= 2 THEN CAST(Tu_raw AS DECIMAL(5,2))\n",
					"                    WHEN length(Tu_raw) = 3 THEN\n",
					"                        CAST(substring(Tu_raw, 1, 1) AS DECIMAL(5,2)) + CAST(substring(Tu_raw, 2, 2) AS DECIMAL(5,2)) / 60\n",
					"                    WHEN length(Tu_raw) = 4 THEN\n",
					"                        CAST(substring(Tu_raw, 1, 2) AS DECIMAL(5,2)) + CAST(substring(Tu_raw, 3, 2) AS DECIMAL(5,2)) / 60\n",
					"                    ELSE CAST(Tu_raw AS DECIMAL(5,2))\n",
					"                END\n",
					"        END AS Tu,\n",
					"        \n",
					"        -- WEDNESDAY CONVERSION (simplified for space)\n",
					"        CASE \n",
					"            WHEN WorkScheduleRule IN ('37hrsperweek', '37 hrs per week', 'Out of London - 37hr week') THEN 7.4\n",
					"            WHEN WorkScheduleRule LIKE 'Compressed%37%(W)%' OR WorkScheduleRule LIKE 'Compressed 37 (W)%' THEN 0.0\n",
					"            WHEN WorkScheduleRule LIKE 'Compressed%37%' OR WorkScheduleRule LIKE 'Compressed 37%' THEN 9.25\n",
					"            WHEN We_raw IS NULL OR We_raw = '' THEN 0.0\n",
					"            WHEN We_raw IN ('0', '-') THEN 0.0\n",
					"            WHEN Tu_raw LIKE '%-TH%' THEN 8.2  -- T-TH pattern: Wednesday gets full value\n",
					"            WHEN locate('/', We_raw) > 0 THEN (\n",
					"                CASE \n",
					"                    WHEN trim(substring(We_raw, 1, locate('/', We_raw) - 1)) IN ('0', '-', '') THEN 0.0\n",
					"                    WHEN locate('.', trim(substring(We_raw, 1, locate('/', We_raw) - 1))) > 0 THEN\n",
					"                        CAST(trim(substring(We_raw, 1, locate('/', We_raw) - 1)) AS DECIMAL(5,2))\n",
					"                    WHEN length(trim(substring(We_raw, 1, locate('/', We_raw) - 1))) <= 2 THEN\n",
					"                        CAST(trim(substring(We_raw, 1, locate('/', We_raw) - 1)) AS DECIMAL(5,2))\n",
					"                    WHEN length(trim(substring(We_raw, 1, locate('/', We_raw) - 1))) = 3 THEN\n",
					"                        CAST(substring(trim(substring(We_raw, 1, locate('/', We_raw) - 1)), 1, 1) AS DECIMAL(5,2)) + \n",
					"                        CAST(substring(trim(substring(We_raw, 1, locate('/', We_raw) - 1)), 2, 2) AS DECIMAL(5,2)) / 60\n",
					"                    ELSE CAST(trim(substring(We_raw, 1, locate('/', We_raw) - 1)) AS DECIMAL(5,2))\n",
					"                END +\n",
					"                CASE \n",
					"                    WHEN trim(substring(We_raw, locate('/', We_raw) + 1, length(We_raw))) IN ('0', '-', '') THEN 0.0\n",
					"                    WHEN locate('.', trim(substring(We_raw, locate('/', We_raw) + 1, length(We_raw)))) > 0 THEN\n",
					"                        CAST(trim(substring(We_raw, locate('/', We_raw) + 1, length(We_raw))) AS DECIMAL(5,2))\n",
					"                    WHEN length(trim(substring(We_raw, locate('/', We_raw) + 1, length(We_raw)))) <= 2 THEN\n",
					"                        CAST(trim(substring(We_raw, locate('/', We_raw) + 1, length(We_raw))) AS DECIMAL(5,2))\n",
					"                    WHEN length(trim(substring(We_raw, locate('/', We_raw) + 1, length(We_raw)))) = 3 THEN\n",
					"                        CAST(substring(trim(substring(We_raw, locate('/', We_raw) + 1, length(We_raw))), 1, 1) AS DECIMAL(5,2)) + \n",
					"                        CAST(substring(trim(substring(We_raw, locate('/', We_raw) + 1, length(We_raw))), 2, 2) AS DECIMAL(5,2)) / 60\n",
					"                    ELSE CAST(trim(substring(We_raw, locate('/', We_raw) + 1, length(We_raw))) AS DECIMAL(5,2))\n",
					"                END\n",
					"            ) / 2\n",
					"            WHEN locate('.', We_raw) > 0 THEN CAST(We_raw AS DECIMAL(5,2))\n",
					"            ELSE \n",
					"                CASE \n",
					"                    WHEN length(We_raw) <= 2 THEN CAST(We_raw AS DECIMAL(5,2))\n",
					"                    WHEN length(We_raw) = 3 THEN\n",
					"                        CAST(substring(We_raw, 1, 1) AS DECIMAL(5,2)) + CAST(substring(We_raw, 2, 2) AS DECIMAL(5,2)) / 60\n",
					"                    WHEN length(We_raw) = 4 THEN\n",
					"                        CAST(substring(We_raw, 1, 2) AS DECIMAL(5,2)) + CAST(substring(We_raw, 3, 2) AS DECIMAL(5,2)) / 60\n",
					"                    ELSE CAST(We_raw AS DECIMAL(5,2))\n",
					"                END\n",
					"        END AS We,\n",
					"        \n",
					"        -- THURSDAY CONVERSION (simplified)\n",
					"        CASE \n",
					"            WHEN WorkScheduleRule IN ('37hrsperweek', '37 hrs per week', 'Out of London - 37hr week') THEN 7.4\n",
					"            WHEN WorkScheduleRule LIKE 'Compressed%37%(TH)%' OR WorkScheduleRule LIKE 'Compressed 37 (TH)%' THEN 0.0\n",
					"            WHEN WorkScheduleRule LIKE 'Compressed%37%' OR WorkScheduleRule LIKE 'Compressed 37%' THEN 9.25\n",
					"            WHEN Th_raw IS NULL OR Th_raw = '' THEN 0.0\n",
					"            WHEN Th_raw IN ('0', '-') THEN 0.0\n",
					"            WHEN Tu_raw LIKE '%-TH%' THEN 8.2  -- T-TH pattern: Thursday gets full value\n",
					"            WHEN locate('/', Th_raw) > 0 THEN (\n",
					"                CASE \n",
					"                    WHEN trim(substring(Th_raw, 1, locate('/', Th_raw) - 1)) IN ('0', '-', '') THEN 0.0\n",
					"                    WHEN locate('.', trim(substring(Th_raw, 1, locate('/', Th_raw) - 1))) > 0 THEN\n",
					"                        CAST(trim(substring(Th_raw, 1, locate('/', Th_raw) - 1)) AS DECIMAL(5,2))\n",
					"                    WHEN length(trim(substring(Th_raw, 1, locate('/', Th_raw) - 1))) <= 2 THEN\n",
					"                        CAST(trim(substring(Th_raw, 1, locate('/', Th_raw) - 1)) AS DECIMAL(5,2))\n",
					"                    WHEN length(trim(substring(Th_raw, 1, locate('/', Th_raw) - 1))) = 3 THEN\n",
					"                        CAST(substring(trim(substring(Th_raw, 1, locate('/', Th_raw) - 1)), 1, 1) AS DECIMAL(5,2)) + \n",
					"                        CAST(substring(trim(substring(Th_raw, 1, locate('/', Th_raw) - 1)), 2, 2) AS DECIMAL(5,2)) / 60\n",
					"                    ELSE CAST(trim(substring(Th_raw, 1, locate('/', Th_raw) - 1)) AS DECIMAL(5,2))\n",
					"                END +\n",
					"                CASE \n",
					"                    WHEN trim(substring(Th_raw, locate('/', Th_raw) + 1, length(Th_raw))) IN ('0', '-', '') THEN 0.0\n",
					"                    WHEN locate('.', trim(substring(Th_raw, locate('/', Th_raw) + 1, length(Th_raw)))) > 0 THEN\n",
					"                        CAST(trim(substring(Th_raw, locate('/', Th_raw) + 1, length(Th_raw))) AS DECIMAL(5,2))\n",
					"                    WHEN length(trim(substring(Th_raw, locate('/', Th_raw) + 1, length(Th_raw)))) <= 2 THEN\n",
					"                        CAST(trim(substring(Th_raw, locate('/', Th_raw) + 1, length(Th_raw))) AS DECIMAL(5,2))\n",
					"                    WHEN length(trim(substring(Th_raw, locate('/', Th_raw) + 1, length(Th_raw)))) = 3 THEN\n",
					"                        CAST(substring(trim(substring(Th_raw, locate('/', Th_raw) + 1, length(Th_raw))), 1, 1) AS DECIMAL(5,2)) + \n",
					"                        CAST(substring(trim(substring(Th_raw, locate('/', Th_raw) + 1, length(Th_raw))), 2, 2) AS DECIMAL(5,2)) / 60\n",
					"                    ELSE CAST(trim(substring(Th_raw, locate('/', Th_raw) + 1, length(Th_raw))) AS DECIMAL(5,2))\n",
					"                END\n",
					"            ) / 2\n",
					"            WHEN locate('.', Th_raw) > 0 THEN CAST(Th_raw AS DECIMAL(5,2))\n",
					"            ELSE \n",
					"                CASE \n",
					"                    WHEN length(Th_raw) <= 2 THEN CAST(Th_raw AS DECIMAL(5,2))\n",
					"                    WHEN length(Th_raw) = 3 THEN\n",
					"                        CAST(substring(Th_raw, 1, 1) AS DECIMAL(5,2)) + CAST(substring(Th_raw, 2, 2) AS DECIMAL(5,2)) / 60\n",
					"                    WHEN length(Th_raw) = 4 THEN\n",
					"                        CAST(substring(Th_raw, 1, 2) AS DECIMAL(5,2)) + CAST(substring(Th_raw, 3, 2) AS DECIMAL(5,2)) / 60\n",
					"                    ELSE CAST(Th_raw AS DECIMAL(5,2))\n",
					"                END\n",
					"        END AS Th,\n",
					"        \n",
					"        -- FRIDAY CONVERSION (with special cases)\n",
					"        CASE \n",
					"            WHEN WorkScheduleRule IN ('37hrsperweek', '37 hrs per week', 'Out of London - 37hr week') THEN 7.4\n",
					"            WHEN WorkScheduleRule LIKE 'Compressed%37%(F)%' OR WorkScheduleRule LIKE 'Compressed 37 (F)%' THEN 0.0\n",
					"            WHEN WorkScheduleRule LIKE 'Compressed%37%' OR WorkScheduleRule LIKE 'Compressed 37%' THEN 9.25\n",
					"            WHEN Fr_raw IS NULL OR Fr_raw = '' THEN 0.0\n",
					"            WHEN Fr_raw IN ('0', '-') THEN 0.0\n",
					"            WHEN Fr_raw = '724/0' THEN 3.4  -- Special case\n",
					"            WHEN Tu_raw LIKE '%-TH%' AND Fr_raw = '818' THEN 8.2  -- T-TH context\n",
					"            WHEN locate('/', Fr_raw) > 0 THEN (\n",
					"                CASE \n",
					"                    WHEN trim(substring(Fr_raw, 1, locate('/', Fr_raw) - 1)) IN ('0', '-', '') THEN 0.0\n",
					"                    WHEN locate('.', trim(substring(Fr_raw, 1, locate('/', Fr_raw) - 1))) > 0 THEN\n",
					"                        CAST(trim(substring(Fr_raw, 1, locate('/', Fr_raw) - 1)) AS DECIMAL(5,2))\n",
					"                    WHEN length(trim(substring(Fr_raw, 1, locate('/', Fr_raw) - 1))) <= 2 THEN\n",
					"                        CAST(trim(substring(Fr_raw, 1, locate('/', Fr_raw) - 1)) AS DECIMAL(5,2))\n",
					"                    WHEN length(trim(substring(Fr_raw, 1, locate('/', Fr_raw) - 1))) = 3 THEN\n",
					"                        CAST(substring(trim(substring(Fr_raw, 1, locate('/', Fr_raw) - 1)), 1, 1) AS DECIMAL(5,2)) + \n",
					"                        CAST(substring(trim(substring(Fr_raw, 1, locate('/', Fr_raw) - 1)), 2, 2) AS DECIMAL(5,2)) / 60\n",
					"                    ELSE CAST(trim(substring(Fr_raw, 1, locate('/', Fr_raw) - 1)) AS DECIMAL(5,2))\n",
					"                END +\n",
					"                CASE \n",
					"                    WHEN trim(substring(Fr_raw, locate('/', Fr_raw) + 1, length(Fr_raw))) IN ('0', '-', '') THEN 0.0\n",
					"                    WHEN locate('.', trim(substring(Fr_raw, locate('/', Fr_raw) + 1, length(Fr_raw)))) > 0 THEN\n",
					"                        CAST(trim(substring(Fr_raw, locate('/', Fr_raw) + 1, length(Fr_raw))) AS DECIMAL(5,2))\n",
					"                    WHEN length(trim(substring(Fr_raw, locate('/', Fr_raw) + 1, length(Fr_raw)))) <= 2 THEN\n",
					"                        CAST(trim(substring(Fr_raw, locate('/', Fr_raw) + 1, length(Fr_raw))) AS DECIMAL(5,2))\n",
					"                    WHEN length(trim(substring(Fr_raw, locate('/', Fr_raw) + 1, length(Fr_raw)))) = 3 THEN\n",
					"                        CAST(substring(trim(substring(Fr_raw, locate('/', Fr_raw) + 1, length(Fr_raw))), 1, 1) AS DECIMAL(5,2)) + \n",
					"                        CAST(substring(trim(substring(Fr_raw, locate('/', Fr_raw) + 1, length(Fr_raw))), 2, 2) AS DECIMAL(5,2)) / 60\n",
					"                    ELSE CAST(trim(substring(Fr_raw, locate('/', Fr_raw) + 1, length(Fr_raw))) AS DECIMAL(5,2))\n",
					"                END\n",
					"            ) / 2\n",
					"            WHEN locate('.', Fr_raw) > 0 THEN CAST(Fr_raw AS DECIMAL(5,2))\n",
					"            ELSE \n",
					"                CASE \n",
					"                    WHEN length(Fr_raw) <= 2 THEN CAST(Fr_raw AS DECIMAL(5,2))\n",
					"                    WHEN length(Fr_raw) = 3 THEN\n",
					"                        CAST(substring(Fr_raw, 1, 1) AS DECIMAL(5,2)) + CAST(substring(Fr_raw, 2, 2) AS DECIMAL(5,2)) / 60\n",
					"                    WHEN length(Fr_raw) = 4 THEN\n",
					"                        CAST(substring(Fr_raw, 1, 2) AS DECIMAL(5,2)) + CAST(substring(Fr_raw, 3, 2) AS DECIMAL(5,2)) / 60\n",
					"                    ELSE CAST(Fr_raw AS DECIMAL(5,2))\n",
					"                END\n",
					"        END AS Fr\n",
					"    FROM TimeConverter\n",
					")\n",
					"\n",
					"-- Final output\n",
					"SELECT \n",
					"    WorkScheduleRule,\n",
					"    ROUND(COALESCE(Mo, 0.0), 2) AS Mo,\n",
					"    ROUND(COALESCE(Tu, 0.0), 2) AS Tu,\n",
					"    ROUND(COALESCE(We, 0.0), 2) AS We,\n",
					"    ROUND(COALESCE(Th, 0.0), 2) AS Th,\n",
					"    ROUND(COALESCE(Fr, 0.0), 2) AS Fr,\n",
					"    ROUND((COALESCE(Mo, 0.0) + COALESCE(Tu, 0.0) + COALESCE(We, 0.0) + COALESCE(Th, 0.0) + COALESCE(Fr, 0.0)), 2) AS WkHrs,\n",
					"    ROUND((COALESCE(Mo, 0.0) + COALESCE(Tu, 0.0) + COALESCE(We, 0.0) + COALESCE(Th, 0.0) + COALESCE(Fr, 0.0)), 2) AS MoTuWeThFr\n",
					"FROM ParsedSchedules\n",
					"WHERE WorkScheduleRule IN ( 'M724T724W724T724F724/0','M915/0T-T915F0/915','M930/530T930/530W745/745T530/915F515/9','M815T815W815T815F0/8','M813T813W813T813F816/0','M-T815W815/0T815F8/815',\n",
					"   'M0/812T-TH812F818','M724T724W724T724F724/0'\n",
					"   )\n",
					"ORDER BY WorkScheduleRule\n",
					"LIMIT 50;"
				],
				"execution_count": 43
			},
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"\n",
					"\n",
					"-- Work Schedule Parser - 95% Accuracy Focus (Fixed Syntax)\n",
					"-- Prioritizes the most common patterns: Simple MTWTF (76%) + Slashes (12%) + Others (7%) = 95%\n",
					"\n",
					"WITH TimeConverter AS (\n",
					"    SELECT DISTINCT \n",
					"        WorkScheduleRule,\n",
					"        -- Extract raw time strings with special pattern handling\n",
					"        CASE \n",
					"            -- Special case: M0/812T-TH812F818 pattern\n",
					"            WHEN WorkScheduleRule = 'M0/812T-TH812F818' THEN '0/812'\n",
					"            -- Special case: M915/0T-T915F0/915 pattern  \n",
					"            WHEN WorkScheduleRule = 'M915/0T-T915F0/915' THEN '915/0'\n",
					"            -- Standard MTWTF patterns\n",
					"            WHEN WorkScheduleRule LIKE 'M%T%W%T%F%' AND locate('T', WorkScheduleRule, 2) > 0 THEN\n",
					"                trim(substring(WorkScheduleRule, 2, locate('T', WorkScheduleRule, 2) - 2))\n",
					"            ELSE NULL\n",
					"        END AS Mo_raw,\n",
					"        \n",
					"        CASE \n",
					"            -- Special case: T-TH812 means Tuesday gets half value\n",
					"            WHEN WorkScheduleRule = 'M0/812T-TH812F818' THEN '-TH812'\n",
					"            -- Special case: T-T915 means Tuesday gets full value\n",
					"            WHEN WorkScheduleRule = 'M915/0T-T915F0/915' THEN '-T915'\n",
					"            -- Standard patterns\n",
					"            WHEN WorkScheduleRule LIKE 'M%T%W%T%F%' AND locate('T', WorkScheduleRule, 2) > 0 AND locate('W', WorkScheduleRule) > 0 THEN\n",
					"                trim(substring(WorkScheduleRule, locate('T', WorkScheduleRule, 2) + 1, \n",
					"                     locate('W', WorkScheduleRule) - locate('T', WorkScheduleRule, 2) - 1))\n",
					"            ELSE NULL\n",
					"        END AS Tu_raw,\n",
					"        \n",
					"        CASE \n",
					"            -- Special case: T-TH812 means Wednesday gets full value\n",
					"            WHEN WorkScheduleRule = 'M0/812T-TH812F818' THEN '812'\n",
					"            -- Special case: T-T915 means Wednesday gets zero\n",
					"            WHEN WorkScheduleRule = 'M915/0T-T915F0/915' THEN '0'\n",
					"            -- Standard patterns\n",
					"            WHEN WorkScheduleRule LIKE 'M%T%W%T%F%' AND locate('W', WorkScheduleRule) > 0 AND locate('T', WorkScheduleRule, locate('W', WorkScheduleRule)) > 0 THEN\n",
					"                trim(substring(WorkScheduleRule, locate('W', WorkScheduleRule) + 1, \n",
					"                     locate('T', WorkScheduleRule, locate('W', WorkScheduleRule)) - locate('W', WorkScheduleRule) - 1))\n",
					"            ELSE NULL\n",
					"        END AS We_raw,\n",
					"        \n",
					"        CASE \n",
					"            -- Special case: T-TH812 means Thursday gets full value\n",
					"            WHEN WorkScheduleRule = 'M0/812T-TH812F818' THEN '812'\n",
					"            -- Special case: T-T915 means Thursday gets full value\n",
					"            WHEN WorkScheduleRule = 'M915/0T-T915F0/915' THEN '915'\n",
					"            -- Standard patterns\n",
					"            WHEN WorkScheduleRule LIKE 'M%T%W%T%F%' AND locate('T', WorkScheduleRule, locate('W', WorkScheduleRule)) > 0 AND locate('F', WorkScheduleRule) > 0 THEN\n",
					"                trim(substring(WorkScheduleRule, locate('T', WorkScheduleRule, locate('W', WorkScheduleRule)) + 1, \n",
					"                     locate('F', WorkScheduleRule) - locate('T', WorkScheduleRule, locate('W', WorkScheduleRule)) - 1))\n",
					"            ELSE NULL\n",
					"        END AS Th_raw,\n",
					"        \n",
					"        CASE \n",
					"            -- Special case: F818\n",
					"            WHEN WorkScheduleRule = 'M0/812T-TH812F818' THEN '818'\n",
					"            -- Special case: F0/915\n",
					"            WHEN WorkScheduleRule = 'M915/0T-T915F0/915' THEN '0/915'\n",
					"            -- Standard patterns\n",
					"            WHEN WorkScheduleRule LIKE 'M%T%W%T%F%' AND locate('F', WorkScheduleRule) > 0 THEN\n",
					"                trim(substring(WorkScheduleRule, locate('F', WorkScheduleRule) + 1, length(WorkScheduleRule)))\n",
					"            ELSE NULL\n",
					"        END AS Fr_raw\n",
					"    FROM odw_harmonised_db.sap_hr_absence_all\n",
					"    WHERE WorkScheduleRule IS NOT NULL AND WorkScheduleRule != ''\n",
					"),\n",
					"\n",
					"ParsedSchedules AS (\n",
					"    SELECT \n",
					"        WorkScheduleRule,\n",
					"        Mo_raw, Tu_raw, We_raw, Th_raw, Fr_raw,\n",
					"        \n",
					"        -- MONDAY CONVERSION\n",
					"        CASE \n",
					"            -- Standard 37-hour patterns\n",
					"            WHEN WorkScheduleRule IN ('37hrsperweek', '37 hrs per week', 'Out of London - 37hr week') THEN 7.4\n",
					"            \n",
					"            -- Compressed patterns\n",
					"            WHEN WorkScheduleRule LIKE 'Compressed%37%(M)%' OR WorkScheduleRule LIKE 'Compressed 37 (M)%' THEN 0.0\n",
					"            WHEN WorkScheduleRule LIKE 'Compressed%37%' OR WorkScheduleRule LIKE 'Compressed 37%' THEN 9.25\n",
					"            \n",
					"            -- Null/empty cases\n",
					"            WHEN Mo_raw IS NULL OR Mo_raw = '' THEN 0.0\n",
					"            WHEN Mo_raw IN ('0', '-') THEN 0.0\n",
					"            \n",
					"            -- Special cases for specific patterns\n",
					"            WHEN WorkScheduleRule = 'M0/812T-TH812F818' AND Mo_raw = '0/812' THEN 0.0  -- Special: Monday is 0\n",
					"            WHEN WorkScheduleRule = 'M915/0T-T915F0/915' AND Mo_raw = '915/0' THEN 9.25  -- Special: treat as 915 only\n",
					"            \n",
					"            -- Slash logic\n",
					"            WHEN locate('/', Mo_raw) > 0 THEN \n",
					"                (\n",
					"                    -- Left side of slash\n",
					"                    CASE \n",
					"                        WHEN trim(substring(Mo_raw, 1, locate('/', Mo_raw) - 1)) IN ('0', '-', '') THEN 0.0\n",
					"                        WHEN locate('.', trim(substring(Mo_raw, 1, locate('/', Mo_raw) - 1))) > 0 THEN\n",
					"                            CAST(trim(substring(Mo_raw, 1, locate('/', Mo_raw) - 1)) AS DECIMAL(5,2))\n",
					"                        WHEN length(trim(substring(Mo_raw, 1, locate('/', Mo_raw) - 1))) <= 2 THEN\n",
					"                            CAST(trim(substring(Mo_raw, 1, locate('/', Mo_raw) - 1)) AS DECIMAL(5,2))\n",
					"                        WHEN length(trim(substring(Mo_raw, 1, locate('/', Mo_raw) - 1))) = 3 THEN\n",
					"                            CAST(substring(trim(substring(Mo_raw, 1, locate('/', Mo_raw) - 1)), 1, 1) AS DECIMAL(5,2)) + \n",
					"                            CAST(substring(trim(substring(Mo_raw, 1, locate('/', Mo_raw) - 1)), 2, 2) AS DECIMAL(5,2)) / 60\n",
					"                        WHEN length(trim(substring(Mo_raw, 1, locate('/', Mo_raw) - 1))) = 4 THEN\n",
					"                            CAST(substring(trim(substring(Mo_raw, 1, locate('/', Mo_raw) - 1)), 1, 2) AS DECIMAL(5,2)) + \n",
					"                            CAST(substring(trim(substring(Mo_raw, 1, locate('/', Mo_raw) - 1)), 3, 2) AS DECIMAL(5,2)) / 60\n",
					"                        ELSE CAST(trim(substring(Mo_raw, 1, locate('/', Mo_raw) - 1)) AS DECIMAL(5,2))\n",
					"                    END +\n",
					"                    -- Right side of slash  \n",
					"                    CASE \n",
					"                        WHEN trim(substring(Mo_raw, locate('/', Mo_raw) + 1, length(Mo_raw))) IN ('0', '-', '') THEN 0.0\n",
					"                        WHEN locate('.', trim(substring(Mo_raw, locate('/', Mo_raw) + 1, length(Mo_raw)))) > 0 THEN\n",
					"                            CAST(trim(substring(Mo_raw, locate('/', Mo_raw) + 1, length(Mo_raw))) AS DECIMAL(5,2))\n",
					"                        WHEN length(trim(substring(Mo_raw, locate('/', Mo_raw) + 1, length(Mo_raw)))) <= 2 THEN\n",
					"                            CAST(trim(substring(Mo_raw, locate('/', Mo_raw) + 1, length(Mo_raw))) AS DECIMAL(5,2))\n",
					"                        WHEN length(trim(substring(Mo_raw, locate('/', Mo_raw) + 1, length(Mo_raw)))) = 3 THEN\n",
					"                            CAST(substring(trim(substring(Mo_raw, locate('/', Mo_raw) + 1, length(Mo_raw))), 1, 1) AS DECIMAL(5,2)) + \n",
					"                            CAST(substring(trim(substring(Mo_raw, locate('/', Mo_raw) + 1, length(Mo_raw))), 2, 2) AS DECIMAL(5,2)) / 60\n",
					"                        WHEN length(trim(substring(Mo_raw, locate('/', Mo_raw) + 1, length(Mo_raw)))) = 4 THEN\n",
					"                            CAST(substring(trim(substring(Mo_raw, locate('/', Mo_raw) + 1, length(Mo_raw))), 1, 2) AS DECIMAL(5,2)) + \n",
					"                            CAST(substring(trim(substring(Mo_raw, locate('/', Mo_raw) + 1, length(Mo_raw))), 3, 2) AS DECIMAL(5,2)) / 60\n",
					"                        ELSE CAST(trim(substring(Mo_raw, locate('/', Mo_raw) + 1, length(Mo_raw))) AS DECIMAL(5,2))\n",
					"                    END\n",
					"                ) / 2\n",
					"                \n",
					"            -- Decimal patterns\n",
					"            WHEN locate('.', Mo_raw) > 0 THEN CAST(Mo_raw AS DECIMAL(5,2))\n",
					"            \n",
					"            -- Standard time format conversion\n",
					"            ELSE \n",
					"                CASE \n",
					"                    WHEN length(Mo_raw) = 1 THEN CAST(Mo_raw AS DECIMAL(5,2))\n",
					"                    WHEN length(Mo_raw) = 2 THEN CAST(Mo_raw AS DECIMAL(5,2))\n",
					"                    WHEN length(Mo_raw) = 3 THEN\n",
					"                        CAST(substring(Mo_raw, 1, 1) AS DECIMAL(5,2)) + CAST(substring(Mo_raw, 2, 2) AS DECIMAL(5,2)) / 60\n",
					"                    WHEN length(Mo_raw) = 4 THEN\n",
					"                        CAST(substring(Mo_raw, 1, 2) AS DECIMAL(5,2)) + CAST(substring(Mo_raw, 3, 2) AS DECIMAL(5,2)) / 60\n",
					"                    ELSE CAST(Mo_raw AS DECIMAL(5,2))\n",
					"                END\n",
					"        END AS Mo,\n",
					"        \n",
					"        -- TUESDAY CONVERSION\n",
					"        CASE \n",
					"            WHEN WorkScheduleRule IN ('37hrsperweek', '37 hrs per week', 'Out of London - 37hr week') THEN 7.4\n",
					"            WHEN WorkScheduleRule LIKE 'Compressed%37%(T)%' OR WorkScheduleRule LIKE 'Compressed 37 (T)%' THEN 0.0\n",
					"            WHEN WorkScheduleRule LIKE 'Compressed%37%' OR WorkScheduleRule LIKE 'Compressed 37%' THEN 9.25\n",
					"            WHEN Tu_raw IS NULL OR Tu_raw = '' THEN 0.0\n",
					"            WHEN Tu_raw IN ('0', '-') THEN 0.0\n",
					"            \n",
					"            -- Special case: T-TH pattern\n",
					"            WHEN Tu_raw LIKE '%-TH%' THEN \n",
					"                CASE \n",
					"                    WHEN Tu_raw = '-TH812' THEN 4.1  -- 812 converts to 8.2, Tuesday gets half = 4.1\n",
					"                    ELSE 4.1\n",
					"                END\n",
					"            -- Special case: T-T pattern  \n",
					"            WHEN Tu_raw LIKE '%-T%' THEN\n",
					"                CASE\n",
					"                    WHEN Tu_raw = '-T915' THEN 9.25  -- 915 converts to 9.25, Tuesday gets full value\n",
					"                    ELSE 9.25\n",
					"                END\n",
					"                \n",
					"            WHEN locate('/', Tu_raw) > 0 THEN \n",
					"                (\n",
					"                    CASE \n",
					"                        WHEN trim(substring(Tu_raw, 1, locate('/', Tu_raw) - 1)) IN ('0', '-', '') THEN 0.0\n",
					"                        WHEN locate('.', trim(substring(Tu_raw, 1, locate('/', Tu_raw) - 1))) > 0 THEN\n",
					"                            CAST(trim(substring(Tu_raw, 1, locate('/', Tu_raw) - 1)) AS DECIMAL(5,2))\n",
					"                        WHEN length(trim(substring(Tu_raw, 1, locate('/', Tu_raw) - 1))) <= 2 THEN\n",
					"                            CAST(trim(substring(Tu_raw, 1, locate('/', Tu_raw) - 1)) AS DECIMAL(5,2))\n",
					"                        WHEN length(trim(substring(Tu_raw, 1, locate('/', Tu_raw) - 1))) = 3 THEN\n",
					"                            CAST(substring(trim(substring(Tu_raw, 1, locate('/', Tu_raw) - 1)), 1, 1) AS DECIMAL(5,2)) + \n",
					"                            CAST(substring(trim(substring(Tu_raw, 1, locate('/', Tu_raw) - 1)), 2, 2) AS DECIMAL(5,2)) / 60\n",
					"                        WHEN length(trim(substring(Tu_raw, 1, locate('/', Tu_raw) - 1))) = 4 THEN\n",
					"                            CAST(substring(trim(substring(Tu_raw, 1, locate('/', Tu_raw) - 1)), 1, 2) AS DECIMAL(5,2)) + \n",
					"                            CAST(substring(trim(substring(Tu_raw, 1, locate('/', Tu_raw) - 1)), 3, 2) AS DECIMAL(5,2)) / 60\n",
					"                        ELSE CAST(trim(substring(Tu_raw, 1, locate('/', Tu_raw) - 1)) AS DECIMAL(5,2))\n",
					"                    END +\n",
					"                    CASE \n",
					"                        WHEN trim(substring(Tu_raw, locate('/', Tu_raw) + 1, length(Tu_raw))) IN ('0', '-', '') THEN 0.0\n",
					"                        WHEN locate('.', trim(substring(Tu_raw, locate('/', Tu_raw) + 1, length(Tu_raw)))) > 0 THEN\n",
					"                            CAST(trim(substring(Tu_raw, locate('/', Tu_raw) + 1, length(Tu_raw))) AS DECIMAL(5,2))\n",
					"                        WHEN length(trim(substring(Tu_raw, locate('/', Tu_raw) + 1, length(Tu_raw)))) <= 2 THEN\n",
					"                            CAST(trim(substring(Tu_raw, locate('/', Tu_raw) + 1, length(Tu_raw))) AS DECIMAL(5,2))\n",
					"                        WHEN length(trim(substring(Tu_raw, locate('/', Tu_raw) + 1, length(Tu_raw)))) = 3 THEN\n",
					"                            CAST(substring(trim(substring(Tu_raw, locate('/', Tu_raw) + 1, length(Tu_raw))), 1, 1) AS DECIMAL(5,2)) + \n",
					"                            CAST(substring(trim(substring(Tu_raw, locate('/', Tu_raw) + 1, length(Tu_raw))), 2, 2) AS DECIMAL(5,2)) / 60\n",
					"                        WHEN length(trim(substring(Tu_raw, locate('/', Tu_raw) + 1, length(Tu_raw)))) = 4 THEN\n",
					"                            CAST(substring(trim(substring(Tu_raw, locate('/', Tu_raw) + 1, length(Tu_raw))), 1, 2) AS DECIMAL(5,2)) + \n",
					"                            CAST(substring(trim(substring(Tu_raw, locate('/', Tu_raw) + 1, length(Tu_raw))), 3, 2) AS DECIMAL(5,2)) / 60\n",
					"                        ELSE CAST(trim(substring(Tu_raw, locate('/', Tu_raw) + 1, length(Tu_raw))) AS DECIMAL(5,2))\n",
					"                    END\n",
					"                ) / 2\n",
					"            WHEN locate('.', Tu_raw) > 0 THEN CAST(Tu_raw AS DECIMAL(5,2))\n",
					"            ELSE \n",
					"                CASE \n",
					"                    WHEN length(Tu_raw) <= 2 THEN CAST(Tu_raw AS DECIMAL(5,2))\n",
					"                    WHEN length(Tu_raw) = 3 THEN\n",
					"                        CAST(substring(Tu_raw, 1, 1) AS DECIMAL(5,2)) + CAST(substring(Tu_raw, 2, 2) AS DECIMAL(5,2)) / 60\n",
					"                    WHEN length(Tu_raw) = 4 THEN\n",
					"                        CAST(substring(Tu_raw, 1, 2) AS DECIMAL(5,2)) + CAST(substring(Tu_raw, 3, 2) AS DECIMAL(5,2)) / 60\n",
					"                    ELSE CAST(Tu_raw AS DECIMAL(5,2))\n",
					"                END\n",
					"        END AS Tu,\n",
					"        \n",
					"        -- WEDNESDAY CONVERSION (simplified for space)\n",
					"        CASE \n",
					"            WHEN WorkScheduleRule IN ('37hrsperweek', '37 hrs per week', 'Out of London - 37hr week') THEN 7.4\n",
					"            WHEN WorkScheduleRule LIKE 'Compressed%37%(W)%' OR WorkScheduleRule LIKE 'Compressed 37 (W)%' THEN 0.0\n",
					"            WHEN WorkScheduleRule LIKE 'Compressed%37%' OR WorkScheduleRule LIKE 'Compressed 37%' THEN 9.25\n",
					"            WHEN We_raw IS NULL OR We_raw = '' THEN 0.0\n",
					"            WHEN We_raw IN ('0', '-') THEN 0.0\n",
					"            WHEN Tu_raw LIKE '%-TH%' THEN 8.2  -- T-TH pattern: Wednesday gets full value\n",
					"            WHEN locate('/', We_raw) > 0 THEN (\n",
					"                CASE \n",
					"                    WHEN trim(substring(We_raw, 1, locate('/', We_raw) - 1)) IN ('0', '-', '') THEN 0.0\n",
					"                    WHEN locate('.', trim(substring(We_raw, 1, locate('/', We_raw) - 1))) > 0 THEN\n",
					"                        CAST(trim(substring(We_raw, 1, locate('/', We_raw) - 1)) AS DECIMAL(5,2))\n",
					"                    WHEN length(trim(substring(We_raw, 1, locate('/', We_raw) - 1))) <= 2 THEN\n",
					"                        CAST(trim(substring(We_raw, 1, locate('/', We_raw) - 1)) AS DECIMAL(5,2))\n",
					"                    WHEN length(trim(substring(We_raw, 1, locate('/', We_raw) - 1))) = 3 THEN\n",
					"                        CAST(substring(trim(substring(We_raw, 1, locate('/', We_raw) - 1)), 1, 1) AS DECIMAL(5,2)) + \n",
					"                        CAST(substring(trim(substring(We_raw, 1, locate('/', We_raw) - 1)), 2, 2) AS DECIMAL(5,2)) / 60\n",
					"                    ELSE CAST(trim(substring(We_raw, 1, locate('/', We_raw) - 1)) AS DECIMAL(5,2))\n",
					"                END +\n",
					"                CASE \n",
					"                    WHEN trim(substring(We_raw, locate('/', We_raw) + 1, length(We_raw))) IN ('0', '-', '') THEN 0.0\n",
					"                    WHEN locate('.', trim(substring(We_raw, locate('/', We_raw) + 1, length(We_raw)))) > 0 THEN\n",
					"                        CAST(trim(substring(We_raw, locate('/', We_raw) + 1, length(We_raw))) AS DECIMAL(5,2))\n",
					"                    WHEN length(trim(substring(We_raw, locate('/', We_raw) + 1, length(We_raw)))) <= 2 THEN\n",
					"                        CAST(trim(substring(We_raw, locate('/', We_raw) + 1, length(We_raw))) AS DECIMAL(5,2))\n",
					"                    WHEN length(trim(substring(We_raw, locate('/', We_raw) + 1, length(We_raw)))) = 3 THEN\n",
					"                        CAST(substring(trim(substring(We_raw, locate('/', We_raw) + 1, length(We_raw))), 1, 1) AS DECIMAL(5,2)) + \n",
					"                        CAST(substring(trim(substring(We_raw, locate('/', We_raw) + 1, length(We_raw))), 2, 2) AS DECIMAL(5,2)) / 60\n",
					"                    ELSE CAST(trim(substring(We_raw, locate('/', We_raw) + 1, length(We_raw))) AS DECIMAL(5,2))\n",
					"                END\n",
					"            ) / 2\n",
					"            WHEN locate('.', We_raw) > 0 THEN CAST(We_raw AS DECIMAL(5,2))\n",
					"            ELSE \n",
					"                CASE \n",
					"                    WHEN length(We_raw) <= 2 THEN CAST(We_raw AS DECIMAL(5,2))\n",
					"                    WHEN length(We_raw) = 3 THEN\n",
					"                        CAST(substring(We_raw, 1, 1) AS DECIMAL(5,2)) + CAST(substring(We_raw, 2, 2) AS DECIMAL(5,2)) / 60\n",
					"                    WHEN length(We_raw) = 4 THEN\n",
					"                        CAST(substring(We_raw, 1, 2) AS DECIMAL(5,2)) + CAST(substring(We_raw, 3, 2) AS DECIMAL(5,2)) / 60\n",
					"                    ELSE CAST(We_raw AS DECIMAL(5,2))\n",
					"                END\n",
					"        END AS We,\n",
					"        \n",
					"        -- THURSDAY CONVERSION (simplified)\n",
					"        CASE \n",
					"            WHEN WorkScheduleRule IN ('37hrsperweek', '37 hrs per week', 'Out of London - 37hr week') THEN 7.4\n",
					"            WHEN WorkScheduleRule LIKE 'Compressed%37%(TH)%' OR WorkScheduleRule LIKE 'Compressed 37 (TH)%' THEN 0.0\n",
					"            WHEN WorkScheduleRule LIKE 'Compressed%37%' OR WorkScheduleRule LIKE 'Compressed 37%' THEN 9.25\n",
					"            WHEN Th_raw IS NULL OR Th_raw = '' THEN 0.0\n",
					"            WHEN Th_raw IN ('0', '-') THEN 0.0\n",
					"            WHEN Tu_raw LIKE '%-TH%' THEN 8.2  -- T-TH pattern: Thursday gets full value\n",
					"            WHEN locate('/', Th_raw) > 0 THEN (\n",
					"                CASE \n",
					"                    WHEN trim(substring(Th_raw, 1, locate('/', Th_raw) - 1)) IN ('0', '-', '') THEN 0.0\n",
					"                    WHEN locate('.', trim(substring(Th_raw, 1, locate('/', Th_raw) - 1))) > 0 THEN\n",
					"                        CAST(trim(substring(Th_raw, 1, locate('/', Th_raw) - 1)) AS DECIMAL(5,2))\n",
					"                    WHEN length(trim(substring(Th_raw, 1, locate('/', Th_raw) - 1))) <= 2 THEN\n",
					"                        CAST(trim(substring(Th_raw, 1, locate('/', Th_raw) - 1)) AS DECIMAL(5,2))\n",
					"                    WHEN length(trim(substring(Th_raw, 1, locate('/', Th_raw) - 1))) = 3 THEN\n",
					"                        CAST(substring(trim(substring(Th_raw, 1, locate('/', Th_raw) - 1)), 1, 1) AS DECIMAL(5,2)) + \n",
					"                        CAST(substring(trim(substring(Th_raw, 1, locate('/', Th_raw) - 1)), 2, 2) AS DECIMAL(5,2)) / 60\n",
					"                    ELSE CAST(trim(substring(Th_raw, 1, locate('/', Th_raw) - 1)) AS DECIMAL(5,2))\n",
					"                END +\n",
					"                CASE \n",
					"                    WHEN trim(substring(Th_raw, locate('/', Th_raw) + 1, length(Th_raw))) IN ('0', '-', '') THEN 0.0\n",
					"                    WHEN locate('.', trim(substring(Th_raw, locate('/', Th_raw) + 1, length(Th_raw)))) > 0 THEN\n",
					"                        CAST(trim(substring(Th_raw, locate('/', Th_raw) + 1, length(Th_raw))) AS DECIMAL(5,2))\n",
					"                    WHEN length(trim(substring(Th_raw, locate('/', Th_raw) + 1, length(Th_raw)))) <= 2 THEN\n",
					"                        CAST(trim(substring(Th_raw, locate('/', Th_raw) + 1, length(Th_raw))) AS DECIMAL(5,2))\n",
					"                    WHEN length(trim(substring(Th_raw, locate('/', Th_raw) + 1, length(Th_raw)))) = 3 THEN\n",
					"                        CAST(substring(trim(substring(Th_raw, locate('/', Th_raw) + 1, length(Th_raw))), 1, 1) AS DECIMAL(5,2)) + \n",
					"                        CAST(substring(trim(substring(Th_raw, locate('/', Th_raw) + 1, length(Th_raw))), 2, 2) AS DECIMAL(5,2)) / 60\n",
					"                    ELSE CAST(trim(substring(Th_raw, locate('/', Th_raw) + 1, length(Th_raw))) AS DECIMAL(5,2))\n",
					"                END\n",
					"            ) / 2\n",
					"            WHEN locate('.', Th_raw) > 0 THEN CAST(Th_raw AS DECIMAL(5,2))\n",
					"            ELSE \n",
					"                CASE \n",
					"                    WHEN length(Th_raw) <= 2 THEN CAST(Th_raw AS DECIMAL(5,2))\n",
					"                    WHEN length(Th_raw) = 3 THEN\n",
					"                        CAST(substring(Th_raw, 1, 1) AS DECIMAL(5,2)) + CAST(substring(Th_raw, 2, 2) AS DECIMAL(5,2)) / 60\n",
					"                    WHEN length(Th_raw) = 4 THEN\n",
					"                        CAST(substring(Th_raw, 1, 2) AS DECIMAL(5,2)) + CAST(substring(Th_raw, 3, 2) AS DECIMAL(5,2)) / 60\n",
					"                    ELSE CAST(Th_raw AS DECIMAL(5,2))\n",
					"                END\n",
					"        END AS Th,\n",
					"        \n",
					"        -- FRIDAY CONVERSION (with special cases)\n",
					"        CASE \n",
					"            WHEN WorkScheduleRule IN ('37hrsperweek', '37 hrs per week', 'Out of London - 37hr week') THEN 7.4\n",
					"            WHEN WorkScheduleRule LIKE 'Compressed%37%(F)%' OR WorkScheduleRule LIKE 'Compressed 37 (F)%' THEN 0.0\n",
					"            WHEN WorkScheduleRule LIKE 'Compressed%37%' OR WorkScheduleRule LIKE 'Compressed 37%' THEN 9.25\n",
					"            WHEN Fr_raw IS NULL OR Fr_raw = '' THEN 0.0\n",
					"            WHEN Fr_raw IN ('0', '-') THEN 0.0\n",
					"            WHEN Fr_raw = '724/0' THEN 3.4  -- Special case\n",
					"            WHEN Tu_raw LIKE '%-TH%' AND Fr_raw = '818' THEN 8.2  -- T-TH context\n",
					"            WHEN Tu_raw LIKE '%-T%' AND Fr_raw = '0/915' THEN 9.25  -- Special case for T-T pattern\n",
					"            WHEN locate('/', Fr_raw) > 0 THEN (\n",
					"                CASE \n",
					"                    WHEN trim(substring(Fr_raw, 1, locate('/', Fr_raw) - 1)) IN ('0', '-', '') THEN 0.0\n",
					"                    WHEN locate('.', trim(substring(Fr_raw, 1, locate('/', Fr_raw) - 1))) > 0 THEN\n",
					"                        CAST(trim(substring(Fr_raw, 1, locate('/', Fr_raw) - 1)) AS DECIMAL(5,2))\n",
					"                    WHEN length(trim(substring(Fr_raw, 1, locate('/', Fr_raw) - 1))) <= 2 THEN\n",
					"                        CAST(trim(substring(Fr_raw, 1, locate('/', Fr_raw) - 1)) AS DECIMAL(5,2))\n",
					"                    WHEN length(trim(substring(Fr_raw, 1, locate('/', Fr_raw) - 1))) = 3 THEN\n",
					"                        CAST(substring(trim(substring(Fr_raw, 1, locate('/', Fr_raw) - 1)), 1, 1) AS DECIMAL(5,2)) + \n",
					"                        CAST(substring(trim(substring(Fr_raw, 1, locate('/', Fr_raw) - 1)), 2, 2) AS DECIMAL(5,2)) / 60\n",
					"                    ELSE CAST(trim(substring(Fr_raw, 1, locate('/', Fr_raw) - 1)) AS DECIMAL(5,2))\n",
					"                END +\n",
					"                CASE \n",
					"                    WHEN trim(substring(Fr_raw, locate('/', Fr_raw) + 1, length(Fr_raw))) IN ('0', '-', '') THEN 0.0\n",
					"                    WHEN locate('.', trim(substring(Fr_raw, locate('/', Fr_raw) + 1, length(Fr_raw)))) > 0 THEN\n",
					"                        CAST(trim(substring(Fr_raw, locate('/', Fr_raw) + 1, length(Fr_raw))) AS DECIMAL(5,2))\n",
					"                    WHEN length(trim(substring(Fr_raw, locate('/', Fr_raw) + 1, length(Fr_raw)))) <= 2 THEN\n",
					"                        CAST(trim(substring(Fr_raw, locate('/', Fr_raw) + 1, length(Fr_raw))) AS DECIMAL(5,2))\n",
					"                    WHEN length(trim(substring(Fr_raw, locate('/', Fr_raw) + 1, length(Fr_raw)))) = 3 THEN\n",
					"                        CAST(substring(trim(substring(Fr_raw, locate('/', Fr_raw) + 1, length(Fr_raw))), 1, 1) AS DECIMAL(5,2)) + \n",
					"                        CAST(substring(trim(substring(Fr_raw, locate('/', Fr_raw) + 1, length(Fr_raw))), 2, 2) AS DECIMAL(5,2)) / 60\n",
					"                    ELSE CAST(trim(substring(Fr_raw, locate('/', Fr_raw) + 1, length(Fr_raw))) AS DECIMAL(5,2))\n",
					"                END\n",
					"            ) / 2\n",
					"            WHEN locate('.', Fr_raw) > 0 THEN CAST(Fr_raw AS DECIMAL(5,2))\n",
					"            ELSE \n",
					"                CASE \n",
					"                    WHEN length(Fr_raw) <= 2 THEN CAST(Fr_raw AS DECIMAL(5,2))\n",
					"                    WHEN length(Fr_raw) = 3 THEN\n",
					"                        CAST(substring(Fr_raw, 1, 1) AS DECIMAL(5,2)) + CAST(substring(Fr_raw, 2, 2) AS DECIMAL(5,2)) / 60\n",
					"                    WHEN length(Fr_raw) = 4 THEN\n",
					"                        CAST(substring(Fr_raw, 1, 2) AS DECIMAL(5,2)) + CAST(substring(Fr_raw, 3, 2) AS DECIMAL(5,2)) / 60\n",
					"                    ELSE CAST(Fr_raw AS DECIMAL(5,2))\n",
					"                END\n",
					"        END AS Fr\n",
					"    FROM TimeConverter\n",
					")\n",
					"\n",
					"-- Final output\n",
					"SELECT \n",
					"    WorkScheduleRule,\n",
					"    ROUND(COALESCE(Mo, 0.0), 2) AS Mo,\n",
					"    ROUND(COALESCE(Tu, 0.0), 2) AS Tu,\n",
					"    ROUND(COALESCE(We, 0.0), 2) AS We,\n",
					"    ROUND(COALESCE(Th, 0.0), 2) AS Th,\n",
					"    ROUND(COALESCE(Fr, 0.0), 2) AS Fr,\n",
					"    ROUND((COALESCE(Mo, 0.0) + COALESCE(Tu, 0.0) + COALESCE(We, 0.0) + COALESCE(Th, 0.0) + COALESCE(Fr, 0.0)), 2) AS WkHrs,\n",
					"    ROUND((COALESCE(Mo, 0.0) + COALESCE(Tu, 0.0) + COALESCE(We, 0.0) + COALESCE(Th, 0.0) + COALESCE(Fr, 0.0)), 2) AS MoTuWeThFr\n",
					"FROM ParsedSchedules\n",
					"---WHERE WorkScheduleRule   IN ( 'M724T724W724T724F724/0','M915/0T-T915F0/915','M930/530T930/530W745/745T530/915F515/9','M815T815W815T815F0/8','M813T813W813T813F816/0','M-T815W815/0T815F8/815',\n",
					"  -- 'M0/812T-TH812F818','M724T724W724T724F724/0'\n",
					"--    )\n",
					"ORDER BY WorkScheduleRule\n",
					"--LIMIT 50;"
				],
				"execution_count": 7
			},
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "sparksql"
					}
				},
				"source": [
					"%%sql\n",
					"\n",
					"\n",
					"WITH WorkScheduleBase AS (\n",
					"    -- Get unique work schedule rules with their metadata\n",
					"    SELECT DISTINCT\n",
					"        [Default Value] AS WorkScheduleRule,\n",
					"        [Average Hours Per Week] AS AvgWkHrs,\n",
					"        [Starting Date] AS WSRValidFrom,\n",
					"        [Country/Region.Country/Region Code (3 char)] AS CountryCode,\n",
					"        [Model] AS ScheduleModel\n",
					"    FROM standardised.dbo.wsrtable\n",
					"    WHERE [Default Value] IS NOT NULL\n",
					"),\n",
					"\n",
					"DaySchedules AS (\n",
					"    -- Get the planned hours for each day\n",
					"    SELECT \n",
					"        [Default Value] AS WorkScheduleRule,\n",
					"        [Day] AS DayNumber,\n",
					"        [Planned Hours And Minutes (hh:mm)] AS PlannedHours,\n",
					"        [Planned Hours (Decimal)] AS PlannedHoursDecimal\n",
					"    FROM standardised.dbo.wsrtable\n",
					"    WHERE [Default Value] IS NOT NULL \n",
					"      AND [Day] IS NOT NULL\n",
					"),\n",
					"\n",
					"-- Pivot the days into weekly columns\n",
					"PivotedSchedules AS (\n",
					"    SELECT \n",
					"        WorkScheduleRule,\n",
					"        -- Week 1 Days (Days 1-7)\n",
					"        MAX(CASE WHEN DayNumber = 1 THEN PlannedHours END) AS [Mo Wk1],\n",
					"        MAX(CASE WHEN DayNumber = 2 THEN PlannedHours END) AS [Tu Wk1],\n",
					"        MAX(CASE WHEN DayNumber = 3 THEN PlannedHours END) AS [We Wk1],\n",
					"        MAX(CASE WHEN DayNumber = 4 THEN PlannedHours END) AS [Th Wk1],\n",
					"        MAX(CASE WHEN DayNumber = 5 THEN PlannedHours END) AS [Fr Wk1],\n",
					"        MAX(CASE WHEN DayNumber = 6 THEN PlannedHours END) AS [Sat Wk1],\n",
					"        MAX(CASE WHEN DayNumber = 7 THEN PlannedHours END) AS [Sun Wk1],\n",
					"        \n",
					"        -- Week 2 Days (Days 8-14, fallback to Week 1 if not available)\n",
					"        COALESCE(\n",
					"            MAX(CASE WHEN DayNumber = 8 THEN PlannedHours END),\n",
					"            MAX(CASE WHEN DayNumber = 1 THEN PlannedHours END)\n",
					"        ) AS [Mo Wk2],\n",
					"        COALESCE(\n",
					"            MAX(CASE WHEN DayNumber = 9 THEN PlannedHours END),\n",
					"            MAX(CASE WHEN DayNumber = 2 THEN PlannedHours END)\n",
					"        ) AS [Tu Wk2],\n",
					"        COALESCE(\n",
					"            MAX(CASE WHEN DayNumber = 10 THEN PlannedHours END),\n",
					"            MAX(CASE WHEN DayNumber = 3 THEN PlannedHours END)\n",
					"        ) AS [We Wk2],\n",
					"        COALESCE(\n",
					"            MAX(CASE WHEN DayNumber = 11 THEN PlannedHours END),\n",
					"            MAX(CASE WHEN DayNumber = 4 THEN PlannedHours END)\n",
					"        ) AS [Th Wk2],\n",
					"        COALESCE(\n",
					"            MAX(CASE WHEN DayNumber = 12 THEN PlannedHours END),\n",
					"            MAX(CASE WHEN DayNumber = 5 THEN PlannedHours END)\n",
					"        ) AS [Fr Wk2],\n",
					"        COALESCE(\n",
					"            MAX(CASE WHEN DayNumber = 13 THEN PlannedHours END),\n",
					"            MAX(CASE WHEN DayNumber = 6 THEN PlannedHours END)\n",
					"        ) AS [Sat Wk2],\n",
					"        COALESCE(\n",
					"            MAX(CASE WHEN DayNumber = 14 THEN PlannedHours END),\n",
					"            MAX(CASE WHEN DayNumber = 7 THEN PlannedHours END)\n",
					"        ) AS [Sun Wk2],\n",
					"        \n",
					"        -- Calculate weekly hours using decimal values\n",
					"        SUM(CASE WHEN DayNumber BETWEEN 1 AND 7 THEN PlannedHoursDecimal ELSE 0 END) AS [Wk#Hrs# Wk1],\n",
					"        SUM(CASE WHEN DayNumber BETWEEN 8 AND 14 THEN PlannedHoursDecimal \n",
					"                 WHEN DayNumber BETWEEN 1 AND 7 AND MAX(CASE WHEN DayNumber = 8 THEN 1 ELSE 0 END) = 0 \n",
					"                 THEN PlannedHoursDecimal \n",
					"                 ELSE 0 END) AS [Wk#Hrs# Wk2]\n",
					"    FROM DaySchedules\n",
					"    GROUP BY WorkScheduleRule\n",
					")\n",
					"\n",
					"-- Final result with all required columns\n",
					"SELECT \n",
					"    ps.WorkScheduleRule AS [Work Schedule Rule],\n",
					"    ps.[Mo Wk1],\n",
					"    ps.[Tu Wk1],\n",
					"    ps.[We Wk1],\n",
					"    ps.[Th Wk1],\n",
					"    ps.[Fr Wk1],\n",
					"    ps.[Sat Wk1],\n",
					"    ps.[Sun Wk1],\n",
					"    ps.[Mo Wk2],\n",
					"    ps.[Tu Wk2],\n",
					"    ps.[We Wk2],\n",
					"    ps.[Th Wk2],\n",
					"    ps.[Fr Wk2],\n",
					"    ps.[Sat Wk2],\n",
					"    ps.[Sun Wk2],\n",
					"    ps.[Wk#Hrs# Wk1],\n",
					"    ps.[Wk#Hrs# Wk2],\n",
					"    wsb.AvgWkHrs AS [Avg Wk Hrs],\n",
					"    wsb.WSRValidFrom,\n",
					"    -- Add a current week indicator (1 or 2, you can modify this logic as needed)\n",
					"    CASE WHEN DATEPART(week, GETDATE()) % 2 = 1 THEN 1 ELSE 2 END AS CurrentWeek\n",
					"FROM PivotedSchedules ps\n",
					"INNER JOIN WorkScheduleBase wsb ON ps.WorkScheduleRule = wsb.WorkScheduleRule\n",
					"ORDER BY ps.WorkScheduleRule;"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"\n",
					"\n",
					"DELETE FROM odw_harmonised_db.sap_hr_workschedulerule;\n",
					"\n",
					"-- Insert transformed data using Spark SQL built-in functions\n",
					"INSERT INTO odw_harmonised_db.sap_hr_workschedulerule (\n",
					"    WorkScheduleRule,\n",
					"    WorkScheduleCode,\n",
					"    MoWk1, TuWk1, WeWk1, ThWk1, FrWk1,\n",
					"    MoWk2, TuWk2, WeWk2, ThWk2, FrWk2,\n",
					"    WkHrsWk1, WkHrsWk2,\n",
					"    AvgWkHrs,\n",
					"    WSRstart,\n",
					"    Currentweek,\n",
					"    Lastmodified,\n",
					"    IngestionDate\n",
					")\n",
					"WITH parsed_hours AS (\n",
					"    SELECT \n",
					"        wsr_name,\n",
					"        wsr_code,\n",
					"        wsr_description,\n",
					"        wsr_startdate,\n",
					"        wsr_lastmodified,\n",
					"        ingested_datetime,\n",
					"        \n",
					"        -- Extract Monday Week 1 hours using regexp_extract and case logic\n",
					"        CASE \n",
					"            WHEN regexp_extract(lower(wsr_description), 'week\\\\s*1.*?mon.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?', 1) != '' THEN\n",
					"                CAST(regexp_extract(lower(wsr_description), 'week\\\\s*1.*?mon.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?', 1) AS DOUBLE) +\n",
					"                COALESCE(CAST(regexp_extract(lower(wsr_description), 'week\\\\s*1.*?mon.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?', 2) AS DOUBLE), 0) / 60.0\n",
					"            WHEN regexp_extract(lower(wsr_description), 'mon.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?', 1) != '' \n",
					"                 AND lower(wsr_description) NOT RLIKE 'week\\\\s*2' THEN\n",
					"                CAST(regexp_extract(lower(wsr_description), 'mon.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?', 1) AS DOUBLE) +\n",
					"                COALESCE(CAST(regexp_extract(lower(wsr_description), 'mon.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?', 2) AS DOUBLE), 0) / 60.0\n",
					"            ELSE 0.0\n",
					"        END AS mo_wk1,\n",
					"        \n",
					"        -- Extract Tuesday Week 1 hours\n",
					"        CASE \n",
					"            WHEN regexp_extract(lower(wsr_description), 'week\\\\s*1.*?tu.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?', 1) != '' THEN\n",
					"                CAST(regexp_extract(lower(wsr_description), 'week\\\\s*1.*?tu.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?', 1) AS DOUBLE) +\n",
					"                COALESCE(CAST(regexp_extract(lower(wsr_description), 'week\\\\s*1.*?tu.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?', 2) AS DOUBLE), 0) / 60.0\n",
					"            WHEN regexp_extract(lower(wsr_description), 'tu.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?', 1) != '' \n",
					"                 AND lower(wsr_description) NOT RLIKE 'week\\\\s*2' THEN\n",
					"                CAST(regexp_extract(lower(wsr_description), 'tu.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?', 1) AS DOUBLE) +\n",
					"                COALESCE(CAST(regexp_extract(lower(wsr_description), 'tu.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?', 2) AS DOUBLE), 0) / 60.0\n",
					"            ELSE 0.0\n",
					"        END AS tu_wk1,\n",
					"        \n",
					"        -- Extract Wednesday Week 1 hours\n",
					"        CASE \n",
					"            WHEN regexp_extract(lower(wsr_description), 'week\\\\s*1.*?wed.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?', 1) != '' THEN\n",
					"                CAST(regexp_extract(lower(wsr_description), 'week\\\\s*1.*?wed.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?', 1) AS DOUBLE) +\n",
					"                COALESCE(CAST(regexp_extract(lower(wsr_description), 'week\\\\s*1.*?wed.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?', 2) AS DOUBLE), 0) / 60.0\n",
					"            WHEN regexp_extract(lower(wsr_description), 'wed.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?', 1) != '' \n",
					"                 AND lower(wsr_description) NOT RLIKE 'week\\\\s*2' THEN\n",
					"                CAST(regexp_extract(lower(wsr_description), 'wed.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?', 1) AS DOUBLE) +\n",
					"                COALESCE(CAST(regexp_extract(lower(wsr_description), 'wed.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?', 2) AS DOUBLE), 0) / 60.0\n",
					"            ELSE 0.0\n",
					"        END AS we_wk1,\n",
					"        \n",
					"        -- Extract Thursday Week 1 hours\n",
					"        CASE \n",
					"            WHEN regexp_extract(lower(wsr_description), 'week\\\\s*1.*?th.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?', 1) != '' THEN\n",
					"                CAST(regexp_extract(lower(wsr_description), 'week\\\\s*1.*?th.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?', 1) AS DOUBLE) +\n",
					"                COALESCE(CAST(regexp_extract(lower(wsr_description), 'week\\\\s*1.*?th.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?', 2) AS DOUBLE), 0) / 60.0\n",
					"            WHEN regexp_extract(lower(wsr_description), 'th.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?', 1) != '' \n",
					"                 AND lower(wsr_description) NOT RLIKE 'week\\\\s*2' THEN\n",
					"                CAST(regexp_extract(lower(wsr_description), 'th.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?', 1) AS DOUBLE) +\n",
					"                COALESCE(CAST(regexp_extract(lower(wsr_description), 'th.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?', 2) AS DOUBLE), 0) / 60.0\n",
					"            ELSE 0.0\n",
					"        END AS th_wk1,\n",
					"        \n",
					"        -- Extract Friday Week 1 hours\n",
					"        CASE \n",
					"            WHEN regexp_extract(lower(wsr_description), 'week\\\\s*1.*?fri.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?', 1) != '' THEN\n",
					"                CAST(regexp_extract(lower(wsr_description), 'week\\\\s*1.*?fri.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?', 1) AS DOUBLE) +\n",
					"                COALESCE(CAST(regexp_extract(lower(wsr_description), 'week\\\\s*1.*?fri.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?', 2) AS DOUBLE), 0) / 60.0\n",
					"            WHEN regexp_extract(lower(wsr_description), 'fri.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?', 1) != '' \n",
					"                 AND lower(wsr_description) NOT RLIKE 'week\\\\s*2' THEN\n",
					"                CAST(regexp_extract(lower(wsr_description), 'fri.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?', 1) AS DOUBLE) +\n",
					"                COALESCE(CAST(regexp_extract(lower(wsr_description), 'fri.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?', 2) AS DOUBLE), 0) / 60.0\n",
					"            ELSE 0.0\n",
					"        END AS fr_wk1,\n",
					"        \n",
					"        -- Extract Monday Week 2 hours (or repeat Week 1 if single week schedule)\n",
					"        CASE \n",
					"            WHEN regexp_extract(lower(wsr_description), 'week\\\\s*2.*?mon.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?', 1) != '' THEN\n",
					"                CAST(regexp_extract(lower(wsr_description), 'week\\\\s*2.*?mon.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?', 1) AS DOUBLE) +\n",
					"                COALESCE(CAST(regexp_extract(lower(wsr_description), 'week\\\\s*2.*?mon.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?', 2) AS DOUBLE), 0) / 60.0\n",
					"            WHEN lower(wsr_description) NOT RLIKE 'week\\\\s*2' \n",
					"                 AND regexp_extract(lower(wsr_description), 'mon.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?', 1) != '' THEN\n",
					"                CAST(regexp_extract(lower(wsr_description), 'mon.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?', 1) AS DOUBLE) +\n",
					"                COALESCE(CAST(regexp_extract(lower(wsr_description), 'mon.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?', 2) AS DOUBLE), 0) / 60.0\n",
					"            ELSE 0.0\n",
					"        END AS mo_wk2,\n",
					"        \n",
					"        -- Extract Tuesday Week 2 hours (or repeat Week 1)\n",
					"        CASE \n",
					"            WHEN regexp_extract(lower(wsr_description), 'week\\\\s*2.*?tu.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?', 1) != '' THEN\n",
					"                CAST(regexp_extract(lower(wsr_description), 'week\\\\s*2.*?tu.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?', 1) AS DOUBLE) +\n",
					"                COALESCE(CAST(regexp_extract(lower(wsr_description), 'week\\\\s*2.*?tu.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?', 2) AS DOUBLE), 0) / 60.0\n",
					"            WHEN lower(wsr_description) NOT RLIKE 'week\\\\s*2' \n",
					"                 AND regexp_extract(lower(wsr_description), 'tu.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?', 1) != '' THEN\n",
					"                CAST(regexp_extract(lower(wsr_description), 'tu.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?', 1) AS DOUBLE) +\n",
					"                COALESCE(CAST(regexp_extract(lower(wsr_description), 'tu.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?', 2) AS DOUBLE), 0) / 60.0\n",
					"            ELSE 0.0\n",
					"        END AS tu_wk2,\n",
					"        \n",
					"        -- Extract Wednesday Week 2 hours (or repeat Week 1)\n",
					"        CASE \n",
					"            WHEN regexp_extract(lower(wsr_description), 'week\\\\s*2.*?wed.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?', 1) != '' THEN\n",
					"                CAST(regexp_extract(lower(wsr_description), 'week\\\\s*2.*?wed.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?', 1) AS DOUBLE) +\n",
					"                COALESCE(CAST(regexp_extract(lower(wsr_description), 'week\\\\s*2.*?wed.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?', 2) AS DOUBLE), 0) / 60.0\n",
					"            WHEN lower(wsr_description) NOT RLIKE 'week\\\\s*2' \n",
					"                 AND regexp_extract(lower(wsr_description), 'wed.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?', 1) != '' THEN\n",
					"                CAST(regexp_extract(lower(wsr_description), 'wed.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?', 1) AS DOUBLE) +\n",
					"                COALESCE(CAST(regexp_extract(lower(wsr_description), 'wed.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?', 2) AS DOUBLE), 0) / 60.0\n",
					"            ELSE 0.0\n",
					"        END AS we_wk2,\n",
					"        \n",
					"        -- Extract Thursday Week 2 hours (or repeat Week 1)\n",
					"        CASE \n",
					"            WHEN regexp_extract(lower(wsr_description), 'week\\\\s*2.*?th.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?', 1) != '' THEN\n",
					"                CAST(regexp_extract(lower(wsr_description), 'week\\\\s*2.*?th.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?', 1) AS DOUBLE) +\n",
					"                COALESCE(CAST(regexp_extract(lower(wsr_description), 'week\\\\s*2.*?th.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?', 2) AS DOUBLE), 0) / 60.0\n",
					"            WHEN lower(wsr_description) NOT RLIKE 'week\\\\s*2' \n",
					"                 AND regexp_extract(lower(wsr_description), 'th.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?', 1) != '' THEN\n",
					"                CAST(regexp_extract(lower(wsr_description), 'th.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?', 1) AS DOUBLE) +\n",
					"                COALESCE(CAST(regexp_extract(lower(wsr_description), 'th.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?', 2) AS DOUBLE), 0) / 60.0\n",
					"            ELSE 0.0\n",
					"        END AS th_wk2,\n",
					"        \n",
					"        -- Extract Friday Week 2 hours (or repeat Week 1)\n",
					"        CASE \n",
					"            WHEN regexp_extract(lower(wsr_description), 'week\\\\s*2.*?fri.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?', 1) != '' THEN\n",
					"                CAST(regexp_extract(lower(wsr_description), 'week\\\\s*2.*?fri.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?', 1) AS DOUBLE) +\n",
					"                COALESCE(CAST(regexp_extract(lower(wsr_description), 'week\\\\s*2.*?fri.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?', 2) AS DOUBLE), 0) / 60.0\n",
					"            WHEN lower(wsr_description) NOT RLIKE 'week\\\\s*2' \n",
					"                 AND regexp_extract(lower(wsr_description), 'fri.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?', 1) != '' THEN\n",
					"                CAST(regexp_extract(lower(wsr_description), 'fri.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?', 1) AS DOUBLE) +\n",
					"                COALESCE(CAST(regexp_extract(lower(wsr_description), 'fri.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?', 2) AS DOUBLE), 0) / 60.0\n",
					"            ELSE 0.0\n",
					"        END AS fr_wk2\n",
					"        \n",
					"    FROM odw_standardised_db.workschedulerule_weekly\n",
					")\n",
					"\n",
					"SELECT \n",
					"    -- Direct field mappings\n",
					"    wsr_name AS WorkScheduleRule,\n",
					"    wsr_code AS WorkScheduleCode,\n",
					"    \n",
					"    -- Parsed daily hours\n",
					"    ROUND(mo_wk1, 2) AS MoWk1,\n",
					"    ROUND(tu_wk1, 2) AS TuWk1,\n",
					"    ROUND(we_wk1, 2) AS WeWk1,\n",
					"    ROUND(th_wk1, 2) AS ThWk1,\n",
					"    ROUND(fr_wk1, 2) AS FrWk1,\n",
					"    ROUND(mo_wk2, 2) AS MoWk2,\n",
					"    ROUND(tu_wk2, 2) AS TuWk2,\n",
					"    ROUND(we_wk2, 2) AS WeWk2,\n",
					"    ROUND(th_wk2, 2) AS ThWk2,\n",
					"    ROUND(fr_wk2, 2) AS FrWk2,\n",
					"    \n",
					"    -- Calculate weekly totals\n",
					"    ROUND(mo_wk1 + tu_wk1 + we_wk1 + th_wk1 + fr_wk1, 2) AS WkHrsWk1,\n",
					"    ROUND(mo_wk2 + tu_wk2 + we_wk2 + th_wk2 + fr_wk2, 2) AS WkHrsWk2,\n",
					"    \n",
					"    -- Extract average weekly hours from wsr_code (e.g., \"37.00AU\" -> 37.00)\n",
					"    ROUND(\n",
					"        CAST(\n",
					"            COALESCE(\n",
					"                regexp_extract(wsr_code, '^(\\\\d+\\\\.?\\\\d*)[A-Z]*.*$', 1), \n",
					"                '0'\n",
					"            ) AS DOUBLE\n",
					"        ), 2\n",
					"    ) AS AvgWkHrs,\n",
					"    \n",
					"    -- Date conversion - handle different date formats\n",
					"    CASE \n",
					"        WHEN wsr_startdate IS NOT NULL THEN\n",
					"            TRY_CAST(wsr_startdate AS DATE)\n",
					"        ELSE NULL\n",
					"    END AS WSRstart,\n",
					"    \n",
					"    -- Calculate current week (1 or 2) based on start date\n",
					"    CASE \n",
					"        WHEN wsr_startdate IS NOT NULL THEN\n",
					"            CASE \n",
					"                WHEN ((datediff(current_date(), TRY_CAST(wsr_startdate AS DATE)) / 7) % 2) = 0 THEN 1 \n",
					"                ELSE 2 \n",
					"            END\n",
					"        ELSE 1\n",
					"    END AS Currentweek,\n",
					"    \n",
					"    -- Last modified timestamp - handle DD/MM/YYYY format\n",
					"    CASE \n",
					"        WHEN wsr_lastmodified IS NOT NULL THEN\n",
					"            TRY_CAST(\n",
					"                CASE \n",
					"                    WHEN wsr_lastmodified RLIKE '^\\\\d{2}/\\\\d{2}/\\\\d{4}' THEN\n",
					"                        -- Convert DD/MM/YYYY to YYYY-MM-DD format\n",
					"                        CONCAT(\n",
					"                            SUBSTR(wsr_lastmodified, 7, 4), '-',\n",
					"                            SUBSTR(wsr_lastmodified, 4, 2), '-',\n",
					"                            SUBSTR(wsr_lastmodified, 1, 2)\n",
					"                        )\n",
					"                    ELSE wsr_lastmodified\n",
					"                END AS TIMESTAMP\n",
					"            )\n",
					"        ELSE NULL\n",
					"    END AS Lastmodified,\n",
					"    \n",
					"    -- Ingestion timestamp - handle safely\n",
					"    CASE \n",
					"        WHEN ingested_datetime IS NOT NULL THEN\n",
					"            TRY_CAST(ingested_datetime AS TIMESTAMP)\n",
					"        ELSE current_timestamp()\n",
					"    END AS IngestionDate\n",
					"\n",
					"FROM parsed_hours;"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"\n",
					"\n",
					"\n",
					"DELETE FROM odw_harmonised_db.sap_hr_workschedulerule;\n",
					"\n",
					"INSERT INTO odw_harmonised_db.sap_hr_workschedulerule (\n",
					"    WorkScheduleRule,\n",
					"    WorkScheduleCode,\n",
					"    MoWk1, TuWk1, WeWk1, ThWk1, FrWk1,\n",
					"    MoWk2, TuWk2, WeWk2, ThWk2, FrWk2,\n",
					"    WkHrsWk1, WkHrsWk2,\n",
					"    AvgWkHrs,\n",
					"    WSRstart,\n",
					"    Currentweek,\n",
					"    Lastmodified,\n",
					"    IngestionDate\n",
					")\n",
					"WITH normalized_data AS (\n",
					"    SELECT \n",
					"        wsr_name,\n",
					"        wsr_code,\n",
					"        wsr_description,\n",
					"        wsr_startdate,\n",
					"        wsr_lastmodified,\n",
					"        ingested_datetime,\n",
					"        \n",
					"        -- Normalize and clean description\n",
					"        regexp_replace(\n",
					"            regexp_replace(\n",
					"                regexp_replace(\n",
					"                    regexp_replace(\n",
					"                        regexp_replace(lower(wsr_description), \n",
					"                            'monday|mon\\\\.?', 'mon'),\n",
					"                        'tuesday|tue\\\\.?', 'tue'),\n",
					"                    'wednesday|wed\\\\.?', 'wed'),\n",
					"                'thursday|thu\\\\.?|thus', 'thu'),\n",
					"            'friday|fri\\\\.?', 'fri'\n",
					"        ) AS clean_desc,\n",
					"        \n",
					"        -- Extract week 1 and week 2 sections\n",
					"        CASE \n",
					"            WHEN locate('week 2', lower(wsr_description)) > 0 THEN\n",
					"                trim(substring(lower(wsr_description), 1, locate('week 2', lower(wsr_description)) - 1))\n",
					"            WHEN locate('wk 2', lower(wsr_description)) > 0 THEN\n",
					"                trim(substring(lower(wsr_description), 1, locate('wk 2', lower(wsr_description)) - 1))\n",
					"            ELSE lower(wsr_description)\n",
					"        END AS week1_section,\n",
					"        \n",
					"        CASE \n",
					"            WHEN locate('week 2', lower(wsr_description)) > 0 THEN\n",
					"                trim(substring(lower(wsr_description), locate('week 2', lower(wsr_description))))\n",
					"            WHEN locate('wk 2', lower(wsr_description)) > 0 THEN\n",
					"                trim(substring(lower(wsr_description), locate('wk 2', lower(wsr_description))))\n",
					"            ELSE lower(wsr_description)\n",
					"        END AS week2_section\n",
					"        \n",
					"    FROM odw_standardised_db.workschedulerule_weekly\n",
					"),\n",
					"\n",
					"parsed_hours AS (\n",
					"    SELECT \n",
					"        wsr_name,\n",
					"        wsr_code,\n",
					"        wsr_description,\n",
					"        wsr_startdate,\n",
					"        wsr_lastmodified,\n",
					"        ingested_datetime,\n",
					"        clean_desc,\n",
					"        week1_section,\n",
					"        week2_section,\n",
					"        \n",
					"        -- Parse Monday Week 1\n",
					"        CASE \n",
					"            -- Handle \"mon-thu\" or \"mon-fri\" ranges\n",
					"            WHEN week1_section RLIKE 'mon-thu.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?\\\\s*min' THEN\n",
					"                CAST(regexp_extract(week1_section, 'mon-thu.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?\\\\s*min', 1) AS DOUBLE) +\n",
					"                COALESCE(CAST(regexp_extract(week1_section, 'mon-thu.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?\\\\s*min', 2) AS DOUBLE), 0) / 60.0\n",
					"            WHEN week1_section RLIKE 'mon-fri.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?\\\\s*min' THEN\n",
					"                CAST(regexp_extract(week1_section, 'mon-fri.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?\\\\s*min', 1) AS DOUBLE) +\n",
					"                COALESCE(CAST(regexp_extract(week1_section, 'mon-fri.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?\\\\s*min', 2) AS DOUBLE), 0) / 60.0\n",
					"            WHEN week1_section RLIKE 'mon-wed.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?\\\\s*min' THEN\n",
					"                CAST(regexp_extract(week1_section, 'mon-wed.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?\\\\s*min', 1) AS DOUBLE) +\n",
					"                COALESCE(CAST(regexp_extract(week1_section, 'mon-wed.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?\\\\s*min', 2) AS DOUBLE), 0) / 60.0\n",
					"            -- Handle individual \"monday\" mentions\n",
					"            WHEN week1_section RLIKE 'monday.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?\\\\s*min' THEN\n",
					"                CAST(regexp_extract(week1_section, 'monday.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?\\\\s*min', 1) AS DOUBLE) +\n",
					"                COALESCE(CAST(regexp_extract(week1_section, 'monday.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?\\\\s*min', 2) AS DOUBLE), 0) / 60.0\n",
					"            WHEN week1_section RLIKE 'mon.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?\\\\s*min' THEN\n",
					"                CAST(regexp_extract(week1_section, 'mon.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?\\\\s*min', 1) AS DOUBLE) +\n",
					"                COALESCE(CAST(regexp_extract(week1_section, 'mon.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?\\\\s*min', 2) AS DOUBLE), 0) / 60.0\n",
					"            -- Handle hours without minutes\n",
					"            WHEN week1_section RLIKE 'mon-thu.*?(\\\\d+)\\\\s*hours?' THEN\n",
					"                CAST(regexp_extract(week1_section, 'mon-thu.*?(\\\\d+)\\\\s*hours?', 1) AS DOUBLE)\n",
					"            WHEN week1_section RLIKE 'mon-fri.*?(\\\\d+)\\\\s*hours?' THEN\n",
					"                CAST(regexp_extract(week1_section, 'mon-fri.*?(\\\\d+)\\\\s*hours?', 1) AS DOUBLE)\n",
					"            WHEN week1_section RLIKE 'monday.*?(\\\\d+)\\\\s*hours?' THEN\n",
					"                CAST(regexp_extract(week1_section, 'monday.*?(\\\\d+)\\\\s*hours?', 1) AS DOUBLE)\n",
					"            WHEN week1_section RLIKE 'mon.*?(\\\\d+)\\\\s*hours?' THEN\n",
					"                CAST(regexp_extract(week1_section, 'mon.*?(\\\\d+)\\\\s*hours?', 1) AS DOUBLE)\n",
					"            ELSE 0.0\n",
					"        END AS mo_wk1,\n",
					"        \n",
					"        -- Parse Tuesday Week 1\n",
					"        CASE \n",
					"            -- Handle ranges that include Tuesday\n",
					"            WHEN week1_section RLIKE 'tue-thu.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?\\\\s*min' OR \n",
					"                 week1_section RLIKE 'mon-thu.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?\\\\s*min' OR\n",
					"                 week1_section RLIKE 'tue-fri.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?\\\\s*min' OR\n",
					"                 week1_section RLIKE 'mon-fri.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?\\\\s*min' THEN\n",
					"                CASE \n",
					"                    WHEN week1_section RLIKE 'tue-thu.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?\\\\s*min' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'tue-thu.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?\\\\s*min', 1) AS DOUBLE) +\n",
					"                        COALESCE(CAST(regexp_extract(week1_section, 'tue-thu.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?\\\\s*min', 2) AS DOUBLE), 0) / 60.0\n",
					"                    WHEN week1_section RLIKE 'mon-thu.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?\\\\s*min' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'mon-thu.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?\\\\s*min', 1) AS DOUBLE) +\n",
					"                        COALESCE(CAST(regexp_extract(week1_section, 'mon-thu.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?\\\\s*min', 2) AS DOUBLE), 0) / 60.0\n",
					"                    WHEN week1_section RLIKE 'tue-fri.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?\\\\s*min' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'tue-fri.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?\\\\s*min', 1) AS DOUBLE) +\n",
					"                        COALESCE(CAST(regexp_extract(week1_section, 'tue-fri.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?\\\\s*min', 2) AS DOUBLE), 0) / 60.0\n",
					"                    ELSE\n",
					"                        CAST(regexp_extract(week1_section, 'mon-fri.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?\\\\s*min', 1) AS DOUBLE) +\n",
					"                        COALESCE(CAST(regexp_extract(week1_section, 'mon-fri.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?\\\\s*min', 2) AS DOUBLE), 0) / 60.0\n",
					"                END\n",
					"            -- Handle individual Tuesday mentions\n",
					"            WHEN week1_section RLIKE 'tuesday.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?\\\\s*min' THEN\n",
					"                CAST(regexp_extract(week1_section, 'tuesday.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?\\\\s*min', 1) AS DOUBLE) +\n",
					"                COALESCE(CAST(regexp_extract(week1_section, 'tuesday.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?\\\\s*min', 2) AS DOUBLE), 0) / 60.0\n",
					"            WHEN week1_section RLIKE 'tue.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?\\\\s*min' THEN\n",
					"                CAST(regexp_extract(week1_section, 'tue.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?\\\\s*min', 1) AS DOUBLE) +\n",
					"                COALESCE(CAST(regexp_extract(week1_section, 'tue.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?\\\\s*min', 2) AS DOUBLE), 0) / 60.0\n",
					"            -- Handle hours without minutes\n",
					"            WHEN week1_section RLIKE 'tue-thu.*?(\\\\d+)\\\\s*hours?' OR\n",
					"                 week1_section RLIKE 'mon-thu.*?(\\\\d+)\\\\s*hours?' OR\n",
					"                 week1_section RLIKE 'tue-fri.*?(\\\\d+)\\\\s*hours?' OR\n",
					"                 week1_section RLIKE 'mon-fri.*?(\\\\d+)\\\\s*hours?' THEN\n",
					"                CASE \n",
					"                    WHEN week1_section RLIKE 'tue-thu.*?(\\\\d+)\\\\s*hours?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'tue-thu.*?(\\\\d+)\\\\s*hours?', 1) AS DOUBLE)\n",
					"                    WHEN week1_section RLIKE 'mon-thu.*?(\\\\d+)\\\\s*hours?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'mon-thu.*?(\\\\d+)\\\\s*hours?', 1) AS DOUBLE)\n",
					"                    WHEN week1_section RLIKE 'tue-fri.*?(\\\\d+)\\\\s*hours?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'tue-fri.*?(\\\\d+)\\\\s*hours?', 1) AS DOUBLE)\n",
					"                    ELSE\n",
					"                        CAST(regexp_extract(week1_section, 'mon-fri.*?(\\\\d+)\\\\s*hours?', 1) AS DOUBLE)\n",
					"                END\n",
					"            WHEN week1_section RLIKE 'tuesday.*?(\\\\d+)\\\\s*hours?' THEN\n",
					"                CAST(regexp_extract(week1_section, 'tuesday.*?(\\\\d+)\\\\s*hours?', 1) AS DOUBLE)\n",
					"            WHEN week1_section RLIKE 'tue.*?(\\\\d+)\\\\s*hours?' THEN\n",
					"                CAST(regexp_extract(week1_section, 'tue.*?(\\\\d+)\\\\s*hours?', 1) AS DOUBLE)\n",
					"            ELSE 0.0\n",
					"        END AS tu_wk1,\n",
					"        \n",
					"        -- Parse Wednesday Week 1 (similar pattern)\n",
					"        CASE \n",
					"            WHEN week1_section RLIKE 'wed-fri.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?\\\\s*min' OR\n",
					"                 week1_section RLIKE 'mon-wed.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?\\\\s*min' OR\n",
					"                 week1_section RLIKE 'tue-thu.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?\\\\s*min' OR\n",
					"                 week1_section RLIKE 'mon-thu.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?\\\\s*min' OR\n",
					"                 week1_section RLIKE 'mon-fri.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?\\\\s*min' THEN\n",
					"                CASE \n",
					"                    WHEN week1_section RLIKE 'wed-fri.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?\\\\s*min' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'wed-fri.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?\\\\s*min', 1) AS DOUBLE) +\n",
					"                        COALESCE(CAST(regexp_extract(week1_section, 'wed-fri.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?\\\\s*min', 2) AS DOUBLE), 0) / 60.0\n",
					"                    WHEN week1_section RLIKE 'mon-wed.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?\\\\s*min' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'mon-wed.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?\\\\s*min', 1) AS DOUBLE) +\n",
					"                        COALESCE(CAST(regexp_extract(week1_section, 'mon-wed.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?\\\\s*min', 2) AS DOUBLE), 0) / 60.0\n",
					"                    WHEN week1_section RLIKE 'tue-thu.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?\\\\s*min' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'tue-thu.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?\\\\s*min', 1) AS DOUBLE) +\n",
					"                        COALESCE(CAST(regexp_extract(week1_section, 'tue-thu.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?\\\\s*min', 2) AS DOUBLE), 0) / 60.0\n",
					"                    WHEN week1_section RLIKE 'mon-thu.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?\\\\s*min' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'mon-thu.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?\\\\s*min', 1) AS DOUBLE) +\n",
					"                        COALESCE(CAST(regexp_extract(week1_section, 'mon-thu.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?\\\\s*min', 2) AS DOUBLE), 0) / 60.0\n",
					"                    ELSE\n",
					"                        CAST(regexp_extract(week1_section, 'mon-fri.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?\\\\s*min', 1) AS DOUBLE) +\n",
					"                        COALESCE(CAST(regexp_extract(week1_section, 'mon-fri.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?\\\\s*min', 2) AS DOUBLE), 0) / 60.0\n",
					"                END\n",
					"            WHEN week1_section RLIKE 'wednesday.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?\\\\s*min' THEN\n",
					"                CAST(regexp_extract(week1_section, 'wednesday.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?\\\\s*min', 1) AS DOUBLE) +\n",
					"                COALESCE(CAST(regexp_extract(week1_section, 'wednesday.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?\\\\s*min', 2) AS DOUBLE), 0) / 60.0\n",
					"            WHEN week1_section RLIKE 'wed.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?\\\\s*min' THEN\n",
					"                CAST(regexp_extract(week1_section, 'wed.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?\\\\s*min', 1) AS DOUBLE) +\n",
					"                COALESCE(CAST(regexp_extract(week1_section, 'wed.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?\\\\s*min', 2) AS DOUBLE), 0) / 60.0\n",
					"            -- Handle hours without minutes\n",
					"            WHEN week1_section RLIKE 'wed-fri.*?(\\\\d+)\\\\s*hours?' OR\n",
					"                 week1_section RLIKE 'mon-wed.*?(\\\\d+)\\\\s*hours?' OR\n",
					"                 week1_section RLIKE 'tue-thu.*?(\\\\d+)\\\\s*hours?' OR\n",
					"                 week1_section RLIKE 'mon-thu.*?(\\\\d+)\\\\s*hours?' OR\n",
					"                 week1_section RLIKE 'mon-fri.*?(\\\\d+)\\\\s*hours?' THEN\n",
					"                CASE \n",
					"                    WHEN week1_section RLIKE 'wed-fri.*?(\\\\d+)\\\\s*hours?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'wed-fri.*?(\\\\d+)\\\\s*hours?', 1) AS DOUBLE)\n",
					"                    WHEN week1_section RLIKE 'mon-wed.*?(\\\\d+)\\\\s*hours?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'mon-wed.*?(\\\\d+)\\\\s*hours?', 1) AS DOUBLE)\n",
					"                    WHEN week1_section RLIKE 'tue-thu.*?(\\\\d+)\\\\s*hours?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'tue-thu.*?(\\\\d+)\\\\s*hours?', 1) AS DOUBLE)\n",
					"                    WHEN week1_section RLIKE 'mon-thu.*?(\\\\d+)\\\\s*hours?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'mon-thu.*?(\\\\d+)\\\\s*hours?', 1) AS DOUBLE)\n",
					"                    ELSE\n",
					"                        CAST(regexp_extract(week1_section, 'mon-fri.*?(\\\\d+)\\\\s*hours?', 1) AS DOUBLE)\n",
					"                END\n",
					"            WHEN week1_section RLIKE 'wednesday.*?(\\\\d+)\\\\s*hours?' THEN\n",
					"                CAST(regexp_extract(week1_section, 'wednesday.*?(\\\\d+)\\\\s*hours?', 1) AS DOUBLE)\n",
					"            WHEN week1_section RLIKE 'wed.*?(\\\\d+)\\\\s*hours?' THEN\n",
					"                CAST(regexp_extract(week1_section, 'wed.*?(\\\\d+)\\\\s*hours?', 1) AS DOUBLE)\n",
					"            ELSE 0.0\n",
					"        END AS we_wk1,\n",
					"        \n",
					"        -- Parse Thursday Week 1\n",
					"        CASE \n",
					"            WHEN week1_section RLIKE 'thu-fri.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?\\\\s*min' OR\n",
					"                 week1_section RLIKE 'tue-thu.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?\\\\s*min' OR\n",
					"                 week1_section RLIKE 'mon-thu.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?\\\\s*min' OR\n",
					"                 week1_section RLIKE 'mon-fri.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?\\\\s*min' THEN\n",
					"                CASE \n",
					"                    WHEN week1_section RLIKE 'thu-fri.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?\\\\s*min' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'thu-fri.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?\\\\s*min', 1) AS DOUBLE) +\n",
					"                        COALESCE(CAST(regexp_extract(week1_section, 'thu-fri.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?\\\\s*min', 2) AS DOUBLE), 0) / 60.0\n",
					"                    WHEN week1_section RLIKE 'tue-thu.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?\\\\s*min' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'tue-thu.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?\\\\s*min', 1) AS DOUBLE) +\n",
					"                        COALESCE(CAST(regexp_extract(week1_section, 'tue-thu.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?\\\\s*min', 2) AS DOUBLE), 0) / 60.0\n",
					"                    WHEN week1_section RLIKE 'mon-thu.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?\\\\s*min' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'mon-thu.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?\\\\s*min', 1) AS DOUBLE) +\n",
					"                        COALESCE(CAST(regexp_extract(week1_section, 'mon-thu.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?\\\\s*min', 2) AS DOUBLE), 0) / 60.0\n",
					"                    ELSE\n",
					"                        CAST(regexp_extract(week1_section, 'mon-fri.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?\\\\s*min', 1) AS DOUBLE) +\n",
					"                        COALESCE(CAST(regexp_extract(week1_section, 'mon-fri.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?\\\\s*min', 2) AS DOUBLE), 0) / 60.0\n",
					"                END\n",
					"            WHEN week1_section RLIKE 'thursday.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?\\\\s*min' THEN\n",
					"                CAST(regexp_extract(week1_section, 'thursday.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?\\\\s*min', 1) AS DOUBLE) +\n",
					"                COALESCE(CAST(regexp_extract(week1_section, 'thursday.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?\\\\s*min', 2) AS DOUBLE), 0) / 60.0\n",
					"            WHEN week1_section RLIKE 'thu.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?\\\\s*min' THEN\n",
					"                CAST(regexp_extract(week1_section, 'thu.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?\\\\s*min', 1) AS DOUBLE) +\n",
					"                COALESCE(CAST(regexp_extract(week1_section, 'thu.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?\\\\s*min', 2) AS DOUBLE), 0) / 60.0\n",
					"            -- Handle hours without minutes\n",
					"            WHEN week1_section RLIKE 'thu-fri.*?(\\\\d+)\\\\s*hours?' OR\n",
					"                 week1_section RLIKE 'tue-thu.*?(\\\\d+)\\\\s*hours?' OR\n",
					"                 week1_section RLIKE 'mon-thu.*?(\\\\d+)\\\\s*hours?' OR\n",
					"                 week1_section RLIKE 'mon-fri.*?(\\\\d+)\\\\s*hours?' THEN\n",
					"                CASE \n",
					"                    WHEN week1_section RLIKE 'thu-fri.*?(\\\\d+)\\\\s*hours?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'thu-fri.*?(\\\\d+)\\\\s*hours?', 1) AS DOUBLE)\n",
					"                    WHEN week1_section RLIKE 'tue-thu.*?(\\\\d+)\\\\s*hours?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'tue-thu.*?(\\\\d+)\\\\s*hours?', 1) AS DOUBLE)\n",
					"                    WHEN week1_section RLIKE 'mon-thu.*?(\\\\d+)\\\\s*hours?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'mon-thu.*?(\\\\d+)\\\\s*hours?', 1) AS DOUBLE)\n",
					"                    ELSE\n",
					"                        CAST(regexp_extract(week1_section, 'mon-fri.*?(\\\\d+)\\\\s*hours?', 1) AS DOUBLE)\n",
					"                END\n",
					"            WHEN week1_section RLIKE 'thursday.*?(\\\\d+)\\\\s*hours?' THEN\n",
					"                CAST(regexp_extract(week1_section, 'thursday.*?(\\\\d+)\\\\s*hours?', 1) AS DOUBLE)\n",
					"            WHEN week1_section RLIKE 'thu.*?(\\\\d+)\\\\s*hours?' THEN\n",
					"                CAST(regexp_extract(week1_section, 'thu.*?(\\\\d+)\\\\s*hours?', 1) AS DOUBLE)\n",
					"            ELSE 0.0\n",
					"        END AS th_wk1,\n",
					"        \n",
					"        -- Parse Friday Week 1\n",
					"        CASE \n",
					"            WHEN week1_section RLIKE 'fri.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?\\\\s*min' OR\n",
					"                 week1_section RLIKE 'friday.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?\\\\s*min' OR\n",
					"                 week1_section RLIKE 'mon-fri.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?\\\\s*min' OR\n",
					"                 week1_section RLIKE 'thu-fri.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?\\\\s*min' THEN\n",
					"                CASE \n",
					"                    WHEN week1_section RLIKE 'friday.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?\\\\s*min' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'friday.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?\\\\s*min', 1) AS DOUBLE) +\n",
					"                        COALESCE(CAST(regexp_extract(week1_section, 'friday.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?\\\\s*min', 2) AS DOUBLE), 0) / 60.0\n",
					"                    WHEN week1_section RLIKE 'fri.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?\\\\s*min' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'fri.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?\\\\s*min', 1) AS DOUBLE) +\n",
					"                        COALESCE(CAST(regexp_extract(week1_section, 'fri.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?\\\\s*min', 2) AS DOUBLE), 0) / 60.0\n",
					"                    WHEN week1_section RLIKE 'thu-fri.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?\\\\s*min' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'thu-fri.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?\\\\s*min', 1) AS DOUBLE) +\n",
					"                        COALESCE(CAST(regexp_extract(week1_section, 'thu-fri.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?\\\\s*min', 2) AS DOUBLE), 0) / 60.0\n",
					"                    ELSE\n",
					"                        CAST(regexp_extract(week1_section, 'mon-fri.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?\\\\s*min', 1) AS DOUBLE) +\n",
					"                        COALESCE(CAST(regexp_extract(week1_section, 'mon-fri.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?\\\\s*min', 2) AS DOUBLE), 0) / 60.0\n",
					"                END\n",
					"            -- Handle hours without minutes\n",
					"            WHEN week1_section RLIKE 'friday.*?(\\\\d+)\\\\s*hours?' THEN\n",
					"                CAST(regexp_extract(week1_section, 'friday.*?(\\\\d+)\\\\s*hours?', 1) AS DOUBLE)\n",
					"            WHEN week1_section RLIKE 'fri.*?(\\\\d+)\\\\s*hours?' THEN\n",
					"                CAST(regexp_extract(week1_section, 'fri.*?(\\\\d+)\\\\s*hours?', 1) AS DOUBLE)\n",
					"            WHEN week1_section RLIKE 'thu-fri.*?(\\\\d+)\\\\s*hours?' THEN\n",
					"                CAST(regexp_extract(week1_section, 'thu-fri.*?(\\\\d+)\\\\s*hours?', 1) AS DOUBLE)\n",
					"            WHEN week1_section RLIKE 'mon-fri.*?(\\\\d+)\\\\s*hours?' THEN\n",
					"                CAST(regexp_extract(week1_section, 'mon-fri.*?(\\\\d+)\\\\s*hours?', 1) AS DOUBLE)\n",
					"            ELSE 0.0\n",
					"        END AS fr_wk1,\n",
					"        \n",
					"        -- Parse Week 2 hours (similar logic but for week2_section)\n",
					"        -- For brevity, I'll include a simplified version - you can expand this similarly\n",
					"        CASE \n",
					"            WHEN week2_section RLIKE 'mon.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?\\\\s*min' THEN\n",
					"                CAST(regexp_extract(week2_section, 'mon.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?\\\\s*min', 1) AS DOUBLE) +\n",
					"                COALESCE(CAST(regexp_extract(week2_section, 'mon.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?\\\\s*min', 2) AS DOUBLE), 0) / 60.0\n",
					"            WHEN week2_section RLIKE 'mon.*?(\\\\d+)\\\\s*hours?' THEN\n",
					"                CAST(regexp_extract(week2_section, 'mon.*?(\\\\d+)\\\\s*hours?', 1) AS DOUBLE)\n",
					"            ELSE 0.0\n",
					"        END AS mo_wk2,\n",
					"        \n",
					"        CASE \n",
					"            WHEN week2_section RLIKE 'tue.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?\\\\s*min' THEN\n",
					"                CAST(regexp_extract(week2_section, 'tue.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?\\\\s*min', 1) AS DOUBLE) +\n",
					"                COALESCE(CAST(regexp_extract(week2_section, 'tue.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?\\\\s*min', 2) AS DOUBLE), 0) / 60.0\n",
					"            WHEN week2_section RLIKE 'tue.*?(\\\\d+)\\\\s*hours?' THEN\n",
					"                CAST(regexp_extract(week2_section, 'tue.*?(\\\\d+)\\\\s*hours?', 1) AS DOUBLE)\n",
					"            ELSE 0.0\n",
					"        END AS tu_wk2,\n",
					"        \n",
					"        CASE \n",
					"            WHEN week2_section RLIKE 'wed.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?\\\\s*min' THEN\n",
					"                CAST(regexp_extract(week2_section, 'wed.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?\\\\s*min', 1) AS DOUBLE) +\n",
					"                COALESCE(CAST(regexp_extract(week2_section, 'wed.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?\\\\s*min', 2) AS DOUBLE), 0) / 60.0\n",
					"            WHEN week2_section RLIKE 'wed.*?(\\\\d+)\\\\s*hours?' THEN\n",
					"                CAST(regexp_extract(week2_section, 'wed.*?(\\\\d+)\\\\s*hours?', 1) AS DOUBLE)\n",
					"            ELSE 0.0\n",
					"        END AS we_wk2,\n",
					"        \n",
					"        CASE \n",
					"            WHEN week2_section RLIKE 'thu.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?\\\\s*min' THEN\n",
					"                CAST(regexp_extract(week2_section, 'thu.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?\\\\s*min', 1) AS DOUBLE) +\n",
					"                COALESCE(CAST(regexp_extract(week2_section, 'thu.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?\\\\s*min', 2) AS DOUBLE), 0) / 60.0\n",
					"            WHEN week2_section RLIKE 'thu.*?(\\\\d+)\\\\s*hours?' THEN\n",
					"                CAST(regexp_extract(week2_section, 'thu.*?(\\\\d+)\\\\s*hours?', 1) AS DOUBLE)\n",
					"            ELSE 0.0\n",
					"        END AS th_wk2,\n",
					"        \n",
					"        CASE \n",
					"            WHEN week2_section RLIKE 'fri.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?\\\\s*min' THEN\n",
					"                CAST(regexp_extract(week2_section, 'fri.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?\\\\s*min', 1) AS DOUBLE) +\n",
					"                COALESCE(CAST(regexp_extract(week2_section, 'fri.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?\\\\s*min', 2) AS DOUBLE), 0) / 60.0\n",
					"            WHEN week2_section RLIKE 'fri.*?(\\\\d+)\\\\s*hours?' THEN\n",
					"                CAST(regexp_extract(week2_section, 'fri.*?(\\\\d+)\\\\s*hours?', 1) AS DOUBLE)\n",
					"            ELSE 0.0\n",
					"        END AS fr_wk2\n",
					"        \n",
					"    FROM normalized_data\n",
					")\n",
					"\n",
					"SELECT \n",
					"    -- Direct field mappings\n",
					"    wsr_name AS WorkScheduleRule,\n",
					"    wsr_code AS WorkScheduleCode,\n",
					"    \n",
					"    -- Parsed daily hours\n",
					"    ROUND(mo_wk1, 2) AS MoWk1,\n",
					"    ROUND(tu_wk1, 2) AS TuWk1,\n",
					"    ROUND(we_wk1, 2) AS WeWk1,\n",
					"    ROUND(th_wk1, 2) AS ThWk1,\n",
					"    ROUND(fr_wk1, 2) AS FrWk1,\n",
					"    ROUND(mo_wk2, 2) AS MoWk2,\n",
					"    ROUND(tu_wk2, 2) AS TuWk2,\n",
					"    ROUND(we_wk2, 2) AS WeWk2,\n",
					"    ROUND(th_wk2, 2) AS ThWk2,\n",
					"    ROUND(fr_wk2, 2) AS FrWk2,\n",
					"    \n",
					"    -- Calculate weekly totals\n",
					"    ROUND(mo_wk1 + tu_wk1 + we_wk1 + th_wk1 + fr_wk1, 2) AS WkHrsWk1,\n",
					"    ROUND(mo_wk2 + tu_wk2 + we_wk2 + th_wk2 + fr_wk2, 2) AS WkHrsWk2,\n",
					"    \n",
					"    -- Calculate average weekly hours\n",
					"    ROUND((mo_wk1 + tu_wk1 + we_wk1 + th_wk1 + fr_wk1 + mo_wk2 + tu_wk2 + we_wk2 + th_wk2 + fr_wk2) / 2, 2) AS AvgWkHrs,\n",
					"    \n",
					"    -- Date conversion\n",
					"    CASE \n",
					"        WHEN wsr_startdate IS NOT NULL THEN\n",
					"            TRY_CAST(wsr_startdate AS DATE)\n",
					"        ELSE NULL\n",
					"    END AS WSRstart,\n",
					"    \n",
					"    -- Calculate current week\n",
					"    CASE \n",
					"        WHEN wsr_startdate IS NOT NULL THEN\n",
					"            CASE \n",
					"                WHEN ((datediff(current_date(), TRY_CAST(wsr_startdate AS DATE)) / 7) % 2) = 0 THEN 1 \n",
					"                ELSE 2 \n",
					"            END\n",
					"        ELSE 1\n",
					"    END AS Currentweek,\n",
					"    \n",
					"    -- Last modified timestamp\n",
					"    CASE \n",
					"        WHEN wsr_lastmodified IS NOT NULL THEN\n",
					"            TRY_CAST(\n",
					"                CASE \n",
					"                    WHEN wsr_lastmodified RLIKE '^\\\\d{2}/\\\\d{2}/\\\\d{4}' THEN\n",
					"                        CONCAT(\n",
					"                            SUBSTR(wsr_lastmodified, 7, 4), '-',\n",
					"                            SUBSTR(wsr_lastmodified, 4, 2), '-',\n",
					"                            SUBSTR(wsr_lastmodified, 1, 2)\n",
					"                        )\n",
					"                    ELSE wsr_lastmodified\n",
					"                END AS TIMESTAMP\n",
					"            )\n",
					"        ELSE NULL\n",
					"    END AS Lastmodified,\n",
					"    \n",
					"    -- Ingestion timestamp\n",
					"    CASE \n",
					"        WHEN ingested_datetime IS NOT NULL THEN\n",
					"            TRY_CAST(ingested_datetime AS TIMESTAMP)\n",
					"        ELSE current_timestamp()\n",
					"    END AS IngestionDate\n",
					"\n",
					"FROM parsed_hours;"
				],
				"execution_count": 2
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Original"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"\n",
					"\n",
					"-- Improved Work Schedule Parser for SAP HR Data\n",
					"-- Handles complex patterns like \"Mon-Thurs 8 hours 15 minutes\", day ranges, and week variations\n",
					"\n",
					"DELETE FROM odw_harmonised_db.sap_hr_workschedulerule;\n",
					"\n",
					"INSERT INTO odw_harmonised_db.sap_hr_workschedulerule (\n",
					"    WorkScheduleRule,\n",
					"    WorkScheduleCode,\n",
					"    MoWk1, TuWk1, WeWk1, ThWk1, FrWk1,\n",
					"    MoWk2, TuWk2, WeWk2, ThWk2, FrWk2,\n",
					"    WkHrsWk1, WkHrsWk2,\n",
					"    AvgWkHrs,\n",
					"    WSRstart,\n",
					"    Currentweek,\n",
					"    Lastmodified,\n",
					"    IngestionDate\n",
					")\n",
					"WITH normalized_data AS (\n",
					"    SELECT \n",
					"        wsr_name,\n",
					"        wsr_code,\n",
					"        wsr_description,\n",
					"        wsr_startdate,\n",
					"        wsr_lastmodified,\n",
					"        ingested_datetime,\n",
					"        \n",
					"        -- Normalize and clean description\n",
					"        regexp_replace(\n",
					"            regexp_replace(\n",
					"                regexp_replace(\n",
					"                    regexp_replace(\n",
					"                        regexp_replace(lower(wsr_description), \n",
					"                            'monday|mon\\\\.?', 'mon'),\n",
					"                        'tuesday|tue\\\\.?', 'tue'),\n",
					"                    'wednesday|wed\\\\.?', 'wed'),\n",
					"                'thursday|thu\\\\.?|thus', 'thu'),\n",
					"            'friday|fri\\\\.?', 'fri'\n",
					"        ) AS clean_desc,\n",
					"        \n",
					"        -- Extract week 1 and week 2 sections\n",
					"        CASE \n",
					"            WHEN locate('week 2', lower(wsr_description)) > 0 THEN\n",
					"                trim(substring(lower(wsr_description), 1, locate('week 2', lower(wsr_description)) - 1))\n",
					"            WHEN locate('wk 2', lower(wsr_description)) > 0 THEN\n",
					"                trim(substring(lower(wsr_description), 1, locate('wk 2', lower(wsr_description)) - 1))\n",
					"            ELSE lower(wsr_description)\n",
					"        END AS week1_section,\n",
					"        \n",
					"        CASE \n",
					"            WHEN locate('week 2', lower(wsr_description)) > 0 THEN\n",
					"                trim(substring(lower(wsr_description), locate('week 2', lower(wsr_description))))\n",
					"            WHEN locate('wk 2', lower(wsr_description)) > 0 THEN\n",
					"                trim(substring(lower(wsr_description), locate('wk 2', lower(wsr_description))))\n",
					"            ELSE lower(wsr_description)\n",
					"        END AS week2_section\n",
					"        \n",
					"    FROM odw_standardised_db.workschedulerule_weekly\n",
					"),\n",
					"\n",
					"parsed_hours AS (\n",
					"    SELECT \n",
					"        wsr_name,\n",
					"        wsr_code,\n",
					"        wsr_description,\n",
					"        wsr_startdate,\n",
					"        wsr_lastmodified,\n",
					"        ingested_datetime,\n",
					"        clean_desc,\n",
					"        week1_section,\n",
					"        week2_section,\n",
					"        \n",
					"        -- Parse Monday Week 1\n",
					"        CASE \n",
					"            -- Handle \"mon-thu\" ranges with flexible minutes format\n",
					"            WHEN week1_section RLIKE 'mon-thu.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?' THEN\n",
					"                CAST(regexp_extract(week1_section, 'mon-thu.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                COALESCE(CAST(regexp_extract(week1_section, 'mon-thu.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"            WHEN week1_section RLIKE 'mon-fri.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?' THEN\n",
					"                CAST(regexp_extract(week1_section, 'mon-fri.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                COALESCE(CAST(regexp_extract(week1_section, 'mon-fri.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"            WHEN week1_section RLIKE 'mon-wed.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?' THEN\n",
					"                CAST(regexp_extract(week1_section, 'mon-wed.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                COALESCE(CAST(regexp_extract(week1_section, 'mon-wed.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"            -- Handle individual \"monday\" mentions with flexible minutes\n",
					"            WHEN week1_section RLIKE 'monday.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?' THEN\n",
					"                CAST(regexp_extract(week1_section, 'monday.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                COALESCE(CAST(regexp_extract(week1_section, 'monday.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"            WHEN week1_section RLIKE 'mon.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?' THEN\n",
					"                CAST(regexp_extract(week1_section, 'mon.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                COALESCE(CAST(regexp_extract(week1_section, 'mon.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"            -- Handle hours without minutes\n",
					"            WHEN week1_section RLIKE 'mon-thu.*?(\\\\d+)\\\\s*hours?' THEN\n",
					"                CAST(regexp_extract(week1_section, 'mon-thu.*?(\\\\d+)\\\\s*hours?', 1) AS DOUBLE)\n",
					"            WHEN week1_section RLIKE 'mon-fri.*?(\\\\d+)\\\\s*hours?' THEN\n",
					"                CAST(regexp_extract(week1_section, 'mon-fri.*?(\\\\d+)\\\\s*hours?', 1) AS DOUBLE)\n",
					"            WHEN week1_section RLIKE 'monday.*?(\\\\d+)\\\\s*hours?' THEN\n",
					"                CAST(regexp_extract(week1_section, 'monday.*?(\\\\d+)\\\\s*hours?', 1) AS DOUBLE)\n",
					"            WHEN week1_section RLIKE 'mon.*?(\\\\d+)\\\\s*hours?' THEN\n",
					"                CAST(regexp_extract(week1_section, 'mon.*?(\\\\d+)\\\\s*hours?', 1) AS DOUBLE)\n",
					"            ELSE 0.0\n",
					"        END AS mo_wk1,\n",
					"        \n",
					"        -- Parse Tuesday Week 1\n",
					"        CASE \n",
					"            -- Handle ranges that include Tuesday with flexible minutes format\n",
					"            WHEN week1_section RLIKE 'tue-thu.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?' OR \n",
					"                 week1_section RLIKE 'mon-thu.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?' OR\n",
					"                 week1_section RLIKE 'tue-fri.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?' OR\n",
					"                 week1_section RLIKE 'mon-fri.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?' THEN\n",
					"                CASE \n",
					"                    WHEN week1_section RLIKE 'tue-thu.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'tue-thu.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                        COALESCE(CAST(regexp_extract(week1_section, 'tue-thu.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                    WHEN week1_section RLIKE 'mon-thu.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'mon-thu.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                        COALESCE(CAST(regexp_extract(week1_section, 'mon-thu.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                    WHEN week1_section RLIKE 'tue-fri.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'tue-fri.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                        COALESCE(CAST(regexp_extract(week1_section, 'tue-fri.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                    ELSE\n",
					"                        CAST(regexp_extract(week1_section, 'mon-fri.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                        COALESCE(CAST(regexp_extract(week1_section, 'mon-fri.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                END\n",
					"            -- Handle individual Tuesday mentions with flexible minutes\n",
					"            WHEN week1_section RLIKE 'tuesday.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?' THEN\n",
					"                CAST(regexp_extract(week1_section, 'tuesday.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                COALESCE(CAST(regexp_extract(week1_section, 'tuesday.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"            WHEN week1_section RLIKE 'tue.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?' THEN\n",
					"                CAST(regexp_extract(week1_section, 'tue.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                COALESCE(CAST(regexp_extract(week1_section, 'tue.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"            -- Handle hours without minutes\n",
					"            WHEN week1_section RLIKE 'tue-thu.*?(\\\\d+)\\\\s*hours?' OR\n",
					"                 week1_section RLIKE 'mon-thu.*?(\\\\d+)\\\\s*hours?' OR\n",
					"                 week1_section RLIKE 'tue-fri.*?(\\\\d+)\\\\s*hours?' OR\n",
					"                 week1_section RLIKE 'mon-fri.*?(\\\\d+)\\\\s*hours?' THEN\n",
					"                CASE \n",
					"                    WHEN week1_section RLIKE 'tue-thu.*?(\\\\d+)\\\\s*hours?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'tue-thu.*?(\\\\d+)\\\\s*hours?', 1) AS DOUBLE)\n",
					"                    WHEN week1_section RLIKE 'mon-thu.*?(\\\\d+)\\\\s*hours?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'mon-thu.*?(\\\\d+)\\\\s*hours?', 1) AS DOUBLE)\n",
					"                    WHEN week1_section RLIKE 'tue-fri.*?(\\\\d+)\\\\s*hours?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'tue-fri.*?(\\\\d+)\\\\s*hours?', 1) AS DOUBLE)\n",
					"                    ELSE\n",
					"                        CAST(regexp_extract(week1_section, 'mon-fri.*?(\\\\d+)\\\\s*hours?', 1) AS DOUBLE)\n",
					"                END\n",
					"            WHEN week1_section RLIKE 'tuesday.*?(\\\\d+)\\\\s*hours?' THEN\n",
					"                CAST(regexp_extract(week1_section, 'tuesday.*?(\\\\d+)\\\\s*hours?', 1) AS DOUBLE)\n",
					"            WHEN week1_section RLIKE 'tue.*?(\\\\d+)\\\\s*hours?' THEN\n",
					"                CAST(regexp_extract(week1_section, 'tue.*?(\\\\d+)\\\\s*hours?', 1) AS DOUBLE)\n",
					"            ELSE 0.0\n",
					"        END AS tu_wk1,\n",
					"        \n",
					"        -- Parse Wednesday Week 1\n",
					"        CASE \n",
					"            WHEN week1_section RLIKE 'wed-fri.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?' OR\n",
					"                 week1_section RLIKE 'mon-wed.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?' OR\n",
					"                 week1_section RLIKE 'tue-thu.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?' OR\n",
					"                 week1_section RLIKE 'mon-thu.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?' OR\n",
					"                 week1_section RLIKE 'mon-fri.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?' THEN\n",
					"                CASE \n",
					"                    WHEN week1_section RLIKE 'wed-fri.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'wed-fri.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                        COALESCE(CAST(regexp_extract(week1_section, 'wed-fri.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                    WHEN week1_section RLIKE 'mon-wed.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'mon-wed.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                        COALESCE(CAST(regexp_extract(week1_section, 'mon-wed.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                    WHEN week1_section RLIKE 'tue-thu.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'tue-thu.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                        COALESCE(CAST(regexp_extract(week1_section, 'tue-thu.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                    WHEN week1_section RLIKE 'mon-thu.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'mon-thu.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                        COALESCE(CAST(regexp_extract(week1_section, 'mon-thu.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                    ELSE\n",
					"                        CAST(regexp_extract(week1_section, 'mon-fri.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                        COALESCE(CAST(regexp_extract(week1_section, 'mon-fri.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                END\n",
					"            WHEN week1_section RLIKE 'wednesday.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?' THEN\n",
					"                CAST(regexp_extract(week1_section, 'wednesday.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                COALESCE(CAST(regexp_extract(week1_section, 'wednesday.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"            WHEN week1_section RLIKE 'wed.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?' THEN\n",
					"                CAST(regexp_extract(week1_section, 'wed.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                COALESCE(CAST(regexp_extract(week1_section, 'wed.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"            -- Handle hours without minutes\n",
					"            WHEN week1_section RLIKE 'wed-fri.*?(\\\\d+)\\\\s*hours?' OR\n",
					"                 week1_section RLIKE 'mon-wed.*?(\\\\d+)\\\\s*hours?' OR\n",
					"                 week1_section RLIKE 'tue-thu.*?(\\\\d+)\\\\s*hours?' OR\n",
					"                 week1_section RLIKE 'mon-thu.*?(\\\\d+)\\\\s*hours?' OR\n",
					"                 week1_section RLIKE 'mon-fri.*?(\\\\d+)\\\\s*hours?' THEN\n",
					"                CASE \n",
					"                    WHEN week1_section RLIKE 'wed-fri.*?(\\\\d+)\\\\s*hours?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'wed-fri.*?(\\\\d+)\\\\s*hours?', 1) AS DOUBLE)\n",
					"                    WHEN week1_section RLIKE 'mon-wed.*?(\\\\d+)\\\\s*hours?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'mon-wed.*?(\\\\d+)\\\\s*hours?', 1) AS DOUBLE)\n",
					"                    WHEN week1_section RLIKE 'tue-thu.*?(\\\\d+)\\\\s*hours?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'tue-thu.*?(\\\\d+)\\\\s*hours?', 1) AS DOUBLE)\n",
					"                    WHEN week1_section RLIKE 'mon-thu.*?(\\\\d+)\\\\s*hours?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'mon-thu.*?(\\\\d+)\\\\s*hours?', 1) AS DOUBLE)\n",
					"                    ELSE\n",
					"                        CAST(regexp_extract(week1_section, 'mon-fri.*?(\\\\d+)\\\\s*hours?', 1) AS DOUBLE)\n",
					"                END\n",
					"            WHEN week1_section RLIKE 'wednesday.*?(\\\\d+)\\\\s*hours?' THEN\n",
					"                CAST(regexp_extract(week1_section, 'wednesday.*?(\\\\d+)\\\\s*hours?', 1) AS DOUBLE)\n",
					"            WHEN week1_section RLIKE 'wed.*?(\\\\d+)\\\\s*hours?' THEN\n",
					"                CAST(regexp_extract(week1_section, 'wed.*?(\\\\d+)\\\\s*hours?', 1) AS DOUBLE)\n",
					"            ELSE 0.0\n",
					"        END AS we_wk1,\n",
					"        \n",
					"        -- Parse Thursday Week 1\n",
					"        CASE \n",
					"            WHEN week1_section RLIKE 'thu-fri.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?' OR\n",
					"                 week1_section RLIKE 'tue-thu.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?' OR\n",
					"                 week1_section RLIKE 'mon-thu.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?' OR\n",
					"                 week1_section RLIKE 'mon-fri.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?' THEN\n",
					"                CASE \n",
					"                    WHEN week1_section RLIKE 'thu-fri.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'thu-fri.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                        COALESCE(CAST(regexp_extract(week1_section, 'thu-fri.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                    WHEN week1_section RLIKE 'tue-thu.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'tue-thu.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                        COALESCE(CAST(regexp_extract(week1_section, 'tue-thu.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                    WHEN week1_section RLIKE 'mon-thu.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'mon-thu.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                        COALESCE(CAST(regexp_extract(week1_section, 'mon-thu.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                    ELSE\n",
					"                        CAST(regexp_extract(week1_section, 'mon-fri.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                        COALESCE(CAST(regexp_extract(week1_section, 'mon-fri.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                END\n",
					"            WHEN week1_section RLIKE 'thursday.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?' THEN\n",
					"                CAST(regexp_extract(week1_section, 'thursday.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                COALESCE(CAST(regexp_extract(week1_section, 'thursday.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"            WHEN week1_section RLIKE 'thu.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?' THEN\n",
					"                CAST(regexp_extract(week1_section, 'thu.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                COALESCE(CAST(regexp_extract(week1_section, 'thu.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"            -- Handle hours without minutes\n",
					"            WHEN week1_section RLIKE 'thu-fri.*?(\\\\d+)\\\\s*hours?' OR\n",
					"                 week1_section RLIKE 'tue-thu.*?(\\\\d+)\\\\s*hours?' OR\n",
					"                 week1_section RLIKE 'mon-thu.*?(\\\\d+)\\\\s*hours?' OR\n",
					"                 week1_section RLIKE 'mon-fri.*?(\\\\d+)\\\\s*hours?' THEN\n",
					"                CASE \n",
					"                    WHEN week1_section RLIKE 'thu-fri.*?(\\\\d+)\\\\s*hours?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'thu-fri.*?(\\\\d+)\\\\s*hours?', 1) AS DOUBLE)\n",
					"                    WHEN week1_section RLIKE 'tue-thu.*?(\\\\d+)\\\\s*hours?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'tue-thu.*?(\\\\d+)\\\\s*hours?', 1) AS DOUBLE)\n",
					"                    WHEN week1_section RLIKE 'mon-thu.*?(\\\\d+)\\\\s*hours?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'mon-thu.*?(\\\\d+)\\\\s*hours?', 1) AS DOUBLE)\n",
					"                    ELSE\n",
					"                        CAST(regexp_extract(week1_section, 'mon-fri.*?(\\\\d+)\\\\s*hours?', 1) AS DOUBLE)\n",
					"                END\n",
					"            WHEN week1_section RLIKE 'thursday.*?(\\\\d+)\\\\s*hours?' THEN\n",
					"                CAST(regexp_extract(week1_section, 'thursday.*?(\\\\d+)\\\\s*hours?', 1) AS DOUBLE)\n",
					"            WHEN week1_section RLIKE 'thu.*?(\\\\d+)\\\\s*hours?' THEN\n",
					"                CAST(regexp_extract(week1_section, 'thu.*?(\\\\d+)\\\\s*hours?', 1) AS DOUBLE)\n",
					"            ELSE 0.0\n",
					"        END AS th_wk1,\n",
					"        \n",
					"        -- Parse Friday Week 1\n",
					"        CASE \n",
					"            WHEN week1_section RLIKE 'fri.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?' OR\n",
					"                 week1_section RLIKE 'friday.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?' OR\n",
					"                 week1_section RLIKE 'mon-fri.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?' OR\n",
					"                 week1_section RLIKE 'thu-fri.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?' THEN\n",
					"                CASE \n",
					"                    WHEN week1_section RLIKE 'friday.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'friday.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                        COALESCE(CAST(regexp_extract(week1_section, 'friday.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                    WHEN week1_section RLIKE 'fri.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'fri.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                        COALESCE(CAST(regexp_extract(week1_section, 'fri.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                    WHEN week1_section RLIKE 'thu-fri.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'thu-fri.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                        COALESCE(CAST(regexp_extract(week1_section, 'thu-fri.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                    ELSE\n",
					"                        CAST(regexp_extract(week1_section, 'mon-fri.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                        COALESCE(CAST(regexp_extract(week1_section, 'mon-fri.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                END\n",
					"            -- Handle hours without minutes\n",
					"            WHEN week1_section RLIKE 'friday.*?(\\\\d+)\\\\s*hours?' THEN\n",
					"                CAST(regexp_extract(week1_section, 'friday.*?(\\\\d+)\\\\s*hours?', 1) AS DOUBLE)\n",
					"            WHEN week1_section RLIKE 'fri.*?(\\\\d+)\\\\s*hours?' THEN\n",
					"                CAST(regexp_extract(week1_section, 'fri.*?(\\\\d+)\\\\s*hours?', 1) AS DOUBLE)\n",
					"            WHEN week1_section RLIKE 'thu-fri.*?(\\\\d+)\\\\s*hours?' THEN\n",
					"                CAST(regexp_extract(week1_section, 'thu-fri.*?(\\\\d+)\\\\s*hours?', 1) AS DOUBLE)\n",
					"            WHEN week1_section RLIKE 'mon-fri.*?(\\\\d+)\\\\s*hours?' THEN\n",
					"                CAST(regexp_extract(week1_section, 'mon-fri.*?(\\\\d+)\\\\s*hours?', 1) AS DOUBLE)\n",
					"            ELSE 0.0\n",
					"        END AS fr_wk1,\n",
					"        \n",
					"        -- Parse Week 2 hours (similar logic but for week2_section)\n",
					"        -- For brevity, I'll include a simplified version - you can expand this similarly\n",
					"        CASE \n",
					"            WHEN week2_section RLIKE 'mon.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?\\\\s*min' THEN\n",
					"                CAST(regexp_extract(week2_section, 'mon.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?\\\\s*min', 1) AS DOUBLE) +\n",
					"                COALESCE(CAST(regexp_extract(week2_section, 'mon.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?\\\\s*min', 2) AS DOUBLE), 0) / 60.0\n",
					"            WHEN week2_section RLIKE 'mon.*?(\\\\d+)\\\\s*hours?' THEN\n",
					"                CAST(regexp_extract(week2_section, 'mon.*?(\\\\d+)\\\\s*hours?', 1) AS DOUBLE)\n",
					"            ELSE 0.0\n",
					"        END AS mo_wk2,\n",
					"        \n",
					"        CASE \n",
					"            WHEN week2_section RLIKE 'tue.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?\\\\s*min' THEN\n",
					"                CAST(regexp_extract(week2_section, 'tue.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?\\\\s*min', 1) AS DOUBLE) +\n",
					"                COALESCE(CAST(regexp_extract(week2_section, 'tue.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?\\\\s*min', 2) AS DOUBLE), 0) / 60.0\n",
					"            WHEN week2_section RLIKE 'tue.*?(\\\\d+)\\\\s*hours?' THEN\n",
					"                CAST(regexp_extract(week2_section, 'tue.*?(\\\\d+)\\\\s*hours?', 1) AS DOUBLE)\n",
					"            ELSE 0.0\n",
					"        END AS tu_wk2,\n",
					"        \n",
					"        CASE \n",
					"            WHEN week2_section RLIKE 'wed.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?\\\\s*min' THEN\n",
					"                CAST(regexp_extract(week2_section, 'wed.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?\\\\s*min', 1) AS DOUBLE) +\n",
					"                COALESCE(CAST(regexp_extract(week2_section, 'wed.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?\\\\s*min', 2) AS DOUBLE), 0) / 60.0\n",
					"            WHEN week2_section RLIKE 'wed.*?(\\\\d+)\\\\s*hours?' THEN\n",
					"                CAST(regexp_extract(week2_section, 'wed.*?(\\\\d+)\\\\s*hours?', 1) AS DOUBLE)\n",
					"            ELSE 0.0\n",
					"        END AS we_wk2,\n",
					"        \n",
					"        CASE \n",
					"            WHEN week2_section RLIKE 'thu.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?\\\\s*min' THEN\n",
					"                CAST(regexp_extract(week2_section, 'thu.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?\\\\s*min', 1) AS DOUBLE) +\n",
					"                COALESCE(CAST(regexp_extract(week2_section, 'thu.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?\\\\s*min', 2) AS DOUBLE), 0) / 60.0\n",
					"            WHEN week2_section RLIKE 'thu.*?(\\\\d+)\\\\s*hours?' THEN\n",
					"                CAST(regexp_extract(week2_section, 'thu.*?(\\\\d+)\\\\s*hours?', 1) AS DOUBLE)\n",
					"            ELSE 0.0\n",
					"        END AS th_wk2,\n",
					"        \n",
					"        CASE \n",
					"            WHEN week2_section RLIKE 'fri.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?\\\\s*min' THEN\n",
					"                CAST(regexp_extract(week2_section, 'fri.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?\\\\s*min', 1) AS DOUBLE) +\n",
					"                COALESCE(CAST(regexp_extract(week2_section, 'fri.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?\\\\s*min', 2) AS DOUBLE), 0) / 60.0\n",
					"            WHEN week2_section RLIKE 'fri.*?(\\\\d+)\\\\s*hours?' THEN\n",
					"                CAST(regexp_extract(week2_section, 'fri.*?(\\\\d+)\\\\s*hours?', 1) AS DOUBLE)\n",
					"            ELSE 0.0\n",
					"        END AS fr_wk2\n",
					"        \n",
					"    FROM normalized_data\n",
					")\n",
					"\n",
					"SELECT \n",
					"    -- Direct field mappings\n",
					"    wsr_name AS WorkScheduleRule,\n",
					"    wsr_code AS WorkScheduleCode,\n",
					"    \n",
					"    -- Parsed daily hours\n",
					"    ROUND(mo_wk1, 2) AS MoWk1,\n",
					"    ROUND(tu_wk1, 2) AS TuWk1,\n",
					"    ROUND(we_wk1, 2) AS WeWk1,\n",
					"    ROUND(th_wk1, 2) AS ThWk1,\n",
					"    ROUND(fr_wk1, 2) AS FrWk1,\n",
					"    ROUND(mo_wk2, 2) AS MoWk2,\n",
					"    ROUND(tu_wk2, 2) AS TuWk2,\n",
					"    ROUND(we_wk2, 2) AS WeWk2,\n",
					"    ROUND(th_wk2, 2) AS ThWk2,\n",
					"    ROUND(fr_wk2, 2) AS FrWk2,\n",
					"    \n",
					"    -- Calculate weekly totals\n",
					"    ROUND(mo_wk1 + tu_wk1 + we_wk1 + th_wk1 + fr_wk1, 2) AS WkHrsWk1,\n",
					"    ROUND(mo_wk2 + tu_wk2 + we_wk2 + th_wk2 + fr_wk2, 2) AS WkHrsWk2,\n",
					"    \n",
					"    -- Calculate average weekly hours\n",
					"    ROUND((mo_wk1 + tu_wk1 + we_wk1 + th_wk1 + fr_wk1 + mo_wk2 + tu_wk2 + we_wk2 + th_wk2 + fr_wk2) / 2, 2) AS AvgWkHrs,\n",
					"    \n",
					"    -- Date conversion\n",
					"    CASE \n",
					"        WHEN wsr_startdate IS NOT NULL THEN\n",
					"            TRY_CAST(wsr_startdate AS DATE)\n",
					"        ELSE NULL\n",
					"    END AS WSRstart,\n",
					"    \n",
					"    -- Calculate current week\n",
					"    CASE \n",
					"        WHEN wsr_startdate IS NOT NULL THEN\n",
					"            CASE \n",
					"                WHEN ((datediff(current_date(), TRY_CAST(wsr_startdate AS DATE)) / 7) % 2) = 0 THEN 1 \n",
					"                ELSE 2 \n",
					"            END\n",
					"        ELSE 1\n",
					"    END AS Currentweek,\n",
					"    \n",
					"    -- Last modified timestamp\n",
					"    CASE \n",
					"        WHEN wsr_lastmodified IS NOT NULL THEN\n",
					"            TRY_CAST(\n",
					"                CASE \n",
					"                    WHEN wsr_lastmodified RLIKE '^\\\\d{2}/\\\\d{2}/\\\\d{4}' THEN\n",
					"                        CONCAT(\n",
					"                            SUBSTR(wsr_lastmodified, 7, 4), '-',\n",
					"                            SUBSTR(wsr_lastmodified, 4, 2), '-',\n",
					"                            SUBSTR(wsr_lastmodified, 1, 2)\n",
					"                        )\n",
					"                    ELSE wsr_lastmodified\n",
					"                END AS TIMESTAMP\n",
					"            )\n",
					"        ELSE NULL\n",
					"    END AS Lastmodified,\n",
					"    \n",
					"    -- Ingestion timestamp\n",
					"    CASE \n",
					"        WHEN ingested_datetime IS NOT NULL THEN\n",
					"            TRY_CAST(ingested_datetime AS TIMESTAMP)\n",
					"        ELSE current_timestamp()\n",
					"    END AS IngestionDate\n",
					"\n",
					"FROM parsed_hours;"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"\n",
					"\n",
					"SELECT \n",
					"    wsr_name,\n",
					"    wsr_startdate,\n",
					"    LENGTH(wsr_startdate) as date_length,\n",
					"    wsr_startdate RLIKE '^\\\\d{2}/\\\\d{2}/\\\\d{4}' as is_ddmmyyyy_format,\n",
					"    wsr_startdate RLIKE '^\\\\d{4}-\\\\d{2}-\\\\d{2}' as is_yyyy_mm_dd_format,\n",
					"    wsr_startdate RLIKE '^\\\\d{1,2}/\\\\d{1,2}/\\\\d{4}' as is_flexible_dmyyyy,\n",
					"    -- Test different conversion attempts\n",
					"    TRY_CAST(wsr_startdate AS DATE) as direct_cast,\n",
					"    TRY_CAST(\n",
					"        CASE \n",
					"            WHEN wsr_startdate RLIKE '^\\\\d{2}/\\\\d{2}/\\\\d{4}' THEN\n",
					"                CONCAT(\n",
					"                    SUBSTR(wsr_startdate, 7, 4), '-',\n",
					"                    SUBSTR(wsr_startdate, 4, 2), '-',\n",
					"                    SUBSTR(wsr_startdate, 1, 2)\n",
					"                )\n",
					"            WHEN wsr_startdate RLIKE '^\\\\d{1,2}/\\\\d{1,2}/\\\\d{4}' THEN\n",
					"                CONCAT(\n",
					"                    RIGHT(wsr_startdate, 4), '-',\n",
					"                    LPAD(SUBSTR(wsr_startdate, LOCATE('/', wsr_startdate) + 1, LOCATE('/', wsr_startdate, LOCATE('/', wsr_startdate) + 1) - LOCATE('/', wsr_startdate) - 1), 2, '0'), '-',\n",
					"                    LPAD(LEFT(wsr_startdate, LOCATE('/', wsr_startdate) - 1), 2, '0')\n",
					"                )\n",
					"            ELSE wsr_startdate\n",
					"        END AS DATE\n",
					"    ) as converted_date\n",
					"FROM odw_standardised_db.workschedulerule_weekly \n",
					"WHERE wsr_startdate IS NOT NULL\n",
					"LIMIT 10;"
				],
				"execution_count": 2
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## 24072025"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"\n",
					" \n",
					" \n",
					"\n",
					"DELETE FROM odw_harmonised_db.sap_hr_workschedulerule;\n",
					"\n",
					"INSERT INTO odw_harmonised_db.sap_hr_workschedulerule (\n",
					"    WorkScheduleRule,\n",
					"    WorkScheduleCode,\n",
					"    MoWk1, TuWk1, WeWk1, ThWk1, FrWk1,\n",
					"    MoWk2, TuWk2, WeWk2, ThWk2, FrWk2,\n",
					"    WkHrsWk1, WkHrsWk2,\n",
					"    AvgWkHrs,\n",
					"    WSRstart,\n",
					"    Currentweek,\n",
					"    Lastmodified,\n",
					"    IngestionDate\n",
					")\n",
					"WITH normalized_data AS (\n",
					"    SELECT \n",
					"        wsr_name,\n",
					"        wsr_code,\n",
					"        wsr_description,\n",
					"        wsr_startdate,\n",
					"        wsr_lastmodified,\n",
					"        ingested_datetime,\n",
					"        \n",
					"        -- Normalize and clean description\n",
					"        regexp_replace(\n",
					"            regexp_replace(\n",
					"                regexp_replace(\n",
					"                    regexp_replace(\n",
					"                        regexp_replace(lower(wsr_description), \n",
					"                            'monday|mon\\\\.?', 'mon'),\n",
					"                        'tuesday|tue\\\\.?', 'tue'),\n",
					"                    'wednesday|wed\\\\.?', 'wed'),\n",
					"                'thursday|thu\\\\.?|thus', 'thu'),\n",
					"            'friday|fri\\\\.?', 'fri'\n",
					"        ) AS clean_desc,\n",
					"        \n",
					"        -- Extract week 1 and week 2 sections\n",
					"        CASE \n",
					"            WHEN locate('week 2', lower(wsr_description)) > 0 THEN\n",
					"                trim(substring(lower(wsr_description), 1, locate('week 2', lower(wsr_description)) - 1))\n",
					"            WHEN locate('wk 2', lower(wsr_description)) > 0 THEN\n",
					"                trim(substring(lower(wsr_description), 1, locate('wk 2', lower(wsr_description)) - 1))\n",
					"            ELSE lower(wsr_description)\n",
					"        END AS week1_section,\n",
					"        \n",
					"        CASE \n",
					"            WHEN locate('week 2', lower(wsr_description)) > 0 THEN\n",
					"                trim(substring(lower(wsr_description), locate('week 2', lower(wsr_description))))\n",
					"            WHEN locate('wk 2', lower(wsr_description)) > 0 THEN\n",
					"                trim(substring(lower(wsr_description), locate('wk 2', lower(wsr_description))))\n",
					"            ELSE lower(wsr_description)\n",
					"        END AS week2_section\n",
					"        \n",
					"    FROM odw_standardised_db.workschedulerule_weekly\n",
					"),\n",
					"\n",
					"parsed_hours AS (\n",
					"    SELECT \n",
					"        wsr_name,\n",
					"        wsr_code,\n",
					"        wsr_description,\n",
					"        wsr_startdate,\n",
					"        wsr_lastmodified,\n",
					"        ingested_datetime,\n",
					"        clean_desc,\n",
					"        week1_section,\n",
					"        week2_section,\n",
					"        \n",
					"        -- Parse Monday Week 1\n",
					"        CASE \n",
					"            -- Handle \"mon-thu\" ranges with flexible minutes format\n",
					"            WHEN week1_section RLIKE 'mon-thu.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?' THEN\n",
					"                CAST(regexp_extract(week1_section, 'mon-thu.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                COALESCE(CAST(regexp_extract(week1_section, 'mon-thu.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"            WHEN week1_section RLIKE 'mon-fri.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?' THEN\n",
					"                CAST(regexp_extract(week1_section, 'mon-fri.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                COALESCE(CAST(regexp_extract(week1_section, 'mon-fri.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"            WHEN week1_section RLIKE 'mon-wed.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?' THEN\n",
					"                CAST(regexp_extract(week1_section, 'mon-wed.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                COALESCE(CAST(regexp_extract(week1_section, 'mon-wed.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"            -- Handle individual \"monday\" mentions with flexible minutes\n",
					"            WHEN week1_section RLIKE 'monday.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?' THEN\n",
					"                CAST(regexp_extract(week1_section, 'monday.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                COALESCE(CAST(regexp_extract(week1_section, 'monday.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"            WHEN week1_section RLIKE 'mon.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?' THEN\n",
					"                CAST(regexp_extract(week1_section, 'mon.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                COALESCE(CAST(regexp_extract(week1_section, 'mon.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"            -- Handle hours without minutes\n",
					"            WHEN week1_section RLIKE 'mon-thu.*?(\\\\d+)\\\\s*hours?' THEN\n",
					"                CAST(regexp_extract(week1_section, 'mon-thu.*?(\\\\d+)\\\\s*hours?', 1) AS DOUBLE)\n",
					"            WHEN week1_section RLIKE 'mon-fri.*?(\\\\d+)\\\\s*hours?' THEN\n",
					"                CAST(regexp_extract(week1_section, 'mon-fri.*?(\\\\d+)\\\\s*hours?', 1) AS DOUBLE)\n",
					"            WHEN week1_section RLIKE 'monday.*?(\\\\d+)\\\\s*hours?' THEN\n",
					"                CAST(regexp_extract(week1_section, 'monday.*?(\\\\d+)\\\\s*hours?', 1) AS DOUBLE)\n",
					"            WHEN week1_section RLIKE 'mon.*?(\\\\d+)\\\\s*hours?' THEN\n",
					"                CAST(regexp_extract(week1_section, 'mon.*?(\\\\d+)\\\\s*hours?', 1) AS DOUBLE)\n",
					"            ELSE 0.0\n",
					"        END AS mo_wk1,\n",
					"        \n",
					"        -- Parse Tuesday Week 1\n",
					"        CASE \n",
					"            -- Handle ranges that include Tuesday with flexible minutes format\n",
					"            WHEN week1_section RLIKE 'tue-thu.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?' OR \n",
					"                 week1_section RLIKE 'mon-thu.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?' OR\n",
					"                 week1_section RLIKE 'tue-fri.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?' OR\n",
					"                 week1_section RLIKE 'mon-fri.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?' THEN\n",
					"                CASE \n",
					"                    WHEN week1_section RLIKE 'tue-thu.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'tue-thu.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                        COALESCE(CAST(regexp_extract(week1_section, 'tue-thu.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                    WHEN week1_section RLIKE 'mon-thu.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'mon-thu.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                        COALESCE(CAST(regexp_extract(week1_section, 'mon-thu.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                    WHEN week1_section RLIKE 'tue-fri.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'tue-fri.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                        COALESCE(CAST(regexp_extract(week1_section, 'tue-fri.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                    ELSE\n",
					"                        CAST(regexp_extract(week1_section, 'mon-fri.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                        COALESCE(CAST(regexp_extract(week1_section, 'mon-fri.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                END\n",
					"            -- Handle individual Tuesday mentions with flexible minutes\n",
					"            WHEN week1_section RLIKE 'tuesday.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?' THEN\n",
					"                CAST(regexp_extract(week1_section, 'tuesday.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                COALESCE(CAST(regexp_extract(week1_section, 'tuesday.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"            WHEN week1_section RLIKE 'tue.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?' THEN\n",
					"                CAST(regexp_extract(week1_section, 'tue.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                COALESCE(CAST(regexp_extract(week1_section, 'tue.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"            -- Handle hours without minutes\n",
					"            WHEN week1_section RLIKE 'tue-thu.*?(\\\\d+)\\\\s*hours?' OR\n",
					"                 week1_section RLIKE 'mon-thu.*?(\\\\d+)\\\\s*hours?' OR\n",
					"                 week1_section RLIKE 'tue-fri.*?(\\\\d+)\\\\s*hours?' OR\n",
					"                 week1_section RLIKE 'mon-fri.*?(\\\\d+)\\\\s*hours?' THEN\n",
					"                CASE \n",
					"                    WHEN week1_section RLIKE 'tue-thu.*?(\\\\d+)\\\\s*hours?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'tue-thu.*?(\\\\d+)\\\\s*hours?', 1) AS DOUBLE)\n",
					"                    WHEN week1_section RLIKE 'mon-thu.*?(\\\\d+)\\\\s*hours?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'mon-thu.*?(\\\\d+)\\\\s*hours?', 1) AS DOUBLE)\n",
					"                    WHEN week1_section RLIKE 'tue-fri.*?(\\\\d+)\\\\s*hours?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'tue-fri.*?(\\\\d+)\\\\s*hours?', 1) AS DOUBLE)\n",
					"                    ELSE\n",
					"                        CAST(regexp_extract(week1_section, 'mon-fri.*?(\\\\d+)\\\\s*hours?', 1) AS DOUBLE)\n",
					"                END\n",
					"            WHEN week1_section RLIKE 'tuesday.*?(\\\\d+)\\\\s*hours?' THEN\n",
					"                CAST(regexp_extract(week1_section, 'tuesday.*?(\\\\d+)\\\\s*hours?', 1) AS DOUBLE)\n",
					"            WHEN week1_section RLIKE 'tue.*?(\\\\d+)\\\\s*hours?' THEN\n",
					"                CAST(regexp_extract(week1_section, 'tue.*?(\\\\d+)\\\\s*hours?', 1) AS DOUBLE)\n",
					"            ELSE 0.0\n",
					"        END AS tu_wk1,\n",
					"        \n",
					"        -- Parse Wednesday Week 1\n",
					"        CASE \n",
					"            WHEN week1_section RLIKE 'wed-fri.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?' OR\n",
					"                 week1_section RLIKE 'mon-wed.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?' OR\n",
					"                 week1_section RLIKE 'tue-thu.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?' OR\n",
					"                 week1_section RLIKE 'mon-thu.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?' OR\n",
					"                 week1_section RLIKE 'mon-fri.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?' THEN\n",
					"                CASE \n",
					"                    WHEN week1_section RLIKE 'wed-fri.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'wed-fri.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                        COALESCE(CAST(regexp_extract(week1_section, 'wed-fri.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                    WHEN week1_section RLIKE 'mon-wed.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'mon-wed.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                        COALESCE(CAST(regexp_extract(week1_section, 'mon-wed.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                    WHEN week1_section RLIKE 'tue-thu.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'tue-thu.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                        COALESCE(CAST(regexp_extract(week1_section, 'tue-thu.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                    WHEN week1_section RLIKE 'mon-thu.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'mon-thu.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                        COALESCE(CAST(regexp_extract(week1_section, 'mon-thu.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                    ELSE\n",
					"                        CAST(regexp_extract(week1_section, 'mon-fri.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                        COALESCE(CAST(regexp_extract(week1_section, 'mon-fri.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                END\n",
					"            WHEN week1_section RLIKE 'wednesday.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?' THEN\n",
					"                CAST(regexp_extract(week1_section, 'wednesday.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                COALESCE(CAST(regexp_extract(week1_section, 'wednesday.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"            WHEN week1_section RLIKE 'wed.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?' THEN\n",
					"                CAST(regexp_extract(week1_section, 'wed.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                COALESCE(CAST(regexp_extract(week1_section, 'wed.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"            -- Handle hours without minutes\n",
					"            WHEN week1_section RLIKE 'wed-fri.*?(\\\\d+)\\\\s*hours?' OR\n",
					"                 week1_section RLIKE 'mon-wed.*?(\\\\d+)\\\\s*hours?' OR\n",
					"                 week1_section RLIKE 'tue-thu.*?(\\\\d+)\\\\s*hours?' OR\n",
					"                 week1_section RLIKE 'mon-thu.*?(\\\\d+)\\\\s*hours?' OR\n",
					"                 week1_section RLIKE 'mon-fri.*?(\\\\d+)\\\\s*hours?' THEN\n",
					"                CASE \n",
					"                    WHEN week1_section RLIKE 'wed-fri.*?(\\\\d+)\\\\s*hours?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'wed-fri.*?(\\\\d+)\\\\s*hours?', 1) AS DOUBLE)\n",
					"                    WHEN week1_section RLIKE 'mon-wed.*?(\\\\d+)\\\\s*hours?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'mon-wed.*?(\\\\d+)\\\\s*hours?', 1) AS DOUBLE)\n",
					"                    WHEN week1_section RLIKE 'tue-thu.*?(\\\\d+)\\\\s*hours?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'tue-thu.*?(\\\\d+)\\\\s*hours?', 1) AS DOUBLE)\n",
					"                    WHEN week1_section RLIKE 'mon-thu.*?(\\\\d+)\\\\s*hours?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'mon-thu.*?(\\\\d+)\\\\s*hours?', 1) AS DOUBLE)\n",
					"                    ELSE\n",
					"                        CAST(regexp_extract(week1_section, 'mon-fri.*?(\\\\d+)\\\\s*hours?', 1) AS DOUBLE)\n",
					"                END\n",
					"            WHEN week1_section RLIKE 'wednesday.*?(\\\\d+)\\\\s*hours?' THEN\n",
					"                CAST(regexp_extract(week1_section, 'wednesday.*?(\\\\d+)\\\\s*hours?', 1) AS DOUBLE)\n",
					"            WHEN week1_section RLIKE 'wed.*?(\\\\d+)\\\\s*hours?' THEN\n",
					"                CAST(regexp_extract(week1_section, 'wed.*?(\\\\d+)\\\\s*hours?', 1) AS DOUBLE)\n",
					"            ELSE 0.0\n",
					"        END AS we_wk1,\n",
					"        \n",
					"        -- Parse Thursday Week 1\n",
					"        CASE \n",
					"            WHEN week1_section RLIKE 'thu-fri.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?' OR\n",
					"                 week1_section RLIKE 'tue-thu.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?' OR\n",
					"                 week1_section RLIKE 'mon-thu.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?' OR\n",
					"                 week1_section RLIKE 'mon-fri.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?' THEN\n",
					"                CASE \n",
					"                    WHEN week1_section RLIKE 'thu-fri.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'thu-fri.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                        COALESCE(CAST(regexp_extract(week1_section, 'thu-fri.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                    WHEN week1_section RLIKE 'tue-thu.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'tue-thu.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                        COALESCE(CAST(regexp_extract(week1_section, 'tue-thu.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                    WHEN week1_section RLIKE 'mon-thu.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'mon-thu.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                        COALESCE(CAST(regexp_extract(week1_section, 'mon-thu.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                    ELSE\n",
					"                        CAST(regexp_extract(week1_section, 'mon-fri.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                        COALESCE(CAST(regexp_extract(week1_section, 'mon-fri.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                END\n",
					"            WHEN week1_section RLIKE 'thursday.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?' THEN\n",
					"                CAST(regexp_extract(week1_section, 'thursday.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                COALESCE(CAST(regexp_extract(week1_section, 'thursday.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"            WHEN week1_section RLIKE 'thu.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?' THEN\n",
					"                CAST(regexp_extract(week1_section, 'thu.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                COALESCE(CAST(regexp_extract(week1_section, 'thu.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"            -- Handle hours without minutes\n",
					"            WHEN week1_section RLIKE 'thu-fri.*?(\\\\d+)\\\\s*hours?' OR\n",
					"                 week1_section RLIKE 'tue-thu.*?(\\\\d+)\\\\s*hours?' OR\n",
					"                 week1_section RLIKE 'mon-thu.*?(\\\\d+)\\\\s*hours?' OR\n",
					"                 week1_section RLIKE 'mon-fri.*?(\\\\d+)\\\\s*hours?' THEN\n",
					"                CASE \n",
					"                    WHEN week1_section RLIKE 'thu-fri.*?(\\\\d+)\\\\s*hours?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'thu-fri.*?(\\\\d+)\\\\s*hours?', 1) AS DOUBLE)\n",
					"                    WHEN week1_section RLIKE 'tue-thu.*?(\\\\d+)\\\\s*hours?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'tue-thu.*?(\\\\d+)\\\\s*hours?', 1) AS DOUBLE)\n",
					"                    WHEN week1_section RLIKE 'mon-thu.*?(\\\\d+)\\\\s*hours?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'mon-thu.*?(\\\\d+)\\\\s*hours?', 1) AS DOUBLE)\n",
					"                    ELSE\n",
					"                        CAST(regexp_extract(week1_section, 'mon-fri.*?(\\\\d+)\\\\s*hours?', 1) AS DOUBLE)\n",
					"                END\n",
					"            WHEN week1_section RLIKE 'thursday.*?(\\\\d+)\\\\s*hours?' THEN\n",
					"                CAST(regexp_extract(week1_section, 'thursday.*?(\\\\d+)\\\\s*hours?', 1) AS DOUBLE)\n",
					"            WHEN week1_section RLIKE 'thu.*?(\\\\d+)\\\\s*hours?' THEN\n",
					"                CAST(regexp_extract(week1_section, 'thu.*?(\\\\d+)\\\\s*hours?', 1) AS DOUBLE)\n",
					"            ELSE 0.0\n",
					"        END AS th_wk1,\n",
					"        \n",
					"        -- Parse Friday Week 1\n",
					"        CASE \n",
					"            WHEN week1_section RLIKE 'fri.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?' OR\n",
					"                 week1_section RLIKE 'friday.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?' OR\n",
					"                 week1_section RLIKE 'mon-fri.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?' OR\n",
					"                 week1_section RLIKE 'thu-fri.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?' THEN\n",
					"                CASE \n",
					"                    WHEN week1_section RLIKE 'friday.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'friday.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                        COALESCE(CAST(regexp_extract(week1_section, 'friday.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                    WHEN week1_section RLIKE 'fri.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'fri.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                        COALESCE(CAST(regexp_extract(week1_section, 'fri.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                    WHEN week1_section RLIKE 'thu-fri.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'thu-fri.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                        COALESCE(CAST(regexp_extract(week1_section, 'thu-fri.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                    ELSE\n",
					"                        CAST(regexp_extract(week1_section, 'mon-fri.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                        COALESCE(CAST(regexp_extract(week1_section, 'mon-fri.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                END\n",
					"            -- Handle hours without minutes\n",
					"            WHEN week1_section RLIKE 'friday.*?(\\\\d+)\\\\s*hours?' THEN\n",
					"                CAST(regexp_extract(week1_section, 'friday.*?(\\\\d+)\\\\s*hours?', 1) AS DOUBLE)\n",
					"            WHEN week1_section RLIKE 'fri.*?(\\\\d+)\\\\s*hours?' THEN\n",
					"                CAST(regexp_extract(week1_section, 'fri.*?(\\\\d+)\\\\s*hours?', 1) AS DOUBLE)\n",
					"            WHEN week1_section RLIKE 'thu-fri.*?(\\\\d+)\\\\s*hours?' THEN\n",
					"                CAST(regexp_extract(week1_section, 'thu-fri.*?(\\\\d+)\\\\s*hours?', 1) AS DOUBLE)\n",
					"            WHEN week1_section RLIKE 'mon-fri.*?(\\\\d+)\\\\s*hours?' THEN\n",
					"                CAST(regexp_extract(week1_section, 'mon-fri.*?(\\\\d+)\\\\s*hours?', 1) AS DOUBLE)\n",
					"            ELSE 0.0\n",
					"        END AS fr_wk1,\n",
					"        \n",
					"        -- Parse Week 2 hours (similar logic but for week2_section)\n",
					"        -- For brevity, I'll include a simplified version - you can expand this similarly\n",
					"        CASE \n",
					"            WHEN week2_section RLIKE 'mon.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?\\\\s*min' THEN\n",
					"                CAST(regexp_extract(week2_section, 'mon.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?\\\\s*min', 1) AS DOUBLE) +\n",
					"                COALESCE(CAST(regexp_extract(week2_section, 'mon.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?\\\\s*min', 2) AS DOUBLE), 0) / 60.0\n",
					"            WHEN week2_section RLIKE 'mon.*?(\\\\d+)\\\\s*hours?' THEN\n",
					"                CAST(regexp_extract(week2_section, 'mon.*?(\\\\d+)\\\\s*hours?', 1) AS DOUBLE)\n",
					"            ELSE 0.0\n",
					"        END AS mo_wk2,\n",
					"        \n",
					"        CASE \n",
					"            WHEN week2_section RLIKE 'tue.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?\\\\s*min' THEN\n",
					"                CAST(regexp_extract(week2_section, 'tue.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?\\\\s*min', 1) AS DOUBLE) +\n",
					"                COALESCE(CAST(regexp_extract(week2_section, 'tue.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?\\\\s*min', 2) AS DOUBLE), 0) / 60.0\n",
					"            WHEN week2_section RLIKE 'tue.*?(\\\\d+)\\\\s*hours?' THEN\n",
					"                CAST(regexp_extract(week2_section, 'tue.*?(\\\\d+)\\\\s*hours?', 1) AS DOUBLE)\n",
					"            ELSE 0.0\n",
					"        END AS tu_wk2,\n",
					"        \n",
					"        CASE \n",
					"            WHEN week2_section RLIKE 'wed.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?\\\\s*min' THEN\n",
					"                CAST(regexp_extract(week2_section, 'wed.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?\\\\s*min', 1) AS DOUBLE) +\n",
					"                COALESCE(CAST(regexp_extract(week2_section, 'wed.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?\\\\s*min', 2) AS DOUBLE), 0) / 60.0\n",
					"            WHEN week2_section RLIKE 'wed.*?(\\\\d+)\\\\s*hours?' THEN\n",
					"                CAST(regexp_extract(week2_section, 'wed.*?(\\\\d+)\\\\s*hours?', 1) AS DOUBLE)\n",
					"            ELSE 0.0\n",
					"        END AS we_wk2,\n",
					"        \n",
					"        CASE \n",
					"            WHEN week2_section RLIKE 'thu.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?\\\\s*min' THEN\n",
					"                CAST(regexp_extract(week2_section, 'thu.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?\\\\s*min', 1) AS DOUBLE) +\n",
					"                COALESCE(CAST(regexp_extract(week2_section, 'thu.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?\\\\s*min', 2) AS DOUBLE), 0) / 60.0\n",
					"            WHEN week2_section RLIKE 'thu.*?(\\\\d+)\\\\s*hours?' THEN\n",
					"                CAST(regexp_extract(week2_section, 'thu.*?(\\\\d+)\\\\s*hours?', 1) AS DOUBLE)\n",
					"            ELSE 0.0\n",
					"        END AS th_wk2,\n",
					"        \n",
					"        CASE \n",
					"            WHEN week2_section RLIKE 'fri.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?\\\\s*min' THEN\n",
					"                CAST(regexp_extract(week2_section, 'fri.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?\\\\s*min', 1) AS DOUBLE) +\n",
					"                COALESCE(CAST(regexp_extract(week2_section, 'fri.*?(\\\\d+)\\\\s*hours?\\\\s*(\\\\d+)?\\\\s*min', 2) AS DOUBLE), 0) / 60.0\n",
					"            WHEN week2_section RLIKE 'fri.*?(\\\\d+)\\\\s*hours?' THEN\n",
					"                CAST(regexp_extract(week2_section, 'fri.*?(\\\\d+)\\\\s*hours?', 1) AS DOUBLE)\n",
					"            ELSE 0.0\n",
					"        END AS fr_wk2\n",
					"        \n",
					"    FROM normalized_data\n",
					")\n",
					"\n",
					"SELECT \n",
					"    -- Direct field mappings\n",
					"    wsr_name AS WorkScheduleRule,\n",
					"    wsr_code AS WorkScheduleCode,\n",
					"    \n",
					"    -- Parsed daily hours\n",
					"    ROUND(mo_wk1, 2) AS MoWk1,\n",
					"    ROUND(tu_wk1, 2) AS TuWk1,\n",
					"    ROUND(we_wk1, 2) AS WeWk1,\n",
					"    ROUND(th_wk1, 2) AS ThWk1,\n",
					"    ROUND(fr_wk1, 2) AS FrWk1,\n",
					"    ROUND(mo_wk2, 2) AS MoWk2,\n",
					"    ROUND(tu_wk2, 2) AS TuWk2,\n",
					"    ROUND(we_wk2, 2) AS WeWk2,\n",
					"    ROUND(th_wk2, 2) AS ThWk2,\n",
					"    ROUND(fr_wk2, 2) AS FrWk2,\n",
					"    \n",
					"    -- Calculate weekly totals\n",
					"    ROUND(mo_wk1 + tu_wk1 + we_wk1 + th_wk1 + fr_wk1, 2) AS WkHrsWk1,\n",
					"    ROUND(mo_wk2 + tu_wk2 + we_wk2 + th_wk2 + fr_wk2, 2) AS WkHrsWk2,\n",
					"    \n",
					"    -- Calculate average weekly hours\n",
					"    ROUND((mo_wk1 + tu_wk1 + we_wk1 + th_wk1 + fr_wk1 + mo_wk2 + tu_wk2 + we_wk2 + th_wk2 + fr_wk2) / 2, 2) AS AvgWkHrs,\n",
					"    \n",
					"    -- FIXED: Date conversion - Handle DD/MM/YYYY format\n",
					"    CASE \n",
					"        WHEN wsr_startdate IS NOT NULL THEN\n",
					"            TRY_CAST(\n",
					"                CASE \n",
					"                    WHEN wsr_startdate RLIKE '^\\\\d{1,2}/\\\\d{1,2}/\\\\d{4}' THEN\n",
					"                        CONCAT(\n",
					"                            RIGHT(wsr_startdate, 4), '-',\n",
					"                            LPAD(SUBSTR(wsr_startdate, LOCATE('/', wsr_startdate) + 1, LOCATE('/', wsr_startdate, LOCATE('/', wsr_startdate) + 1) - LOCATE('/', wsr_startdate) - 1), 2, '0'), '-',\n",
					"                            LPAD(LEFT(wsr_startdate, LOCATE('/', wsr_startdate) - 1), 2, '0')\n",
					"                        )\n",
					"                    ELSE wsr_startdate\n",
					"                END AS DATE\n",
					"            )\n",
					"        ELSE NULL\n",
					"    END AS WSRstart,\n",
					"    \n",
					"    -- FIXED: Calculate current week (now depends on properly parsed date)\n",
					"    CASE \n",
					"        WHEN wsr_startdate IS NOT NULL THEN\n",
					"            CASE \n",
					"                WHEN ((datediff(current_date(), \n",
					"                    TRY_CAST(\n",
					"                        CASE \n",
					"                            WHEN wsr_startdate RLIKE '^\\\\d{1,2}/\\\\d{1,2}/\\\\d{4}' THEN\n",
					"                                CONCAT(\n",
					"                                    RIGHT(wsr_startdate, 4), '-',\n",
					"                                    LPAD(SUBSTR(wsr_startdate, LOCATE('/', wsr_startdate) + 1, LOCATE('/', wsr_startdate, LOCATE('/', wsr_startdate) + 1) - LOCATE('/', wsr_startdate) - 1), 2, '0'), '-',\n",
					"                                    LPAD(LEFT(wsr_startdate, LOCATE('/', wsr_startdate) - 1), 2, '0')\n",
					"                                )\n",
					"                            ELSE wsr_startdate\n",
					"                        END AS DATE\n",
					"                    )\n",
					"                ) / 7) % 2) = 0 THEN 1 \n",
					"                ELSE 2 \n",
					"            END\n",
					"        ELSE 1\n",
					"    END AS Currentweek,\n",
					"    \n",
					"    ---- Last modified timestamp\n",
					"    CASE \n",
					"        WHEN wsr_lastmodified IS NOT NULL THEN\n",
					"            TRY_CAST(\n",
					"                CASE \n",
					"                    WHEN wsr_lastmodified RLIKE '^\\\\d{2}/\\\\d{2}/\\\\d{4}' THEN\n",
					"                        CONCAT(\n",
					"                            SUBSTR(wsr_lastmodified, 7, 4), '-',\n",
					"                            SUBSTR(wsr_lastmodified, 4, 2), '-',\n",
					"                            SUBSTR(wsr_lastmodified, 1, 2)\n",
					"                        )\n",
					"                    ELSE wsr_lastmodified\n",
					"                END AS TIMESTAMP\n",
					"            )\n",
					"        ELSE NULL\n",
					"    END AS Lastmodified,\n",
					"    \n",
					"    -- Ingestion timestamp\n",
					"    CASE \n",
					"        WHEN ingested_datetime IS NOT NULL THEN\n",
					"            TRY_CAST(ingested_datetime AS TIMESTAMP)\n",
					"        ELSE current_timestamp()\n",
					"    END AS IngestionDate\n",
					"\n",
					"FROM parsed_hours;"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": false
				},
				"source": [
					"import json\n",
					"\n",
					"# Initialize result dictionary\n",
					"result = {\n",
					"    \"status\": \"success\",\n",
					"    \"record_count\": 0,\n",
					"    \"deleted_count\": 0,\n",
					"    \"inserted_count\": 0,\n",
					"    \"storage_account\": \"\",\n",
					"    \"operation_type\": \"work_schedule_rule_processing\",\n",
					"    \"error_message\": None\n",
					"}\n",
					"\n",
					"try:\n",
					"    logInfo(\"Starting Work Schedule Rule processing\")\n",
					"    \n",
					"    # Get storage account \n",
					"    storage_account = mssparkutils.notebook.run('/utils/py_utils_get_storage_account')\n",
					"    result[\"storage_account\"] = storage_account.rstrip('/')\n",
					"    logInfo(f\"Using storage account: {storage_account}\")\n",
					"    \n",
					"    # Check source table exists\n",
					"    logInfo(\"Validating source table: odw_standardised_db.workschedulerule_weekly\")\n",
					"    if not spark.catalog.tableExists(\"odw_standardised_db.workschedulerule_weekly\"):\n",
					"        raise Exception(\"Source table odw_standardised_db.workschedulerule_weekly does not exist\")\n",
					"    \n",
					"    # Check target table exists\n",
					"    logInfo(\"Validating target table: odw_harmonised_db.sap_hr_workschedulerule\")\n",
					"    if not spark.catalog.tableExists(\"odw_harmonised_db.sap_hr_workschedulerule\"):\n",
					"        raise Exception(\"Target table odw_harmonised_db.sap_hr_workschedulerule does not exist\")\n",
					"    \n",
					"    # Get current record count before deletion\n",
					"    logInfo(\"Getting current record count before processing\")\n",
					"    current_count = spark.sql(\"\"\"\n",
					"        SELECT COUNT(*) FROM odw_harmonised_db.sap_hr_workschedulerule\n",
					"    \"\"\").collect()[0][0]\n",
					"    result[\"deleted_count\"] = current_count\n",
					"    logInfo(f\"Current records in target table: {current_count}\")\n",
					"    \n",
					"    # Validate source data\n",
					"    logInfo(\"Validating source data quality\")\n",
					"    source_count = spark.sql(\"\"\"\n",
					"        SELECT COUNT(*) FROM odw_standardised_db.workschedulerule_weekly\n",
					"    \"\"\").collect()[0][0]\n",
					"    logInfo(f\"Source records available: {source_count}\")\n",
					"    \n",
					"    if source_count == 0:\n",
					"        logInfo(\"Warning: No source data found - proceeding with empty dataset\")\n",
					"    \n",
					"    # Execute the main processing query\n",
					"    logInfo(\"Starting main work schedule rule processing operation\")\n",
					"    spark.sql(\"\"\"\n",
					"        DELETE FROM odw_harmonised_db.sap_hr_workschedulerule\n",
					"    \"\"\")\n",
					"    logInfo(f\"Successfully deleted {current_count} existing records\")\n",
					"    \n",
					"    # Execute the complex INSERT operation\n",
					"    logInfo(\"Executing complex work schedule rule parsing and insertion\")\n",
					"    spark.sql(\"\"\"\n",
					"        INSERT INTO odw_harmonised_db.sap_hr_workschedulerule (\n",
					"            WorkScheduleRule,\n",
					"            WorkScheduleCode,\n",
					"            MoWk1, TuWk1, WeWk1, ThWk1, FrWk1,\n",
					"            MoWk2, TuWk2, WeWk2, ThWk2, FrWk2,\n",
					"            WkHrsWk1, WkHrsWk2,\n",
					"            AvgWkHrs,\n",
					"            WSRstart,\n",
					"            Currentweek,\n",
					"            Lastmodified,\n",
					"            IngestionDate\n",
					"        )\n",
					"        WITH normalized_data AS (\n",
					"            SELECT \n",
					"                wsr_name,\n",
					"                wsr_code,\n",
					"                wsr_description,\n",
					"                wsr_startdate,\n",
					"                wsr_lastmodified,\n",
					"                ingested_datetime,\n",
					"                \n",
					"                -- Normalize and clean description\n",
					"                regexp_replace(\n",
					"                    regexp_replace(\n",
					"                        regexp_replace(\n",
					"                            regexp_replace(\n",
					"                                regexp_replace(lower(wsr_description), \n",
					"                                    'monday|mon\\\\.?', 'mon'),\n",
					"                                'tuesday|tue\\\\.?', 'tue'),\n",
					"                            'wednesday|wed\\\\.?', 'wed'),\n",
					"                        'thursday|thu\\\\.?|thus', 'thu'),\n",
					"                    'friday|fri\\\\.?', 'fri'\n",
					"                ) AS clean_desc,\n",
					"                \n",
					"                -- Extract week 1 and week 2 sections\n",
					"                CASE \n",
					"                    WHEN locate('week 2', lower(wsr_description)) > 0 THEN\n",
					"                        trim(substring(lower(wsr_description), 1, locate('week 2', lower(wsr_description)) - 1))\n",
					"                    WHEN locate('wk 2', lower(wsr_description)) > 0 THEN\n",
					"                        trim(substring(lower(wsr_description), 1, locate('wk 2', lower(wsr_description)) - 1))\n",
					"                    ELSE lower(wsr_description)\n",
					"                END AS week1_section,\n",
					"                \n",
					"                CASE \n",
					"                    WHEN locate('week 2', lower(wsr_description)) > 0 THEN\n",
					"                        trim(substring(lower(wsr_description), locate('week 2', lower(wsr_description))))\n",
					"                    WHEN locate('wk 2', lower(wsr_description)) > 0 THEN\n",
					"                        trim(substring(lower(wsr_description), locate('wk 2', lower(wsr_description))))\n",
					"                    ELSE lower(wsr_description)\n",
					"                END AS week2_section\n",
					"                \n",
					"            FROM odw_standardised_db.workschedulerule_weekly\n",
					"        ),\n",
					"\n",
					"        parsed_hours AS (\n",
					"            SELECT \n",
					"                wsr_name,\n",
					"                wsr_code,\n",
					"                wsr_description,\n",
					"                wsr_startdate,\n",
					"                wsr_lastmodified,\n",
					"                ingested_datetime,\n",
					"                clean_desc,\n",
					"                week1_section,\n",
					"                week2_section,\n",
					"                \n",
					"                -- Parse Monday Week 1\n",
					"                CASE \n",
					"                    -- Handle \"mon-thu\" ranges with flexible minutes format\n",
					"                    WHEN week1_section RLIKE 'mon-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'mon-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                        COALESCE(CAST(regexp_extract(week1_section, 'mon-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                    WHEN week1_section RLIKE 'mon-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'mon-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                        COALESCE(CAST(regexp_extract(week1_section, 'mon-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                    WHEN week1_section RLIKE 'mon-wed.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'mon-wed.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                        COALESCE(CAST(regexp_extract(week1_section, 'mon-wed.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                    -- Handle individual \"monday\" mentions with flexible minutes\n",
					"                    WHEN week1_section RLIKE 'monday.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'monday.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                        COALESCE(CAST(regexp_extract(week1_section, 'monday.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                    WHEN week1_section RLIKE 'mon.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'mon.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                        COALESCE(CAST(regexp_extract(week1_section, 'mon.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                    -- Handle hours without minutes\n",
					"                    WHEN week1_section RLIKE 'mon-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'mon-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                    WHEN week1_section RLIKE 'mon-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'mon-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                    WHEN week1_section RLIKE 'monday.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'monday.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                    WHEN week1_section RLIKE 'mon.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'mon.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                    ELSE 0.0\n",
					"                END AS mo_wk1,\n",
					"                \n",
					"                -- Parse Tuesday Week 1\n",
					"                CASE \n",
					"                    -- Handle ranges that include Tuesday with flexible minutes format\n",
					"                    WHEN week1_section RLIKE 'tue-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' OR \n",
					"                         week1_section RLIKE 'mon-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' OR\n",
					"                         week1_section RLIKE 'tue-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' OR\n",
					"                         week1_section RLIKE 'mon-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                        CASE \n",
					"                            WHEN week1_section RLIKE 'tue-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                                CAST(regexp_extract(week1_section, 'tue-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                                COALESCE(CAST(regexp_extract(week1_section, 'tue-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                            WHEN week1_section RLIKE 'mon-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                                CAST(regexp_extract(week1_section, 'mon-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                                COALESCE(CAST(regexp_extract(week1_section, 'mon-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                            WHEN week1_section RLIKE 'tue-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                                CAST(regexp_extract(week1_section, 'tue-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                                COALESCE(CAST(regexp_extract(week1_section, 'tue-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                            ELSE\n",
					"                                CAST(regexp_extract(week1_section, 'mon-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                                COALESCE(CAST(regexp_extract(week1_section, 'mon-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                        END\n",
					"                    -- Handle individual Tuesday mentions with flexible minutes\n",
					"                    WHEN week1_section RLIKE 'tuesday.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'tuesday.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                        COALESCE(CAST(regexp_extract(week1_section, 'tuesday.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                    WHEN week1_section RLIKE 'tue.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'tue.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                        COALESCE(CAST(regexp_extract(week1_section, 'tue.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                    -- Handle hours without minutes\n",
					"                    WHEN week1_section RLIKE 'tue-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?' OR\n",
					"                         week1_section RLIKE 'mon-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?' OR\n",
					"                         week1_section RLIKE 'tue-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?' OR\n",
					"                         week1_section RLIKE 'mon-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                        CASE \n",
					"                            WHEN week1_section RLIKE 'tue-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                                CAST(regexp_extract(week1_section, 'tue-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                            WHEN week1_section RLIKE 'mon-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                                CAST(regexp_extract(week1_section, 'mon-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                            WHEN week1_section RLIKE 'tue-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                                CAST(regexp_extract(week1_section, 'tue-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                            ELSE\n",
					"                                CAST(regexp_extract(week1_section, 'mon-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                        END\n",
					"                    WHEN week1_section RLIKE 'tuesday.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'tuesday.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                    WHEN week1_section RLIKE 'tue.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'tue.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                    ELSE 0.0\n",
					"                END AS tu_wk1,\n",
					"                \n",
					"                -- Parse Wednesday Week 1\n",
					"                CASE \n",
					"                    WHEN week1_section RLIKE 'wed-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' OR\n",
					"                         week1_section RLIKE 'mon-wed.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' OR\n",
					"                         week1_section RLIKE 'tue-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' OR\n",
					"                         week1_section RLIKE 'mon-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' OR\n",
					"                         week1_section RLIKE 'mon-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                        CASE \n",
					"                            WHEN week1_section RLIKE 'wed-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                                CAST(regexp_extract(week1_section, 'wed-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                                COALESCE(CAST(regexp_extract(week1_section, 'wed-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                            WHEN week1_section RLIKE 'mon-wed.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                                CAST(regexp_extract(week1_section, 'mon-wed.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                                COALESCE(CAST(regexp_extract(week1_section, 'mon-wed.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                            WHEN week1_section RLIKE 'tue-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                                CAST(regexp_extract(week1_section, 'tue-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                                COALESCE(CAST(regexp_extract(week1_section, 'tue-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                            WHEN week1_section RLIKE 'mon-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                                CAST(regexp_extract(week1_section, 'mon-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                                COALESCE(CAST(regexp_extract(week1_section, 'mon-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                            ELSE\n",
					"                                CAST(regexp_extract(week1_section, 'mon-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                                COALESCE(CAST(regexp_extract(week1_section, 'mon-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                        END\n",
					"                    WHEN week1_section RLIKE 'wednesday.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'wednesday.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                        COALESCE(CAST(regexp_extract(week1_section, 'wednesday.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                    WHEN week1_section RLIKE 'wed.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'wed.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                        COALESCE(CAST(regexp_extract(week1_section, 'wed.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                    -- Handle hours without minutes\n",
					"                    WHEN week1_section RLIKE 'wed-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?' OR\n",
					"                         week1_section RLIKE 'mon-wed.*?(\\\\\\\\d+)\\\\\\\\s*hours?' OR\n",
					"                         week1_section RLIKE 'tue-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?' OR\n",
					"                         week1_section RLIKE 'mon-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?' OR\n",
					"                         week1_section RLIKE 'mon-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                        CASE \n",
					"                            WHEN week1_section RLIKE 'wed-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                                CAST(regexp_extract(week1_section, 'wed-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                            WHEN week1_section RLIKE 'mon-wed.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                                CAST(regexp_extract(week1_section, 'mon-wed.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                            WHEN week1_section RLIKE 'tue-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                                CAST(regexp_extract(week1_section, 'tue-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                            WHEN week1_section RLIKE 'mon-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                                CAST(regexp_extract(week1_section, 'mon-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                            ELSE\n",
					"                                CAST(regexp_extract(week1_section, 'mon-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                        END\n",
					"                    WHEN week1_section RLIKE 'wednesday.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'wednesday.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                    WHEN week1_section RLIKE 'wed.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'wed.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                    ELSE 0.0\n",
					"                END AS we_wk1,\n",
					"                \n",
					"                -- Parse Thursday Week 1\n",
					"                CASE \n",
					"                    WHEN week1_section RLIKE 'thu-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' OR\n",
					"                         week1_section RLIKE 'tue-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' OR\n",
					"                         week1_section RLIKE 'mon-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' OR\n",
					"                         week1_section RLIKE 'mon-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                        CASE \n",
					"                            WHEN week1_section RLIKE 'thu-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                                CAST(regexp_extract(week1_section, 'thu-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                                COALESCE(CAST(regexp_extract(week1_section, 'thu-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                            WHEN week1_section RLIKE 'tue-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                                CAST(regexp_extract(week1_section, 'tue-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                                COALESCE(CAST(regexp_extract(week1_section, 'tue-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                            WHEN week1_section RLIKE 'mon-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                                CAST(regexp_extract(week1_section, 'mon-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                                COALESCE(CAST(regexp_extract(week1_section, 'mon-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                            ELSE\n",
					"                                CAST(regexp_extract(week1_section, 'mon-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                                COALESCE(CAST(regexp_extract(week1_section, 'mon-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                        END\n",
					"                    WHEN week1_section RLIKE 'thursday.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'thursday.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                        COALESCE(CAST(regexp_extract(week1_section, 'thursday.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                    WHEN week1_section RLIKE 'thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                        COALESCE(CAST(regexp_extract(week1_section, 'thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                    -- Handle hours without minutes\n",
					"                    WHEN week1_section RLIKE 'thu-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?' OR\n",
					"                         week1_section RLIKE 'tue-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?' OR\n",
					"                         week1_section RLIKE 'mon-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?' OR\n",
					"                         week1_section RLIKE 'mon-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                        CASE \n",
					"                            WHEN week1_section RLIKE 'thu-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                                CAST(regexp_extract(week1_section, 'thu-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                            WHEN week1_section RLIKE 'tue-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                                CAST(regexp_extract(week1_section, 'tue-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                            WHEN week1_section RLIKE 'mon-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                                CAST(regexp_extract(week1_section, 'mon-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                            ELSE\n",
					"                                CAST(regexp_extract(week1_section, 'mon-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                        END\n",
					"                    WHEN week1_section RLIKE 'thursday.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'thursday.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                    WHEN week1_section RLIKE 'thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                    ELSE 0.0\n",
					"                END AS th_wk1,\n",
					"                \n",
					"                -- Parse Friday Week 1\n",
					"                CASE \n",
					"                    WHEN week1_section RLIKE 'fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' OR\n",
					"                         week1_section RLIKE 'friday.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' OR\n",
					"                         week1_section RLIKE 'mon-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' OR\n",
					"                         week1_section RLIKE 'thu-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                        CASE \n",
					"                            WHEN week1_section RLIKE 'friday.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                                CAST(regexp_extract(week1_section, 'friday.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                                COALESCE(CAST(regexp_extract(week1_section, 'friday.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                            WHEN week1_section RLIKE 'fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                                CAST(regexp_extract(week1_section, 'fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                                COALESCE(CAST(regexp_extract(week1_section, 'fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                            WHEN week1_section RLIKE 'thu-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                                CAST(regexp_extract(week1_section, 'thu-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                                COALESCE(CAST(regexp_extract(week1_section, 'thu-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                            ELSE\n",
					"                                CAST(regexp_extract(week1_section, 'mon-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                                COALESCE(CAST(regexp_extract(week1_section, 'mon-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                        END\n",
					"                    -- Handle hours without minutes\n",
					"                    WHEN week1_section RLIKE 'friday.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'friday.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                    WHEN week1_section RLIKE 'fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                    WHEN week1_section RLIKE 'thu-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'thu-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                    WHEN week1_section RLIKE 'mon-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'mon-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                    ELSE 0.0\n",
					"                END AS fr_wk1,\n",
					"                \n",
					"                -- Parse Week 2 hours (simplified version for brevity)\n",
					"                CASE \n",
					"                    WHEN week2_section RLIKE 'mon.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)?\\\\\\\\s*min' THEN\n",
					"                        CAST(regexp_extract(week2_section, 'mon.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)?\\\\\\\\s*min', 1) AS DOUBLE) +\n",
					"                        COALESCE(CAST(regexp_extract(week2_section, 'mon.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)?\\\\\\\\s*min', 2) AS DOUBLE), 0) / 60.0\n",
					"                    WHEN week2_section RLIKE 'mon.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                        CAST(regexp_extract(week2_section, 'mon.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                    ELSE 0.0\n",
					"                END AS mo_wk2,\n",
					"                \n",
					"                CASE \n",
					"                    WHEN week2_section RLIKE 'tue.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)?\\\\\\\\s*min' THEN\n",
					"                        CAST(regexp_extract(week2_section, 'tue.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)?\\\\\\\\s*min', 1) AS DOUBLE) +\n",
					"                        COALESCE(CAST(regexp_extract(week2_section, 'tue.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)?\\\\\\\\s*min', 2) AS DOUBLE), 0) / 60.0\n",
					"                    WHEN week2_section RLIKE 'tue.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                        CAST(regexp_extract(week2_section, 'tue.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                    ELSE 0.0\n",
					"                END AS tu_wk2,\n",
					"                \n",
					"                CASE \n",
					"                    WHEN week2_section RLIKE 'wed.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)?\\\\\\\\s*min' THEN\n",
					"                        CAST(regexp_extract(week2_section, 'wed.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)?\\\\\\\\s*min', 1) AS DOUBLE) +\n",
					"                        COALESCE(CAST(regexp_extract(week2_section, 'wed.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)?\\\\\\\\s*min', 2) AS DOUBLE), 0) / 60.0\n",
					"                    WHEN week2_section RLIKE 'wed.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                        CAST(regexp_extract(week2_section, 'wed.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                    ELSE 0.0\n",
					"                END AS we_wk2,\n",
					"                \n",
					"                CASE \n",
					"                    WHEN week2_section RLIKE 'thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)?\\\\\\\\s*min' THEN\n",
					"                        CAST(regexp_extract(week2_section, 'thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)?\\\\\\\\s*min', 1) AS DOUBLE) +\n",
					"                        COALESCE(CAST(regexp_extract(week2_section, 'thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)?\\\\\\\\s*min', 2) AS DOUBLE), 0) / 60.0\n",
					"                    WHEN week2_section RLIKE 'thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                        CAST(regexp_extract(week2_section, 'thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                    ELSE 0.0\n",
					"                END AS th_wk2,\n",
					"                \n",
					"                CASE \n",
					"                    WHEN week2_section RLIKE 'fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)?\\\\\\\\s*min' THEN\n",
					"                        CAST(regexp_extract(week2_section, 'fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)?\\\\\\\\s*min', 1) AS DOUBLE) +\n",
					"                        COALESCE(CAST(regexp_extract(week2_section, 'fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)?\\\\\\\\s*min', 2) AS DOUBLE), 0) / 60.0\n",
					"                    WHEN week2_section RLIKE 'fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                        CAST(regexp_extract(week2_section, 'fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                    ELSE 0.0\n",
					"                END AS fr_wk2\n",
					"                \n",
					"            FROM normalized_data\n",
					"        )\n",
					"\n",
					"        SELECT \n",
					"            -- Direct field mappings\n",
					"            wsr_name AS WorkScheduleRule,\n",
					"            wsr_code AS WorkScheduleCode,\n",
					"            \n",
					"            -- Parsed daily hours\n",
					"            ROUND(mo_wk1, 2) AS MoWk1,\n",
					"            ROUND(tu_wk1, 2) AS TuWk1,\n",
					"            ROUND(we_wk1, 2) AS WeWk1,\n",
					"            ROUND(th_wk1, 2) AS ThWk1,\n",
					"            ROUND(fr_wk1, 2) AS FrWk1,\n",
					"            ROUND(mo_wk2, 2) AS MoWk2,\n",
					"            ROUND(tu_wk2, 2) AS TuWk2,\n",
					"            ROUND(we_wk2, 2) AS WeWk2,\n",
					"            ROUND(th_wk2, 2) AS ThWk2,\n",
					"            ROUND(fr_wk2, 2) AS FrWk2,\n",
					"            \n",
					"            -- Calculate weekly totals\n",
					"            ROUND(mo_wk1 + tu_wk1 + we_wk1 + th_wk1 + fr_wk1, 2) AS WkHrsWk1,\n",
					"            ROUND(mo_wk2 + tu_wk2 + we_wk2 + th_wk2 + fr_wk2, 2) AS WkHrsWk2,\n",
					"            \n",
					"            -- Calculate average weekly hours\n",
					"            ROUND((mo_wk1 + tu_wk1 + we_wk1 + th_wk1 + fr_wk1 + mo_wk2 + tu_wk2 + we_wk2 + th_wk2 + fr_wk2) / 2, 2) AS AvgWkHrs,\n",
					"            \n",
					"            -- Date conversion - Handle DD/MM/YYYY format\n",
					"            CASE \n",
					"                WHEN wsr_startdate IS NOT NULL THEN\n",
					"                    TRY_CAST(\n",
					"                        CASE \n",
					"                            WHEN wsr_startdate RLIKE '^\\\\\\\\d{1,2}/\\\\\\\\d{1,2}/\\\\\\\\d{4}' THEN\n",
					"                                CONCAT(\n",
					"                                    RIGHT(wsr_startdate, 4), '-',\n",
					"                                    LPAD(SUBSTR(wsr_startdate, LOCATE('/', wsr_startdate) + 1, LOCATE('/', wsr_startdate, LOCATE('/', wsr_startdate) + 1) - LOCATE('/', wsr_startdate) - 1), 2, '0'), '-',\n",
					"                                    LPAD(LEFT(wsr_startdate, LOCATE('/', wsr_startdate) - 1), 2, '0')\n",
					"                                )\n",
					"                            ELSE wsr_startdate\n",
					"                        END AS DATE\n",
					"                    )\n",
					"                ELSE NULL\n",
					"            END AS WSRstart,\n",
					"            \n",
					"            -- Calculate current week (now depends on properly parsed date)\n",
					"            CASE \n",
					"                WHEN wsr_startdate IS NOT NULL THEN\n",
					"                    CASE \n",
					"                        WHEN ((datediff(current_date(), \n",
					"                            TRY_CAST(\n",
					"                                CASE \n",
					"                                    WHEN wsr_startdate RLIKE '^\\\\\\\\d{1,2}/\\\\\\\\d{1,2}/\\\\\\\\d{4}' THEN\n",
					"                                        CONCAT(\n",
					"                                            RIGHT(wsr_startdate, 4), '-',\n",
					"                                            LPAD(SUBSTR(wsr_startdate, LOCATE('/', wsr_startdate) + 1, LOCATE('/', wsr_startdate, LOCATE('/', wsr_startdate) + 1) - LOCATE('/', wsr_startdate) - 1), 2, '0'), '-',\n",
					"                                            LPAD(LEFT(wsr_startdate, LOCATE('/', wsr_startdate) - 1), 2, '0')\n",
					"                                        )\n",
					"                                    ELSE wsr_startdate\n",
					"                                END AS DATE\n",
					"                            )\n",
					"                        ) / 7) % 2) = 0 THEN 1 \n",
					"                        ELSE 2 \n",
					"                    END\n",
					"                ELSE 1\n",
					"            END AS Currentweek,\n",
					"            \n",
					"            -- Last modified timestamp\n",
					"            CASE \n",
					"                WHEN wsr_lastmodified IS NOT NULL THEN\n",
					"                    TRY_CAST(\n",
					"                        CASE \n",
					"                            WHEN wsr_lastmodified RLIKE '^\\\\\\\\d{2}/\\\\\\\\d{2}/\\\\\\\\d{4}' THEN\n",
					"                                CONCAT(\n",
					"                                    SUBSTR(wsr_lastmodified, 7, 4), '-',\n",
					"                                    SUBSTR(wsr_lastmodified, 4, 2), '-',\n",
					"                                    SUBSTR(wsr_lastmodified, 1, 2)\n",
					"                                )\n",
					"                            ELSE wsr_lastmodified\n",
					"                        END AS TIMESTAMP\n",
					"                    )\n",
					"                ELSE NULL\n",
					"            END AS Lastmodified,\n",
					"            \n",
					"            -- Ingestion timestamp\n",
					"            CASE \n",
					"                WHEN ingested_datetime IS NOT NULL THEN\n",
					"                    TRY_CAST(ingested_datetime AS TIMESTAMP)\n",
					"                ELSE current_timestamp()\n",
					"            END AS IngestionDate\n",
					"\n",
					"        FROM parsed_hours\n",
					"    \"\"\")\n",
					"    \n",
					"    # Get final record count\n",
					"    logInfo(\"Getting final record count after processing\")\n",
					"    final_count = spark.sql(\"\"\"\n",
					"        SELECT COUNT(*) FROM odw_harmonised_db.sap_hr_workschedulerule\n",
					"    \"\"\").collect()[0][0]\n",
					"    result[\"record_count\"] = final_count\n",
					"    result[\"inserted_count\"] = final_count\n",
					"    logInfo(f\"Successfully inserted {final_count} records\")\n",
					"    \n",
					"    # Data quality checks\n",
					"    logInfo(\"Performing data quality validation\")\n",
					"    \n",
					"    # Check for records with valid work schedule rules\n",
					"    valid_rules_count = spark.sql(\"\"\"\n",
					"        SELECT COUNT(*) FROM odw_harmonised_db.sap_hr_workschedulerule \n",
					"        WHERE WorkScheduleRule IS NOT NULL AND TRIM(WorkScheduleRule) != ''\n",
					"    \"\"\").collect()[0][0]\n",
					"    logInfo(f\"Records with valid WorkScheduleRule: {valid_rules_count}\")\n",
					"    \n",
					"    # Check for records with parsed hours\n",
					"    parsed_hours_count = spark.sql(\"\"\"\n",
					"        SELECT COUNT(*) FROM odw_harmonised_db.sap_hr_workschedulerule \n",
					"        WHERE (MoWk1 + TuWk1 + WeWk1 + ThWk1 + FrWk1 + MoWk2 + TuWk2 + WeWk2 + ThWk2 + FrWk2) > 0\n",
					"    \"\"\").collect()[0][0]\n",
					"    logInfo(f\"Records with parsed working hours: {parsed_hours_count}\")\n",
					"    \n",
					"    # Check for records with valid average weekly hours\n",
					"    avg_hours_count = spark.sql(\"\"\"\n",
					"        SELECT COUNT(*) FROM odw_harmonised_db.sap_hr_workschedulerule \n",
					"        WHERE AvgWkHrs > 0 AND AvgWkHrs <= 80\n",
					"    \"\"\").collect()[0][0]\n",
					"    logInfo(f\"Records with reasonable average weekly hours (0-80): {avg_hours_count}\")\n",
					"    \n",
					"    # Add quality metrics to result\n",
					"    result[\"quality_metrics\"] = {\n",
					"        \"valid_rules\": valid_rules_count,\n",
					"        \"parsed_hours\": parsed_hours_count,\n",
					"        \"reasonable_avg_hours\": avg_hours_count,\n",
					"        \"quality_percentage\": round((parsed_hours_count / final_count * 100), 2) if final_count > 0 else 0\n",
					"    }\n",
					"    \n",
					"    logInfo(f\"Data quality: {result['quality_metrics']['quality_percentage']}% of records have parsed working hours\")\n",
					"    logInfo(\"Work Schedule Rule processing completed successfully\")\n",
					"\n",
					"except Exception as e:\n",
					"    # Capture error information and limit to 300 characters\n",
					"    error_msg = f\"Error in Work Schedule Rule processing: {str(e)}\"\n",
					"    logError(error_msg)\n",
					"    logException(e)\n",
					"    \n",
					"    # Update result for error case\n",
					"    result[\"status\"] = \"failed\"\n",
					"    result[\"error_message\"] = error_msg[:300]  # Truncate to 300 characters\n",
					"    result[\"record_count\"] = -1\n",
					"    result[\"deleted_count\"] = -1 \n",
					"    result[\"inserted_count\"] = -1\n",
					"    result[\"operation_type\"] = \"failed\"\n",
					"    \n",
					"    # Try to get current state for debugging\n",
					"    try:\n",
					"        current_count_after_error = spark.sql(\"\"\"\n",
					"            SELECT COUNT(*) FROM odw_harmonised_db.sap_hr_workschedulerule\n",
					"        \"\"\").collect()[0][0]\n",
					"        result[\"records_after_error\"] = current_count_after_error\n",
					"        logInfo(f\"Records remaining after error: {current_count_after_error}\")\n",
					"    except Exception as count_error:\n",
					"        logError(f\"Could not get record count after error: {str(count_error)}\")\n",
					"        result[\"records_after_error\"] = \"unknown\"\n",
					"    \n",
					"    # Re-raise the exception to ensure the notebook fails properly\n",
					"    raise e\n",
					"\n",
					"finally:\n",
					"    # Always flush logs regardless of success or failure\n",
					"    logInfo(\"Flushing logs\")\n",
					"    flushLogging()\n",
					"    \n",
					"    # Output the result as JSON for ADF to capture\n",
					"    mssparkutils.notebook.exit(json.dumps(result, indent=2))"
				],
				"execution_count": 5
			},
			{
				"cell_type": "code",
				"source": [
					"import json\n",
					"\n",
					"# Initialize result dictionary\n",
					"result = {\n",
					"    \"status\": \"success\",\n",
					"    \"record_count\": 0,\n",
					"    \"deleted_count\": 0,\n",
					"    \"inserted_count\": 0,\n",
					"    \"storage_account\": \"\",\n",
					"    \"operation_type\": \"work_schedule_rule_processing\",\n",
					"    \"error_message\": None\n",
					"}\n",
					"\n",
					"try:\n",
					"    logInfo(\"Starting Work Schedule Rule processing\")\n",
					"    \n",
					"    # Get storage account \n",
					"    storage_account = mssparkutils.notebook.run('/utils/py_utils_get_storage_account')\n",
					"    result[\"storage_account\"] = storage_account.rstrip('/')\n",
					"    logInfo(f\"Using storage account: {storage_account}\")\n",
					"    \n",
					"    # Check source table exists\n",
					"    logInfo(\"Validating source table: odw_standardised_db.workschedulerule_weekly\")\n",
					"    if not spark.catalog.tableExists(\"odw_standardised_db.workschedulerule_weekly\"):\n",
					"        raise Exception(\"Source table odw_standardised_db.workschedulerule_weekly does not exist\")\n",
					"    \n",
					"    # Check target table exists\n",
					"    logInfo(\"Validating target table: odw_harmonised_db.sap_hr_workschedulerule\")\n",
					"    if not spark.catalog.tableExists(\"odw_harmonised_db.sap_hr_workschedulerule\"):\n",
					"        raise Exception(\"Target table odw_harmonised_db.sap_hr_workschedulerule does not exist\")\n",
					"    \n",
					"    # Get current record count before deletion\n",
					"    logInfo(\"Getting current record count before processing\")\n",
					"    current_count = spark.sql(\"\"\"\n",
					"        SELECT COUNT(*) FROM odw_harmonised_db.sap_hr_workschedulerule\n",
					"    \"\"\").collect()[0][0]\n",
					"    result[\"deleted_count\"] = current_count\n",
					"    logInfo(f\"Current records in target table: {current_count}\")\n",
					"    \n",
					"    # Validate source data\n",
					"    logInfo(\"Validating source data quality\")\n",
					"    source_count = spark.sql(\"\"\"\n",
					"        SELECT COUNT(*) FROM odw_standardised_db.workschedulerule_weekly\n",
					"    \"\"\").collect()[0][0]\n",
					"    logInfo(f\"Source records available: {source_count}\")\n",
					"    \n",
					"    if source_count == 0:\n",
					"        logInfo(\"Warning: No source data found - proceeding with empty dataset\")\n",
					"    \n",
					"    # Execute the main processing query\n",
					"    logInfo(\"Starting main work schedule rule processing operation\")\n",
					"    spark.sql(\"\"\"\n",
					"        DELETE FROM odw_harmonised_db.sap_hr_workschedulerule\n",
					"    \"\"\")\n",
					"    logInfo(f\"Successfully deleted {current_count} existing records\")\n",
					"    \n",
					"    # Execute the complex INSERT operation\n",
					"    logInfo(\"Executing complex work schedule rule parsing and insertion\")\n",
					"    spark.sql(\"\"\"\n",
					"        INSERT INTO odw_harmonised_db.sap_hr_workschedulerule (\n",
					"            WorkScheduleRule,\n",
					"            WorkScheduleCode,\n",
					"            MoWk1, TuWk1, WeWk1, ThWk1, FrWk1,\n",
					"            MoWk2, TuWk2, WeWk2, ThWk2, FrWk2,\n",
					"            WkHrsWk1, WkHrsWk2,\n",
					"            AvgWkHrs,\n",
					"            WSRstart,\n",
					"            Currentweek,\n",
					"            Lastmodified,\n",
					"            IngestionDate\n",
					"        )\n",
					"        WITH normalized_data AS (\n",
					"            SELECT \n",
					"                wsr_name,\n",
					"                wsr_code,\n",
					"                wsr_description,\n",
					"                wsr_startdate,\n",
					"                wsr_lastmodified,\n",
					"                ingested_datetime,\n",
					"                \n",
					"                -- Normalize and clean description\n",
					"                regexp_replace(\n",
					"                    regexp_replace(\n",
					"                        regexp_replace(\n",
					"                            regexp_replace(\n",
					"                                regexp_replace(lower(wsr_description), \n",
					"                                    'monday|mon\\\\.?', 'mon'),\n",
					"                                'tuesday|tue\\\\.?', 'tue'),\n",
					"                            'wednesday|wed\\\\.?', 'wed'),\n",
					"                        'thursday|thu\\\\.?|thus', 'thu'),\n",
					"                    'friday|fri\\\\.?', 'fri'\n",
					"                ) AS clean_desc,\n",
					"                \n",
					"                -- Extract week 1 and week 2 sections\n",
					"                CASE \n",
					"                    WHEN locate('week 2', lower(wsr_description)) > 0 THEN\n",
					"                        trim(substring(lower(wsr_description), 1, locate('week 2', lower(wsr_description)) - 1))\n",
					"                    WHEN locate('wk 2', lower(wsr_description)) > 0 THEN\n",
					"                        trim(substring(lower(wsr_description), 1, locate('wk 2', lower(wsr_description)) - 1))\n",
					"                    ELSE lower(wsr_description)\n",
					"                END AS week1_section,\n",
					"                \n",
					"                CASE \n",
					"                    WHEN locate('week 2', lower(wsr_description)) > 0 THEN\n",
					"                        trim(substring(lower(wsr_description), locate('week 2', lower(wsr_description))))\n",
					"                    WHEN locate('wk 2', lower(wsr_description)) > 0 THEN\n",
					"                        trim(substring(lower(wsr_description), locate('wk 2', lower(wsr_description))))\n",
					"                    ELSE lower(wsr_description)\n",
					"                END AS week2_section\n",
					"                \n",
					"            FROM odw_standardised_db.workschedulerule_weekly\n",
					"        ),\n",
					"\n",
					"        parsed_hours AS (\n",
					"            SELECT \n",
					"                wsr_name,\n",
					"                wsr_code,\n",
					"                wsr_description,\n",
					"                wsr_startdate,\n",
					"                wsr_lastmodified,\n",
					"                ingested_datetime,\n",
					"                clean_desc,\n",
					"                week1_section,\n",
					"                week2_section,\n",
					"                \n",
					"                -- Parse Monday Week 1\n",
					"                CASE \n",
					"                    -- Handle \"mon-thu\" ranges with flexible minutes format\n",
					"                    WHEN week1_section RLIKE 'mon-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'mon-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                        COALESCE(CAST(regexp_extract(week1_section, 'mon-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                    WHEN week1_section RLIKE 'mon-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'mon-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                        COALESCE(CAST(regexp_extract(week1_section, 'mon-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                    WHEN week1_section RLIKE 'mon-wed.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'mon-wed.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                        COALESCE(CAST(regexp_extract(week1_section, 'mon-wed.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                    -- Handle individual \"monday\" mentions with flexible minutes\n",
					"                    WHEN week1_section RLIKE 'monday.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'monday.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                        COALESCE(CAST(regexp_extract(week1_section, 'monday.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                    WHEN week1_section RLIKE 'mon.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'mon.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                        COALESCE(CAST(regexp_extract(week1_section, 'mon.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                    -- Handle hours without minutes\n",
					"                    WHEN week1_section RLIKE 'mon-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'mon-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                    WHEN week1_section RLIKE 'mon-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'mon-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                    WHEN week1_section RLIKE 'monday.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'monday.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                    WHEN week1_section RLIKE 'mon.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'mon.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                    ELSE 0.0\n",
					"                END AS mo_wk1,\n",
					"                \n",
					"                -- Parse Tuesday Week 1\n",
					"                CASE \n",
					"                    -- Handle ranges that include Tuesday with flexible minutes format\n",
					"                    WHEN week1_section RLIKE 'tue-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' OR \n",
					"                         week1_section RLIKE 'mon-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' OR\n",
					"                         week1_section RLIKE 'tue-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' OR\n",
					"                         week1_section RLIKE 'mon-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                        CASE \n",
					"                            WHEN week1_section RLIKE 'tue-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                                CAST(regexp_extract(week1_section, 'tue-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                                COALESCE(CAST(regexp_extract(week1_section, 'tue-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                            WHEN week1_section RLIKE 'mon-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                                CAST(regexp_extract(week1_section, 'mon-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                                COALESCE(CAST(regexp_extract(week1_section, 'mon-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                            WHEN week1_section RLIKE 'tue-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                                CAST(regexp_extract(week1_section, 'tue-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                                COALESCE(CAST(regexp_extract(week1_section, 'tue-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                            ELSE\n",
					"                                CAST(regexp_extract(week1_section, 'mon-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                                COALESCE(CAST(regexp_extract(week1_section, 'mon-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                        END\n",
					"                    -- Handle individual Tuesday mentions with flexible minutes\n",
					"                    WHEN week1_section RLIKE 'tuesday.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'tuesday.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                        COALESCE(CAST(regexp_extract(week1_section, 'tuesday.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                    WHEN week1_section RLIKE 'tue.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'tue.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                        COALESCE(CAST(regexp_extract(week1_section, 'tue.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                    -- Handle hours without minutes\n",
					"                    WHEN week1_section RLIKE 'tue-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?' OR\n",
					"                         week1_section RLIKE 'mon-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?' OR\n",
					"                         week1_section RLIKE 'tue-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?' OR\n",
					"                         week1_section RLIKE 'mon-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                        CASE \n",
					"                            WHEN week1_section RLIKE 'tue-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                                CAST(regexp_extract(week1_section, 'tue-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                            WHEN week1_section RLIKE 'mon-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                                CAST(regexp_extract(week1_section, 'mon-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                            WHEN week1_section RLIKE 'tue-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                                CAST(regexp_extract(week1_section, 'tue-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                            ELSE\n",
					"                                CAST(regexp_extract(week1_section, 'mon-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                        END\n",
					"                    WHEN week1_section RLIKE 'tuesday.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'tuesday.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                    WHEN week1_section RLIKE 'tue.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'tue.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                    ELSE 0.0\n",
					"                END AS tu_wk1,\n",
					"                \n",
					"                -- Parse Wednesday Week 1\n",
					"                CASE \n",
					"                    WHEN week1_section RLIKE 'wed-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' OR\n",
					"                         week1_section RLIKE 'mon-wed.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' OR\n",
					"                         week1_section RLIKE 'tue-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' OR\n",
					"                         week1_section RLIKE 'mon-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' OR\n",
					"                         week1_section RLIKE 'mon-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                        CASE \n",
					"                            WHEN week1_section RLIKE 'wed-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                                CAST(regexp_extract(week1_section, 'wed-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                                COALESCE(CAST(regexp_extract(week1_section, 'wed-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                            WHEN week1_section RLIKE 'mon-wed.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                                CAST(regexp_extract(week1_section, 'mon-wed.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                                COALESCE(CAST(regexp_extract(week1_section, 'mon-wed.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                            WHEN week1_section RLIKE 'tue-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                                CAST(regexp_extract(week1_section, 'tue-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                                COALESCE(CAST(regexp_extract(week1_section, 'tue-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                            WHEN week1_section RLIKE 'mon-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                                CAST(regexp_extract(week1_section, 'mon-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                                COALESCE(CAST(regexp_extract(week1_section, 'mon-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                            ELSE\n",
					"                                CAST(regexp_extract(week1_section, 'mon-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                                COALESCE(CAST(regexp_extract(week1_section, 'mon-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                        END\n",
					"                    WHEN week1_section RLIKE 'wednesday.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'wednesday.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                        COALESCE(CAST(regexp_extract(week1_section, 'wednesday.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                    WHEN week1_section RLIKE 'wed.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'wed.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                        COALESCE(CAST(regexp_extract(week1_section, 'wed.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                    -- Handle hours without minutes\n",
					"                    WHEN week1_section RLIKE 'wed-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?' OR\n",
					"                         week1_section RLIKE 'mon-wed.*?(\\\\\\\\d+)\\\\\\\\s*hours?' OR\n",
					"                         week1_section RLIKE 'tue-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?' OR\n",
					"                         week1_section RLIKE 'mon-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?' OR\n",
					"                         week1_section RLIKE 'mon-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                        CASE \n",
					"                            WHEN week1_section RLIKE 'wed-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                                CAST(regexp_extract(week1_section, 'wed-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                            WHEN week1_section RLIKE 'mon-wed.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                                CAST(regexp_extract(week1_section, 'mon-wed.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                            WHEN week1_section RLIKE 'tue-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                                CAST(regexp_extract(week1_section, 'tue-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                            WHEN week1_section RLIKE 'mon-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                                CAST(regexp_extract(week1_section, 'mon-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                            ELSE\n",
					"                                CAST(regexp_extract(week1_section, 'mon-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                        END\n",
					"                    WHEN week1_section RLIKE 'wednesday.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'wednesday.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                    WHEN week1_section RLIKE 'wed.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'wed.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                    ELSE 0.0\n",
					"                END AS we_wk1,\n",
					"                \n",
					"                -- Parse Thursday Week 1\n",
					"                CASE \n",
					"                    WHEN week1_section RLIKE 'thu-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' OR\n",
					"                         week1_section RLIKE 'tue-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' OR\n",
					"                         week1_section RLIKE 'mon-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' OR\n",
					"                         week1_section RLIKE 'mon-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                        CASE \n",
					"                            WHEN week1_section RLIKE 'thu-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                                CAST(regexp_extract(week1_section, 'thu-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                                COALESCE(CAST(regexp_extract(week1_section, 'thu-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                            WHEN week1_section RLIKE 'tue-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                                CAST(regexp_extract(week1_section, 'tue-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                                COALESCE(CAST(regexp_extract(week1_section, 'tue-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                            WHEN week1_section RLIKE 'mon-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                                CAST(regexp_extract(week1_section, 'mon-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                                COALESCE(CAST(regexp_extract(week1_section, 'mon-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                            ELSE\n",
					"                                CAST(regexp_extract(week1_section, 'mon-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                                COALESCE(CAST(regexp_extract(week1_section, 'mon-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                        END\n",
					"                    WHEN week1_section RLIKE 'thursday.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'thursday.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                        COALESCE(CAST(regexp_extract(week1_section, 'thursday.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                    WHEN week1_section RLIKE 'thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                        COALESCE(CAST(regexp_extract(week1_section, 'thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                    -- Handle hours without minutes\n",
					"                    WHEN week1_section RLIKE 'thu-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?' OR\n",
					"                         week1_section RLIKE 'tue-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?' OR\n",
					"                         week1_section RLIKE 'mon-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?' OR\n",
					"                         week1_section RLIKE 'mon-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                        CASE \n",
					"                            WHEN week1_section RLIKE 'thu-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                                CAST(regexp_extract(week1_section, 'thu-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                            WHEN week1_section RLIKE 'tue-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                                CAST(regexp_extract(week1_section, 'tue-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                            WHEN week1_section RLIKE 'mon-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                                CAST(regexp_extract(week1_section, 'mon-thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                            ELSE\n",
					"                                CAST(regexp_extract(week1_section, 'mon-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                        END\n",
					"                    WHEN week1_section RLIKE 'thursday.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'thursday.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                    WHEN week1_section RLIKE 'thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                    ELSE 0.0\n",
					"                END AS th_wk1,\n",
					"                \n",
					"                -- Parse Friday Week 1\n",
					"                CASE \n",
					"                    WHEN week1_section RLIKE 'fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' OR\n",
					"                         week1_section RLIKE 'friday.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' OR\n",
					"                         week1_section RLIKE 'mon-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' OR\n",
					"                         week1_section RLIKE 'thu-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                        CASE \n",
					"                            WHEN week1_section RLIKE 'friday.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                                CAST(regexp_extract(week1_section, 'friday.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                                COALESCE(CAST(regexp_extract(week1_section, 'friday.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                            WHEN week1_section RLIKE 'fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                                CAST(regexp_extract(week1_section, 'fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                                COALESCE(CAST(regexp_extract(week1_section, 'fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                            WHEN week1_section RLIKE 'thu-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?' THEN\n",
					"                                CAST(regexp_extract(week1_section, 'thu-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                                COALESCE(CAST(regexp_extract(week1_section, 'thu-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                            ELSE\n",
					"                                CAST(regexp_extract(week1_section, 'mon-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 1) AS DOUBLE) +\n",
					"                                COALESCE(CAST(regexp_extract(week1_section, 'mon-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)\\\\\\\\s*(min|minutes)?', 2) AS DOUBLE), 0) / 60.0\n",
					"                        END\n",
					"                    -- Handle hours without minutes\n",
					"                    WHEN week1_section RLIKE 'friday.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'friday.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                    WHEN week1_section RLIKE 'fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                    WHEN week1_section RLIKE 'thu-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'thu-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                    WHEN week1_section RLIKE 'mon-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                        CAST(regexp_extract(week1_section, 'mon-fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                    ELSE 0.0\n",
					"                END AS fr_wk1,\n",
					"                \n",
					"                -- Parse Week 2 hours (simplified version for brevity)\n",
					"                CASE \n",
					"                    WHEN week2_section RLIKE 'mon.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)?\\\\\\\\s*min' THEN\n",
					"                        CAST(regexp_extract(week2_section, 'mon.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)?\\\\\\\\s*min', 1) AS DOUBLE) +\n",
					"                        COALESCE(CAST(regexp_extract(week2_section, 'mon.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)?\\\\\\\\s*min', 2) AS DOUBLE), 0) / 60.0\n",
					"                    WHEN week2_section RLIKE 'mon.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                        CAST(regexp_extract(week2_section, 'mon.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                    ELSE 0.0\n",
					"                END AS mo_wk2,\n",
					"                \n",
					"                CASE \n",
					"                    WHEN week2_section RLIKE 'tue.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)?\\\\\\\\s*min' THEN\n",
					"                        CAST(regexp_extract(week2_section, 'tue.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)?\\\\\\\\s*min', 1) AS DOUBLE) +\n",
					"                        COALESCE(CAST(regexp_extract(week2_section, 'tue.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)?\\\\\\\\s*min', 2) AS DOUBLE), 0) / 60.0\n",
					"                    WHEN week2_section RLIKE 'tue.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                        CAST(regexp_extract(week2_section, 'tue.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                    ELSE 0.0\n",
					"                END AS tu_wk2,\n",
					"                \n",
					"                CASE \n",
					"                    WHEN week2_section RLIKE 'wed.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)?\\\\\\\\s*min' THEN\n",
					"                        CAST(regexp_extract(week2_section, 'wed.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)?\\\\\\\\s*min', 1) AS DOUBLE) +\n",
					"                        COALESCE(CAST(regexp_extract(week2_section, 'wed.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)?\\\\\\\\s*min', 2) AS DOUBLE), 0) / 60.0\n",
					"                    WHEN week2_section RLIKE 'wed.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                        CAST(regexp_extract(week2_section, 'wed.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                    ELSE 0.0\n",
					"                END AS we_wk2,\n",
					"                \n",
					"                CASE \n",
					"                    WHEN week2_section RLIKE 'thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)?\\\\\\\\s*min' THEN\n",
					"                        CAST(regexp_extract(week2_section, 'thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)?\\\\\\\\s*min', 1) AS DOUBLE) +\n",
					"                        COALESCE(CAST(regexp_extract(week2_section, 'thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)?\\\\\\\\s*min', 2) AS DOUBLE), 0) / 60.0\n",
					"                    WHEN week2_section RLIKE 'thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                        CAST(regexp_extract(week2_section, 'thu.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                    ELSE 0.0\n",
					"                END AS th_wk2,\n",
					"                \n",
					"                CASE \n",
					"                    WHEN week2_section RLIKE 'fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)?\\\\\\\\s*min' THEN\n",
					"                        CAST(regexp_extract(week2_section, 'fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)?\\\\\\\\s*min', 1) AS DOUBLE) +\n",
					"                        COALESCE(CAST(regexp_extract(week2_section, 'fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?\\\\\\\\s*(\\\\\\\\d+)?\\\\\\\\s*min', 2) AS DOUBLE), 0) / 60.0\n",
					"                    WHEN week2_section RLIKE 'fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?' THEN\n",
					"                        CAST(regexp_extract(week2_section, 'fri.*?(\\\\\\\\d+)\\\\\\\\s*hours?', 1) AS DOUBLE)\n",
					"                    ELSE 0.0\n",
					"                END AS fr_wk2\n",
					"                \n",
					"            FROM normalized_data\n",
					"        )\n",
					"\n",
					"        SELECT \n",
					"            -- Direct field mappings\n",
					"            wsr_name AS WorkScheduleRule,\n",
					"            wsr_code AS WorkScheduleCode,\n",
					"            \n",
					"            -- Parsed daily hours\n",
					"            ROUND(mo_wk1, 2) AS MoWk1,\n",
					"            ROUND(tu_wk1, 2) AS TuWk1,\n",
					"            ROUND(we_wk1, 2) AS WeWk1,\n",
					"            ROUND(th_wk1, 2) AS ThWk1,\n",
					"            ROUND(fr_wk1, 2) AS FrWk1,\n",
					"            ROUND(mo_wk2, 2) AS MoWk2,\n",
					"            ROUND(tu_wk2, 2) AS TuWk2,\n",
					"            ROUND(we_wk2, 2) AS WeWk2,\n",
					"            ROUND(th_wk2, 2) AS ThWk2,\n",
					"            ROUND(fr_wk2, 2) AS FrWk2,\n",
					"            \n",
					"            -- Calculate weekly totals\n",
					"            ROUND(mo_wk1 + tu_wk1 + we_wk1 + th_wk1 + fr_wk1, 2) AS WkHrsWk1,\n",
					"            ROUND(mo_wk2 + tu_wk2 + we_wk2 + th_wk2 + fr_wk2, 2) AS WkHrsWk2,\n",
					"            \n",
					"            -- Calculate average weekly hours\n",
					"            ROUND((mo_wk1 + tu_wk1 + we_wk1 + th_wk1 + fr_wk1 + mo_wk2 + tu_wk2 + we_wk2 + th_wk2 + fr_wk2) / 2, 2) AS AvgWkHrs,\n",
					"            \n",
					"            -- Date conversion - Handle DD/MM/YYYY format\n",
					"            CASE \n",
					"                WHEN wsr_startdate IS NOT NULL THEN\n",
					"                    TRY_CAST(\n",
					"                        CASE \n",
					"                            WHEN wsr_startdate RLIKE '^\\\\\\\\d{1,2}/\\\\\\\\d{1,2}/\\\\\\\\d{4}' THEN\n",
					"                                CONCAT(\n",
					"                                    RIGHT(wsr_startdate, 4), '-',\n",
					"                                    LPAD(SUBSTR(wsr_startdate, LOCATE('/', wsr_startdate) + 1, LOCATE('/', wsr_startdate, LOCATE('/', wsr_startdate) + 1) - LOCATE('/', wsr_startdate) - 1), 2, '0'), '-',\n",
					"                                    LPAD(LEFT(wsr_startdate, LOCATE('/', wsr_startdate) - 1), 2, '0')\n",
					"                                )\n",
					"                            ELSE wsr_startdate\n",
					"                        END AS DATE\n",
					"                    )\n",
					"                ELSE NULL\n",
					"            END AS WSRstart,\n",
					"            \n",
					"            -- Calculate current week (now depends on properly parsed date)\n",
					"            CASE \n",
					"                WHEN wsr_startdate IS NOT NULL THEN\n",
					"                    CASE \n",
					"                        WHEN ((datediff(current_date(), \n",
					"                            TRY_CAST(\n",
					"                                CASE \n",
					"                                    WHEN wsr_startdate RLIKE '^\\\\\\\\d{1,2}/\\\\\\\\d{1,2}/\\\\\\\\d{4}' THEN\n",
					"                                        CONCAT(\n",
					"                                            RIGHT(wsr_startdate, 4), '-',\n",
					"                                            LPAD(SUBSTR(wsr_startdate, LOCATE('/', wsr_startdate) + 1, LOCATE('/', wsr_startdate, LOCATE('/', wsr_startdate) + 1) - LOCATE('/', wsr_startdate) - 1), 2, '0'), '-',\n",
					"                                            LPAD(LEFT(wsr_startdate, LOCATE('/', wsr_startdate) - 1), 2, '0')\n",
					"                                        )\n",
					"                                    ELSE wsr_startdate\n",
					"                                END AS DATE\n",
					"                            )\n",
					"                        ) / 7) % 2) = 0 THEN 1 \n",
					"                        ELSE 2 \n",
					"                    END\n",
					"                ELSE 1\n",
					"            END AS Currentweek,\n",
					"            \n",
					"            -- Last modified timestamp\n",
					"            CASE \n",
					"                WHEN wsr_lastmodified IS NOT NULL THEN\n",
					"                    TRY_CAST(\n",
					"                        CASE \n",
					"                            WHEN wsr_lastmodified RLIKE '^\\\\\\\\d{2}/\\\\\\\\d{2}/\\\\\\\\d{4}' THEN\n",
					"                                CONCAT(\n",
					"                                    SUBSTR(wsr_lastmodified, 7, 4), '-',\n",
					"                                    SUBSTR(wsr_lastmodified, 4, 2), '-',\n",
					"                                    SUBSTR(wsr_lastmodified, 1, 2)\n",
					"                                )\n",
					"                            ELSE wsr_lastmodified\n",
					"                        END AS TIMESTAMP\n",
					"                    )\n",
					"                ELSE NULL\n",
					"            END AS Lastmodified,\n",
					"            \n",
					"            -- Ingestion timestamp\n",
					"            CASE \n",
					"                WHEN ingested_datetime IS NOT NULL THEN\n",
					"                    TRY_CAST(ingested_datetime AS TIMESTAMP)\n",
					"                ELSE current_timestamp()\n",
					"            END AS IngestionDate\n",
					"\n",
					"        FROM parsed_hours\n",
					"    \"\"\")\n",
					"    \n",
					"    # Get final record count\n",
					"    logInfo(\"Getting final record count after processing\")\n",
					"    final_count = spark.sql(\"\"\"\n",
					"        SELECT COUNT(*) FROM odw_harmonised_db.sap_hr_workschedulerule\n",
					"    \"\"\").collect()[0][0]\n",
					"    result[\"record_count\"] = final_count\n",
					"    result[\"inserted_count\"] = final_count\n",
					"    logInfo(f\"Successfully inserted {final_count} records\")\n",
					"    \n",
					"    # Data quality checks\n",
					"    logInfo(\"Performing data quality validation\")\n",
					"    \n",
					"    # Check for records with valid work schedule rules\n",
					"    valid_rules_count = spark.sql(\"\"\"\n",
					"        SELECT COUNT(*) FROM odw_harmonised_db.sap_hr_workschedulerule \n",
					"        WHERE WorkScheduleRule IS NOT NULL AND TRIM(WorkScheduleRule) != ''\n",
					"    \"\"\").collect()[0][0]\n",
					"    logInfo(f\"Records with valid WorkScheduleRule: {valid_rules_count}\")\n",
					"    \n",
					"    # Check for records with parsed hours\n",
					"    parsed_hours_count = spark.sql(\"\"\"\n",
					"        SELECT COUNT(*) FROM odw_harmonised_db.sap_hr_workschedulerule \n",
					"        WHERE (MoWk1 + TuWk1 + WeWk1 + ThWk1 + FrWk1 + MoWk2 + TuWk2 + WeWk2 + ThWk2 + FrWk2) > 0\n",
					"    \"\"\").collect()[0][0]\n",
					"    logInfo(f\"Records with parsed working hours: {parsed_hours_count}\")\n",
					"    \n",
					"    # Check for records with valid average weekly hours\n",
					"    avg_hours_count = spark.sql(\"\"\"\n",
					"        SELECT COUNT(*) FROM odw_harmonised_db.sap_hr_workschedulerule \n",
					"        WHERE AvgWkHrs > 0 AND AvgWkHrs <= 80\n",
					"    \"\"\").collect()[0][0]\n",
					"    logInfo(f\"Records with reasonable average weekly hours (0-80): {avg_hours_count}\")\n",
					"    \n",
					"    # Add quality metrics to result\n",
					"    result[\"quality_metrics\"] = {\n",
					"        \"valid_rules\": valid_rules_count,\n",
					"        \"parsed_hours\": parsed_hours_count,\n",
					"        \"reasonable_avg_hours\": avg_hours_count,\n",
					"        \"quality_percentage\": round((parsed_hours_count / final_count * 100), 2) if final_count > 0 else 0\n",
					"    }\n",
					"    \n",
					"    logInfo(f\"Data quality: {result['quality_metrics']['quality_percentage']}% of records have parsed working hours\")\n",
					"    logInfo(\"Work Schedule Rule processing completed successfully\")\n",
					"\n",
					"except Exception as e:\n",
					"    # Capture error information and limit to 300 characters\n",
					"    error_msg = f\"Error in Work Schedule Rule processing: {str(e)}\"\n",
					"    logError(error_msg)\n",
					"    logException(e)\n",
					"    \n",
					"    # Update result for error case\n",
					"    result[\"status\"] = \"failed\"\n",
					"    result[\"error_message\"] = error_msg[:300]  # Truncate to 300 characters\n",
					"    result[\"record_count\"] = -1\n",
					"    result[\"deleted_count\"] = -1 \n",
					"    result[\"inserted_count\"] = -1\n",
					"    result[\"operation_type\"] = \"failed\"\n",
					"    \n",
					"    # Try to get current state for debugging\n",
					"    try:\n",
					"        current_count_after_error = spark.sql(\"\"\"\n",
					"            SELECT COUNT(*) FROM odw_harmonised_db.sap_hr_workschedulerule\n",
					"        \"\"\").collect()[0][0]\n",
					"        result[\"records_after_error\"] = current_count_after_error\n",
					"        logInfo(f\"Records remaining after error: {current_count_after_error}\")\n",
					"    except Exception as count_error:\n",
					"        logError(f\"Could not get record count after error: {str(count_error)}\")\n",
					"        result[\"records_after_error\"] = \"unknown\"\n",
					"    \n",
					"    # Re-raise the exception to ensure the notebook fails properly\n",
					"    raise e\n",
					"\n",
					"finally:\n",
					"    # Always flush logs regardless of success or failure\n",
					"    logInfo(\"Flushing logs\")\n",
					"    flushLogging()\n",
					"    \n",
					"    # Output the result as JSON for ADF to capture\n",
					"    mssparkutils.notebook.exit(json.dumps(result, indent=2))"
				],
				"execution_count": 10
			}
		]
	}
}