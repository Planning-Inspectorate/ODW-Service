{
	"name": "py_casework_outstanding_files",
	"properties": {
		"folder": {
			"name": "1-odw-raw-to-standardised/casework"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "fcbfd1f4-11ab-43c7-8627-cc8bef3bc003"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw",
				"name": "pinssynspodw",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 8,
				"memory": 56,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"from pyspark.sql import SparkSession\n",
					"from notebookutils import mssparkutils\n",
					"import json\n",
					"import calendar\n",
					"from datetime import datetime, timedelta, date\n",
					"import pandas as pd\n",
					"\n",
					"spark = SparkSession.builder.getOrCreate()\n",
					"\n",
					"storage_account=mssparkutils.notebook.run('/utils/py_utils_get_storage_account')\n",
					"\n",
					"raw_container = \"abfss://odw-raw@\" + storage_account\n",
					"config_container = \"abfss://odw-config@\" + storage_account\n",
					"standardised_container = \"abfss://odw-standardised@\" + storage_account"
				],
				"execution_count": 81
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%run \"1-odw-raw-to-standardised/Fileshare/SAP_HR/py_1_raw_to_standardised_hr_functions\""
				],
				"execution_count": 82
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"tags": [
						"parameters"
					]
				},
				"source": [
					"date_folder='2023-08-09'"
				],
				"execution_count": 83
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"if date_folder == '':\n",
					"    date_folder = datetime.now().date()\n",
					"else:\n",
					"    date_folder = datetime.strptime(date_folder, \"%Y-%m-%d\")\n",
					"\n",
					"date_folder_str = date_folder.strftime('%Y-%m-%d')\n",
					"\n",
					"# read orchestration data\n",
					"path_to_orchestration_file = \"abfss://odw-config@\"+storage_account+\"orchestration/orchestration.json\"\n",
					"df = spark.read.option(\"multiline\",\"true\").json(path_to_orchestration_file)\n",
					"definitions = json.loads(df.toJSON().first())['definitions']\n",
					"\n",
					"# INGESTING DATA IN Horizon/\n",
					"\n",
					"try:\n",
					"    horizon_source_path = f\"{raw_container}Horizon/{date_folder_str}\"\n",
					"    horizon_files = mssparkutils.fs.ls(horizon_source_path)\n",
					"    for file in horizon_files:\n",
					"        definition = next((d for d in definitions if d['Source_Filename_Format'] == file.name), None)\n",
					"        \n",
					"        if definition:\n",
					"            expected_from = date_folder - timedelta(days=1)\n",
					"            expected_from = datetime.combine(expected_from, datetime.min.time())\n",
					"            expected_to = expected_from + timedelta(days=definition['Expected_Within_Weekdays']) \n",
					"\n",
					"            print(f\"Ingesting {file.name}\")\n",
					"            ingest_adhoc(storage_account, definition, horizon_source_path, file.name, expected_from, expected_to)\n",
					"\n",
					"except:\n",
					"    print('Raw data not present for', date_folder)\n",
					"\n",
					"\n",
					"# INGESTING DATA IN Fileshare/SAP_HR/Casework/\n",
					"\n",
					"casework_source_path = f\"{raw_container}Fileshare/SAP_HR/Casework/\"\n",
					"casework_folders = mssparkutils.fs.ls(casework_source_path)\n",
					"casework_files = []\n",
					"for folder in casework_folders:\n",
					"    try:\n",
					"        files = mssparkutils.fs.ls(f\"{casework_source_path}{folder.name}/{date_folder_str}\")\n",
					"        casework_files += files\n",
					"    except:\n",
					"        print('Raw data not present for', date_folder)\n",
					"\n",
					"for file in casework_files:\n",
					"    definition = next((d for d in definitions if file.name.replace(date_folder_str.replace('-', '') + '.xlsx', '') in d['Source_Filename_Format']), None)\n",
					"    if definition:\n",
					"        expected_from = date_folder - timedelta(days=1)\n",
					"        expected_from = datetime.combine(expected_from, datetime.min.time())\n",
					"        expected_to = expected_from + timedelta(days=definition['Expected_Within_Weekdays']) \n",
					"\n",
					"        print(f\"Ingesting {file.name}\")\n",
					"        ingest_adhoc(storage_account, definition, horizon_source_path, file.name, expected_from, expected_to)"
				],
				"execution_count": 84
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# if date_folder == '':\n",
					"#     date_folder = datetime.now().date()\n",
					"# else:\n",
					"#     date_folder = datetime.strptime(date_folder, \"%Y-%m-%d\")\n",
					"\n",
					"# # read orchestration data\n",
					"# path_to_orchestration_file = 'abfss://odw-config@'+storage_account+'orchestration/orchestration.json'\n",
					"# df = spark.read.option('multiline','true').json(path_to_orchestration_file)\n",
					"# definitions = json.loads(df.toJSON().first())['definitions']\n",
					"\n",
					"# target_folders = ['Horizon', 'Casework']\n",
					"# definitions = [d for d in definitions if d['Standardised_Path'] in target_folders]\n",
					"\n",
					"timeout_in_seconds = 60 * 60\n",
					"\n",
					"# for d in definitions:\n",
					"#     print(f\"Ingesting into {d['Standardised_Table_Name']} for {date_folder.strftime('%Y-%m-%d')}\")\n",
					"#     mssparkutils.notebook.run('/1-odw-raw-to-standardised/Scheduling/outstanding_files_add_entry', timeout_in_seconds, {'jsonId': d['Source_ID'],'year': date_folder.year,'month': date_folder.month,'day': date_folder.day})\n",
					"#     mssparkutils.notebook.run('/1-odw-raw-to-standardised/Scheduling/py_1_initial_run_raw_to_standardised_scheduling', timeout_in_seconds, {'source_id': d['Source_ID'] })\n",
					"\n",
					"# tomorrow try the method I used for hr. ingest_adhoc\n",
					"\n",
					"# timeout_in_seconds = 60 * 60 * 10\n",
					"\n",
					"# for f in target_folders:\n",
					"#     print(f\"Ingesting all tables for Standardised_Path: {f}\")\n",
					"#     mssparkutils.notebook.run('/1-odw-raw-to-standardised/Scheduling/py_1_raw_to_standardised_scheduling', timeout_in_seconds, {'table_grouping': f })"
				],
				"execution_count": null
			}
		]
	}
}