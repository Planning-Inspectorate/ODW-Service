{
	"name": "py_casework_outstanding_files",
	"properties": {
		"folder": {
			"name": "1-odw-raw-to-standardised/casework"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "4be0483d-9c22-4cf2-8815-60ce00f501db"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw",
				"name": "pinssynspodw",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 8,
				"memory": 56,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"from pyspark.sql import SparkSession\n",
					"from notebookutils import mssparkutils\n",
					"import json\n",
					"from datetime import datetime, date\n",
					"\n",
					"spark = SparkSession.builder.getOrCreate()\n",
					"\n",
					"storage_account=mssparkutils.notebook.run('/utils/py_utils_get_storage_account')"
				],
				"execution_count": 39
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"tags": [
						"parameters"
					]
				},
				"source": [
					"date_folder=''"
				],
				"execution_count": 40
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"if date_folder == '':\n",
					"    date_folder = datetime.now().date()\n",
					"else:\n",
					"    date_folder = datetime.strptime(date_folder, \"%Y-%m-%d\")\n",
					"\n",
					"# read orchestration data\n",
					"path_to_orchestration_file = 'abfss://odw-config@'+storage_account+'orchestration/orchestration.json'\n",
					"df = spark.read.option('multiline','true').json(path_to_orchestration_file)\n",
					"definitions = json.loads(df.toJSON().first())['definitions']\n",
					"\n",
					"target_folders = ['Horizon', 'Casework']\n",
					"definitions = [d for d in definitions if d['Standardised_Path'] in target_folders]\n",
					"\n",
					"timeout_in_seconds = 60 * 30\n",
					"\n",
					"for d in definitions:\n",
					"    print(f\"Adding {d['Standardised_Table_Name']} as an outstanding file for {date_folder.strftime('%Y-%m-%d')}\")\n",
					"    mssparkutils.notebook.run('/1-odw-raw-to-standardised/Scheduling/outstanding_files_add_entry', timeout_in_seconds, {'jsonId': d['Source_ID'],'year': date_folder.year,'month': date_folder.month,'day': date_folder.day})\n",
					"\n",
					"# timeout_in_seconds = 60 * 60 * 10\n",
					"\n",
					"# for f in target_folders:\n",
					"#     print(f\"Ingesting all tables for Standardised_Path: {f}\")\n",
					"#     mssparkutils.notebook.run('/1-odw-raw-to-standardised/Scheduling/py_1_raw_to_standardised_scheduling', timeout_in_seconds, {'table_grouping': f })"
				],
				"execution_count": 41
			}
		]
	}
}