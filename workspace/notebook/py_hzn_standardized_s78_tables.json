{
	"name": "py_hzn_standardized_s78_tables",
	"properties": {
		"folder": {
			"name": "odw-standardised"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "c2413564-879c-45ea-91a8-13af17653fb0"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw",
				"name": "pinssynspodw",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"from pyspark.sql.types import IntegerType, ArrayType, StructType, StructField\r\n",
					"from pyspark.sql import Row\r\n",
					"from pyspark.sql.functions import *"
				],
				"execution_count": 43
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"horizon_cases_s78 = \"odw_standardised_db.horizoncases_s78\"\r\n",
					"primary_key = 'caseReference'\r\n",
					"incremental_key = 'AppealS78ID'"
				],
				"execution_count": 44
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def get_spark_df(table_name: str) -> DataFrame:\r\n",
					"    df = spark.table(table_name)\r\n",
					"    return df\r\n",
					""
				],
				"execution_count": 45
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Define all tables as Dataframes\r\n",
					"hzn_cases_s78_df = get_spark_df(\"odw_standardised_db.horizoncases_s78\")\r\n",
					"cases_specialism_df = get_spark_df(\"odw_standardised_db.cases_specialisms\")\r\n",
					"vw_case_dates_df = get_spark_df(\"odw_standardised_db.vw_case_dates\")\r\n",
					"#CaseDocumentDatesDates_df = get_spark_df(\"odw_standardised_db.casedocumentdatesdates\")\r\n",
					"CaseSiteStrings_df = get_spark_df(\"odw_standardised_db.casesitestrings\")\r\n",
					"TypeOfProcedure_df = get_spark_df(\"odw_standardised_db.typeofprocedure\")\r\n",
					"Horizon_TypeOfReasonForCase_df = get_spark_df(\"odw_standardised_db.horizon_typeofreasonforcase\")\r\n",
					"vw_AddAdditionalData_df = get_spark_df(\"odw_standardised_db.vw_addadditionaldata\")\r\n",
					"vw_AdditionalFields_df = get_spark_df(\"odw_standardised_db.vw_additionalfields\")\r\n",
					""
				],
				"execution_count": 47
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# CaseDocumentDatesDates_df.printSchema()\r\n",
					"\r\n",
					"# missing columns : lpaQuestionnaireDueDate, lpaQuestionnaireSubmittedDate, proofsOfEvidenceDueDate\r\n",
					"\r\n",
					"CaseSiteStrings_df.printSchema()\r\n",
					""
				],
				"execution_count": 48
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"\r\n",
					"c_s78_CaseSiteStrings = hzn_cases_s78_df.join(CaseSiteStrings_df, hzn_cases_s78_df.casenodeid == CaseSiteStrings_df.casenodeid, 'left').select( hzn_cases_s78_df[\"*\"], CaseSiteStrings_df.siteviewablefromroad)"
				],
				"execution_count": 49
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Join all tables accordingly from the Sql QUERY PINS HAVE PROVIDED US.\r\n",
					"\r\n",
					"c_s78_specialism = hzn_cases_s78_df.join(cases_specialism_df, hzn_cases_s78_df.caseuniqueid == cases_specialism_df.casereference, 'left').select( hzn_cases_s78_df[\"*\"], cases_specialism_df.casespecialism)\r\n",
					"c_s78_vw_case_dates = hzn_cases_s78_df.join(vw_case_dates_df, hzn_cases_s78_df.casenodeid == vw_case_dates_df.casenodeid, 'left')\r\n",
					"#c_s78_CaseDocumentDatesDates = hzn_cases_s78_df.join(CaseDocumentDatesDates_df, hzn_cases_s78_df.casenodeid == CaseDocumentDatesDates_df.casenodeid, 'left').select( hzn_cases_s78_df[\"*\"], CaseDocumentDatesDates_df.lpaQuestionnaireDueDate, CaseDocumentDatesDates_df.lpaQuestionnaireDueDate, CaseDocumentDatesDates_df.lpaQuestionnaireSubmittedDate, CaseDocumentDatesDates_df.interestedPartyRepsDueDate, CaseDocumentDatesDates_df.proofsOfEvidenceDueDate )"
				],
				"execution_count": 50
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"c_s78_CaseSiteStrings =  hzn_cases_s78_df.join(CaseSiteStrings_df, hzn_cases_s78_df.casenodeid == CaseSiteStrings_df.casenodeid, 'left').select( hzn_cases_s78_df[\"*\"], CaseSiteStrings_df.siteviewablefromroad)"
				],
				"execution_count": 52
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					""
				],
				"execution_count": null
			}
		]
	}
}