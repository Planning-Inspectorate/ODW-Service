{
	"name": "mipins_hr_measures_NEW",
	"properties": {
		"folder": {
			"name": "odw-curated"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "e68d636e-c5f0-47eb-9279-288ccb10f78c"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw",
				"name": "pinssynspodw",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"\n",
					"CREATE OR REPLACE TEMPORARY VIEW staff_cost\n",
					"\n",
					"     AS\n",
					"\n",
					"SELECT DISTINCT\n",
					"    h.EmployeeID                                                AS EmployeeID,\n",
					"    p.PSGroupCode                                               AS Grade, \n",
					"    h.AnnualSalary                                              AS Salary, \n",
					"    cast(cast(h.AnnualSalary as float)/(365.0*7.4) as float)    AS HourlyRate,\n",
					"    cast(le.ExpectedFrom as date)                               AS ReportMonthEndDate,\n",
					"    le.LeaveDaysPerYear                                         AS LeaveAllowance,\n",
					"    cast(case sign(datediff(day, cast(le.LeaveYearStart as date), le.expectedfrom))\n",
					"                when 1 then le.LeaveYearStart\n",
					"                when 0 then le.LeaveYearStart\n",
					"                else dateadd(year, -1, le.LeaveYearStart)\n",
					"            end as date) as LeaveStartDate,\n",
					"    le.leavedaysperyear*(1 - abs((((datediff(day, cast(\n",
					"            CASE sign(datediff(day, cast(le.leaveyearstart AS date), le.expectedfrom))\n",
					"                WHEN 1 \n",
					"                THEN le.leaveyearstart\n",
					"            ELSE dateadd(year, -1, le.leaveyearstart)\n",
					"            END AS date), le.expectedfrom))/364.25)%1)))        AS ExpectedLeaveHoursRemaining\n",
					"    \n",
					"FROM odw_harmonised_db.hr_employee_dim h\n",
					"LEFT JOIN odw_harmonised_db.hr_leave_entitlement_dim le on h.EmployeeID = le.EmployeeID\n",
					"LEFT JOIN odw_harmonised_db.hr_record_fact r ON h.EmployeeID = r.EmployeeID AND r.IsActive = 'Y'\n",
					"LEFT JOIN odw_harmonised_db.hr_payband_dim p ON r.PayBandID = r.PayBandID\n",
					"WHERE\n",
					"    h.IsActive = 'Y' AND\n",
					"    le.AbsenceQuotaType = 'Annual Leave / P&P';"
				],
				"execution_count": 11
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"\n",
					"CREATE OR REPLACE TEMPORARY VIEW carried_over\n",
					"    \n",
					"    AS\n",
					"\n",
					"SELECT DISTINCT\n",
					"    h.EmployeeID as EmployeeID,\n",
					"    case sign(le.LeaveDaysPerYear - 148)\n",
					"        when 1 then 148\n",
					"        when 0 then 148\n",
					"        else le.LeaveDaysPerYear\n",
					"    end as CarriedOverHours\n",
					"\n",
					"FROM odw_harmonised_db.hr_employee_dim h\n",
					"LEFT JOIN odw_harmonised_db.hr_leave_entitlement_dim le on h.EmployeeID = le.EmployeeID\n",
					"WHERE\n",
					"    le.AbsenceQuotaType = 'Brought Forward';"
				],
				"execution_count": 12
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"\n",
					"CREATE OR REPLACE TEMPORARY VIEW leave_taken\n",
					"\n",
					"     AS\n",
					"\n",
					"SELECT DISTINCT\n",
					"    a.AbsenceID,\n",
					"    a.EmployeeID,\n",
					"    CASE\n",
					"        WHEN sc.ReportMonthEndDate >= a.AbsenceEndDate\n",
					"        THEN a.Hours\n",
					"        ELSE a.Hours - (w.WorkDayHours * datediff(a.AbsenceEndDate, sc.ReportMonthEndDate))\n",
					"    END AS LeaveHours,\n",
					"    a.Days, \n",
					"    a.Hours,\n",
					"    a.CalendarDays,\n",
					"    a.AbsenceStartDate,\n",
					"    a.AbsenceEndDate,\n",
					"    sc.LeaveStartDate\n",
					"\n",
					"FROM odw_harmonised_db.hr_absence_dim a\n",
					"LEFT JOIN odw_harmonised_db.hr_work_schedule_dim w on a.WorkScheduleID = w.WorkScheduleID\n",
					"LEFT JOIN staff_cost sc ON a.EmployeeID = sc.EmployeeID\n",
					"WHERE\n",
					"    a.AbsenceType IN ('PT Annual / P&P Leave', 'FT Annual / Priv Leave')\n",
					"    AND \n",
					"    a.AbsenceStartDate  BETWEEN sc.LeaveStartDate AND sc.ReportMonthEndDate\n",
					"GROUP BY \n",
					"    a.EmployeeID,a.AbsenceID,a.Days,a.Hours,a.CalendarDays,a.AbsenceStartDate,a.AbsenceEndDate,sc.LeaveStartDate,w.WorkDayHours,sc.ReportMonthEndDate\n",
					"Order by AbsenceStartDate"
				],
				"execution_count": 13
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"CREATE OR REPLACE TEMPORARY VIEW leave_taken_fixed\n",
					"\n",
					"    AS\n",
					"\n",
					"SELECT\n",
					"EmployeeID,\n",
					"SUM(LeaveHours) AS LeaveHoursTaken\n",
					"\n",
					"FROM leave_taken\n",
					"Where EmployeeID is not null and LeaveStartDate <= AbsenceStartDate\n",
					"GROUP BY EmployeeID;"
				],
				"execution_count": 14
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"\n",
					"CREATE OR REPLACE TEMPORARY VIEW mipins_hr_measures\n",
					"\n",
					"     AS\n",
					"\t \n",
					"SELECT DISTINCT\n",
					"\ted.EmployeeID\t\t\t\t\t\t\t\t\t\t\t\tAS EmployeeID,\t\t\t--h.pers_no\n",
					"\ted.FirstName\t\t\t\t\t\t\t\t\t\t\t\tAS FirstName, \t\t\t--h.first_name, \n",
					"\ted.LastName\t\t\t\t\t\t\t\t\t\t\t\t\tAS LastName, \t\t\t--h.last_name, \n",
					"\tef.LegacyEmployeeNumber \t\t\t\t\t\t\t\t\tAS EmployeeNo, \t\t\t--h.employee_no, \n",
					"\t'1900' \t\t\t\t\t\t\t\t\t\t\t\t\t\tAS CoCd,\t\t\t\t--h.cocd,\n",
					"\t'PINS' \t\t\t\t\t\t\t\t\t\t\t\t\t\tAS CompanyCode, \t\t--h.company_code,\n",
					"    pad.PersonnelAreaCode\t\t\t\t\t\t\t\t\t\tAS PA, \t\t\t\t\t--h.pa\n",
					"    pad.Description\t\t            \t\t\t\t\t\t\tAS PersonnelArea,  \t\t--h.personnel_area\n",
					"    psad.PersonnelAreaCode          \t\t\t\t\t\t\tAS PSubArea,  \t\t\t--h.psubarea\n",
					"    psad.Description\t            \t\t\t\t\t\t\tAS PersonnelSubArea,  \t--h.personnel_subarea\n",
					"    oud.OrganisationUnit\t\t\t\t\t\t\t\t\t\tAS OrgUnit, \t\t\t--h.org_unit\n",
					"    oud.Description\t\t\t        \t\t\t\t\t\t\tAS OrganizationalUnit, \t--h.organizational_unit\n",
					"    concat(oud.OrganisationUnit,'00000',ccd.CostCenterCode) \tAS OrganizationalKey1, \t--h.organizational_key1\n",
					"    'No Info' \t\t\t\t\t\t\t\t\t\t\t\t\tAS OrganizationalKey2, --h.organizational_key2\n",
					"     AS WorkC, --h.workc\n",
					"     AS WorkContract, --h.work_contract\n",
					"     AS CT, --h.ct\n",
					"     AS ContractType, --h.contract_type\n",
					"     AS\tPSGroup, --h.ps_group\n",
					"     AS\tPayBandDescription, --h.pay_band_description\n",
					"     AS\tFTE, --h.fte\n",
					"     AS\tWeekHours, --h.wk_hrs\n",
					"    h.indicator_part_time_employee\t\t\t\t\t\t\t\tAS\tIndicatorPartTimeEmployee\t,\n",
					"    h.s\t                            AS\tS\t,\n",
					"    h.employment_status\t            AS\tEmploymentStatus\t,\n",
					"    h.gender_key\t                AS\tGenderKey\t,\n",
					"    h.tra_start_date\t            AS\tTRAStartDate\t,\n",
					"    h.tra_end_date\t                AS\tTRAEndDate\t,\n",
					"    h.tra_status\t                AS\tTRAStatus\t,\n",
					"    h.tra_grade\t                    AS\tTRAGrade\t,\n",
					"    h.prev_persno\t                AS\tPrevPersNo\t,\n",
					"    h.actr\t                        AS\tActr\t,\n",
					"    h.reason_for_action\t            AS\tReasonForAction\t,\n",
					"    h.position\t                    AS\tPosition\t,\n",
					"    h.position_1\t                AS\tPosition1\t,\n",
					"    h.cost_ctr\t                    AS\tCostCtr\t,\n",
					"    h.cost_centre\t                AS\tCostCentre\t,\n",
					"    h.civil_service_start\t        AS\tCivilServiceStart\t,\n",
					"    h.date_to_current_job\t        AS\tDateToCurrentJob\t,\n",
					"    h.seniority_date\t            AS\tSeniorityDate\t,\n",
					"    h.date_to_subst_grade\t        AS\tDateToSubstGrade\t,\n",
					"    h.pers_no_1\t                    AS\tPersNo1\t,\n",
					"    h.name_of_manager_om\t        AS\tNameOfManagerOm\t,\n",
					"    h.manager_position\t            AS\tManagerPosition\t,\n",
					"    h.manager_position_text\t        AS\tManagerPositionText\t,\n",
					"    h.counter_sign_manager\t        AS\tCounterSignManager\t,\n",
					"    h.loc\t                        AS\tLoc\t,\n",
					"    h.location\t                    AS\tLocation\t,\n",
					"    h.org_start_date\t            AS\tOrgStartDate\t,\n",
					"    h.fix_term_end_date\t            AS\tFixTermEndDate\t,\n",
					"    h.loan_start_date\t            AS\tLoanStartDate\t,\n",
					"    h.loan_end_date\t                AS\tLoanEndDate\t,\n",
					"    h.eegrp\t                        AS\tEEGrp\t,\n",
					"    h.employee_group\t            AS\tEmployeeGroup\t,\n",
					"    h.annual_salary\t                AS\tAnnualSalary\t,\n",
					"    h.curr\t                        AS\tCurr\t,\n",
					"    h.ni_number\t                    AS\tNINumber\t,\n",
					"    h.birth_date\t                AS\tBirthDate\t,\n",
					"    'No Info'\t\t\t\t\t\t\t\t\t\t\t\t\tAS AgeOfEmployee, --h.age_of_employee\n",
					"    'No Info'\t\t\t\t\t\t\t\t\t\t\t\t\tAS EO, --h.eo\n",
					"    'No Info'\t\t\t\t\t\t\t\t\t\t\t\t\tAS EthnicOrigin, --h.ethnic_origin\n",
					"    'No Info'\t\t\t\t\t\t\t\t\t\t\t\t\tAS NID, --h.nid\n",
					"    'No Info'\t\t\t\t\t\t\t\t\t\t\t\t\tAS Rel, --h.rel\n",
					"    'No Info'\t\t\t\t\t\t\t\t\t\t\t\t\tAS ReligiousDenominationKey, --h.religious_denomination_key\n",
					"    'No Info'\t\t\t\t\t\t\t\t\t\t\t\t\tAS Sxo, -- h.sxo\n",
					"    'No Info'\t\t\t\t\t\t\t\t\t\t\t\t\tAS WageType, --h.wage_type\t\n",
					"    'No Info'\t\t\t\t\t\t\t\t\t\t\t\t\tAS EmployeeSubgroup, --h.employee_subgroup\n",
					"    'No Info'\t\t\t\t\t\t\t\t\t\t\t\t\tAS LoaAbsType, --h.loa_abs_type\n",
					"    'No Info'\t\t\t\t\t\t\t\t\t\t\t\t\tAS LoaAbsenceTypeText, --h.loa_absence_type_text\n",
					"    'No Info'\t\t\t\t\t\t\t\t\t\t\t\t\tAS SchemeReference, --h.scheme_reference\n",
					"    'No Info'\t\t\t\t\t\t\t\t\t\t\t\t\tAS PensionSchemeName, --h.pension_scheme_name\n",
					"    'No Info'\t\t\t\t\t\t\t\t\t\t\t\t\tAS DisabilityCode, --h.disability_code\n",
					"    'No Info'\t\t\t\t\t\t\t\t\t\t\t\t\tAS DisabilityText, --h.disability_text\n",
					"    'No Info'\t\t\t\t\t\t\t\t\t\t\t\t\tAS DisabilityCodeDescription, --h.disability_code_description\n",
					"    h.parea\t                        AS\tPArea\t,\n",
					"    h.payroll_area\t                AS\tPayrollArea\t,\n",
					"    h.assignment_number\t            AS\tAssignmentNumber\t,\n",
					"    h.fte_2\t                        AS\tFTE2\t,\n",
					"\tsc.ReportMonthEndDate \t\t\t\t\t\t\t\t\t\t\t\tAS Report_MonthEnd_Date,\n",
					"\tcoalesce(sc.LeaveAllowance, 0) + coalesce(co.CarriedOverHours, 0) \tAS leave_entitlement_hrs,\n",
					"\tcoalesce(lt.LeaveHoursTaken, 0) \t\t\t\t\t\t\t\t\tAS leave_taken_hrs,\n",
					"\tround((coalesce(sc.LeaveAllowance, 0) + \n",
					"\t\tcoalesce(co.CarriedOverHours, 0) - \n",
					"\t\tcoalesce(sc.ExpectedLeaveHoursRemaining, 0)  - \n",
					"\t\tcoalesce(lt.LeaveHoursTaken, 0)), 2) \t\t\t\t\t\t\tAS leave_remaining_hours,\n",
					"\tcoalesce(round(sc.ExpectedLeaveHoursRemaining, 2), 0) \t\t\t\tAS leave_remaining_prorata_hours,\n",
					"\thf.IngestionDate                 AS IngestionDate,\n",
					"    hf.ValidTo                            AS ValidTo,\n",
					"\t--,coalesce(round((coalesce(sc.LeaveAllowance, 0) + coalesce(co.CarriedOverHours, 0) - coalesce(sc.ExpectedLeaveHoursRemaining, 0)  - coalesce(lt.LeaveHoursTaken, 0)) * (sc.hourly_rate) * (1 + p.Total), 2),0.0) as cost_untaken_al\n",
					"-- from odw_standardised_db.vw_saphr h\n",
					"from odw_harmonised_db.hr_record_fact hr\n",
					"\tLEFT JOIN odw_harmonised_db.hr_employee_dim ed ON ed.EmployeeID = ef.EmployeeID\n",
					"\tLEFT JOIN odw_harmonised_db.hr_employee_fact ef ON ed.EmployeeID = ef.EmployeeID\n",
					"\tLEFT JOIN odw_harmonised_db.hr_personnel_area_dim pad ON rf.PersonnelAreaID = pad.PersonnelAreaID\n",
					"\tLEFT JOIN odw_harmonised_db.hr_personnel_sub_area_dim psad ON rf.PersonnelSubAreaID = psad.PersonnelSubAreaID\n",
					"\tLEFT JOIN odw_harmonised_db.hr_organisation_unit_dim oud ON rf.OrganisationUnitID = oud.OrganisationUnitID\n",
					"\n",
					"\tleft join staff_cost sc on cast(h.pers_no as int) = cast(sc.EmployeeID as int)\n",
					"\tleft join carried_over co on cast(sc.EmployeeID as int) = cast(co.EmployeeID as int)\n",
					"\tleft join leave_taken_fixed lt on cast(sc.EmployeeID as int) = cast(lt.EmployeeID as int)\n",
					"\tleft join odw_standardised_db.bis_pension_ernic_rates p on sc.Grade = p.Grade\n",
					"where \n",
					"\tright(cast(cast(sc.ReportMonthEndDate as date) as varchar(10)),5) in ('01-31','02-28','02-29','03-31','04-30','05-31','06-30','07-31','08-31','09-30','10-31','11-30','12-31')"
				],
				"execution_count": 15
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Check for new, updated or deleted data\n",
					"- This script checks for new, updated or deleted data by checking the source data (horizon tables) against the target (odw_harmonised_db.casework tables)\n",
					"- **New Data:** where an main Reference in the source does not exist in the target, then NewData flag is set to 'Y'\n",
					"- **Updated data:** Comparison occurs on Reference Fields in source and in target where the row hash is different i.e. there is a change in one of the columns. NewData flag is set to 'Y'\n",
					"- **Deleted data:** where an Reference info in the target exists but the same identifyers don't exist in the source. DeletedData flag is set to 'Y'\n",
					"\n",
					"## View mipins_hr_measures_new is created"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"-- Gets modified or deleted from source rows\r\n",
					"\r\n",
					"CREATE OR REPLACE TEMPORARY VIEW mipins_hr_measures_new \r\n",
					"\r\n",
					"    AS\r\n",
					"\r\n",
					"-- gets data that matches of EmployeeID and flags that it is modified based on a row (md5) hash. Flags as \"NewData\"\r\n",
					"-- gets data that is in the target but not in source. Flags as \"DeletedData\"\r\n",
					"\r\n",
					"SELECT DISTINCT\r\n",
					"    CASE\r\n",
					"        WHEN h.pers_no IS NULL\r\n",
					"        THEN T5.MeasureID\r\n",
					"        ELSE NULL\r\n",
					"    END                             AS  MeasureID, -- surrogate\r\n",
					"    h.pers_no\t                    AS\tEmployeeID\t,\r\n",
					"    h.first_name\t                AS\tFirstName\t,\r\n",
					"    h.last_name\t                    AS\tLastName\t,\r\n",
					"    h.employee_no\t                AS\tEmployeeNo\t,\r\n",
					"    h.cocd\t                        AS\tCoCd\t,\r\n",
					"    h.company_code\t                AS\tCompanyCode\t,\r\n",
					"    h.pa\t                        AS\tPA\t,\r\n",
					"    h.personnel_area\t            AS\tPersonnelArea\t,\r\n",
					"    h.psubarea\t                    AS\tPSubArea\t,\r\n",
					"    h.personnel_subarea\t            AS\tPersonnelSubArea\t,\r\n",
					"    h.org_unit\t                    AS\tOrgUnit\t,\r\n",
					"    h.organizational_unit\t        AS\tOrganizationalUnit\t,\r\n",
					"    h.organizational_key1\t        AS\tOrganizationalKey1\t,\r\n",
					"    h.organizational_key2\t        AS\tOrganizationalKey2\t,\r\n",
					"    h.workc\t                        AS\tWorkC\t,\r\n",
					"    h.work_contract\t                AS\tWorkContract\t,\r\n",
					"    h.ct\t                        AS\tCT\t,\r\n",
					"    h.contract_type\t                AS\tContractType\t,\r\n",
					"    h.ps_group\t                    AS\tPSGroup\t,\r\n",
					"    h.pay_band_description\t        AS\tPayBandDescription\t,\r\n",
					"    h.fte\t                        AS\tFTE\t,\r\n",
					"    h.wk_hrs\t                    AS\tWeekHours\t,\r\n",
					"    h.indicator_part_time_employee\tAS\tIndicatorPartTimeEmployee\t,\r\n",
					"    h.s\t                            AS\tS\t,\r\n",
					"    h.employment_status\t            AS\tEmploymentStatus\t,\r\n",
					"    h.gender_key\t                AS\tGenderKey\t,\r\n",
					"    h.tra_start_date\t            AS\tTRAStartDate\t,\r\n",
					"    h.tra_end_date\t                AS\tTRAEndDate\t,\r\n",
					"    h.tra_status\t                AS\tTRAStatus\t,\r\n",
					"    h.tra_grade\t                    AS\tTRAGrade\t,\r\n",
					"    h.prev_persno\t                AS\tPrevPersNo\t,\r\n",
					"    h.actr\t                        AS\tActr\t,\r\n",
					"    h.reason_for_action\t            AS\tReasonForAction\t,\r\n",
					"    h.position\t                    AS\tPosition\t,\r\n",
					"    h.position_1\t                AS\tPosition1\t,\r\n",
					"    h.cost_ctr\t                    AS\tCostCtr\t,\r\n",
					"    h.cost_centre\t                AS\tCostCentre\t,\r\n",
					"    h.civil_service_start\t        AS\tCivilServiceStart\t,\r\n",
					"    h.date_to_current_job\t        AS\tDateToCurrentJob\t,\r\n",
					"    h.seniority_date\t            AS\tSeniorityDate\t,\r\n",
					"    h.date_to_subst_grade\t        AS\tDateToSubstGrade\t,\r\n",
					"    h.pers_no_1\t                    AS\tPersNo1\t,\r\n",
					"    h.name_of_manager_om\t        AS\tNameOfManagerOm\t,\r\n",
					"    h.manager_position\t            AS\tManagerPosition\t,\r\n",
					"    h.manager_position_text\t        AS\tManagerPositionText\t,\r\n",
					"    h.counter_sign_manager\t        AS\tCounterSignManager\t,\r\n",
					"    h.loc\t                        AS\tLoc\t,\r\n",
					"    h.location\t                    AS\tLocation\t,\r\n",
					"    h.org_start_date\t            AS\tOrgStartDate\t,\r\n",
					"    h.fix_term_end_date\t            AS\tFixTermEndDate\t,\r\n",
					"    h.loan_start_date\t            AS\tLoanStartDate\t,\r\n",
					"    h.loan_end_date\t                AS\tLoanEndDate\t,\r\n",
					"    h.eegrp\t                        AS\tEEGrp\t,\r\n",
					"    h.employee_group\t            AS\tEmployeeGroup\t,\r\n",
					"    h.annual_salary\t                AS\tAnnualSalary\t,\r\n",
					"    h.curr\t                        AS\tCurr\t,\r\n",
					"    h.ni_number\t                    AS\tNINumber\t,\r\n",
					"    h.birth_date\t                AS\tBirthDate\t,\r\n",
					"    h.age_of_employee\t            AS\tAgeOfEmployee\t,\r\n",
					"    h.eo\t                        AS\tEO\t,\r\n",
					"    h.ethnic_origin\t                AS\tEthnicOrigin\t,\r\n",
					"    h.nid\t                        AS\tNID\t,\r\n",
					"    h.rel\t                        AS\tRel\t,\r\n",
					"    h.religious_denomination_key\tAS\tReligiousDenominationKey\t,\r\n",
					"    h.sxo\t                        AS\tSxo\t,\r\n",
					"    h.wage_type\t                    AS\tWageType\t,\r\n",
					"    h.employee_subgroup\t            AS\tEmployeeSubgroup\t,\r\n",
					"    h.loa_abs_type\t                AS\tLoaAbsType\t,\r\n",
					"    h.loa_absence_type_text\t        AS\tLoaAbsenceTypeText\t,\r\n",
					"    h.scheme_reference\t            AS\tSchemeReference\t,\r\n",
					"    h.pension_scheme_name\t        AS\tPensionSchemeName\t,\r\n",
					"    h.disability_code\t            AS\tDisabilityCode\t,\r\n",
					"    h.disability_text\t            AS\tDisabilityText\t,\r\n",
					"    h.disability_code_description\tAS\tDisabilityCodeDescription\t,\r\n",
					"    h.parea\t                        AS\tPArea\t,\r\n",
					"    h.payroll_area\t                AS\tPayrollArea\t,\r\n",
					"    h.assignment_number\t            AS\tAssignmentNumber\t,\r\n",
					"    h.fte_2\t                        AS\tFTE2\t,\r\n",
					"    h.Report_MonthEnd_Date\t        AS\tReportMonthEndDate\t,\r\n",
					"    h.leave_entitlement_hrs\t        AS\tLeaveEntitlementHours\t,\r\n",
					"    h.leave_taken_hrs\t            AS\tLeaveTakenHours\t,\r\n",
					"    h.leave_remaining_hours\t        AS\tLeaveRemainingHours\t,\r\n",
					"    h.leave_remaining_prorata_hours\tAS\tLeaveRemainingProrataHours,\r\n",
					"    T2.SourceSystemID as SourceSystemID,\r\n",
					"    h.expected_from                 AS IngestionDate,\r\n",
					"    NULL                            AS ValidTo,\r\n",
					"    md5(\r\n",
					"        concat(\r\n",
					"            IFNULL(h.pers_no,'.'),\r\n",
					"            IFNULL(CAST(h.Report_MonthEnd_Date as VARCHAR(20)),'.'),\r\n",
					"            IFNULL(h.leave_entitlement_hrs,'.'),\r\n",
					"            IFNULL(h.leave_taken_hrs,'.'),\r\n",
					"            IFNULL(h.leave_remaining_hours,'.'),\r\n",
					"            IFNULL(h.leave_remaining_prorata_hours,'.')\r\n",
					"            )\r\n",
					"        )                           AS RowID,\r\n",
					"    'Y'                             AS IsActive,\r\n",
					"    T5.IsActive                     AS HistoricIsActive\r\n",
					"\r\n",
					"FROM mipins_hr_measures h\r\n",
					"LEFT JOIN odw_harmonised_db.main_sourcesystem_fact T2 ON \"SAP HR\" = T2.Description AND T2.IsActive = 'Y'\r\n",
					"LEFT JOIN odw_curated_db.mipins_hr_measures T5 ON h.pers_no = T5.EmployeeID AND T5.IsActive = 'Y'\r\n",
					"\r\n",
					"WHERE\r\n",
					"    -- flags new data        \r\n",
					"    CASE\r\n",
					"        WHEN h.pers_no = T5.EmployeeID AND md5(\r\n",
					"            concat(\r\n",
					"                IFNULL(h.pers_no,'.'),\r\n",
					"                IFNULL(CAST(h.Report_MonthEnd_Date as VARCHAR(20)),'.'),\r\n",
					"                IFNULL(h.leave_entitlement_hrs,'.'),\r\n",
					"                IFNULL(h.leave_taken_hrs,'.'),\r\n",
					"                IFNULL(h.leave_remaining_hours,'.'),\r\n",
					"                IFNULL(h.leave_remaining_prorata_hours,'.')\r\n",
					"            )) <> T5.RowID    -- same employee, changed data\r\n",
					"        THEN 'Y'\r\n",
					"        WHEN T5.EmployeeID IS NULL \r\n",
					"        THEN 'Y'\r\n",
					"    ELSE 'N'\r\n",
					"    END  = 'Y'\r\n",
					";"
				],
				"execution_count": 16
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Dataset is created that contains changed data and corresponding target data\n",
					"- This script combines data that has been updated, Deleted or is new, with corresponding target data\n",
					"- View **mipins_hr_measures_new** is unioned to the target data filter to only those rows where changes have been detected\n",
					"## View mipins_hr_measures_changed_rows is created"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"\r\n",
					"-- Create new and updated dataset\r\n",
					"\r\n",
					"CREATE OR REPLACE TEMPORARY VIEW mipins_hr_measures_changed_rows\r\n",
					"\r\n",
					"    AS\r\n",
					"\r\n",
					"-- gets updated, deleted and new rows \r\n",
					"\r\n",
					"Select \r\n",
					"    MeasureID, -- surrogate \r\n",
					"    EmployeeID\t,\r\n",
					"    FirstName\t,\r\n",
					"    LastName\t,\r\n",
					"    EmployeeNo\t,\r\n",
					"    CoCd\t,\r\n",
					"    CompanyCode\t,\r\n",
					"    PA\t,\r\n",
					"    PersonnelArea\t,\r\n",
					"    PSubArea\t,\r\n",
					"    PersonnelSubArea\t,\r\n",
					"    OrgUnit\t,\r\n",
					"    OrganizationalUnit\t,\r\n",
					"    OrganizationalKey1\t,\r\n",
					"    OrganizationalKey2\t,\r\n",
					"    WorkC\t,\r\n",
					"    WorkContract\t,\r\n",
					"    CT\t,\r\n",
					"    ContractType\t,\r\n",
					"    PSGroup\t,\r\n",
					"    PayBandDescription\t,\r\n",
					"    FTE\t,\r\n",
					"    WeekHours\t,\r\n",
					"    IndicatorPartTimeEmployee\t,\r\n",
					"    S\t,\r\n",
					"    EmploymentStatus\t,\r\n",
					"    GenderKey\t,\r\n",
					"    TRAStartDate\t,\r\n",
					"    TRAEndDate\t,\r\n",
					"    TRAStatus\t,\r\n",
					"    TRAGrade\t,\r\n",
					"    PrevPersNo\t,\r\n",
					"    Actr\t,\r\n",
					"    ReasonForAction\t,\r\n",
					"    Position\t,\r\n",
					"    Position1\t,\r\n",
					"    CostCtr\t,\r\n",
					"    CostCentre\t,\r\n",
					"    CivilServiceStart\t,\r\n",
					"    DateToCurrentJob\t,\r\n",
					"    SeniorityDate\t,\r\n",
					"    DateToSubstGrade\t,\r\n",
					"    PersNo1\t,\r\n",
					"    NameOfManagerOm\t,\r\n",
					"    ManagerPosition\t,\r\n",
					"    ManagerPositionText\t,\r\n",
					"    CounterSignManager\t,\r\n",
					"    Loc\t,\r\n",
					"    Location\t,\r\n",
					"    OrgStartDate\t,\r\n",
					"    FixTermEndDate\t,\r\n",
					"    LoanStartDate\t,\r\n",
					"    LoanEndDate\t,\r\n",
					"    EEGrp\t,\r\n",
					"    EmployeeGroup\t,\r\n",
					"    AnnualSalary\t,\r\n",
					"    Curr\t,\r\n",
					"    NINumber\t,\r\n",
					"    BirthDate\t,\r\n",
					"    AgeOfEmployee\t,\r\n",
					"    EO\t,\r\n",
					"    EthnicOrigin\t,\r\n",
					"    NID\t,\r\n",
					"    Rel\t,\r\n",
					"    ReligiousDenominationKey\t,\r\n",
					"    Sxo\t,\r\n",
					"    WageType\t,\r\n",
					"    EmployeeSubgroup\t,\r\n",
					"    LoaAbsType\t,\r\n",
					"    LoaAbsenceTypeText\t,\r\n",
					"    SchemeReference\t,\r\n",
					"    PensionSchemeName\t,\r\n",
					"    DisabilityCode\t,\r\n",
					"    DisabilityText\t,\r\n",
					"    DisabilityCodeDescription\t,\r\n",
					"    PArea\t,\r\n",
					"    PayrollArea\t,\r\n",
					"    AssignmentNumber\t,\r\n",
					"    FTE2\t,\r\n",
					"    ReportMonthEndDate\t,\r\n",
					"    LeaveEntitlementHours\t,\r\n",
					"    LeaveTakenHours\t,\r\n",
					"    LeaveRemainingHours\t,\r\n",
					"    LeaveRemainingProrataHours\t,\r\n",
					"    SourceSystemID,\r\n",
					"    IngestionDate,\r\n",
					"    ValidTo,\r\n",
					"    RowID,\r\n",
					"    IsActive\r\n",
					"From mipins_hr_measures_new WHERE HistoricIsActive = 'Y' or HistoricIsActive IS NULL\r\n",
					"\r\n",
					"    UNION ALL\r\n",
					"\r\n",
					"-- gets original versions of updated rows so we can update EndDate and set IsActive flag to 'N'\r\n",
					"\r\n",
					"SELECT\r\n",
					"    MeasureID, -- surrogate \r\n",
					"    EmployeeID\t,\r\n",
					"    FirstName\t,\r\n",
					"    LastName\t,\r\n",
					"    EmployeeNo\t,\r\n",
					"    CoCd\t,\r\n",
					"    CompanyCode\t,\r\n",
					"    PA\t,\r\n",
					"    PersonnelArea\t,\r\n",
					"    PSubArea\t,\r\n",
					"    PersonnelSubArea\t,\r\n",
					"    OrgUnit\t,\r\n",
					"    OrganizationalUnit\t,\r\n",
					"    OrganizationalKey1\t,\r\n",
					"    OrganizationalKey2\t,\r\n",
					"    WorkC\t,\r\n",
					"    WorkContract\t,\r\n",
					"    CT\t,\r\n",
					"    ContractType\t,\r\n",
					"    PSGroup\t,\r\n",
					"    PayBandDescription\t,\r\n",
					"    FTE\t,\r\n",
					"    WeekHours\t,\r\n",
					"    IndicatorPartTimeEmployee\t,\r\n",
					"    S\t,\r\n",
					"    EmploymentStatus\t,\r\n",
					"    GenderKey\t,\r\n",
					"    TRAStartDate\t,\r\n",
					"    TRAEndDate\t,\r\n",
					"    TRAStatus\t,\r\n",
					"    TRAGrade\t,\r\n",
					"    PrevPersNo\t,\r\n",
					"    Actr\t,\r\n",
					"    ReasonForAction\t,\r\n",
					"    Position\t,\r\n",
					"    Position1\t,\r\n",
					"    CostCtr\t,\r\n",
					"    CostCentre\t,\r\n",
					"    CivilServiceStart\t,\r\n",
					"    DateToCurrentJob\t,\r\n",
					"    SeniorityDate\t,\r\n",
					"    DateToSubstGrade\t,\r\n",
					"    PersNo1\t,\r\n",
					"    NameOfManagerOm\t,\r\n",
					"    ManagerPosition\t,\r\n",
					"    ManagerPositionText\t,\r\n",
					"    CounterSignManager\t,\r\n",
					"    Loc\t,\r\n",
					"    Location\t,\r\n",
					"    OrgStartDate\t,\r\n",
					"    FixTermEndDate\t,\r\n",
					"    LoanStartDate\t,\r\n",
					"    LoanEndDate\t,\r\n",
					"    EEGrp\t,\r\n",
					"    EmployeeGroup\t,\r\n",
					"    AnnualSalary\t,\r\n",
					"    Curr\t,\r\n",
					"    NINumber\t,\r\n",
					"    BirthDate\t,\r\n",
					"    AgeOfEmployee\t,\r\n",
					"    EO\t,\r\n",
					"    EthnicOrigin\t,\r\n",
					"    NID\t,\r\n",
					"    Rel\t,\r\n",
					"    ReligiousDenominationKey\t,\r\n",
					"    Sxo\t,\r\n",
					"    WageType\t,\r\n",
					"    EmployeeSubgroup\t,\r\n",
					"    LoaAbsType\t,\r\n",
					"    LoaAbsenceTypeText\t,\r\n",
					"    SchemeReference\t,\r\n",
					"    PensionSchemeName\t,\r\n",
					"    DisabilityCode\t,\r\n",
					"    DisabilityText\t,\r\n",
					"    DisabilityCodeDescription\t,\r\n",
					"    PArea\t,\r\n",
					"    PayrollArea\t,\r\n",
					"    AssignmentNumber\t,\r\n",
					"    FTE2\t,\r\n",
					"    ReportMonthEndDate\t,\r\n",
					"    LeaveEntitlementHours\t,\r\n",
					"    LeaveTakenHours\t,\r\n",
					"    LeaveRemainingHours\t,\r\n",
					"    LeaveRemainingProrataHours\t,\r\n",
					"    SourceSystemID,\r\n",
					"    IngestionDate,\r\n",
					"    ValidTo,\r\n",
					"    RowID,\r\n",
					"    IsActive\r\n",
					"FROM odw_curated_db.mipins_hr_measures\r\n",
					"WHERE EmployeeID IN (SELECT EmployeeID FROM mipins_hr_measures_new WHERE MeasureID IS NULL) AND IsActive = 'Y';"
				],
				"execution_count": 17
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# View mipins_hr_measures_changed_rows is used in a merge (Upsert) statement into the target table\n",
					"- **WHEN MATCHED** ON the surrogate Key (i.e. EmployeeID), EndDate is set to today -1 day and the IsActive flag is set to 'N'\n",
					"- **WHEN NOT MATCHED** ON the surrogate Key, insert rows\n",
					"## Table odw_curated_db.mipins_hr_measures is updated"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"-- merge into fact table\r\n",
					"\r\n",
					"MERGE INTO odw_curated_db.mipins_hr_measures AS Target\r\n",
					"USING mipins_hr_measures_changed_rows AS Source\r\n",
					"\r\n",
					"ON Source.MeasureID = Target.MeasureID\r\n",
					"\r\n",
					"-- For Updates existing rows\r\n",
					"\r\n",
					"WHEN MATCHED\r\n",
					"    THEN \r\n",
					"    UPDATE SET\r\n",
					"    Target.ValidTo = date_sub(current_timestamp,1),\r\n",
					"    Target.IsActive = 'N'\r\n",
					"\r\n",
					"-- -- Insert completely new rows\r\n",
					"-- WHEN NOT MATCHED \r\n",
					"--     THEN INSERT * ;   "
				],
				"execution_count": 18
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Fix the IDs\n",
					"- No auto-increment feature is available in delta tables, therefore we need to create new IDs for the inserted rows\n",
					"- This is done by select the target data and using INSERT OVERWRITE to re-insert the data is a new Row Number\n",
					"## Table odw_curated_db.mipins_hr_measures is updated"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"-- Insert new MeasureID\r\n",
					"\r\n",
					"INSERT INTO odw_curated_db.mipins_hr_measures\r\n",
					"\r\n",
					"SELECT \r\n",
					"    ROW_NUMBER() OVER (ORDER BY MeasureID NULLS LAST) AS MeasureID, -- surrogate key\r\n",
					"    EmployeeID\t,\r\n",
					"    FirstName\t,\r\n",
					"    LastName\t,\r\n",
					"    EmployeeNo\t,\r\n",
					"    CoCd\t,\r\n",
					"    CompanyCode\t,\r\n",
					"    PA\t,\r\n",
					"    PersonnelArea\t,\r\n",
					"    PSubArea\t,\r\n",
					"    PersonnelSubArea\t,\r\n",
					"    OrgUnit\t,\r\n",
					"    OrganizationalUnit\t,\r\n",
					"    OrganizationalKey1\t,\r\n",
					"    OrganizationalKey2\t,\r\n",
					"    WorkC\t,\r\n",
					"    WorkContract\t,\r\n",
					"    CT\t,\r\n",
					"    ContractType\t,\r\n",
					"    PSGroup\t,\r\n",
					"    PayBandDescription\t,\r\n",
					"    FTE\t,\r\n",
					"    WeekHours\t,\r\n",
					"    IndicatorPartTimeEmployee\t,\r\n",
					"    S\t,\r\n",
					"    EmploymentStatus\t,\r\n",
					"    GenderKey\t,\r\n",
					"    TRAStartDate\t,\r\n",
					"    TRAEndDate\t,\r\n",
					"    TRAStatus\t,\r\n",
					"    TRAGrade\t,\r\n",
					"    PrevPersNo\t,\r\n",
					"    Actr\t,\r\n",
					"    ReasonForAction\t,\r\n",
					"    Position\t,\r\n",
					"    Position1\t,\r\n",
					"    CostCtr\t,\r\n",
					"    CostCentre\t,\r\n",
					"    CivilServiceStart\t,\r\n",
					"    DateToCurrentJob\t,\r\n",
					"    SeniorityDate\t,\r\n",
					"    DateToSubstGrade\t,\r\n",
					"    PersNo1\t,\r\n",
					"    NameOfManagerOm\t,\r\n",
					"    ManagerPosition\t,\r\n",
					"    ManagerPositionText\t,\r\n",
					"    CounterSignManager\t,\r\n",
					"    Loc\t,\r\n",
					"    Location\t,\r\n",
					"    OrgStartDate\t,\r\n",
					"    FixTermEndDate\t,\r\n",
					"    LoanStartDate\t,\r\n",
					"    LoanEndDate\t,\r\n",
					"    EEGrp\t,\r\n",
					"    EmployeeGroup\t,\r\n",
					"    AnnualSalary\t,\r\n",
					"    Curr\t,\r\n",
					"    NINumber\t,\r\n",
					"    BirthDate\t,\r\n",
					"    AgeOfEmployee\t,\r\n",
					"    EO\t,\r\n",
					"    EthnicOrigin\t,\r\n",
					"    NID\t,\r\n",
					"    Rel\t,\r\n",
					"    ReligiousDenominationKey\t,\r\n",
					"    Sxo\t,\r\n",
					"    WageType\t,\r\n",
					"    EmployeeSubgroup\t,\r\n",
					"    LoaAbsType\t,\r\n",
					"    LoaAbsenceTypeText\t,\r\n",
					"    SchemeReference\t,\r\n",
					"    PensionSchemeName\t,\r\n",
					"    DisabilityCode\t,\r\n",
					"    DisabilityText\t,\r\n",
					"    DisabilityCodeDescription\t,\r\n",
					"    PArea\t,\r\n",
					"    PayrollArea\t,\r\n",
					"    AssignmentNumber\t,\r\n",
					"    FTE2\t,\r\n",
					"    ReportMonthEndDate\t,\r\n",
					"    LeaveEntitlementHours\t,\r\n",
					"    LeaveTakenHours\t,\r\n",
					"    LeaveRemainingHours\t,\r\n",
					"    LeaveRemainingProrataHours\t,\r\n",
					"    SourceSystemID,\r\n",
					"    IngestionDate,\r\n",
					"    ValidTo,\r\n",
					"    RowID,\r\n",
					"    IsActive\r\n",
					"FROM odw_curated_db.mipins_hr_measures;"
				],
				"execution_count": 19
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"\n",
					"-- SELECT * FROM mipins_hr_measures_changed_rows\n",
					"\n",
					"SELECT * from odw_standardised_db.vw_saphr"
				],
				"execution_count": 22
			}
		]
	}
}