{
	"name": "mipins_hr_measures_NEW",
	"properties": {
		"folder": {
			"name": "odw-curated"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "29579aa3-c18a-4a12-956a-38cbee3dbc24"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw",
				"name": "pinssynspodw",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"\n",
					"CREATE OR REPLACE TEMPORARY VIEW staff_cost\n",
					"\n",
					"     AS\n",
					"\n",
					"SELECT DISTINCT\n",
					"    h.EmployeeID                                                AS EmployeeID,\n",
					"    p.PSGroupCode                                               AS Grade, \n",
					"    h.AnnualSalary                                              AS Salary, \n",
					"    cast(cast(h.AnnualSalary as float)/(365.0*7.4) as float)    AS HourlyRate,\n",
					"    cast(le.ExpectedFrom as date)                               AS ReportMonthEndDate,\n",
					"    le.LeaveDaysPerYear                                         AS LeaveAllowance,\n",
					"    cast(case sign(datediff(day, cast(le.LeaveYearStart as date), le.expectedfrom))\n",
					"                when 1 then le.LeaveYearStart\n",
					"                when 0 then le.LeaveYearStart\n",
					"                else dateadd(year, -1, le.LeaveYearStart)\n",
					"            end as date) as LeaveStartDate,\n",
					"    le.leavedaysperyear*(1 - abs((((datediff(day, cast(\n",
					"            CASE sign(datediff(day, cast(le.leaveyearstart AS date), le.expectedfrom))\n",
					"                WHEN 1 \n",
					"                THEN le.leaveyearstart\n",
					"            ELSE dateadd(year, -1, le.leaveyearstart)\n",
					"            END AS date), le.expectedfrom))/364.25)%1)))        AS ExpectedLeaveHoursRemaining\n",
					"    \n",
					"FROM odw_harmonised_db.hr_employee_dim h\n",
					"LEFT JOIN odw_harmonised_db.hr_leave_entitlement_dim le on h.EmployeeID = le.EmployeeID\n",
					"LEFT JOIN odw_harmonised_db.hr_record_fact r ON h.EmployeeID = r.EmployeeID AND r.IsActive = 'Y'\n",
					"LEFT JOIN odw_harmonised_db.hr_payband_dim p ON r.PayBandID = r.PayBandID\n",
					"WHERE\n",
					"    h.IsActive = 'Y' AND\n",
					"    le.AbsenceQuotaType = 'Annual Leave / P&P';"
				],
				"execution_count": 11
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"\n",
					"CREATE OR REPLACE TEMPORARY VIEW carried_over\n",
					"    \n",
					"    AS\n",
					"\n",
					"SELECT DISTINCT\n",
					"    h.EmployeeID as EmployeeID,\n",
					"    case sign(le.LeaveDaysPerYear - 148)\n",
					"        when 1 then 148\n",
					"        when 0 then 148\n",
					"        else le.LeaveDaysPerYear\n",
					"    end as CarriedOverHours\n",
					"\n",
					"FROM odw_harmonised_db.hr_employee_dim h\n",
					"LEFT JOIN odw_harmonised_db.hr_leave_entitlement_dim le on h.EmployeeID = le.EmployeeID\n",
					"WHERE\n",
					"    le.AbsenceQuotaType = 'Brought Forward';"
				],
				"execution_count": 12
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"\n",
					"CREATE OR REPLACE TEMPORARY VIEW leave_taken\n",
					"\n",
					"     AS\n",
					"\n",
					"SELECT DISTINCT\n",
					"    a.AbsenceID,\n",
					"    a.EmployeeID,\n",
					"    CASE\n",
					"        WHEN sc.ReportMonthEndDate >= a.AbsenceEndDate\n",
					"        THEN a.Hours\n",
					"        ELSE a.Hours - (w.WorkDayHours * datediff(a.AbsenceEndDate, sc.ReportMonthEndDate))\n",
					"    END AS LeaveHours,\n",
					"    a.Days, \n",
					"    a.Hours,\n",
					"    a.CalendarDays,\n",
					"    a.AbsenceStartDate,\n",
					"    a.AbsenceEndDate,\n",
					"    sc.LeaveStartDate\n",
					"\n",
					"FROM odw_harmonised_db.hr_absence_dim a\n",
					"LEFT JOIN odw_harmonised_db.hr_work_schedule_dim w on a.WorkScheduleID = w.WorkScheduleID\n",
					"LEFT JOIN staff_cost sc ON a.EmployeeID = sc.EmployeeID\n",
					"WHERE\n",
					"    a.AbsenceType IN ('PT Annual / P&P Leave', 'FT Annual / Priv Leave')\n",
					"    AND \n",
					"    a.AbsenceStartDate  BETWEEN sc.LeaveStartDate AND sc.ReportMonthEndDate\n",
					"GROUP BY \n",
					"    a.EmployeeID,a.AbsenceID,a.Days,a.Hours,a.CalendarDays,a.AbsenceStartDate,a.AbsenceEndDate,sc.LeaveStartDate,w.WorkDayHours,sc.ReportMonthEndDate\n",
					"Order by AbsenceStartDate"
				],
				"execution_count": 13
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"CREATE OR REPLACE TEMPORARY VIEW leave_taken_fixed\n",
					"\n",
					"    AS\n",
					"\n",
					"SELECT\n",
					"EmployeeID,\n",
					"SUM(LeaveHours) AS LeaveHoursTaken\n",
					"\n",
					"FROM leave_taken\n",
					"Where EmployeeID is not null and LeaveStartDate <= AbsenceStartDate\n",
					"GROUP BY EmployeeID;"
				],
				"execution_count": 14
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"\n",
					"CREATE OR REPLACE TEMPORARY VIEW odw_curated_db.mipins_hr_measures_NEW\n",
					"\n",
					"     AS\n",
					"\t \n",
					"SELECT DISTINCT\n",
					"\ted.EmployeeID\t\t\t\t\t\t\t\t\t\t\t\tAS EmployeeID,\t\t\t\t\t--h.pers_no\n",
					"\ted.FirstName\t\t\t\t\t\t\t\t\t\t\t\tAS FirstName, \t\t\t\t\t--h.first_name, \n",
					"\ted.LastName\t\t\t\t\t\t\t\t\t\t\t\t\tAS LastName, \t\t\t\t\t--h.last_name, \n",
					"\tef.LegacyEmployeeNumber \t\t\t\t\t\t\t\t\tAS EmployeeNo, \t\t\t\t\t--h.employee_no, \n",
					"\t'1900' \t\t\t\t\t\t\t\t\t\t\t\t\t\tAS CoCd,\t\t\t\t\t\t--h.cocd,\n",
					"\t'PINS' \t\t\t\t\t\t\t\t\t\t\t\t\t\tAS CompanyCode, \t\t\t\t--h.company_code,\n",
					"    pad.PersonnelAreaCode\t\t\t\t\t\t\t\t\t\tAS PA, \t\t\t\t\t\t\t--h.pa\n",
					"    pad.Description\t\t            \t\t\t\t\t\t\tAS PersonnelArea,  \t\t\t\t--h.personnel_area\n",
					"    psad.PersonnelAreaCode          \t\t\t\t\t\t\tAS PSubArea,  \t\t\t\t\t--h.psubarea\n",
					"    psad.Description\t            \t\t\t\t\t\t\tAS PersonnelSubArea,  \t\t\t--h.personnel_subarea\n",
					"    oud.OrganisationUnit\t\t\t\t\t\t\t\t\t\tAS OrgUnit, \t\t\t\t\t--h.org_unit\n",
					"    oud.Description\t\t\t        \t\t\t\t\t\t\tAS OrganizationalUnit, \t\t\t--h.organizational_unit\n",
					"    concat(oud.OrganisationUnit,'00000',ccd.CostCenterCode) \tAS OrganizationalKey1, \t\t\t--h.organizational_key1\n",
					"    'No Info' \t\t\t\t\t\t\t\t\t\t\t\t\tAS OrganizationalKey2, \t\t\t--h.organizational_key2\n",
					"    cd.ContractCode \t\t\t\t\t\t\t\t\t\t\tAS WorkC, \t\t\t\t\t\t--h.workc\n",
					"    cd.Description \t\t\t\t\t\t\t\t\t\t\t\tAS WorkContract, \t\t\t\t--h.work_contract\n",
					"    cd.ContractTypeCode \t\t\t\t\t\t\t\t\t\tAS CT, \t\t\t\t\t\t\t--h.ct\n",
					"    cd.ContractType \t\t\t\t\t\t\t\t\t\t\tAS ContractType, \t\t\t\t--h.contract_type\n",
					"    pbd.PSGroupCode \t\t\t\t\t\t\t\t\t\t\tAS PSGroup, \t\t\t\t\t--h.ps_group\n",
					"    pbd.Description \t\t\t\t\t\t\t\t\t\t\tAS PayBandDescription, \t\t\t--h.pay_band_description\n",
					"    ed.FTE \t\t\t\t\t\t\t\t\t\t\t\t\t\tAS FTE, \t\t\t\t\t\t--h.fte\n",
					"    ed.WeekHours \t\t\t\t\t\t\t\t\t\t\t\tAS WeekHours, \t\t\t\t\t--h.wk_hrs\n",
					"    ed.IndicatorPartTimeEmployee\t\t\t\t\t\t\t\tAS IndicatorPartTimeEmployee, \t--h.indicator_part_time_employee\n",
					"    '3' \t\t\t\t\t\t\t\t\t\t\t\t\t\tAS S, \t\t\t\t\t\t\t--h.s\n",
					"    ed.EmploymentStatus \t\t\t\t\t\t\t\t\t\tAS EmploymentStatus, \t\t\t--h.employment_status\n",
					"    ed.Gender \t\t\t\t\t\t\t\t\t\t\t\t\tAS GenderKey, \t\t\t\t\t--h.gender_key\n",
					"    'No Info' \t\t\t\t\t\t\t\t\t\t\t\t\tAS TRAStartDate, \t\t\t\t--h.tra_start_date\n",
					"    'No Info' \t\t\t\t\t\t\t\t\t\t\t\t\tAS TRAEndDate, \t\t\t\t\t--h.tra_end_date\n",
					"    'No Info' \t\t\t\t\t\t\t\t\t\t\t\t\tAS TRAStatus, \t\t\t\t\t--h.tra_status\n",
					"    'No Info' \t\t\t\t\t\t\t\t\t\t\t\t\tAS TRAGrade, \t\t\t\t\t--h.tra_grade\n",
					"    h.prev_persno\t                AS PrevPersNo, --h.prev_persno\n",
					"    h.actr\t                        AS Actr, --h.actr\n",
					"    h.reason_for_action\t            AS ReasonForAction, --h.reason_for_action\n",
					"    h.position\t                    AS Position, --h.position\n",
					"    h.position_1\t                AS Position1, --h.position_1\n",
					"    h.cost_ctr\t                    AS CostCtr, --h.cost_ctr\n",
					"    h.cost_centre\t                AS CostCentre, --h.cost_centre\n",
					"    ed.CivilServiceStart\t\t\tAS CivilServiceStart, --h.civil_service_start\n",
					"    h.date_to_current_job\t        AS DateToCurrentJob, --h.date_to_current_job\n",
					"    h.seniority_date\t            AS SeniorityDate, --h.seniority_date\n",
					"    h.date_to_subst_grade\t        AS DateToSubstGrade, --h.date_to_subst_grade\n",
					"    h.pers_no_1\t                    AS PersNo1, --h.pers_no_1\n",
					"    h.name_of_manager_om\t        AS NameOfManagerOm, --h.name_of_manager_om\n",
					"    h.manager_position\t            AS ManagerPosition, --h.manager_position\n",
					"    h.manager_position_text\t        AS ManagerPositionText, --h.manager_position_text\n",
					"    h.counter_sign_manager\t        AS CounterSignManager, --h.counter_sign_manager\n",
					"    h.loc\t                        AS Loc, --h.loc\n",
					"    h.location\t                    AS Location, --h.location\n",
					"    h.org_start_date\t            AS OrgStartDate, --h.org_start_date\n",
					"    h.fix_term_end_date\t            AS FixTermEndDate, --h.fix_term_end_date\n",
					"    h.loan_start_date\t            AS LoanStartDate, --h.loan_start_date\n",
					"    h.loan_end_date\t                AS LoanEndDate, --h.loan_end_date\n",
					"    h.eegrp\t                        AS EEGrp, --h.eegrp\n",
					"    h.employee_group\t            AS EmployeeGroup, --h.employee_group\n",
					"    rf.annual_salary\t\t\t\t\t\t\t\t\t\t\tAS AnnualSalary, --h.annual_salary\n",
					"    rf.Curr\t\t\t\t\t\t\t\t\t\t\t\t\t\tAS Curr,--h.curr\n",
					"    ef.NINumber\t\t\t\t\t\t\t\t\t\t\t\t\tAS NINumber,--h.ni_number\n",
					"    ef.BirthDate \t\t\t\t\t\t\t\t\t\t\t\tAS BirthDate, --h.birth_date\n",
					"    'No Info'\t\t\t\t\t\t\t\t\t\t\t\t\tAS AgeOfEmployee, --h.age_of_employee\n",
					"    'No Info'\t\t\t\t\t\t\t\t\t\t\t\t\tAS EO, --h.eo\n",
					"    'No Info'\t\t\t\t\t\t\t\t\t\t\t\t\tAS EthnicOrigin, --h.ethnic_origin\n",
					"    'No Info'\t\t\t\t\t\t\t\t\t\t\t\t\tAS NID, --h.nid\n",
					"    'No Info'\t\t\t\t\t\t\t\t\t\t\t\t\tAS Rel, --h.rel\n",
					"    'No Info'\t\t\t\t\t\t\t\t\t\t\t\t\tAS ReligiousDenominationKey, --h.religious_denomination_key\n",
					"    'No Info'\t\t\t\t\t\t\t\t\t\t\t\t\tAS Sxo, -- h.sxo\n",
					"    'No Info'\t\t\t\t\t\t\t\t\t\t\t\t\tAS WageType, --h.wage_type\t\n",
					"    'No Info'\t\t\t\t\t\t\t\t\t\t\t\t\tAS EmployeeSubgroup, --h.employee_subgroup\n",
					"    'No Info'\t\t\t\t\t\t\t\t\t\t\t\t\tAS LoaAbsType, --h.loa_abs_type\n",
					"    'No Info'\t\t\t\t\t\t\t\t\t\t\t\t\tAS LoaAbsenceTypeText, --h.loa_absence_type_text\n",
					"    'No Info'\t\t\t\t\t\t\t\t\t\t\t\t\tAS SchemeReference, --h.scheme_reference\n",
					"    'No Info'\t\t\t\t\t\t\t\t\t\t\t\t\tAS PensionSchemeName, --h.pension_scheme_name\n",
					"    'No Info'\t\t\t\t\t\t\t\t\t\t\t\t\tAS DisabilityCode, --h.disability_code\n",
					"    'No Info'\t\t\t\t\t\t\t\t\t\t\t\t\tAS DisabilityText, --h.disability_text\n",
					"    'No Info'\t\t\t\t\t\t\t\t\t\t\t\t\tAS DisabilityCodeDescription, --h.disability_code_description\n",
					"    h.parea AS PArea, --h.parea \n",
					"    h.payroll_area AS PayrollArea, --h.payroll_area\n",
					"    h.assignment_number AS AssignmentNumber, --h.assignment_number \n",
					"    h.fte_2 AS FTE2, --h.fte_2 \n",
					"\tsc.ReportMonthEndDate\t\t\t\t\t\t\t\t\t\t\tAS Report_MonthEnd_Date,\n",
					"\tcoalesce(sc.LeaveAllowance,0)+coalesce(co.CarriedOverHours,0)\tAS leave_entitlement_hrs,\n",
					"\tcoalesce(lt.LeaveHoursTaken,0) \t\t\t\t\t\t\t\t\tAS leave_taken_hrs,\n",
					"\tround((coalesce(sc.LeaveAllowance,0)+ \n",
					"\t\tcoalesce(co.CarriedOverHours,0) - \n",
					"\t\tcoalesce(sc.ExpectedLeaveHoursRemaining, 0)  - \n",
					"\t\tcoalesce(lt.LeaveHoursTaken, 0)), 2) \t\t\t\t\t\tAS leave_remaining_hours,\n",
					"\tcoalesce(round(sc.ExpectedLeaveHoursRemaining, 2), 0) \t\t\tAS leave_remaining_prorata_hours,\n",
					"\thf.IngestionDate \t\t\t\t\t\t\t\t\t\t\t\tAS IngestionDate,\n",
					"    IFNULL(hf.ValidTo, CURRENT_TIMESTAMP) \t\t\t\t\t\t\tAS ValidTo\n",
					"\t--,coalesce(round((coalesce(sc.LeaveAllowance, 0) + coalesce(co.CarriedOverHours, 0) - coalesce(sc.ExpectedLeaveHoursRemaining, 0)  - coalesce(lt.LeaveHoursTaken, 0)) * (sc.hourly_rate) * (1 + p.Total), 2),0.0) as cost_untaken_al\n",
					"-- from odw_standardised_db.vw_saphr h\n",
					"from odw_harmonised_db.hr_record_fact hr\n",
					"\tLEFT JOIN odw_harmonised_db.hr_employee_dim ed ON ed.EmployeeID = ef.EmployeeID\n",
					"\tLEFT JOIN odw_harmonised_db.hr_employee_fact ef ON ed.EmployeeID = ef.EmployeeID\n",
					"\tLEFT JOIN odw_harmonised_db.hr_personnel_area_dim pad ON rf.PersonnelAreaID = pad.PersonnelAreaID\n",
					"\tLEFT JOIN odw_harmonised_db.hr_personnel_sub_area_dim psad ON rf.PersonnelSubAreaID = psad.PersonnelSubAreaID\n",
					"\tLEFT JOIN odw_harmonised_db.hr_organisation_unit_dim oud ON rf.OrganisationUnitID = oud.OrganisationUnitID\n",
					"\tLEFT JOIN odw_harmonised_db.hr_costcenter_dim ccd ON rf.CostCenterID = oud.CostCenterID\n",
					"\tLEFT JOIN odw_harmonised_db.hr_contract_dim oud ON rf.ContractID = oud.ContractID\n",
					"\tLEFT JOIN odw_harmonised_db.hr_payband_dim pbd ON rf.PayBandID = oud.PayBandID\n",
					"\n",
					"\tleft join staff_cost sc on cast(h.pers_no as int) = cast(sc.EmployeeID as int)\n",
					"\tleft join carried_over co on cast(sc.EmployeeID as int) = cast(co.EmployeeID as int)\n",
					"\tleft join leave_taken_fixed lt on cast(sc.EmployeeID as int) = cast(lt.EmployeeID as int)\n",
					"\tleft join odw_standardised_db.bis_pension_ernic_rates p on sc.Grade = p.Grade\n",
					"where \n",
					"\tright(cast(cast(sc.ReportMonthEndDate as date) as varchar(10)),5) in ('01-31','02-28','02-29','03-31','04-30','05-31','06-30','07-31','08-31','09-30','10-31','11-30','12-31')"
				],
				"execution_count": 15
			}
		]
	}
}