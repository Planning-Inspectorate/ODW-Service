{
	"name": "Delta_backup_poc",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "9572377c-8d8e-4a6d-94bb-09cb3609df93"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw",
				"name": "pinssynspodw",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"\n",
					"###### Delta Data \n",
					"###### Analysis to move delta records to another region (target). \n",
					"###### Current version has a new record inserted or modified\n",
					"###### When delta is moved to target it should have the latest delta changes"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"db_name='odw_curated_db'\n",
					"container_name = 'odw-curated'\n",
					"table_name='listed_building'\n",
					"primary_key='entity'"
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"source": [
					"from notebookutils import mssparkutils"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"storage_account_name: str = mssparkutils.notebook.run('/utils/py_utils_get_storage_account')"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"# backup_storage_account_name: str =  '' mssparkutils.notebook.run('/utils/py_utils_get_storage_account')"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"# Find non-matching files\n",
					"# Define the source and target directories\n",
					"source = f\"abfss://{container_name}@{storage_account_name}.dfs.core.windows.net/{table_name}/\"\n",
					"target = f\"abfss://{container_name}@{backup_storage_account_name}.dfs.core.windows.net/{table_name}/\"\n",
					"\n",
					"# List files in both directories\n",
					"files_source = mssparkutils.fs.ls(source)\n",
					"files_target = mssparkutils.fs.ls(target)\n",
					"\n",
					"# Extract file names only\n",
					"filenames_source = set([file.name for file in files_source])\n",
					"filenames_target = set([file.name for file in files_target])\n",
					"\n",
					"# Find non-matching files\n",
					"only_in_source = filenames_source - filenames_target"
				],
				"execution_count": 23
			},
			{
				"cell_type": "code",
				"source": [
					"for i in only_in_source:\n",
					"    mssparkutils.fs.cp(source+i,target)\n",
					"mssparkutils.fs.cp(source+\"_delta_log\",target,True)"
				],
				"execution_count": 25
			},
			{
				"cell_type": "code",
				"source": [
					" odw-harmonised / appeal_s78"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"import os\n",
					"\n",
					"def list_all_files(base_dir):\n",
					"    \"\"\"\n",
					"    Recursively lists all files in a directory, returning their relative paths.\n",
					"    \"\"\"\n",
					"    file_paths = []\n",
					"    for root, dirs, files in os.walk(base_dir):\n",
					"        for name in files:\n",
					"            full_path = os.path.join(root, name)\n",
					"            relative_path = os.path.relpath(full_path, base_dir)\n",
					"            file_paths.append(relative_path)\n",
					"    return set(file_paths)\n",
					"\n",
					"def compare_directories(dir1, dir2):\n",
					"    \"\"\"\n",
					"    Compares two directories by structure (relative file paths) and prints differences.\n",
					"    \"\"\"\n",
					"    files1 = list_all_files(dir1)\n",
					"    files2 = list_all_files(dir2)\n",
					"\n",
					"    only_in_dir1 = files1 - files2\n",
					"    only_in_dir2 = files2 - files1\n",
					"\n",
					"    print(\"Files only in\", dir1)\n",
					"    for f in sorted(only_in_dir1):\n",
					"        print(\"  \", f)\n",
					"\n",
					"    print(\"\\nFiles only in\", dir2)\n",
					"    for f in sorted(only_in_dir2):\n",
					"        print(\"  \", f)\n",
					"\n",
					"# Example usage\n",
					"dirA = \"abfss://odw-harmonised@pinsstodwdevuks9h80mb.dfs.core.windows.net/appeal_s78_backup/\"\n",
					"dirB = \"abfss://odw-harmonised@pinsstodwdevuks9h80mb.dfs.core.windows.net/appeal_s78_backup_delta/\"\n",
					"\n",
					"compare_directories(dirA, dirB)"
				],
				"execution_count": 33
			},
			{
				"cell_type": "code",
				"source": [
					"\n",
					"\n",
					"# List files in both directories\n",
					"files_source = mssparkutils.fs.ls(dirA)\n",
					"files_target = mssparkutils.fs.ls(dirB)\n",
					"\n",
					"# Extract file names only\n",
					"filenames_source = set([file.name for file in files_source])\n",
					"filenames_target = set([file.name for file in files_target])\n",
					"\n",
					"# Find non-matching files\n",
					"only_in_source = filenames_source - filenames_target"
				],
				"execution_count": 34
			},
			{
				"cell_type": "code",
				"source": [
					"only_in_source"
				],
				"execution_count": 35
			},
			{
				"cell_type": "code",
				"source": [
					"#mssparkutils.fs.cp(dirA,dirB,True)"
				],
				"execution_count": 29
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"outputs_hidden": true
					}
				},
				"source": [
					"def list_all_files_recursively(base_path):\n",
					"    all_files = []\n",
					"\n",
					"    def traverse(path, prefix=\"\"):\n",
					"        entries = mssparkutils.fs.ls(path)\n",
					"        for entry in entries:\n",
					"            full_path = entry.path\n",
					"            relative_path = full_path.replace(base_path, \"\")\n",
					"            print(relative_path)\n",
					"            all_files.append(prefix + relative_path)\n",
					"            if entry.isDir:\n",
					"                traverse( prefix + relative_path)\n",
					"            # else:\n",
					"            #     all_files.append(prefix + relative_path)\n",
					"\n",
					"    traverse(base_path)\n",
					"    return set(all_files)\n",
					"\n",
					"source = dirA\n",
					"target = dirB\n",
					"# Get all files recursively from both paths\n",
					"files_source = list_all_files_recursively(source)\n",
					"files_target = list_all_files_recursively(target)\n",
					"\n",
					"# Find non-matching files\n",
					"only_in_source = files_source - files_target\n",
					"\n",
					"print(only_in_source)"
				],
				"execution_count": 41
			}
		]
	}
}