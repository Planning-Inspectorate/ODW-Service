{
	"name": "Delta_backup_poc",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "9c0999c1-df67-4642-ac05-030b77e8783f"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw",
				"name": "pinssynspodw",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"\n",
					"###### Delta Data \n",
					"###### Analysis to move delta records to another region (target). \n",
					"###### Current version has a new record inserted or modified\n",
					"###### When delta is moved to target it should have the latest delta changes"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"from notebookutils import mssparkutils\n",
					"import re\n",
					"storage_account_source_path=re.search('url=https://(.+?);', mssparkutils.credentials.getFullConnectionString('ls_backup_source')).group(1)\n",
					""
				],
				"execution_count": 30
			},
			{
				"cell_type": "code",
				"source": [
					"storage_account_source_path"
				],
				"execution_count": 31
			},
			{
				"cell_type": "code",
				"source": [
					"storage_account_backup_path=re.search('url=https://(.+?);', mssparkutils.credentials.getFullConnectionString('ls_backup_destination')).group(1)"
				],
				"execution_count": 32
			},
			{
				"cell_type": "code",
				"source": [
					"container_name = 'odw-harmonised'\n",
					"table_name='appeal_s78'"
				],
				"execution_count": 34
			},
			{
				"cell_type": "code",
				"source": [
					"storage_account_name = storage_account_path.split(\".\")[0]"
				],
				"execution_count": 35
			},
			{
				"cell_type": "code",
				"source": [
					"storage_account_backup_name= storage_account_backup_path.split(\".\")[0]"
				],
				"execution_count": 36
			},
			{
				"cell_type": "code",
				"source": [
					"def list_all_files(base_path, relative_path=\"\"):\n",
					"    files = []\n",
					"    full_path = base_path + \"/\" + relative_path if relative_path else base_path\n",
					"    items = mssparkutils.fs.ls(full_path)\n",
					"    \n",
					"    for item in items:\n",
					"        item_path = f\"{relative_path}/{item.name}\".rstrip(\"/\")\n",
					"        if item.isDir:\n",
					"            files.extend(list_all_files(base_path, item_path))\n",
					"        else:\n",
					"            files.append(item_path)\n",
					"    return set(files)\n",
					"\n",
					"# Set base path\n",
					"base_path = f\"abfss://{container_name}@{storage_account_name}.dfs.core.windows.net/{table_name}\"\n",
					"backup_path = f\"abfss://{container_name}@{storage_account_backup_name}.dfs.core.windows.net/{table_name}\"\n",
					"\n",
					"# Get list of all files relative to table1\n",
					"base_path_list = list_all_files(base_path)\n",
					"backup_path_list = list_all_files(backup_path)\n",
					"\n",
					"# Print the result\n",
					"delta_files = base_path_list-backup_path_list\n",
					"print(delta_files)"
				],
				"execution_count": 100
			},
			{
				"cell_type": "code",
				"source": [
					"df = spark.read.load(base_path)\n",
					"df.count()"
				],
				"execution_count": 105
			},
			{
				"cell_type": "code",
				"source": [
					"df1 = spark.read.load(backup_path)\n",
					"df1.count()"
				],
				"execution_count": 104
			},
			{
				"cell_type": "code",
				"source": [
					"for file in delta_files:\n",
					"    mssparkutils.fs.cp(base_path+file,backup_path+file)"
				],
				"execution_count": 103
			}
		]
	}
}