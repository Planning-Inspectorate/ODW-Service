{
	"name": "py_1_raw_to_standardised_hr_tests",
	"properties": {
		"folder": {
			"name": "1-odw-raw-to-standardised/Fileshare/SAP_HR"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "2ee21547-c4aa-4894-bc71-7801c26841bc"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": true,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw",
				"name": "pinssynspodw",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.2",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%run \"1-odw-raw-to-standardised/Fileshare/SAP_HR/py_1_raw_to_standardised_hr_functions\""
				],
				"execution_count": 23
			},
			{
				"cell_type": "code",
				"source": [
					"import unittest"
				],
				"execution_count": 24
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"class TestRawToStandardisedExcel(unittest.TestCase):\r\n",
					"    ''' \r\n",
					"    unit tests to test the functions contained within py_1_raw_to_standardised_hr_functions\r\n",
					"    '''\r\n",
					"    def test_constructor_path_string(self):\r\n",
					"        ''' Class constructor - checking for file string path being abfss and not https or other formats '''\r\n",
					"        with self.assertRaises(ValueError) as context:\r\n",
					"            RawToStandardisedExcel('hello', 'world', 'hello', 3 )\r\n",
					"        self.assertTrue(str(context.exception), \"String is not of abfss:// type\")\r\n",
					"\r\n",
					"    def test_constructor_path_type(self):\r\n",
					"        ''' Class constructor - checking for file string path being abfss and not https or other formats '''\r\n",
					"        with self.assertRaises(TypeError) as context:\r\n",
					"            RawToStandardisedExcel('hello', 3, 'hello', 3 )\r\n",
					"        self.assertTrue(str(context.exception), \"File path variable is not of type string\")\r\n",
					"\r\n",
					"    def test_constructor_storage_type(self):\r\n",
					"        ''' Class constructor - checking for file string path being abfss and not https or other formats '''\r\n",
					"        with self.assertRaises(TypeError) as context:\r\n",
					"            RawToStandardisedExcel(3, 'hello', 'hello', 3 )\r\n",
					"        self.assertTrue(str(context.exception), \"File path variable is not of type string\")\r\n",
					""
				],
				"execution_count": 25
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"output = unittest.main(argv=['first-arg-is-ignored'], exit=False).result.wasSuccessful()"
				],
				"execution_count": 26
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"output"
				],
				"execution_count": 27
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					""
				],
				"execution_count": null
			}
		]
	}
}