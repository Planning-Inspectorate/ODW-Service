{
	"name": "py_1_raw_to_standardised_hr_tests",
	"properties": {
		"folder": {
			"name": "1-odw-raw-to-standardised/Fileshare/SAP_HR"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodwpr",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "5e91747a-debc-4ef0-9f86-87c8737a3ec7"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": true,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodwpr",
				"name": "pinssynspodwpr",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodwpr",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net",
					"authHeader": null
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"extraHeader": null
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%run \"1-odw-raw-to-standardised/Fileshare/SAP_HR/py_1_raw_to_standardised_hr_functions\""
				],
				"execution_count": 53
			},
			{
				"cell_type": "code",
				"source": [
					"import unittest\r\n",
					"from unittest.mock import patch, MagicMock"
				],
				"execution_count": 54
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"class TestRawToStandardisedExcel(unittest.TestCase):\r\n",
					"    ''' \r\n",
					"    unit tests to test the functions contained within py_1_raw_to_standardised_hr_functions\r\n",
					"        validate_parameters(storage_acc, raw_container, raw_source_folder, raw_name, standardised_container, standardised_source_folder, standardised_name, linked_service, sheet_name=0, header_row=0)\r\n",
					"        def validate_parameters(structure construction)\r\n",
					"        def validate_parameters(parameters not being strings)\r\n",
					"        def validate_parameters(sheet_name not being a string or an integer)\r\n",
					"        def validate_parameters(header_row not being an integer)\r\n",
					"        def _cleanse_headers(df)\r\n",
					"        def _change_types(df)\r\n",
					"        def ingest_excel_to_parquet(storage_acc, raw_container, raw_source_folder, raw_name, standardised_container, standardised_source_folder, standardised_name, linked_service, sheet_name=0, header=0)\r\n",
					"        ---- def enable_delta_on_parquet(standardised_container, standardised_source_folder)  FEATURE TEST\r\n",
					"        def lakedb_table_sparksql(db_name,delta_lake_table_name,standardised_container, standardised_source_folder)\r\n",
					"    '''\r\n",
					"    #WORKING\r\n",
					"    def test_vp_constructor_path_string(self):\r\n",
					"        ''' Checking for file string path being abfss and not https or other formats '''\r\n",
					"        with self.assertRaises(Exception) as context:\r\n",
					"            #validate_parameters(storage_acc, raw_container, raw_source_folder, raw_name, standardised_container, standardised_source_folder, standardised_name, linked_service)\r\n",
					"            validate_parameters('pinsstodwdevuks9h80mb.dfs.core.windows.net/', 'hello', 'Fileshare/SAP_HR/2022-08/', 'Addresses - 20220831.xlsx', 'abfss://odw-standardised@pinsstodwdevuks9h80mb.dfs.core.windows.net/', 'HR/addresses/', 'Addresses - 20220831.snappy.parquet', 'ls_storage')\r\n",
					"        self.assertTrue(str(context.exception), \"File path string is not of abfss:// type\")  \r\n",
					"\r\n",
					"    #WORKING\r\n",
					"    def test_vp_parameters_as_string(self):\r\n",
					"        ''' Checking for file parameters to only be strings '''\r\n",
					"        with self.assertRaises(Exception) as context:\r\n",
					"            validate_parameters('pinsstodwdevuks9h80mb.dfs.core.windows.net/', 'abfss://odw-raw@pinsstodwdevuks9h80mb.dfs.core.windows.net/', 'Fileshare/SAP_HR/2022-08/', 'Addresses - 20220831.xlsx', 'abfss://odw-standardised@pinsstodwdevuks9h80mb.dfs.core.windows.net/', 'HR/addresses/', 'Addresses - 20220831.snappy.parquet', 111)\r\n",
					"        self.assertTrue(str(context.exception), \"Parameters: linked_service not of type string\")\r\n",
					" \r\n",
					"    #WORKING\r\n",
					"    def test_vp_sheet_name(self):\r\n",
					"        ''' Checking that the sheet name states is either a number or a string (or empty) '''\r\n",
					"        with self.assertRaises(Exception) as context:\r\n",
					"            validate_parameters('pinsstodwdevuks9h80mb.dfs.core.windows.net/', 'abfss://odw-raw@pinsstodwdevuks9h80mb.dfs.core.windows.net/', 'Fileshare/SAP_HR/2022-08/', 'Addresses - 20220831.xlsx', 'abfss://odw-standardised@pinsstodwdevuks9h80mb.dfs.core.windows.net/', 'HR/addresses/', 'Addresses - 20220831.snappy.parquet', 'ls_storage', True, 0)\r\n",
					"        self.assertTrue(str(context.exception), \"Sheet name should either be a string or a integer\")\r\n",
					" \r\n",
					"    #WORKING\r\n",
					"    def test_vp_header_row(self):\r\n",
					"        ''' Checking for the value for the header of the sheet should be a number '''\r\n",
					"        with self.assertRaises(Exception) as context:\r\n",
					"            validate_parameters('pinsstodwdevuks9h80mb.dfs.core.windows.net/', 'abfss://odw-raw@pinsstodwdevuks9h80mb.dfs.core.windows.net/', 'Fileshare/SAP_HR/2022-08/', 'Addresses - 20220831.xlsx', 'abfss://odw-standardised@pinsstodwdevuks9h80mb.dfs.core.windows.net/', 'HR/addresses/', 'Addresses - 20220831.snappy.parquet', 'ls_storage', 1, \"hello\")\r\n",
					"        self.assertTrue(str(context.exception), \"Header row should be an integer value\")\r\n",
					" \r\n",
					"    #WORKING\r\n",
					"    def test_ch_cleansing_headers(self):\r\n",
					"        '''Checking the cleansing headers process: headers sanitised'''\r\n",
					"        import pandas as pd\r\n",
					"        test_data = {'hello world__all ':['A', 'B', 'C', 'D']}\r\n",
					"        tdf = pd.DataFrame(test_data)\r\n",
					"        rtdf = _cleanse_headers(tdf)\r\n",
					"        self.assertEqual(rtdf.columns, pd.Index(['hello_world_all'], dtype='object'))\r\n",
					"\r\n",
					"    #WORKING\r\n",
					"    def test_ch_dataframe_error(self):\r\n",
					"        '''Checking the cleansing headers process: input not a dataframe error'''\r\n",
					"        with self.assertRaises(Exception) as context:\r\n",
					"            _cleanse_headers('hello world')\r\n",
					"        self.assertTrue('Expecting a pandas dataframe')\r\n",
					"\r\n",
					"    #WORKING\r\n",
					"    def test_ct_change_types(self):\r\n",
					"        '''Checking the cleansing headers process'''\r\n",
					"        import pandas as pd\r\n",
					"        df1 = pd.DataFrame({'my_table':[1, 'example']})\r\n",
					"        df2 = pd.DataFrame({'my_table':['1', 'example']})\r\n",
					"        df3 = _change_types(df1)\r\n",
					"        self.assertEqual(True, df2.equals(df3))\r\n",
					"\r\n",
					"    #WORKING\r\n",
					"    def test_ct_dataframe_error(self):\r\n",
					"        '''Checking the change types process: input not a dataframe error'''\r\n",
					"        with self.assertRaises(Exception) as context:\r\n",
					"            _change_types('hello world')\r\n",
					"        self.assertTrue('Expecting a pandas dataframe')\r\n",
					"\r\n",
					""
				],
				"execution_count": 55
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"output = unittest.main(argv=['first-arg-is-ignored'], exit=False).result.wasSuccessful()"
				],
				"execution_count": 56
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"output"
				],
				"execution_count": 57
			}
		]
	}
}