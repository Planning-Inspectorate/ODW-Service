{
	"name": "existing_tables",
	"properties": {
		"folder": {
			"name": "utils"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "tempsparkpool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "385379ea-1657-4c33-8f87-22c64572d975"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/tempsparkpool",
				"name": "tempsparkpool",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/tempsparkpool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"from notebookutils import mssparkutils\r\n",
					"from pyspark.sql import DataFrame\r\n",
					"import pprint\r\n",
					"import json"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"storage_account = mssparkutils.notebook.run('/utils/py_utils_get_storage_account')"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"standardised_container = 'odw-standardised'\r\n",
					"harmonised_container = 'odw-harmonised'\r\n",
					"curated_container = 'odw-curated'\r\n",
					"curated_migration_container = 'odw-curated-migration'\r\n",
					"config_container = 'odw-config-db'\r\n",
					"logging_container = 'logging'"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def list_tables(db_name: str):\r\n",
					"    spark.sql(f\"USE {db_name}\")\r\n",
					"    tables_df: DataFrame = spark.sql(\"SHOW TABLES\")\r\n",
					"    table_names: list = [row['tableName'] for row in tables_df.collect()]\r\n",
					"    \r\n",
					"    return table_names"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def create_table_metadata(container: str, db_name: str, tables: list) -> dict:\r\n",
					"    table_metadata = {}\r\n",
					"    table_metadata = []\r\n",
					"    for table in tables:\r\n",
					"        try:\r\n",
					"            table_details = spark.sql(f\"DESCRIBE FORMATTED {db_name}.{table}\")\r\n",
					"            table_info = {row['col_name']: row['data_type'] for row in table_details.collect()}\r\n",
					"            #print(table_info)  # Print table_info to review its contents\r\n",
					"            #table_name = table_info.get(\"name\", table)\r\n",
					"            table_name = table_info.get(\"Name\", table).split('.')[-1]\r\n",
					"            table_location = table_info.get(\"Location\", \"Unknown\")\r\n",
					"            table_format = table_info.get(\"Provider\", \"Unknown\")\r\n",
					"            table_type = \"External\" if table_info.get(\"External\", \"false\") == \"true\" else table_info.get(\"Type\", \"Unknown\")\r\n",
					"\r\n",
					"            # This handles cases where tables were created in the default location by mistake by not specifying location in the create table script.\r\n",
					"            # Therefore there were tables created in the default location. This won't be needed in future.\r\n",
					"            if table_location.startswith('abfss://synapse'):\r\n",
					"                location = f'abfss://{container}@{storage_account}{table_name}'\r\n",
					"            else:\r\n",
					"                location = table_location\r\n",
					"            # table_metadata[table_name] = {\r\n",
					"            #     \"table_location\": location,\r\n",
					"            #     \"table_type\": table_type,\r\n",
					"            #     \"table_format\": table_format\r\n",
					"            #     }\r\n",
					"\r\n",
					"            table_metadata.append({\r\n",
					"                \"database_name\": db_name,\r\n",
					"                \"table_name\": table_name,\r\n",
					"                \"table_format\": table_format,\r\n",
					"                \"table_type\": table_type,\r\n",
					"                \"table_location\": location\r\n",
					"            })\r\n",
					"\r\n",
					"        except Exception as e:\r\n",
					"            print(f\"Failed to fetch details for {table}: {e}\")\r\n",
					"\r\n",
					"    return table_metadata"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"db_name = \"odw_standardised_db\"\r\n",
					"tables = list_tables(db_name=db_name)\r\n",
					"standardised_metadata = create_table_metadata(container=standardised_container, db_name=db_name, tables=tables)"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"db_name = \"odw_harmonised_db\"\r\n",
					"tables = list_tables(db_name=db_name)\r\n",
					"harmonised_metadata = create_table_metadata(container=harmonised_container, db_name=db_name, tables=tables)"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"db_name = \"odw_curated_db\"\r\n",
					"tables = list_tables(db_name=db_name)\r\n",
					"curated_metadata = create_table_metadata(container=curated_container, db_name=db_name, tables=tables)"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"db_name = \"odw_curated_migration_db\"\r\n",
					"tables = list_tables(db_name=db_name)\r\n",
					"curated_migration_metadata = create_table_metadata(container=curated_migration_container, db_name=db_name, tables=tables)"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"db_name = \"odw_config_db\"\r\n",
					"tables = list_tables(db_name=db_name)\r\n",
					"config_metadata = create_table_metadata(container=config_container, db_name=db_name, tables=tables)"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"db_name = \"logging\"\r\n",
					"tables = list_tables(db_name=db_name)\r\n",
					"logging_metadata = create_table_metadata(container=logging_container, db_name=db_name, tables=tables)"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"combined_metadata = [\r\n",
					"    {\"standardised_metadata\": standardised_metadata},\r\n",
					"    {\"harmonised_metadata\": harmonised_metadata},\r\n",
					"    {\"curated_metadata\": curated_metadata},\r\n",
					"    {\"curated_migration_metadata\": curated_migration_metadata},\r\n",
					"    {\"config_metadata\": config_metadata},\r\n",
					"    {\"logging_metadata\": logging_metadata}\r\n",
					"]"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"pprint.pprint(combined_metadata)"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"existing_tables_metadata = json.dumps(combined_metadata, indent=4)\r\n",
					"\r\n",
					"file_path = 'abfss://odw-config@pinsstodwdevuks9h80mb.dfs.core.windows.net/existing-tables-metadata.json'\r\n",
					"\r\n",
					"mssparkutils.fs.put(file_path, existing_tables_metadata, overwrite=True)\r\n",
					"\r\n",
					"print(f\"Existing Tables Metadata saved to: {file_path}\")"
				],
				"execution_count": null
			}
		]
	}
}