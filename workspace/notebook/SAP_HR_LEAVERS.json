{
	"name": "SAP_HR_LEAVERS",
	"properties": {
		"folder": {
			"name": "odw-harmonised"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "e4fb4578-3a94-4040-a927-375696ed56fb"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw",
				"name": "pinssynspodw",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Entity Name : SAP_HR_LEAVERS\n",
					"### Author: Prathap A\n",
					"### Date: 25/02/2025\n",
					"\n",
					"#### version : 0001\n",
					""
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Intialisations"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"from pyspark.sql.functions import udf, col, lit, when, coalesce, concat, sum, avg, max, min, count, countDistinct, date_format, to_date, datediff, months_between, year, month,  hour, minute, second, expr, asc, desc\n",
					"from pyspark.sql.types import DateType, TimestampType, StringType, IntegerType, FloatType, DoubleType, BooleanType, StructType, StructField, ArrayType, MapType\n",
					"from pyspark.sql.window import Window\n",
					"from pyspark.sql.functions import row_number, rank, dense_rank, lag, lead, ntile\n",
					"from pyspark.sql import SQLContext\n",
					"from pyspark.sql import DataFrame\n",
					"from pyspark.sql import functions as F\n",
					"from pyspark.sql.avro.functions import from_avro, to_avro\n",
					"from pyspark.sql.streaming import DataStreamReader, DataStreamWriter\n",
					"from pyspark.sql.utils import AnalysisException\n",
					"from pyspark.sql.catalog import Catalog\n",
					"from pyspark.sql.column import Column\n",
					"from pyspark.sql.group import GroupedData\n",
					"from pyspark.sql.pandas.functions import pandas_udf\n",
					"\n",
					"from datetime import datetime, timedelta\n",
					"import pandas as pd\n",
					"import numpy as np"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"source": [
					"spark.sql(\"\"\"\n",
					"CREATE TABLE IF NOT EXISTS odw_harmonised_db.stage_SAP_HR_Leavers (\n",
					"\n",
					"    PersNo                 STRING,\n",
					"    Lastname               STRING,\n",
					"    Firstname              STRING,\n",
					"    CoCd                   STRING,\n",
					"    CompanyCode            STRING,\n",
					"    Loc                    STRING,\n",
					"    Location               STRING,\n",
					"    PSgroup                STRING,\n",
					"    PayBandDescription     STRING,\n",
					"    Orgunit                STRING,\n",
					"    OrganizationalUnit     STRING,\n",
					"    PA                     STRING,\n",
					"    PersonnelArea          STRING,\n",
					"    PSubarea               STRING,\n",
					"    PersonnelSubarea       STRING,\n",
					"    WorkC                  STRING,\n",
					"    WorkContract           STRING,\n",
					"    OrgStartDate           TIMESTAMP,\n",
					"    Leaving                TIMESTAMP,\n",
					"    Act                    STRING,\n",
					"    ActionType             STRING,\n",
					"    ActR                   STRING,\n",
					"    ReasonforAction        STRING,\n",
					"    S                      STRING,\n",
					"    EmploymentStatus       STRING,\n",
					"    EmployeeNo             STRING,\n",
					"    Position               STRING,\n",
					"    Position1              STRING,\n",
					"    Annualsalary           STRING,\n",
					"    Curr                   STRING,\n",
					"    UserID                 STRING,\n",
					"    EmailAddress           STRING,\n",
					"    PersNo1                STRING,\n",
					"    NameofManagerOM        STRING,\n",
					"    ManagerPosition        STRING,\n",
					"    ManagerPositionText    STRING,\n",
					"    LMEmail                STRING\n",
					") \n",
					" USING DELTA;\n",
					"\"\"\")"
				],
				"execution_count": 77
			},
			{
				"cell_type": "code",
				"source": [
					"spark.sql(\"\"\"\n",
					"CREATE TABLE IF NOT EXISTS odw_harmonised_db.SAP_HR_Leavers (\n",
					"\n",
					"    PersNo                 STRING,\n",
					"    Lastname               STRING,\n",
					"    Firstname              STRING,\n",
					"    CoCd                   STRING,\n",
					"    CompanyCode            STRING,\n",
					"    Loc                    STRING,\n",
					"    Location               STRING,\n",
					"    PSgroup                STRING,\n",
					"    PayBandDescription     STRING,\n",
					"    Orgunit                STRING,\n",
					"    OrganizationalUnit     STRING,\n",
					"    PA                     STRING,\n",
					"    PersonnelArea          STRING,\n",
					"    PSubarea               STRING,\n",
					"    PersonnelSubarea       STRING,\n",
					"    WorkC                  STRING,\n",
					"    WorkContract           STRING,\n",
					"    OrgStartDate           TIMESTAMP,\n",
					"    Leaving                TIMESTAMP,\n",
					"    Act                    STRING,\n",
					"    ActionType             STRING,\n",
					"    ActR                   STRING,\n",
					"    ReasonforAction        STRING,\n",
					"    S                      STRING,\n",
					"    EmploymentStatus       STRING,\n",
					"    EmployeeNo             STRING,\n",
					"    Position               STRING,\n",
					"    Position1              STRING,\n",
					"    Annualsalary           STRING,\n",
					"    Curr                   STRING,\n",
					"    UserID                 STRING,\n",
					"    EmailAddress           STRING,\n",
					"    PersNo1                STRING,\n",
					"    NameofManagerOM        STRING,\n",
					"    ManagerPosition        STRING,\n",
					"    ManagerPositionText    STRING,\n",
					"    LMEmail                STRING\n",
					") \n",
					" USING DELTA;\n",
					"\"\"\")"
				],
				"execution_count": 78
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# stage_SAP_HR_Leavers"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"\n",
					"\n",
					"\n",
					"delete from odw_harmonised_db.stage_SAP_HR_Leavers where PersNo is null;\n",
					"\n",
					"\n",
					"INSERT INTO odw_harmonised_db.stage_SAP_HR_Leavers\n",
					"(\n",
					"    PersNo,            \n",
					"    Lastname,     \n",
					"    Firstname,       \n",
					"    CoCd,        \n",
					"    CompanyCode,        \n",
					"    Loc,                \n",
					"    Location,         \n",
					"    PSgroup,             \n",
					"    PayBandDescription,  \n",
					"    Orgunit,            \n",
					"    OrganizationalUnit, \n",
					"    PA,                 \n",
					"    PersonnelArea,      \n",
					"    PSubarea,           \n",
					"    PersonnelSubarea,   \n",
					"    WorkC,              \n",
					"    WorkContract,       \n",
					"    OrgStartDate,  \n",
					"    Leaving,       \n",
					"    Act,                \n",
					"    ActionType,         \n",
					"    ActR,               \n",
					"    ReasonforAction,    \n",
					"    S,                  \n",
					"    EmploymentStatus,  \n",
					"    EmployeeNo,         \n",
					"    Position,           \n",
					"    Position1,  \n",
					"    Annualsalary,        \n",
					"    Curr,               \n",
					"    UserID,             \n",
					"    EmailAddress,       \n",
					"    PersNo1,            \n",
					"    NameofManagerOM,    \n",
					"    ManagerPosition,    \n",
					"    ManagerPositionText, \n",
					"    LMEmail   \n",
					")          \n",
					"SELECT \n",
					"    PersNo,            \n",
					"    Lastname,     \n",
					"    Firstname,       \n",
					"    CoCd,        \n",
					"    CompanyCode,        \n",
					"    Loc,                \n",
					"    Location,         \n",
					"    PSgroup,             \n",
					"    PayBandDescription,  \n",
					"    Orgunit,            \n",
					"    OrganizationalUnit, \n",
					"    PA,                 \n",
					"    PersonnelArea,      \n",
					"    PSubarea,           \n",
					"    PersonnelSubarea,   \n",
					"    WorkC,              \n",
					"    WorkContract, \n",
					"CASE \n",
					"    WHEN instr(OrgStartDate, '/') = 0 THEN CAST(OrgStartDate AS DATE)\n",
					"    ELSE CAST(\n",
					"        concat(\n",
					"            substring(OrgStartDate, length(OrgStartDate) - 3 + 1, 4), '-', \n",
					"            substring(OrgStartDate, instr(OrgStartDate, '/') + 1, 2), '-', \n",
					"            substring(OrgStartDate, 1, instr(OrgStartDate, '/') - 1)\n",
					"        ) AS DATE\n",
					"    )\n",
					"END AS OrgStartDate,\n",
					"\n",
					"CASE \n",
					"    WHEN instr(Leaving, '/') = 0 THEN CAST(Leaving AS DATE)\n",
					"    ELSE CAST(\n",
					"        concat(\n",
					"            substring(Leaving, length(Leaving) - 3 + 1, 4), '-', \n",
					"            substring(Leaving, instr(Leaving, '/') + 1, 2), '-', \n",
					"            substring(Leaving, 1, instr(Leaving, '/') - 1)\n",
					"        ) AS DATE\n",
					"    )\n",
					"END AS Leaving,\n",
					"    Act,                \n",
					"    ActionType,         \n",
					"    ActR,               \n",
					"    ReasonforAction,    \n",
					"    S,                  \n",
					"    EmploymentStatus,  \n",
					"    EmployeeNo,         \n",
					"    Position,           \n",
					"    Position1, \n",
					"    null as   Annualsalary,       \n",
					"    Curr,               \n",
					"    UserID,             \n",
					"    EmailAddress,       \n",
					"    PersNo1,            \n",
					"    NameofManagerOM,    \n",
					"    ManagerPosition,    \n",
					"    ManagerPositionText,  -- Corrected column name\n",
					"    LMEmail      \n",
					"FROM \n",
					"    odw_standardised_db.sap_hr_leavers_monthly;"
				],
				"execution_count": 28
			},
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"\n",
					"select Leaving from odw_standardised_db.sap_hr_leavers_monthly  limit 5"
				],
				"execution_count": 39
			},
			{
				"cell_type": "code",
				"source": [
					"to_date('2024-01-31','yyyy-MM-dd')"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"\n",
					"select \n",
					"CASE \n",
					"    WHEN instr(to_date(Leaving,'yyyy-MM-dd') '/') = 0 THEN CAST(Leaving AS DATE)\n",
					"    ELSE CAST(\n",
					"        concat(\n",
					"            substring(to_date(Leaving,'yyyy-MM-dd'), length(to_date(Leaving,'yyyy-MM-dd')) - 3 + 1, 4), '-', \n",
					"            substring(to_date(Leaving,'yyyy-MM-dd'), instr(to_date(Leaving,'yyyy-MM-dd'), '/') + 1, 2), '-', \n",
					"            substring(to_date(Leaving,'yyyy-MM-dd'), 1, instr(to_date(Leaving,'yyyy-MM-dd'), '/') - 1)\n",
					"        ) AS DATE\n",
					"    )\n",
					"END AS Leaving\n",
					"\n",
					"from odw_harmonised_db.stage_SAP_HR_Leavers"
				],
				"execution_count": 40
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Update Statements"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"\n",
					"update odw_harmonised_db.stage_SAP_HR_Leavers\n",
					"set EmployeeNo = '' \n",
					"where EmployeeNo is null\n",
					""
				],
				"execution_count": 80
			},
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"update odw_harmonised_db.stage_SAP_HR_Leavers\n",
					"set Leaving = '2024-02-29'\n",
					" where PersNo = '50426514'"
				],
				"execution_count": 81
			},
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": false
				},
				"source": [
					"\n",
					"%%sql\n",
					"\n",
					"update odw_harmonised_db.stage_SAP_HR_Leavers\n",
					"set Leaving = current_date()\n",
					""
				],
				"execution_count": 82
			},
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": false
				},
				"source": [
					"\t%%sql\n",
					"    \n",
					"update odw_harmonised_db.stage_SAP_HR_Leavers \n",
					" set Annualsalary = null;"
				],
				"execution_count": 83
			},
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"delete from odw_harmonised_db.SAP_HR_Leavers"
				],
				"execution_count": 33
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# odw_harmonised_db.SAP_HR_Leavers"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"from delta.tables import DeltaTable\n",
					"from pyspark.sql import Window\n",
					"from pyspark.sql.functions import row_number,col\n",
					"\n",
					"# Step 1: Update Annualsalary to null\n",
					"delta_table = DeltaTable.forName(spark, \"odw_harmonised_db.stage_SAP_HR_Leavers\")\n",
					"delta_table.update(\"Annualsalary IS NOT NULL\", {\"Annualsalary\": \"null\"})\n",
					"\n",
					"# Step 2: Delete duplicates\n",
					"# Create a DataFrame from the Delta table\n",
					"df = delta_table.toDF()\n",
					"\n",
					"# Add a row number column to identify duplicates\n",
					"window_spec = Window.partitionBy(\"PersNo\", \"Leaving\").orderBy(\"PersNo\", \"Leaving\")\n",
					"df_with_row_number = df.withColumn(\"val\", row_number().over(window_spec))\n",
					"\n",
					"# Filter out duplicates (keep only the first occurrence)\n",
					"df_filtered = df_with_row_number.filter(col(\"val\") == 1).drop(\"val\")\n",
					"\n",
					"# Overwrite the Delta table with the cleaned data\n",
					"df_filtered.write.format(\"delta\").mode(\"overwrite\").saveAsTable(\"odw_harmonised_db.stage_SAP_HR_Leavers\")\n",
					"\n",
					"# Step 3: Delete records from SAP_HR_Leavers within the date range\n",
					"# Calculate min and max dates\n",
					"min_year = df.selectExpr(\"YEAR(MIN(Leaving))\").collect()[0][0]\n",
					"max_year = df.selectExpr(\"YEAR(MAX(Leaving))\").collect()[0][0]\n",
					"mindate = f\"{min_year}-04-01\"\n",
					"maxdate = f\"{max_year + 1}-03-31\"\n",
					"\n",
					"# Delete records from the target table\n",
					"target_table = DeltaTable.forName(spark, \"odw_harmonised_db.SAP_HR_Leavers\")\n",
					"target_table.delete(f\"Leaving BETWEEN '{mindate}' AND '{maxdate}'\")\n",
					"\n",
					"# Step 4: Insert records into SAP_HR_Leavers\n",
					"df_filtered.write.format(\"delta\").mode(\"append\").saveAsTable(\"odw_harmonised_db.SAP_HR_Leavers\")"
				],
				"execution_count": 34
			},
			{
				"cell_type": "code",
				"source": [
					"from delta.tables import DeltaTable\n",
					"from pyspark.sql import Window\n",
					"from pyspark.sql.functions import row_number, col\n",
					"\n",
					"# Step 1: Update Annualsalary to null\n",
					"delta_table = DeltaTable.forName(spark, \"odw_harmonised_db.stage_SAP_HR_Leavers\")\n",
					"delta_table.update(\"Annualsalary IS NOT NULL\", {\"Annualsalary\": \"null\"})\n",
					"\n",
					"# Step 2: Delete duplicates\n",
					"# Create a DataFrame from the Delta table\n",
					"df = delta_table.toDF()\n",
					"\n",
					"# Add a row number column to identify duplicates\n",
					"window_spec = Window.partitionBy(\"PersNo\", \"Leaving\").orderBy(\"PersNo\", \"Leaving\")\n",
					"df_with_row_number = df.withColumn(\"val\", row_number().over(window_spec))\n",
					"\n",
					"# Filter out duplicates (keep only the first occurrence)\n",
					"df_filtered = df_with_row_number.filter(col(\"val\") == 1).drop(\"val\")\n",
					"\n",
					"# Overwrite the Delta table with the cleaned data\n",
					"df_filtered.write.format(\"delta\").mode(\"overwrite\").saveAsTable(\"odw_harmonised_db.stage_SAP_HR_Leavers\")\n",
					"\n",
					"# Step 3: Delete records from SAP_HR_Leavers based on PersNo in the cleaned data\n",
					"# Extract unique PersNo values from the cleaned DataFrame\n",
					"persno_list = df_filtered.select(\"PersNo\").distinct().rdd.flatMap(lambda x: x).collect()\n",
					"\n",
					"# Delete records from the target table where PersNo matches the cleaned data\n",
					"target_table = DeltaTable.forName(spark, \"odw_harmonised_db.SAP_HR_Leavers\")\n",
					"target_table.delete(f\"PersNo IN ({','.join(map(str, persno_list))})\")\n",
					"\n",
					"# Step 4: Delete records from SAP_HR_Leavers within the date range\n",
					"# Calculate min and max dates\n",
					"min_year = df.selectExpr(\"YEAR(MIN(Leaving))\").collect()[0][0]\n",
					"max_year = df.selectExpr(\"YEAR(MAX(Leaving))\").collect()[0][0]\n",
					"mindate = f\"{min_year}-04-01\"\n",
					"maxdate = f\"{max_year + 1}-03-31\"\n",
					"\n",
					"# Delete records from the target table within the date range\n",
					"target_table.delete(f\"Leaving BETWEEN '{mindate}' AND '{maxdate}'\")\n",
					"\n",
					"# Step 5: Insert records into SAP_HR_Leavers\n",
					"df_filtered.write.format(\"delta\").mode(\"append\").saveAsTable(\"odw_harmonised_db.SAP_HR_Leavers\")"
				],
				"execution_count": 30
			},
			{
				"cell_type": "code",
				"source": [
					"from delta.tables import DeltaTable\n",
					"from pyspark.sql import Window\n",
					"from pyspark.sql.functions import row_number, col\n",
					"\n",
					"# Step 1: Update Annualsalary to null\n",
					"delta_table = DeltaTable.forName(spark, \"odw_harmonised_db.stage_SAP_HR_Leavers\")\n",
					"delta_table.update(\"Annualsalary IS NOT NULL\", {\"Annualsalary\": \"null\"})\n",
					"\n",
					"# Step 2: Delete duplicates\n",
					"# Create a DataFrame from the Delta table\n",
					"df = delta_table.toDF()\n",
					"\n",
					"# Add a row number column to identify duplicates\n",
					"window_spec = Window.partitionBy(\"PersNo\", \"Leaving\").orderBy(\"PersNo\", \"Leaving\")\n",
					"df_with_row_number = df.withColumn(\"val\", row_number().over(window_spec))\n",
					"\n",
					"# Filter out duplicates (keep only the first occurrence)\n",
					"df_filtered = df_with_row_number.filter(col(\"val\") == 1).drop(\"val\")\n",
					"\n",
					"# Overwrite the Delta table with the cleaned data\n",
					"df_filtered.write.format(\"delta\").mode(\"overwrite\").saveAsTable(\"odw_harmonised_db.stage_SAP_HR_Leavers\")\n",
					"\n",
					"# Step 3: Delete records from SAP_HR_Leavers based on PersNo in the cleaned data\n",
					"# Extract unique PersNo values from the cleaned DataFrame\n",
					"persno_list = df_filtered.select(\"PersNo\").distinct().rdd.flatMap(lambda x: x).collect()\n",
					"\n",
					"# Delete records from the target table where PersNo matches the cleaned data\n",
					"target_table = DeltaTable.forName(spark, \"odw_harmonised_db.SAP_HR_Leavers\")\n",
					"target_table.delete(f\"PersNo IN ({','.join(map(str, persno_list))})\")\n",
					"\n",
					"# Step 4: Delete records from SAP_HR_Leavers within the date range\n",
					"# Calculate min and max dates\n",
					"min_year_result = df.selectExpr(\"YEAR(MIN(Leaving))\").collect()[0][0]\n",
					"max_year_result = df.selectExpr(\"YEAR(MAX(Leaving))\").collect()[0][0]\n",
					"\n",
					"# Handle cases where min_year or max_year is None\n",
					"if min_year_result is None or max_year_result is None:\n",
					"    print(\"No valid dates found in the 'Leaving' column. Skipping deletion and insertion steps.\")\n",
					"else:\n",
					"    min_year = int(min_year_result)\n",
					"    max_year = int(max_year_result)\n",
					"    mindate = f\"{min_year}-04-01\"\n",
					"    maxdate = f\"{max_year + 1}-03-31\"\n",
					"\n",
					"    # Delete records from the target table within the date range\n",
					"    target_table.delete(f\"Leaving BETWEEN '{mindate}' AND '{maxdate}'\")\n",
					"\n",
					"    # Step 5: Insert records into SAP_HR_Leavers\n",
					"    df_filtered.write.format(\"delta\").mode(\"append\").saveAsTable(\"odw_harmonised_db.SAP_HR_Leavers\")"
				],
				"execution_count": 31
			},
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"\n",
					"select count(*) from odw_harmonised_db.stage_SAP_HR_Leavers "
				],
				"execution_count": 29
			},
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"\n",
					"select count(*) from odw_harmonised_db.SAP_HR_Leavers "
				],
				"execution_count": 32
			},
			{
				"cell_type": "code",
				"source": [
					""
				],
				"execution_count": null
			}
		]
	}
}