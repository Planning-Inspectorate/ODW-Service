{
	"name": "py_spark_df_ingestion_functions",
	"properties": {
		"folder": {
			"name": "service-bus"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw34",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "6cedc9d0-b214-43a4-b4d5-36dfe0d4b1b9"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": true,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw34",
				"name": "pinssynspodw34",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw34",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Import just for use in type hints"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from odw.core.util.logging_util import LoggingUtil\n",
					"from pyspark.sql import DataFrame\n",
					"from pyspark.sql.types import StructType, StructField, ArrayType, StringType, IntegerType\n",
					"from pyspark.sql.functions import *"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"@LoggingUtil.logging_to_appins\n",
					"def apply_df_to_table(df: DataFrame, db_name: str, table_name: str) -> None:\n",
					"\n",
					"    from notebookutils import mssparkutils\n",
					"\n",
					"    # Write the DataFrame with the new column to a new temporary table\n",
					"    temp_table_name: str = f\"{table_name}_tmp\"\n",
					"    df.write.mode(\"overwrite\").format(\"delta\").saveAsTable(f\"{db_name}.{temp_table_name}\")\n",
					"\n",
					"    # Drop the original table and empty the location\n",
					"    mssparkutils.notebook.run('/utils/py_delete_table', 600, arguments={ 'db_name': db_name, 'table_name': table_name })\n",
					"\n",
					"    # Rename the temporary table to replace the original table\n",
					"    spark.sql(f\"ALTER TABLE {db_name}.{temp_table_name} RENAME TO {db_name}.{table_name}\")"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"@LoggingUtil.logging_to_appins\n",
					"def normalize_field(field):\n",
					"    \"\"\" Normalize field for comparison by ignoring nullable differences and sorting fields. \"\"\"\n",
					"    if isinstance(field.dataType, StructType):\n",
					"        # Sort fields within the StructType and convert to tuple\n",
					"        return (field.name, tuple(sorted(normalize_field(f) for f in field.dataType.fields)))\n",
					"    elif isinstance(field.dataType, ArrayType):\n",
					"        # Normalize the elementType and convert to tuple\n",
					"        return (field.name, ('ArrayType', normalize_field(StructField('element', field.dataType.elementType, True))))\n",
					"    else:\n",
					"        return (field.name, field.dataType.simpleString().replace(\"NullableType\", \"\"))\n",
					"\n",
					"@LoggingUtil.logging_to_appins\n",
					"def compare_schemas(schema1: StructType, schema2: StructType) -> tuple:\n",
					"    def get_field_set(schema):\n",
					"        \"\"\" Convert schema fields to a set ignoring nullable differences and order of fields. \"\"\"\n",
					"        return set(normalize_field(field) for field in schema.fields)\n",
					"    \n",
					"    fields1 = get_field_set(schema1)\n",
					"    fields2 = get_field_set(schema2)\n",
					"    \n",
					"    in_schema1_not_in_schema2 = fields1 - fields2\n",
					"    in_schema2_not_in_schema1 = fields2 - fields1\n",
					"    \n",
					"    # Sort for consistent output\n",
					"    in_schema1_not_in_schema2_sorted = sorted(in_schema1_not_in_schema2, key=lambda x: x[0])\n",
					"    in_schema2_not_in_schema1_sorted = sorted(in_schema2_not_in_schema1, key=lambda x: x[0])\n",
					"    \n",
					"    return in_schema1_not_in_schema2_sorted, in_schema2_not_in_schema1_sorted\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"@LoggingUtil.logging_to_appins\n",
					"def merge_schema(table_name: str, table_df: DataFrame, in_current_not_in_existing: tuple, in_existing_not_in_current: tuple) -> None:\n",
					"\n",
					"    # removing columns from the existing table that are not in the new df\n",
					"    for item in in_existing_not_in_current:\n",
					"        LoggingUtil().log_info(f\"Removing column '{item[0]}' from {table_name} since it's not in the new data's schema\")\n",
					"        table_df = table_df.drop(item[0])\n",
					"\n",
					"    # adding new columns in the existing table\n",
					"    for item in in_current_not_in_existing:\n",
					"        LoggingUtil().log_info(f\"Adding new column '{item[0]}' of type '{item[1]}' in {table_name} since it's not in the table's schema\")\n",
					"        table_df = table_df.withColumn(item[0], lit(None).cast(item[1]))\n",
					"    \n",
					"    apply_df_to_table(table_df, table_name.split('.')[0], table_name.split('.')[1])\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"@LoggingUtil.logging_to_appins\n",
					"def compare_and_merge_schema(df: DataFrame, table_name: str):\n",
					"    # get the existing table's df\n",
					"    table_df: DataFrame = spark.table(table_name)\n",
					"\n",
					"    # compare the schemas\n",
					"    in_current_not_in_existing, in_existing_not_in_current = compare_schemas(df.schema, table_df.schema)\n",
					"\n",
					"    if in_current_not_in_existing or in_existing_not_in_current:\n",
					"        LoggingUtil().log_info('Schemas do not match')\n",
					"        print(\"#\" * 100)\n",
					"        print('Columns in new data not in existing table: \\n', in_current_not_in_existing)\n",
					"        print(\"#\" * 100)\n",
					"        print('Columns in existing table not in data: \\n', in_existing_not_in_current)\n",
					"        print(\"#\" * 100)\n",
					"\n",
					"        # merging schema if there is any schema mismatch\n",
					"        merge_schema(table_name, table_df, in_current_not_in_existing, in_existing_not_in_current)\n",
					"        \n",
					"    else:\n",
					"        print('Schemas match.')"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"@LoggingUtil.logging_to_appins\n",
					"def collect_all_raw_sb_data(folder_name: str, schema: StructType) -> DataFrame:\n",
					"\n",
					"    \"\"\"\n",
					"    Function to loop through all sub-folders in a given folder path and collect all\n",
					"    json data into a single DataFrame. To be used for a reload of an entity from all\n",
					"    data in the RAW layer.\n",
					"\n",
					"    Args:\n",
					"        folder_name: the name of the folder in the storage account. May be different from the\n",
					"        entity name.\n",
					"        schema: a spark schema of type StructType to apply to the RAW data.\n",
					"\n",
					"    Returns:\n",
					"        A spark DataFrame of all json data from the RAW layer for a given root folder\n",
					"    \"\"\"\n",
					"\n",
					"    storage_account: str = mssparkutils.notebook.run('/utils/py_utils_get_storage_account')\n",
					"\n",
					"    folder: str = f\"abfss://odw-raw@{storage_account}ServiceBus/{folder_name}\"\n",
					"\n",
					"    df: DataFrame = (spark.read.format(\"json\")\n",
					"        .schema(schema) \n",
					"        .option(\"recursiveFileLookup\", \"true\")\n",
					"        .option(\"pathGlobFilter\",\"*.json\")\n",
					"        .load(folder))\n",
					"\n",
					"    df_with_filename: DataFrame = df.withColumn(\"input_file\", input_file_name())\n",
					"\n",
					"    return df_with_filename"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"@LoggingUtil.logging_to_appins\n",
					"def collect_all_raw_sb_data_historic(folder_name: str) -> DataFrame:\n",
					"\n",
					"    \"\"\"\n",
					"    Function to loop through all sub-folders in a given folder path and collect all\n",
					"    json data into a single DataFrame. To be used for a reload of an entity from all\n",
					"    data in the RAW layer.\n",
					"\n",
					"    Args:\n",
					"        folder_name: the name of the folder in the storage account. May be different from the\n",
					"        entity name.\n",
					"\n",
					"    Returns:\n",
					"        A spark DataFrame of all json data from the RAW layer for a given root folder\n",
					"    \"\"\"\n",
					"\n",
					"    storage_account: str = mssparkutils.notebook.run('/utils/py_utils_get_storage_account')\n",
					"\n",
					"    folder: str = f\"abfss://odw-raw@{storage_account}ServiceBus/{folder_name}\"\n",
					"\n",
					"    df: DataFrame = (spark.read.format(\"json\")\n",
					"        .option(\"recursiveFileLookup\", \"true\")\n",
					"        .option(\"pathGlobFilter\",\"*.json\")\n",
					"        .load(folder))\n",
					"\n",
					"    df_with_filename: DataFrame = df.withColumn(\"input_file\", input_file_name())\n",
					"\n",
					"    return df_with_filename"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"@LoggingUtil.logging_to_appins\n",
					"def is_array_of_struct(field):\n",
					"    field_type = field.dataType\n",
					"    return isinstance(field_type, ArrayType) and isinstance(field_type.elementType, StructType)\n",
					"\n",
					"@LoggingUtil.logging_to_appins\n",
					"def get_empty_array_of_structs(schema):\n",
					"    empty_struct = F.struct([F.lit(\"\").cast(field.dataType).alias(field.name) for field in schema.fields])\n",
					"    return F.array(empty_struct)\n",
					"\n",
					"@LoggingUtil.logging_to_appins\n",
					"def cast_null_columns(df: DataFrame, schema: StructType) -> DataFrame:\n",
					"\n",
					"    \"\"\"\n",
					"    Function to casts the null columns in a df to their actual type according to the schema. \n",
					"\n",
					"    Args:\n",
					"        df: the spark data frame \n",
					"        schema: the data-model schema\n",
					"\n",
					"    Returns:\n",
					"        A spark DataFrame with all the casted columns\n",
					"    \"\"\"\n",
					"\n",
					"    from pyspark.sql import functions as F\n",
					"    from pyspark.sql.types import StructType, DoubleType, LongType, IntegerType\n",
					"\n",
					"    # Get the schema of the DataFrame as a dictionary\n",
					"    df_schema = dict(df.dtypes)\n",
					"\n",
					"    # Convert the provided StructType schema into a dictionary with column names as keys and data types as values\n",
					"    schema_dict = {field.name: field.dataType for field in schema}\n",
					"\n",
					"    # Identify columns that have a type mismatch\n",
					"    columns_to_cast = [\n",
					"        col for col in df_schema.keys() \n",
					"        if col in schema_dict and df_schema[col] != schema_dict[col].simpleString()\n",
					"    ]\n",
					"\n",
					"    # Iterate over these columns and cast them if they are null\n",
					"    for col in columns_to_cast:\n",
					"        # Cast the column if it's null\n",
					"        all_null = df.filter(F.col(col).isNotNull()).count() == 0\n",
					"        if all_null or df_schema[col] == 'bigint':\n",
					"            result = False\n",
					"            try:\n",
					"                df = df.withColumn(col, F.col(col).cast(schema_dict[col]))\n",
					"                result = True\n",
					"            except:\n",
					"                if is_array_of_struct(schema[col]):\n",
					"                    try:\n",
					"                        df = df.withColumn(col, get_empty_array_of_structs(schema[col].dataType.elementType))\n",
					"                        result = True\n",
					"                    except Exception as e:\n",
					"                        print(e)\n",
					"                elif isinstance(schema_dict[col], ArrayType):\n",
					"                    df = df.withColumn(col, F.expr(\"array()\").cast(ArrayType(StringType())))\n",
					"                    result = True\n",
					"            \n",
					"            if result:\n",
					"                print(f\"Column '{col}' was cast from {df_schema[col]} to {schema_dict[col]}.\")\n",
					"            else:\n",
					"                print(f\"Failed to cast Column '{col}' from {df_schema[col]} to {schema_dict[col]}.\")\n",
					"\n",
					"    return df\n",
					"    "
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"@LoggingUtil.logging_to_appins\n",
					"def read_csvs_recursively(storage_account: str = None, folder: str = None) -> DataFrame:\n",
					"   \"\"\"\n",
					"   Example of how to read csv files in a folder recursively.\n",
					"   Each file is combined into a final DataFrame.\n",
					"   The input_file column is added to show which file that record came from.\n",
					"   Amend the folder path accordingly.\n",
					"   \"\"\"\n",
					"   storage_account: str = mssparkutils.notebook.run('/utils/py_utils_get_storage_account')\n",
					"\n",
					"   folder: str = f\"abfss://odw-raw@{storage_account}AIEDocumentData/2024-09-24\"\n",
					"\n",
					"   df: DataFrame = (spark.read.format(\"csv\")\n",
					"       .option(\"recursiveFileLookup\", \"true\")\n",
					"       .option(\"pathGlobFilter\", \"*.csv\")\n",
					"       .option(\"header\", \"true\")\n",
					"       .option(\"quote\", '\"')\n",
					"       .option(\"escape\", '\"')\n",
					"       .option(\"encoding\", \"UTF-8\")\n",
					"       .option(\"multiLine\", \"true\")\n",
					"       .option(\"ignoreLeadingWhiteSpace\", \"true\")\n",
					"       .option(\"ignoreTrailingWhiteSpace\", \"true\")\n",
					"       .load(folder))\n",
					"\n",
					"   df_with_path: DataFrame = df.withColumn(\"input_file\", F.input_file_name())\n",
					"\n",
					"   return df_with_path"
				],
				"execution_count": null
			}
		]
	}
}