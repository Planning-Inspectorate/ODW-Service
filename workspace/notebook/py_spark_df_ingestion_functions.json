{
	"name": "py_spark_df_ingestion_functions",
	"properties": {
		"folder": {
			"name": "service-bus"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "8c8c4be8-e239-415d-bbeb-e1d7bd700423"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": true,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw",
				"name": "pinssynspodw",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Import just for use in type hints"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.sql import DataFrame\r\n",
					"from pyspark.sql.types import StructType"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"def apply_df_to_table(df: DataFrame, db_name: str, table_name: str) -> None:\n",
					"\n",
					"    from notebookutils import mssparkutils\n",
					"\n",
					"    # Use delta format to generate timetravel history for rollback, \n",
					"    # and include merge schema option to ensure new schema's load rather than fail\n",
					"    df.write.mode(\"overwrite\").format(\"delta\").option(\"mergeSchema\", \"true\").saveAsTable(f\"{db_name}.{table_name}\")"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def compare_schemas(schema1: StructType, schema2: StructType) -> tuple:\n",
					"    fields1 = set((field.name, field.dataType) for field in schema1.fields)\n",
					"    fields2 = set((field.name, field.dataType) for field in schema2.fields) # can add field.nullable for more accuracy\n",
					"    \n",
					"    in_schema1_not_in_schema2: set = fields1 - fields2\n",
					"    in_schema2_not_in_schema1: set = fields2 - fields1\n",
					"    \n",
					"    return in_schema1_not_in_schema2, in_schema2_not_in_schema1"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def merge_schema(table_name: str, table_df: DataFrame, in_current_not_in_existing: tuple, in_existing_not_in_current: tuple) -> None:\n",
					"\n",
					"    # adding new columns in the existing table\n",
					"    for item in in_current_not_in_existing:\n",
					"        print(f\"Adding new column '{item[0]}' of type '{item[1]}' in {table_name} since it's not in the table's schema\")\n",
					"        table_df = table_df.withColumn(item[0], lit(None).cast(item[1]))\n",
					"\n",
					"    # removing columns from the existing table that are not in the new df\n",
					"    for item in in_existing_not_in_current:\n",
					"        print(f\"Removing column '{item[0]}' from {table_name} since it's not in the new data's schema\")\n",
					"        table_df = table_df.drop(item[0])\n",
					"    \n",
					"    apply_df_to_table(table_df, table_name.split('.')[0], table_name.split('.')[1])\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def compare_and_merge_schema(df: DataFrame, table_name: str):\n",
					"    # get the existing table's df\n",
					"    table_df: DataFrame = spark.table(table_name)\n",
					"\n",
					"    # compare the schemas\n",
					"    in_current_not_in_existing, in_existing_not_in_current = compare_schemas(df.schema, table_df.schema)\n",
					"\n",
					"    if in_current_not_in_existing or in_existing_not_in_current:\n",
					"        print('Schemas do not match')\n",
					"        print('Columns in new data not in existing table', in_current_not_in_existing)\n",
					"        print('Columns in existing table not in data', in_existing_not_in_current)\n",
					"        \n",
					"        # merging schema if there is any schema mismatch\n",
					"        merge_schema(table_name, table_df, in_current_not_in_existing, in_existing_not_in_current)\n",
					"        \n",
					"    else:\n",
					"        print('Schemas match.')"
				],
				"execution_count": null
			}
		]
	}
}