{
	"name": "appeals_folder",
	"properties": {
		"folder": {
			"name": "archive/odw-harmonised/DocumentTree"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw34",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "96e3b9bb-6c1b-46d2-9e05-d169d72fdc90"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw34",
				"name": "pinssynspodw34",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw34",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"%run utils/py_logging_decorator"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Import necessary libraries\n",
					"import json\n",
					"from datetime import datetime\n",
					"from notebookutils import mssparkutils\n",
					"from pyspark.sql import DataFrame\n",
					"from pyspark.sql.functions import col, desc"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Import App Insights logging\n",
					""
				]
			},
			{
				"cell_type": "code",
				"source": [
					"%run utils/py_utils_common_logging_output"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"# Initialize Application Insights logger\n",
					"app_insight_logger = ProcessingLogger()\n",
					"\n",
					"# Initialize tracking variables\n",
					"execution_start_time = datetime.now()\n",
					"start_exec_time = str(datetime.now())\n",
					"insert_count = 0\n",
					"update_count = 0\n",
					"delete_count = 0"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Create Table if doesn't exist"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Process appeals_folder data with App Insights logging\n",
					"try:\n",
					"    logInfo('Starting appeals_folder processing')\n",
					"    \n",
					"    db_name: str = 'odw_harmonised_db'\n",
					"    table_name: str = 'appeals_folder'\n",
					"    \n",
					"    def test_table_exists(db_name: str, table_name: str) -> bool:\n",
					"        spark.sql(f\"USE {db_name}\")\n",
					"        tables_df: DataFrame = spark.sql(\"SHOW TABLES\")\n",
					"        table_names: list = [row['tableName'] for row in tables_df.collect()]\n",
					"        return table_name in table_names\n",
					"    \n",
					"    if test_table_exists(db_name, table_name):\n",
					"        logInfo(f'Table {db_name}.{table_name} exists in harmonised, updating the harmonised layer')\n",
					"    else:\n",
					"        logInfo(f'Table {db_name}.{table_name} does not exist, creating table first.')\n",
					"        mssparkutils.notebook.run('/py_odw_harmonised_table_creation',300,{'specific_table': table_name } )\n",
					"        logInfo(f'Table {db_name}.{table_name} created')\n",
					"        \n",
					"except Exception as e:\n",
					"    logInfo(f'Error in table existence check: {str(e)}')\n",
					"    raise"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Check for new, updated or deleted data\n",
					"- This script checks for new, updated or deleted data by checking the source data (horizon tables) against the target (odw_harmonised_db.casework tables)\n",
					"- **New Data:** where an main Reference in the source does not exist in the target, then NewData flag is set to 'Y'\n",
					"- **Updated data:** Comparison occurs on Reference Fields in source and in target where the row hash is different i.e. there is a change in one of the columns. NewData flag is set to 'Y'\n",
					"- **Deleted data:** where an Reference info in the target exists but the same identifyers don't exist in the source. DeletedData flag is set to 'Y'\n",
					"\n",
					"## View appeals_folder is created"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"-- Build appeals_folder table\n",
					"-- Gets modified or deleted from source rows\n",
					"\n",
					"CREATE OR REPLACE TEMPORARY VIEW appeals_folder_new\n",
					"\n",
					"     AS\n",
					"\n",
					"-- gets data that matches of SourceID and flags that it is modified based on a row (md5) hash. Flags as \"NewData\"\n",
					"-- gets data that is in the target but not in source. Flags as \"DeletedData\"\n",
					"\n",
					"SELECT DISTINCT\n",
					"    CASE\n",
					"        WHEN T1.id IS NULL\n",
					"        THEN T3.HorizonAppealFolderId\n",
					"        ELSE NULL\n",
					"    END                             AS HorizonAppealFolderId,\n",
					"    T1.id                           AS ID,\n",
					"    T1.casereference\t            AS CaseReference,\n",
					"    T1.displaynameenglish\t        AS DisplayNameEnglish,\n",
					"    T1.displaynamewelsh\t            AS DisplayNameWelsh,\n",
					"    T1.parentfolderid\t            AS ParentFolderID,\n",
					"    T1.casenodeid\t                AS CaseNodeId,\n",
					"    T1.casestage\t                AS CaseStage,\n",
					"    T2.SourceSystemID               AS SourceSystemID,\n",
					"    to_timestamp(T1.expected_from)  AS IngestionDate,\n",
					"    NULL                            AS ValidTo,\n",
					"    md5(\n",
					"        concat(\n",
					"            IFNULL(T1.id,'.'),\n",
					"            IFNULL(T1.casereference,'.'),\n",
					"            IFNULL(T1.displaynameenglish,'.'),\n",
					"            IFNULL(T1.displaynamewelsh,'.'),\n",
					"            IFNULL(T1.parentfolderid,'.'),\n",
					"            IFNULL(T1.casenodeid,'.'),\n",
					"            IFNULL(T1.casestage,'.')\n",
					"        ))                          AS RowID, -- this hash should contain all the defining fields\n",
					"    'Y'                             AS IsActive,\n",
					"    T3.IsActive                     AS HistoricIsActive\n",
					"\n",
					"FROM odw_standardised_db.horizon_appeals_folder T1\n",
					"LEFT JOIN odw_harmonised_db.main_sourcesystem_fact T2 \n",
					"    ON \"DocumentTree\" = T2.Description AND \n",
					"        T2.IsActive = 'Y'\n",
					"FULL JOIN odw_harmonised_db.appeals_folder T3 \n",
					"    ON T1.id = T3.ID AND \n",
					"        T3.IsActive = 'Y'\n",
					"WHERE\n",
					"    -- flags new data        \n",
					"    (CASE\n",
					"        WHEN T1.casereference = T3.CaseReference AND md5(\n",
					"            concat(\n",
					"                IFNULL(T1.id,'.'),\n",
					"                IFNULL(T1.casereference,'.'),\n",
					"                IFNULL(T1.displaynameenglish,'.'),\n",
					"                IFNULL(T1.displaynamewelsh,'.'),\n",
					"                IFNULL(T1.parentfolderid,'.'),\n",
					"                IFNULL(T1.casenodeid,'.'),\n",
					"                IFNULL(T1.casestage,'.')\n",
					"            )) <> T3.RowID  -- same record, changed data\n",
					"        THEN 'Y'\n",
					"        WHEN T3.ID IS NULL -- new record\n",
					"        THEN 'Y'\n",
					"    ELSE 'N'\n",
					"    END  = 'Y' )\n",
					"    AND T1.id IS NOT NULL\n",
					"    AND NOT(T1.id = '29309932' AND T1.casestage = 'Initial Documents') --- Hardcoded exception as per Gareth request for data consistency\n",
					"    AND T1.expected_from = (SELECT MAX(expected_from) FROM odw_standardised_db.horizon_appeals_folder)\n",
					";"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Dataset is created that contains changed data and corresponding target data\n",
					"- This script combines data that has been updated, Deleted or is new, with corresponding target data\n",
					"- View **casework_all_appeals_new** is unioned to the target data filter to only those rows where changes have been detected\n",
					"## View appeals_folder_changed_rows is created"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"-- Create new and updated dataset\n",
					"\n",
					"CREATE OR REPLACE TEMPORARY VIEW appeals_folder_changed_rows\n",
					"\n",
					"    AS\n",
					"\n",
					"-- gets updated, deleted and new rows \n",
					"SELECT \n",
					"    HorizonAppealFolderId,\n",
					"    ID,\n",
					"    CaseReference,\n",
					"    DisplayNameEnglish,\n",
					"    DisplayNameWelsh,\n",
					"    ParentFolderID,\n",
					"    CaseNodeId,\n",
					"    CaseStage,\n",
					"    SourceSystemID,\n",
					"    IngestionDate,\n",
					"    ValidTo,\n",
					"    RowID,\n",
					"    IsActive\n",
					"    \n",
					"\n",
					"From appeals_folder_new WHERE HistoricIsActive = 'Y' or HistoricIsActive IS NULL\n",
					"\n",
					"    UNION ALL\n",
					"\n",
					"-- gets original versions of updated rows so we can update EndDate and set IsActive flag to 'N'\n",
					"SELECT\n",
					"    \n",
					"    HorizonAppealFolderId,\n",
					"    ID,\n",
					"    CaseReference,\n",
					"    DisplayNameEnglish,\n",
					"    DisplayNameWelsh,\n",
					"    ParentFolderID,\n",
					"    CaseNodeId,\n",
					"    CaseStage,\n",
					"    SourceSystemID,\n",
					"    IngestionDate,\n",
					"    ValidTo,\n",
					"    RowID,\n",
					"    IsActive\n",
					"    \n",
					"FROM odw_harmonised_db.appeals_folder\n",
					"WHERE ID IN (SELECT ID FROM appeals_folder_new WHERE HorizonAppealFolderId IS NULL) AND IsActive = 'Y'; "
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"\n",
					"CREATE OR REPLACE TEMPORARY VIEW Loading_month\n",
					"\n",
					"    AS\n",
					"\n",
					"SELECT DISTINCT\n",
					"    IngestionDate AS IngestionDate,\n",
					"    to_timestamp(date_sub(IngestionDate,1)) AS ClosingDate,\n",
					"    'Y' AS IsActive\n",
					"\n",
					"FROM appeals_folder_new;\n",
					"\n",
					"CREATE OR REPLACE TEMPORARY VIEW appeals_folder_changed_rows_final\n",
					"\n",
					"    AS\n",
					"\n",
					"SELECT \n",
					"    HorizonAppealFolderId,\n",
					"    ID,\n",
					"    CaseReference,\n",
					"    DisplayNameEnglish,\n",
					"    DisplayNameWelsh,\n",
					"    ParentFolderID,\n",
					"    CaseNodeId,\n",
					"    CaseStage,\n",
					"    T1.SourceSystemID,\n",
					"    T1.IngestionDate,\n",
					"    T1.ValidTo,\n",
					"    T1.RowID,\n",
					"    T1.IsActive,\n",
					"    T2.ClosingDate\n",
					"FROM appeals_folder_changed_rows T1\n",
					"FULL JOIN Loading_month T2 ON T1.IsActive = T2.IsActive"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					""
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# View appeals_folder_changed_rows is used in a merge (Upsert) statement into the target table\n",
					"- **WHEN MATCHED** ON the surrogate Key (i.e. AllAppealsID), EndDate is set to today -1 day and the IsActive flag is set to 'N'\n",
					"- **WHEN NOT MATCHED** ON the surrogate Key, insert rows\n",
					"## Table odw_harmonised_db.appeals_folder is updated"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"-- merge into dim table\n",
					"\n",
					"MERGE INTO odw_harmonised_db.appeals_folder AS Target\n",
					"USING appeals_folder_changed_rows_final AS Source\n",
					"\n",
					"ON Source.HorizonAppealFolderId = Target.HorizonAppealFolderId AND Target.IsActive = 'Y'\n",
					"\n",
					"-- For Updates existing rows\n",
					"\n",
					"WHEN MATCHED\n",
					"    THEN \n",
					"    UPDATE SET\n",
					"    Target.ValidTo = to_timestamp(ClosingDate),\n",
					"    Target.IsActive = 'N'\n",
					"\n",
					"-- Insert completely new rows\n",
					"\n",
					"WHEN NOT MATCHED \n",
					"    THEN INSERT (\n",
					"        HorizonAppealFolderId,\n",
					"        ID,\n",
					"        CaseReference,\n",
					"        DisplayNameEnglish,\n",
					"        DisplayNameWelsh,\n",
					"        ParentFolderID,\n",
					"        CaseNodeId,\n",
					"        CaseStage,\n",
					"        SourceSystemID,\n",
					"        IngestionDate,\n",
					"        ValidTo,\n",
					"        RowID,\n",
					"        IsActive    \n",
					"        )\n",
					"    VALUES (\n",
					"        Source.HorizonAppealFolderId,\n",
					"        Source.ID,\n",
					"        Source.CaseReference,\n",
					"        Source.DisplayNameEnglish,\n",
					"        Source.DisplayNameWelsh,\n",
					"        Source.ParentFolderID,\n",
					"        Source.CaseNodeId,\n",
					"        Source.CaseStage,\n",
					"        Source.SourceSystemID,\n",
					"        Source.IngestionDate,\n",
					"        Source.ValidTo,\n",
					"        Source.RowID,\n",
					"        Source.IsActive)\n",
					"     ;   "
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Fix the IDs\n",
					"- No auto-increment feature is available in delta tables, therefore we need to create new IDs for the inserted rows\n",
					"- This is done by select the target data and using INSERT OVERWRITE to re-insert the data is a new Row Number\n",
					"## Table odw_harmonised_db.appeals_folder is updated"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"-- Insert new appeals_folder\n",
					"\n",
					"INSERT OVERWRITE odw_harmonised_db.appeals_folder\n",
					"\n",
					"SELECT \n",
					"    ROW_NUMBER() OVER (ORDER BY CaseReference NULLS LAST) AS  HorizonAppealFolderId\t,\n",
					"    ID,\n",
					"    CaseReference,\n",
					"    DisplayNameEnglish,\n",
					"    DisplayNameWelsh,\n",
					"    ParentFolderID,\n",
					"    CaseNodeId,\n",
					"    CaseStage,\n",
					"    SourceSystemID,\n",
					"    IngestionDate,\n",
					"    ValidTo,\n",
					"    RowID,\n",
					"    IsActive\n",
					"FROM odw_harmonised_db.appeals_folder;\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"    # Count records processed\n",
					"    try:\n",
					"        # Get row counts for logging\n",
					"        changed_rows_df = spark.sql(\"SELECT COUNT(*) as count FROM appeals_folder_changed_rows_final\")\n",
					"        changed_count = changed_rows_df.collect()[0]['count']\n",
					"        \n",
					"        final_table_df = spark.sql(\"SELECT COUNT(*) as count FROM odw_harmonised_db.appeals_folder WHERE IsActive = 'Y'\")\n",
					"        final_count = final_table_df.collect()[0]['count']\n",
					"        \n",
					"        logInfo(f'appeals_folder processing completed successfully. Processed {changed_count} changed rows. Final active record count: {final_count}')\n",
					"        \n",
					"        # Log successful processing\n",
					"        execution_end_time = datetime.now()\n",
					"        execution_duration = (execution_end_time - execution_start_time).total_seconds()\n",
					"        \n",
					"        app_insight_logger.add_table_result(\n",
					"            delta_table_name='odw_harmonised_db.appeals_folder',\n",
					"            insert_count=changed_count,\n",
					"            update_count=0,  # Combined with insert in this process\n",
					"            delete_count=0,  # Handled via IsActive flag\n",
					"            table_result='success',\n",
					"            start_exec_time=start_exec_time,\n",
					"            end_exec_time=str(execution_end_time),\n",
					"            total_exec_time=execution_duration\n",
					"        )
					"        \n",
					"    except Exception as processing_error:\n",
					"        error_message = f'Error processing appeals_folder data: {str(processing_error)}'\n",
					"        logError(error_message)\n",
					"        \n",
					"        execution_end_time = datetime.now()\n",
					"        execution_duration = (execution_end_time - execution_start_time).total_seconds()\n",
					"        \n",
					"        app_insight_logger.add_table_result(\n",
					"            delta_table_name='odw_harmonised_db.appeals_folder',\n",
					"            insert_count=0,\n",
					"            update_count=0,\n",
					"            delete_count=0,\n",
					"            table_result='failed',\n",
					"            start_exec_time=start_exec_time,\n",
					"            end_exec_time=str(execution_end_time),\n",
					"            total_exec_time=execution_duration,\n",
					"            error_message=error_message\n",
					"        )
					"        raise"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"# Exit notebook with App Insights results\n",
					"mssparkutils.notebook.exit(app_insight_logger.generate_processing_results())"
				],
				"execution_count": null
			}
		]
	}
}