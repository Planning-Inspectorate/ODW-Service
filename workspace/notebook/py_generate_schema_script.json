{
	"name": "py_generate_schema_script",
	"properties": {
		"folder": {
			"name": "archive"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodwpr",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "152b26c3-ff3f-45e9-abf1-640536418f97"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodwpr",
				"name": "pinssynspodwpr",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodwpr",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from notebookutils import mssparkutils\n",
					"storage_account=mssparkutils.notebook.run('/utils/py_utils_get_storage_account')\n",
					"\n",
					"path_to_target = \"abfss://odw-config@\"+storage_account+\"standardised_table_definitions/\"\n",
					"\n",
					"# array of file names with corresponding sheet name\n",
					"files_with_specific_sheets = [{\"filename\": \"Specialist_TPO.xlsx\", \"sheet\": \"MiPINS-SQL\"},{\"filename\": \"Specialist_Hedgerow\", \"sheet\": \"MiPINS-SQL\"},{\"filename\": \"Specialist_HH\", \"sheet\": \"MiPINS-SQL\"}]"
				],
				"execution_count": 9
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"tags": [
						"parameters"
					]
				},
				"source": [
					"specific_file = ''\n",
					"path_to_source = \"abfss://odw-config@\"+storage_account+\"schema_creation/\""
				],
				"execution_count": 10
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%run /utils/py_mount_storage"
				],
				"execution_count": 11
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import pandas as pd\r\n",
					"import json\r\n",
					"import re\r\n",
					"\r\n",
					"jobId = mssparkutils.env.getJobId()\r\n",
					"\r\n",
					"mount_storage(path=path_to_source)\r\n",
					"mount_storage(path=path_to_target)\r\n",
					"\r\n",
					"file = mssparkutils.fs.ls(path_to_source)\r\n",
					"\r\n",
					"for fi in file:\r\n",
					"\r\n",
					"    if specific_file != '' and specific_file != fi.name:\r\n",
					"        continue\r\n",
					"\r\n",
					"    f = fi.path\r\n",
					"    print(f)\r\n",
					"    if '.csv' in f:\r\n",
					"        ext = '.csv'\r\n",
					"        filename = f.split(\"/\")[-1]\r\n",
					"        df = pd.read_csv(f\"/synfs/{jobId}/source/{filename}\", quotechar='\"',escapechar='\\\\',encoding=\"utf8\",dtype=str)\r\n",
					"    elif '.xlsx' in f:\r\n",
					"        ext = '.xlsx'\r\n",
					"        filename = f.split(\"/\")[-1]\r\n",
					"        file_with_specific_sheet = next(filter(lambda fs: fs['filename'] in filename, files_with_specific_sheets), None)\r\n",
					"        sheet_name = file_with_specific_sheet['sheet'] if file_with_specific_sheet else 0\r\n",
					"        df = pd.read_excel(f\"/synfs/{jobId}/source/{filename}\", dtype=str, sheet_name=sheet_name)\r\n",
					"    elif '.json' in f:\r\n",
					"        ext = '.json'\r\n",
					"        filename = f.split(\"/\")[-1]\r\n",
					"        df = pd.read_json(f\"/synfs/{jobId}/source/{filename}\", encoding=\"utf8\", dtype=str)    \r\n",
					"    else:\r\n",
					"        continue\r\n",
					"    df = df.loc[:, ~df.columns.str.contains('^Unnamed')]\r\n",
					"    cols_orig = list(df.columns)\r\n",
					"    cols=[re.sub('[^0-9a-zA-Z]+', '_', i).lower() for i in cols_orig]\r\n",
					"    cols=[colm.rstrip('_') for colm in cols]\r\n",
					"    newlist = []\r\n",
					"    for i, v in enumerate(cols):\r\n",
					"        totalcount = cols.count(v)\r\n",
					"        count = cols[:i].count(v)\r\n",
					"        newlist.append(v + str(count + 1) if totalcount > 1 else v)\r\n",
					"\r\n",
					"    jsonex = {\"fields\":[\r\n",
					"            {\r\n",
					"            \"metadata\": {},\r\n",
					"            \"name\": \"ingested_datetime\",\r\n",
					"            \"type\": \"timestamp\",\r\n",
					"            \"nullable\": False\r\n",
					"            },\r\n",
					"            {\r\n",
					"            \"metadata\": {},\r\n",
					"            \"name\": \"expected_from\",\r\n",
					"            \"type\": \"timestamp\",\r\n",
					"            \"nullable\": False\r\n",
					"            },\r\n",
					"            {\r\n",
					"            \"metadata\": {},\r\n",
					"            \"name\": \"expected_to\",\r\n",
					"            \"type\": \"timestamp\",\r\n",
					"            \"nullable\": False\r\n",
					"            }]}\r\n",
					"    for col in newlist:\r\n",
					"        obj = {\r\n",
					"            \"metadata\": {},\r\n",
					"            \"name\": col,\r\n",
					"            \"type\": \"string\",\r\n",
					"            \"nullable\": True\r\n",
					"            }\r\n",
					"        jsonex['fields'].append(obj)\r\n",
					"\r\n",
					"    filename_no_ext = f.split(\"/\")[-1].split(ext)[0]\r\n",
					"    json_to_write = json.dumps(jsonex)\r\n",
					"    mssparkutils.fs.rm(f)\r\n",
					"\r\n",
					"    f = open(f\"/synfs/{jobId}/target/{filename_no_ext}.json\", \"w\")\r\n",
					"    f.write(json_to_write)\r\n",
					"    f.close()\r\n",
					""
				],
				"execution_count": 12
			}
		]
	}
}