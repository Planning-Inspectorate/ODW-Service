{
	"name": "Notebook_log",
	"properties": {
		"folder": {
			"name": "utils"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw34",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "b5c3ba91-6667-46f7-93b0-46678942fc3c"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "python"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw34",
				"name": "pinssynspodw34",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw34",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"import requests\n",
					"import json\n",
					"from pyspark.sql import SparkSession\n",
					"from pyspark.sql.types import *\n",
					"from delta.tables import *\n",
					"import pandas as pd\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"app_id = \"your-application-insights-app-id\"\n",
					"api_key = \"your-api-key\"\n",
					"base_url = f\"https://api.applicationinsights.io/v1/apps/{app_id}\"\n",
					"\n",
					"# Headers for API calls\n",
					"headers = {\n",
					"    'X-API-Key': api_key,\n",
					"    'Content-Type': 'application/json'\n",
					"}\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"def query_app_insights(query, timespan=None):\n",
					"    \"\"\"\n",
					"    Query Application Insights using KQL\n",
					"    \"\"\"\n",
					"    url = f\"{base_url}/query\"\n",
					"    \n",
					"    payload = {\n",
					"        \"query\": query\n",
					"    }\n",
					"    \n",
					"    if timespan:\n",
					"        payload[\"timespan\"] = timespan\n",
					"    \n",
					"    response = requests.post(url, headers=headers, json=payload)\n",
					"    \n",
					"    if response.status_code == 200:\n",
					"        return response.json()\n",
					"    else:\n",
					"        raise Exception(f\"Query failed: {response.status_code} - {response.text}\")\n",
					"\n",
					"# Example query - get requests from last 7 days\n",
					"kql_query = \"\"\"\n",
					"requests\n",
					"| where timestamp > ago(7d)\n",
					"| project timestamp, name, url, duration, resultCode, success\n",
					"| order by timestamp desc\n",
					"\"\"\"\n",
					"\n",
					"# Execute query\n",
					"result = query_app_insights(kql_query)\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"def ai_result_to_dataframe(result):\n",
					"    \"\"\"\n",
					"    Convert Application Insights query result to Spark DataFrame\n",
					"    \"\"\"\n",
					"    tables = result.get('tables', [])\n",
					"    if not tables:\n",
					"        return spark.createDataFrame([], StructType([]))\n",
					"    \n",
					"    # Get first table (usually the main result)\n",
					"    table = tables[0]\n",
					"    columns = [col['name'] for col in table['columns']]\n",
					"    rows = table['rows']\n",
					"    \n",
					"    # Convert to pandas first, then to Spark DataFrame\n",
					"    pandas_df = pd.DataFrame(rows, columns=columns)\n",
					"    \n",
					"    # Convert pandas DataFrame to Spark DataFrame\n",
					"    spark_df = spark.createDataFrame(pandas_df)\n",
					"    \n",
					"    return spark_df\n",
					"\n",
					"# Convert result to DataFrame\n",
					"df = ai_result_to_dataframe(result)\n",
					"\n",
					"# Write to Delta table\n",
					"delta_table_path = \"/mnt/delta/application_insights_requests\"\n",
					"\n",
					"df.write \\\n",
					"  .format(\"delta\") \\\n",
					"  .mode(\"append\") \\\n",
					"  .option(\"mergeSchema\", \"true\") \\\n",
					"  .save(delta_table_path)\n",
					""
				],
				"execution_count": null
			}
		]
	}
}