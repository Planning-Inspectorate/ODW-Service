{
	"name": "hr_absence_dim",
	"properties": {
		"folder": {
			"name": "odw-harmonised/SAP-HR"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "tempsparkpool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "bb289fca-fd08-40d2-b3a6-53ae31cecea5"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/tempsparkpool",
				"name": "tempsparkpool",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/tempsparkpool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## View absence_dim_new_non_null is created"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"\n",
					"CREATE OR REPLACE TEMPORARY VIEW absence_dim_new_non_null\n",
					"\n",
					"    AS\n",
					"\n",
					"SELECT DISTINCT\n",
					"    Staff_Number,\n",
					"    Attendance_or_Absence_Type,\n",
					"    Sickness_Group,\n",
					"    Annual_Leave_Start,\n",
					"    Start_Date,\n",
					"    End_Date,\n",
					"    Days,\n",
					"    hrs,\n",
					"    Cal_Days,\n",
					"    hrs_day,\n",
					"    wkdys,\n",
					"    wk_hrs,\n",
					"    Work_Schedule_Rule,\n",
					"    expected_from\n",
					"\n",
					"FROM odw_standardised_db.vw_absences\n",
					"WHERE Staff_Number IS NOT NULL AND Attendance_or_Absence_Type IS NOT NULL;"
				],
				"execution_count": 217
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# absence_dim\n",
					"# Check for new, updated or deleted data\n",
					"- This script checks for new, updated or deleted data by checking the source data view (vw_absences) against the target (odw_harmonised_db.absence_dim)\n",
					"- **New Data:** where a PA in the source does not exist as an EmployeeID in the target. NewData flag is set to 'Y'\n",
					"- **Updated data:** Comparison occurs on PA in source and EmployeeID in target where the row hash is different i.e. there is a change in one of the columns. NewData flag is set to 'Y'\n",
					"\n",
					"## View absence_dim_new is created"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"-- Build absence_dim table\r\n",
					"-- Gets modified or new from source rows\r\n",
					"\r\n",
					"CREATE OR REPLACE TEMPORARY VIEW absence_dim_new\r\n",
					"\r\n",
					"    AS\r\n",
					"\r\n",
					"-- gets data that matches of SourceID and flags that it is modified based on a row (md5) hash. Flags as \"NewData\"\r\n",
					"\r\n",
					"SELECT DISTINCT\r\n",
					"    CASE\r\n",
					"        WHEN T1.Staff_Number IS NULL\r\n",
					"        THEN T3.AbsenceID\r\n",
					"        ELSE NULL\r\n",
					"    END                             AS AbsenceID, -- surrogate key\r\n",
					"    T1.Staff_Number                 AS EmployeeID,\r\n",
					"    T1.Attendance_or_Absence_Type   AS AbsenceType,\r\n",
					"    T1.Sickness_Group               AS SicknessGroup,\r\n",
					"    T1.Start_Date                   AS AbsenceStartDate,\r\n",
					"    T1.End_Date                     AS AbsenceEndDate,\r\n",
					"    T1.Days                         AS Days,\r\n",
					"    T1.hrs                          AS Hours,\r\n",
					"    T1.Cal_Days                     AS CalendarDays,\r\n",
					"    T4.WorkScheduleID               AS WorkScheduleID,\r\n",
					"    T1.Annual_Leave_Start           AS AnnualLeaveStart,\r\n",
					"    T2.SourceSystemID               AS SourceSystemID,\r\n",
					"    to_timestamp(T1.expected_from)  AS IngestionDate,\r\n",
					"    NULL                            AS ValidTo,\r\n",
					"    md5(\r\n",
					"        concat(\r\n",
					"            IFNULL(T1.Staff_Number,'.'),\r\n",
					"            IFNULL(T1.Attendance_or_Absence_Type,'.'),\r\n",
					"            IFNULL(CAST(T1.Start_Date AS VARCHAR(20)),'.'),\r\n",
					"            IFNULL(CAST(T1.End_Date AS VARCHAR(20)),'.'),\r\n",
					"            IFNULL(T1.Hrs,'.'))) \r\n",
					"                                    AS RowID,\r\n",
					"    'Y'                             AS IsActive,\r\n",
					"    T3.IsActive                     AS HistoricIsActive\r\n",
					"\r\n",
					"FROM absence_dim_new_non_null T1\r\n",
					"LEFT JOIN odw_harmonised_db.main_sourcesystem_fact T2   ON \"SAP HR\" = T2.Description AND T2.IsActive = 'Y'\r\n",
					"LEFT JOIN odw_harmonised_db.hr_work_schedule_dim T4     ON T4.WorkScheduleRule = T1.Work_Schedule_Rule AND \r\n",
					"                                                            T4.WorkWeekDays = T1.WkDys AND \r\n",
					"                                                            T4.WorkWeekHours = T1.Wk_hrs AND   \r\n",
					"                                                            T4.WorkDayHours = T1.Hrs_Day AND \r\n",
					"                                                            T4.IsActive = 'Y'\r\n",
					"FULL JOIN odw_harmonised_db.hr_absence_dim T3           ON T1.Staff_Number = T3.EmployeeID AND \r\n",
					"                                                            T1.Attendance_or_Absence_Type = T3.AbsenceType AND \r\n",
					"                                                            T1.Start_Date = T3.AbsenceStartDate AND \r\n",
					"                                                            T1.End_Date = T3.AbsenceEndDate AND\r\n",
					"                                                            T1.hrs = T3.Hours AND \r\n",
					"                                                            T3.IsActive = 'Y'\r\n",
					"WHERE\r\n",
					"--         -- flags new data        \r\n",
					"--         ( CASE\r\n",
					"--             WHEN T1.Staff_Number = T3.EmployeeID AND \r\n",
					"--                     T1.Attendance_or_Absence_Type = T3.AbsenceType AND \r\n",
					"--                     T1.Start_Date = T3.AbsenceStartDate AND \r\n",
					"--                     T1.End_Date = T3.AbsenceEndDate AND md5(concat(IFNULL(T1.Staff_Number,'.'), IFNULL(T1.Attendance_or_Absence_Type,'.'), IFNULL(CAST(T1.Start_Date AS VARCHAR(20)),'.'), IFNULL(CAST(T1.End_Date AS VARCHAR(20)),'.'), IFNULL(T1.Hrs,'.'))) <> T3.RowID    -- same employee, changed data\r\n",
					"--             THEN 'Y'\r\n",
					"--             WHEN T3.EmployeeID IS NULL -- new employee\r\n",
					"--             THEN 'Y'\r\n",
					"--             ELSE 'N'\r\n",
					"--         END  = 'Y' ) \r\n",
					"-- AND \r\n",
					"T1.Staff_Number IS NOT NULL;"
				],
				"execution_count": 219
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Dataset is created that contains changed data and corresponding target data\n",
					"- This script combines data that has been updated, Deleted or is new, with corresponding target data\n",
					"- View **absence_dim_new** is unioned to the target data filter to only those rows where changes have been detected\n",
					"## View absence_dim_changed_rows is created"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"-- Creating new and updated dataset\r\n",
					"\r\n",
					"CREATE OR REPLACE TEMPORARY VIEW absence_dim_changed_rows\r\n",
					"\r\n",
					"    AS\r\n",
					"\r\n",
					"SELECT \r\n",
					"    AbsenceID,\r\n",
					"    EmployeeID,\r\n",
					"    AbsenceType,\r\n",
					"    SicknessGroup,\r\n",
					"    AbsenceStartDate,\r\n",
					"    AbsenceEndDate,\r\n",
					"    Days,\r\n",
					"    Hours,\r\n",
					"    CalendarDays,\r\n",
					"    WorkScheduleID,\r\n",
					"    AnnualLeaveStart,\r\n",
					"    SourceSystemID,\r\n",
					"    IngestionDate,\r\n",
					"    ValidTo,\r\n",
					"    RowID,\r\n",
					"    IsActive\r\n",
					"FROM absence_dim_new T5 WHERE HistoricIsActive = 'Y' or HistoricIsActive IS NULL\r\n",
					"\r\n",
					"    UNION ALL\r\n",
					"\r\n",
					"SELECT\r\n",
					"    T4.AbsenceID,\r\n",
					"    T4.EmployeeID,\r\n",
					"    T4.AbsenceType,\r\n",
					"    T4.SicknessGroup,\r\n",
					"    T4.AbsenceStartDate,\r\n",
					"    T4.AbsenceEndDate,\r\n",
					"    T4.Days,\r\n",
					"    T4.Hours,\r\n",
					"    T4.CalendarDays,\r\n",
					"    T4.WorkScheduleID,\r\n",
					"    T4.AnnualLeaveStart,\r\n",
					"    T4.SourceSystemID,\r\n",
					"    T4.IngestionDate,\r\n",
					"    T4.ValidTo,\r\n",
					"    T4.RowID,\r\n",
					"    T4.IsActive\r\n",
					"FROM odw_harmonised_db.hr_absence_dim T4\r\n",
					"WHERE EmployeeID IN (SELECT EmployeeID FROM absence_dim_new WHERE AbsenceID IS NULL) AND IsActive = 'Y';"
				],
				"execution_count": 221
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"\n",
					"CREATE OR REPLACE TEMPORARY VIEW Loading_month\n",
					"\n",
					"    AS\n",
					"\n",
					"SELECT DISTINCT\n",
					"    IngestionDate AS IngestionDate,\n",
					"    to_timestamp(date_sub(IngestionDate,1)) AS ClosingDate,\n",
					"    'Y' AS IsActive\n",
					"\n",
					"FROM absence_dim_new;\n",
					"\n",
					"CREATE OR REPLACE TEMPORARY VIEW absence_dim_changed_rows_final\n",
					"\n",
					"    AS\n",
					"\n",
					"SELECT \n",
					"    T1.AbsenceID,\n",
					"    T1.EmployeeID,\n",
					"    T1.AbsenceType,\n",
					"    T1.SicknessGroup,\n",
					"    T1.AbsenceStartDate,\n",
					"    T1.AbsenceEndDate,\n",
					"    T1.Days,\n",
					"    T1.Hours,\n",
					"    T1.CalendarDays,\n",
					"    T1.WorkScheduleID,\n",
					"    T1.AnnualLeaveStart,\n",
					"    T1.SourceSystemID,\n",
					"    T1.IngestionDate,\n",
					"    T1.ValidTo,\n",
					"    T1.RowID,\n",
					"    T1.IsActive,\n",
					"    T2.ClosingDate\n",
					"FROM absence_dim_changed_rows T1\n",
					"FULL JOIN Loading_month T2 ON T1.IsActive = T2.IsActive\n",
					""
				],
				"execution_count": 222
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# View absence_dim_changed_rows is used in a merge (Upsert) statement into the target table\n",
					"- **WHEN MATCHED** ON the Business Key (i.e. Staff_Number from vw_absences), EndDate is set to today -1 day and the IsActive flag is set to 'N'\n",
					"- **WHEN NOT MATCHED** ON the business key, insert rows\n",
					"## Table odw_harmonised.absence_dim is updated"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"-- merge into fact table\r\n",
					"\r\n",
					"MERGE INTO odw_harmonised_db.hr_absence_dim AS Target\r\n",
					"USING absence_dim_changed_rows_final AS Source\r\n",
					"\r\n",
					"ON Source.AbsenceID = Target.AbsenceID \r\n",
					"\r\n",
					"-- For Updates existing rows\r\n",
					"WHEN MATCHED\r\n",
					"    THEN \r\n",
					"    UPDATE SET\r\n",
					"    Target.ValidTo = to_timestamp(ClosingDate),\r\n",
					"    Target.IsActive = 'N'\r\n",
					"\r\n",
					"-- Insert completely new rows\r\n",
					"WHEN NOT MATCHED \r\n",
					"    THEN INSERT (AbsenceID,\r\n",
					"        EmployeeID,\r\n",
					"        AbsenceType,\r\n",
					"        SicknessGroup,\r\n",
					"        AbsenceStartDate,\r\n",
					"        AbsenceEndDate,\r\n",
					"        Days,\r\n",
					"        Hours,\r\n",
					"        CalendarDays,\r\n",
					"        WorkScheduleID,\r\n",
					"        AnnualLeaveStart,\r\n",
					"        SourceSystemID,\r\n",
					"        IngestionDate,\r\n",
					"        ValidTo,\r\n",
					"        RowID,\r\n",
					"        IsActive)  \r\n",
					"        VALUES (Source.AbsenceID, \r\n",
					"        Source.EmployeeID, \r\n",
					"        Source.AbsenceType, \r\n",
					"        Source.SicknessGroup, \r\n",
					"        Source.AbsenceStartDate, \r\n",
					"        Source.AbsenceEndDate, \r\n",
					"        Source.Days, Source.Hours, \r\n",
					"        Source.CalendarDays, \r\n",
					"        Source.WorkScheduleID, \r\n",
					"        Source.AnnualLeaveStart, \r\n",
					"        Source.SourceSystemID, \r\n",
					"        Source.IngestionDate, \r\n",
					"        Source.ValidTo, \r\n",
					"        Source.RowID, \r\n",
					"        Source.IsActive)"
				],
				"execution_count": 224
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Fix the IDs\n",
					"- No auto-increment feature is available in delta tables, therefore we need to create new IDs for the inserted rows\n",
					"- This is done by select the target data and using INSERT OVERWRITE to re-insert the data is a new Row Number\n",
					"## Table odw_harmonised.absence_dim is updated"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"-- Insert new WorkScheduleID\r\n",
					"\r\n",
					"INSERT OVERWRITE odw_harmonised_db.hr_absence_dim\r\n",
					"\r\n",
					"SELECT \r\n",
					"    ROW_NUMBER() OVER (ORDER BY AbsenceID NULLS LAST) AS AbsenceID,\r\n",
					"    EmployeeID,\r\n",
					"    AbsenceType,\r\n",
					"    SicknessGroup,\r\n",
					"    AbsenceStartDate,\r\n",
					"    AbsenceEndDate,\r\n",
					"    Days,\r\n",
					"    Hours,\r\n",
					"    CalendarDays,\r\n",
					"    WorkScheduleID,\r\n",
					"    AnnualLeaveStart,\r\n",
					"    SourceSystemID,\r\n",
					"    IngestionDate,\r\n",
					"    ValidTo,\r\n",
					"    RowID,\r\n",
					"    IsActive\r\n",
					"FROM odw_harmonised_db.hr_absence_dim;"
				],
				"execution_count": 226
			}
		]
	}
}