{
	"name": "py_1_raw_to_standardised_functions",
	"properties": {
		"folder": {
			"name": "1-odw-raw-to-standardised/Scheduling"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "cf6fdda3-18b1-48d2-8e83-c21488a5d491"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "python"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw",
				"name": "pinssynspodw",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"%run \"utils/py_logging_decorator\""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"@logging_to_appins\n",
					"def ingest(isCron):\n",
					"    ### check if the file is being expected right now, less than with the expected_to value means no overlaps in expected periods\n",
					"    if last_start_dt <= time_now < next_end_dt:\n",
					"        folder_available = False\n",
					"        standardised_table_df = spark.read.format(\"delta\").load(\n",
					"            standardised_container + standardised_path + standardised_table_name)\n",
					"        rows = standardised_table_df.filter((standardised_table_df.expected_from == last_start_dt) & (\n",
					"                standardised_table_df.expected_to == next_end_dt)).count()\n",
					"        ### check if the file has already been ingested\n",
					"        if rows > 0:\n",
					"            folder_available = True\n",
					"            logger.info(\"File has already been ingested\")\n",
					"        else:\n",
					"            source_container_path = \"abfss://odw-raw@\" + storage_acc_name + \".dfs.core.windows.net/\"  # defs['Source_Container_Path'] + \"/\"\n",
					"            if defs[\"Source_Frequency_Folder\"] == \"\":\n",
					"                source_folder = defs['Source_Folder'] + \"/\"\n",
					"            ### handle weekly / monthly sub folders\n",
					"            else:\n",
					"                source_folder = defs['Source_Folder'] + \"/\" + defs[\"Source_Frequency_Folder\"] + \"/\"\n",
					"            ### find correct weekly folder \n",
					"            date_folders = mssparkutils.fs.ls(source_container_path + source_folder)\n",
					"            for datex in date_folders:\n",
					"                date_string = datex.name\n",
					"                ### handle YYYY-MM-DD dates\n",
					"                if len(date_string) == 10:\n",
					"                    folder_date = datetime.strptime(date_string, \"%Y-%m-%d\")\n",
					"                ### handle YYYY-MM dates\n",
					"                elif len(date_string) == 7:\n",
					"                    folder_date = datetime.strptime(date_string, \"%Y-%m\")\n",
					"                    folder_date = date(folder_date.year, folder_date.month,\n",
					"                                        calendar.monthrange(folder_date.year, folder_date.month)[-1]) + timedelta(\n",
					"                        days=1)\n",
					"                    folder_date = datetime.combine(folder_date, datetime.min.time())\n",
					"                else:\n",
					"                    raise ValueError(\"Date format in raw folder is incorrect, should be YYYY-MM-DD or YYYY-MM\")\n",
					"\n",
					"                if last_start_dt <= folder_date < next_end_dt:\n",
					"                    folder_available = True\n",
					"                    source_folder_with_date = mssparkutils.fs.ls(\n",
					"                        source_container_path + source_folder + date_string)\n",
					"                    if source_folder_with_date == []:\n",
					"                        error_folder_string = source_container_path + source_folder + date_string\n",
					"                        raise RuntimeError(f\"Folder is empty within {error_folder_string}\")\n",
					"                    file_available = False\n",
					"                    for file in source_folder_with_date:\n",
					"                        ### isolate the correct file\n",
					"                        filename = file.name\n",
					"                        if defs['Source_Filename_Start'] in filename:\n",
					"                            file_available = True\n",
					"\n",
					"                            ### mount the data lake storage in Synapse to the Synapse File Mount API\n",
					"                            jobId = mssparkutils.env.getJobId()\n",
					"                            mssparkutils.fs.unmount(\"/temp_raw\")\n",
					"                            mssparkutils.fs.mount(\n",
					"                                source_container_path + source_folder + date_string,\n",
					"                                \"/temp_raw\",\n",
					"                                {\"linkedService\": \"ls_storage\"}\n",
					"                            )\n",
					"                            ### open .csv and .xlsx files using pandas\n",
					"                            if \".xlsx\" in filename.lower():\n",
					"                                sheet_name = defs['Source_Sheet_Name'] if 'Source_Sheet_Name' in defs else 0\n",
					"                                df = pd.read_excel(f\"/synfs/{jobId}/temp_raw/{filename}\", dtype=str,\n",
					"                                                    sheet_name=sheet_name)\n",
					"                            elif '.csv' in filename.lower():\n",
					"                                df = pd.read_csv(f\"/synfs/{jobId}/temp_raw/{filename}\", quotechar='\"',\n",
					"                                                    escapechar='\\\\', encoding=\"utf8\", dtype=str)\n",
					"                            else:\n",
					"                                raise RuntimeError(f\"This file type for {filename} is unsupported\")\n",
					"                            ### drop headerless columns\n",
					"                            df = df.loc[:, ~df.columns.str.contains('^Unnamed')]\n",
					"                            rows_raw = len(df.index)\n",
					"                            mssparkutils.fs.unmount(\"/temp_raw\")\n",
					"                            ### convert to pandas dataframe\n",
					"                            sparkDF = spark.createDataFrame(df)\n",
					"                            ### add date columns included with every standardised table\n",
					"                            sparkDF = sparkDF.withColumn(\"ingested_datetime\", lit(datetime.now()))\n",
					"                            sparkDF = sparkDF.withColumn(\"expected_from\", lit(last_start_dt))\n",
					"                            sparkDF = sparkDF.withColumn(\"expected_to\", lit(next_end_dt))\n",
					"                            schema = StructType.fromJson(json.loads(standardised_table_def_json))\n",
					"\n",
					"                            ### remove characters that Delta can't allow in headers and add numbers to repeated column headers\n",
					"                            cols_orig = sparkDF.schema.names\n",
					"                            cols = [re.sub('[^0-9a-zA-Z]+', '_', i).lower() for i in cols_orig]\n",
					"                            cols = [colm.rstrip('_') for colm in cols]\n",
					"                            newlist = []\n",
					"                            for i, v in enumerate(cols):\n",
					"                                totalcount = cols.count(v)\n",
					"                                count = cols[:i].count(v)\n",
					"                                newlist.append(v + str(count + 1) if totalcount > 1 else v)\n",
					"                            for colix in range(len(cols_orig)):\n",
					"                                sparkDF = sparkDF.toDF(*newlist)\n",
					"\n",
					"                                ### mappings for Json schema definitions to Pyspark data types\n",
					"                            mapping = {\n",
					"                                'string': StringType(),\n",
					"                                'timestamp': TimestampType(),\n",
					"                                'integer': IntegerType(),\n",
					"                                'date': DateType(),\n",
					"                                'float': FloatType()\n",
					"                            }\n",
					"\n",
					"                            ### column data type casting\n",
					"                            for field in json.loads(standardised_table_def_json)['fields']:\n",
					"                                sparkDF = sparkDF.withColumn(field['name'],\n",
					"                                                                col(field['name']).cast(mapping[field['type']]))\n",
					"                            colheaders = []\n",
					"                            for field in json.loads(standardised_table_def_json)['fields']:\n",
					"                                colheaders.append(field['name'])\n",
					"                            sparkDF = sparkDF.select(colheaders)\n",
					"                            sparkDF2 = spark.createDataFrame(sparkDF.rdd, schema=schema)\n",
					"                            ### writing the dataframe to the existing standardised table\n",
					"                            sparkDF2.write.format(\"delta\").mode(\"append\").saveAsTable(\n",
					"                                f\"odw_standardised_db.{standardised_table_name}\")\n",
					"\n",
					"                            standardised_table_df_new = spark.read.format(\"delta\").load(\n",
					"                                standardised_container + standardised_path + standardised_table_name)\n",
					"                            rows_new = standardised_table_df.filter(\n",
					"                                (standardised_table_df.expected_from == last_start_dt) & (\n",
					"                                        standardised_table_df.expected_to == next_end_dt)).count()\n",
					"                            ### test correct number of rows have written\n",
					"                            if rows_raw == rows_new:\n",
					"                                mssparkutils.fs.mkdirs(\n",
					"                                    source_container_path + \"archive\" + \"/\" + source_folder + date_string + \"/\")\n",
					"                                mssparkutils.fs.cp(\n",
					"                                    source_container_path + source_folder + date_string + \"/\" + filename,\n",
					"                                    source_container_path + \"archive\" + \"/\" + source_folder + date_string + \"/\" + filename)\n",
					"                                if not isCron:\n",
					"                                    spark.sql(\n",
					"                                        f\"DELETE FROM odw_config_db.raw_to_std_outstanding_files WHERE Expected_Datetime = '{time_now}' and DefinitionID = {outstanding_source_id}\")\n",
					"                                logger.info('All rows have successfully written')\n",
					"\n",
					"                            ### delete transaction if incorrect number of rows has written and raise an error\n",
					"                            else:\n",
					"                                ### add to outstanding files table?\n",
					"                                deltaTable_standardised = DeltaTable.forPath(spark,\n",
					"                                                                                standardised_container + standardised_path + standardised_table_name)\n",
					"                                fullHistoryDF = deltaTable_standardised.history()  # get the full history of the table\n",
					"                                fullHistoryDF.select(\"version\").first()['version']\n",
					"                                deltaTable_standardised.restoreToVersion(\n",
					"                                    fullHistoryDF.select(\"version\").first()['version'] - 1)\n",
					"                                raise RuntimeError(\n",
					"                                    f\"Incorrect number of rows have been written to the standardised table {standardised_table_name}, rolled back to original version\")\n",
					"\n",
					"                    if isCron and file_available == False:\n",
					"                        outstanding_struct_schema = StructType.fromJson(json.loads(outstanding_files_table_json))\n",
					"                        new_outst_file = spark.createDataFrame([[last_start_dt, defs['Source_ID']]],\n",
					"                                                                outstanding_struct_schema)\n",
					"                        outstanding_df = spark.read.format(\"delta\").load(\n",
					"                            \"abfss://odw-standardised@\" + storage_acc_name + \".dfs.core.windows.net/config/raw_to_std_outstanding_files\")\n",
					"                        outstanding_df = outstanding_df.union(new_outst_file).dropDuplicates()\n",
					"                        outstanding_df.write.format(\"delta\").mode(\"overwrite\").save(\n",
					"                            \"abfss://odw-standardised@\" + storage_acc_name + \".dfs.core.windows.net/config/raw_to_std_outstanding_files\")\n",
					"        if isCron and folder_available == False:\n",
					"            outstanding_struct_schema = StructType.fromJson(json.loads(outstanding_files_table_json))\n",
					"            new_outst_file = spark.createDataFrame([[last_start_dt, defs['Source_ID']]], outstanding_struct_schema)\n",
					"            outstanding_df = spark.read.format(\"delta\").load(\n",
					"                \"abfss://odw-standardised@\" + storage_acc_name + \".dfs.core.windows.net/config/raw_to_std_outstanding_files\")\n",
					"            outstanding_df = outstanding_df.union(new_outst_file).dropDuplicates()\n",
					"            outstanding_df.write.format(\"delta\").mode(\"overwrite\").save(\n",
					"                \"abfss://odw-standardised@\" + storage_acc_name + \".dfs.core.windows.net/config/raw_to_std_outstanding_files\")"
				],
				"execution_count": null
			}
		]
	}
}