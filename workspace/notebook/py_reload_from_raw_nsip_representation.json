{
	"name": "py_reload_from_raw_nsip_representation",
	"properties": {
		"folder": {
			"name": "archive"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodwpr",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "1a924268-9682-4fd7-90f2-970160164346"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": true,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodwpr",
				"name": "pinssynspodwpr",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodwpr",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28
			},
			"sessionKeepAliveTimeout": 1000
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"from pyspark.sql import DataFrame\r\n",
					"from pyspark.sql.functions import *\r\n",
					"import pprint\r\n",
					"from pyspark.sql.functions import col, lit\r\n",
					"from pyspark.sql.types import LongType"
				],
				"execution_count": 5
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"entity_name = \"nsip-representation\"\r\n",
					"std_db_name = \"odw_standardised_db\"\r\n",
					"hrm_db_name = \"odw_harmonised_db\"\r\n",
					"table_name = \"sb_nsip_representation\"\r\n",
					"raw_table_name = \"odw_standardised_db.sb_nsip_representation_tmp\"\r\n",
					"raw_table = \"sb_nsip_representation_tmp\"\r\n",
					"std_table_name_full = f\"{std_db_name}.{table_name}\"\r\n",
					"hrm_table_name_full = f\"{hrm_db_name}.{table_name}\"\r\n",
					""
				],
				"execution_count": 6
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"spark.sql(f\"DROP TABLE IF EXISTS {raw_table_name}\")"
				],
				"execution_count": 7
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"spark.sql(f\"DROP TABLE IF EXISTS {std_table_name_full}\")"
				],
				"execution_count": 8
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##Go create our standardised table\r\n",
					"mssparkutils.notebook.run(\"create_table_from_schema\", 6100, {\"db_name\": std_db_name, \"entity_name\": entity_name})"
				],
				"execution_count": 9
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"spark.sql(f\"ALTER TABLE {std_table_name_full} RENAME TO {raw_table_name}\")"
				],
				"execution_count": 10
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##Go create our standardised table again\r\n",
					"mssparkutils.notebook.run(\"create_table_from_schema\", 6100, {\"db_name\": std_db_name, \"entity_name\": entity_name})"
				],
				"execution_count": 11
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"spark.table(raw_table_name).printSchema()"
				],
				"execution_count": 12
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### Load all historic files into a table that we can use for processing"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%run service-bus/py_spark_df_ingestion_functions"
				],
				"execution_count": 13
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def create_valid_dataframe() -> DataFrame:\r\n",
					"    df: DataFrame = collect_all_raw_sb_data_historic(f\"{entity_name}\")\r\n",
					"    # drop corrupt records loaded with bad files and any test columns created during testing\r\n",
					"    valid_df: DataFrame = df \r\n",
					"    # --Removed as we don't have corrupt records currently .filter(col(\"_corrupt_record\").isNull()).drop(\"_corrupt_record\", \"baddata\", \"interestedpartyids\", \"applicantIds\", \"ProjectStatus\")\r\n",
					"    return valid_df"
				],
				"execution_count": 18
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def test_schemas_match(schema1: StructType, schema2: StructType) -> bool:\r\n",
					"    return schema1 == schema2"
				],
				"execution_count": 19
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def compare_schema_fields_only(schema1: StructType, schema2: StructType) -> tuple:\r\n",
					"    fields1 = set((field.name) for field in schema1.fields)\r\n",
					"    fields2 = set((field.name) for field in schema2.fields)\r\n",
					"    \r\n",
					"    in_schema1_not_in_schema2: set = fields1 - fields2\r\n",
					"    in_schema2_not_in_schema1: set = fields2 - fields1\r\n",
					"    \r\n",
					"    return in_schema1_not_in_schema2, in_schema2_not_in_schema1"
				],
				"execution_count": 20
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"historical_df: DataFrame = create_valid_dataframe().alias(\"historical\")\r\n",
					"old_table_df = spark.sql(f\"select message_id, ingested_datetime, expected_from, expected_to from {raw_table_name}\").alias(\"old\")\r\n",
					"historical_schema = historical_df.schema\r\n",
					"table_schema = spark.table(f\"{raw_table_name}\").schema\r\n",
					"joined_df = historical_df.join(old_table_df, on=\"message_id\", how=\"left\")\r\n",
					"joined_df_schema = joined_df.schema"
				],
				"execution_count": 21
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"joined_df.printSchema()"
				],
				"execution_count": 22
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"test_schemas_match(joined_df_schema, table_schema)"
				],
				"execution_count": 23
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"print(table_schema)"
				],
				"execution_count": 24
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"print(joined_df_schema)"
				],
				"execution_count": 25
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"in_schema1_not_in_schema2, in_schema2_not_in_schema1 = compare_schemas(joined_df_schema, table_schema)\r\n",
					"\r\n",
					"print(in_schema1_not_in_schema2)\r\n",
					"print(in_schema2_not_in_schema1)"
				],
				"execution_count": 26
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"display(joined_df.head(5))"
				],
				"execution_count": 27
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"joined_df: DataFrame = joined_df.withColumn(\"expected_from\", current_timestamp())\r\n",
					"joined_df: DataFrame = joined_df.withColumn(\"expected_to\", expr(\"current_timestamp() + INTERVAL 1 DAY\"))\r\n",
					"joined_df: DataFrame = joined_df.withColumn(\"ingested_datetime\", to_timestamp(col(\"historical.message_enqueued_time_utc\")))"
				],
				"execution_count": 28
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"display(joined_df.filter(\"ingested_datetime is not null\").head(3))"
				],
				"execution_count": 29
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"display(joined_df.select(\"message_id\", \"ingested_datetime\").filter(\"ingested_datetime is not null\").head(5))"
				],
				"execution_count": 30
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"joined_df.printSchema()"
				],
				"execution_count": 31
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def cast_columns(df: DataFrame, schema: StructType) -> DataFrame:\r\n",
					"    for field in schema.fields:\r\n",
					"        df = df.withColumn(field.name, col(field.name).cast(field.dataType))\r\n",
					"    return df"
				],
				"execution_count": 32
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"final_df = cast_columns(joined_df, table_schema)\r\n",
					"final_df = final_df.withColumn(\"input_file_reversed\", reverse(final_df['input_file']))"
				],
				"execution_count": 33
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.sql.functions import reverse\r\n",
					"from datetime import datetime   "
				],
				"execution_count": 34
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def process_row(row):\r\n",
					"  # drop the input_file column as that's just for analysis\r\n",
					"    input_file = row['input_file_reversed']\r\n",
					"    try:\r\n",
					"\r\n",
					"        date = input_file.split('/',1)[0].split('_',1)[0].split('nosj.',1)[1].split('+', 1)[1].split('.', 1)[1]\r\n",
					"        date = \"\".join(reversed(date))\r\n",
					"    except Exception as e:\r\n",
					"        date = \"\"\r\n",
					"\r\n",
					"    processed = row['ingested_datetime']\r\n",
					"\r\n",
					"    if processed is None and date.find(':') > 0:\r\n",
					"        processed = datetime.strptime(date, '%Y-%m-%dT%H:%M:%S')\r\n",
					"\r\n",
					"    new_row = row.asDict()\r\n",
					"    new_row['ingested_datetime'] = processed\r\n",
					"    \r\n",
					"    return new_row\r\n",
					""
				],
				"execution_count": 35
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"temp = spark.createDataFrame(final_df.rdd.map(process_row), final_df.schema)\r\n",
					"\r\n",
					"temp = temp.drop('input_file', 'input_file_reversed')\r\n",
					"\r\n",
					"final_df = temp"
				],
				"execution_count": 36
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"in_schema1_not_in_schema2, in_schema2_not_in_schema1 = compare_schemas(final_df.schema, table_schema)\r\n",
					"\r\n",
					"print(in_schema1_not_in_schema2)\r\n",
					"print(in_schema2_not_in_schema1)"
				],
				"execution_count": 37
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"test_schemas_match(final_df.schema, table_schema)"
				],
				"execution_count": 38
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def create_dataframe_to_load(df: DataFrame, table_name: str) -> DataFrame:\r\n",
					"    table_df: DataFrame = spark.table(table_name)\r\n",
					"    df: DataFrame = df.select(table_df.columns)\r\n",
					"    table_df: DataFrame = table_df.union(df)\r\n",
					"\r\n",
					"    # removing duplicates while ignoring the ingestion dates columns\r\n",
					"    columns_to_ignore: list = ['expected_to', 'expected_from', 'ingested_datetime']\r\n",
					"    columns_to_consider: list = [c for c in table_df.columns if c not in columns_to_ignore]\r\n",
					"    table_df: DataFrame = table_df.dropDuplicates(subset=columns_to_consider)\r\n",
					"\r\n",
					"    return table_df"
				],
				"execution_count": 39
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"table_df: DataFrame = create_dataframe_to_load(final_df, raw_table_name)\r\n",
					"\r\n",
					"apply_df_to_table(table_df, std_db_name, raw_table)"
				],
				"execution_count": 40
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### Load data into standardised and harmonised\r\n",
					"\r\n",
					"Now load the data into standardised. We need to replay each of the loads, that way we ensure that updates and deletes are handled correctly. If we try to do this in a bulk load, we'll only load the last file in the set (as standard code is only designed for single loads)"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"spark.sql(f\"DROP TABLE IF EXISTS  {hrm_table_name_full}\")"
				],
				"execution_count": 41
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##Go create our harmonised table\r\n",
					"mssparkutils.notebook.run(\"create_table_from_schema\", 6100, {\"db_name\": hrm_db_name, \"entity_name\": f\"{entity_name}\"})"
				],
				"execution_count": 43
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"spark.table(f\"{hrm_table_name_full}\").printSchema()"
				],
				"execution_count": 44
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"spark.sql(f\"REFRESH TABLE {hrm_table_name_full}\")"
				],
				"execution_count": 45
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"base = spark.sql(f\"\"\"\r\n",
					"                SELECT DISTINCT\r\n",
					"                   CAST(ingested_datetime AS Date)\r\n",
					"                FROM\r\n",
					"                    {raw_table_name}\r\n",
					"                WHERE\r\n",
					"                    ingested_datetime IS NOT NULL\r\n",
					"                    AND message_type IS NOT NULL\r\n",
					"                ORDER BY \r\n",
					"                    1 ASC\r\n",
					"                \"\"\")\r\n",
					"\r\n",
					"for rows in base.collect():\r\n",
					"    processing = rows[\"ingested_datetime\"]\r\n",
					"    \r\n",
					"    print(f\"Processing {processing}\")\r\n",
					"\r\n",
					"    #Get associated data from standardised as we need to test if we've already inserted this data for processing\r\n",
					"    std = spark.sql(f\"\"\"SELECT \r\n",
					"                            * \r\n",
					"                        FROM \r\n",
					"                            {std_table_name_full}\r\n",
					"                        WHERE \r\n",
					"                             CAST(ingested_datetime AS Date) = '{processing}'\r\n",
					"                        \"\"\")\r\n",
					"    \r\n",
					"    if std.count() == 0:\r\n",
					"        print(f\"Inserting into {std_table_name_full}\")\r\n",
					"        ##Add the data into standardised for processing if we haven't processed it\r\n",
					"        rw = spark.sql(f\"\"\"SELECT \r\n",
					"                            * \r\n",
					"                        FROM \r\n",
					"                            {raw_table_name}\r\n",
					"                        WHERE \r\n",
					"                            CAST(ingested_datetime AS Date) = '{processing}'\r\n",
					"                        \"\"\")\r\n",
					"        \r\n",
					"        rw.write.mode(\"append\").format(\"delta\").option(\"mergeSchema\", \"true\").saveAsTable(std_table_name_full)\r\n",
					"        spark.sql(f\"REFRESH TABLE {std_table_name_full}\")\r\n",
					"\r\n",
					"    #Check if we've already processed the data or not\r\n",
					"    hrm = spark.sql(f\"\"\"SELECT \r\n",
					"                            * \r\n",
					"                        FROM \r\n",
					"                            {hrm_table_name_full}\r\n",
					"                        WHERE \r\n",
					"                            CAST(IngestionDate AS Date) = '{processing}'\r\n",
					"                        \"\"\")\r\n",
					"\r\n",
					"    \r\n",
					"    \r\n",
					"    if hrm.count() == 0:\r\n",
					"        print(f\"Running py_sb_std_to_hrm to load data into {hrm_table_name_full}\")\r\n",
					"        ## Run the standard process if we haven't already\r\n",
					"        try:\r\n",
					"            mssparkutils.notebook.run(\"/py_sb_std_to_hrm\", timeout_seconds=610000, arguments={\"entity_name\": entity_name})\r\n",
					"        except Exception as error:\r\n",
					"            mssparkutils.notebook.run(\"/py_sb_std_to_hrm\", timeout_seconds=610000, arguments={\"entity_name\": entity_name})\r\n",
					"      \r\n",
					"        spark.sql(f\"REFRESH TABLE {hrm_table_name_full}\")\r\n",
					"        "
				],
				"execution_count": 46
			}
		]
	}
}