{
	"name": "py_get_delta_table_changes",
	"properties": {
		"folder": {
			"name": "utils"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "56a421d5-0b0d-4358-87ed-707123c3e0c5"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw",
				"name": "pinssynspodw",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"tags": [
						"parameters"
					]
				},
				"source": [
					"db_name='odw_curated_db'\n",
					"table_name='listed_building'\n",
					"primary_key='entity'\n",
					""
				],
				"execution_count": 121
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%run utils/py_logging_decorator"
				],
				"execution_count": 122
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.sql import SparkSession\n",
					"from notebookutils import mssparkutils\n",
					"from delta.tables import DeltaTable\n",
					"from pyspark.sql.functions import col, lit, when\n",
					"import json\n",
					"from azure.identity import DefaultAzureCredential\n",
					"import requests\n",
					"\n",
					"spark: SparkSession = SparkSession.builder.getOrCreate()\n",
					"table_name_full = f\"{db_name}.{table_name}\""
				],
				"execution_count": 57
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#### Utility functions\n",
					"\n",
					"`get_delta_table_path`: Gets the location/path of a delta table\n",
					"\n",
					"`get_delta_table_lastest_version`: Gets the int value of the lastes version of a delta table"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def get_delta_table_path(table_name):\n",
					"    table_path = spark.sql(f\"DESCRIBE DETAIL {table_name}\").select(\"location\").first()[\"location\"]\n",
					"    return table_path\n",
					"    \n",
					"def get_delta_table_lastest_version(table_path):\n",
					"    delta_table = DeltaTable.forPath(spark, table_path)\n",
					"    history_df = delta_table.history()\n",
					"    version = history_df.select(\"version\").orderBy(\"version\", ascending=False).first()[\"version\"]\n",
					"    return version"
				],
				"execution_count": 5
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"table_path: str = get_delta_table_path(table_name_full)\n",
					"latest_version: int = get_delta_table_lastest_version(table_path)\n",
					"\n",
					"if latest_version == 0:\n",
					"    logInfo(f\"Failed to read changes in delta table: {table_name_full}. Exception: No history found\")\n",
					"    mssparkutils.notebook.exit('[]')"
				],
				"execution_count": 6
			},
			{
				"cell_type": "code",
				"source": [
					"table_path"
				],
				"execution_count": 35
			},
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": false
				},
				"source": [
					"try:\n",
					"    previous_version = latest_version-1 #16, 15\n",
					"\n",
					"    logInfo(f\"Reading changes between version {latest_version} and {previous_version} in delta table: {table_name_full}\")\n",
					"\n",
					"    # Load the current and previous versions\n",
					"    current_version_df = spark.read.format(\"delta\").option(\"versionAsOf\", 16).load(table_path)\n",
					"    previous_version_df = spark.read.format(\"delta\").option(\"versionAsOf\", 15).load(table_path)\n",
					"\n",
					"    # Find the differences\n",
					"    create_df = current_version_df.subtract(previous_version_df)\n",
					"    delete_df = previous_version_df.subtract(current_version_df)\n",
					"\n",
					"    # find the updated rows based on the entity_primary_key\n",
					"    update_df = create_df \\\n",
					"        .join(delete_df.select(primary_key), on=primary_key, how=\"inner\") \\\n",
					"        .withColumn(\"EventType\", lit(\"Update\"))\n",
					"\n",
					"    # remove updated rows from create and delete df\n",
					"    create_df = create_df \\\n",
					"        .join(update_df.select(primary_key), on=primary_key, how=\"left_anti\") \\\n",
					"        .withColumn(\"EventType\", lit(\"Create\"))\n",
					"\n",
					"    delete_df = delete_df \\\n",
					"        .join(update_df.select(primary_key), on=primary_key, how=\"left_anti\") \\\n",
					"        .withColumn(\"EventType\", lit(\"Delete\"))\n",
					"\n",
					"\n",
					"    # union create, update and delete df to get all changes in one df\n",
					"    changes_df = create_df.union(update_df).union(delete_df)\n",
					"    \n",
					"    logInfo(f\"Found {changes_df.count()} changes between version {latest_version} and {previous_version} in delta table: {table_name_full}\")\n",
					"\n",
					"except Exception as e:\n",
					"    logError(f\"Failed to read changes in delta table: {table_name_full}. Exception: {e}\")\n",
					"    mssparkutils.notebook.exit('')\n",
					""
				],
				"execution_count": 16
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": true
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"display(changes_df)"
				],
				"execution_count": 38
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"####Â  \n",
					"** TEST CODE BELOW **\n",
					""
				]
			},
			{
				"cell_type": "code",
				"source": [
					"changes_df.write.mode(\"overwrite\").saveAsTable(\"odw_curated_db.listed_building_test\")\n",
					"\n",
					"changes_df1 = spark.table(\"odw_curated_db.listed_building_test\")"
				],
				"execution_count": 34
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"outputs_hidden": false
					}
				},
				"source": [
					"changes_df1.show(3)"
				],
				"execution_count": 49
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"formatted_data = [\n",
					"    {\n",
					"        'Body': str({k: v for k, v in row.asDict().items() if k != 'EventType'}),\n",
					"        'UserProperties': {'type': row['EventType']}\n",
					"    }\n",
					"    for row in changes_df.collect()\n",
					"]"
				],
				"execution_count": 18
			},
			{
				"cell_type": "code",
				"source": [
					"df_formatted_data = spark.createDataFrame([\n",
					"    {\n",
					"        'Body': str({k: v for k, v in row.asDict().items() if k != 'EventType'}),\n",
					"        'UserProperties': {'type': row['EventType']}\n",
					"    }\n",
					"    for row in changes_df.collect()\n",
					"])"
				],
				"execution_count": 40
			},
			{
				"cell_type": "code",
				"source": [
					"rdd = spark.sparkContext.parallelize([formatted_data])\n",
					"rdd.saveAsTextFile(\"abfss://odw-curated@pinsstodwdevuks9h80mb.dfs.core.windows.net/listed_building/listed_building_test/data.json\")"
				],
				"execution_count": 36
			},
			{
				"cell_type": "code",
				"source": [
					"df_formatted_data.write.mode(\"overwrite\").json(\"abfss://odw-curated@pinsstodwdevuks9h80mb.dfs.core.windows.net/listed_building_test/listed_building_test/data\")"
				],
				"execution_count": 45
			},
			{
				"cell_type": "code",
				"source": [
					"df_read_formatted_data = spark.read.json(\"abfss://odw-curated@pinsstodwdevuks9h80mb.dfs.core.windows.net/listed_building_test/listed_building_test/data\")"
				],
				"execution_count": 51
			},
			{
				"cell_type": "code",
				"source": [
					"df_formatted_data.show(3)"
				],
				"execution_count": 48
			},
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": false
				},
				"source": [
					"display(df_formatted_data)"
				],
				"execution_count": 53
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## service bus config "
				]
			},
			{
				"cell_type": "code",
				"source": [
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"mssparkutils.notebook.exit(formatted_data)"
				],
				"execution_count": 10
			}
		]
	}
}