{
	"name": "py_sb_std_to_hrm",
	"properties": {
		"folder": {
			"name": "service-bus"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "ffc61ed0-9a41-4f9f-b3af-1d5029859f30"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": true,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw",
				"name": "pinssynspodw",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#### The entity name\r\n",
					"\r\n",
					"This is populated by the pipeline parameter but for testing can be entered manually here"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"tags": [
						"parameters"
					]
				},
				"source": [
					"entity_name = ''"
				],
				"execution_count": 186
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%run \"service-bus/py_spark_df_ingestion_functions\""
				],
				"execution_count": 187
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.sql import SparkSession\r\n",
					"from notebookutils import mssparkutils\r\n",
					"import json\r\n",
					"from datetime import datetime, date\r\n",
					"import pprint\r\n",
					"from pyspark.sql.types import *\r\n",
					"from pyspark.sql.functions import col, when, lit, row_number\r\n",
					"from pyspark.sql.window import Window"
				],
				"execution_count": 188
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#### Create spark session and read the orchestration file and table definition from config"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"spark = SparkSession.builder.getOrCreate()\n",
					"\n",
					"storage_account=mssparkutils.notebook.run('/utils/py_utils_get_storage_account')\n",
					"harmonised_container = f\"abfss://odw-harmonised@{storage_account}lib/\"\n",
					"\n",
					"path_to_orchestration_file = \"abfss://odw-config@\"+storage_account+\"orchestration/orchestration.json\"\n",
					"df = spark.read.option(\"multiline\",\"true\").json(path_to_orchestration_file)\n",
					"definitions = json.loads(df.toJSON().first())['definitions']\n",
					"\n",
					"definition = next((d for d in definitions if entity_name == d['Source_Filename_Start']), None)\n",
					"\n",
					"if not definition:\n",
					"    mssparkutils.notebook.exit(f\"Definition not found for {entity_name}\")"
				],
				"execution_count": 189
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"pprint.pprint(definition)"
				],
				"execution_count": 190
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#### Define variables for database, tables and keys"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"std_db = 'odw_standardised_db'\n",
					"hrm_db = 'odw_harmonised_db'\n",
					"\n",
					"std_table = definition['Standardised_Table_Name']\n",
					"hrm_table = definition['Harmonised_Table_Name']\n",
					"\n",
					"hrm_incremental_key = definition['Harmonised_Incremental_Key']\n",
					"entity_primary_key = definition['Entity_Primary_Key']"
				],
				"execution_count": 191
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#### Utility functions\n",
					"\n",
					"`set_harmonised_master_columns`: Adds the master columns for the harmonised schema and drops the master columns of the standardised schema\n",
					"\n",
					"`insert_rows_in_df`: Insert new rows in an existing df while incrementing the incrementa_key"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def set_harmonised_master_columns(df):\n",
					"    source_system_df = spark.sql(f\"SELECT * FROM {hrm_db}.main_sourcesystem_fact WHERE Description = 'Casework' AND IsActive = 'Y'\").toPandas()\n",
					"    df = df.withColumn(\"SourceSystemID\", lit(source_system_df.at[0, 'SourceSystemID']))\n",
					"\n",
					"    df = df.withColumn(\"RowID\", lit(''))\n",
					"    df = df.withColumn(\"Migrated\", lit('1'))\n",
					"    df = df.withColumn(\"ODTSourceSystem\", lit('ODT'))\n",
					"    df = df.withColumn(\"ValidTo\", lit(''))\n",
					"    df = df.withColumn(\"IsActive\", lit('Y'))\n",
					"    df = df.withColumn(hrm_incremental_key, lit(''))\n",
					"\n",
					"\n",
					"    df = df.withColumn(\"IngestionDate\", col(\"message_enqueued_time_utc\"))\n",
					"\n",
					"    df = df.drop(\"message_enqueued_time_utc\")\n",
					"    df = df.drop(\"message_id\")\n",
					"    df = df.drop(\"expected_from\")\n",
					"    df = df.drop(\"expected_to\")\n",
					"    \n",
					"    return df\n",
					"\n",
					"\n",
					"def insert_rows_in_df(source_df, target_df, incremental_key):\n",
					"    # appending the incremental key\n",
					"    max_id = target_df.count()\n",
					"\n",
					"    w = Window.orderBy(lit(1))\n",
					"    source_df = source_df.withColumn(incremental_key, (max_id + row_number().over(w)).cast(\"string\"))\n",
					"\n",
					"    return target_df.union(source_df)"
				],
				"execution_count": 192
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#### Get the latest ingested data in Standardised"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"Get the latest data from the standardised table and create dataframes containing:\r\n",
					"\r\n",
					"All of the data\r\n",
					"Created messages\r\n",
					"Updated messages\r\n",
					"Deleted messages\r\n",
					"\r\n",
					"And a further dataframe containing the harmonised data which is the target to be merged with"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"latest_ingestion = spark.sql(f\"SELECT * FROM {std_db}.{std_table} WHERE expected_from = (SELECT MAX(expected_from) FROM {std_db}.{std_table}) ORDER BY message_enqueued_time_utc\")\n",
					"\n",
					"\n",
					"if latest_ingestion.count() == 0:\n",
					"    mssparkutils.notebook.exit(f\"Standardised data not available for {entity_name}\")\n",
					"\n",
					"# remove the column ingested_datetime and then removing duplicates\n",
					"latest_ingestion = latest_ingestion.drop('ingested_datetime').dropDuplicates()\n",
					"latest_ingestion = set_harmonised_master_columns(latest_ingestion)\n",
					"\n",
					"create_df = latest_ingestion[latest_ingestion['message_type'] == 'Create']\n",
					"update_df = latest_ingestion[latest_ingestion['message_type'].isin(['Update', 'Publish', 'Unpublish'])]\n",
					"delete_df = latest_ingestion[latest_ingestion['message_type'] == 'Delete']\n",
					"\n",
					"target_df = spark.table(f\"{hrm_db}.{hrm_table}\")"
				],
				"execution_count": 193
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"Drop the `message_type` column since it's not needed in the table, compare and merge the schema of latest ingestion and existing harmonised table"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"latest_ingestion = latest_ingestion.drop(\"message_type\")\n",
					"\n",
					"compare_and_merge_schema(latest_ingestion, f\"{hrm_db}.{hrm_table}\")\n",
					"\n",
					"target_df = spark.table(f\"{hrm_db}.{hrm_table}\")\n",
					"create_df = create_df.drop(\"message_type\").select(target_df.columns)\n",
					"update_df = update_df.drop(\"message_type\").select(target_df.columns)\n",
					"delete_df = delete_df.drop(\"message_type\").select(target_df.columns)"
				],
				"execution_count": 194
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"Print counts of rows in each dataframe for reference"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"print(f\"Latest ingestion: {latest_ingestion.count()}\")\r\n",
					"print(f\"Create: {create_df.count()}\")\r\n",
					"print(f\"Update: {update_df.count()}\")\r\n",
					"print(f\"Delete: {delete_df.count()}\")\r\n",
					"print(f\"Target: {target_df.count()}\")"
				],
				"execution_count": 195
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#### Handling new rows"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"if create_df.count() > 0:\n",
					"    target_df = insert_rows_in_df(create_df, target_df, hrm_incremental_key)\n",
					"\n",
					"print(f\"New rows: {create_df.count()}\\nTarget dataframe: {target_df.count()}\")"
				],
				"execution_count": 196
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#### Handling updated rows"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"if update_df.count() > 0:\n",
					"    update_df = update_df.dropDuplicates().orderBy('IngestionDate')\n",
					"\n",
					"    for row in update_df.collect():\n",
					"        mask = (target_df['IsActive'] == 'Y') & (target_df[entity_primary_key] == row[entity_primary_key])\n",
					"\n",
					"        target_df = target_df.withColumn('ValidTo', when(mask, row['IngestionDate']).otherwise(target_df['ValidTo']))\n",
					"        target_df = target_df.withColumn('IsActive', when(mask, 'N').otherwise(target_df['IsActive']))\n",
					"\n",
					"        # Filter rows to insert\n",
					"        rows_to_insert = spark.createDataFrame([row], target_df.schema)\n",
					"        target_df = insert_rows_in_df(rows_to_insert, target_df, hrm_incremental_key)\n",
					"\n",
					"\n",
					"print(f\"Updated rows: {update_df.count()}\\nTarget dataframe: {target_df.count()}\")"
				],
				"execution_count": 197
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#### Handling deleted rows"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"if delete_df.count() > 0:\n",
					"\n",
					"    for row in delete_df.collect():\n",
					"        mask = (target_df['IsActive'] == 'Y') & (target_df[entity_primary_key] == row[entity_primary_key])\n",
					"        target_df = target_df.withColumn('ValidTo', when(mask, row['IngestionDate']).otherwise(target_df['ValidTo']))\n",
					"        target_df = target_df.withColumn('IsActive', when(mask, 'N').otherwise(target_df['IsActive']))\n",
					"\n",
					"print(f\"Deleted rows: {delete_df.count()}\\nTarget dataframe: {target_df.count()}\")"
				],
				"execution_count": 198
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"columns_to_consider = [c for c in target_df.columns if c != hrm_incremental_key]\n",
					"target_df = target_df.dropDuplicates(subset=columns_to_consider)"
				],
				"execution_count": 199
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"apply_df_to_table(target_df, hrm_db, hrm_table)"
				],
				"execution_count": 200
			}
		]
	}
}