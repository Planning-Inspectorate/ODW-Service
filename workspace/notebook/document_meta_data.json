{
	"name": "document_meta_data",
	"properties": {
		"folder": {
			"name": "archive/odw-harmonised/DocumentTree"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "7c46e7b1-f97f-4701-8789-2c512afa9fdb"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw",
				"name": "pinssynspodw",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Check for new, updated or deleted data\n",
					"- This script checks for new, updated or deleted data by checking the source data (horizon tables) against the target (odw_harmonised_db.casework tables)\n",
					"- **New Data:** where an main Reference in the source does not exist in the target, then NewData flag is set to 'Y'\n",
					"- **Updated data:** Comparison occurs on Reference Fields in source and in target where the row hash is different i.e. there is a change in one of the columns. NewData flag is set to 'Y'\n",
					"- **Deleted data:** where an Reference info in the target exists but the same identifyers don't exist in the source. DeletedData flag is set to 'Y'\n",
					"\n",
					"## View document_meta_data is created"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"CREATE OR REPLACE TEMPORARY VIEW document_meta_data_new\r\n",
					"AS\r\n",
					"\r\n",
					"/* Given we're building an SCD, we need to:\r\n",
					"    1. Create a new record for completely new records that we've never seen before (including updates to existing records), \r\n",
					"    2. Unarchive records we've seen before and have become the latest info we want\r\n",
					"    3. Archive records off that are not part of our net new\r\n",
					"\r\n",
					"    First, we identify net new records\r\n",
					"*/\r\n",
					"SELECT\r\n",
					"    NULL AS DocumentMetaDataID\r\n",
					"    ,standardised.dataid AS DataID\r\n",
					"    ,standardised.casenodeid AS CaseNodeID\r\n",
					"    ,standardised.casereference AS CaseReference\r\n",
					"    ,standardised.documentreference AS DocumentReference\r\n",
					"    ,standardised.version AS Version\r\n",
					"    ,standardised.name AS Name\r\n",
					"    ,standardised.datasize AS DataSize\r\n",
					"    ,standardised.viruscheckstatus AS VirusCheckStatus\r\n",
					"    ,standardised.createdate AS CreateDate\r\n",
					"    ,standardised.modifydate AS ModifyDate\r\n",
					"    ,standardised.caseworktype AS CaseworkType\r\n",
					"    ,standardised.publishedstatus AS PublishedStatus\r\n",
					"    ,standardised.datepublished AS DatePublished\r\n",
					"    ,standardised.documenttype AS DocumentType\r\n",
					"    ,standardised.sourcesystem AS SourceSystem\r\n",
					"    ,standardised.author AS Author\r\n",
					"    ,standardised.representative AS Representative\r\n",
					"    ,standardised.documentdescription AS DocumentDescription\r\n",
					"    ,standardised.documentcasestage AS DocumentCaseStage\r\n",
					"    ,standardised.filter1 AS Filter1\r\n",
					"    ,standardised.filter2 AS Filter2\r\n",
					"    ,standardised.parentID AS ParentID\r\n",
					"    ,\"0\" AS Migrated\r\n",
					"    ,\"Horizon\" AS ODTSourceSystem\r\n",
					"    ,system_config.SourceSystemID AS SourceSystemID\r\n",
					"    ,to_timestamp(standardised.expected_from) AS IngestionDate\r\n",
					"    ,NULL AS ValidTo\r\n",
					"    ,md5(\r\n",
					"        concat(\r\n",
					"            IFNULL(standardised.dataid,'.'),\r\n",
					"            IFNULL(standardised.casenodeid,'.'),\r\n",
					"            IFNULL(standardised.casereference,'.'),\r\n",
					"            IFNULL(standardised.documentreference,'.'),\r\n",
					"            IFNULL(standardised.version,'.'),\r\n",
					"            IFNULL(standardised.name,'.'),\r\n",
					"            IFNULL(standardised.datasize\t,'.'),\r\n",
					"            IFNULL(standardised.viruscheckstatus,'.'),\r\n",
					"            IFNULL(standardised.createdate,'.'),\r\n",
					"            IFNULL(standardised.modifydate,'.'),\r\n",
					"            IFNULL(standardised.caseworktype,'.'),\r\n",
					"            IFNULL(standardised.publishedstatus,'.'),\r\n",
					"            IFNULL(standardised.datepublished,'.'),\r\n",
					"            IFNULL(standardised.documenttype,'.'),\r\n",
					"            IFNULL(standardised.sourcesystem,'.'),\r\n",
					"            IFNULL(standardised.author,'.'),\r\n",
					"            IFNULL(standardised.representative,'.'),\r\n",
					"            IFNULL(standardised.documentdescription,'.'),\r\n",
					"            IFNULL(standardised.documentcasestage,'.'),\r\n",
					"            IFNULL(standardised.filter1,'.'),\r\n",
					"            IFNULL(standardised.filter2,'.'),\r\n",
					"            IFNULL(standardised.parentID,'.')\r\n",
					"        )) AS RowID -- this hash should contain all the defining fields\r\n",
					"    ,'Y' AS IsActive\r\n",
					"    ,NULL AS HistoricIsActive\r\n",
					"FROM\r\n",
					"    odw_harmonised_db.main_sourcesystem_fact AS system_config\r\n",
					"    INNER JOIN (\r\n",
					"        SELECT\r\n",
					"            dataID\r\n",
					"            ,Version\r\n",
					"            ,name\r\n",
					"            ,MAX(expected_from) AS Last_update -- This is the PK on the table due to one dataID covering multiple files, and needing to return all versions\r\n",
					"        FROM\r\n",
					"            odw_standardised_db.document_meta_data\r\n",
					"        GROUP BY\r\n",
					"            dataID\r\n",
					"            ,Version\r\n",
					"            ,name\r\n",
					"    ) AS Latest\r\n",
					"        ON System_config.Description = \"DocumentTree\"\r\n",
					"        AND system_config.IsActive = 'Y'\r\n",
					"    INNER JOIN odw_standardised_db.document_meta_data AS standardised\r\n",
					"        ON Latest.dataID = standardised.dataId\r\n",
					"        AND Latest.Version = standardised.Version\r\n",
					"        AND Latest.name = standardised.name\r\n",
					"        AND Latest.Last_update = standardised.expected_from\r\n",
					"    LEFT OUTER JOIN odw_harmonised_db.document_meta_data AS Harmonised\r\n",
					"        ON YEAR(standardised.CreateDate)  = Harmonised.Year\r\n",
					"        AND standardised.DataID = Harmonised.DataID  \r\n",
					"        AND standardised.Version = Harmonised.Version \r\n",
					"        AND standardised.name = Harmonised.name \r\n",
					"        AND md5(\r\n",
					"                concat(\r\n",
					"                        IFNULL(standardised.dataid,'.'),\r\n",
					"                        IFNULL(standardised.casenodeid,'.'),\r\n",
					"                        IFNULL(standardised.casereference,'.'),\r\n",
					"                        IFNULL(standardised.documentreference,'.'),\r\n",
					"                        IFNULL(standardised.version,'.'),\r\n",
					"                        IFNULL(standardised.name,'.'),\r\n",
					"                        IFNULL(standardised.datasize\t,'.'),\r\n",
					"                        IFNULL(standardised.viruscheckstatus,'.'),\r\n",
					"                        IFNULL(standardised.createdate,'.'),\r\n",
					"                        IFNULL(standardised.modifydate,'.'),\r\n",
					"                        IFNULL(standardised.caseworktype,'.'),\r\n",
					"                        IFNULL(standardised.publishedstatus,'.'),\r\n",
					"                        IFNULL(standardised.datepublished,'.'),\r\n",
					"                        IFNULL(standardised.documenttype,'.'),\r\n",
					"                        IFNULL(standardised.sourcesystem,'.'),\r\n",
					"                        IFNULL(standardised.author,'.'),\r\n",
					"                        IFNULL(standardised.representative,'.'),\r\n",
					"                        IFNULL(standardised.documentdescription,'.'),\r\n",
					"                        IFNULL(standardised.documentcasestage,'.'),\r\n",
					"                        IFNULL(standardised.filter1,'.'),\r\n",
					"                        IFNULL(standardised.filter2,'.'),\r\n",
					"                        IFNULL(standardised.parentID,'.')\r\n",
					"                    )\r\n",
					"                ) = Harmonised.RowID \r\n",
					"WHERE\r\n",
					"    Harmonised.IsActive IS NULL\r\n",
					"UNION\r\n",
					"-- Next get records that we have seen, but are incorrectly set to archived\r\n",
					"SELECT\r\n",
					"    MIN(Harmonised.DocumentMetaDataID) AS DocumentMetaDataID\r\n",
					"    ,standardised.dataid AS DataID\r\n",
					"    ,standardised.casenodeid AS CaseNodeID\r\n",
					"    ,standardised.casereference AS CaseReference\r\n",
					"    ,standardised.documentreference AS DocumentReference\r\n",
					"    ,standardised.version AS Version\r\n",
					"    ,standardised.name AS Name\r\n",
					"    ,standardised.datasize AS DataSize\r\n",
					"    ,standardised.viruscheckstatus AS VirusCheckStatus\r\n",
					"    ,standardised.createdate AS CreateDate\r\n",
					"    ,standardised.modifydate AS ModifyDate\r\n",
					"    ,standardised.caseworktype AS CaseworkType\r\n",
					"    ,standardised.publishedstatus AS PublishedStatus\r\n",
					"    ,standardised.datepublished AS DatePublished\r\n",
					"    ,standardised.documenttype AS DocumentType\r\n",
					"    ,standardised.sourcesystem AS SourceSystem\r\n",
					"    ,standardised.author AS Author\r\n",
					"    ,standardised.representative AS Representative\r\n",
					"    ,standardised.documentdescription AS DocumentDescription\r\n",
					"    ,standardised.documentcasestage AS DocumentCaseStage\r\n",
					"    ,standardised.filter1 AS Filter1\r\n",
					"    ,standardised.filter2 AS Filter2\r\n",
					"    ,standardised.parentID AS ParentID\r\n",
					"    ,\"0\" AS Migrated\r\n",
					"    ,\"Horizon\" AS ODTSourceSystem\r\n",
					"    ,system_config.SourceSystemID AS SourceSystemID\r\n",
					"    ,to_timestamp(standardised.expected_from) AS IngestionDate\r\n",
					"    ,NULL AS ValidTo\r\n",
					"    ,md5(\r\n",
					"        concat(\r\n",
					"            IFNULL(standardised.dataid,'.'),\r\n",
					"            IFNULL(standardised.casenodeid,'.'),\r\n",
					"            IFNULL(standardised.casereference,'.'),\r\n",
					"            IFNULL(standardised.documentreference,'.'),\r\n",
					"            IFNULL(standardised.version,'.'),\r\n",
					"            IFNULL(standardised.name,'.'),\r\n",
					"            IFNULL(standardised.datasize\t,'.'),\r\n",
					"            IFNULL(standardised.viruscheckstatus,'.'),\r\n",
					"            IFNULL(standardised.createdate,'.'),\r\n",
					"            IFNULL(standardised.modifydate,'.'),\r\n",
					"            IFNULL(standardised.caseworktype,'.'),\r\n",
					"            IFNULL(standardised.publishedstatus,'.'),\r\n",
					"            IFNULL(standardised.datepublished,'.'),\r\n",
					"            IFNULL(standardised.documenttype,'.'),\r\n",
					"            IFNULL(standardised.sourcesystem,'.'),\r\n",
					"            IFNULL(standardised.author,'.'),\r\n",
					"            IFNULL(standardised.representative,'.'),\r\n",
					"            IFNULL(standardised.documentdescription,'.'),\r\n",
					"            IFNULL(standardised.documentcasestage,'.'),\r\n",
					"            IFNULL(standardised.filter1,'.'),\r\n",
					"            IFNULL(standardised.filter2,'.'),\r\n",
					"            IFNULL(standardised.parentID,'.')\r\n",
					"        )) AS RowID -- this hash should contain all the defining fields\r\n",
					"    ,'Y' AS IsActive\r\n",
					"    ,Harmonised.IsActive AS HistoricIsActive\r\n",
					"FROM\r\n",
					"    odw_harmonised_db.main_sourcesystem_fact AS system_config\r\n",
					"    INNER JOIN (\r\n",
					"        SELECT\r\n",
					"            dataID\r\n",
					"            ,Version\r\n",
					"            ,name\r\n",
					"            ,MAX(expected_from) AS Last_update\r\n",
					"        FROM\r\n",
					"            odw_standardised_db.document_meta_data\r\n",
					"        GROUP BY\r\n",
					"            dataID\r\n",
					"            ,Version\r\n",
					"            ,name\r\n",
					"    ) AS Latest\r\n",
					"        ON System_config.Description = \"DocumentTree\"\r\n",
					"        AND system_config.IsActive = 'Y'\r\n",
					"    INNER JOIN odw_standardised_db.document_meta_data AS standardised\r\n",
					"        ON Latest.dataID = standardised.dataId\r\n",
					"        AND Latest.Version = standardised.Version\r\n",
					"        AND Latest.name = standardised.name\r\n",
					"        AND Latest.Last_update = standardised.expected_from\r\n",
					"    INNER JOIN  odw_harmonised_db.document_meta_data AS Harmonised\r\n",
					"        ON YEAR(standardised.CreateDate)  = Harmonised.Year\r\n",
					"        AND standardised.DataID = Harmonised.DataID  \r\n",
					"        AND standardised.Version = Harmonised.Version \r\n",
					"        AND standardised.Name = Harmonised.Name \r\n",
					"        AND Harmonised.IsActive = 'N'\r\n",
					"        AND md5(\r\n",
					"                    concat(\r\n",
					"                            IFNULL(standardised.dataid,'.'),\r\n",
					"                            IFNULL(standardised.casenodeid,'.'),\r\n",
					"                            IFNULL(standardised.casereference,'.'),\r\n",
					"                            IFNULL(standardised.documentreference,'.'),\r\n",
					"                            IFNULL(standardised.version,'.'),\r\n",
					"                            IFNULL(standardised.name,'.'),\r\n",
					"                            IFNULL(standardised.datasize\t,'.'),\r\n",
					"                            IFNULL(standardised.viruscheckstatus,'.'),\r\n",
					"                            IFNULL(standardised.createdate,'.'),\r\n",
					"                            IFNULL(standardised.modifydate,'.'),\r\n",
					"                            IFNULL(standardised.caseworktype,'.'),\r\n",
					"                            IFNULL(standardised.publishedstatus,'.'),\r\n",
					"                            IFNULL(standardised.datepublished,'.'),\r\n",
					"                            IFNULL(standardised.documenttype,'.'),\r\n",
					"                            IFNULL(standardised.sourcesystem,'.'),\r\n",
					"                            IFNULL(standardised.author,'.'),\r\n",
					"                            IFNULL(standardised.representative,'.'),\r\n",
					"                            IFNULL(standardised.documentdescription,'.'),\r\n",
					"                            IFNULL(standardised.documentcasestage,'.'),\r\n",
					"                            IFNULL(standardised.filter1,'.'),\r\n",
					"                            IFNULL(standardised.filter2,'.'),\r\n",
					"                            IFNULL(standardised.parentID,'.')\r\n",
					"                        )\r\n",
					"                ) = Harmonised.RowID \r\n",
					"GROUP BY\r\n",
					"    standardised.dataid\r\n",
					"    ,standardised.casenodeid\r\n",
					"    ,standardised.casereference\r\n",
					"    ,standardised.documentreference\r\n",
					"    ,standardised.version\r\n",
					"    ,standardised.name\r\n",
					"    ,standardised.datasize\r\n",
					"    ,standardised.viruscheckstatus\r\n",
					"    ,standardised.createdate\r\n",
					"    ,standardised.modifydate\r\n",
					"    ,standardised.caseworktype \r\n",
					"    ,standardised.publishedstatus\r\n",
					"    ,standardised.datepublished\r\n",
					"    ,standardised.documenttype\r\n",
					"    ,standardised.sourcesystem\r\n",
					"    ,standardised.author \r\n",
					"    ,standardised.representative\r\n",
					"    ,standardised.documentdescription\r\n",
					"    ,standardised.documentcasestage\r\n",
					"    ,standardised.filter1 \r\n",
					"    ,standardised.filter2 \r\n",
					"    ,standardised.parentID\r\n",
					"    ,system_config.SourceSystemID \r\n",
					"    ,to_timestamp(standardised.expected_from) \r\n",
					"    ,md5(\r\n",
					"        concat(\r\n",
					"            IFNULL(standardised.dataid,'.'),\r\n",
					"            IFNULL(standardised.casenodeid,'.'),\r\n",
					"            IFNULL(standardised.casereference,'.'),\r\n",
					"            IFNULL(standardised.documentreference,'.'),\r\n",
					"            IFNULL(standardised.version,'.'),\r\n",
					"            IFNULL(standardised.name,'.'),\r\n",
					"            IFNULL(standardised.datasize\t,'.'),\r\n",
					"            IFNULL(standardised.viruscheckstatus,'.'),\r\n",
					"            IFNULL(standardised.createdate,'.'),\r\n",
					"            IFNULL(standardised.modifydate,'.'),\r\n",
					"            IFNULL(standardised.caseworktype,'.'),\r\n",
					"            IFNULL(standardised.publishedstatus,'.'),\r\n",
					"            IFNULL(standardised.datepublished,'.'),\r\n",
					"            IFNULL(standardised.documenttype,'.'),\r\n",
					"            IFNULL(standardised.sourcesystem,'.'),\r\n",
					"            IFNULL(standardised.author,'.'),\r\n",
					"            IFNULL(standardised.representative,'.'),\r\n",
					"            IFNULL(standardised.documentdescription,'.'),\r\n",
					"            IFNULL(standardised.documentcasestage,'.'),\r\n",
					"            IFNULL(standardised.filter1,'.'),\r\n",
					"            IFNULL(standardised.filter2,'.'),\r\n",
					"            IFNULL(standardised.parentID,'.')\r\n",
					"        )\r\n",
					"    ) \r\n",
					"    ,Harmonised.IsActive\r\n",
					"UNION\r\n",
					"-- Last if we've had an update to an existing file, add original data to ensure that it is archived as part of update\r\n",
					"SELECT\r\n",
					"    Harmonised.DocumentMetaDataID\r\n",
					"    ,standardised.dataid AS DataID\r\n",
					"    ,standardised.casenodeid AS CaseNodeID\r\n",
					"    ,standardised.casereference AS CaseReference\r\n",
					"    ,standardised.documentreference AS DocumentReference\r\n",
					"    ,standardised.version AS Version\r\n",
					"    ,standardised.name AS Name\r\n",
					"    ,standardised.datasize AS DataSize\r\n",
					"    ,standardised.viruscheckstatus AS VirusCheckStatus\r\n",
					"    ,standardised.createdate AS CreateDate\r\n",
					"    ,standardised.modifydate AS ModifyDate\r\n",
					"    ,standardised.caseworktype AS CaseworkType\r\n",
					"    ,standardised.publishedstatus AS PublishedStatus\r\n",
					"    ,standardised.datepublished AS DatePublished\r\n",
					"    ,standardised.documenttype AS DocumentType\r\n",
					"    ,standardised.sourcesystem AS SourceSystem\r\n",
					"    ,standardised.author AS Author\r\n",
					"    ,standardised.representative AS Representative\r\n",
					"    ,standardised.documentdescription AS DocumentDescription\r\n",
					"    ,standardised.documentcasestage AS DocumentCaseStage\r\n",
					"    ,standardised.filter1 AS Filter1\r\n",
					"    ,standardised.filter2 AS Filter2\r\n",
					"    ,standardised.parentID AS ParentID\r\n",
					"    ,\"0\" AS Migrated\r\n",
					"    ,\"Horizon\" AS ODTSourceSystem\r\n",
					"    ,system_config.SourceSystemID AS SourceSystemID\r\n",
					"    ,to_timestamp(standardised.expected_from) AS IngestionDate\r\n",
					"    ,NULL AS ValidTo\r\n",
					"    ,Harmonised.RowID -- this hash should contain all the defining fields\r\n",
					"    ,'N' AS IsActive\r\n",
					"    ,Harmonised.IsActive AS HistoricIsActive\r\n",
					"FROM\r\n",
					"    odw_harmonised_db.main_sourcesystem_fact AS system_config\r\n",
					"    INNER JOIN (\r\n",
					"        SELECT\r\n",
					"            dataID\r\n",
					"            ,Version\r\n",
					"            ,name\r\n",
					"            ,MAX(expected_from) AS Last_update\r\n",
					"        FROM\r\n",
					"            odw_standardised_db.document_meta_data\r\n",
					"        GROUP BY\r\n",
					"            dataID\r\n",
					"            ,Version\r\n",
					"            ,name\r\n",
					"    ) AS Latest\r\n",
					"        ON System_config.Description = \"DocumentTree\"\r\n",
					"        AND system_config.IsActive = 'Y'\r\n",
					"    INNER JOIN odw_standardised_db.document_meta_data AS standardised\r\n",
					"        ON Latest.dataID = standardised.dataId\r\n",
					"        AND Latest.Version = standardised.Version\r\n",
					"        AND Latest.name = standardised.name\r\n",
					"        AND Latest.Last_update = standardised.expected_from\r\n",
					"    INNER JOIN  odw_harmonised_db.document_meta_data AS Harmonised\r\n",
					"        ON YEAR(standardised.CreateDate)  = Harmonised.Year\r\n",
					"        AND Harmonised.IsActive = 'Y'\r\n",
					"        AND standardised.DataID = Harmonised.DataID  \r\n",
					"        AND standardised.Version = Harmonised.Version \r\n",
					"        AND standardised.Name = Harmonised.Name \r\n",
					"        AND md5(\r\n",
					"                 concat(\r\n",
					"                        IFNULL(standardised.dataid,'.'),\r\n",
					"                        IFNULL(standardised.casenodeid,'.'),\r\n",
					"                        IFNULL(standardised.casereference,'.'),\r\n",
					"                        IFNULL(standardised.documentreference,'.'),\r\n",
					"                        IFNULL(standardised.version,'.'),\r\n",
					"                        IFNULL(standardised.name,'.'),\r\n",
					"                        IFNULL(standardised.datasize\t,'.'),\r\n",
					"                        IFNULL(standardised.viruscheckstatus,'.'),\r\n",
					"                        IFNULL(standardised.createdate,'.'),\r\n",
					"                        IFNULL(standardised.modifydate,'.'),\r\n",
					"                        IFNULL(standardised.caseworktype,'.'),\r\n",
					"                        IFNULL(standardised.publishedstatus,'.'),\r\n",
					"                        IFNULL(standardised.datepublished,'.'),\r\n",
					"                        IFNULL(standardised.documenttype,'.'),\r\n",
					"                        IFNULL(standardised.sourcesystem,'.'),\r\n",
					"                        IFNULL(standardised.author,'.'),\r\n",
					"                        IFNULL(standardised.representative,'.'),\r\n",
					"                        IFNULL(standardised.documentdescription,'.'),\r\n",
					"                        IFNULL(standardised.documentcasestage,'.'),\r\n",
					"                        IFNULL(standardised.filter1,'.'),\r\n",
					"                        IFNULL(standardised.filter2,'.'),\r\n",
					"                        IFNULL(standardised.parentID,'.')\r\n",
					"                    )\r\n",
					"                ) <> Harmonised.RowID"
				],
				"execution_count": 17
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Dataset is created that contains changed data and corresponding target data\n",
					"- This script combines data that has been updated, Deleted or is new, with corresponding target data\n",
					"- View **casework_all_appeals_new** is unioned to the target data filter to only those rows where changes have been detected\n",
					"## View document_meta_data_changed_rows is created"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"\n",
					"CREATE OR REPLACE TEMPORARY VIEW Loading_month -- Work out the closing date for files set the isActiveData to N\n",
					"AS\n",
					"SELECT DISTINCT\n",
					"    DataID  \n",
					"    ,Version \n",
					"    ,Name \n",
					"    ,to_timestamp(date_sub(IngestionDate,1)) AS ClosingDate\n",
					"    ,IsActive\n",
					"FROM \n",
					"    document_meta_data_new\n",
					"WHERE\n",
					"    IsActive = 'Y';\n",
					"\n",
					"CREATE OR REPLACE TEMPORARY VIEW document_meta_data_changed_rows_final\n",
					"AS\n",
					"SELECT \n",
					"    DocumentMetaDataID\n",
					"    ,raw.DataID\n",
					"    ,CaseNodeID\n",
					"    ,CaseReference\n",
					"    ,DocumentReference\n",
					"    ,raw.Version\n",
					"    ,raw.Name\n",
					"    ,DataSize\n",
					"    ,VirusCheckStatus\n",
					"    ,CreateDate\n",
					"    ,ModifyDate\n",
					"    ,CaseworkType\n",
					"    ,PublishedStatus\n",
					"    ,DatePublished\n",
					"    ,DocumentType\n",
					"    ,SourceSystem\n",
					"    ,Author\n",
					"    ,Representative\n",
					"    ,DocumentDescription\n",
					"    ,DocumentCaseStage\n",
					"    ,Filter1\n",
					"    ,Filter2\n",
					"    ,ParentID\n",
					"    ,Migrated\n",
					"    ,ODTSourceSystem\n",
					"    ,raw.SourceSystemID\n",
					"    ,raw.IngestionDate\n",
					"    ,raw.ValidTo\n",
					"    ,raw.RowID\n",
					"    ,raw.IsActive\n",
					"    ,Date.ClosingDate\n",
					"    ,YEAR(raw.CreateDate) AS year_created\n",
					"FROM \n",
					"    document_meta_data_new  AS raw\n",
					"    LEFT OUTER JOIN Loading_month AS DATE\n",
					"        ON raw.DataID = Date.DataID\n",
					"        AND raw.Version = Date.Version\n",
					"        AND raw.Name = Date.Name\n",
					"        AND raw.IsActive = 'N'"
				],
				"execution_count": 18
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					""
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# View document_meta_data_changed_rows is used in a merge (Upsert) statement into the target table\n",
					"- **WHEN MATCHED** ON the surrogate Key (i.e. AllAppealsID), EndDate is set to today -1 day and the IsActive flag is set to 'N'\n",
					"- **WHEN NOT MATCHED** ON the surrogate Key, insert rows\n",
					"## Table odw_harmonised_db.document_meta_data is updated"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"-- merge into dim table\r\n",
					"MERGE INTO odw_harmonised_db.document_meta_data AS Target\r\n",
					"USING document_meta_data_changed_rows_final AS Source   \r\n",
					"    ON Target.Year = Source.year_created\r\n",
					"    AND Target.DocumentMetaDataID = Source.DocumentMetaDataID \r\n",
					"-- Updates existing rows. If they're records we've seen before unarchive, otherwise archive\r\n",
					"WHEN MATCHED THEN \r\n",
					"    UPDATE \r\n",
					"    SET\r\n",
					"        Target.ValidTo = to_timestamp(ClosingDate)\r\n",
					"        ,Target.IsActive = Source.IsActive\r\n",
					"-- Insert completely new rows\r\n",
					"WHEN NOT MATCHED \r\n",
					"    THEN INSERT (\r\n",
					"        DocumentMetaDataID\r\n",
					"        ,DataID\r\n",
					"        ,CaseNodeID\r\n",
					"        ,CaseReference\r\n",
					"        ,DocumentReference\r\n",
					"        ,Version\r\n",
					"        ,Name\r\n",
					"        ,DataSize\r\n",
					"        ,VirusCheckStatus\r\n",
					"        ,CreateDate\r\n",
					"        ,ModifyDate\r\n",
					"        ,CaseworkType\r\n",
					"        ,PublishedStatus\r\n",
					"        ,DatePublished\r\n",
					"        ,DocumentType\r\n",
					"        ,SourceSystem\r\n",
					"        ,Author\r\n",
					"        ,Representative\r\n",
					"        ,DocumentDescription\r\n",
					"        ,DocumentCaseStage\r\n",
					"        ,Filter1\r\n",
					"        ,Filter2\r\n",
					"        ,ParentID\r\n",
					"        ,Migrated\r\n",
					"        ,ODTSourceSystem\r\n",
					"        ,SourceSystemID\r\n",
					"        ,IngestionDate\r\n",
					"        ,ValidTo\r\n",
					"        ,RowID\r\n",
					"        ,IsActive\r\n",
					"        ,Year)\r\n",
					"    VALUES (\r\n",
					"        Source.DocumentMetaDataID\r\n",
					"        ,Source.DataID\r\n",
					"        ,Source.CaseNodeID\r\n",
					"        ,Source.CaseReference\r\n",
					"        ,Source.DocumentReference\r\n",
					"        ,Source.Version\r\n",
					"        ,Source.Name\r\n",
					"        ,Source.DataSize\r\n",
					"        ,Source.VirusCheckStatus\r\n",
					"        ,Source.CreateDate\r\n",
					"        ,Source.ModifyDate\r\n",
					"        ,Source.CaseworkType\r\n",
					"        ,Source.PublishedStatus\r\n",
					"        ,Source.DatePublished\r\n",
					"        ,Source.DocumentType\r\n",
					"        ,Source.SourceSystem\r\n",
					"        ,Source.Author\r\n",
					"        ,Source.Representative\r\n",
					"        ,Source.DocumentDescription\r\n",
					"        ,Source.DocumentCaseStage\r\n",
					"        ,Source.Filter1\r\n",
					"        ,Source.Filter2\r\n",
					"        ,Source.ParentID\r\n",
					"        ,Source.Migrated\r\n",
					"        ,Source.ODTSourceSystem\r\n",
					"        ,Source.SourceSystemID\r\n",
					"        ,Source.IngestionDate\r\n",
					"        ,Source.ValidTo\r\n",
					"        ,Source.RowID\r\n",
					"        ,Source.IsActive\r\n",
					"        ,Source.year_created)\r\n",
					"     ;   "
				],
				"execution_count": 19
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Fix the IDs\n",
					"- No auto-increment feature is available in delta tables, therefore we need to create new IDs for the inserted rows\n",
					"- This is done by select the target data and using INSERT OVERWRITE to re-insert the data is a new Row Number\n",
					"## Table odw_harmonised_db.document_meta_data is updated"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"-- Insert new document_meta_data\r\n",
					"\r\n",
					"INSERT OVERWRITE odw_harmonised_db.document_meta_data\r\n",
					"\r\n",
					"SELECT \r\n",
					"    ROW_NUMBER() OVER (ORDER BY DocumentMetaDataID NULLS LAST) AS DocumentMetaDataID\r\n",
					"    ,DataID\r\n",
					"    ,CaseNodeID\r\n",
					"    ,CaseReference\r\n",
					"    ,DocumentReference\r\n",
					"    ,Version\r\n",
					"    ,Name\r\n",
					"    ,DataSize\r\n",
					"    ,VirusCheckStatus\r\n",
					"    ,CreateDate\r\n",
					"    ,ModifyDate\r\n",
					"    ,CaseworkType\r\n",
					"    ,PublishedStatus\r\n",
					"    ,DatePublished\r\n",
					"    ,DocumentType\r\n",
					"    ,SourceSystem\r\n",
					"    ,Author\r\n",
					"    ,Representative\r\n",
					"    ,DocumentDescription\r\n",
					"    ,DocumentCaseStage\r\n",
					"    ,Filter1\r\n",
					"    ,Filter2\r\n",
					"    ,ParentID\r\n",
					"    ,Migrated\r\n",
					"    ,ODTSourceSystem\r\n",
					"    ,SourceSystemID\r\n",
					"    ,IngestionDate\r\n",
					"    ,ValidTo\r\n",
					"    ,RowID\r\n",
					"    ,IsActive\r\n",
					"    ,Year\r\n",
					"FROM odw_harmonised_db.document_meta_data;\r\n",
					""
				],
				"execution_count": 20
			}
		]
	}
}