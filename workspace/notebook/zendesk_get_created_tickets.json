{
	"name": "zendesk_get_created_tickets",
	"properties": {
		"description": "zendesk_insert_new_data_into_standerdised_from_raw",
		"folder": {
			"name": "odw-raw"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": true,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "506a82f0-6853-4e49-ae47-6c40c7e8ee31"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": true,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw",
				"name": "pinssynspodw",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"tags": [
						"parameters"
					]
				},
				"source": [
					"action=''"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from collections.abc import Mapping\r\n",
					"from notebookutils import mssparkutils\r\n",
					"from pprint import pprint as pp\r\n",
					"import json\r\n",
					"import pyspark.sql.functions as F \r\n",
					"import pandas as pd\r\n",
					"from pyspark.sql.types import *\r\n",
					"from datetime import date\r\n",
					"from pyspark.sql.functions import *\r\n",
					"from pyspark.sql.window import Window\r\n",
					"import pprint\r\n",
					"from pyspark.sql import DataFrame\r\n",
					"\r\n",
					"from pyspark.sql import SparkSession\r\n",
					"spark = SparkSession.builder.getOrCreate()\r\n",
					"\r\n",
					"#ignore FutureWarning messages \r\n",
					"import warnings\r\n",
					"warnings.filterwarnings(\"ignore\", message=\"iteritems is deprecated\")"
				],
				"execution_count": 82
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"Defining standardised table name, source file name and path"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"table_name = f\"odw_standardised_db.zendesk_{action}_tickets\"\r\n",
					"spark.sql(f\"SET TABLE_NAME = {table_name}\")\r\n",
					"\r\n",
					"today = date.today().strftime(\"%Y-%m-%d\")\r\n",
					"\r\n",
					"storage_acc_name = spark.sparkContext.environment.get('dataLakeAccountName', 'get')\r\n",
					"file_name = f\"{action}_24hours_{today}.json\"\r\n",
					"file_path = f\"abfss://odw-raw@{storage_acc_name}.dfs.core.windows.net/ZenDesk/{action}/{file_name}\""
				],
				"execution_count": 83
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"Reading source file and converting it into a dataframe"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def get_zendesk_data(file_path: str) -> DataFrame:\r\n",
					"    \"\"\"\r\n",
					"    Reads Zendesk json files into a DataFrame\r\n",
					"\r\n",
					"    Returns:\r\n",
					"        Spark DataFrame\r\n",
					"    \"\"\"\r\n",
					"\r\n",
					"    file_rdd = spark.read.text(file_path, wholetext=True).rdd\r\n",
					"    data = file_rdd.take(1)[0]['value']\r\n",
					"    if data.startswith('\\ufeff'):\r\n",
					"        data = data[1:]\r\n",
					"    json_data = json.loads(data)\r\n",
					"    results = json_data[0][\"results\"]\r\n",
					"\r\n",
					"    pddf=pd.DataFrame(results)\r\n",
					"\r\n",
					"    pddf=pddf.applymap(str)\r\n",
					"    pddf = pddf.dropna(axis='columns', how='all') # Drops columns with all NA values\r\n",
					"\r\n",
					"    df = spark.createDataFrame(pddf)\r\n",
					"\r\n",
					"    partition = Window.partitionBy(\"SourceSystemID\").orderBy('id')\r\n",
					"    df = df.withColumn(\"SourceSystemID\",lit(6)).withColumn('IngestionDate', F.current_timestamp()).withColumn('ValidTo', lit(\"NULL\")).withColumn('IsActive', lit(\"Y\")).withColumn('RowID', row_number().over(partition))\r\n",
					"\r\n",
					"    return df"
				],
				"execution_count": 84
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df = get_zendesk_data(file_path)"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"Dropping the existing table, creating, and ingesting into the new table\n",
					""
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"spark.sql(f\"drop table if exists {table_name};\")\r\n",
					"df.write.format('delta').saveAsTable(f\"{table_name}}\")"
				],
				"execution_count": 85
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"Merging the new data into the Zendesk System Extract"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"MERGE INTO odw_standardised_db.zendesk_system_extract AS Target\r\n",
					"USING ${TABLE_NAME} AS Source\r\n",
					"ON Source.id = Target.id\r\n",
					"    \r\n",
					"    -- For Inserts\r\n",
					"WHEN NOT MATCHED THEN INSERT (\r\n",
					"    allow_attachments,\r\n",
					"    allow_channelback,\r\n",
					"    assignee,\r\n",
					"    brand_id,\r\n",
					"    collaborator,\r\n",
					"    comments,\r\n",
					"    created_at,\r\n",
					"    custom_fields,\r\n",
					"    custom_status_id,\r\n",
					"    dates,\r\n",
					"    description,\r\n",
					"    due_at,\r\n",
					"    email_cc_ids,\r\n",
					"    external_id,\r\n",
					"    fields,\r\n",
					"    follower_ids,\r\n",
					"    followup_ids,\r\n",
					"    forum_topic_id,\r\n",
					"    from_messaging_channel,\r\n",
					"    generated_timestamp,\r\n",
					"    group,\r\n",
					"    has_incidents,\r\n",
					"    id,\r\n",
					"    is_public,\r\n",
					"    metric_set,\r\n",
					"    organization,\r\n",
					"    priority,\r\n",
					"    problem_id,\r\n",
					"    raw_subject,\r\n",
					"    recipient,\r\n",
					"    requester,\r\n",
					"    satisfaction_rating,\r\n",
					"    sharing_agreement_ids,\r\n",
					"    status,\r\n",
					"    subject,\r\n",
					"    submitter,\r\n",
					"    tags,\r\n",
					"    ticket_form_id,\r\n",
					"    type,\r\n",
					"    updated_at,\r\n",
					"    url,\r\n",
					"    via,\r\n",
					"    SourceSystemID,\r\n",
					"    IngestionDate,\r\n",
					"    ValidTo,\r\n",
					"    IsActive,\r\n",
					"    RowID\r\n",
					"    ) \r\n",
					"   \r\n",
					"    VALUES (\r\n",
					"        IFNULL(Source.allow_attachments, \"NO INFO\"),\r\n",
					"        IFNULL(Source.allow_channelback, \"NO INFO\"),\r\n",
					"        Source.assignee_id,\r\n",
					"        IFNULL(Source.brand_id, \"NO INFO\"),\r\n",
					"        IFNULL(Source.collaborator_ids, \"NO INFO\"),\r\n",
					"        \"NO COMMENTS\",\r\n",
					"        IFNULL(Source.created_at, \"NO INFO\"),\r\n",
					"        IFNULL(Source.custom_fields, \"NO INFO\"),\r\n",
					"        IFNULL(Source.custom_status_id, \"NO INFO\"),\r\n",
					"        \"NO DATES\",\r\n",
					"        IFNULL(Source.description, \"NO INFO\"),\r\n",
					"        IFNULL(Source.due_at, \"NO INFO\"),\r\n",
					"        IFNULL(Source.email_cc_ids, \"NO INFO\"),\r\n",
					"        IFNULL(Source.external_id, \"NO INFO\"),\r\n",
					"        IFNULL(Source.fields, \"NO INFO\"),\r\n",
					"        IFNULL(Source.follower_ids, \"NO INFO\"),\r\n",
					"        IFNULL(Source.followup_ids, \"NO INFO\"),\r\n",
					"        IFNULL(Source.forum_topic_id, \"NO INFO\"),\r\n",
					"        IFNULL(Source.from_messaging_channel, \"NO INFO\"),\r\n",
					"        \"NO GENERATED TIMESTAMP\",\r\n",
					"        IFNULL(Source.group_id, \"NO INFO\"),\r\n",
					"        IFNULL(Source.has_incidents, \"NO INFO\"),\r\n",
					"        Source.id,\r\n",
					"        IFNULL(Source.is_public, \"NO INFO\"),\r\n",
					"        \"NO METRIC SET\",\r\n",
					"        IFNULL(Source.organization_id, \"NO INFO\"),\r\n",
					"        IFNULL(Source.priority, \"NO INFO\"),\r\n",
					"        IFNULL(Source.problem_id, \"NO INFO\"),\r\n",
					"        IFNULL(Source.raw_subject, \"NO INFO\"),\r\n",
					"        IFNULL(Source.recipient, \"NO INFO\"),\r\n",
					"        IFNULL(Source.requester_id, \"NO INFO\"),\r\n",
					"        IFNULL(Source.satisfaction_rating, \"NO INFO\"),\r\n",
					"        IFNULL(Source.sharing_agreement_ids, \"NO INFO\"),\r\n",
					"        IFNULL(Source.status, \"NO INFO\"),\r\n",
					"        IFNULL(Source.subject, \"NO INFO\"),\r\n",
					"        IFNULL(Source.submitter_id, \"NO INFO\"),\r\n",
					"        IFNULL(Source.tags, \"NO INFO\"),\r\n",
					"        IFNULL(Source.ticket_form_id, \"NO INFO\"),\r\n",
					"        IFNULL(Source.type, \"NO INFO\"),\r\n",
					"        IFNULL(Source.updated_at, \"NO INFO\"),\r\n",
					"        IFNULL(Source.url, \"NO INFO\"),\r\n",
					"        IFNULL(Source.via, \"NO INFO\"),\r\n",
					"        IFNULL(Source.SourceSystemID,\"NO INFO\"),\r\n",
					"        IFNULL(Source.IngestionDate,\"NO INFO\"),\r\n",
					"        IFNULL(Source.ValidTo,\"NO INFO\"),\r\n",
					"        IFNULL(Source.IsActive,\"NO INFO\"),\r\n",
					"        IFNULL(Source.RowID, \"NO INFO\")\r\n",
					"    )"
				],
				"execution_count": 86
			}
		]
	}
}