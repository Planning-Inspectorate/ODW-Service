{
	"name": "document_metadata",
	"properties": {
		"folder": {
			"name": "odw-curated"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "502f5324-15d8-41ae-abd0-4148b23c89d7"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw",
				"name": "pinssynspodw",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.sql.functions import *\n",
					"from pyspark.sql.types import *\n",
					"from pyspark.sql import DataFrame"
				],
				"execution_count": 2
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Create a view for the data, joining harmonised tables where necessary"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"CREATE OR REPLACE VIEW odw_curated_db.vw_nsip_document\n",
					"AS\n",
					"SELECT DISTINCT \n",
					"    meta_data.DataId AS documentId\n",
					"    ,meta_data.CaseNodeId AS caseId\n",
					"    ,proj.caseReference AS caseRef\n",
					"    ,meta_data.documentReference AS documentReference\n",
					"    ,meta_data.Version AS version\n",
					"    ,aie_data.examinationRefNo AS examinationRefNo\n",
					"    ,meta_data.Name AS filename\n",
					"    ,meta_data.Name AS originalFilename\n",
					"    ,meta_data.DataSize AS size\n",
					"    ,aie_data.mime AS mime\n",
					"    ,aie_data.DocumentURI AS documentURI\n",
					"    ,aie_data.DocumentURI AS publishedDocumentURI\n",
					"    ,aie_data.Path AS path\n",
					"    ,meta_data.virusCheckStatus AS virusCheckStatus\n",
					"    ,aie_data.fileMd5 AS fileMD5\n",
					"    ,meta_data.CreateDate AS dateCreated\n",
					"    ,meta_data.ModifyDate AS lastModified\n",
					"    ,LOWER(meta_data.CaseworkType) AS caseType\n",
					"    ,CASE\n",
					"        WHEN aie_data.redactedStatus = ' ' THEN \n",
					"            NULL\n",
					"        ELSE \n",
					"            aie_data.redactedStatus                \n",
					"    END AS redactedStatus\n",
					"    ,CASE\n",
					"        WHEN meta_data.PublishedStatus = 'Depublished' THEN \n",
					"            'unpublished'\n",
					"        ELSE \n",
					"            REPLACE(LOWER(meta_data.PublishedStatus), ' ', '_')\n",
					"    END AS publishedStatus\n",
					"    ,meta_data.DatePublished AS datePublished\n",
					"    ,meta_data.DocumentType AS documentType\n",
					"    ,CASE\n",
					"        WHEN aie_data.securityClassification = ' ' THEN \n",
					"            NULL\n",
					"        ELSE \n",
					"            aie_data.securityClassification\n",
					"    END AS securityClassification\n",
					"    ,meta_data.SourceSystem AS sourceSystem\n",
					"    ,CASE\n",
					"        WHEN aie_data.origin  = ' ' THEN \n",
					"            NULL\n",
					"        ELSE \n",
					"            aie_data.origin\n",
					"    END AS origin\n",
					"    ,aie_data.owner AS owner\n",
					"    ,meta_data.Author AS author\n",
					"    ,CAST(NULL AS String) AS authorWelsh\n",
					"    ,meta_data.Representative AS representative\n",
					"    ,meta_data.DocumentDescription AS description\n",
					"    ,CAST(NULL AS String) AS descriptionWelsh\n",
					"    ,CASE\n",
					"        WHEN meta_data.DocumentCaseStage = \"Developer's Application\" THEN \n",
					"            'developers_application'\n",
					"        WHEN meta_data.DocumentCaseStage = 'Post decision' THEN \n",
					"            'post_decision'\n",
					"        ELSE \n",
					"            LOWER(meta_data.DocumentCaseStage)\t            \n",
					"    END AS documentCaseStage\n",
					"    ,meta_data.Filter1 AS filter1\n",
					"    ,CAST(NULL AS String) AS filter1Welsh\n",
					"    ,meta_data.Filter2 AS filter2\n",
					"    ,meta_data.ParentID AS horizonFolderId\n",
					"    ,CAST(NULL AS String) AS transcriptId\t\n",
					"\n",
					"FROM \n",
					"    odw_curated_db.nsip_project AS proj\n",
					"    INNER JOIN odw_harmonised_db.document_meta_data AS meta_data\n",
					"        ON proj.caseReference = meta_data.caseReference\n",
					"    LEFT OUTER JOIN odw_harmonised_db.aie_document_data AS aie_data\n",
					"        ON meta_data.DataID = aie_data.DocumentID \n",
					"        AND meta_data.Version = aie_data.Version \n",
					"        AND meta_data.DataSize = aie_data.Size\n",
					"WHERE \n",
					"    aie_data.IsActive = 'Y' \n",
					"    AND meta_data.IsActive = 'Y';"
				],
				"execution_count": 8
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Create a DataFrame of the data from the view"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df = spark.sql(\"SELECT * FROM odw_curated_db.vw_nsip_document\")\n",
					"df.write.mode(\"overwrite\").saveAsTable(\"odw_curated_db.nsip_document\")"
				],
				"execution_count": 9
			}
		]
	}
}