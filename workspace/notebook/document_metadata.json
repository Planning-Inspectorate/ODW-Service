{
	"name": "document_metadata",
	"properties": {
		"folder": {
			"name": "odw-curated"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "37a72b72-1e14-44fc-8c90-c9c2014c5b17"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw",
				"name": "pinssynspodw",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.sql.functions import *\r\n",
					"from pyspark.sql.types import *\r\n",
					"from pyspark.sql import DataFrame"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Create a view for the data, joining harmonised tables where necessary"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"\n",
					"CREATE OR REPLACE VIEW odw_curated_db.vw_nsip_document\n",
					"\n",
					"AS\n",
					"\n",
					"SELECT DISTINCT \n",
					"MD.DataId\t                            AS documentId,\n",
					"MD.CaseNodeId\t                        AS caseId,\n",
					"MD.caseReference\t                    AS caseRef,\n",
					"MD.documentReference\t                AS documentReference,\n",
					"MD.Version                              AS version,\n",
					"AMD.examinationRefNo\t                AS examinationRefNo,\n",
					"MD.Name\t                                AS filename,\n",
					"MD.Name\t                                AS originalFilename,\n",
					"MD.DataSize\t                            AS size,\n",
					"AMD.mime\t                            AS mime,\n",
					"AMD.DocumentURI\t                        AS documentURI,\n",
					"AMD.DocumentURI\t\t                    AS publishedDocumentURI,\n",
					"AMD.Path                                AS path,\n",
					"MD.virusCheckStatus\t                    AS virusCheckStatus,\n",
					"AMD.fileMd5\t                            AS fileMD5,\n",
					"MD.CreateDate                   \t    AS dateCreated,\n",
					"MD.ModifyDate                   \t    AS lastModified,\n",
					"LOWER(MD.CaseworkType)\t                AS caseType,\n",
					"CASE\n",
					"    WHEN AMD.redactedStatus = ' '   \n",
					"    THEN NULL\n",
					"    ELSE AMD.redactedStatus                \n",
					"END                                     AS redactedStatus,\n",
					"CASE\n",
					"    WHEN MD.PublishedStatus = 'Depublished'\n",
					"    THEN 'unpublished'\n",
					"    ELSE REPLACE(\n",
					"        LOWER(MD.PublishedStatus),\n",
					"        ' ',\n",
					"        '_')\n",
					"END                  \t                AS publishedStatus,\n",
					"MD.DatePublished                        AS datePublished,\n",
					"MD.DocumentType\t                        AS documentType,\n",
					"CASE\n",
					"    WHEN AMD.securityClassification = ' '\n",
					"    THEN NULL\n",
					"    ELSE AMD.securityClassification\n",
					"END\t                                    AS securityClassification,\n",
					"MD.SourceSystem\t                        AS sourceSystem,\n",
					"CASE\n",
					"    WHEN AMD.origin  = ' '\n",
					"    THEN NULL\n",
					"    ELSE AMD.origin\n",
					"END\t                                    AS origin,\n",
					"AMD.owner                               AS owner,\n",
					"MD.Author\t                            AS author,\n",
					"NULL                                    AS authorWelsh,\n",
					"MD.Representative\t                    AS representative,\n",
					"MD.DocumentDescription\t                AS description,\n",
					"NULL                                    AS descriptionWelsh,\n",
					"CASE\n",
					"    WHEN MD.DocumentCaseStage = \"Developer's Application\"\n",
					"    THEN 'developers_application'\n",
					"    WHEN MD.DocumentCaseStage = 'Post decision'\n",
					"    THEN 'post_decision'\n",
					"    ELSE LOWER(MD.DocumentCaseStage)\t            \n",
					"END                                     AS documentCaseStage,\n",
					"MD.Filter1\t                            AS filter1,\n",
					"NULL                                    AS filter1Welsh,\n",
					"MD.Filter2\t                            AS filter2,\n",
					"MD.ParentID\t                            AS horizonFolderId,\n",
					"NULL\t                                AS transcriptId\t\n",
					"\n",
					"FROM odw_harmonised_db.document_meta_data   AS MD\n",
					"FULL JOIN odw_harmonised_db.aie_document_data    AS AMD\n",
					"    ON MD.DataID = AMD.DocumentID \n",
					"        AND AMD.Version = MD.Version \n",
					"        AND AMD.Size = MD.DataSize\n",
					"WHERE AMD.IsActive = 'Y' \n",
					"    AND MD.IsActive = 'Y'\n",
					";"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Create a DataFrame of the data from the view"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"data: DataFrame = spark.sql(\"SELECT * FROM odw_curated_db.vw_nsip_document\")"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Specify the schema for the data, taken from the curated table which has already been created in advance from the data model"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"schema: StructType = spark.table(\"odw_curated_db.nsip_document\").schema"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Cast all field data types in the data to the data types from the curated table schema\r\n",
					"\r\n",
					"This is necessary because the view generated above is joining harmonised tables, many of which are sourced from Horizon and will have a different schema to the final table and fields will have different data types. Therefore, taking the curated schema as defined in thr data model and casting all fields correctly, ensures accuracy."
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df: DataFrame = data.select(\r\n",
					"    *[\r\n",
					"        col(field.name).cast(field.dataType).alias(field.name)\r\n",
					"        for field in schema.fields\r\n",
					"    ]\r\n",
					")"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Print the schema as a visual check"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"df.printSchema()"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Write the data to the curated table"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df.write.mode(\"overwrite\").format(\"delta\").saveAsTable(\"odw_curated_db.nsip_document\")"
				],
				"execution_count": null
			}
		]
	}
}