{
	"name": "vw_dim_HR_Organisation_Unit",
	"properties": {
		"folder": {
			"name": "odw-curated/saphr"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw34",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "93a0b96b-334e-40bb-ab20-c314aebc9521"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw34",
				"name": "pinssynspodw34",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw34",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#### The purpose of this notebook is to read data from Harmoised layer and build a view & table for Power BI use.\n",
					"\n",
					"**Author** &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   **Created Date** &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; **Description**  \n",
					"Prathap Adicherla &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;01-April-2025 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Organizational Unit  details Covered in here;"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"from odw.core.util.logging_util import LoggingUtil\n",
					"from pyspark.sql.functions import udf, col, lit, when, coalesce, concat, sum, avg, max, min, count, countDistinct, date_format, to_date, datediff, months_between, year, month,  hour, minute, second, expr, asc, desc\n",
					"from pyspark.sql.types import DateType, TimestampType, StringType, IntegerType, FloatType, DoubleType, BooleanType, StructType, StructField, ArrayType, MapType\n",
					"from pyspark.sql.window import Window\n",
					"from pyspark.sql.functions import row_number, rank, dense_rank, lag, lead, ntile\n",
					"from pyspark.sql import SQLContext\n",
					"from pyspark.sql import DataFrame\n",
					"from pyspark.sql import functions as F\n",
					"from pyspark.sql.avro.functions import from_avro, to_avro\n",
					"from pyspark.sql.streaming import DataStreamReader, DataStreamWriter\n",
					"from pyspark.sql.utils import AnalysisException\n",
					"from pyspark.sql.catalog import Catalog\n",
					"from pyspark.sql.column import Column\n",
					"from pyspark.sql.group import GroupedData\n",
					"from pyspark.sql.pandas.functions import pandas_udf\n",
					"\n",
					"from datetime import datetime, timedelta\n",
					"import pandas as pd\n",
					"import numpy as np"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"import json\n",
					"\n",
					"# Initialize result dictionary\n",
					"result = {\n",
					"    \"status\": \"success\",\n",
					"    \"record_count\": 0,\n",
					"    \"error_message\": None\n",
					"}\n",
					"\n",
					"try:\n",
					"    LoggingUtil().log_info(\"Starting HR Organization Unit dimension setup\")\n",
					"    \n",
					"    # Get storage account \n",
					"    storage_account = mssparkutils.notebook.run('/utils/py_utils_get_storage_account')\n",
					"    LoggingUtil().log_info(f\"Using storage account: {storage_account}\")\n",
					"    \n",
					"    # Fix the path\n",
					"    storage_account = storage_account.rstrip('/')\n",
					"    delta_table_path = f\"abfss://odw-curated@{storage_account}/saphr/pbi_dim_HR_Organisation_Unit\"\n",
					"    LoggingUtil().log_info(f\"Delta table will be created at: {delta_table_path}\")\n",
					"    \n",
					"    # Check if table exists and get existing data count\n",
					"    table_exists = False\n",
					"    existing_count = 0\n",
					"    try:\n",
					"        existing_count = spark.sql(\"SELECT COUNT(*) as count FROM odw_curated_db.pbi_dim_HR_Organisation_Unit\").collect()[0]['count']\n",
					"        table_exists = True\n",
					"        LoggingUtil().log_info(f\"Existing dimension table found with {existing_count} records\")\n",
					"    except:\n",
					"        LoggingUtil().log_info(\"No existing dimension table found - will create fresh\")\n",
					"        table_exists = False\n",
					"    \n",
					"    # Capture existing data first if table exists\n",
					"    merged_org_data = None\n",
					"    if table_exists:\n",
					"        LoggingUtil().log_info(\"Capturing existing data and merging with all historical data\")\n",
					"        # Get combined data using SQL that includes both existing and all historical data\n",
					"        merged_org_data = spark.sql(\"\"\"\n",
					"        WITH ExistingOrgUnits AS (\n",
					"            SELECT DISTINCT \n",
					"                OrganisationUnitCode,\n",
					"                OrganisationUnitDesc,\n",
					"                'EXISTING' as source_type\n",
					"            FROM odw_curated_db.pbi_dim_HR_Organisation_Unit\n",
					"            WHERE OrganisationUnitCode IS NOT NULL \n",
					"                AND OrganisationUnitCode != '' \n",
					"                AND OrganisationUnitCode != '0'\n",
					"                AND OrganisationUnitCode != '00000000'\n",
					"        ),\n",
					"        AllHistoricalOrgUnits AS (\n",
					"            SELECT DISTINCT\n",
					"                Orgunit AS OrganisationUnitCode,\n",
					"                OrganizationalUnit AS OrganisationUnitDesc,\n",
					"                'HISTORICAL' as source_type\n",
					"            FROM odw_harmonised_db.hist_sap_hr\n",
					"            WHERE Orgunit IS NOT NULL \n",
					"                AND Orgunit != ''\n",
					"                AND Orgunit != '0'\n",
					"                AND Orgunit != '00000000'\n",
					"        ),\n",
					"        CombinedUnits AS (\n",
					"            SELECT OrganisationUnitCode, OrganisationUnitDesc, source_type FROM ExistingOrgUnits\n",
					"            UNION ALL\n",
					"            SELECT OrganisationUnitCode, OrganisationUnitDesc, source_type FROM AllHistoricalOrgUnits\n",
					"        ),\n",
					"        RankedUnits AS (\n",
					"            SELECT \n",
					"                OrganisationUnitCode,\n",
					"                OrganisationUnitDesc,\n",
					"                ROW_NUMBER() OVER(PARTITION BY OrganisationUnitCode ORDER BY \n",
					"                    CASE WHEN source_type = 'HISTORICAL' THEN 1 ELSE 2 END) as rn\n",
					"            FROM CombinedUnits\n",
					"        )\n",
					"        SELECT DISTINCT\n",
					"            OrganisationUnitCode,\n",
					"            OrganisationUnitDesc\n",
					"        FROM RankedUnits\n",
					"        WHERE rn = 1\n",
					"        \"\"\")\n",
					"        \n",
					"        # Cache the merged data\n",
					"        merged_org_data.cache()\n",
					"        count_merged = merged_org_data.count()\n",
					"        LoggingUtil().log_info(f\"Merged data contains {count_merged} organization units\")\n",
					"        \n",
					"    else:\n",
					"        LoggingUtil().log_info(\"Getting all historical organization units for fresh creation\")\n",
					"        # Get all historical data for fresh creation\n",
					"        merged_org_data = spark.sql(\"\"\"\n",
					"        WITH RankedData AS (\n",
					"            SELECT \n",
					"                Orgunit AS OrganisationUnitCode,\n",
					"                OrganizationalUnit AS OrganisationUnitDesc,\n",
					"                ROW_NUMBER() OVER(PARTITION BY Orgunit ORDER BY Report_MonthEnd_Date DESC) AS Rnk\n",
					"            FROM odw_harmonised_db.hist_sap_hr\n",
					"            WHERE Orgunit IS NOT NULL \n",
					"                AND Orgunit != ''\n",
					"                AND Orgunit != '0'\n",
					"                AND Orgunit != '00000000'\n",
					"            GROUP BY Orgunit, OrganizationalUnit, Report_MonthEnd_Date\n",
					"        )\n",
					"        SELECT DISTINCT\n",
					"            OrganisationUnitCode,\n",
					"            OrganisationUnitDesc\n",
					"        FROM RankedData\n",
					"        WHERE Rnk = 1\n",
					"        \"\"\")\n",
					"        \n",
					"        merged_org_data.cache()\n",
					"        count_merged = merged_org_data.count()\n",
					"        LoggingUtil().log_info(f\"Historical data contains {count_merged} organization units\")\n",
					"    \n",
					"    # Drop the table if it exists\n",
					"    LoggingUtil().log_info(\"Dropping table odw_curated_db.pbi_dim_HR_Organisation_Unit if it exists\")\n",
					"    spark.sql(\"\"\"\n",
					"    DROP TABLE IF EXISTS odw_curated_db.pbi_dim_HR_Organisation_Unit\n",
					"    \"\"\")\n",
					"    LoggingUtil().log_info(\"Table dropped or did not exist\")\n",
					"    \n",
					"    # Create table directly from the cached DataFrame\n",
					"    LoggingUtil().log_info(\"Creating table from merged organization unit data\")\n",
					"    \n",
					"    # Add ranking to the DataFrame - Filter out invalid records first\n",
					"    from pyspark.sql.window import Window\n",
					"    from pyspark.sql.functions import row_number\n",
					"    \n",
					"    # Filter out records with NULL, empty, or \"0\" OrganisationUnitCode (additional safety check)\n",
					"    filtered_org_data = merged_org_data.filter(\n",
					"        (merged_org_data.OrganisationUnitCode.isNotNull()) & \n",
					"        (merged_org_data.OrganisationUnitCode != '') & \n",
					"        (merged_org_data.OrganisationUnitCode != '0') &\n",
					"        (merged_org_data.OrganisationUnitCode != '00000000')  # Also filter out the 8-digit zero\n",
					"    )\n",
					"    \n",
					"    # Use row_number() instead of rank() for sequential numbering\n",
					"    window_spec = Window.orderBy(\"OrganisationUnitCode\")\n",
					"    final_org_data = filtered_org_data.withColumn(\"dim_organisation_key\", row_number().over(window_spec))\n",
					"    \n",
					"    # Write directly to the Delta table location\n",
					"    final_org_data.write \\\n",
					"        .format(\"delta\") \\\n",
					"        .mode(\"overwrite\") \\\n",
					"        .option(\"path\", delta_table_path) \\\n",
					"        .saveAsTable(\"odw_curated_db.pbi_dim_HR_Organisation_Unit\")\n",
					"    \n",
					"    # Clean up cached data\n",
					"    merged_org_data.unpersist()\n",
					"    \n",
					"    # Now create the view from the table (simpler approach)\n",
					"    LoggingUtil().log_info(\"Creating view odw_curated_db.vw_dim_HR_Organisation_Unit\")\n",
					"    spark.sql(\"\"\"\n",
					"    CREATE OR REPLACE VIEW odw_curated_db.vw_dim_HR_Organisation_Unit AS\n",
					"    SELECT * FROM odw_curated_db.pbi_dim_HR_Organisation_Unit\n",
					"    \"\"\")\n",
					"    # Count records in view\n",
					"    organisation_count = spark.sql(\"SELECT COUNT(*) as count FROM odw_curated_db.vw_dim_HR_Organisation_Unit\").collect()[0]['count']\n",
					"    LoggingUtil().log_info(f\"View contains {organisation_count} distinct organisation unit records\")\n",
					"    \n",
					"    # Count records in table - this is our final record count\n",
					"    table_count = spark.sql(\"SELECT COUNT(*) as count FROM odw_curated_db.pbi_dim_HR_Organisation_Unit\").collect()[0]['count']\n",
					"    result[\"record_count\"] = table_count\n",
					"    LoggingUtil().log_info(f\"Created table with {table_count} records at location: {delta_table_path}\")\n",
					"    \n",
					"    LoggingUtil().log_info(\"HR Organization Unit dimension setup completed successfully\")\n",
					"\n",
					"except Exception as e:\n",
					"    # Capture error information\n",
					"    error_msg = f\"Error in HR Organization Unit dimension setup: {str(e)}\"\n",
					"    LoggingUtil().log_error(error_msg)\n",
					"    logException(e)\n",
					"    \n",
					"    # Try to get current record count even in case of error\n",
					"    try:\n",
					"        error_count = spark.sql(\"SELECT COUNT(*) as count FROM odw_curated_db.pbi_dim_HR_Organisation_Unit\").collect()[0]['count']\n",
					"        result[\"record_count\"] = error_count\n",
					"    except:\n",
					"        result[\"record_count\"] = 0\n",
					"    \n",
					"    # Update result for error case\n",
					"    result[\"status\"] = \"failed\"\n",
					"    result[\"error_message\"] = error_msg[:300]  # Truncate to 300 characters\n",
					"    \n",
					"    # Re-raise the exception to ensure the notebook fails properly\n",
					"    raise e\n",
					"\n",
					"finally:\n",
					"    # Always flush logs regardless of success or failure\n",
					"    LoggingUtil().log_info(\"Flushing logs\")\n",
					"    flushLogging()\n",
					"    \n",
					"    # Output the result as JSON for ADF to capture\n",
					"    mssparkutils.notebook.exit(json.dumps(result))"
				],
				"execution_count": null
			}
		]
	}
}