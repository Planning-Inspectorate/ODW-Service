{
	"name": "entraid-post-deployment-notebook",
	"properties": {
		"folder": {
			"name": "Releases/1.1.1"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodwpr",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "00cd82db-89f0-4a20-ac44-1892ba754295"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/a82fd28d-5989-4e06-a0bb-1a5d859f9e0c/resourceGroups/pins-rg-data-odw-prod-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-prod-uks/bigDataPools/pinssynspodwpr",
				"name": "pinssynspodwpr",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodwpr",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import pprint\n",
					"from pyspark.sql.types import *\n",
					"import json\n",
					"from pyspark.sql.functions import col\n",
					"from pyspark.sql import DataFrame\n",
					"from notebookutils import mssparkutils"
				],
				"execution_count": 7
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def test_table_exists(db_name: str, table_name: str) -> bool:\n",
					"    spark.sql(f\"USE {db_name}\")\n",
					"    tables_df: DataFrame = spark.sql(\"SHOW TABLES\")\n",
					"    table_names: list = [row['tableName'] for row in tables_df.collect()]\n",
					"    return table_name in table_names\n",
					"\n",
					"def get_incremental_key(entity_id: int, storage_account: str, path_to_orchestration_file: str) -> str:\n",
					"    # getting the incremental key from the odw-config/orchestration\n",
					"    df: DataFrame = spark.read.option(\"multiline\",\"true\").json(path_to_orchestration_file)\n",
					"    definitions: list = json.loads(df.toJSON().first())['definitions']\n",
					"    definition: dict = next((d for d in definitions if entity_id == d['Source_ID']), None)\n",
					"    return definition['Harmonised_Incremental_Key'] if definition and 'Harmonised_Incremental_Key' in definition else None\n",
					"\n",
					"def create_spark_schema(db_name: str, entity_name: str) -> StructType:\n",
					"    incremental_key: str = get_incremental_key(entity_id, storage_account, path_to_orchestration_file) if db_name == 'odw_harmonised_db' else None\n",
					"    schema = mssparkutils.notebook.run(\"/py_create_spark_schema\", 30, {\"db_name\": db_name, \"entity_name\": entity_name, \"incremental_key\": incremental_key, \"is_servicebus_schema\": False})\n",
					"    spark_schema = StructType.fromJson(json.loads(schema))\n",
					"    return spark_schema\n",
					"\n",
					"def create_spark_dataframe() -> DataFrame:\n",
					"    spark_dataframe: DataFrame = spark.createDataFrame([], schema=create_spark_schema(db_name, entity_name))\n",
					"    return spark_dataframe\n",
					"\n",
					"def create_spark_table(db_name: str, table_name: str, spark_dataframe: DataFrame) -> None:\n",
					"    spark_dataframe.write.format(\"delta\").saveAsTable(f\"{db_name}.{table_name}\")\n",
					"    print(\"Table created\")"
				],
				"execution_count": 8
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"storage_account: str = mssparkutils.notebook.run('/utils/py_utils_get_storage_account')\n",
					"path_to_orchestration_file: str = \"abfss://odw-config@\"+storage_account+\"orchestration/orchestration.json\"\n",
					"entity_name: str = 'entraid'\n",
					"entity_id: int = 128\n",
					"table_name_replace: str = entity_name.replace(\"-\", \"_\")"
				],
				"execution_count": 9
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"recreate: bool = False\n",
					"\n",
					"if recreate:\n",
					"    spark.sql(f\"DROP TABLE IF EXISTS odw_standardised_db.{entity_name}\")\n",
					"    spark.sql(f\"DROP TABLE IF EXISTS odw_harmonised_db.{entity_name}\")"
				],
				"execution_count": 10
			},
			{
				"cell_type": "code",
				"source": [
					"#create folder in odw-raw/entraid for the RAW data\n",
					"entraid_raw_container = 'abfss://odw-raw@' + storage_account + \"entraid\"\n",
					"print('entraid_raw_container '+entraid_raw_container)\n",
					"files = mssparkutils.fs.mkdirs(entraid_raw_container)"
				],
				"execution_count": 11
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"#create standardised, based on create_table_from_schema \n",
					"db_name: str = 'odw_standardised_db'\n",
					"if db_name == \"odw_curated_db\":\n",
					"    table_name: str = table_name_replace\n",
					"else:\n",
					"    table_name: str = f\"{table_name_replace}\"\n",
					"\n",
					"full_table_name: str = f\"{db_name}.{table_name}\"\n",
					"\n",
					"spark_dataframe = create_spark_dataframe()\n",
					"spark_dataframe.show()\n",
					"\n",
					"if test_table_exists(db_name, table_name):\n",
					"    print('Table ' +full_table_name +\" already exists\")    \n",
					"else:\n",
					"    print('Creating ' +full_table_name)    \n",
					"    create_spark_table(db_name, table_name, spark_dataframe)\n",
					"    if test_table_exists(db_name, table_name):\n",
					"        print('Table ' +full_table_name +\" created\") \n",
					""
				],
				"execution_count": 12
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"#create harmonised\n",
					"db_name: str = 'odw_harmonised_db'\n",
					"if db_name == \"odw_curated_db\":\n",
					"    table_name: str = table_name_replace\n",
					"else:\n",
					"    table_name: str = f\"{table_name_replace}\"\n",
					"\n",
					"full_table_name: str = f\"{db_name}.{table_name}\"\n",
					"\n",
					"spark_dataframe = create_spark_dataframe()\n",
					"spark_dataframe.show()\n",
					"\n",
					"if test_table_exists(db_name, table_name):\n",
					"    print('Table ' +full_table_name +\" already exists\")    \n",
					"else:\n",
					"    print('Creating ' +full_table_name)    \n",
					"    create_spark_table(db_name, table_name, spark_dataframe)\n",
					"    if test_table_exists(db_name, table_name):\n",
					"        print('Table ' +full_table_name +\" created\") \n",
					""
				],
				"execution_count": 13
			}
		]
	}
}