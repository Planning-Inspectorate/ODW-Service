{
	"name": "py_utils_common_schema_creation",
	"properties": {
		"description": "This is a python script which automates the creation of tables, for data which was moved from odw_harmonised to odw_config ",
		"folder": {
			"name": "utils/main"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw34",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "1282848f-a148-49b2-8702-e8fb8d055400"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw34",
				"name": "pinssynspodw34",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw34",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#### The purpose of this pyspark notebook is to reads all json format schema files from a given folder and create empty schemas into the given database names like odw_standardised_db,odw_standardised_db etc. in the lakehouse\r\n",
					"\r\n",
					"**Author** &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; **Created Date** &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; **Description**  \r\n",
					"Rohit Shukla &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;03-Mar-2025 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; The functionality of this notebook is generic to create empty schemas in the given database name.\r\n",
					"\r\n",
					"**Spark Cluster Configuration** -> Apache Spark Version- 3.4, Python Version \t\t- 3.10, Delta Lake Version \t- 2.4\r\n",
					"\r\n",
					"##### The input parameters are:\r\n",
					"###### param_json_folder_name => This is a mandatory parameter which refers to a folder path of json schema files like 'Timesheets', 'SapHr'\r\n",
					"###### param_database_name  => This is a mandatory parameter refers to a dsetincation database name where empty schemas need to be created.\r\n",
					""
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"tags": [
						"parameters"
					]
				},
				"source": [
					"# Input parameters\r\n",
					"param_json_folder_name = \"harmonised_table_definitions/saphr\"\r\n",
					"param_database_name = \"odw_harmonised_db\" \r\n",
					"#param_deltatable_folder_name = \"odw-harmonised\" \r\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"#import all libraries and initialise Spark Session\r\n",
					"from odw.core.util.logging_util import LoggingUtil\n",
					"import json\r\n",
					"import calendar\r\n",
					"from datetime import datetime, timedelta, date\r\n",
					"import requests\r\n",
					"import pyspark.sql.functions as F \r\n",
					"import os\r\n",
					"import re\r\n",
					"from itertools import chain\r\n",
					"from collections.abc import Mapping\r\n",
					"from operator import add\r\n",
					"from notebookutils import mssparkutils\r\n",
					"from pyspark.sql.functions import lit, current_timestamp, to_date ,expr, md5, col, date_format\r\n",
					"from pprint import pprint as pp\r\n",
					"from pyspark.sql.types import *\r\n",
					"from pyspark.sql import SparkSession\r\n",
					"spark = SparkSession.builder.getOrCreate()\r\n",
					"from delta.tables import DeltaTable\r\n",
					"#ignore FutureWarning messages \r\n",
					"import warnings\r\n",
					"warnings.filterwarnings(\"ignore\", message=\"iteritems is deprecated\")"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Get Storage account"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"#Get Storage account name\r\n",
					"storage_account=mssparkutils.notebook.run('/utils/py_utils_get_storage_account')\r\n",
					"print(storage_account)"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Enable message logging"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Define all Folder paths used in the notebook"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"# Define all Folder paths used in the notebook\r\n",
					"\r\n",
					"schema_folder_name = param_json_folder_name.rsplit(\"/\",1)[-1]\r\n",
					"\r\n",
					"deltatable_folder_name = re.sub(r\"_db\", \"\", param_database_name).replace(\"_\",\"-\")\r\n",
					"\r\n",
					"odw_json_folder_path = f\"abfss://odw-config@{storage_account}{param_json_folder_name}/\"\r\n",
					"delta_table_base_path = f\"abfss://{deltatable_folder_name}@{storage_account}{schema_folder_name}\"\r\n",
					"#database_name = \"odw_standardised_db\"\r\n",
					"\r\n",
					"#print(odw_json_folder_path)\r\n",
					"#print(delta_table_base_path)"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Define Function to read JSON schema and create Delta tables if they don't exist"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"\r\n",
					"# Function to read JSON schema and create Delta tables if they don't exist\r\n",
					"def create_delta_table_from_json(json_file_path, table_name):\r\n",
					"    try:\r\n",
					"        # Read the JSON schema file\r\n",
					"        json_content = mssparkutils.fs.head(json_file_path)\r\n",
					"        schema_dict = json.loads(json_content)\r\n",
					"        \r\n",
					"        # Define schema dynamically\r\n",
					"        schema_fields = []\r\n",
					"        \r\n",
					"        for field in schema_dict[\"fields\"]:\r\n",
					"            field_type = (\r\n",
					"                StringType() if field[\"type\"].lower() == \"string\" else\r\n",
					"                IntegerType() if field[\"type\"].lower() == \"int\" else\r\n",
					"                DoubleType() if field[\"type\"].lower() == \"float\" else\r\n",
					"                DoubleType() if field[\"type\"].lower() == \"double\" else\r\n",
					"                StringType() if field[\"type\"].lower() == \"boolean\" else\r\n",
					"                DateType() if field[\"type\"].lower() == \"date\" else\r\n",
					"                TimestampType() if field[\"type\"].lower() == \"timestamp\" else\r\n",
					"                StringType()\r\n",
					"            )\r\n",
					"            is_nullable = field.get(\"nullable\", True)  \r\n",
					"            schema_fields.append(StructField(field[\"name\"], field_type, is_nullable))\r\n",
					"        \r\n",
					"        schema = StructType(schema_fields)\r\n",
					"\r\n",
					"        # Create empty DataFrame\r\n",
					"        df = spark.createDataFrame([], schema)\r\n",
					"\r\n",
					"        \r\n",
					"        # Create Delta table if not exists\r\n",
					"        table_path = f\"{delta_table_base_path}/{table_name}\"\r\n",
					"        df.write.format(\"delta\").mode(\"ignore\").save(table_path)\r\n",
					"        spark.sql(f\"CREATE TABLE IF NOT EXISTS {param_database_name}.{table_name} USING DELTA LOCATION '{table_path}'\")\r\n",
					"        \r\n",
					"        LoggingUtil().log_info(f\"Table {table_name} created successfully.\")\r\n",
					"    except Exception as e:\r\n",
					"        logError(f\"Error creating table {table_name}: {str(e)}\")\r\n",
					"        raise\r\n",
					"\r\n",
					"# Get list of JSON files\r\n",
					"try:\r\n",
					"    json_files = [f.name for f in mssparkutils.fs.ls(odw_json_folder_path) if f.name.endswith(\".json\")]\r\n",
					"    if not json_files:\r\n",
					"        raise FileNotFoundError(\"No JSON schema files found in the specified folder.\")\r\n",
					"except Exception as e:\r\n",
					"    logError(f\"Error accessing folder: {odw_json_folder_path}\\nException: {e}\")\r\n",
					"    raise\r\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Process all JSON schema and create Delta tables if they don't exist"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"# Process each JSON file\r\n",
					"for json_file in json_files:\r\n",
					"    json_file_path = os.path.join(odw_json_folder_path, json_file)\r\n",
					"    table_name = json_file.replace(\".json\", \"\").lower()\r\n",
					"    create_delta_table_from_json(json_file_path, table_name)\r\n",
					"\r\n",
					"LoggingUtil().log_info(\"All tables processed successfully.\")"
				],
				"execution_count": null
			}
		]
	}
}