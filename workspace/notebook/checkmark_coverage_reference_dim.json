{
	"name": "checkmark_coverage_reference_dim",
	"properties": {
		"folder": {
			"name": "odw-harmonised/Checkmark"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodwpr",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "b833a6a1-cc29-4ad2-adba-198d65bbcdc0"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/a82fd28d-5989-4e06-a0bb-1a5d859f9e0c/resourceGroups/pins-rg-data-odw-prod-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-prod-uks/bigDataPools/pinssynspodwpr",
				"name": "pinssynspodwpr",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-prod-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodwpr",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"\r\n",
					"CREATE OR REPLACE TEMPORARY VIEW coverage_reference_grouped\r\n",
					"\r\n",
					"    AS\r\n",
					"\r\n",
					"SELECT \r\n",
					"    id,\r\n",
					"    value,\r\n",
					"    expected_from\r\n",
					"\r\n",
					"FROM odw_standardised_db.checkmark_coverage_reference\r\n",
					"WHERE id IS NOT NULL\r\n",
					"GROUP BY id,value,expected_from"
				],
				"execution_count": 7
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Check for new, updated or deleted data\n",
					"- This script checks for new, updated or deleted data by checking the source data (checkmark) against the target (odw_harmonised_db.comment_fact)\n",
					"- **New Data:** where a CoverageMarkID in the source does not exist as an id in the target. NewData flag is set to 'Y'\n",
					"- **Updated data:** Comparison occurs on CoverageMarkID in source and id in target where the row hash is different i.e. there is a change in one of the columns. NewData flag is set to 'Y'\n",
					"- **Deleted data:** where an id in the target exists but the same CoverageMarkID doesn't exist in the source. DeletedData flag is set to 'Y'\n",
					"\n",
					"## View comment_type_reference_dim_new is created"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"-- Build comment_type_reference_dim table\r\n",
					"-- Gets modified or deleted from source rows\r\n",
					"\r\n",
					"CREATE OR REPLACE TEMPORARY VIEW coverage_reference_dim_new\r\n",
					"\r\n",
					"    AS\r\n",
					"\r\n",
					"-- gets data that matches of SourceID and flags that it is modified based on a row (md5) hash. Flags as \"NewData\"\r\n",
					"-- gets data that is in the target but not in source. Flags as \"DeletedData\"\r\n",
					"\r\n",
					"SELECT\r\n",
					"    CASE\r\n",
					"        WHEN T1.id IS NULL\r\n",
					"        THEN T3.CoverageReferenceID\r\n",
					"        ELSE NULL\r\n",
					"    END                             AS CoverageReferenceID, -- surrogate key\r\n",
					"    T1.id                           AS CoverageMarkID,\r\n",
					"    T1.value                        AS Value,\r\n",
					"    T2.SourceSystemID               AS SourceSystemID,\r\n",
					"    to_timestamp(T1.expected_from)  AS IngestionDate,\r\n",
					"    NULL                            AS ValidTo,\r\n",
					"    md5(\r\n",
					"        concat( \r\n",
					"            IFNULL(T1.id,'.'), \r\n",
					"            IFNULL(T1.value,'.')\r\n",
					"        ))                          AS RowID,\r\n",
					"    'Y'                             AS IsActive,\r\n",
					"    T3.IsActive                     AS HistoricIsActive\r\n",
					"\r\n",
					"FROM coverage_reference_grouped T1\r\n",
					"LEFT JOIN odw_harmonised_db.main_sourcesystem_fact T2 \r\n",
					"    ON \"Checkmark\" = T2.Description\r\n",
					"FULL JOIN odw_harmonised_db.checkmark_coverage_reference_dim T3 \r\n",
					"    ON T1.id = T3.CoverageMarkID \r\n",
					"        AND T3.IsActive = 'Y'\r\n",
					"\r\n",
					"WHERE\r\n",
					"    -- flags new data        \r\n",
					"        (CASE\r\n",
					"            WHEN T1.ID = T3.CoverageMarkID \r\n",
					"                AND md5(\r\n",
					"                    concat( \r\n",
					"                        IFNULL(T1.id,'.'), \r\n",
					"                        IFNULL(T1.value,'.')\r\n",
					"                        )\r\n",
					"                    ) <> T3.RowID\r\n",
					"            THEN 'Y'\r\n",
					"            WHEN T3.CoverageMarkID IS NULL\r\n",
					"            THEN 'Y'\r\n",
					"            ELSE 'N'\r\n",
					"        END  = 'Y' )\r\n",
					"    AND T1.id IS NOT NULL\r\n",
					"    AND T1.expected_from = (SELECT MAX(expected_from) FROM coverage_reference_grouped)\r\n",
					";"
				],
				"execution_count": 8
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Dataset is created that contains changed data and corresponding target data\n",
					"- This script combines data that has been updated, Deleted or is new, with corresponding target data\n",
					"- View **table_dim_new** is unioned to the target data filter to only those rows where changes have been detected\n",
					"## View table_dim_changed_rows is created"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"-- Create new and updated dataset\r\n",
					"\r\n",
					"CREATE OR REPLACE TEMPORARY VIEW coverage_reference_dim_changed_rows\r\n",
					"\r\n",
					"    AS\r\n",
					"\r\n",
					"-- gets updated, deleted and new rows \r\n",
					"\r\n",
					"SELECT\r\n",
					"    CoverageReferenceID,\r\n",
					"    CoverageMarkID,\r\n",
					"    Value, \r\n",
					"    SourceSystemID,\r\n",
					"    IngestionDate,\r\n",
					"    ValidTo,\r\n",
					"    RowID,\r\n",
					"    IsActive\r\n",
					"FROM coverage_reference_dim_new WHERE HistoricIsActive = 'Y' or HistoricIsActive IS NULL\r\n",
					"\r\n",
					"    UNION ALL\r\n",
					"\r\n",
					"-- gets original versions of updated rows so we can update EndDate and set IsActive flag to 'N'\r\n",
					"\r\n",
					"SELECT\r\n",
					"    CoverageReferenceID,\r\n",
					"    CoverageMarkID,\r\n",
					"    Value,\r\n",
					"    SourceSystemID,\r\n",
					"    IngestionDate,\r\n",
					"    ValidTo,\r\n",
					"    RowID,\r\n",
					"    IsActive\r\n",
					"FROM odw_harmonised_db.checkmark_coverage_reference_dim\r\n",
					"WHERE Value IN (SELECT Value FROM coverage_reference_dim_new WHERE CoverageMarkID IS NULL)\r\n",
					"AND IsActive = 'Y'; \r\n",
					""
				],
				"execution_count": 9
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"\n",
					"CREATE OR REPLACE TEMPORARY VIEW Loading_month\n",
					"\n",
					"    AS\n",
					"\n",
					"SELECT DISTINCT\n",
					"    IngestionDate                               AS IngestionDate,\n",
					"    to_timestamp(date_sub(IngestionDate,1))     AS ClosingDate,\n",
					"    'Y'                                         AS IsActive\n",
					"\n",
					"FROM coverage_reference_dim_new;\n",
					"\n",
					"CREATE OR REPLACE TEMPORARY VIEW coverage_reference_dim_changed_rows_final\n",
					"\n",
					"    AS\n",
					"\n",
					"SELECT \n",
					"    CoverageReferenceID,\n",
					"    CoverageMarkID,\n",
					"    Value, \n",
					"    T1.SourceSystemID,\n",
					"    T1.IngestionDate,\n",
					"    T1.ValidTo,\n",
					"    T1.RowID,\n",
					"    T1.IsActive,\n",
					"    T2.ClosingDate\n",
					"FROM coverage_reference_dim_changed_rows T1\n",
					"FULL JOIN Loading_month T2 ON T1.IsActive = T2.IsActive\n",
					";"
				],
				"execution_count": 10
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# View table_dim_changed_rows is used in a merge (Upsert) statement into the target table\n",
					"- **WHEN MATCHED** ON the Business Key (i.e. table from Personal Characteristics), EndDate is set to today -1 day and the IsActive flag is set to 'N'\n",
					"- **WHEN NOT MATCHED** ON the business key, insert rows\n",
					"## Table odw_harmonised.table_dim is updated"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"\r\n",
					"-- merge into fact table\r\n",
					"\r\n",
					"MERGE INTO odw_harmonised_db.checkmark_coverage_reference_dim AS Target\r\n",
					"USING coverage_reference_dim_changed_rows_final AS Source\r\n",
					"\r\n",
					"ON Source.CoverageReferenceID = Target.CoverageReferenceID\r\n",
					"\r\n",
					"-- For Updates existing rows\r\n",
					"WHEN MATCHED\r\n",
					"    THEN \r\n",
					"    UPDATE SET\r\n",
					"    Target.ValidTo = to_timestamp(ClosingDate),\r\n",
					"    Target.IsActive = 'N'\r\n",
					"\r\n",
					"-- Insert completely new rows\r\n",
					"WHEN NOT MATCHED \r\n",
					"    THEN INSERT (CoverageReferenceID,\r\n",
					"        CoverageMarkID,\r\n",
					"        Value, \r\n",
					"        SourceSystemID,\r\n",
					"        IngestionDate,\r\n",
					"        ValidTo,\r\n",
					"        RowID,\r\n",
					"        IsActive)  \r\n",
					"        VALUES (Source.CoverageReferenceID,\r\n",
					"        Source.CoverageMarkID,\r\n",
					"        Source.Value,\r\n",
					"        Source.SourceSystemID, \r\n",
					"        Source.IngestionDate, \r\n",
					"        Source.ValidTo, \r\n",
					"        Source.RowID, \r\n",
					"        Source.IsActive) \r\n",
					"; "
				],
				"execution_count": 11
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Fix the IDs\n",
					"- No auto-increment feature is available in delta tables, therefore we need to create new IDs for the inserted rows\n",
					"- This is done by select the target data and using INSERT OVERWRITE to re-insert the data is a new Row Number\n",
					"## Table odw_harmonised.table_dim is updated"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"-- Insert new tableID\r\n",
					"\r\n",
					"INSERT OVERWRITE odw_harmonised_db.checkmark_coverage_reference_dim\r\n",
					"\r\n",
					"SELECT \r\n",
					"    ROW_NUMBER() OVER (ORDER BY CoverageReferenceID NULLS LAST) AS CoverageReferenceID,\r\n",
					"    CoverageMarkID,\r\n",
					"    Value, \r\n",
					"    SourceSystemID,\r\n",
					"    IngestionDate,\r\n",
					"    ValidTo,\r\n",
					"    RowID,\r\n",
					"    IsActive\r\n",
					"FROM odw_harmonised_db.checkmark_coverage_reference_dim;\r\n",
					""
				],
				"execution_count": 12
			}
		]
	}
}