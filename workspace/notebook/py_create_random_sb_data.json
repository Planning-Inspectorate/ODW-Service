{
	"name": "py_create_random_sb_data",
	"properties": {
		"folder": {
			"name": "utils"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "37a961b6-f8f6-4aab-ae76-6f18ed356283"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": true,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw",
				"name": "pinssynspodw",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"import pprint\n",
					"import json\n",
					"from pyspark.sql.types import *\n",
					"import random\n",
					"from datetime import datetime, timedelta\n",
					"from faker import Faker\n",
					"from pyspark.sql.functions import lit, monotonically_increasing_id, col, when\n",
					"from pyspark.sql import Row, DataFrame"
				],
				"execution_count": 176
			},
			{
				"cell_type": "code",
				"metadata": {
					"tags": [
						"parameters"
					]
				},
				"source": [
					"entity_name = \"s51-advice\"\n",
					"primary_key = \"adviceId\"\n",
					"num_records = 100"
				],
				"execution_count": 177
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Functions to generate a DataFrame with random values"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"faker = Faker()\n",
					"\n",
					"def generate_unique_uuids(existing_ids, count):\n",
					"    new_uuids = []\n",
					"    while len(new_uuids) < count:\n",
					"        new_id = faker.unique.uuid4()\n",
					"        if new_id not in existing_ids:\n",
					"            new_uuids.append(new_id)\n",
					"            existing_ids.add(new_id)\n",
					"    return new_uuids\n",
					"    \n",
					"def generate_random_value(field_name: str, field_type, json_field):\n",
					"    \"\"\"Generate a random value based on the field's data type.\"\"\"\n",
					"    if field_name == \"caseReference\":\n",
					"        return f\"TR{random.randint(1, 10**6)}\"\n",
					"    if isinstance(field_type, StringType):\n",
					"        if 'enum' in json_field:\n",
					"            return random.choice(json_field['enum'])\n",
					"        return faker.word()\n",
					"    elif isinstance(field_type, LongType):\n",
					"        return random.randint(1, 10**9)\n",
					"    elif isinstance(field_type, IntegerType):\n",
					"        return random.randint(1, 10**5)\n",
					"    elif isinstance(field_type, DoubleType):\n",
					"        return random.uniform(1.0, 1000.0)\n",
					"    elif isinstance(field_type, FloatType):\n",
					"        return random.uniform(1.0, 100.0)\n",
					"    elif isinstance(field_type, TimestampType):\n",
					"        return datetime.now() - timedelta(seconds=random.randint(0, 86400 * 365))\n",
					"    elif isinstance(field_type, DateType):\n",
					"        return datetime.now().date() - timedelta(days=random.randint(0, 365))\n",
					"    elif isinstance(field_type, BooleanType):\n",
					"        return random.choice([True, False])\n",
					"    elif isinstance(field_type, ArrayType):\n",
					"        num_array_elements = random.randint(0, 10)\n",
					"        if isinstance(field_type.elementType, StringType):\n",
					"            return [faker.word() for _ in range(num_array_elements)]\n",
					"        else:\n",
					"            return []\n",
					"    else:\n",
					"        return None\n",
					"\n",
					"def generate_random_row(spark_schema, json_schema):\n",
					"    \"\"\"Generate a random row of data based on the schema.\"\"\"\n",
					"    return {field.name: generate_random_value(field.name, field.dataType, json_schema[field.name]) for field in schema.fields}\n",
					"\n",
					"def generate_random_dataframe(spark_schema: StructType, json_schema: dict, num_records: int):\n",
					"    \"\"\"Generate a PySpark DataFrame with random data based on the schema.\"\"\"\n",
					"    # Generate random data\n",
					"    data = [generate_random_row(spark_schema, json_schema) for _ in range(num_records)]\n",
					"\n",
					"    for row in data:\n",
					"        row['EventType'] = 'Create'\n",
					"        row['sourceSystem'] = 'ODT'\n",
					"        row['message_id'] = faker.unique.uuid4()\n",
					"\n",
					"    # Create DataFrame\n",
					"    return spark.createDataFrame(data)"
				],
				"execution_count": 178
			},
			{
				"cell_type": "code",
				"source": [
					"spark_schema = StructType.fromJson(json.loads(mssparkutils.notebook.run(path=\"service-bus/py_create_spark_schema\", \n",
					"                            arguments={\"entity_name\": entity_name, \"db_name\": 'odw_curated_db'})))\n",
					"\n",
					"json_schema = mssparkutils.notebook.run(path=\"service-bus/py_create_spark_schema\", \n",
					"                            arguments={\"entity_name\": entity_name, \"db_name\": 'odw_curated_db', 'return_json_schema': True})\n",
					"json_schema = json.loads(json_schema.replace(\"'\", '\"').replace(\"None\", \"null\").replace(\"True\", \"true\").replace(\"False\", \"false\"))\n",
					"json_schema = json_schema['properties']"
				],
				"execution_count": 179
			},
			{
				"cell_type": "code",
				"source": [
					"df = generate_random_dataframe(spark_schema, json_schema, num_records)\n",
					"# display(df)"
				],
				"execution_count": 180
			},
			{
				"cell_type": "code",
				"source": [
					"formatted_data = [\n",
					"    {\n",
					"        'Body': str({k: v for k, v in row.asDict().items() if k != 'EventType'}),\n",
					"        'UserProperties': {'type': row['EventType']}\n",
					"    }\n",
					"    for row in df.collect()\n",
					"]"
				],
				"execution_count": 181
			},
			{
				"cell_type": "code",
				"source": [
					"mssparkutils.notebook.exit(formatted_data)"
				],
				"execution_count": 182
			}
		]
	}
}