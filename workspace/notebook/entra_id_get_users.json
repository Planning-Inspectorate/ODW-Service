{
	"name": "entra_id_get_users",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "34d73467-3488-4c3c-9948-c6850ba3bfd4"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw",
				"name": "pinssynspodw",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from collections.abc import Mapping\n",
					"from notebookutils import mssparkutils\n",
					"from pprint import pprint as pp\n",
					"import json\n",
					"import pyspark.sql.functions as F \n",
					"import pandas as pd\n",
					"from pyspark.sql.types import *\n",
					"from datetime import date\n",
					"from pyspark.sql.functions import *\n",
					"from pyspark.sql.window import Window\n",
					"import pprint\n",
					"from pyspark.sql import DataFrame\n",
					"\n",
					"from pyspark.sql import SparkSession\n",
					"spark = SparkSession.builder.getOrCreate()\n",
					"\n",
					"#ignore FutureWarning messages \n",
					"import warnings\n",
					"warnings.filterwarnings(\"ignore\", message=\"iteritems is deprecated\")"
				],
				"execution_count": 35
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"Defining standardised table name, source file name and path"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"table_name = f\"odw_standardised_db.entra_users\"\n",
					"spark.sql(f\"SET TABLE_NAME = {table_name}\")\n",
					"\n",
					"today = date.today().strftime(\"%Y-%m-%d\")\n",
					"\n",
					"storage_acc_name = spark.sparkContext.environment.get('dataLakeAccountName', 'get')\n",
					"file_name = f\"{today}.json\"\n",
					"file_path = f\"abfss://odw-raw@{storage_acc_name}.dfs.core.windows.net/entraid/{file_name}\""
				],
				"execution_count": 36
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"Reading source file and converting it into a dataframe"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def get_entra_id_data(file_path: str) -> DataFrame:\n",
					"    \"\"\"\n",
					"    Reads EntraID json files into a DataFrame\n",
					"\n",
					"    Returns:\n",
					"        Spark DataFrame\n",
					"    \"\"\"\n",
					"    json_file_df = spark.read.option(\"multiline\", \"true\").json(file_path, )\n",
					"    print(json_file_df.count())\n",
					"    #json_file_df.printSchema()\n",
					"    for row in json_file_df.select('value').collect():\n",
					"        display(row['value'])\n",
					"    \n",
					"\n",
					"    #file_rdd = spark.read.text(file_path, wholetext=True).rdd\n",
					"    #data = file_rdd.take(1)[0]['value']\n",
					"    #if data.startswith('\\ufeff'):\n",
					"    #    data = data[1:]\n",
					"    #json_data = json.loads(data)\n",
					"    #results = json_data[0][\"value\"]\n",
					"    #pddf=pd.DataFrame(results)\n",
					"    #pddf=pddf.applymap(str)\n",
					"    #pddf = pddf.dropna(axis='columns', how='all') # Drops columns with all NA values\n",
					"    #df = spark.createDataFrame(pddf)\n",
					"    #partition = Window.partitionBy(\"SourceSystemID\").orderBy('id')\n",
					"    #df = df.withColumn(\"SourceSystemID\",lit(6)).withColumn('IngestionDate', F.current_timestamp()).withColumn('ValidTo', lit(\"NULL\")).withColumn('IsActive', lit(\"Y\")).withColumn('RowID', row_number().over(partition))\n",
					"    #display(df)\n",
					"    #return df"
				],
				"execution_count": 74
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"df = get_entra_id_data(file_path)"
				],
				"execution_count": 75
			}
		]
	}
}