{
	"name": "py_mount_storage",
	"properties": {
		"folder": {
			"name": "utils"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "1ea245f4-4e4f-4e93-abd4-90cbf498864f"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": true,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "python"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw",
				"name": "pinssynspodw",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"tags": [
						"parameters"
					]
				},
				"source": [
					"mount_point='/temp_raw'"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import subprocess\n",
					"subprocess.run([\"pip\", \"install\", \"--quiet\", \"tenacity\"])\n",
					"from tenacity import retry, wait_fixed, RetryCallState, wait_exponential, stop_after_delay, stop_after_attempt, retry_if_exception"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def before_sleep(retry_state: RetryCallState):\n",
					"    print(f\"Retrying after {retry_state.next_action.sleep} seconds...\")"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"@retry(\n",
					"    wait=wait_fixed(3),\n",
					"    stop=stop_after_attempt(5),\n",
					"    reraise=True\n",
					")\n",
					"def unmount_storage():\n",
					"    mssparkutils.fs.unmount(mount_point) "
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"@retry(\n",
					"    wait=wait_exponential(multiplier=2, min=5, max=20),\n",
					"    stop=stop_after_delay(60) | stop_after_attempt(5),\n",
					"    before_sleep=before_sleep,\n",
					"    # retry=retry_if_exception(lambda e: \"MountOperationFailedException\" not in str(e)),  # Don't retry on Path not found exception\n",
					"    reraise=True\n",
					")\n",
					"def mount_storage(path: str):\n",
					"    print(f\"Attempting to mount storage at path: {path}\")\n",
					"    unmount_storage() \n",
					"\n",
					"    mssparkutils.fs.mount( \n",
					"        path, \n",
					"        mount_point, \n",
					"        {\"linkedService\":\"ls_storage\"} \n",
					"    )   "
				],
				"execution_count": null
			}
		]
	}
}