{
	"name": "py_mount_storage",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "5e0f3cc1-2542-433b-9ecf-55a34c0eb9a9"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "python"
			},
			"language_info": {
				"name": "python"
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"folder_path=''"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"storage_account=mssparkutils.notebook.run('/utils/py_utils_get_storage_account')\n",
					"path = f\"abfss://odw-raw@pinsstodwdevuks9h80mb.dfs.core.windows.net/{folder_path}\""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# test with invalid folder path\n",
					"folder_path = \"Horizon/2024-09-25\"\n",
					"path = f\"abfss://odw-raw@pinsstodwdevuks9h80mb.dfs.core.windows.net/{folder_path}\"\n",
					"print(f\"Attempting to mount storage at path: {path}\")\n",
					"mssparkutils.fs.unmount(\"/temp_raw\") \n",
					"\n",
					"def before_sleep(retry_state: RetryCallState):\n",
					"    print(f\"Retrying after {retry_state.next_action.sleep} seconds...\")\n",
					"\n",
					"@retry(wait=wait_exponential(multiplier=1, min=5, max=20), stop=stop_after_delay(30) | stop_after_attempt(5), reraise=True, before_sleep=before_sleep)\n",
					"def mount_storage():\n",
					"    mssparkutils.fs.mount( \n",
					"    path, \n",
					"    \"/temp_raw\", \n",
					"    {\"linkedService\":\"ls_storage\"} \n",
					"    )   \n",
					"\n",
					"try:\n",
					"    mount_storage()\n",
					"    print(\"Mounting storage succeeded\")\n",
					"except Exception as e:\n",
					"    print(\"Mounting storage failed\")\n",
					"    print(e)"
				],
				"execution_count": null
			}
		]
	}
}