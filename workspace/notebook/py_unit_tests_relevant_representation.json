{
	"name": "py_unit_tests_relevant_representation",
	"properties": {
		"folder": {
			"name": "utils/unit-tests"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "978abde2-83f7-4a55-9cf8-a481df781e0e"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw",
				"name": "pinssynspodw",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"import json\n",
					"from pyspark.sql.types import *\n",
					"from pyspark.sql import DataFrame\n",
					"import pprint"
				],
				"execution_count": 3
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"entity_name: str = 'nsip-representation'\n",
					"std_db_name: str = 'odw_standardised_db'\n",
					"hrm_db_name: str = 'odw_harmonised_db'\n",
					"curated_db_name: str = 'odw_curated_db'\n",
					"std_table_name: str = 'sb_nsip_representation'\n",
					"hrm_table_name: str = 'sb_nsip_representation'\n",
					"hrm_table_final: str = 'nsip_representation'\n",
					"curated_table_name: str = 'nsip_representation'"
				],
				"execution_count": 4
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#This needs to be updated in case there is an addition of columns. Or in the future can be extracted automatically 01/08/2024\n",
					"data_model_columns = [\"representationId\",\n",
					"\t\t\"referenceId\",\n",
					"\t\t\"examinationLibraryRef\",\n",
					"\t\t\"caseRef\",\n",
					"\t\t\"caseId\",\n",
					"\t\t\"status\",\n",
					"\t\t\"originalRepresentation\",\n",
					"\t\t\"redacted\",\n",
					"\t\t\"redactedRepresentation\",\n",
					"\t\t\"redactedBy\",\n",
					"\t\t\"redactedNotes\",\n",
					"\t\t\"representationFrom\",\n",
					"\t\t\"representedId\",\n",
					"\t\t\"representativeId\",\n",
					"\t\t\"registerFor\",\n",
					"\t\t\"representationType\",\n",
					"\t\t\"dateReceived\",\n",
					"\t\t\"attachmentIds\"\n",
					"\t]"
				],
				"execution_count": 5
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"storage_account: str = mssparkutils.notebook.run('/utils/py_utils_get_storage_account')\n",
					"path_to_orchestration_file: str = \"abfss://odw-config@\"+storage_account+\"orchestration/orchestration.json\""
				],
				"execution_count": 6
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def get_incremental_key(entity_name: str, storage_account: str, path_to_orchestration_file: str) -> str:\n",
					"    # getting the incremental key from the odw-config/orchestration\n",
					"    df: DataFrame = spark.read.option(\"multiline\",\"true\").json(path_to_orchestration_file)\n",
					"    definitions: list = json.loads(df.toJSON().first())['definitions']\n",
					"    definition: dict = next((d for d in definitions if entity_name == d['Source_Filename_Start']), None)\n",
					"    return definition['Harmonised_Incremental_Key'] if definition and 'Harmonised_Incremental_Key' in definition else None"
				],
				"execution_count": 7
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def create_spark_schema(db_name: str, entity_name: str) -> StructType:\n",
					"    incremental_key: str = get_incremental_key(entity_name, storage_account, path_to_orchestration_file) if db_name == 'odw_harmonised_db' else None\n",
					"    schema = mssparkutils.notebook.run(\"/py_create_spark_schema\", 30, {\"db_name\": db_name, \"entity_name\": entity_name, \"incremental_key\": incremental_key})\n",
					"    spark_schema = StructType.fromJson(json.loads(schema))\n",
					"    return spark_schema"
				],
				"execution_count": 8
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def create_spark_dataframe() -> DataFrame:\n",
					"    spark_dataframe: DataFrame = spark.createDataFrame([], schema=create_spark_schema(db_name, entity_name))\n",
					"    return spark_dataframe"
				],
				"execution_count": 9
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"sb_std_schema = create_spark_schema(std_db_name, entity_name)\n",
					"sb_std_table_schema = spark.table(f\"{std_db_name}.{std_table_name}\").schema\n",
					"sb_hrm_schema = create_spark_schema(hrm_db_name, entity_name)\n",
					"sb_hrm_table_schema = spark.table(f\"{hrm_db_name}.{hrm_table_name}\").schema"
				],
				"execution_count": 10
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def extract_schema_structure(schema: StructType) -> dict:\n",
					"    def extract_field(field):\n",
					"        if isinstance(field.dataType, StructType):\n",
					"            return {field.name: {subfield.name: str(subfield.dataType) for subfield in field.dataType.fields}}\n",
					"        elif isinstance(field.dataType, ArrayType):\n",
					"            element_type = field.dataType.elementType\n",
					"            if isinstance(element_type, StructType):\n",
					"                return {field.name: {subfield.name: str(subfield.dataType) for subfield in element_type.fields}}\n",
					"            else:\n",
					"                return {field.name: f'array<{str(element_type)}>'}\n",
					"        else:\n",
					"            return {field.name: str(field.dataType)}\n",
					"    \n",
					"    result = {}\n",
					"    for field in schema.fields:\n",
					"        result.update(extract_field(field))\n",
					"    return result"
				],
				"execution_count": 11
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def test_compare_schemas(schema1: StructType, schema2: StructType) -> bool:\n",
					"    structure1: dict = extract_schema_structure(schema1)\n",
					"    structure2: dict = extract_schema_structure(schema2)\n",
					"    \n",
					"    differences: list[tuple] = []\n",
					"    \n",
					"    all_fields: set = set(structure1.keys()).union(set(structure2.keys()))\n",
					"    \n",
					"    for field in all_fields:\n",
					"        if field not in structure1:\n",
					"            differences.append((field, \"Field not in schema1\", structure2[field]))\n",
					"        elif field not in structure2:\n",
					"            differences.append((field, structure1[field], \"Field not in schema2\"))\n",
					"        else:\n",
					"            if structure1[field] != structure2[field]:\n",
					"                if isinstance(structure1[field], dict) and isinstance(structure2[field], dict):\n",
					"                    subfields: set = set(structure1[field].keys()).union(set(structure2[field].keys()))\n",
					"                    for subfield in subfields:\n",
					"                        if subfield not in structure1[field]:\n",
					"                            differences.append((f\"{field}.{subfield}\", \"Field not in schema1\", structure2[field][subfield]))\n",
					"                        elif subfield not in structure2[field]:\n",
					"                            differences.append((f\"{field}.{subfield}\", structure1[field][subfield], \"Field not in schema2\"))\n",
					"                        elif structure1[field][subfield] != structure2[field][subfield]:\n",
					"                            differences.append((f\"{field}.{subfield}\", structure1[field][subfield], structure2[field][subfield]))\n",
					"                else:\n",
					"                    differences.append((field, structure1[field], structure2[field]))\n",
					"    \n",
					"    if differences:\n",
					"        # Create a Spark DataFrame to display the differences\n",
					"        differences_df: DataFrame = spark.createDataFrame(differences, [\"Field\", \"Schema 1\", \"Schema 2\"])\n",
					"        display(differences_df)\n",
					"        return False\n",
					"    else:\n",
					"        return True"
				],
				"execution_count": 12
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def test_std_same_rows_hrm(std_table: str, hrm_table: str) -> tuple[int, int, bool]:\n",
					"    std_table_full: str = f\"{std_db_name}.{std_table}\"\n",
					"    hrm_table_full: str = f\"{hrm_db_name}.{hrm_table}\"\n",
					"\n",
					"    # filter standardised df with non-null message_type and exclude 'Delete' message_type since it doesn't add a new row in hrm\n",
					"    std_df: DataFrame = spark.table(std_table_full)\n",
					"    std_df = std_df.filter((std_df.message_type != 'Delete') & std_df.message_type.isNotNull() & std_df.message_id.isNotNull())\n",
					"    \n",
					"    std_count: int = std_df.count()\n",
					"    hrm_count: int = spark.table(hrm_table_full).count()\n",
					"\n",
					"    return (std_count, hrm_count, std_count == hrm_count)"
				],
				"execution_count": 13
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def test_curated_row_count(hrm_table_final: str, curated_table: str) -> tuple[int, int, bool]:\n",
					"    hrm_table_full: str = f\"{hrm_db_name}.{hrm_table_final}\"\n",
					"    curated_table_full: str = f\"{curated_db_name}.{curated_table_name}\"\n",
					"    \n",
					"    \n",
					"    selected_columns = [\n",
					"\t\t\"representationId\",\n",
					"\t\t\"referenceId\",\n",
					"\t\t\"examinationLibraryRef\",\n",
					"\t\t\"caseRef\",\n",
					"\t\t\"caseId\",\n",
					"\t\t\"status\",\n",
					"\t\t\"originalRepresentation\",\n",
					"\t\t\"redacted\",\n",
					"\t\t\"redactedRepresentation\",\n",
					"\t\t\"redactedBy\",\n",
					"\t\t\"redactedNotes\",\n",
					"\t\t\"representationFrom\",\n",
					"\t\t\"representedId\",\n",
					"\t\t\"representativeId\",\n",
					"\t\t\"registerFor\",\n",
					"\t\t\"representationType\",\n",
					"\t\t\"dateReceived\",\n",
					"\t\t\"attachmentIds\"\n",
					"\t]\n",
					"\n",
					"\n",
					"    hrm_df: DataFrame = spark.sql(f\"select * from {hrm_table_full} where IsActive = 'Y'\").select(selected_columns).drop_duplicates()\n",
					"    hrm_count: int = hrm_df.count()\n",
					"\n",
					"    curated_count: int = spark.table(curated_table_full).count()\n",
					"    \n",
					"    return (hrm_count, curated_count, hrm_count == curated_count)"
				],
				"execution_count": 14
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"**Compare schemas**"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"std_schema_correct: bool = test_compare_schemas(sb_std_schema, sb_std_table_schema)\n",
					"print(f\"Service bus standardised schema correct: {std_schema_correct}\\nTable: {std_db_name}.{std_table_name}\\nDifferences shown above (if any)\")\n",
					"hrm_schema_correct: bool = test_compare_schemas(sb_hrm_schema, sb_hrm_table_schema)\n",
					"print(f\"Service bus harmonised schema correct: {hrm_schema_correct}\\nTable: {hrm_db_name}.{hrm_table_name}\\nDifferences shown above (if any)\")"
				],
				"execution_count": 15
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"**Compare service bus standardised with harmonised\n",
					"Should be the same count**"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def differentiate_std_and_hrm(std_table_full, hrm_table_full):\n",
					"    # filter standardised df with non-null message_type and exclude 'Delete' message_type since it doesn't add a new row in hrm\n",
					"    std_df: DataFrame = spark.table(std_table_full)\n",
					"    std_df = std_df.filter((std_df.message_type != 'Delete') & (std_df.message_type.isNotNull()))\n",
					"\n",
					"    hrm_df  = spark.table(hrm_table_full)\n",
					"\n",
					"    # Find rows in the original table that are not in the new table\n",
					"    missing_rows_in_std = hrm_df.select(data_model_columns).subtract(std_df.select(data_model_columns))\n",
					"\n",
					"    # Show the missing rows\n",
					"    display(missing_rows_in_std)\n",
					"\n",
					"    missing_rows_in_hrm = std_df.select(data_model_columns).subtract(hrm_df.select(data_model_columns))\n",
					"    display(missing_rows_in_hrm)"
				],
				"execution_count": 16
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"standardised_count, harmonised_count, counts_match = test_std_same_rows_hrm(std_table_name, hrm_table_name)\n",
					"print(f\"Standardised Count: {standardised_count: ,}\\nHarmonised Count: {harmonised_count: ,}\\nCounts match: {counts_match}\")\n",
					"\n",
					"if standardised_count > harmonised_count:\n",
					"    print(f\"{standardised_count - harmonised_count} rows from Standardised are missing in Harmonised.\" )\n",
					"    differentiate_std_and_hrm(f\"{std_db_name}.{std_table_name}\", f\"{hrm_db_name}.{hrm_table_name}\")"
				],
				"execution_count": 17
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"**Compare final harmonised table (if combined with Horizon) with curated table\n",
					"Comparing where IsActive = Y in harmonised = curated row count***"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"harmonised_final_count, curated_count, counts_match = test_curated_row_count(hrm_table_final, curated_table_name)\n",
					"print(f\"Harmonised Final Count: {harmonised_final_count: ,}\\nCurated Count: {curated_count: ,}\\nCounts match: {counts_match}\")"
				],
				"execution_count": 18
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"**Check array fields are aggregated properly Go and find examples******"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"SELECT\n",
					"    RelevantRepID,\n",
					"    COUNT(DISTINCT attachmentid)\n",
					"FROM\n",
					"    odw_standardised_db.horizon_nsip_relevant_representation\n",
					"WHERE\n",
					"    ingested_datetime = (SELECT MAX(ingested_datetime) FROM odw_standardised_db.horizon_nsip_relevant_representation)\n",
					"GROUP BY\n",
					"    RelevantRepID\n",
					"HAVING\n",
					"    COUNT(DISTINCT attachmentid) > 1\n",
					"ORDER BY\n",
					"    2 DESC"
				],
				"execution_count": 19
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"select attachmentids FROM odw_curated_db.nsip_representation where representationid = 33574"
				],
				"execution_count": 20
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"**Trace service bus data from standardised to curated We need to make sure the data has loaded through correctly. To do this efficiently, we will select a sample record and check that the data is maintained as it moves through the medallian architecture.**"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#### Trace Service Bus data to Harmonised"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"SELECT * FROM odw_standardised_db.sb_nsip_representation WHERE representationId = 100006245 ORDER BY ingested_datetime;\n",
					"SELECT * FROM odw_harmonised_db.sb_nsip_representation WHERE representationId = 100006245 ORDER BY IngestionDate;"
				],
				"execution_count": 21
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#### Trace Horizon data to Harmonised"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"SELECT DISTINCT\n",
					"    *\n",
					"FROM\n",
					"    odw_standardised_db.horizon_nsip_relevant_representation\n",
					"WHERE\n",
					"     relevantRepID = 11303 AND \n",
					"     ingested_datetime = (select max(ingested_datetime) from odw_standardised_db.horizon_nsip_relevant_representation) limit 10;"
				],
				"execution_count": 22
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"SELECT DISTINCT\n",
					"    *\n",
					"FROM\n",
					"    odw_harmonised_db.nsip_representation\n",
					"WHERE\n",
					"     representationId = 11303 and IsActive = 'Y'\n",
					"order BY\n",
					"    ingestiondate DESC"
				],
				"execution_count": 23
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"**Horizon and Service Bus data successfully combined and flags set appropriately**"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"SELECT\n",
					"    count(*)\n",
					"\n",
					"FROM\n",
					"    odw_standardised_db.horizon_nsip_relevant_representation\n",
					"WHERE\n",
					"    contactid= 37039 and ingested_datetime =(select max(ingested_datetime) from odw_standardised_db.horizon_nsip_relevant_representation)"
				],
				"execution_count": 24
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"SELECT\n",
					"    *\n",
					"\n",
					"FROM\n",
					"    odw_harmonised_db.nsip_representation\n",
					"WHERE\n",
					"    ODTSourceSystem = 'Horizon' and representationid= 37039\n",
					""
				],
				"execution_count": 25
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"SELECT\n",
					"    representationId\n",
					"    ,count(*)\n",
					"FROM\n",
					"    odw_harmonised_db.nsip_representation\n",
					"WHERE\n",
					"    ODTSourceSystem = 'Horizon' and isActive = 'Y'\n",
					"GROUP BY\n",
					"    1\n",
					"ORDER BY\n",
					"    2 desc"
				],
				"execution_count": 26
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#### check the validto column works as expected."
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"SELECT\n",
					"\n",
					"*\n",
					"FROM\n",
					"    odw_harmonised_db.nsip_representation\n",
					"WHERE\n",
					"    ODTSourceSystem = 'ODT'\n",
					"    and representationid = 100006295\n",
					"    order by ingestiondate"
				],
				"execution_count": 27
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"SELECT\n",
					"    representationid\n",
					"    ,count(*)\n",
					"FROM\n",
					"    odw_harmonised_db.nsip_representation\n",
					"WHERE\n",
					"    ODTSourceSystem = 'ODT'\n",
					"GROUP BY\n",
					"    1\n",
					"ORDER BY\n",
					"    2 desc"
				],
				"execution_count": 28
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"###### **Harmonised Data updated in curated correctly**"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"SELECT DISTINCT\n",
					"    *\n",
					"FROM\n",
					"    odw_harmonised_db.nsip_representation\n",
					"WHERE\n",
					"     representationid = '100006295' and IsActive = 'Y'\n",
					"order BY\n",
					"    ingestiondate DESC"
				],
				"execution_count": 29
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"SELECT\n",
					"    *\n",
					"FROM\n",
					"    odw_curated_db.nsip_representation\n",
					"WHERE\n",
					"    representationid = '100006295'"
				],
				"execution_count": 30
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#### Data Validation against the curated table"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Horizon and Service Bus data successfully combined and flags set appropriately"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"-- representationid is the primary key, in odw_standardised_db.horizon_nsip_relevant_representation table relevantRepID is the same as representationid\n",
					"select * from odw_standardised_db.horizon_nsip_relevant_representation where relevantRepID = 29845 and ingested_datetime = (select max(ingested_datetime) from odw_standardised_db.horizon_nsip_relevant_representation);\n",
					"select * from odw_harmonised_db.sb_nsip_representation where representationid = 29845;\n",
					"select * from odw_harmonised_db.nsip_representation where representationid = 29845;\n",
					"select * from odw_curated_db.nsip_representation where representationid = 29845;\n",
					""
				],
				"execution_count": 31
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Bug 1383 unit tests"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df = spark.sql(\n",
					"    \"\"\"\n",
					"    SELECT * \n",
					"    FROM\n",
					"    odw_curated_db.nsip_representation AS reps \n",
					"    INNER JOIN odw_curated_db.nsip_service_user AS suser\n",
					"    ON reps.representativeId = suser.id \n",
					"    OR reps.representedId = suser.id\n",
					"    WHERE caseRef = 'TR020002' \n",
					"    AND sourceSystem IN ('horizon','Horizon')\n",
					"    \"\"\"\n",
					"    )"
				],
				"execution_count": 32
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df2 = spark.sql(\n",
					"    \"\"\"\n",
					"    SELECT *\n",
					"    FROM\n",
					"    odw_curated_db.nsip_representation AS reps \n",
					"    INNER JOIN odw_curated_db.nsip_service_user AS suser\n",
					"    ON reps.representativeId = suser.id \n",
					"    OR reps.representedId = suser.id\n",
					"    WHERE caseRef = 'TR020002' \n",
					"    AND sourceSystem IN ('horizon','Horizon')\n",
					"    AND suser.caseReference = '3148447' \n",
					"    \"\"\"\n",
					"    )\n",
					""
				],
				"execution_count": 35
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"def test_reps_count_match(df1: DataFrame, df2: DataFrame) -> bool:\n",
					"    return df.count() == df2.count()"
				],
				"execution_count": 38
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"test_reps_count_match(df, df2)"
				],
				"execution_count": 39
			}
		]
	}
}