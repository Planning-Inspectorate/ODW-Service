{
	"name": "py_unit_tests_relevant_representation",
	"properties": {
		"folder": {
			"name": "utils/unit-tests"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "114e45fa-37d9-4637-9405-36148c25c5e5"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": true,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw",
				"name": "pinssynspodw",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"import json\n",
					"from pyspark.sql.types import *\n",
					"from pyspark.sql import DataFrame\n",
					"import pprint"
				],
				"execution_count": 41
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"entity_name: str = 'nsip-representation'\n",
					"std_db_name: str = 'odw_standardised_db'\n",
					"hrm_db_name: str = 'odw_harmonised_db'\n",
					"curated_db_name: str = 'odw_curated_db'\n",
					"std_table_name: str = 'sb_nsip_representation'\n",
					"hrm_table_name: str = 'sb_nsip_representation'\n",
					"hrm_table_final: str = 'nsip_representation'\n",
					"curated_table_name: str = 'nsip_representation'\n",
					"\n",
					"hzn_primary_key: str = 'relevantrepid'\n",
					"cur_primary_key: str = 'representationId'\n",
					"std_hzn_table_name: str = 'horizon_nsip_relevant_representation'\n",
					"curated_migration_db_name: str = 'odw_curated_migration_db'\n",
					"curated_migration_table_name: str = 'nsip_representation'"
				],
				"execution_count": 42
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#keep track of the exitCodes, if the exit code is not zero then we've had failures, we flip the boolean\n",
					"exitCode: int = 0"
				],
				"execution_count": 43
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#This needs to be updated in case there is an addition of columns. Or in the future can be extracted automatically 01/08/2024\n",
					"data_model_columns = [\"representationId\",\n",
					"\t\t\"referenceId\",\n",
					"\t\t\"examinationLibraryRef\",\n",
					"\t\t\"caseRef\",\n",
					"\t\t\"caseId\",\n",
					"\t\t\"status\",\n",
					"\t\t\"originalRepresentation\",\n",
					"\t\t\"redacted\",\n",
					"\t\t\"redactedRepresentation\",\n",
					"\t\t\"redactedBy\",\n",
					"\t\t\"redactedNotes\",\n",
					"\t\t\"representationFrom\",\n",
					"\t\t\"representedId\",\n",
					"\t\t\"representativeId\",\n",
					"\t\t\"registerFor\",\n",
					"\t\t\"representationType\",\n",
					"\t\t\"dateReceived\",\n",
					"\t\t\"attachmentIds\"\n",
					"\t]"
				],
				"execution_count": 44
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%run /utils/unit-tests/py_unit_tests_functions"
				],
				"execution_count": 45
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"sb_std_schema = create_spark_schema(std_db_name, entity_name)\n",
					"sb_std_table_schema = spark.table(f\"{std_db_name}.{std_table_name}\").schema\n",
					"sb_hrm_schema = create_spark_schema(hrm_db_name, entity_name)\n",
					"sb_hrm_table_schema = spark.table(f\"{hrm_db_name}.{hrm_table_name}\").schema"
				],
				"execution_count": 46
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"**Compare schemas**"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"std_schema_correct: bool = test_compare_schemas(sb_std_schema, sb_std_table_schema)\n",
					"print(f\"Service bus standardised schema correct: {std_schema_correct}\\nTable: {std_db_name}.{std_table_name}\\nDifferences shown above (if any)\")\n",
					"hrm_schema_correct: bool = test_compare_schemas(sb_hrm_schema, sb_hrm_table_schema)\n",
					"print(f\"Service bus harmonised schema correct: {hrm_schema_correct}\\nTable: {hrm_db_name}.{hrm_table_name}\\nDifferences shown above (if any)\")"
				],
				"execution_count": 47
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"**Compare service bus standardised with harmonised\n",
					"Should be the same count**"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"standardised_count, harmonised_count, counts_match = test_std_same_rows_hrm(std_table_name, hrm_table_name)\n",
					"print(f\"Standardised Count: {standardised_count: ,}\\nHarmonised Count: {harmonised_count: ,}\\nCounts match: {counts_match}\")\n",
					"\n",
					"if standardised_count > harmonised_count:\n",
					"    exitCode += 1\n",
					"    print(f\"{standardised_count - harmonised_count} rows from Standardised are missing in Harmonised.\" )\n",
					"    differentiate_std_and_hrm(f\"{std_db_name}.{std_table_name}\", f\"{hrm_db_name}.{hrm_table_name}\", data_model_columns)"
				],
				"execution_count": 48
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"**Compare final harmonised table (if combined with Horizon) with curated table\n",
					"Comparing where IsActive = Y in harmonised = curated row count***"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"harmonised_final_count, curated_count, counts_match = test_curated_row_count(hrm_table_final, curated_table_name, data_model_columns)\n",
					"print(f\"Harmonised Final Count: {harmonised_final_count: ,}\\nCurated Count: {curated_count: ,}\\nCounts match: {counts_match}\")"
				],
				"execution_count": 49
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### The below tests are for the curated_migration_db table\n",
					"##### Test 1:  Schema match the data model\n",
					""
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"cur_migrated_schema = create_spark_schema(curated_migration_db_name, entity_name)\n",
					"cur_migrated_df = spark.table(f\"{curated_migration_db_name}.{curated_migration_table_name}\")\n",
					"\n",
					"cur_migrated_schema_correct: bool = test_compare_schemas(cur_migrated_schema, cur_migrated_df.schema)\n",
					"exitCode += int(not cur_migrated_schema_correct)\n",
					"print(f\"Curated Migration schema correct: {cur_migrated_schema_correct}\\nTable: {curated_migration_db_name}.{curated_migration_table_name}\\nDifferences shown above (if any)\")"
				],
				"execution_count": 50
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Test 2:  Counts match in horizon standardised and curated\n",
					""
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"counts_match = test_hzn_and_curated_count_matched(std_hzn_table_name, curated_migration_table_name, hzn_primary_key, cur_primary_key)\n",
					"print(f\"Horizon to Curared - Counts match: {counts_match}\")\n",
					"exitCode += int(not counts_match)"
				],
				"execution_count": 51
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Test 3:  Checks if any Primary Key record is dropped from Horizon to Curated\n",
					""
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"rows_dropped = test_hzn_to_curated_no_record_dropped(std_hzn_table_name, curated_migration_table_name, hzn_primary_key, cur_primary_key)\n",
					"print(f\"Horizon to Curared - No rows dropped: {rows_dropped}\")\n",
					"exitCode += int(not rows_dropped)"
				],
				"execution_count": 52
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Test 4: Check curated layer only has horizon data and unique records (distinct primary ids)"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"no_horizon_records, total_curated_count, distinct_curated_count, counts_match = test_curated_unique_hzn_only(curated_migration_db_name, curated_migration_table_name, cur_primary_key)\n",
					"print(f\"There is no other records than Horizon: {no_horizon_records:}\\nCurated Count: {total_curated_count: ,}\\nDistinct Curated Count: {distinct_curated_count:,}\\nCounts match: {counts_match}\")\n",
					"exitCode += int(not no_horizon_records)\n",
					"exitCode += int(not counts_match)"
				],
				"execution_count": 53
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Test 5:  There should be no caseReference in Reps that's not in Project"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df = spark.sql(f\"\"\"\n",
					"    SELECT DISTINCT caseRef \n",
					"    FROM {curated_migration_db_name}.{curated_migration_table_name}\n",
					"    WHERE caseRef NOT IN (\n",
					"        SELECT DISTINCT caseReference \n",
					"        FROM {curated_migration_db_name}.nsip_project\n",
					"    )\n",
					"\"\"\")\n",
					"\n",
					"\n",
					"if df.count() == 0:\n",
					"    print('PASS: No dangling caseReference found')\n",
					"else:\n",
					"    print('FAIL: dangling caseReference found')"
				],
				"execution_count": 54
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Test 6: No representation with NULL representedId"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df = spark.sql(f\"\"\"\n",
					"    SELECT * \n",
					"    FROM {curated_migration_db_name}.{curated_migration_table_name}\n",
					"    WHERE representedId IS NULL OR representedId = ''\n",
					"\"\"\")\n",
					"\n",
					"\n",
					"if df.count() == 0:\n",
					"    print('PASS: No NULL representedId found')\n",
					"else:\n",
					"    print('FAIL: NULL representedId found')"
				],
				"execution_count": 55
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#### Test 7: The count of Representations for each case must be the following in dev/test\n",
					"- EN010004: 6410\n",
					"- EN010044: 618\n",
					"- EN010080: 154\n",
					"- TR040004: 39"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"from pyspark.sql.functions import col\n",
					"table= 'odw_curated_migration_db.nsip_representation'\n",
					"\n",
					"df = spark.sql(\"\"\"\n",
					"    SELECT * \n",
					"    FROM odw_curated_migration_db.nsip_representation AS reps \n",
					"    --INNER JOIN odw_curated_migration_db.service_user AS suser ON reps.representedId = suser.id\n",
					"    --INNER JOIN odw_curated_migration_db.nsip_project AS proj ON reps.caseRef = proj.caseReference\n",
					"\"\"\")\n",
					"\n",
					"count_EN010004 = df.filter(col(\"caseRef\") == \"EN010004\").count()\n",
					"count_EN010044 = df.filter(col(\"caseRef\") == \"EN010044\").count()\n",
					"count_EN010080 = df.filter(col(\"caseRef\") == \"EN010080\").count()\n",
					"count_TR040004 = df.filter(col(\"caseRef\") == \"TR040004\").count()\n",
					"\n",
					"if count_EN010004 == 6410 and count_EN010044 == 618 and count_EN010080 == 154 and count_TR040004 == 39:\n",
					"    print('PASS: Expected count of representations match')\n",
					"else:\n",
					"    print('FAIL: Expected count of representations match')\n",
					"    exitCode += 1"
				],
				"execution_count": 56
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"mssparkutils.notebook.exit(exitCode)"
				],
				"execution_count": 57
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"**Check array fields are aggregated properly Go and find examples******"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"SELECT\n",
					"    RelevantRepID,\n",
					"    COUNT(DISTINCT attachmentid)\n",
					"FROM\n",
					"    odw_standardised_db.horizon_nsip_relevant_representation\n",
					"WHERE\n",
					"    ingested_datetime = (SELECT MAX(ingested_datetime) FROM odw_standardised_db.horizon_nsip_relevant_representation)\n",
					"GROUP BY\n",
					"    RelevantRepID\n",
					"HAVING\n",
					"    COUNT(DISTINCT attachmentid) > 1\n",
					"ORDER BY\n",
					"    2 DESC"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"select attachmentids FROM odw_curated_db.nsip_representation where representationid = 33574"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"**Trace service bus data from standardised to curated We need to make sure the data has loaded through correctly. To do this efficiently, we will select a sample record and check that the data is maintained as it moves through the medallian architecture.**"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#### Trace Service Bus data to Harmonised"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"SELECT * FROM odw_standardised_db.sb_nsip_representation WHERE representationId = 100006245 ORDER BY ingested_datetime;\n",
					"SELECT * FROM odw_harmonised_db.sb_nsip_representation WHERE representationId = 100006245 ORDER BY IngestionDate;"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#### Trace Horizon data to Harmonised"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"SELECT DISTINCT\n",
					"    *\n",
					"FROM\n",
					"    odw_standardised_db.horizon_nsip_relevant_representation\n",
					"WHERE\n",
					"     relevantRepID = 11303 AND \n",
					"     ingested_datetime = (select max(ingested_datetime) from odw_standardised_db.horizon_nsip_relevant_representation) limit 10;"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"SELECT DISTINCT\n",
					"    *\n",
					"FROM\n",
					"    odw_harmonised_db.nsip_representation\n",
					"WHERE\n",
					"     representationId = 11303 and IsActive = 'Y'\n",
					"order BY\n",
					"    ingestiondate DESC"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"**Horizon and Service Bus data successfully combined and flags set appropriately**"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"SELECT\n",
					"    count(*)\n",
					"\n",
					"FROM\n",
					"    odw_standardised_db.horizon_nsip_relevant_representation\n",
					"WHERE\n",
					"    contactid= 37039 and ingested_datetime =(select max(ingested_datetime) from odw_standardised_db.horizon_nsip_relevant_representation)"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"SELECT\n",
					"    *\n",
					"\n",
					"FROM\n",
					"    odw_harmonised_db.nsip_representation\n",
					"WHERE\n",
					"    ODTSourceSystem = 'Horizon' and representationid= 37039\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"SELECT\n",
					"    representationId\n",
					"    ,count(*)\n",
					"FROM\n",
					"    odw_harmonised_db.nsip_representation\n",
					"WHERE\n",
					"    ODTSourceSystem = 'Horizon' and isActive = 'Y'\n",
					"GROUP BY\n",
					"    1\n",
					"ORDER BY\n",
					"    2 desc"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#### check the validto column works as expected."
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"SELECT\n",
					"\n",
					"*\n",
					"FROM\n",
					"    odw_harmonised_db.nsip_representation\n",
					"WHERE\n",
					"    ODTSourceSystem = 'ODT'\n",
					"    and representationid = 100006295\n",
					"    order by ingestiondate"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"SELECT\n",
					"    representationid\n",
					"    ,count(*)\n",
					"FROM\n",
					"    odw_harmonised_db.nsip_representation\n",
					"WHERE\n",
					"    ODTSourceSystem = 'ODT'\n",
					"GROUP BY\n",
					"    1\n",
					"ORDER BY\n",
					"    2 desc"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"###### **Harmonised Data updated in curated correctly**"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"SELECT DISTINCT\n",
					"    *\n",
					"FROM\n",
					"    odw_harmonised_db.nsip_representation\n",
					"WHERE\n",
					"     representationid = '100006295' and IsActive = 'Y'\n",
					"order BY\n",
					"    ingestiondate DESC"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"SELECT\n",
					"    *\n",
					"FROM\n",
					"    odw_curated_db.nsip_representation\n",
					"WHERE\n",
					"    representationid = '100006295'"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#### Data Validation against the curated table"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Horizon and Service Bus data successfully combined and flags set appropriately"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"-- representationid is the primary key, in odw_standardised_db.horizon_nsip_relevant_representation table relevantRepID is the same as representationid\n",
					"select * from odw_standardised_db.horizon_nsip_relevant_representation where relevantRepID = 29845 and ingested_datetime = (select max(ingested_datetime) from odw_standardised_db.horizon_nsip_relevant_representation);\n",
					"select * from odw_harmonised_db.sb_nsip_representation where representationid = 29845;\n",
					"select * from odw_harmonised_db.nsip_representation where representationid = 29845;\n",
					"select * from odw_curated_db.nsip_representation where representationid = 29845;\n",
					""
				],
				"execution_count": null
			}
		]
	}
}