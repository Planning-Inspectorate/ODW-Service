{
	"name": "py_create_orchestration_table",
	"properties": {
		"folder": {
			"name": "utils"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw34",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "0188c3e3-3c85-4f00-882b-c175feb63f97"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw34",
				"name": "pinssynspodw34",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw34",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"from pyspark.sql.types import (\n",
					"    StructType,\n",
					"    StructField,\n",
					"    StringType,\n",
					"    IntegerType,\n",
					"    ArrayType\n",
					")\n",
					"from pyspark.sql import functions as F"
				],
				"execution_count": 61
			},
			{
				"cell_type": "code",
				"source": [
					"# --- 1. Define the Schema ---\n",
					"# Schema for the objects inside the 'definitions' array\n",
					"definition_schema = StructType([\n",
					"    StructField(\"Source_ID\", IntegerType(), True),\n",
					"    StructField(\"Source_Folder\", StringType(), True),\n",
					"    StructField(\"Horizon_Table_Name\", StringType(), True),\n",
					"    StructField(\"Source_Frequency_Folder\", StringType(), True),\n",
					"    StructField(\"Source_Filename_Format\", StringType(), True),\n",
					"    StructField(\"Source_Filename_Start\", StringType(), True),\n",
					"    StructField(\"Expected_Within_Weekdays\", IntegerType(), True),\n",
					"    StructField(\"Standardised_Path\", StringType(), True),\n",
					"    StructField(\"Standardised_Table_Name\", StringType(), True),\n",
					"    StructField(\"Standardised_Table_Definition\", StringType(), True),\n",
					"    StructField(\"Harmonised_Table_Name\", StringType(), True),\n",
					"    StructField(\"Harmonised_Incremental_Key\", StringType(), True),\n",
					"    StructField(\"Entity_Primary_Key\", StringType(), True)\n",
					"\n",
					"])\n",
					"\n",
					"# Top-level schema for the entire JSON file\n",
					"orchestration_schema = StructType([\n",
					"    StructField(\"definitions\", ArrayType(definition_schema, True), True)\n",
					"])"
				],
				"execution_count": 68
			},
			{
				"cell_type": "code",
				"source": [
					"\n",
					"# --- 2. Read and Transform the Data ---\n",
					"# Path to your JSON file in the data lake\n",
					"json_file_path = 'abfss://odw-config@pinsstodwdevuks9h80mb.dfs.core.windows.net/orchestration/orchestration.json'\n",
					"\n",
					"# Read the JSON, explode the definitions array, and select the nested fields\n",
					"definitions_df = spark.read.schema(orchestration_schema) \\\n",
					"    .option(\"multiLine\", \"true\") \\\n",
					"    .json(json_file_path) \\\n",
					"    .withColumn(\"definition\", F.explode(\"definitions\")) \\\n",
					"    .select(\"definition.*\")\n",
					"\n",
					"print(\"DataFrame created successfully. Schema:\")\n",
					"definitions_df.printSchema()\n",
					""
				],
				"execution_count": 69
			},
			{
				"cell_type": "code",
				"source": [
					"# --- 3. Save the DataFrame to Synapse ---\n",
					"# Define your database and table name\n",
					"database_name = \"odw_config_db\"\n",
					"table_name = \"orchestration\"\n",
					"full_table_name = f\"{database_name}.{table_name}\"\n",
					"\n",
					"print(f\"Saving DataFrame to {full_table_name}...\")\n",
					"\n",
					"# Write the DataFrame to the Synapse table\n",
					"# mode(\"overwrite\") will replace the table if it already exists.\n",
					"# Use mode(\"append\") if you want to add data to an existing table.\n",
					"definitions_df.write.mode(\"overwrite\").saveAsTable(full_table_name)\n",
					"\n",
					"print(\"Save complete!\")\n",
					""
				],
				"execution_count": 75
			}
		]
	}
}