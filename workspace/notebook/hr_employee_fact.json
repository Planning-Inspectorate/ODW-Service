{
	"name": "hr_employee_fact",
	"properties": {
		"folder": {
			"name": "odw-harmonised/SAP-HR"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "c3071ce5-448e-461b-916f-a5385e58bf58"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw",
				"name": "pinssynspodw",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 8,
				"memory": 56,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Check for new, updated or deleted data\r\n",
					"- This script checks for new, updated or deleted data by checking the source data (sap hr) against the target (odw_harmonised_db.employee_fact)\r\n",
					"- **New Data:** where a Pers_No in the source does not exist as an EmployeeNumber in the target. NewData flag is set to 'Y'\r\n",
					"- **Updated data:** Comparison occurs on Pers_No in source and EmployeeNumber in target where the row hash is different i.e. there is a change in one of the columns. NewData flag is set to 'Y'\r\n",
					"\r\n",
					"## View employee_fact_new is created"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"-- Build Employee_fact table -- merge\r\n",
					"\r\n",
					"-- Notes - Addresses are only supplied for Inspectors - need to check inspector count against addresses data\r\n",
					"\r\n",
					"\r\n",
					"CREATE OR REPLACE TEMPORARY VIEW employee_fact_new \r\n",
					"\r\n",
					"    AS\r\n",
					"\r\n",
					"-- gets data that matches of SourceID and flags that it is modified based on a row (md5) hash and flags as \"NewData\"\r\n",
					"\r\n",
					"SELECT DISTINCT\r\n",
					"    T1.Pers_No as EmployeeID,\r\n",
					"    to_date(T1.Birth_date) as DOB,\r\n",
					"    T1.NI_number as NINumber,\r\n",
					"    T1.Pers_No as PersNumber,\r\n",
					"    T2.Staff_Number as EmployeeNumber,\r\n",
					"    T1.Employee_No as LegacyEmployeeNumber,\r\n",
					"    NULL as NewSAPEmployeeNumber,\r\n",
					"    T4.SourceSystemID,\r\n",
					"    to_timestamp(T1.expected_from) AS IngestionDate,\r\n",
					"    NULL as ValidTo,\r\n",
					"    md5(concat(IFNULL(T1.Birth_date,'.'), IFNULL(T1.NI_number, '.'), IFNULL(T1.Pers_No, '.'),IFNULL(T2.Staff_Number, '.'), IFNULL(T1.Employee_No,'.'))) as RowID, \r\n",
					"    'Y' as IsActive, \r\n",
					"    T7.IsActive as HistoricIsActive\r\n",
					"\r\n",
					"FROM odw_standardised_db.vw_saphr T1\r\n",
					"LEFT JOIN odw_standardised_db.vw_addresses T2 ON T1.Pers_No = T2.Staff_Number\r\n",
					"LEFT JOIN odw_standardised_db.vw_email T3 ON T1.Pers_No = T3.Staff_Number\r\n",
					"LEFT JOIN odw_harmonised_db.main_sourcesystem_fact T4 ON \"SAP HR\" = T4.Description and T4.IsActive = 'Y'\r\n",
					"LEFT JOIN ( SELECT staff_number, max(ded_from) as AnnualLeaveStartDate\r\n",
					"            FROM odw_standardised_db.vw_leave\r\n",
					"            GRoup BY Staff_Number) T5 ON T1.Pers_No = T5.staff_number    \r\n",
					"FULL JOIN odw_harmonised_db.hr_employee_fact T7 ON T1.Pers_No = T7.PersNumber AND T7.IsActive = 'Y'\r\n",
					"WHERE\r\n",
					"        -- flags new data        \r\n",
					"        CASE\r\n",
					"            WHEN T1.Pers_No = T7.PersNumber AND md5(concat(IFNULL(T1.Birth_date,'.'), IFNULL(T1.NI_number, '.'), IFNULL(T1.Pers_No, '.'),IFNULL(T2.Staff_Number, '.'), IFNULL(T1.Employee_No,'.')))  <> T7.RowID     \r\n",
					"            THEN 'Y'\r\n",
					"            WHEN T7.PersNumber IS NULL\r\n",
					"            THEN 'Y'\r\n",
					"            ELSE 'N'\r\n",
					"        END  = 'Y' \r\n",
					"AND T1.Pers_No IS NOT NULL;\r\n",
					""
				],
				"execution_count": 31
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Dataset is created that contains changed data and corresponding target data\r\n",
					"- This script combines data that has been updated, Deleted or is new, with corresponding target data\r\n",
					"- View **employee_fact_new** is unioned to the target data filter to only those rows where changes have been detected\r\n",
					"## View employee_fact_changed_rows is created"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"\r\n",
					"-- Create new and updated dataset\r\n",
					"\r\n",
					"CREATE OR REPLACE TEMPORARY  VIEW employee_fact_changed_rows\r\n",
					"\r\n",
					"    AS\r\n",
					"\r\n",
					"-- gets updated and new rows \r\n",
					"\r\n",
					"Select \r\n",
					"    EmployeeID, -- surrogate key\r\n",
					"    DOB,\r\n",
					"    NINumber,\r\n",
					"    PersNumber,\r\n",
					"    EmployeeNumber,\r\n",
					"    LegacyEmployeeNumber,\r\n",
					"    NewSAPEmployeeNumber,\r\n",
					"    SourceSystemID,\r\n",
					"    IngestionDate,\r\n",
					"    ValidTo,\r\n",
					"    RowID,\r\n",
					"    IsActive\r\n",
					"From employee_fact_new WHERE HistoricIsActive = 'Y' or HistoricIsActive IS NULL\r\n",
					"\r\n",
					"    UNION ALL\r\n",
					"\r\n",
					"-- gets original versions of updated rows so we can update EndDate and set IsActive flag to 'N'\r\n",
					"\r\n",
					"SELECT\r\n",
					"    EmployeeID, -- surrogate key\r\n",
					"    DOB,\r\n",
					"    NINumber,\r\n",
					"    PersNumber,\r\n",
					"    EmployeeNumber,\r\n",
					"    LegacyEmployeeNumber,\r\n",
					"    NewSAPEmployeeNumber,\r\n",
					"    SourceSystemID,\r\n",
					"    IngestionDate,\r\n",
					"    ValidTo,\r\n",
					"    RowID,\r\n",
					"    IsActive\r\n",
					"FROM odw_harmonised_db.hr_employee_fact\r\n",
					"WHERE PersNumber IN (SELECT PersNumber FROM employee_fact_new WHERE RowID IS NULL) AND IsActive = 'Y';\r\n",
					""
				],
				"execution_count": 32
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					}
				},
				"source": [
					"%%sql\n",
					"\n",
					"CREATE OR REPLACE TEMPORARY VIEW Loading_month\n",
					"\n",
					"    AS\n",
					"\n",
					"SELECT DISTINCT\n",
					"    IngestionDate AS IngestionDate,\n",
					"    to_timestamp(date_sub(IngestionDate,1)) AS ClosingDate,\n",
					"    'Y' AS IsActive\n",
					"\n",
					"FROM employee_fact_new;\n",
					"\n",
					"CREATE OR REPLACE TEMPORARY VIEW employee_fact_changed_rows_final\n",
					"\n",
					"    AS\n",
					"\n",
					"SELECT \n",
					"    T1.EmployeeID,\n",
					"    DOB,\n",
					"    NINumber,\n",
					"    PersNumber,\n",
					"    EmployeeNumber,\n",
					"    LegacyEmployeeNumber,\n",
					"    NewSAPEmployeeNumber,\n",
					"    T1.SourceSystemID,\n",
					"    T1.IngestionDate,\n",
					"    T1.ValidTo,\n",
					"    T1.RowID,\n",
					"    T1.IsActive,\n",
					"    T2.ClosingDate\n",
					"FROM employee_fact_changed_rows T1\n",
					"FULL JOIN Loading_month T2 ON T1.IsActive = T2.IsActive"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# View employee_fact_changed_rows is used in a merge (Upsert) statement into the target table\r\n",
					"- **WHEN MATCHED** ON the Business Key (i.e. Pers_No from SAP HR), EndDate is set to today -1 day and the IsActive flag is set to 'N'\r\n",
					"- **WHEN NOT MATCHED** ON the business key, insert rows\r\n",
					"## Table odw_harmonised.employee_fact is updated"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"-- merge into fact table\r\n",
					"\r\n",
					"MERGE INTO odw_harmonised_db.hr_employee_fact AS Target\r\n",
					"USING employee_fact_changed_rows_final AS Source\r\n",
					"\r\n",
					"ON Source.EmployeeID = Target.EmployeeID\r\n",
					"\r\n",
					"-- For Updates existing rows\r\n",
					"\r\n",
					"WHEN MATCHED\r\n",
					"    THEN \r\n",
					"    UPDATE SET\r\n",
					"    Target.ValidTo = to_timestamp(ClosingDate),\r\n",
					"    Target.IsActive = 'N'\r\n",
					"        \r\n",
					"-- Insert completely new rows\r\n",
					"-- WHEN NOT MATCHED \r\n",
					"--     THEN INSERT (EmployeeID,\r\n",
					"--         DOB,\r\n",
					"--         NINumber,\r\n",
					"--         PersNumber,\r\n",
					"--         EmployeeNumber,\r\n",
					"--         LegacyEmployeeNumber,\r\n",
					"--         NewSAPEmployeeNumber,\r\n",
					"--         SourceSystemID,\r\n",
					"--         IngestionDate,\r\n",
					"--         ValidTo,\r\n",
					"--         RowID,\r\n",
					"--         IsActive)  \r\n",
					"--         VALUES (Source.EmployeeID,\r\n",
					"--         Source.DOB,\r\n",
					"--         Source.NINumber,\r\n",
					"--         Source.PersNumber,\r\n",
					"--         Source.EmployeeNumber,\r\n",
					"--         Source.LegacyEmployeeNumber,\r\n",
					"--         Source.NewSAPEmployeeNumber,\r\n",
					"--         Source.SourceSystemID, \r\n",
					"--         Source.IngestionDate, \r\n",
					"--         Source.ValidTo, \r\n",
					"--         Source.RowID, \r\n",
					"--         Source.IsActive)  ;  \r\n",
					""
				],
				"execution_count": 33
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Fix the IDs\r\n",
					"- No auto-increment feature is available in delta tables, therefore we need to create new IDs for the inserted rows\r\n",
					"- This is done by select the target data and using INSERT OVERWRITE to re-insert the data is a new Row Number\r\n",
					"## Table odw_harmonised.employee_fact is updated"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"-- Insert new employee_fact\r\n",
					"\r\n",
					"INSERT INTO odw_harmonised_db.hr_employee_fact\r\n",
					"\r\n",
					"SELECT \r\n",
					"    EmployeeID, \r\n",
					"    DOB,\r\n",
					"    NINumber,\r\n",
					"    PersNumber,\r\n",
					"    EmployeeNumber,\r\n",
					"    LegacyEmployeeNumber,\r\n",
					"    NewSAPEmployeeNumber,\r\n",
					"    SourceSystemID,\r\n",
					"    IngestionDate,\r\n",
					"    ValidTo,\r\n",
					"    RowID,\r\n",
					"    IsActive\r\n",
					"FROM employee_fact_changed_rows;"
				],
				"execution_count": 34
			}
		]
	}
}