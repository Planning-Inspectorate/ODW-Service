{
	"name": "checkpoint_recording",
	"properties": {
		"folder": {
			"name": "utils"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "6748f418-234a-4908-82fc-378425f980e7"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw",
				"name": "pinssynspodw",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"import json\r\n",
					"import os\r\n",
					"from datetime import datetime\r\n",
					"\r\n",
					"CHECKPOINT_FILE = 'pipeline_checkpoint.json'\r\n",
					"\r\n",
					"def save_checkpoint(task_id, status):\r\n",
					"    checkpoint = {\r\n",
					"        'task_id': task_id,\r\n",
					"        'status': status,\r\n",
					"        'timestamp': str(datetime.now())\r\n",
					"    }\r\n",
					"    with open(CHECKPOINT_FILE, 'w') as f:\r\n",
					"        json.dump(checkpoint, f)\r\n",
					"\r\n",
					"def load_checkpoint():\r\n",
					"    if os.path.exists(CHECKPOINT_FILE):\r\n",
					"        with open(CHECKPOINT_FILE, 'r') as f:\r\n",
					"            return json.load(f)\r\n",
					"    return None\r\n",
					""
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def execute_task(task_id):\r\n",
					"    # Load checkpoint to check if task should be skipped\r\n",
					"    checkpoint = load_checkpoint()\r\n",
					"    if checkpoint and checkpoint['task_id'] == task_id and checkpoint['status'] == 'succeeded':\r\n",
					"        print(f\"Task {task_id} already succeeded, skipping.\")\r\n",
					"        return\r\n",
					"    try:\r\n",
					"        # Task execution logic\r\n",
					"        print(f\"Executing task {task_id}\")\r\n",
					"        # Simulate task logic\r\n",
					"        save_checkpoint(task_id, 'succeeded')\r\n",
					"    except Exception as e:\r\n",
					"        save_checkpoint(task_id, 'failed')\r\n",
					"        raise e\r\n",
					"\r\n",
					"def run_pipeline(tasks):\r\n",
					"    for task_id in tasks:\r\n",
					"        try:\r\n",
					"            execute_task(task_id)\r\n",
					"        except Exception as e:\r\n",
					"            print(f\"Pipeline failed at task {task_id}, error: {e}\")\r\n",
					"            break\r\n",
					"\r\n",
					"if __name__ == \"__main__\":\r\n",
					"    tasks = ['task1', 'task2', 'task3', 'task4']\r\n",
					"    run_pipeline(tasks)\r\n",
					""
				],
				"execution_count": 2
			}
		]
	}
}