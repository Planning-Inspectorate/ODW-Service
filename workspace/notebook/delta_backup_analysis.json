{
	"name": "delta_backup_analysis",
	"properties": {
		"folder": {
			"name": "utils"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "37ced6fb-c746-40b6-bcdc-06a3a5703756"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw",
				"name": "pinssynspodw",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"from delta.tables import DeltaTable\n",
					"from pyspark.sql import DataFrame"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"source": [
					"%run utils/py_mount_storage"
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"source": [
					"database: str = \"odw_standardised_db\"\n",
					"table: str = \"sb_appeal_s78\""
				],
				"execution_count": 7
			},
			{
				"cell_type": "code",
				"source": [
					"standardised_tables = spark.catalog.listTables(database)"
				],
				"execution_count": 4
			},
			{
				"cell_type": "code",
				"source": [
					"print([table.name for table in standardised_tables])"
				],
				"execution_count": 5
			},
			{
				"cell_type": "code",
				"source": [
					"storage_account: str = mssparkutils.notebook.run('/utils/py_utils_get_storage_account')\n",
					"table_path: str = f\"abfss://odw-standardised@{storage_account}/{table}\"\n",
					"delta_table = DeltaTable.forPath(spark, table_path)\n",
					"storage_path = f\"abfss://odw-standardised@{storage_account}\""
				],
				"execution_count": 8
			},
			{
				"cell_type": "code",
				"source": [
					"mount_storage(path=storage_path)"
				],
				"execution_count": 9
			},
			{
				"cell_type": "code",
				"source": [
					"def get_delta_table(table: str) -> DataFrame:\n",
					"    return DeltaTable.forPath(spark, table_path)"
				],
				"execution_count": 10
			},
			{
				"cell_type": "code",
				"source": [
					"def get_table_path(table: str):\n",
					"    return f\"abfss://odw-standardised@{storage_account}/{table}\""
				],
				"execution_count": 11
			},
			{
				"cell_type": "code",
				"source": [
					"def get_table_history(table: str) -> DataFrame:\n",
					"    return delta_table.history()"
				],
				"execution_count": 12
			},
			{
				"cell_type": "code",
				"source": [
					"def get_current_version(table: str) -> int: \n",
					"    return get_table_history(table).head(1)[0]['version']"
				],
				"execution_count": 13
			},
			{
				"cell_type": "code",
				"source": [
					"def get_previous_version(table: str) -> int:\n",
					" return get_current_version(table) - 1"
				],
				"execution_count": 14
			},
			{
				"cell_type": "code",
				"source": [
					"def get_current_version_files(table: str) -> list:\n",
					"    return get_delta_table.toDF().inputFiles()"
				],
				"execution_count": 15
			},
			{
				"cell_type": "code",
				"source": [
					"def get_previous_version_files(table: str) -> list:\n",
					"    previous_version = get_previous_version(table)\n",
					"    table_path = get_table_path(table)\n",
					"    return spark.read.format(\"delta\").option(\"versionAsOf\", previous_version).load(table_path).inputFiles()"
				],
				"execution_count": 16
			},
			{
				"cell_type": "code",
				"source": [
					"def get_file_sizes(file_paths: list):\n",
					"    total_size = 0\n",
					"    for file_path in file_paths:\n",
					"        # Get the file size using mssparkutils.fs\n",
					"        file_info = mssparkutils.fs.ls(file_path)\n",
					"        file_size = file_info[0].size  # Get file size in bytes\n",
					"        total_size += file_size\n",
					"        # print(f\"File: {file_path}, Size: {file_size} bytes\")\n",
					"    \n",
					"    return total_size / (1024*1024)"
				],
				"execution_count": 17
			},
			{
				"cell_type": "code",
				"source": [
					"current_version_size = get_file_sizes(current_version_files)\n",
					"current_version_size"
				],
				"execution_count": 18
			},
			{
				"cell_type": "code",
				"source": [
					"previous_version_size = get_file_sizes(previous_version_files)\n",
					"previous_version_size"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"size_delta = current_version_size - previous_version_size"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"print(f\"File size delta between version {current_version} and version {previous_version} is {size_delta} MB.\")"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"if previous_version_size != 0:\n",
					"    percentage_difference = (size_delta / previous_version_size) * 100\n",
					"else:\n",
					"    percentage_difference = 0\n",
					"\n",
					"print(f\"Percentage difference: {percentage_difference:.2f}%\")"
				],
				"execution_count": null
			}
		]
	}
}