{
	"name": "service_user",
	"properties": {
		"description": "creating a view of personnel area for PBI reports",
		"folder": {
			"name": "odw-curated"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "bc446bec-3583-47b7-a959-0878f489f4c2"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw",
				"name": "pinssynspodw",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Checking the Environment\n",
					"#### If dev or test, limiting the number of output rows and anonymisation of the sensitive fields is required."
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from notebookutils import mssparkutils\n",
					"storage_account=mssparkutils.notebook.run('/utils/py_utils_get_storage_account')\n",
					"\n",
					"is_dev = 'dev' in storage_account\n",
					"is_test = 'test' in storage_account\n",
					"\n",
					"# limiting the number of output to 20 rows for dev environment\n",
					"max_limit = 20 if is_dev else 100000000\n",
					"\n",
					"spark.sql(f\"SET MAX_LIMIT = {max_limit}\")"
				],
				"execution_count": 12
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#### Serice User types\r\n",
					"To identify the service users we need to consider both applications and appeals. For these customers we have the following different types we need to consider.\r\n",
					"\r\n",
					"1. **Applicants**. These are the people who are applying for the planning permission. These could be from pre-applications (S51 advice) or applications (nsip_project & service_user). Data from this group will come from both Horizon and service bus.\r\n",
					"2. **RepresentationContact**. These are the people/business that are representing the applicant. Again this data will come from both Horizon and the service bus\r\n",
					"3. **Agents**. These are another type of representative for the applicant. Again these could come from Horizon or the service_user feed .\r\n",
					"4. **Subscriber**. Someone showing an interesting in a planning application, and has subscribed online\r\n",
					"5. **Appeallant**. Someone who is objecting to a planning application\r\n",
					""
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"First, we're going to take the horizon case involvement feed and build out from that"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"#Get initial load from Horizon\r\n",
					"horizon = spark.sql(\"\"\"\r\n",
					"            SELECT DISTINCT\r\n",
					"                REPLACE(REPLACE(REPLACE(ContactID, 'P_', ''), 'S_'), 'O_') AS id\r\n",
					"                ,salutation\r\n",
					"                ,firstName\r\n",
					"                ,lastName\r\n",
					"                ,addressline1\r\n",
					"                ,addressline2\r\n",
					"                ,addressTown\r\n",
					"                ,addressCounty\r\n",
					"                ,postcode\r\n",
					"                ,addressCountry\r\n",
					"                ,organisation\r\n",
					"                ,organisationType\r\n",
					"                ,role\r\n",
					"                ,telephoneNumber\r\n",
					"                ,otherPhoneNumber\r\n",
					"                ,faxNumber\r\n",
					"                ,emailAddress\r\n",
					"                ,CAST(NULL AS String) AS webAddress\r\n",
					"                ,CASE serviceUserType\r\n",
					"                    WHEN 'Applicant' THEN\r\n",
					"                        'Applicant'\r\n",
					"                    WHEN 'Agent' THEN\r\n",
					"                        'Agent'\r\n",
					"                    WHEN 'Apellant' THEN\r\n",
					"                        'Appellant'\r\n",
					"                    WHEN 'Appellant' THEN\r\n",
					"                        'Appellant'\r\n",
					"                    WHEN 'tAppellant' THEN\r\n",
					"                        'Appellant'\r\n",
					"                END AS serviceUserType\r\n",
					"                ,caseReference \r\n",
					"                ,'Horizon' AS sourceSystem\r\n",
					"                ,ContactID AS sourceSUID\r\n",
					"            FROM\r\n",
					"                odw_harmonised_db.casework_case_involvement_dim AS casework\r\n",
					"            WHERE\r\n",
					"                IsActive = 'Y'\r\n",
					"                AND CASE serviceUserType\r\n",
					"                    WHEN 'Applicant' THEN\r\n",
					"                        'Applicant'\r\n",
					"                    WHEN 'Agent' THEN\r\n",
					"                        'Agent'\r\n",
					"                    WHEN 'Apellant' THEN\r\n",
					"                        'Appellant'\r\n",
					"                    WHEN 'Appellant' THEN\r\n",
					"                        'Appellant'\r\n",
					"                    WHEN 'tAppellant' THEN\r\n",
					"                        'Appellant'\r\n",
					"                END IS NOT NULL\r\n",
					"                AND REPLACE(REPLACE(REPLACE(ContactID, 'P_', ''), 'S_'), 'O_') NOT IN (SELECT DISTINCT id from odw_harmonised_db.sb_service_user)\r\n",
					"            \"\"\")"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"#Next we get the data from service bus\r\n",
					"sb = spark.sql(\"\"\"\r\n",
					"        SELECT\r\n",
					"            id\r\n",
					"            ,salutation\r\n",
					"            ,firstName\r\n",
					"            ,lastName\r\n",
					"            ,addressline1\r\n",
					"            ,addressline2\r\n",
					"            ,addressTown\r\n",
					"            ,addressCounty\r\n",
					"            ,postcode\r\n",
					"            ,addressCountry\r\n",
					"            ,organisation\r\n",
					"            ,organisationType\r\n",
					"            ,role\r\n",
					"            ,telephoneNumber\r\n",
					"            ,otherPhoneNumber\r\n",
					"            ,faxNumber\r\n",
					"            ,emailAddress\r\n",
					"            ,webAddress\r\n",
					"            ,serviceUserType\r\n",
					"            ,caseReference \r\n",
					"            ,sourceSystem\r\n",
					"            ,sourceSuid\r\n",
					"        FROM\r\n",
					"            odw_harmonised_db.sb_service_user\r\n",
					"        WHERE\r\n",
					"            isActive = 'Y'\r\n",
					"        \"\"\")\r\n",
					"\r\n",
					"service_user = horizon.union(sb)"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"First we are going to go and get the details for applicants across the system\r\n",
					""
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"#First we want to take s51 records\r\n",
					"s_51 = spark.sql(\"\"\"\r\n",
					"                    SELECT DISTINCT\r\n",
					"                        CAST(NULL AS String) AS id\r\n",
					"                        ,CAST(NULL AS String) AS salutation\r\n",
					"                        ,EnquirerFirstName AS firstName\r\n",
					"                        ,EnquirerLastName AS lastName\r\n",
					"                        ,CAST(NULL AS String) AS addressline1\r\n",
					"                        ,CAST(NULL AS String) AS addressline2\r\n",
					"                        ,CAST(NULL AS String) AS addressTown\r\n",
					"                        ,CAST(NULL AS String) AS addressCounty\r\n",
					"                        ,CAST(NULL AS String) AS postcode\r\n",
					"                        ,CAST(NULL AS String) AS addressCountry\r\n",
					"                        ,CAST(NULL AS String) /*EnquirerOrganisation*/ AS organisation\r\n",
					"                        ,CAST(NULL AS String) AS organisationType\r\n",
					"                        ,CAST(NULL AS String) AS role\r\n",
					"                        ,CAST(NULL AS String) AS telephoneNumber\r\n",
					"                        ,CAST(NULL AS String) AS otherPhoneNumber\r\n",
					"                        ,CAST(NULL AS String) AS faxNumber\r\n",
					"                        ,CAST(NULL AS String) AS emailAddress\r\n",
					"                        ,CAST(NULL AS String) AS webAddress\r\n",
					"                        ,'Applicant' AS serviceUserType\r\n",
					"                        ,caseReference \r\n",
					"                        ,ODTSourceSystem AS sourceSystem \r\n",
					"                        ,CAST(NULL AS String) AS sourceSuid\r\n",
					"                    FROM\r\n",
					"                        odw_harmonised_db.nsip_s51_advice\r\n",
					"                    WHERE\r\n",
					"                        isActive = 'Y'\"\"\")\r\n",
					"\r\n",
					"inserts = s_51.join(service_user,how='left_anti',on=['firstName', 'lastname', 'caseReference', 'serviceUserType']).select(service_user.columns)    \r\n",
					"\r\n",
					"service_user = service_user.union(inserts)"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"#Next take nsip_project records\r\n",
					"nsip_project = spark.sql(\"\"\"\r\n",
					"                    SELECT DISTINCT\r\n",
					"                        CAST(applicantId AS String) AS id\r\n",
					"                        ,CAST(NULL AS String) AS salutation\r\n",
					"                        ,applicantFirstName AS firstName\r\n",
					"                        ,applicantLastName AS lastName\r\n",
					"                        ,addressline1\r\n",
					"                        ,addressline2\r\n",
					"                        ,addressTown\r\n",
					"                        ,addressCounty\r\n",
					"                        ,postcode\r\n",
					"                        ,CAST(NULL AS String) AS addressCountry\r\n",
					"                        ,CAST(NULL AS String)  AS organisation\r\n",
					"                        ,CAST(NULL AS String) AS organisationType\r\n",
					"                        ,CAST(NULL AS String) AS role\r\n",
					"                        ,applicantphonenumber AS telephoneNumber\r\n",
					"                        ,CAST(NULL AS String) AS otherPhoneNumber\r\n",
					"                        ,CAST(NULL AS String) AS faxNumber\r\n",
					"                        ,applicantemailaddress AS emailAddress\r\n",
					"                        ,applicantwebaddress AS webAddress\r\n",
					"                        ,'Applicant' AS serviceUserType\r\n",
					"                        ,caseReference \r\n",
					"                        ,ODTSourceSystem AS sourceSystem \r\n",
					"                        ,CAST(applicantId AS String) AS sourceSuid\r\n",
					"                    FROM \r\n",
					"                        odw_harmonised_db.nsip_project\r\n",
					"                    WHERE\r\n",
					"                        IsActive = 'Y'\r\n",
					"                        AND (addressline1 IS NOT NULL OR Postcode IS NOT NULL) -- we have at address line 1 or postcode\"\"\")\r\n",
					"\r\n",
					"inserts = nsip_project.join(service_user,how='left_anti',on=['id', 'firstName', 'lastname','addressline1','addressline2', 'addressTown', 'addressCounty', 'postcode', 'telephoneNumber', 'emailAddress', 'webAddress', 'caseReference', 'serviceUserType']).select(service_user.columns) \r\n",
					"\r\n",
					"service_user = service_user.union(inserts)"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"rel_reps = spark.sql(\"\"\"\r\n",
					"    SELECT\r\n",
					"    representationId AS Id\r\n",
					"    ,CAST(NULL AS String) AS salutation\r\n",
					"    ,SUBSTRING_INDEX(fullname, ' ', 1) AS firstName\r\n",
					"    ,REPLACE(fullname,SUBSTRING_INDEX(fullname, ' ', 1), '') AS lastName\r\n",
					"    ,CONCAT(buildingnumber, ' ', street) AS addressline1\r\n",
					"    ,CAST(NULL AS String) AS addressline2\r\n",
					"    ,town AS addressTown\r\n",
					"    ,county AS addressCounty\r\n",
					"    ,postcode AS postcode\r\n",
					"    ,country AS addressCountry\r\n",
					"    ,organisationname  AS organisation\r\n",
					"    ,CAST(NULL AS String) AS organisationType\r\n",
					"    ,CAST(NULL AS String) AS role\r\n",
					"    ,phonenumber AS telephoneNumber\r\n",
					"    ,CAST(NULL AS String) AS otherPhoneNumber\r\n",
					"    ,CAST(NULL AS String) AS faxNumber\r\n",
					"    ,emailaddress  AS emailAddress\r\n",
					"    ,CAST(NULL AS String) AS  webAddress\r\n",
					"    ,'RepresentationContact' AS serviceUserType\r\n",
					"    ,caseRef AS caseReference \r\n",
					"    ,ODTSourceSystem AS sourceSystem \r\n",
					"    ,CAST(representationId AS String) AS sourceSuid\r\n",
					"FROM\r\n",
					"    odw_harmonised_db.nsip_relevant_representation \r\n",
					"WHERE\r\n",
					"    IsActive = 'Y'\r\n",
					"UNION\r\n",
					"SELECT\r\n",
					"    AgentContactID AS Id\r\n",
					"    ,CAST(NULL AS String) AS salutation\r\n",
					"    ,SUBSTRING_INDEX(Agentfullname, ' ', 1) AS firstName\r\n",
					"    ,REPLACE(Agentfullname,SUBSTRING_INDEX(Agentfullname, ' ', 1), '') AS lastName\r\n",
					"    ,CONCAT(Agentbuildingnumber, ' ', Agentstreet) AS addressline1\r\n",
					"    ,CAST(NULL AS String) AS addressline2\r\n",
					"    ,agentTown AS addressTown\r\n",
					"    ,agentcounty AS addressCounty\r\n",
					"    ,AgentPostcode AS postcode\r\n",
					"    ,country AS addressCountry\r\n",
					"    ,AgentOrganisationName  AS organisation\r\n",
					"    ,CAST(NULL AS String) AS organisationType\r\n",
					"    ,CAST(NULL AS String) AS role\r\n",
					"    ,agent_phonenumber AS telephoneNumber\r\n",
					"    ,CAST(NULL AS String) AS otherPhoneNumber\r\n",
					"    ,CAST(NULL AS String) AS faxNumber\r\n",
					"    ,agent_emailaddress  AS emailAddress\r\n",
					"    ,CAST(NULL AS String) AS  webAddress\r\n",
					"    ,'Agent' AS serviceUserType\r\n",
					"    ,caseRef AS caseReference \r\n",
					"    ,ODTSourceSystem AS sourceSystem \r\n",
					"    ,CAST(AgentContactID AS String) AS sourceSuid\r\n",
					"FROM\r\n",
					"    odw_harmonised_db.nsip_relevant_representation \r\n",
					"WHERE\r\n",
					"    IsActive = 'Y'\r\n",
					"    AND AgentContactID IS NOT NULL --THIS MEANS THEY ARE AN AGENT\r\n",
					"\"\"\")\r\n",
					"\r\n",
					"inserts = rel_reps.join(service_user,how='left_anti',on=['id', 'firstName', 'lastname','addressline1','addressline2', 'addressTown', 'addressCounty', 'postcode', 'telephoneNumber', 'emailAddress', 'webAddress', 'caseReference', 'serviceUserType']).select(service_user.columns) \r\n",
					"\r\n",
					"service_user = service_user.union(inserts)"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"Need to include Zendesk records"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Table odw_curated_db.service_user is created"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"service_user.write.mode(\"Overwrite\").option(\"mergeSchema\", \"true\").format(\"delta\").saveAsTable(\"odw_curated_db.vw_service_user\")"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Install anonymisation library i.e Faker"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "python"
					}
				},
				"source": [
					"%%pyspark\n",
					"pip install Faker"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Anonymisation of sensitive fields in dev and test"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"if is_dev or is_test:\n",
					"\n",
					"    import pandas as pd\n",
					"    from faker import Faker\n",
					"    \n",
					"    df = spark.sql(\"select * from odw_curated_db.service_user\").toPandas()\n",
					"\n",
					"    if(len(df) > 0):\n",
					"        fake = Faker()\n",
					"        \n",
					"        df['firstName'] = [fake.first_name() for _ in range(len(df))]\n",
					"        df['lastName'] = [fake.last_name() for _ in range(len(df))]\n",
					"        df['emailAddress'] = [fake.email() for _ in range(len(df))]\n",
					"        df['telephoneNumber'] = [fake.phone_number() for _ in range(len(df))]\n",
					"        df['otherPhoneNumber'] = [fake.phone_number() for _ in range(len(df))]\n",
					"        df['faxNumber'] = [fake.phone_number() for _ in range(len(df))]\n",
					"        \n",
					"        df = spark.createDataFrame(df)\n",
					"\n",
					"        table_loc = \"abfss://odw-curated@\"+storage_account+'service_user'\n",
					"        df.write.format(\"delta\").mode(\"overwrite\").save(table_loc)  "
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"SELECT * FROM odw_curated_db.vw_service_user"
				],
				"execution_count": null
			}
		]
	}
}