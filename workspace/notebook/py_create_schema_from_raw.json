{
	"name": "py_create_schema_from_raw",
	"properties": {
		"folder": {
			"name": "archive"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "harrisonPool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "0010e51d-f535-4fa9-a0f1-cee88ff3f4aa"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/harrisonPool",
				"name": "harrisonPool",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/harrisonPool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### Creates Schema of the raw file and saves it at `Standardised_Table_Definition`\n",
					"\n",
					"**NOTE: Only supports .csv raw files for now**"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"tags": [
						"parameters"
					]
				},
				"source": [
					"source_id=-1"
				],
				"execution_count": 125
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%run  /0-odw-source-to-raw/Fileshare/SAP_HR/py_0_source_to_raw_hr_functions"
				],
				"execution_count": 127
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%run /utils/py_mount_storage"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import json\n",
					"from pyspark.sql import SparkSession\n",
					"from notebookutils import mssparkutils\n",
					"spark = SparkSession.builder.getOrCreate()\n",
					"\n",
					"storage_account=mssparkutils.notebook.run('/utils/py_utils_get_storage_account')\n",
					"\n",
					"files_with_specific_sheets = [{\"filename\": \"Specialist_TPO.xlsx\", \"sheet\": \"MiPINS-SQL\"},{\"filename\": \"Specialist_Hedgerow\", \"sheet\": \"MiPINS-SQL\"},{\"filename\": \"Specialist_HH\", \"sheet\": \"MiPINS-SQL\"}]"
				],
				"execution_count": 128
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def get_latest_file(definition):\n",
					"    import calendar\n",
					"    from datetime import datetime, timedelta, date\n",
					"\n",
					"    source_container_path = \"abfss://odw-raw@\" + storage_account\n",
					"    if definition[\"Source_Frequency_Folder\"] == \"\":\n",
					"        source_folder = definition['Source_Folder'] + \"/\"\n",
					"    else:\n",
					"        source_folder = definition['Source_Folder'] + \"/\" + definition[\"Source_Frequency_Folder\"] + \"/\"\n",
					"\n",
					"    try:\n",
					"        date_folders = mssparkutils.fs.ls(source_container_path + source_folder)\n",
					"        date_folders = sorted(date_folders, key=lambda x: x.name, reverse=True)\n",
					"\n",
					"        for datex in date_folders:\n",
					"            source_folder_with_date = mssparkutils.fs.ls(source_container_path + source_folder + datex.name)\n",
					"            for file in source_folder_with_date:\n",
					"                if definition['Source_Filename_Start'] in file.name:\n",
					"                    return file\n",
					"    except:  \n",
					"        print('File not found for SourceID: ', definition['Source_ID'])\n",
					"        \n",
					"    print('File not found for SourceID: ', definition['Source_ID'])"
				],
				"execution_count": 129
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def generate_schema(file, definition):\n",
					"\n",
					"    import pandas as pd\n",
					"    import json\n",
					"    import re\n",
					"\n",
					"    if '.csv' in file.name.lower():\n",
					"        ext = '.csv'\n",
					"        df = spark.read.options(quote='\"', escape='\\\\', encoding='utf8', header=True).csv(file.path)\n",
					"        df = df.toPandas()\n",
					"\n",
					"    elif '.xlsx' in file.name.lower():\n",
					"        jobId = mssparkutils.env.getJobId()\n",
					"        mount_storage(path=file.path.replace(file.name,''))\n",
					"\n",
					"        ext = '.xlsx'\n",
					"        sheet_name = definition['Source_Sheet_Name'] if 'Source_Sheet_Name' in definition else 0\n",
					"        \n",
					"        # throwing some permission error - check later\n",
					"        df = pd.read_excel(f\"/synfs/{jobId}/temp_raw/{file.name}\", dtype=str, sheet_name=sheet_name, na_filter=False)\n",
					"    else:\n",
					"        return False\n",
					"\n",
					"    df = df.loc[:, ~df.columns.str.contains('^Unnamed')]\n",
					"    cols_orig = list(df.columns)\n",
					"    cols=[re.sub('[^0-9a-zA-Z]+', '_', i).lower() for i in cols_orig]\n",
					"    cols=[colm.rstrip('_') for colm in cols]\n",
					"    newlist = []\n",
					"\n",
					"    for i, v in enumerate(cols):\n",
					"        totalcount = cols.count(v)\n",
					"        count = cols[:i].count(v)\n",
					"        newlist.append(v + str(count + 1) if totalcount > 1 else v)\n",
					"\n",
					"    jsonex = {\"fields\":[\n",
					"            {\n",
					"            \"metadata\": {},\n",
					"            \"name\": \"ingested_datetime\",\n",
					"            \"type\": \"timestamp\",\n",
					"            \"nullable\": False\n",
					"            },\n",
					"            {\n",
					"            \"metadata\": {},\n",
					"            \"name\": \"expected_from\",\n",
					"            \"type\": \"timestamp\",\n",
					"            \"nullable\": False\n",
					"            },\n",
					"            {\n",
					"            \"metadata\": {},\n",
					"            \"name\": \"expected_to\",\n",
					"            \"type\": \"timestamp\",\n",
					"            \"nullable\": False\n",
					"            }]}\n",
					"            \n",
					"    for col in newlist:\n",
					"        obj = {\n",
					"            \"metadata\": {},\n",
					"            \"name\": col,\n",
					"            \"type\": \"string\",\n",
					"            \"nullable\": True\n",
					"            }\n",
					"        jsonex['fields'].append(obj)\n",
					"\n",
					"    json_to_write = json.dumps(jsonex)\n",
					"\n",
					"    output_schema_path = f\"abfss://odw-config@{storage_account}{definition['Standardised_Table_Definition']}\"\n",
					"\n",
					"\n",
					"    mssparkutils.fs.put(output_schema_path, json_to_write, True)\n",
					"    return True\n",
					""
				],
				"execution_count": 130
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"path_to_datalake = \"abfss://odw-config@\" + storage_account\n",
					"path_to_file = path_to_datalake + \"orchestration/orchestration.json\"\n",
					"df = spark.read.option(\"multiline\",\"true\").json(path_to_file)\n",
					"\n",
					"definitions = json.loads(df.toJSON().first())['definitions']\n",
					"definition = next((d for d in definitions if d['Source_ID'] == source_id), None)\n",
					"\n",
					"if definition:\n",
					"    file = get_latest_file(definition)\n",
					"    if file:\n",
					"        generate_schema(file, definition)\n",
					"        "
				],
				"execution_count": 131
			}
		]
	}
}