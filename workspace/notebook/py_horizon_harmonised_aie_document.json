{
	"name": "py_horizon_harmonised_aie_document",
	"properties": {
		"folder": {
			"name": "odw-harmonised"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw34",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "cbd7f25c-2f26-4fcc-a890-9786d7cd0c38"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw34",
				"name": "pinssynspodw34",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw34",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%run utils/py_logging_decorator"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"from pyspark.sql.types import IntegerType, ArrayType, StructType, StructField\n",
					"from pyspark.sql import Row\n",
					"from pyspark.sql.functions import *\n",
					"import json\n",
					"from datetime import datetime\n",
					"from notebookutils import mssparkutils"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Initialize Application Insight Logging functions"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"%run utils/py_utils_common_logging_output"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Define variables\n",
					"horizon_table = \"odw_standardised_db.aie_document_data\"\n",
					"spark_table_final = \"odw_harmonised_db.aie_document_data\"\n",
					"primary_key = 'TEMP_PK'\n",
					"\n",
					"# Initialize tracking variables\n",
					"start_exec_time = str(datetime.now())\n",
					"insert_count = 0\n",
					"update_count = 0\n",
					"delete_count = 0"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"# Initialize Application Insights logger\n",
					"app_insight_logger = ProcessingLogger()"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"try:\n",
					"    # Read and transform data from source\n",
					"    logInfo(f\"Reading data from {horizon_table}\")\n",
					"    results = spark.sql(f\"\"\"\n",
					"                    SELECT DISTINCT \n",
					"                        MD5(\n",
					"                            CONCAT(\n",
					"                                COALESCE(CAST(documentId AS INTEGER), ''), \n",
					"                                COALESCE(filename, ''), \n",
					"                                COALESCE(CAST(version AS INTEGER), '')\n",
					"                            )\n",
					"                        ) AS {primary_key}\n",
					"                        ,CAST(NULL AS LONG) AS AIEDocumentDataID\n",
					"                        ,documentId\n",
					"                        ,caseRef\n",
					"                        ,documentReference\n",
					"                        ,version\n",
					"                        ,examinationRefNo\n",
					"                        ,filename\n",
					"                        ,originalFilename\n",
					"                        ,size\n",
					"                        ,mime\n",
					"                        ,documentUri\n",
					"                        ,path\n",
					"                        ,virusCheckStatus\n",
					"                        ,fileMD5\n",
					"                        ,dateCreated\n",
					"                        ,lastModified\n",
					"                        ,caseType\n",
					"                        ,documentStatus\n",
					"                        ,redactedStatus\n",
					"                        ,publishedStatus\n",
					"                        ,datePublished\n",
					"                        ,documentType\n",
					"                        ,securityClassification\n",
					"                        ,sourceSystem\n",
					"                        ,origin\n",
					"                        ,owner\n",
					"                        ,author\n",
					"                        ,representative\n",
					"                        ,description\n",
					"                        ,stage\n",
					"                        ,filter1\n",
					"                        ,filter2\n",
					"\n",
					"                        ,\"0\" as Migrated\n",
					"                        ,\"Horizon\" as ODTSourceSystem\n",
					"                        ,NULL AS SourceSystemID\n",
					"                        ,to_timestamp(expected_from)  AS IngestionDate\n",
					"                        ,CAST(null as string) as ValidTo -- to avoid any null descrepancies\n",
					"                        ,'' as RowID\n",
					"                        ,'Y' as IsActive\n",
					"                    FROM\n",
					"                        {horizon_table} AS Doc\n",
					"                    WHERE\n",
					"                        expected_from = (SELECT MAX(expected_from) FROM {horizon_table})\n",
					"                \"\"\")\n",
					"        # Initial write to create temp table structure\n",
					"    logInfo(f\"Initial write to {spark_table_final}\")\n",
					"    results.write.format(\"delta\").mode(\"Overwrite\").option(\"overwriteSchema\", \"true\").partitionBy(\"IsActive\").saveAsTable(f\"{spark_table_final}\")\n",
					"    \n",
					"    # Create calculations view for internal IDs and IsActive flags\n",
					"    logInfo(\"Creating calculations for internal IDs and IsActive flags\")\n",
					"    spark.sql(f\"\"\"\n",
					"        CREATE OR REPLACE TEMPORARY VIEW vw_aie_document_data_calculations_base\n",
					"            AS\n",
					"            SELECT  \n",
					"                row_number() OVER(PARTITION BY {primary_key} ORDER BY IngestionDate DESC) AS ReverseOrderProcessed\n",
					"                ,row_number() OVER(ORDER BY IngestionDate asc, {primary_key} asc) AS AIEDocumentDataID\n",
					"                ,{primary_key}\n",
					"                ,IngestionDate\n",
					"                ,ValidTo\n",
					"                ,'0' AS Migrated\n",
					"                ,CASE row_number() OVER(PARTITION BY {primary_key} ORDER BY IngestionDate DESC)\n",
					"                    WHEN 1 THEN\n",
					"                        'Y'\n",
					"                    ELSE\n",
					"                        'N'\n",
					"                END AS IsActive                \n",
					"            FROM\n",
					"                {spark_table_final}\n",
					"        \"\"\")\n",
					"    \n",
					"    # Get calculated values for internal IDs\n",
					"    df_calcs = spark.sql(f\"\"\"\n",
					"                            SELECT\n",
					"                                CurrentRow.AIEDocumentDataID\n",
					"                                ,CurrentRow.{primary_key} \n",
					"                                ,CurrentRow.IngestionDate\n",
					"                                ,COALESCE(NULLIF(CurrentRow.ValidTo,''), NextRow.IngestionDate) AS ValidTo\n",
					"                                ,\"0\" AS Migrated\n",
					"                                ,CurrentRow.IsActive\n",
					"                            FROM\n",
					"                                vw_aie_document_data_calculations_base AS CurrentRow\n",
					"                                LEFT OUTER JOIN vw_aie_document_data_calculations_base AS NextRow\n",
					"                                    ON CurrentRow.{primary_key} = NextRow.{primary_key}\n",
					"                                    AND CurrentRow.ReverseOrderProcessed - 1 = NextRow.ReverseOrderProcessed\n",
					"                                ORDER BY currentRow.ReverseOrderProcessed\n",
					"                        \"\"\")\n",
					"    \n",
					"    df_calcs = df_calcs.withColumnRenamed(primary_key, f\"temp_{primary_key}\").withColumnRenamed(\"IngestionDate\", \"temp_IngestionDate\")\n",
					"    \n",
					"    # Get final result set with all data and RowID\n",
					"    results_final = spark.sql(f\"\"\"\n",
					"                        SELECT DISTINCT \n",
					"                            {primary_key}\n",
					"                            ,AIEDocumentDataID\n",
					"                            ,documentId\n",
					"                            ,caseRef\n",
					"                            ,documentReference\n",
					"                            ,version\n",
					"                            ,examinationRefNo\n",
					"                            ,filename\n",
					"                            ,originalFilename\n",
					"                            ,size\n",
					"                            ,mime\n",
					"                            ,documentUri\n",
					"                            ,path\n",
					"                            ,virusCheckStatus\n",
					"                            ,fileMD5\n",
					"                            ,dateCreated\n",
					"                            ,lastModified\n",
					"                            ,caseType\n",
					"                            ,documentStatus\n",
					"                            ,redactedStatus\n",
					"                            ,publishedStatus\n",
					"                            ,datePublished\n",
					"                            ,documentType\n",
					"                            ,securityClassification\n",
					"                            ,sourceSystem\n",
					"                            ,origin\n",
					"                            ,owner\n",
					"                            ,author\n",
					"                            ,representative\n",
					"                            ,description\n",
					"                            ,stage\n",
					"                            ,filter1\n",
					"                            ,filter2\n",
					"                            ,Migrated\n",
					"                            ,ODTSourceSystem\n",
					"                            ,IngestionDate\n",
					"                            ,ValidTo\n",
					"                            ,MD5(CONCAT(\n",
					"                                    IFNULL(AIEDocumentDataID, '.')\n",
					"                                    ,IFNULL(documentId,'.')\n",
					"                                    ,IFNULL(caseRef,'.')\n",
					"                                    ,IFNULL(documentReference,'.')\n",
					"                                    ,IFNULL(version,'.')\n",
					"                                    ,IFNULL(examinationRefno,'.')\n",
					"                                    ,IFNULL(filename,'.')\n",
					"                                    ,IFNULL(originalFilename,'.')\n",
					"                                    ,IFNULL(size,'.')\n",
					"                                    ,IFNULL(mime,'.')\n",
					"                                    ,IFNULL(documentUri,'.')\n",
					"                                    ,IFNULL(path,'.')\n",
					"                                    ,IFNULL(virusCheckStatus,'.')\n",
					"                                    ,IFNULL(fileMD5,'.')\n",
					"                                    ,IFNULL(dateCreated,'.')\n",
					"                                    ,IFNULL(lastModified,'.')\n",
					"                                    ,IFNULL(caseType,'.')\n",
					"                                    ,IFNULL(documentStatus,'.')\n",
					"                                    ,IFNULL(redactedStatus,'.')\n",
					"                                    ,IFNULL(publishedStatus,'.')\n",
					"                                    ,IFNULL(datePublished,'.')\n",
					"                                    ,IFNULL(documentType,'.')\n",
					"                                    ,IFNULL(securityClassification,'.')\n",
					"                                    ,IFNULL(sourceSystem,'.')\n",
					"                                    ,IFNULL(origin,'.')\n",
					"                                    ,IFNULL(owner,'.')\n",
					"                                    ,IFNULL(author,'.')\n",
					"                                    ,IFNULL(representative,'.')\n",
					"                                    ,IFNULL(description,'.')\n",
					"                                    ,IFNULL(stage\t,'.')\n",
					"                                    ,IFNULL(filter1,'.')\n",
					"                                    ,IFNULL(filter2,'.')\n",
					"                                    ,IFNULL(publishedStatus, '.')\n",
					"                                    ,IFNULL(Migrated, '.')\n",
					"                                    ,IFNULL(ODTSourceSystem, '.')\n",
					"                                    ,IFNULL(IngestionDate, '.')\n",
					"                                    ,IFNULL(ValidTo, '.')\n",
					"                                )\n",
					"                            ) AS RowID\n",
					"                            ,IsActive\n",
					"                        FROM \n",
					"                            {spark_table_final}\n",
					"                    \"\"\")\n",
					"    \n",
					"    # Prepare columns and join with calculations\n",
					"    columns = results_final.columns\n",
					"    results_clean = results_final.drop(\"AIEDocumentDataID\", \"ValidTo\", \"Migrated\", \"IsActive\")\n",
					"    \n",
					"    # Final merge and deduplication\n",
					"    logInfo(f\"Merging and de-duplicating data\")\n",
					"    final_df = results_clean.join(df_calcs, (df_calcs[f\"temp_{primary_key}\"] == results_clean[primary_key]) & (df_calcs[\"temp_IngestionDate\"] == results_clean[\"IngestionDate\"])).select(columns)\n",
					"    final_df = final_df.drop(primary_key).drop_duplicates()\n",
					"    \n",
					"    # Get record counts\n",
					"    insert_count = final_df.count()\n",
					"    \n",
					"    # Final write\n",
					"    logInfo(f\"Writing final data to {spark_table_final}\")\n",
					"    final_df.write.format(\"delta\").mode(\"Overwrite\").option(\"overwriteSchema\", \"true\").partitionBy(\"IsActive\").saveAsTable(f\"{spark_table_final}\")\n",
					"    \n",
					"    end_exec_time = str(datetime.now())\n",
					"    logInfo(f\"Successfully processed {spark_table_final} with {insert_count} records\")\n",
					"    \n",
					"    # Add successful result to logger\n",
					"    app_insight_logger.add_table_result(\n",
					"        delta_table_name=spark_table_final,\n",
					"        insert_count=insert_count,\n",
					"        update_count=update_count,\n",
					"        delete_count=delete_count,\n",
					"        table_result=\"success\",\n",
					"        start_exec_time=start_exec_time,\n",
					"        end_exec_time=end_exec_time\n",
					"    )\n",
					"    \n",
					"except Exception as e:\n",
					"    # Handle errors with proper logging\n",
					"    logError(f\"Error processing {spark_table_final}: {e}\")\n",
					"    error_message = app_insight_logger.format_error_message(e, max_length=800)\n",
					"    \n",
					"    end_exec_time = str(datetime.now())\n",
					"    app_insight_logger.add_table_result(\n",
					"        delta_table_name=spark_table_final,\n",
					"        insert_count=insert_count,\n",
					"        update_count=update_count,\n",
					"        delete_count=delete_count,\n",
					"        table_result=\"failed\",\n",
					"        start_exec_time=start_exec_time,\n",
					"        end_exec_time=end_exec_time,\n",
					"        error_message=error_message\n",
					"    )\n",
					"    \n",
					"    # Exit with the JSON result\n",
					"    mssparkutils.notebook.exit(app_insight_logger.generate_processing_results())"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Generate and exit with final logging results\n",
					"mssparkutils.notebook.exit(app_insight_logger.generate_processing_results())"
				],
				"execution_count": null
			}
		]
	}
}