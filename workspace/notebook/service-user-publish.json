{
	"name": "service-user-publish",
	"properties": {
		"folder": {
			"name": "odw-esb"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "25c7c9b2-27a3-4896-af73-71e3f43ed99d"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw",
				"name": "pinssynspodw",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Service-User Publish\n",
					"Checks the Service Bus for topics last accessed timestamp, gets all changes from the Change Data Feed and sends each record to the service bus topic. \n",
					"See https://learn.microsoft.com/en-us/samples/azure/azure-sdk-for-python/servicebus-samples/ for servicebus samples\n",
					""
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import json\n",
					"import pandas as pd\n",
					"def get_topic_accessed_at(servicebus_mgmt_client):\n",
					"    get_topic_runtime_properties = servicebus_mgmt_client.get_topic_runtime_properties(topic_name)\n",
					"    return(get_topic_runtime_properties.accessed_at_utc)    \n",
					"\n",
					"def send_single_message(sender,content,custom_props_attributes):\n",
					"    json_dict = json.loads(content)\n",
					"    custom_props = { key: json_dict[key] for key in json_dict if key in custom_props_attributes}\n",
					"    message = ServiceBusMessage(content,content_type='application/json',application_properties=custom_props)\n",
					"    sender.send_messages(message)\n",
					""
				],
				"execution_count": 28
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Sets the notebook variables"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"tags": [
						"parameters"
					]
				},
				"source": [
					"secret_name=\"servicebus-connectionstring\"\n",
					"kv_linked_service=\"ls_kv\"\n",
					"topic_name=\"service-user\"\n",
					"table_name=\"odw_curated_db.service_user\"\n",
					"custom_props_attributes=[\"_change_type\"]"
				],
				"execution_count": 29
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Get Servicebus connectionstring from Key Vault"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.sql import SparkSession\n",
					"spark = SparkSession.builder.getOrCreate()\n",
					"akv_name=spark.sparkContext.environment.get('keyVaultName', 'get')\n",
					"from notebookutils import mssparkutils\n",
					"conn_str = mssparkutils.credentials.getSecret(akv_name, secret_name, kv_linked_service)\n",
					""
				],
				"execution_count": 30
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Get Topic Accessed At timestamp"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from azure.servicebus.management import ServiceBusAdministrationClient\n",
					"with ServiceBusAdministrationClient.from_connection_string(conn_str) as servicebus_mgmt_client:\n",
					"    topic_accessed_at=get_topic_accessed_at(servicebus_mgmt_client)\n",
					"print(topic_accessed_at)"
				],
				"execution_count": 31
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Check the table history"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# from pyspark.sql import SparkSession\r\n",
					"# spark = SparkSession.builder.getOrCreate()\r\n",
					"# history_df = spark.sql(\"DESCRIBE HISTORY odw_curated_db.service_user\")\r\n",
					"# hist_df_pandas = history_df.toPandas()"
				],
				"execution_count": 32
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# print(hist_df_pandas['version'].values)"
				],
				"execution_count": 33
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# # if the history goes back to version 0 \r\n",
					"# import pandas as pd \r\n",
					"# if 0 in hist_df_pandas['version'].values:\r\n",
					"\r\n",
					"#     # version 0 datetime\r\n",
					"#     version_0_datetime = pd.Timestamp(hist_df_pandas[hist_df_pandas['version'] == 0]['timestamp'].values[0]).tz_localize('UTC').to_pydatetime()\r\n",
					"#     version_1_datetime = pd.Timestamp(hist_df_pandas[hist_df_pandas['version'] == 1]['timestamp'].values[0]).tz_localize('UTC').to_pydatetime()\r\n",
					"\r\n",
					"#     # is the topic accessed at more recent than the version\r\n",
					"#     if topic_accessed_at > version_0_datetime :\r\n",
					"#         starting_timestamp = topic_accessed_at\r\n",
					"    \r\n",
					"#     else: \r\n",
					"#         starting_timestamp = version_1_datetime\r\n",
					"# else:\r\n",
					"#     starting_timestamp = topic_accessed_at"
				],
				"execution_count": 34
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"starting_timestamp = '2023-10-23 13:50:16'"
				],
				"execution_count": 44
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"topic_accessed_at"
				],
				"execution_count": 42
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"DESCRIBE HISTORY odw_curated_db.service_user"
				],
				"execution_count": 36
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Get the latest changes from CDF and send messages"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"from azure.servicebus import ServiceBusClient, ServiceBusMessage\n",
					"servicebus_client = ServiceBusClient.from_connection_string(conn_str=conn_str, logging_enable=True)\n",
					"\n",
					"try:\n",
					"    cdf_df=(spark.read.format(\"delta\")\n",
					"        .table(table_name))\n",
					"    with servicebus_client:\n",
					"        sender = servicebus_client.get_topic_sender(topic_name=topic_name)\n",
					"        with sender:\n",
					"            df_json = cdf_df.toJSON()\n",
					"            row_count=df_json.count()\n",
					"            for row in df_json.collect(): \n",
					"                send_single_message(sender,row,custom_props_attributes)\n",
					"            print(\"Sent {} messages.\".format(row_count))\n",
					"\n",
					"except Exception as e:  \n",
					"        print(f\"{e}\") "
				],
				"execution_count": 47
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# TEST CODE TO SEND SIMPLE STRING MESSAGES\n",
					"\n",
					"# from azure.servicebus import ServiceBusClient, ServiceBusMessage\n",
					"# servicebus_client = ServiceBusClient.from_connection_string(conn_str=conn_str, logging_enable=True)\n",
					"\n",
					"# try:\n",
					"#     with servicebus_client:\n",
					"#         sender = servicebus_client.get_topic_sender(topic_name=topic_name)\n",
					"#         with sender:\n",
					"#             message = ServiceBusMessage(\"Single Message for Maria, not the pipeline again\")\n",
					"#             sender.send_messages(message)\n",
					"\n",
					"# except Exception as e:  \n",
					"#         print(f\"{e}\") "
				],
				"execution_count": 38
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql \n",
					"\n",
					"SELECT * FROM odw_curated_db.service_user"
				],
				"execution_count": 39
			}
		]
	}
}