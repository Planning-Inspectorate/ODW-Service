{
	"name": "py_0_log_copy_activity_output",
	"properties": {
		"folder": {
			"name": "0-odw-source-to-raw/Fileshare/SAP_HR"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "e331fdce-b61f-472f-ae0b-370e06de47cd"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "python"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw",
				"name": "pinssynspodw",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.2",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"%run /utils/py_logging_decorator"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"tags": [
						"parameters"
					]
				},
				"source": [
					"output = \"\"\r\n",
					"filepath = \"\"\r\n",
					"\r\n",
					"jsonschema = \"\"\"{\"fields\": [{\"metadata\": {},\"name\": \"Process_Date\",\"nullable\": false,\"type\": \"timestamp\"}, {\"metadata\": {},\"name\": \"Filepath\",\"nullable\":false,\"type\": \"string\"},{\"metadata\": {},\"name\": \"File_Modified_Date\",\"nullable\": false,\"type\": \"timestamp\"}]}\"\"\"\r\n",
					"db_name =  \"odw_config_db\"\r\n",
					"table_name = \"datalabs_log\"\r\n",
					"secret_name=\"datalab-connectionstring\"\r\n",
					"kv_linked_service=\"ls_kv\"\r\n",
					"share_name =\"datalab\"\r\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.sql import SparkSession\r\n",
					"spark = SparkSession.builder.getOrCreate()\r\n",
					"akv_name=spark.sparkContext.environment.get('keyVaultName', 'get')"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"@logging_to_appins\r\n",
					"def log_copy_output(output:str, filepath:str, akv_name:str, secret_name:str, kv_linked_service:str, share_name:str, jsonschema:str, db_name:str, table_name:str):\r\n",
					"    '''\r\n",
					"\r\n",
					"    '''\r\n",
					"    import logging\r\n",
					"    logger = logging.getLogger(__name__)\r\n",
					"    if output == \"Succeeded\":\r\n",
					"        logger.info(f\"S2R-SAPHR: Copy activity succeeded for {filepath}\")\r\n",
					"\r\n",
					"        from notebookutils import mssparkutils\r\n",
					"        creds = mssparkutils.credentials.getSecret(akv_name, secret_name, kv_linked_service)\r\n",
					"\r\n",
					"        from azure.storage.fileshare import ShareFileClient\r\n",
					"        file_client = ShareFileClient.from_connection_string(conn_str=creds, share_name=share_name, file_path=filepath)\r\n",
					"        fileprops = file_client.get_file_properties()\r\n",
					"        \r\n",
					"        import datetime\r\n",
					"        dt = datetime.datetime.now()\r\n",
					"\r\n",
					"        from pyspark.sql.types import StructType\r\n",
					"        import json\r\n",
					"        from pyspark.sql import SparkSession\r\n",
					"        spark = SparkSession.builder.getOrCreate()\r\n",
					"        schema = StructType.fromJson(json.loads(jsonschema))\r\n",
					"        new_raw_file = spark.createDataFrame([[dt, filepath, fileprops.last_modified]], schema)\r\n",
					"        new_raw_file.write.format(\"delta\").mode(\"append\").saveAsTable(f\"{db_name}.{table_name}\")\r\n",
					"\r\n",
					"    else:\r\n",
					"        raise Exception(f\"S2R-SAPHR: Transfer to raw for file {filepath} has failed\")\r\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"log_copy_output(output, filepath, akv_name, secret_name, kv_linked_service, share_name, jsonschema, db_name, table_name)"
				],
				"execution_count": null
			}
		]
	}
}