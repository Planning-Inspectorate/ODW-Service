{
	"name": "py_unit_tests_nsip_document",
	"properties": {
		"folder": {
			"name": "utils/unit-tests"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "14e96f12-d5aa-42e2-887c-415b82789d17"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw",
				"name": "pinssynspodw",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import json\n",
					"from pyspark.sql.types import *\n",
					"from pyspark.sql import DataFrame\n",
					"from pyspark.sql import functions as F\n",
					"import pprint"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"entity_name: str = 'nsip-document'\n",
					"folder_name: str = 'nsip-document'\n",
					"std_db_name: str = 'odw_standardised_db'\n",
					"hrm_db_name: str = 'odw_harmonised_db'\n",
					"curated_db_name: str = 'odw_curated_db'\n",
					"horizon_std_table_name: str = \"document_meta_data\"\n",
					"aie_std_table_name: str = \"aie_document_data\"\n",
					"aie_hrm_table_name: str = \"aie_document_data\"\n",
					"std_table_name: str = 'sb_nsip_document'\n",
					"hrm_table_name: str = 'sb_nsip_document'\n",
					"hrm_table_final: str = 'nsip_document'\n",
					"curated_table_name: str = 'nsip_document'"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"horizon_std_df = spark.table(f\"{std_db_name}.{horizon_std_table_name}\")\r\n",
					"aie_std_df = spark.table(f\"{std_db_name}.{aie_std_table_name}\")\r\n",
					"aie_hrm_df = spark.table(f\"{hrm_db_name}.{aie_hrm_table_name}\")\r\n",
					"hrm_final_df = spark.table(f\"{hrm_db_name}.{hrm_table_final}\")\r\n",
					"hrm_final_df_active = hrm_final_df.filter(\"IsActive = 'Y'\")\r\n",
					"curated_df = spark.table(f\"{curated_db_name}.{curated_table_name}\")\r\n",
					"sb_std_df = spark.table(f\"{std_db_name}.{std_table_name}\")\r\n",
					"sb_hrm_df = spark.table(f\"{hrm_db_name}.{hrm_table_name}\")\r\n",
					"horizon_documentIds = horizon_std_df.select(\"dataId\")\r\n",
					"aie_std_documentIds = aie_std_df.select(\"documentId\")\r\n",
					"aie_hrm_documentIds = aie_hrm_df.select(\"documentId\")\r\n",
					"hrm_final_documentIds = hrm_final_df.select(\"documentId\")\r\n",
					"sb_std_documentIds = sb_std_df.select(\"documentId\")\r\n",
					"sb_hrm_documentIds = sb_hrm_df.select(\"documentId\")\r\n",
					"curated_documentIds = curated_df.select(\"documentId\")\r\n",
					"aie_appeals_documentIds = aie_std_documentIds.intersect(horizon_documentIds)\r\n",
					"aie_appeals_documents_count = aie_appeals_documentIds.count()"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#keep track of the exitCodes, if the exit code is not zero then we've had failures, we flip the boolean\n",
					"exitCode: int = 0"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"data_model_columns = [\n",
					"  \"documentId\",\n",
					"\t\t\"caseId\",\n",
					"\t\t\"caseRef\",\n",
					"\t\t\"documentReference\",\n",
					"\t\t\"version\",\n",
					"\t\t\"examinationRefNo\",\n",
					"\t\t\"filename\",\n",
					"\t\t\"originalFilename\",\n",
					"\t\t\"size\",\n",
					"\t\t\"mime\",\n",
					"\t\t\"documentURI\",\n",
					"\t\t\"publishedDocumentURI\",\n",
					"\t\t\"path\",\n",
					"\t\t\"virusCheckStatus\",\n",
					"\t\t\"fileMD5\",\n",
					"\t\t\"dateCreated\",\n",
					"\t\t\"lastModified\",\n",
					"\t\t\"caseType\",\n",
					"\t\t\"redactedStatus\",\n",
					"\t\t\"publishedStatus\",\n",
					"\t\t\"datePublished\",\n",
					"\t\t\"documentType\",\n",
					"\t\t\"securityClassification\",\n",
					"\t\t\"sourceSystem\",\n",
					"\t\t\"origin\",\n",
					"\t\t\"owner\",\n",
					"\t\t\"author\",\n",
					"    \"authorWelsh\",\n",
					"\t\t\"representative\",\n",
					"\t\t\"description\",\n",
					"    \"descriptionWelsh\",\n",
					"\t\t\"documentCaseStage\",\n",
					"\t\t\"filter1\",\n",
					"    \"filter1Welsh\",\n",
					"\t\t\"filter2\",\n",
					"\t\t\"horizonFolderId\",\n",
					"\t\t\"transcriptId\"\n",
					"]"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%run /utils/unit-tests/py_unit_tests_functions"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"sb_std_schema = create_spark_schema(std_db_name, entity_name)\n",
					"sb_std_table_schema = spark.table(f\"{std_db_name}.{std_table_name}\").schema\n",
					"sb_hrm_schema = create_spark_schema(hrm_db_name, entity_name)\n",
					"sb_hrm_table_schema = spark.table(f\"{hrm_db_name}.{hrm_table_name}\").schema"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Compare schemas"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"std_schema_correct: bool = test_compare_schemas(sb_std_schema, sb_std_table_schema)\n",
					"exitCode += int(not std_schema_correct)\n",
					"print(f\"Service bus standardised schema correct: {std_schema_correct}\\nTable: {std_db_name}.{std_table_name}\\nDifferences shown above (if any)\")\n",
					"hrm_schema_correct: bool = test_compare_schemas(sb_hrm_schema, sb_hrm_table_schema)\n",
					"print(f\"Service bus harmonised schema correct: {hrm_schema_correct}\\nTable: {hrm_db_name}.{hrm_table_name}\\nDifferences shown above (if any)\")\n",
					"exitCode += int(not hrm_schema_correct)"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Compare service bus standardised with harmonised\n",
					"Should be the same count"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"standardised_count, harmonised_count, counts_match = test_std_same_rows_hrm(std_table_name, hrm_table_name)\n",
					"print(f\"Standardised Count: {standardised_count: ,}\\nHarmonised Count: {harmonised_count: ,}\\nCounts match: {counts_match}\")\n",
					"\n",
					"if standardised_count > harmonised_count:\n",
					"    print(f\"{standardised_count - harmonised_count} rows from Standardised are missing in Harmonised.\" )\n",
					"    differentiate_std_and_hrm(f\"{std_db_name}.{std_table_name}\", f\"{hrm_db_name}.{hrm_table_name}\")\n",
					"    #this is classed as an error\n",
					"    exitCode += 1 "
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Compare final harmonised table (if combined with Horizon) with curated table\n",
					"Comparing where IsActive = Y in harmonised = curated row count"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"harmonised_final_count, curated_count, counts_match = test_curated_row_count(hrm_table_final, curated_table_name, data_model_columns)\n",
					"print(f\"Harmonised Final Count: {harmonised_final_count: ,}\\nCurated Count: {curated_count: ,}\\nCounts match: {counts_match}\")\n",
					"exitCode += int(not counts_match)"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Trace service bus data from standardised to harmonised\n",
					"We need to make sure the data has loaded through correctly. To do this efficiently, we will select a sample record and check that the data is maintained as it moves through the medallian architecture."
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"SELECT * FROM  odw_standardised_db.sb_nsip_document\n",
					"where documentid = '1fc876c6-f469-411a-9940-256179560b43'\n",
					"order by ingested_datetime\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"SELECT * FROM  odw_harmonised_db.sb_nsip_document\n",
					"where documentid = '1fc876c6-f469-411a-9940-256179560b43'\n",
					"order by IngestionDate\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#### Trace Horizon data to Harmonised"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"SELECT DISTINCT *\n",
					"\n",
					"FROM odw_standardised_db.document_meta_data\n",
					"\n",
					"WHERE dataId = '15289699' \n",
					"    AND expected_from = (SELECT max(expected_from) FROM odw_standardised_db.document_meta_data)\n",
					"\n",
					"ORDER BY ingested_datetime"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"SELECT DISTINCT *\n",
					"\n",
					"FROM odw_harmonised_db.nsip_document\n",
					"\n",
					"WHERE documentid = '15289699'\n",
					"    \n",
					"ORDER BY ingestiondate DESC"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#### Documents Metadata and AIE joined correctly"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"SELECT DISTINCT *\n",
					"\n",
					"FROM odw_standardised_db.document_meta_data\n",
					"\n",
					"WHERE dataId = '15258121' \n",
					"    AND expected_from = (SELECT max(expected_from) FROM odw_standardised_db.document_meta_data)\n",
					"\n",
					"ORDER BY ingested_datetime"
				],
				"execution_count": 49
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"SELECT DISTINCT * FROM odw_harmonised_db.aie_document_data WHERE documentId = '15258121' AND IsActive = 'Y';\n",
					"SELECT DISTINCT * FROM odw_harmonised_db.nsip_document WHERE documentId = '15258121' AND IsActive = 'Y';"
				],
				"execution_count": 50
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### Horizon and Service Bus data successfully combined and flags set appropriately"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"documentId = '33731488'\n",
					"\n",
					"df_hzn_std = spark.sql(f\"select * from {std_db_name}.{horizon_std_table_name} where dataId = '{documentId}' and expected_from = (select max(expected_from) from {std_db_name}.{horizon_std_table_name})\")\n",
					"df_sb_hrm = spark.sql(f\"select * from {hrm_db_name}.{hrm_table_name} where documentid = '{documentId}' order by IngestionDate\")\n",
					"df_hrm_final = spark.sql(f\"select * from {hrm_db_name}.{hrm_table_final} where documentid = '{documentId}' order by IngestionDate\")\n",
					"df_cur = spark.sql(f\"select * from {curated_db_name}.{curated_table_name} where documentid = '{documentId}'\")\n",
					"\n",
					"\n",
					"display(df_hzn_std)\n",
					"display(df_sb_hrm)\n",
					"display(df_hrm_final)\n",
					"display(df_cur)"
				],
				"execution_count": 51
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"mssparkutils.notebook.exit(exitCode)"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"\n",
					"data: DataFrame = spark.sql(\"SELECT * FROM odw_curated_db.nsip_document\")\n",
					"data.printSchema()"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def test_sb_std_to_sb_hrm_no_dropping_records(sb_std_table: str, sb_hrm_table: str) -> bool:\n",
					"    df: DataFrame = spark.sql(f\"\"\"\n",
					"    select documentId\n",
					"    from {std_db_name}.{sb_std_table}\n",
					"    where documentId not in\n",
					"    (\n",
					"        select documentId\n",
					"        from {hrm_db_name}.{sb_hrm_table}\n",
					"    )\n",
					"    \"\"\")\n",
					"\n",
					"    return df.count() == 0"
				],
				"execution_count": 28
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def test_sb_hrm_to_hrm_final_no_dropping_records(sb_hrm_table: str, hrm_table_final: str) -> bool:\n",
					"    df: DataFrame = spark.sql(f\"\"\"\n",
					"    select documentId\n",
					"    from {hrm_db_name}.{sb_hrm_table}\n",
					"    where documentId not in\n",
					"    (\n",
					"        select documentId\n",
					"        from {hrm_db_name}.{hrm_table_final}\n",
					"    )\n",
					"    \"\"\")\n",
					"\n",
					"    return df.count() == 0"
				],
				"execution_count": 29
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def test_hrm_to_curated_no_dropping_records(hrm_table_final: str, curated_table_name: str) -> bool:\n",
					"    df: DataFrame = spark.sql(f\"\"\"\n",
					"    select documentId\n",
					"    from {hrm_db_name}.{hrm_table_final}\n",
					"    where IsActive = 'Y'\n",
					"    and documentId not in\n",
					"    (\n",
					"        select documentId\n",
					"        from {curated_db_name}.{curated_table_name}\n",
					"    )\n",
					"    \"\"\")\n",
					"\n",
					"    return df.count() == 0"
				],
				"execution_count": 30
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def test_horizon_to_hrm_final_no_dropping_records(horizon_std_table_name: str, hrm_table_final: str) -> bool:\n",
					"    df: DataFrame = spark.sql(f\"\"\"\n",
					"    select dataId\n",
					"    from {std_db_name}.{horizon_std_table_name}\n",
					"    where ingested_datetime = (select max(ingested_datetime) from {std_db_name}.{horizon_std_table_name})\n",
					"    and dataId not in\n",
					"    (\n",
					"        select documentId\n",
					"        from {hrm_db_name}.{hrm_table_final}\n",
					"    )\n",
					"    \"\"\")\n",
					"\n",
					"    return df.count() == 0"
				],
				"execution_count": 41
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def test_aie_std_to_hrm_no_dropping_records(aie_std_table_name: str, aie_hrm_table_name: str) -> bool:\n",
					"    df: DataFrame = aie_std_documentIds.subtract(aie_hrm_documentIds)\n",
					"    return df.count() == 0 "
				],
				"execution_count": 32
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def test_aie_hrm_to_hrm_final_no_dropping_records(aie_hrm_table_name: str, hrm_table_final: str) -> bool:\n",
					"    if aie_appeals_documents_count > 0:\n",
					"        df: DataFrame = aie_hrm_documentIds.subtract(hrm_final_documentIds)\n",
					"        return df.count() == 0\n",
					"    else:\n",
					"        return True"
				],
				"execution_count": 33
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def test_document_row_counts_match(hrm_table_final: str, curated_table_name: str) -> DataFrame:\r\n",
					"    # Count rows per documentId in harmonised final table\r\n",
					"    hrm_final_counts = hrm_final_df_active.groupBy(\"documentId\").agg(F.count(\"*\").alias(\"hrm_final_count\"))\r\n",
					"\r\n",
					"    # Count rows per documentId in curated table\r\n",
					"    curated_counts = curated_df.groupBy(\"documentId\").agg(F.count(\"*\").alias(\"curated_count\"))\r\n",
					"\r\n",
					"    # Join both tables on documentId to compare the counts\r\n",
					"    comparison_df = hrm_final_counts.join(curated_counts, \"documentId\", how=\"outer\")\r\n",
					"\r\n",
					"    comparison_df = comparison_df.withColumn(\"count_difference\", F.col(\"hrm_final_count\") - F.col(\"curated_count\"))\r\n",
					"\r\n",
					"    non_zero_differences = comparison_df.filter(\"count_difference > 0\")\r\n",
					"\r\n",
					"    return non_zero_differences.count() == 0\r\n",
					""
				],
				"execution_count": 34
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"display(test_document_row_counts_match(hrm_table_final, curated_table_name))"
				],
				"execution_count": 35
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"print(f\"Service bus std to hrm no documentIds dropped: {test_sb_std_to_sb_hrm_no_dropping_records(std_table_name, hrm_table_name)}\")"
				],
				"execution_count": 37
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"print(f\"Service bus hrm to hrm table final no documentIds dropped: {test_sb_hrm_to_hrm_final_no_dropping_records(hrm_table_name, hrm_table_final)}\")"
				],
				"execution_count": 38
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"print(f\"hrm table final to curated no documentIds dropped: {test_hrm_to_curated_no_dropping_records(hrm_table_final, curated_table_name)}\")"
				],
				"execution_count": 39
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"print(f\"Horizon std table to hrm table final no documentIds dropped: {test_horizon_to_hrm_final_no_dropping_records(horizon_std_table_name, hrm_table_final)}\")"
				],
				"execution_count": 42
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"print(f\"AIE std table to hrm table no documentIds dropped: {test_aie_std_to_hrm_no_dropping_records(aie_std_table_name, aie_hrm_table_name)}\")"
				],
				"execution_count": 43
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"print(f\"AIE hrm table to hrm table final no documentIds dropped: {test_aie_hrm_to_hrm_final_no_dropping_records(aie_hrm_table_name, hrm_table_final)}\")"
				],
				"execution_count": 44
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"print(f\"Document row counts match for each document in harmonised final to curated: {test_document_row_counts_match(hrm_table_final, curated_table_name)}\")"
				],
				"execution_count": 45
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"SELECT * FROM odw_curated_db.nsip_document where caseref in ('TR050004','EN010080', 'EN010082', 'TR030003') order by caseref"
				],
				"execution_count": 53
			}
		]
	}
}