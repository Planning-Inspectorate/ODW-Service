{
	"name": "vw_dim_HR_gender",
	"properties": {
		"folder": {
			"name": "odw-curated/curatedviews"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "f58cf669-dfc1-4708-9211-d9379d6146ea"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw",
				"name": "pinssynspodw",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#### The purpose of this notebook is to read data from Harmoised layer and build a view & table for Power BI use.\n",
					"\n",
					"**Author** &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   **Created Date** &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; **Description**  \n",
					"Prathap Adicherla &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;01-April-2025 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Gender  details Covered in here;"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"%run utils/py_logging_decorator"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"source": [
					"\n",
					"try:\n",
					"    logInfo(\"Starting HR Gender dimension setup\")\n",
					"    \n",
					"    # Create the view if it doesn't exist\n",
					"    logInfo(\"Creating view odw_curated_db.vw_dim_HR_Gender\")\n",
					"    \n",
					"    # We need to use Python to execute SQL with error handling instead of %%sql magic\n",
					"    spark.sql(\"\"\"\n",
					"    CREATE OR REPLACE VIEW odw_curated_db.vw_dim_HR_Gender AS \n",
					"    SELECT DISTINCT \n",
					"        CASE GenderKey \n",
					"            WHEN 'Male' THEN 1 \n",
					"            WHEN 'Female' THEN 2 \n",
					"            ELSE NULL\n",
					"        END AS dim_gender_key,\n",
					"        CASE GenderKey \n",
					"            WHEN 'Male' THEN 'Male'\n",
					"            WHEN 'Female' THEN 'Female'\n",
					"            WHEN '' THEN 'Unknown'\n",
					"            WHEN NULL THEN 'NULL'\n",
					"            ELSE 'Unknown'\n",
					"        END AS Gender\n",
					"    FROM odw_harmonised_db.hist_SAP_HR\n",
					"    \"\"\")\n",
					"    logInfo(\"Successfully created view odw_curated_db.vw_dim_HR_Gender\")\n",
					"    \n",
					"    # Get count of distinct genders in view\n",
					"    gender_count = spark.sql(\"SELECT COUNT(*) as count FROM odw_curated_db.vw_dim_HR_Gender\").collect()[0]['count']\n",
					"    logInfo(f\"View contains {gender_count} distinct gender records\")\n",
					"    \n",
					"    # Drop the table if it exists\n",
					"    logInfo(\"Dropping table odw_curated_db.pbi_dim_HR_Gender if it exists\")\n",
					"    spark.sql(\"\"\"\n",
					"    DROP TABLE IF EXISTS odw_curated_db.pbi_dim_HR_Gender\n",
					"    \"\"\")\n",
					"    logInfo(\"Table dropped or did not exist\")\n",
					"    \n",
					"    # Create the table with the view data\n",
					"    logInfo(\"Creating table odw_curated_db.pbi_dim_HR_Gender from view\")\n",
					"    spark.sql(\"\"\"\n",
					"    CREATE TABLE odw_curated_db.pbi_dim_HR_Gender\n",
					"    USING delta\n",
					"    AS\n",
					"    SELECT * FROM odw_curated_db.vw_dim_HR_Gender\n",
					"    \"\"\")\n",
					"    \n",
					"    # Get count of records in created table\n",
					"    table_count = spark.sql(\"SELECT COUNT(*) as count FROM odw_curated_db.pbi_dim_HR_Gender\").collect()[0]['count']\n",
					"    logInfo(f\"Created table with {table_count} records\")\n",
					"    \n",
					"    # Final success message\n",
					"    logInfo(\"HR Gender dimension setup completed successfully\")\n",
					"\n",
					"except Exception as e:\n",
					"    # Log the exception in detail\n",
					"    logError(f\"Error in HR Gender dimension setup: {str(e)}\")\n",
					"    logException(e)\n",
					"    \n",
					"    # Re-raise the exception to ensure the notebook fails properly\n",
					"    raise e\n",
					"finally:\n",
					"    # Always flush logs regardless of success or failure\n",
					"    logInfo(\"Flushing logs\")\n",
					"    flushLogging()"
				],
				"execution_count": 4
			}
		]
	}
}