{
	"name": "Horizon_appeals_events_harmonised",
	"properties": {
		"folder": {
			"name": "odw-harmonised/Appeals Event"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "b97b2ae6-c200-4f18-9a3b-a704c46cb0e8"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw",
				"name": "pinssynspodw",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"-- First step is to work out the data in standardised that we need to move to harmonised\r\n",
					"CREATE OR REPLACE TEMPORARY VIEW vw_Horizon_appeals_event\r\n",
					"AS\r\n",
					"SELECT\r\n",
					"    CONCAT(raw.casenumber, '-',raw.eventId) AS eventId\r\n",
					"    ,raw.caseReference\r\n",
					"    ,raw.eventType\r\n",
					"    ,raw.eventName\r\n",
					"    ,raw.eventstatus\r\n",
					"    ,raw.isUrgent\r\n",
					"    ,raw.eventPublished\r\n",
					"    ,raw.eventStartDatetime\r\n",
					"    ,raw.eventEndDatetime\r\n",
					"    ,raw.notificationOfSitevisit\r\n",
					"    ,raw.AddressLine1\r\n",
					"    ,raw.AddressLine2\r\n",
					"    ,raw.AddressTown\r\n",
					"    ,raw.AddressCounty\r\n",
					"    ,raw.AddressPostcode\r\n",
					"    ,0 AS Migrated\r\n",
					"    ,'Horizon' AS ODTSourceSystem\r\n",
					"    ,9 AS SourceSystemID -- ID for appeals in odw_harmonised_db.main_sourcesystem_fact\r\n",
					"    ,raw.ingested_datetime AS IngestionDate\r\n",
					"    ,NULL AS ValidTo\r\n",
					"    ,md5(\r\n",
					"        concat(\r\n",
					"                IFNULL(raw.eventId,'.')\r\n",
					"                ,IFNULL(raw.caseReference,'.')\r\n",
					"                ,IFNULL(raw.eventtype,'.')\r\n",
					"                ,IFNULL(raw.eventname,'.')\r\n",
					"                ,IFNULL(raw.eventstatus,'.')\r\n",
					"                ,IFNULL(CAST(raw.isurgent AS String),'.')\r\n",
					"                ,IFNULL(CAST(raw.eventpublished AS String),'.')\r\n",
					"                ,IFNULL(raw.eventstartdatetime,'.')\r\n",
					"                ,IFNULL(raw.eventenddatetime,'.')\r\n",
					"                ,IFNULL(raw.notificationofsitevisit,'.')\r\n",
					"                ,IFNULL(raw.addressLine1,'.')\r\n",
					"                ,IFNULL(raw.addressLine2,'.')\r\n",
					"                ,IFNULL(raw.addressTown,'.')\r\n",
					"                ,IFNULL(raw.addressCounty,'.')\r\n",
					"                ,IFNULL(raw.addressPostcode,'.')\r\n",
					"    )) AS RowID\r\n",
					"   ,CASE\r\n",
					"        WHEN From_ODT.eventId IS NOT NULL THEN\r\n",
					"           'N' -- Service bus is the master, never overwrite data that has come from that source. Not going this means we will end up in a perminant update process between ODT and Horizon - or updating data that should be updated in ODT not Horizon\r\n",
					"        WHEN Newer_record.eventID IS NOT NULL THEN\r\n",
					"            'N' -- Never overwrite newer data sets\r\n",
					"        ELSE\r\n",
					"            'Y'\r\n",
					"    END AS IsActive\r\n",
					"FROM \r\n",
					"    odw_standardised_db.horizon_appeals_event AS raw\r\n",
					"    INNER JOIN (\r\n",
					"                SELECT -- Get only the latest data for cases that haven't been migrated\r\n",
					"                    Horizon.casenumber\r\n",
					"                    ,Horizon.eventId\r\n",
					"                    ,MAX(Horizon.ingested_datetime) AS Last_update\r\n",
					"                FROM\r\n",
					"                    odw_standardised_db.horizon_appeals_event AS Horizon\r\n",
					"                GROUP BY\r\n",
					"                    Horizon.casenumber\r\n",
					"                    ,Horizon.eventId) AS Dedupe\r\n",
					"        ON raw.casenumber = Dedupe.casenumber\r\n",
					"        AND raw.casenumber = Dedupe.casenumber\r\n",
					"        AND raw.ingested_datetime = Dedupe.Last_update\r\n",
					"    LEFT OUTER JOIN (SELECT DISTINCT \r\n",
					"                        Target.eventId \r\n",
					"                    FROM \r\n",
					"                       odw_harmonised_db.sb_appeal_event AS Target \r\n",
					"                    WHERE \r\n",
					"                        Target.ODTSourceSystem = 'ODT') AS From_ODT\r\n",
					"        ON CONCAT(raw.casenumber, '-',raw.eventId) = From_ODT.eventId\r\n",
					"    LEFT OUTER JOIN (SELECT  \r\n",
					"                        Target.eventId \r\n",
					"                        ,MAX(IngestionDate) AS Latest_Record\r\n",
					"                    FROM \r\n",
					"                        odw_harmonised_db.sb_appeal_event AS Target \r\n",
					"                    WHERE \r\n",
					"                       Target.ODTSourceSystem = 'Horizon' \r\n",
					"                    GROUP BY\r\n",
					"                        Target.eventId) AS Newer_record\r\n",
					"        ON CONCAT(raw.casenumber, '-',raw.eventId) = Newer_record.eventId\r\n",
					"        AND raw.ingested_datetime < Newer_record.Latest_Record\r\n",
					""
				],
				"execution_count": 16
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"-- Need to add next step of working out if we have an insert or an update and handling appropriately. For updates need to also set isActive to N on existing records\r\n",
					"\r\n",
					"SELECT -- Step 1: Identify net new records\r\n",
					"    raw.eventId\r\n",
					"    ,raw.caseReference\r\n",
					"    ,raw.eventType\r\n",
					"    ,raw.eventName\r\n",
					"    ,raw.eventstatus\r\n",
					"    ,raw.isUrgent\r\n",
					"    ,raw.eventPublished\r\n",
					"    ,raw.eventStartDatetime\r\n",
					"    ,raw.eventEndDatetime\r\n",
					"    ,raw.notificationOfSitevisit\r\n",
					"    ,raw.AddressLine1\r\n",
					"    ,raw.AddressLine2\r\n",
					"    ,raw.AddressTown\r\n",
					"    ,raw.AddressCounty\r\n",
					"    ,raw.AddressPostcode\r\n",
					"    ,raw.Migrated\r\n",
					"    ,raw.ODTSourceSystem\r\n",
					"    ,raw.SourceSystemID -- ID for appeals in odw_harmonised_db.main_sourcesystem_fact\r\n",
					"    ,raw.IngestionDate\r\n",
					"    ,raw.ValidTo\r\n",
					"    ,raw.RowID\r\n",
					"    ,raw.IsActive\r\n",
					"    ,'Insert' AS UpdateMode\r\n",
					"FROM\r\n",
					"    vw_Horizon_appeals_event AS raw\r\n",
					"    LEFT OUTER JOIN odw_harmonised_db.sb_appeal_event AS Target \r\n",
					"        ON raw.eventId = Target.eventId\r\n",
					"WHERE\r\n",
					"    Target.eventId IS NULL\r\n",
					"UNION -- Using union to deal with interdupes\r\n",
					"SELECT -- Step 1: Identify records that are updates\r\n",
					"    raw.eventId\r\n",
					"    ,raw.caseReference\r\n",
					"    ,raw.eventType\r\n",
					"    ,raw.eventName\r\n",
					"    ,raw.eventstatus\r\n",
					"    ,raw.isUrgent\r\n",
					"    ,raw.eventPublished\r\n",
					"    ,raw.eventStartDatetime\r\n",
					"    ,raw.eventEndDatetime\r\n",
					"    ,raw.notificationOfSitevisit\r\n",
					"    ,raw.AddressLine1\r\n",
					"    ,raw.AddressLine2\r\n",
					"    ,raw.AddressTown\r\n",
					"    ,raw.AddressCounty\r\n",
					"    ,raw.AddressPostcode\r\n",
					"    ,raw.Migrated\r\n",
					"    ,raw.ODTSourceSystem\r\n",
					"    ,raw.SourceSystemID -- ID for appeals in odw_harmonised_db.main_sourcesystem_fact\r\n",
					"    ,raw.IngestionDate\r\n",
					"    ,raw.ValidTo\r\n",
					"    ,raw.RowID\r\n",
					"    ,raw.IsActive\r\n",
					"    ,'Update' AS UpdateMode\r\n",
					"FROM\r\n",
					"    vw_Horizon_appeals_event AS raw\r\n",
					"    INNER JOIN odw_harmonised_db.sb_appeal_event AS Target \r\n",
					"        ON raw.eventId = Target.eventId\r\n",
					"        AND raw.RowID <> Target.RowID\r\n",
					"        AND raw.IsActive = 'Y' -- Only care about updates for records that are active as we could have older records we've never seen before\r\n",
					"        AND Target.IsActive = 'Y'\r\n",
					"UNION -- Using union to deal with interdupes\r\n",
					"SELECT -- Step 1: Identify records that are updates\r\n",
					"    Target.eventId\r\n",
					"    ,Target.caseReference\r\n",
					"    ,Target.eventType\r\n",
					"    ,Target.eventName\r\n",
					"    ,Target.eventstatus\r\n",
					"    ,CAST(Target.isUrgent AS boolean) AS isUrgent\r\n",
					"    ,CAST(Target.eventPublished AS boolean) AS eventPublished\r\n",
					"    ,Target.eventStartDatetime\r\n",
					"    ,Target.eventEndDatetime\r\n",
					"    ,Target.notificationOfSitevisit\r\n",
					"    ,Target.AddressLine1\r\n",
					"    ,Target.AddressLine2\r\n",
					"    ,Target.AddressTown\r\n",
					"    ,Target.AddressCounty\r\n",
					"    ,Target.AddressPostcode\r\n",
					"    ,Target.Migrated\r\n",
					"    ,Target.ODTSourceSystem\r\n",
					"    ,Target.SourceSystemID -- ID for appeals in odw_harmonised_db.main_sourcesystem_fact\r\n",
					"    ,Target.IngestionDate\r\n",
					"    ,Target.ValidTo\r\n",
					"    ,Target.RowID\r\n",
					"    ,'N' AS IsActive\r\n",
					"    ,'Update' AS UpdateMode\r\n",
					"FROM\r\n",
					"    vw_Horizon_appeals_event AS raw\r\n",
					"    INNER JOIN odw_harmonised_db.sb_appeal_event AS Target \r\n",
					"        ON raw.eventId = Target.eventId\r\n",
					"        AND raw.RowID <> Target.RowID\r\n",
					"        AND raw.IsActive = 'Y' -- Only care about updates for records that are active as we could have older records we've never seen before\r\n",
					"        AND Target.IsActive = 'Y'\r\n",
					"UNION\r\n",
					"SELECT -- Lastly deal with new versions of existing events\r\n",
					"    raw.eventId\r\n",
					"    ,raw.caseReference\r\n",
					"    ,raw.eventType\r\n",
					"    ,raw.eventName\r\n",
					"    ,raw.eventstatus\r\n",
					"    ,raw.isUrgent\r\n",
					"    ,raw.eventPublished\r\n",
					"    ,raw.eventStartDatetime\r\n",
					"    ,raw.eventEndDatetime\r\n",
					"    ,raw.notificationOfSitevisit\r\n",
					"    ,raw.AddressLine1\r\n",
					"    ,raw.AddressLine2\r\n",
					"    ,raw.AddressTown\r\n",
					"    ,raw.AddressCounty\r\n",
					"    ,raw.AddressPostcode\r\n",
					"    ,raw.Migrated\r\n",
					"    ,raw.ODTSourceSystem\r\n",
					"    ,raw.SourceSystemID -- ID for appeals in odw_harmonised_db.main_sourcesystem_fact\r\n",
					"    ,raw.IngestionDate\r\n",
					"    ,raw.ValidTo\r\n",
					"    ,raw.RowID\r\n",
					"    ,raw.IsActive\r\n",
					"    ,'Insert' AS UpdateMode\r\n",
					"FROM\r\n",
					"   odw_harmonised_db.sb_appeal_event AS Target \r\n",
					"    INNER JOIN vw_Horizon_appeals_event AS raw\r\n",
					"        ON Target.eventId = raw.eventId\r\n",
					"    LEFT OUTER JOIN odw_harmonised_db.sb_appeal_event AS Perm\r\n",
					"        ON raw.eventId = Perm.eventId\r\n",
					"        AND raw.RowID = Perm.RowID\r\n",
					"WHERE\r\n",
					"    Perm.eventId IS NULL"
				],
				"execution_count": 17
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					""
				],
				"execution_count": null
			}
		]
	}
}