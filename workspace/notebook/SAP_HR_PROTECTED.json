{
	"name": "SAP_HR_PROTECTED",
	"properties": {
		"folder": {
			"name": "odw-harmonised"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "f312e31b-c91d-48bc-8f63-1c2fa1b9bc3c"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw",
				"name": "pinssynspodw",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### Entity Name : Protected Data</u>\n",
					"###### Author: Prathap A\n",
					"###### Date: 25/02/2025\n",
					"\n",
					"###### version : 0001\n",
					"###### <u>Description</u>:\n",
					"This template is designed to facilitate the monthly processing and harmonization of Protected data. It includes steps for initializing the environment, creating and managing Delta tables, and inserting data into harmonized tables. The template ensures that Protected data is accurately transformed, stored, and made available for reporting and analysis."
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Intialisations"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"from pyspark.sql.functions import udf, col, lit, when, coalesce, concat, sum, avg, max, min, count, countDistinct, date_format, to_date, datediff, months_between, year, month,  hour, minute, second, expr, asc, desc\n",
					"from pyspark.sql.types import DateType, TimestampType, StringType, IntegerType, FloatType, DoubleType, BooleanType, StructType, StructField, ArrayType, MapType\n",
					"from pyspark.sql.window import Window\n",
					"from pyspark.sql.functions import row_number, rank, dense_rank, lag, lead, ntile\n",
					"from pyspark.sql import SQLContext\n",
					"from pyspark.sql import DataFrame\n",
					"from pyspark.sql import functions as F\n",
					"from pyspark.sql.avro.functions import from_avro, to_avro\n",
					"from pyspark.sql.streaming import DataStreamReader, DataStreamWriter\n",
					"from pyspark.sql.utils import AnalysisException\n",
					"from pyspark.sql.catalog import Catalog\n",
					"from pyspark.sql.column import Column\n",
					"from pyspark.sql.group import GroupedData\n",
					"from pyspark.sql.pandas.functions import pandas_udf\n",
					"\n",
					"from datetime import datetime, timedelta\n",
					"import pandas as pd\n",
					"import numpy as np\n",
					"\n",
					""
				],
				"execution_count": 108
			},
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"SET spark.sql.ansi.enabled = false;"
				],
				"execution_count": 109
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Data Load into SAP_HR_PC"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"\n",
					"delete from odw_harmonised_db.SAP_HR_PC ;\n",
					"\n",
					"insert into odw_harmonised_db.SAP_HR_PC(\n",
					"\n",
					"\n",
					"\n",
					"SELECT \n",
					"\t   RefNo\n",
					"      ,NULLIF(EthnicOrigin, '')\n",
					"      ,NULLIF(ReligiousDenominationKey, '')\n",
					"      ,NULLIF(SxO, '')\n",
					"      ,Grade\n",
					"      ,NULLIF(DisabilityText, '')\n",
					"      ,cast(to_timestamp(Report_MonthEnd_Date, \"dd/MM/yyyy\") as date)  as Report_MonthEnd_Date\n",
					"      , 'saphr' AS SourceSystemID\n",
					"    ,CURRENT_DATE() AS IngestionDate\n",
					"   , CURRENT_TIMESTAMP() AS ValidTo\n",
					"   , NULL AS RowID,\n",
					"    'Y' AS IsActive\n",
					"\n",
					"from odw_standardised_db.sap_protected_monthly\n",
					"\n",
					")"
				],
				"execution_count": 110
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# HashKey build\n",
					""
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"\n",
					"UPDATE odw_harmonised_db.SAP_HR_PC\n",
					"SET RowID = md5(\n",
					"    concat_ws('|',\n",
					"\t   RefNo\n",
					"      ,EthnicOrigin\n",
					"      ,ReligiousDenominationKey\n",
					"      ,SxO\n",
					"      ,Grade\n",
					"      ,DisabilityText\n",
					"      )\n",
					"      )"
				],
				"execution_count": 111
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# PC_INSERT_DELETE"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"\n",
					"WITH pc AS (\n",
					"    SELECT \n",
					"        Report_MonthEnd_Date,\n",
					"        COUNT(*) AS s_count\n",
					"    FROM odw_harmonised_db.SAP_HR_PC\n",
					"    WHERE RefNo IS NOT NULL\n",
					"    GROUP BY Report_MonthEnd_Date\n",
					"),\n",
					"x2 AS (\n",
					"    SELECT \n",
					"       cast(to_timestamp(Report_MonthEnd_Date, \"dd/MM/yyyy\") as date) as Report_MonthEnd_Date, \n",
					"        COUNT(*) AS history_rows\n",
					"    FROM \n",
					"        odw_harmonised_db.hist_SAP_HR h \n",
					"    WHERE \n",
					"        left(Report_MonthEnd_Date,7) > '2019-03' \n",
					"        AND h.PayrollArea = 'PINS'\n",
					"    GROUP BY \n",
					"        Report_MonthEnd_Date\n",
					"),\n",
					"to_delete AS (\n",
					"    SELECT pc.Report_MonthEnd_Date\n",
					"    FROM pc \n",
					"    INNER JOIN x2 \n",
					"        ON pc.Report_MonthEnd_Date = x2.Report_MonthEnd_Date\n",
					"    WHERE pc.s_count = x2.history_rows\n",
					"),\n",
					"source_data AS (\n",
					"    SELECT \n",
					"        SAP_HR_PC.*,\n",
					"        CASE \n",
					"            WHEN to_delete.Report_MonthEnd_Date IS NOT NULL THEN 'DELETE'\n",
					"            ELSE 'INSERT'\n",
					"        END AS action\n",
					"    FROM odw_harmonised_db.SAP_HR_PC\n",
					"    LEFT JOIN to_delete \n",
					"        ON SAP_HR_PC.Report_MonthEnd_Date = to_delete.Report_MonthEnd_Date\n",
					"),\n",
					"deduplicated_source AS (\n",
					"    SELECT \n",
					"        *,\n",
					"        ROW_NUMBER() OVER (PARTITION BY Report_MonthEnd_Date ORDER BY RefNo) AS row_num\n",
					"    FROM source_data\n",
					")\n",
					"-- Use MERGE to delete and insert rows\n",
					"MERGE INTO odw_harmonised_db.sap_hr_protected_data AS target\n",
					"USING (\n",
					"    SELECT * \n",
					"    FROM deduplicated_source \n",
					"    WHERE row_num = 1 -- Ensure only one row per Report_MonthEnd_Date\n",
					") AS source\n",
					"ON target.Report_MonthEnd_Date = source.Report_MonthEnd_Date\n",
					"WHEN MATCHED AND source.action = 'DELETE' THEN DELETE\n",
					"WHEN NOT MATCHED AND source.action = 'INSERT' THEN INSERT *;"
				],
				"execution_count": 112
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Hashkey build"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"\n",
					"UPDATE odw_harmonised_db.sap_hr_protected_data\n",
					"SET RowID = md5(\n",
					"    concat_ws('|',\n",
					"\t   RefNo\n",
					"      ,EthnicOrigin\n",
					"      ,ReligiousDenominationKey\n",
					"      ,SxO\n",
					"      ,Grade\n",
					"      ,DisabilityText\n",
					"      )\n",
					"      )"
				],
				"execution_count": 113
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# One off load"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "sparksql"
					},
					"editable": false,
					"run_control": {
						"frozen": true
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"delete from odw_harmonised_db.sap_hr_protected_data;\n",
					"\n",
					"INSERT into odw_harmonised_db.sap_hr_protected_data\n",
					"select\n",
					"\t   RefNumber   as RefNo\n",
					"      ,Ethnicorigin as EthnicOrigin\n",
					"      ,ReligiousDenominationKey\n",
					"      ,SxO\n",
					"      ,Grade\n",
					"      ,DisabilityText\n",
					"      ,REPLACE(RIGHT(REPLACE(file_name, '.xlsx', ''), 8), '_', '-') as Report_MonthEnd_Date\n",
					"      ,'saphr'  as SourceSystemID\n",
					"      ,current_date() as IngestionDate\n",
					"      ,current_timestamp() as ValidTo\n",
					"      ,null as RowID\n",
					"      ,'Y' as IsActive\n",
					" from \n",
					"odw_standardised_db.sap_hr_protected_data_hist ;"
				],
				"execution_count": 106
			}
		]
	}
}