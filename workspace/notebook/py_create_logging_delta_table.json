{
	"name": "py_create_logging_delta_table",
	"properties": {
		"folder": {
			"name": "utils"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw34",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "665fae9e-7392-495f-ac03-4ddb4ac85686"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw34",
				"name": "pinssynspodw34",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw34",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"#Import  libraries\n",
					"from pyspark.sql.types import StructType\n",
					"import json\n",
					"import os"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"#Get Storage account name\n",
					"storage_account=mssparkutils.notebook.run('/utils/py_utils_get_storage_account')\n",
					"print(storage_account)"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"%run utils/py_logging_decorator"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"# Define all Folder paths used in the notebook\n",
					"\n",
					"\n",
					"odw_json_folder_path = f\"abfss://odw-config@{storage_account}odw-config/logging_table_definitions\"\n",
					"delta_table_path = f\"abfss://logging@{storage_account}\"\n",
					"\n",
					"schema_json_path = f\"abfss://odw-config@{storage_account}orchestration/orchestration.json\"\n",
					"\n",
					"print(odw_json_folder_path)\n",
					"print(delta_table_path)\n",
					"\n",
					"\n",
					"\n",
					"print(schema_json_path)"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"\n",
					"\n",
					"# Create delta table steps\n",
					"\n",
					"database_name = \"logging\"\n",
					"table_name = \"tables_logs\"\n",
					"\n",
					"# Read JSON schema file\n",
					"schema_df = spark.read.option(\"multiline\", \"true\").json(schema_json_path)\n",
					"schema_json = schema_df.toJSON().first()\n",
					"\n",
					"# Parse JSON schema into StructType\n",
					"schema_struct = StructType.fromJson(json.loads(schema_json))\n",
					"\n",
					"# Create Database if not exists\n",
					"spark.sql(f\"CREATE DATABASE IF NOT EXISTS {database_name}\")\n",
					"\n",
					"# Create Delta Table if not exists\n",
					"if not spark._jsparkSession.catalog().tableExists(database_name, table_name):\n",
					"\n",
					"    # Create Delta Table\n",
					"    spark.sql(f\"CREATE TABLE IF NOT EXISTS {database_name}.{table_name} USING DELTA LOCATION '{delta_table_path}'\")\n",
					"\n",
					"    print(f\"Delta table {database_name}.{table_name} created successfully.\")\n",
					"else:\n",
					"    print(f\"Delta table {database_name}.{table_name} already exists.\")"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					""
				],
				"execution_count": null
			}
		]
	}
}