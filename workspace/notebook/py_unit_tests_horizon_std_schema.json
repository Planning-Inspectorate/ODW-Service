{
	"name": "py_unit_tests_horizon_std_schema",
	"properties": {
		"description": "This notebook covers unit tests for horizon tables that match the names",
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw34",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "fd27ac38-f9a8-425f-970e-264bed5ded88"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw34",
				"name": "pinssynspodw34",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw34",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Notebook to run unit-tests for Horizon odw-standardised-db that Match the config standardised_table_definitions JSON schema  \n",
					"https://github.com/Planning-Inspectorate/odw-config/tree/main/data-lake/standardised_table_definitions/Horizon\n",
					"###### ex: horizon_appeals_document_metadata <-> HorizonAppealsDocumentMetadata.json\n",
					"######     horizon_appeals_event <-> HorizonAppealsEvent.json \n",
					"######     horizon_appeals_event <-> HorizonAppealsFolder.json\n",
					"######     horizon_appeals_folder<-> HorizonFolder.json\n",
					""
				]
			},
			{
				"cell_type": "code",
				"source": [
					"import re\n",
					"from pyspark.sql.functions import *\n",
					"from pyspark.sql.functions import input_file_name,split,element_at\n",
					"from pyspark.sql.functions import col, lower, regexp_replace\n",
					"from pyspark.sql.functions import udf\n",
					"from pyspark.sql.types import StringType"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"# Get all the JSON schemas list\n",
					"\n",
					"df_schema = spark.read.option(\"multiline\", \"true\").json(\"abfss://odw-config@pinsstodwdevuks9h80mb.dfs.core.windows.net/standardised_table_definitions/Horizon/*.json\")\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"# Flatten the JSON to get the file names\n",
					"\n",
					"df_explode = df_schema.selectExpr(\"explode(fields)\").select(\"col.*\").withColumn(\"File_name\", element_at(split(input_file_name(),\"/\"),-1))"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"# function to conver camel to snake case and extract just the file name part\n",
					"\n",
					"# Combined logic to handle acronyms + camel case -- latest code\n",
					"def split_filename(filename):\n",
					"    base = re.sub(r\"\\.json$\", \"\", filename)  # remove .json\n",
					"    # Step 1: Insert underscore between acronym and word (NSIPData -> NSIP_Data)\n",
					"    base = re.sub(r'(?<=[A-Z])(?=[A-Z][a-z])', '_', base)\n",
					"    # Step 2: Standard camel case split (AppealsAdditional -> Appeals_Additional)\n",
					"    base = re.sub(r'(?<=[a-z])(?=[A-Z])', '_', base)\n",
					"    return base.lower()\n",
					"\n",
					"# Register UDF\n",
					"split_filename_udf = udf(split_filename, StringType())\n",
					"\n",
					"# Apply transformation\n",
					"df_final = df_explode.withColumn(\"source_name\", split_filename_udf(col(\"File_name\")))\n",
					"\n",
					"# Display result\n",
					"df_final.select(\"File_name\", \"source_name\").show(truncate=False)\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"df_final = df_explode.withColumn(\"source_name\", split_filename_udf(col(\"File_name\")))\n",
					"\n",
					"# Display result\n",
					"df_final.select(\"File_name\", \"source_name\").show(truncate=False)"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"#Get the list of tables from odw_standardised_db\n",
					"\n",
					"df_std_tablelist = spark.sql(\"show TABLES in odw_standardised_db\")"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"def create_spark_not_sb_schema(db_name: str, entity_name: str, folder_name: str = None, is_servicebus_schema: str = False) -> StructType:\n",
					"    incremental_key: str = get_incremental_key(folder_name if folder_name else entity_name, storage_account, path_to_orchestration_file) if db_name == 'odw_harmonised_db' else None\n",
					"    schema = mssparkutils.notebook.run(\"/py_create_spark_schema\", 30, {\"db_name\": db_name, \"entity_name\": entity_name, \"incremental_key\": incremental_key, \"is_servicebus_schema\": is_servicebus_schema})\n",
					"    spark_schema = StructType.fromJson(json.loads(schema))\n",
					"    return spark_schema"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"create_spark_not_sb_schema()"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": false
				},
				"source": [
					"display(df_std_tablelist)"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": false
				},
				"source": [
					"display(df_final)"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"matched_list = df_std_tablelist.join(df_final, df_std_tablelist.tableName == df_final.source_name, how=\"right\")"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": false
				},
				"source": [
					"matched_list = matched_list.select(\"tableName\", \"source_name\").distinct().show(truncate=False)"
				],
				"execution_count": null
			}
		]
	}
}