{
	"name": "test_smoke_py_connectivity",
	"properties": {
		"folder": {
			"name": "test/smokeTest"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw34",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "a5da4d63-8985-4f61-b0a1-a22499871b2d"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw34",
				"name": "pinssynspodw34",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw34",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"import re"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"def test_keyvault_connectivity():\n",
					"    exception_raised = None\n",
					"    try:\n",
					"        mssparkutils.credentials.getSecretWithLS(\"ls_kv\", \"application-insights-connection-string\")\n",
					"    except Exception as e:\n",
					"        exception_raised = e\n",
					"    assert not exception_raised, \"Could not fetch a secret from the key vault\""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"def test_datalake_connectivity():\n",
					"    linked_service = \"ls_storage\"\n",
					"    storage_endpoint = re.search('url=https://(.+?);', mssparkutils.credentials.getFullConnectionString(linked_service)).group(1)\n",
					"    exception_raised = None\n",
					"    try:\n",
					"        mssparkutils.fs.mount( \n",
					"            f\"abfss://odw-raw@{storage_endpoint}ListedBuildings//\", \n",
					"            \"/temp_test_datalake_connectivity\", \n",
					"            {\"linkedService\": linked_service} \n",
					"        )\n",
					"    except Exception as e:\n",
					"        exception_raised = e\n",
					"    assert not exception_raised, f\"Could not connect to the main data lake '{storage_endpoint}'\""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"def test_datalake_failover_connectivity():\n",
					"    linked_service = \"ls_backup_destination\"\n",
					"    storage_endpoint = re.search('url=https://(.+?);', mssparkutils.credentials.getFullConnectionString(linked_service)).group(1)\n",
					"    exception_raised = None\n",
					"    try:\n",
					"        mssparkutils.fs.mount( \n",
					"            f\"abfss://odw-raw@{storage_endpoint}ListedBuildings//\", \n",
					"            \"/temp_test_datalake_failover_connectivity\", \n",
					"            {\"linkedService\": linked_service} \n",
					"        )\n",
					"    except Exception as e:\n",
					"        exception_raised = e\n",
					"    assert not exception_raised, f\"Could not connect to the main data lake '{storage_endpoint}'\""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"tests_to_run = {\n",
					"    symbol: eval(symbol)\n",
					"    for symbol in locals()\n",
					"    if symbol.startswith(\"test\") and callable(eval(symbol))\n",
					"}\n",
					"print(\"Running tests\\n\")\n",
					"for test_name, test in tests_to_run.items():\n",
					"    print(test_name)\n",
					"    test()"
				],
				"execution_count": null
			}
		]
	}
}