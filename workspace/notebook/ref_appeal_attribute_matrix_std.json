{
	"name": "ref_appeal_attribute_matrix_std",
	"properties": {
		"folder": {
			"name": "1-odw-raw-to-standardised"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw34",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "93ce9dcd-e3bb-4dbf-a519-10b2a1e90adc"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw34",
				"name": "pinssynspodw34",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw34",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"#Get Storage account name\n",
					"storage_account=mssparkutils.notebook.run('/utils/py_utils_get_storage_account')\n",
					"print(storage_account)"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": false
				},
				"source": [
					"import re\n",
					"from pyspark.sql.functions import col\n",
					"from datetime import datetime\n",
					"\n",
					"#Latest ingestion date from odw-raw\n",
					"base_dir = f\"abfss://odw-raw@{storage_account}AppealAttributeMatrix/\"\n",
					"entries = mssparkutils.fs.ls(base_dir)\n",
					"date_dirs = [e.name.strip(\"/\").split(\"/\")[-1]\n",
					"             for e in entries\n",
					"             if re.fullmatch(r\"\\d{4}-\\d{2}-\\d{2}\", e.name.strip(\"/\").split(\"/\")[-1])]\n",
					"\n",
					"if not date_dirs:\n",
					"    raise FileNotFoundError(f\"No YYYY-MM-DD folders found under {base_dir}\")\n",
					"\n",
					"ingestion_date = max(date_dirs)\n",
					"print(f\"Using latest ingestion_date: {ingestion_date}\")\n",
					"\n",
					"file_path = f\"{base_dir}{ingestion_date}/appeals-attribute-matrix.csv\"\n",
					"target_path = f\"abfss://odw-standardised@{storage_account}AppealAttributeMatrix/appeal_attribute_matrix\"\n",
					"\n",
					"df = (\n",
					"    spark.read\n",
					"    .option(\"header\", True)\n",
					"    .option(\"inferSchema\", True)\n",
					"    .option(\"ignoreLeadingWhiteSpace\", True)\n",
					"    .option(\"ignoreTrailingWhiteSpace\", True)\n",
					"    .csv(file_path)\n",
					")\n",
					"\n",
					"valid_columns = [field.name for field in df.schema.fields if field.name and field.name.strip() != \"\" and not field.name.strip().startswith(\"_c\")]\n",
					"df = df.select(*valid_columns)\n",
					"\n",
					"df = df.filter(~(col(\"attribute\").isNull() | (col(\"attribute\").rlike(r'^\\s*[\"\\']?\\s*$'))))\n",
					"\n",
					"def to_camel_case(colname: str) -> str:\n",
					"    parts = re.split(r'\\s+', colname.strip())\n",
					"    return parts[0].lower() + ''.join(p.capitalize() for p in parts[1:])\n",
					"\n",
					"for colname in df.columns:\n",
					"    new_name = to_camel_case(colname)\n",
					"    df = df.withColumnRenamed(colname, new_name)\n",
					"\n",
					"df.write.mode(\"overwrite\").format(\"delta\").save(target_path)\n",
					"table_name = \"odw_standardised_db.appeal_attribute_matrix\"\n",
					"\n",
					"if not spark.catalog.tableExists(table_name):\n",
					"    print(f\"Table '{table_name}' created.\")\n",
					"else:\n",
					"    print(f\"Table '{table_name}' already exists. If new schema changes have been added, the table has been updated.\")\n",
					"\n",
					"df.write.format(\"delta\").mode(\"overwrite\").option(\"mergeSchema\",\"true\").option(\"overwriteSchema\",\"true\").saveAsTable(table_name)\n",
					"\n",
					"display(df)"
				],
				"execution_count": null
			}
		]
	}
}