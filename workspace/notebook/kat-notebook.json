{
	"name": "kat-notebook",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "a01b8951-0811-42e6-9fd6-e5c7b0fba728"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw",
				"name": "pinssynspodw",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"Duplicate table for backup"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"source: str = \"odw_harmonised_db.hr_employee_dim\"\n",
					"destination: str = \"odw_harmonised_db.kat_employee_dim\"\n",
					"source_standardised: str = \"odw_standardised_db.entra_id\""
				],
				"execution_count": 5
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from collections.abc import Mapping\n",
					"from notebookutils import mssparkutils\n",
					"from pprint import pprint as pp\n",
					"import json\n",
					"import pyspark.sql.functions as F \n",
					"import pandas as pd\n",
					"from pyspark.sql.types import *\n",
					"from datetime import date\n",
					"from pyspark.sql.functions import *\n",
					"from pyspark.sql.window import Window\n",
					"import pprint\n",
					"from pyspark.sql import DataFrame\n",
					"\n",
					"from pyspark.sql import SparkSession\n",
					"spark = SparkSession.builder.getOrCreate()\n",
					"\n",
					"#ignore FutureWarning messages \n",
					"import warnings\n",
					"warnings.filterwarnings(\"ignore\", message=\"iteritems is deprecated\")"
				],
				"execution_count": 6
			},
			{
				"cell_type": "code",
				"source": [
					"spark.sql(f\"drop table if exists {destination};\")\n",
					"df: DataFrame  = spark.sql(f\"SELECT * FROM {source}\") \n",
					"df.write.format('delta').saveAsTable(destination)"
				],
				"execution_count": 19
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"print(f\"Merging into {destination} from {source_standardised}\")"
				],
				"execution_count": 20
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"df = spark.sql(f\"SELECT * FROM {destination} WHERE IsActive = 'Y' and EmployeeID = 50410568\")\n",
					"display(df)"
				],
				"execution_count": 21
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"rows_affected: int = spark.sql(f\"MERGE INTO {destination} USING {source_standardised} ON {destination}.IsActive = 'Y' AND {source_standardised}.EmployeeID = {destination}.employeeId WHEN MATCHED THEN UPDATE SET {destination}.emailAddress = {source_standardised}.userPrincipalName\")\n",
					"print(str(rows_affected) +\" rows affected\")\n",
					""
				],
				"execution_count": 25
			}
		]
	}
}