{
	"name": "py_unit_tests_appeal_document",
	"properties": {
		"folder": {
			"name": "utils/unit-tests"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "213a9c48-03c8-4d51-86ab-f2ae257c122d"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": true,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw",
				"name": "pinssynspodw",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import json\n",
					"from pyspark.sql.types import *\n",
					"from pyspark.sql import DataFrame\n",
					"from pyspark.sql import functions as F\n",
					"import pprint"
				],
				"execution_count": 175
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"entity_name: str = 'appeal-document'\n",
					"folder_name: str = 'appeal-document'\n",
					"std_db_name: str = 'odw_standardised_db'\n",
					"hrm_db_name: str = 'odw_harmonised_db'\n",
					"curated_db_name: str = 'odw_curated_db'\n",
					"horizon_std_table_name: str = \"horizon_appeals_document_metadata\"\n",
					"aie_std_table_name: str = \"aie_document_data\"\n",
					"aie_hrm_table_name: str = \"aie_document_data\"\n",
					"std_table_name: str = 'sb_appeal_document'\n",
					"hrm_table_name: str = 'sb_appeal_document'\n",
					"hrm_table_final: str = 'appeal_document'\n",
					"curated_table_name: str = 'appeal_document'"
				],
				"execution_count": 176
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"horizon_std_df = spark.table(f\"{std_db_name}.{horizon_std_table_name}\")\r\n",
					"aie_std_df = spark.table(f\"{std_db_name}.{aie_std_table_name}\")\r\n",
					"aie_hrm_df = spark.table(f\"{hrm_db_name}.{aie_hrm_table_name}\")\r\n",
					"hrm_final_df = spark.table(f\"{hrm_db_name}.{hrm_table_final}\")\r\n",
					"hrm_final_df_active = hrm_final_df.filter(\"IsActive = 'Y'\")\r\n",
					"curated_df = spark.table(f\"{curated_db_name}.{curated_table_name}\")\r\n",
					"sb_std_df = spark.table(f\"{std_db_name}.{std_table_name}\")\r\n",
					"sb_hrm_df = spark.table(f\"{hrm_db_name}.{hrm_table_name}\")\r\n",
					"horizon_documentIds = horizon_std_df.select(\"documentId\")\r\n",
					"aie_std_documentIds = aie_std_df.select(\"documentId\")\r\n",
					"aie_hrm_documentIds = aie_hrm_df.select(\"documentId\")\r\n",
					"hrm_final_documentIds = hrm_final_df.select(\"documentId\")\r\n",
					"sb_std_documentIds = sb_std_df.select(\"documentId\")\r\n",
					"sb_hrm_documentIds = sb_hrm_df.select(\"documentId\")\r\n",
					"curated_documentIds = curated_df.select(\"documentId\")\r\n",
					"aie_appeals_documentIds = aie_std_documentIds.intersect(horizon_documentIds)\r\n",
					"aie_appeals_documents_count = aie_appeals_documentIds.count()"
				],
				"execution_count": 177
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#keep track of the exitCodes, if the exit code is not zero then we've had failures, we flip the boolean\n",
					"exitCode: int = 0"
				],
				"execution_count": 178
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"data_model_columns = [\n",
					"  \"documentId\",\n",
					"  \"caseId\",\n",
					"  \"caseReference\",\n",
					"  \"version\",\n",
					"  \"filename\",\n",
					"  \"originalFilename\",\n",
					"  \"size\",\n",
					"  \"mime\",\n",
					"  \"documentURI\",\n",
					"  \"publishedDocumentURI\",\n",
					"  \"virusCheckStatus\",\n",
					"  \"fileMD5\",\n",
					"  \"dateCreated\",\n",
					"  \"dateReceived\",\n",
					"  \"datePublished\",\n",
					"  \"lastModified\",\n",
					"  \"caseType\",\n",
					"  \"redactedStatus\",\n",
					"  \"documentType\",\n",
					"  \"sourceSystem\",\n",
					"  \"origin\",\n",
					"  \"owner\",\n",
					"  \"author\",\n",
					"  \"description\",\n",
					"  \"caseStage\",\n",
					"  \"horizonFolderId\"\n",
					"]"
				],
				"execution_count": 179
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%run /utils/unit-tests/py_unit_tests_functions"
				],
				"execution_count": 180
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"sb_std_schema = create_spark_schema(std_db_name, entity_name)\n",
					"sb_std_table_schema = spark.table(f\"{std_db_name}.{std_table_name}\").schema\n",
					"sb_hrm_schema = create_spark_schema(hrm_db_name, entity_name)\n",
					"sb_hrm_table_schema = spark.table(f\"{hrm_db_name}.{hrm_table_name}\").schema"
				],
				"execution_count": 181
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Compare schemas"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"std_schema_correct: bool = test_compare_schemas(sb_std_schema, sb_std_table_schema)\n",
					"exitCode += int(not std_schema_correct)\n",
					"print(f\"Service bus standardised schema correct: {std_schema_correct}\\nTable: {std_db_name}.{std_table_name}\\nDifferences shown above (if any)\")\n",
					"hrm_schema_correct: bool = test_compare_schemas(sb_hrm_schema, sb_hrm_table_schema)\n",
					"print(f\"Service bus harmonised schema correct: {hrm_schema_correct}\\nTable: {hrm_db_name}.{hrm_table_name}\\nDifferences shown above (if any)\")\n",
					"exitCode += int(not hrm_schema_correct)"
				],
				"execution_count": 182
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Compare service bus standardised with harmonised\n",
					"Should be the same count"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"standardised_count, harmonised_count, counts_match = test_std_same_rows_hrm(std_table_name, hrm_table_name)\n",
					"print(f\"Standardised Count: {standardised_count: ,}\\nHarmonised Count: {harmonised_count: ,}\\nCounts match: {counts_match}\")\n",
					"\n",
					"if standardised_count > harmonised_count:\n",
					"    print(f\"{standardised_count - harmonised_count} rows from Standardised are missing in Harmonised.\" )\n",
					"    differentiate_std_and_hrm(f\"{std_db_name}.{std_table_name}\", f\"{hrm_db_name}.{hrm_table_name}\")\n",
					"    #this is classed as an error\n",
					"    exitCode += 1 "
				],
				"execution_count": 183
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Compare final harmonised table (if combined with Horizon) with curated table\n",
					"Comparing where IsActive = Y in harmonised = curated row count"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"harmonised_final_count, curated_count, counts_match = test_curated_row_count(hrm_table_final, curated_table_name, data_model_columns)\n",
					"print(f\"Harmonised Final Count: {harmonised_final_count: ,}\\nCurated Count: {curated_count: ,}\\nCounts match: {counts_match}\")\n",
					"exitCode += int(not counts_match)"
				],
				"execution_count": 184
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Trace service bus data from standardised to harmonised\n",
					"We need to make sure the data has loaded through correctly. To do this efficiently, we will select a sample record and check that the data is maintained as it moves through the medallian architecture."
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"SELECT * FROM  odw_standardised_db.sb_appeal_document\n",
					"where documentid = 'fa4b88ff-2f61-4b45-ad11-0e588f21cc65'\n",
					"order by ingested_datetime\n",
					""
				],
				"execution_count": 185
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"SELECT * FROM  odw_harmonised_db.sb_appeal_document\n",
					"where documentid = 'fa4b88ff-2f61-4b45-ad11-0e588f21cc65'\n",
					"order by IngestionDate\n",
					""
				],
				"execution_count": 186
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"Automating the above visual checks"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"SB_standardised_dataframe = spark.sql(\"\"\"\n",
					"SELECT caseId, caseReference, version, size FROM odw_standardised_db.sb_appeal_document\n",
					"WHERE documentid = 'fa4b88ff-2f61-4b45-ad11-0e588f21cc65'\n",
					"ORDER BY ingested_datetime\n",
					"\"\"\")\n",
					"\n",
					"SB_harmonised_dataframe = spark.sql(\"\"\"\n",
					"SELECT caseId, caseReference, version, size FROM odw_harmonised_db.sb_appeal_document\n",
					"WHERE documentid = 'fa4b88ff-2f61-4b45-ad11-0e588f21cc65'\n",
					"ORDER BY IngestionDate\n",
					"\"\"\")\n",
					"\n",
					"def compare_specific_columns(SB_standardised_dataframe, SB_harmonised_dataframe, columns, exitCode):\n",
					"    # Select only the specified columns from both DataFrames\n",
					"    SB_standardised_dataframe_selected = SB_standardised_dataframe.select(columns)\n",
					"    SB_harmonised_dataframe_selected = SB_harmonised_dataframe.select(columns)\n",
					"    \n",
					"    # Check if the data is the same for the specified columns\n",
					"    diff_df = SB_standardised_dataframe_selected.subtract(SB_harmonised_dataframe_selected).union(SB_harmonised_dataframe_selected.subtract(SB_standardised_dataframe_selected))\n",
					"    if diff_df.count() == 0:\n",
					"        print(\"DataFrames match for the specified columns.\")\n",
					"        return True, exitCode\n",
					"    else:\n",
					"        print(\"DataFrames do not match for the specified columns.\")\n",
					"        diff_df.show()\n",
					"        exitCode += 1\n",
					"        return False, exitCode\n",
					"\n",
					"# Specify the columns to compare\n",
					"columns_to_compare = [\"caseId\", \"caseReference\", \"version\", \"size\"]\n",
					"\n",
					"# Compare the DataFrames for the specified columns and print the result\n",
					"result, exitCode = compare_specific_columns(SB_standardised_dataframe, SB_harmonised_dataframe, columns_to_compare, exitCode)\n",
					"\n",
					""
				],
				"execution_count": 187
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#### Trace Horizon data to Harmonised"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"refresh  odw_harmonised_db.appeal_document"
				],
				"execution_count": 188
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"SELECT DISTINCT\n",
					"*\n",
					"FROM odw_harmonised_db.appeal_document\n",
					"\n",
					"where  documentid = '12471993'\n",
					"order BY\n",
					"    ingestiondate DESC"
				],
				"execution_count": 189
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"SELECT DISTINCT\n",
					"*\n",
					"FROM odw_standardised_db.horizon_appeals_document_metadata\n",
					"where documentid = '12471993' \n",
					"and ingested_datetime = (select max(ingested_datetime) from odw_standardised_db.horizon_appeals_document_metadata)\n",
					"\n",
					"order by ingested_datetime\n",
					""
				],
				"execution_count": 190
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"Automate the above visual checks"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"horizon_standardised_dataframe = spark.sql(\"\"\"\n",
					"SELECT caseReference, filename, size \n",
					"FROM odw_standardised_db.horizon_appeals_document_metadata\n",
					"where documentid = '12471993' \n",
					"and ingested_datetime = (select max(ingested_datetime) from odw_standardised_db.horizon_appeals_document_metadata)\n",
					"order by ingested_datetime\n",
					"\"\"\")\n",
					"\n",
					"horizon_harmonised_dataframe = spark.sql(\"\"\"\n",
					"SELECT caseReference, filename, size\n",
					"FROM odw_harmonised_db.appeal_document\n",
					"where  documentid = '12471993'\n",
					"order BY\n",
					"    ingestiondate DESC\n",
					"\"\"\")\n",
					"\n",
					"\n",
					"def compare_specific_columns(horizon_standardised_dataframe, horizon_harmonised_dataframe, columns, exitCode):\n",
					"    # Select only the specified columns from both DataFrames\n",
					"    horizon_standardised_dataframe_selected = horizon_standardised_dataframe.select(columns)\n",
					"    horizon_harmonised_dataframe_selected = horizon_harmonised_dataframe.select(columns)\n",
					"    \n",
					"    # Check if the data is the same for the specified columns\n",
					"    diff_df = horizon_standardised_dataframe_selected.subtract(horizon_harmonised_dataframe_selected).union(horizon_harmonised_dataframe_selected.subtract(horizon_standardised_dataframe_selected))\n",
					"    if diff_df.count() == 0:\n",
					"        print(\"DataFrames match for the specified columns.\")\n",
					"        return True, exitCode\n",
					"    else:\n",
					"        print(\"DataFrames do not match for the specified columns.\")\n",
					"        diff_df.show()\n",
					"        exitCode += 1\n",
					"        return False, exitCode\n",
					"\n",
					"# Specify the columns to compare\n",
					"columns_to_compare = [\"caseReference\", \"filename\", \"size\"]\n",
					"\n",
					"# Compare the DataFrames for the specified columns and print the result\n",
					"result, exitCode = compare_specific_columns(horizon_standardised_dataframe, horizon_harmonised_dataframe, columns_to_compare, exitCode)"
				],
				"execution_count": 191
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"###### **Check if there is data coming from ODT and Horizon**"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"SELECT DISTINCT\n",
					"*\n",
					"FROM odw_harmonised_db.appeal_document\n",
					"\n",
					"where  horizonfolderid  is null and sourcesystem = 'ODT'\n",
					"order BY\n",
					"    ingestiondate DESC"
				],
				"execution_count": 192
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### Horizon and Service Bus data successfully combined and flags set appropriately"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"df_hzn_std = spark.sql(\"SELECT * from odw_standardised_db.horizon_appeals_document_metadata where documentid = 'fa4b88ff-2f61-4b45-ad11-0e588f21cc65' and ingested_datetime = (select max(ingested_datetime) from odw_standardised_db.horizon_appeals_document_metadata)\")\n",
					"df_sb_hrm = spark.sql(\"select * from odw_harmonised_db.sb_appeal_document where documentid = 'fa4b88ff-2f61-4b45-ad11-0e588f21cc65' order by IngestionDate\")\n",
					"df_hrm_final = spark.sql(\"select * from odw_harmonised_db.appeal_document where documentid = 'fa4b88ff-2f61-4b45-ad11-0e588f21cc65'order by IngestionDate\")\n",
					"df_cur = spark.sql(\"select * from odw_curated_db.appeal_document where documentid = 'fa4b88ff-2f61-4b45-ad11-0e588f21cc65'\")\n",
					"\n",
					"\n",
					"display(df_hzn_std)\n",
					"display(df_sb_hrm)\n",
					"display(df_hrm_final)\n",
					"display(df_cur)"
				],
				"execution_count": 193
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#### Data updated in curated correctly"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"SELECT\n",
					"    *\n",
					"FROM\n",
					"    odw_curated_db.appeal_document\n",
					"WHERE\n",
					"     documentId = '10847936'"
				],
				"execution_count": 194
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"\n",
					"data: DataFrame = spark.sql(\"SELECT * FROM odw_curated_db.appeal_document\")\n",
					"data.printSchema()"
				],
				"execution_count": 195
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def test_sb_std_to_sb_hrm_no_dropping_records(sb_std_table: str, sb_hrm_table: str) -> bool:\n",
					"    df: DataFrame = spark.sql(f\"\"\"\n",
					"    select documentId\n",
					"    from {std_db_name}.{sb_std_table}\n",
					"    where documentId not in\n",
					"    (\n",
					"        select documentId\n",
					"        from {hrm_db_name}.{sb_hrm_table}\n",
					"    )\n",
					"    \"\"\")\n",
					"\n",
					"    return df.count() == 0"
				],
				"execution_count": 196
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def test_sb_hrm_to_hrm_final_no_dropping_records(sb_hrm_table: str, hrm_table_final: str) -> bool:\n",
					"    df: DataFrame = spark.sql(f\"\"\"\n",
					"    select documentId\n",
					"    from {hrm_db_name}.{sb_hrm_table}\n",
					"    where documentId not in\n",
					"    (\n",
					"        select documentId\n",
					"        from {hrm_db_name}.{hrm_table_final}\n",
					"    )\n",
					"    \"\"\")\n",
					"\n",
					"    return df.count() == 0"
				],
				"execution_count": 197
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def test_hrm_to_curated_no_dropping_records(hrm_table_final: str, curated_table_name: str) -> bool:\n",
					"    df: DataFrame = spark.sql(f\"\"\"\n",
					"    select documentId\n",
					"    from {hrm_db_name}.{hrm_table_final}\n",
					"    where IsActive = 'Y'\n",
					"    and documentId not in\n",
					"    (\n",
					"        select documentId\n",
					"        from {curated_db_name}.{curated_table_name}\n",
					"    )\n",
					"    \"\"\")\n",
					"\n",
					"    return df.count() == 0"
				],
				"execution_count": 198
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def test_horizon_to_hrm_final_no_dropping_records(horizon_std_table_name: str, hrm_table_final: str) -> bool:\n",
					"    df: DataFrame = spark.sql(f\"\"\"\n",
					"    select documentId\n",
					"    from {std_db_name}.{horizon_std_table_name}\n",
					"    where ingested_datetime = (select max(ingested_datetime) from {std_db_name}.{horizon_std_table_name})\n",
					"    and documentId not in\n",
					"    (\n",
					"        select documentId\n",
					"        from {hrm_db_name}.{hrm_table_final}\n",
					"    )\n",
					"    \"\"\")\n",
					"\n",
					"    return df.count() == 0"
				],
				"execution_count": 199
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def test_aie_std_to_hrm_no_dropping_records(aie_std_table_name: str, aie_hrm_table_name: str) -> bool:\n",
					"    df: DataFrame = aie_std_documentIds.subtract(aie_hrm_documentIds)\n",
					"    return df.count() == 0 "
				],
				"execution_count": 200
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def test_aie_hrm_to_hrm_final_no_dropping_records(aie_hrm_table_name: str, hrm_table_final: str) -> bool:\n",
					"    if aie_appeals_documents_count > 0:\n",
					"        df: DataFrame = aie_hrm_documentIds.subtract(hrm_final_documentIds)\n",
					"        return df.count() == 0\n",
					"    else:\n",
					"        return True"
				],
				"execution_count": 201
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def test_document_row_counts_match(hrm_table_final: str, curated_table_name: str) -> DataFrame:\r\n",
					"    # Count rows per documentId in harmonised final table\r\n",
					"    hrm_final_counts: DataFrame = hrm_final_df_active.groupBy(\"documentId\").agg(F.count(\"*\").alias(\"hrm_final_count\"))\r\n",
					"\r\n",
					"    # Count rows per documentId in curated table\r\n",
					"    curated_counts: DataFrame = curated_df.groupBy(\"documentId\").agg(F.count(\"*\").alias(\"curated_count\"))\r\n",
					"\r\n",
					"    # Join both tables on documentId to compare the counts\r\n",
					"    comparison_df: DataFrame = hrm_final_counts.join(curated_counts, \"documentId\", how=\"outer\")\r\n",
					"\r\n",
					"    comparison_df: DataFrame = comparison_df.withColumn(\"count_difference\", F.col(\"hrm_final_count\") - F.col(\"curated_count\"))\r\n",
					"\r\n",
					"    non_zero_differences: DataFrame = comparison_df.filter(\"count_difference > 0\")\r\n",
					"\r\n",
					"    return non_zero_differences.count() == 0\r\n",
					""
				],
				"execution_count": 202
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"print(f\"Service bus std to hrm no documentIds dropped: {test_sb_std_to_sb_hrm_no_dropping_records(std_table_name, hrm_table_name)}\")"
				],
				"execution_count": 203
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"print(f\"Service bus hrm to hrm table final no documentIds dropped: {test_sb_hrm_to_hrm_final_no_dropping_records(hrm_table_name, hrm_table_final)}\")"
				],
				"execution_count": 204
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"print(f\"hrm table final to curated no documentIds dropped: {test_hrm_to_curated_no_dropping_records(hrm_table_final, curated_table_name)}\")"
				],
				"execution_count": 205
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"print(f\"Horizon std table to hrm table final no documentIds dropped: {test_horizon_to_hrm_final_no_dropping_records(horizon_std_table_name, hrm_table_final)}\")"
				],
				"execution_count": 206
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"print(f\"AIE std table to hrm table no documentIds dropped: {test_aie_std_to_hrm_no_dropping_records(aie_std_table_name, aie_hrm_table_name)}\")"
				],
				"execution_count": 207
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"print(f\"AIE hrm table to hrm table final no documentIds dropped: {test_aie_hrm_to_hrm_final_no_dropping_records(aie_hrm_table_name, hrm_table_final)}\")"
				],
				"execution_count": 208
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"print(f\"Document row counts match for each document in harmonised final to curated: {test_document_row_counts_match(hrm_table_final, curated_table_name)}\")"
				],
				"execution_count": 209
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"mssparkutils.notebook.exit(exitCode)"
				],
				"execution_count": 210
			}
		]
	}
}