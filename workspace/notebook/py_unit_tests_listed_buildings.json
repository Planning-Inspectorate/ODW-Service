{
	"name": "py_unit_tests_listed_buildings",
	"properties": {
		"folder": {
			"name": "utils/unit-tests"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pynssynspodw34",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "62ce66c5-c567-45e0-b989-692a17a285c0"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": true,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pynssynspodw34",
				"name": "pynssynspodw34",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pynssynspodw34",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import json\n",
					"from pyspark.sql.types import *\n",
					"from pyspark.sql import DataFrame\n",
					"from pyspark.sql import functions as F\n",
					"import pprint"
				],
				"execution_count": 49
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"entity_name: str = 'listed-buildings'\n",
					"folder_name: str = 'ListedBuildings'\n",
					"std_db_name: str = 'odw_standardised_db'\n",
					"hrm_db_name: str = 'odw_harmonised_db'\n",
					"curated_db_name: str = 'odw_curated_db'\n",
					"std_table_name: str = 'listed_building'\n",
					"hrm_table_name: str = 'listed_building'\n",
					"curated_table_name: str = 'listed_building'"
				],
				"execution_count": 50
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"std_df = spark.table(f\"{std_db_name}.{std_table_name}\")\r\n",
					"hrm_df = spark.table(f\"{hrm_db_name}.{hrm_table_name}\")\r\n",
					"curated_df = spark.table(f\"{curated_db_name}.{curated_table_name}\")"
				],
				"execution_count": 51
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#keep track of the exitCodes, if the exit code is not zero then we've had failures, we flip the boolean\n",
					"exitCode: int = 0"
				],
				"execution_count": 52
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"std_schema = StructType([\n",
					"    StructField(\"dataset\", StringType(), True),\n",
					"    StructField(\"end-date\", StringType(), True),\n",
					"    StructField(\"entity\", StringType(), True),\n",
					"    StructField(\"entry-date\", StringType(), True),\n",
					"    StructField(\"geometry\", StringType(), True),\n",
					"    StructField(\"name\", StringType(), True),\n",
					"    StructField(\"organisation-entity\", StringType(), True),\n",
					"    StructField(\"point\", StringType(), True),\n",
					"    StructField(\"prefix\", StringType(), True),\n",
					"    StructField(\"reference\", StringType(), True),\n",
					"    StructField(\"start-date\", StringType(), True),\n",
					"    StructField(\"typology\", StringType(), True),\n",
					"    StructField(\"documentation-url\", StringType(), True),\n",
					"    StructField(\"listed-building-grade\", StringType(), True),\n",
					"    \n",
					"])"
				],
				"execution_count": 53
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"hrm_schema = StructType([\r\n",
					"    StructField(\"dataset\", StringType(), True),\r\n",
					"    StructField(\"endDate\", StringType(), True),\r\n",
					"    StructField(\"entity\", StringType(), True),\r\n",
					"    StructField(\"entryDate\", StringType(), True),\r\n",
					"    StructField(\"geometry\", StringType(), True),\r\n",
					"    StructField(\"name\", StringType(), True),\r\n",
					"    StructField(\"organisationEntity\", StringType(), True),\r\n",
					"    StructField(\"point\", StringType(), True),\r\n",
					"    StructField(\"prefix\", StringType(), True),\r\n",
					"    StructField(\"reference\", StringType(), True),\r\n",
					"    StructField(\"startDate\", StringType(), True),\r\n",
					"    StructField(\"typology\", StringType(), True),\r\n",
					"    StructField(\"documentationUrl\", StringType(), True),\r\n",
					"    StructField(\"listedBuildingGrade\", StringType(), True),\r\n",
					"    StructField(\"dateReceived\", TimestampType(), True),\r\n",
					"    \r\n",
					"])"
				],
				"execution_count": 54
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%run /utils/unit-tests/py_unit_tests_functions"
				],
				"execution_count": 55
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"curated_schema = create_spark_schema(curated_db_name, entity_name)"
				],
				"execution_count": 56
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"std_table_schema = spark.table(f\"{std_db_name}.{std_table_name}\").schema\n",
					"hrm_table_schema = spark.table(f\"{hrm_db_name}.{hrm_table_name}\").schema\n",
					"cur_table_schema = spark.table(f\"{curated_db_name}.{curated_table_name}\").schema"
				],
				"execution_count": 57
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Compare schemas"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"std_schema_correct: bool = test_compare_schemas(std_schema, std_table_schema)\n",
					"exitCode += int(not std_schema_correct)\n",
					"print(f\"Standardised schema correct: {std_schema_correct}\\nTable: {std_db_name}.{std_table_name}\\nDifferences shown above (if any)\")\n",
					"\n",
					"hrm_schema_correct: bool = test_compare_schemas(hrm_schema, hrm_table_schema)\n",
					"print(f\"Harmonised schema correct: {hrm_schema_correct}\\nTable: {hrm_db_name}.{hrm_table_name}\\nDifferences shown above (if any)\")\n",
					"exitCode += int(not hrm_schema_correct)\n",
					"\n",
					"cur_schema_correct: bool = test_compare_schemas(curated_schema, cur_table_schema)\n",
					"print(f\"Curated schema correct: {cur_schema_correct}\\nTable: {curated_db_name}.{curated_table_name}\\nDifferences shown above (if any)\")\n",
					"exitCode += int(not cur_schema_correct)"
				],
				"execution_count": 58
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Compare service bus standardised with harmonised\n",
					"Should be the same count"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"standardised_count, harmonised_count, counts_match = test_std_same_rows_hrm(std_table_name, hrm_table_name)\n",
					"print(f\"Standardised Count: {standardised_count: ,}\\nHarmonised Count: {harmonised_count: ,}\\nCounts match: {counts_match}\")\n",
					"\n",
					"if standardised_count > harmonised_count:\n",
					"    exitCode += 1\n",
					"    print(f\"{standardised_count - harmonised_count} rows from Standardised are missing in Harmonised.\" )\n",
					"    differentiate_std_and_hrm(f\"{std_db_name}.{std_table_name}\", f\"{hrm_db_name}.{hrm_table_name}\", data_model_columns)"
				],
				"execution_count": 61
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Compare harmonised table with curated table\n",
					"Comparing where dateReceived = MAX(dateReceived) in harmonised = curated row count"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"hrm_table_full: str = f\"{hrm_db_name}.{hrm_table_name}\"\n",
					"curated_table_full: str = f\"{curated_db_name}.{curated_table_name}\"\n",
					"\n",
					"hrm_df: DataFrame = spark.sql(f\"SELECT * FROM {hrm_table_full} WHERE dateReceived = (SELECT MAX(dateReceived) FROM {hrm_table_full})\").drop_duplicates()    \n",
					"hrm_count: int = hrm_df.count()\n",
					"\n",
					"curated_count: int = spark.table(curated_table_full).count()\n",
					"\n",
					"harmonised_final_count, curated_count, counts_match = (hrm_count, curated_count, hrm_count == curated_count)\n",
					"print(f\"Harmonised Count: {harmonised_final_count: ,}\\nCurated Count: {curated_count: ,}\\nCounts match: {counts_match}\")\n",
					"exitCode += int(not counts_match)"
				],
				"execution_count": 62
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"Not testing as curated is a copy of harmonised"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"mssparkutils.notebook.exit(exitCode)"
				],
				"execution_count": 63
			}
		]
	}
}