{
	"name": "service-user-publish-legacy-code",
	"properties": {
		"folder": {
			"name": "archive/odw-sb/utils"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodwpr",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "111c6a53-ef93-49cf-8621-62e64c4493f8"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodwpr",
				"name": "pinssynspodwpr",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodwpr",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Service-User Publish\n",
					"Checks the Service Bus for topics last accessed timestamp, gets all changes from the Change Data Feed and sends each record to the service bus topic. \n",
					"See https://learn.microsoft.com/en-us/samples/azure/azure-sdk-for-python/servicebus-samples/ for servicebus samples\n",
					""
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import json\n",
					"import pandas as pd\n",
					"\n",
					"def get_topic_accessed_at(servicebus_mgmt_client):\n",
					"    get_topic_runtime_properties = servicebus_mgmt_client.get_topic_runtime_properties(topic_name)\n",
					"    return(get_topic_runtime_properties.accessed_at_utc)    \n",
					"\n",
					"def send_single_message(sender,content,custom_props_attributes):\n",
					"    json_dict = json.loads(content)\n",
					"    custom_props = { key: json_dict[key] for key in json_dict if key in custom_props_attributes}\n",
					"    message = ServiceBusMessage(content,content_type='application/json',application_properties=custom_props)\n",
					"    sender.send_messages(message)\n",
					"\n",
					"def add_single_message(sender,content,custom_props_attributes):\n",
					"    json_dict = json.loads(content)\n",
					"    custom_props = { key: json_dict[key] for key in json_dict if key in custom_props_attributes}\n",
					"    message = ServiceBusMessage(content,content_type='application/json',application_properties=custom_props)\n",
					"    batch_message.add_message(message)\n",
					""
				],
				"execution_count": 45
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Sets the notebook variables"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"tags": [
						"parameters"
					]
				},
				"source": [
					"secret_name=\"servicebus-connectionstring\"\n",
					"kv_linked_service=\"ls_kv\"\n",
					"topic_name=\"service-user\"\n",
					"table_name=\"odw_curated_db.service_user\"\n",
					"custom_props_attributes=[\"_change_type\"]"
				],
				"execution_count": 46
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Get Servicebus connectionstring from Key Vault"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.sql import SparkSession\n",
					"spark = SparkSession.builder.getOrCreate()\n",
					"akv_name=spark.sparkContext.environment.get('keyVaultName', 'get')\n",
					"from notebookutils import mssparkutils\n",
					"conn_str = mssparkutils.credentials.getSecret(akv_name, secret_name, kv_linked_service)\n",
					""
				],
				"execution_count": 47
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Get Topic Accessed At timestamp"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from azure.servicebus.management import ServiceBusAdministrationClient\n",
					"with ServiceBusAdministrationClient.from_connection_string(conn_str) as servicebus_mgmt_client:\n",
					"    topic_accessed_at=get_topic_accessed_at(servicebus_mgmt_client)\n",
					"print(topic_accessed_at)"
				],
				"execution_count": 48
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Check the table history"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# from pyspark.sql import SparkSession\r\n",
					"# spark = SparkSession.builder.getOrCreate()\r\n",
					"# history_df = spark.sql(\"DESCRIBE HISTORY odw_curated_db.service_user\")\r\n",
					"# hist_df_pandas = history_df.toPandas()"
				],
				"execution_count": 49
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# print(hist_df_pandas['version'].values)"
				],
				"execution_count": 50
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# # if the history goes back to version 0 \r\n",
					"# import pandas as pd \r\n",
					"# if 0 in hist_df_pandas['version'].values:\r\n",
					"\r\n",
					"#     # version 0 datetime\r\n",
					"#     version_0_datetime = pd.Timestamp(hist_df_pandas[hist_df_pandas['version'] == 0]['timestamp'].values[0]).tz_localize('UTC').to_pydatetime()\r\n",
					"#     version_1_datetime = pd.Timestamp(hist_df_pandas[hist_df_pandas['version'] == 1]['timestamp'].values[0]).tz_localize('UTC').to_pydatetime()\r\n",
					"\r\n",
					"#     # is the topic accessed at more recent than the version\r\n",
					"#     if topic_accessed_at > version_0_datetime :\r\n",
					"#         starting_timestamp = topic_accessed_at\r\n",
					"    \r\n",
					"#     else: \r\n",
					"#         starting_timestamp = version_1_datetime\r\n",
					"# else:\r\n",
					"#     starting_timestamp = topic_accessed_at"
				],
				"execution_count": 51
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"starting_timestamp = '2023-10-23 13:50:16'"
				],
				"execution_count": 52
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"topic_accessed_at"
				],
				"execution_count": 53
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"DESCRIBE HISTORY odw_curated_db.service_user"
				],
				"execution_count": 54
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Get the latest changes from CDF and send split messages by lines"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"# from azure.servicebus import ServiceBusClient, ServiceBusMessage\n",
					"# servicebus_client = ServiceBusClient.from_connection_string(conn_str=conn_str, logging_enable=True)\n",
					"\n",
					"# try:\n",
					"#     cdf_df=(spark.read.format(\"delta\")\n",
					"#         .table(table_name))\n",
					"#     with servicebus_client:\n",
					"#         sender = servicebus_client.get_topic_sender(topic_name=topic_name)\n",
					"#         with sender:\n",
					"#             df_json = cdf_df.toJSON()\n",
					"#             row_count=df_json.count()\n",
					"#             for row in df_json.collect(): \n",
					"#                 send_single_message(sender,row,custom_props_attributes)\n",
					"#             print(\"Sent {} messages.\".format(row_count))\n",
					"\n",
					"# except Exception as e:  \n",
					"#         print(f\"{e}\") "
				],
				"execution_count": 55
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Get the latest changes from CDF and send the file in one message"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"\n",
					"from azure.servicebus import ServiceBusClient, ServiceBusMessage\n",
					"servicebus_client = ServiceBusClient.from_connection_string(conn_str=conn_str, logging_enable=True)\n",
					"\n",
					"try:\n",
					"    cdf_df=(spark.read.format(\"delta\")\n",
					"        .table(table_name))\n",
					"    with servicebus_client:\n",
					"        sender = servicebus_client.get_topic_sender(topic_name=topic_name)\n",
					"        batch_message = sender.create_message_batch()\n",
					"        with sender:\n",
					"            df_json = cdf_df.toJSON()\n",
					"            row_count=df_json.count()\n",
					"            for row in df_json.collect(): \n",
					"                json_dict = json.loads(row)\n",
					"                custom_props = { key: json_dict[key] for key in json_dict if key in custom_props_attributes}\n",
					"                # message = ServiceBusMessage(row,content_type='application/json',application_properties=custom_props)\n",
					"                batch_message.add_message(ServiceBusMessage(row,content_type='application/json',application_properties=custom_props))\n",
					"                # print(\"Adding {}.\".format(row))\n",
					"                print(\"Adding {}.\".format(batch_message))\n",
					"            sender.send_messages(batch_message)\n",
					"            print(\"Sent {} messages.\".format(row_count))\n",
					"\n",
					"except Exception as e:  \n",
					"        print(f\"{e}\") \n",
					""
				],
				"execution_count": 56
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"data = '[{\"ID\":\"Legacy User\",\"SourceSystemID\":\"9\",\"salutation\":\"Mrs\",\"firstName\":\"Shelley\",\"lastName\":\"Gardner\",\"emailAddress\":\"hfisher@example.net\",\"telephoneNumber\":\"219.443.6994\",\"otherPhoneNumber\":\"949-444-0203\",\"faxNumber\":\"001-397-272-6910x188\",\"addressLine1\":\"Fair View Farm, Bulls Lane\",\"addressLine2\":\"Wishaw\",\"addressTown\":\"SUTTON COLDFIELD\",\"addressCounty\":\"\",\"postcode\":\"B76 9QW\",\"organisation\":\"\",\"organisationType\":\"\",\"serviceUserType\":\"No Info\",\"caseReference\":\"3212054\"},{\"ID\":\"Legacy User\",\"SourceSystemID\":\"9\",\"salutation\":\"Mrs\",\"firstName\":\"Shelley\",\"lastName\":\"Gardner\",\"emailAddress\":\"hfisher@example.net\",\"telephoneNumber\":\"219.443.6994\",\"otherPhoneNumber\":\"949-444-0203\",\"faxNumber\":\"001-397-272-6910x188\",\"addressLine1\":\"Fair View Farm, Bulls Lane\",\"addressLine2\":\"Wishaw\",\"addressTown\":\"SUTTON COLDFIELD\",\"addressCounty\":\"\",\"postcode\":\"B76 9QW\",\"organisation\":\"\",\"organisationType\":\"\",\"serviceUserType\":\"No Info\",\"caseReference\":\"3212054\"},{\"ID\":\"Legacy User\",\"SourceSystemID\":\"9\",\"salutation\":\"Mrs\",\"firstName\":\"Shelley\",\"lastName\":\"Gardner\",\"emailAddress\":\"hfisher@example.net\",\"telephoneNumber\":\"219.443.6994\",\"otherPhoneNumber\":\"949-444-0203\",\"faxNumber\":\"001-397-272-6910x188\",\"addressLine1\":\"Fair View Farm, Bulls Lane\",\"addressLine2\":\"Wishaw\",\"addressTown\":\"SUTTON COLDFIELD\",\"addressCounty\":\"\",\"postcode\":\"B76 9QW\",\"organisation\":\"\",\"organisationType\":\"\",\"serviceUserType\":\"No Info\",\"caseReference\":\"3212054\"},{\"ID\":\"Legacy User\",\"SourceSystemID\":\"9\",\"salutation\":\"Mrs\",\"firstName\":\"Shelley\",\"lastName\":\"Gardner\",\"emailAddress\":\"hfisher@example.net\",\"telephoneNumber\":\"219.443.6994\",\"otherPhoneNumber\":\"949-444-0203\",\"faxNumber\":\"001-397-272-6910x188\",\"addressLine1\":\"Fair View Farm, Bulls Lane\",\"addressLine2\":\"Wishaw\",\"addressTown\":\"SUTTON COLDFIELD\",\"addressCounty\":\"\",\"postcode\":\"B76 9QW\",\"organisation\":\"\",\"organisationType\":\"\",\"serviceUserType\":\"No Info\",\"caseReference\":\"3212054\"},{\"ID\":\"Legacy User\",\"SourceSystemID\":\"9\",\"salutation\":\"Mrs\",\"firstName\":\"Shelley\",\"lastName\":\"Gardner\",\"emailAddress\":\"hfisher@example.net\",\"telephoneNumber\":\"219.443.6994\",\"otherPhoneNumber\":\"949-444-0203\",\"faxNumber\":\"001-397-272-6910x188\",\"addressLine1\":\"Fair View Farm, Bulls Lane\",\"addressLine2\":\"Wishaw\",\"addressTown\":\"SUTTON COLDFIELD\",\"addressCounty\":\"\",\"postcode\":\"B76 9QW\",\"organisation\":\"\",\"organisationType\":\"\",\"serviceUserType\":\"No Info\",\"caseReference\":\"3212054\"},{\"ID\":\"Legacy User\",\"SourceSystemID\":\"9\",\"salutation\":\"Mrs\",\"firstName\":\"Shelley\",\"lastName\":\"Gardner\",\"emailAddress\":\"hfisher@example.net\",\"telephoneNumber\":\"219.443.6994\",\"otherPhoneNumber\":\"949-444-0203\",\"faxNumber\":\"001-397-272-6910x188\",\"addressLine1\":\"Fair View Farm, Bulls Lane\",\"addressLine2\":\"Wishaw\",\"addressTown\":\"SUTTON COLDFIELD\",\"addressCounty\":\"\",\"postcode\":\"B76 9QW\",\"organisation\":\"\",\"organisationType\":\"\",\"serviceUserType\":\"No Info\",\"caseReference\":\"3212054\"},{\"ID\":\"Legacy User\",\"SourceSystemID\":\"9\",\"salutation\":\"Mrs\",\"firstName\":\"Shelley\",\"lastName\":\"Gardner\",\"emailAddress\":\"hfisher@example.net\",\"telephoneNumber\":\"219.443.6994\",\"otherPhoneNumber\":\"949-444-0203\",\"faxNumber\":\"001-397-272-6910x188\",\"addressLine1\":\"Fair View Farm, Bulls Lane\",\"addressLine2\":\"Wishaw\",\"addressTown\":\"SUTTON COLDFIELD\",\"addressCounty\":\"\",\"postcode\":\"B76 9QW\",\"organisation\":\"\",\"organisationType\":\"\",\"serviceUserType\":\"No Info\",\"caseReference\":\"3212054\"},{\"ID\":\"Legacy User\",\"SourceSystemID\":\"9\",\"salutation\":\"Mrs\",\"firstName\":\"Shelley\",\"lastName\":\"Gardner\",\"emailAddress\":\"hfisher@example.net\",\"telephoneNumber\":\"219.443.6994\",\"otherPhoneNumber\":\"949-444-0203\",\"faxNumber\":\"001-397-272-6910x188\",\"addressLine1\":\"Fair View Farm, Bulls Lane\",\"addressLine2\":\"Wishaw\",\"addressTown\":\"SUTTON COLDFIELD\",\"addressCounty\":\"\",\"postcode\":\"B76 9QW\",\"organisation\":\"\",\"organisationType\":\"\",\"serviceUserType\":\"No Info\",\"caseReference\":\"3212054\"}]'"
				],
				"execution_count": 65
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# COPY FROM DOCUMENTATION https://learn.microsoft.com/en-us/azure/service-bus-messaging/service-bus-python-how-to-use-topics-subscriptions?tabs=passwordless\n",
					"from azure.servicebus import ServiceBusClient\n",
					"from azure.servicebus import ServiceBusMessage\n",
					"\n",
					"servicebus_client = ServiceBusClient.from_connection_string(conn_str=conn_str, logging_enable=True)\n",
					"\n",
					"\n",
					"try:\n",
					"    #create a Service Bus client using the credential.\n",
					"    with servicebus_client:\n",
					"        # Get a Topic Sender object to send messages to the topic\n",
					"        sender = servicebus_client.get_topic_sender(topic_name=topic_name)\n",
					"        with sender:\n",
					"            # Send a batch of messages\n",
					"            batch_message = sender.create_message_batch()\n",
					"            for _ in range(10):\n",
					"                try:\n",
					"                    # Add a message to the batch\n",
					"                    batch_message.add_message(ServiceBusMessage(\"Message inside a ServiceBusMessageBatch {}\".format(_)))\n",
					"                except ValueError:\n",
					"                    # ServiceBusMessageBatch object reaches max_size.\n",
					"                    # New ServiceBusMessageBatch object can be created here to send more data.\n",
					"                    break\n",
					"            # Send the batch of messages to the topic\n",
					"            print(batch_message)\n",
					"            sender.send_messages(batch_message)\n",
					"        print(\"Sent a batch of 10 messages\")\n",
					"\n",
					"except Exception as e:  \n",
					"        print(f\"{e}\") "
				],
				"execution_count": 60
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# TEST CODE TO SEND SIMPLE STRING MESSAGES\n",
					"\n",
					"from azure.servicebus import ServiceBusClient, ServiceBusMessage\n",
					"servicebus_client = ServiceBusClient.from_connection_string(conn_str=conn_str, logging_enable=True)\n",
					"\n",
					"try:\n",
					"    with servicebus_client:\n",
					"        sender = servicebus_client.get_topic_sender(topic_name=topic_name)\n",
					"        with sender:\n",
					"            message = ServiceBusMessage(data)\n",
					"            sender.send_messages(message)\n",
					"\n",
					"except Exception as e:  \n",
					"        print(f\"{e}\") "
				],
				"execution_count": 66
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql \n",
					"\n",
					"SELECT * FROM odw_curated_db.service_user"
				],
				"execution_count": 59
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def publish_message(msg):\n",
					"    from azure.servicebus import ServiceBusClient, ServiceBusMessage\n",
					"    servicebus_client = ServiceBusClient.from_connection_string(conn_str=conn_str, logging_enable=True)\n",
					"\n",
					"    try:\n",
					"        with servicebus_client:\n",
					"            sender = servicebus_client.get_topic_sender(topic_name=topic_name)\n",
					"            with sender:\n",
					"                message = ServiceBusMessage(msg)\n",
					"                sender.send_messages(message)\n",
					"\n",
					"    except Exception as e:  \n",
					"            print(f\"{e}\") "
				],
				"execution_count": 76
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import json\n",
					"df = spark.sql('select * from odw_curated_db.service_user')\n",
					"json_data = df.toPandas().to_json(orient='records')\n",
					"publish_message(json_data)"
				],
				"execution_count": 78
			}
		]
	}
}