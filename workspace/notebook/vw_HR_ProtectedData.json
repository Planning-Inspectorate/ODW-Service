{
	"name": "vw_HR_ProtectedData",
	"properties": {
		"folder": {
			"name": "odw-curated/curatedviews"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "2008908b-560e-47ba-81d9-23bc22748495"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw",
				"name": "pinssynspodw",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#### The purpose of this notebook is to read data from Harmoised layer and build a view & table for Power BI use.\n",
					"\n",
					"**Author** &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   **Created Date** &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; **Description**  \n",
					"Prathap Adicherla &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;01-April-2025 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Protected Data Covered in here;"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"from pyspark.sql.functions import udf, col, lit, when, coalesce, concat, sum, avg, max, min, count, countDistinct, date_format, to_date, datediff, months_between, year, month,  hour, minute, second, expr, asc, desc\n",
					"from pyspark.sql.types import DateType, TimestampType, StringType, IntegerType, FloatType, DoubleType, BooleanType, StructType, StructField, ArrayType, MapType\n",
					"from pyspark.sql.window import Window\n",
					"from pyspark.sql.functions import row_number, rank, dense_rank, lag, lead, ntile\n",
					"from pyspark.sql import SQLContext\n",
					"from pyspark.sql import DataFrame\n",
					"from pyspark.sql import functions as F\n",
					"from pyspark.sql.avro.functions import from_avro, to_avro\n",
					"from pyspark.sql.streaming import DataStreamReader, DataStreamWriter\n",
					"from pyspark.sql.utils import AnalysisException\n",
					"from pyspark.sql.catalog import Catalog\n",
					"from pyspark.sql.column import Column\n",
					"from pyspark.sql.group import GroupedData\n",
					"from pyspark.sql.pandas.functions import pandas_udf\n",
					"\n",
					"from datetime import datetime, timedelta\n",
					"import pandas as pd\n",
					"import numpy as np"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"\n",
					"\n",
					"CREATE VIEW IF NOT EXISTS odw_curated_db.vw_HR_ProtectedData\n",
					"AS\n",
					"\n",
					"WITH Dates\n",
					"AS\n",
					"(\n",
					"SELECT DISTINCT\n",
					" Report_MonthEnd_Date AS Dt\n",
					"FROM odw_harmonised_db.sap_hr_protected_data\n",
					"),\n",
					"MinMaxDates AS\n",
					"(\n",
					"SELECT MIN(Dt) AS StartDate,\n",
					"       MAX(Dt) AS EndDate\n",
					"FROM Dates\n",
					"),\n",
					"dimDate\n",
					"AS\n",
					"(\n",
					"    SELECT date,\n",
					"           month_name,\n",
					"           month_int,\n",
					"           Month_Year_Latest AS Month_Latest,\n",
					"           CASE WHEN Month_Year = Month_Year_Latest THEN SortKey*-1\n",
					"           ELSE -999999\n",
					"           END AS MonthYearLatest_SortKey,\n",
					"           year_int AS Year,\n",
					"           financial_year AS FY,\n",
					"           CASE WHEN FY_Calc = 'Current' THEN 'Latest'\n",
					"           ELSE 'FY-' + CAST(RIGHT(financial_year,2) AS VARCHAR(10))\n",
					"           END AS FY_Latest,\n",
					"           CASE WHEN FY_Calc = 'Current' THEN 2099\n",
					"           ELSE financial_year\n",
					"           END AS FY_latest_SortKey\n",
					"    FROM\n",
					"    (\n",
					"        SELECT\n",
					"        date,\n",
					"        month_name,\n",
					"        month_int,\n",
					"        year_int,\n",
					"        CASE WHEN MONTH(date)>3 AND YEAR(date) = YEAR(date) THEN YEAR(date) \n",
					"            WHEN MONTH(date)<=3 AND YEAR(date) = YEAR(date)+1 THEN YEAR(date)\n",
					"            WHEN MONTH(date)>3 AND YEAR(date) = YEAR(date)-1 THEN YEAR(date)-1 \n",
					"            WHEN MONTH(date)<=3 AND YEAR(date) = YEAR(date) THEN YEAR(date)-1\n",
					"        END AS financial_year,\n",
					"        CASE WHEN current_date() >= make_date(YEAR(current_date()),04,01) THEN\n",
					"                    CASE WHEN MONTH(date)>3 AND YEAR(date) = YEAR(current_date()) THEN 'Current'\n",
					"                            WHEN MONTH(date)<=3 AND YEAR(date) = YEAR(current_date())+1 THEN 'Current'\n",
					"                            WHEN MONTH(date)>3 AND YEAR(date) = YEAR(current_date())-1 THEN 'Previous'\n",
					"                            WHEN MONTH(date)<=3 AND YEAR(date) = YEAR(current_date()) THEN 'Previous'\n",
					"                        ELSE NULL\n",
					"                    END\n",
					"              WHEN current_date() >= make_date(YEAR(current_date())-1,04,01) THEN\n",
					"                     CASE WHEN MONTH(date)>3 AND YEAR(date) = YEAR(current_date())-1 THEN 'Current'\n",
					"                            WHEN MONTH(date)<=3 AND YEAR(date) = YEAR(current_date()) THEN 'Current'\n",
					"                            WHEN MONTH(date)>3 AND YEAR(date) = YEAR(current_date())-2 THEN 'Previous'\n",
					"                            WHEN MONTH(date)<=3 AND YEAR(date) = YEAR(current_date())-1 THEN 'Previous'\n",
					"                        ELSE NULL\n",
					"                    END \n",
					"        END AS FY_Calc,\n",
					"        date_format(date,'yyyyMM') AS SortKey,\n",
					"        CONCAT(month_name,' - ',RIGHT(year_int,2)) AS Month_Year,\n",
					"        CASE WHEN first_of_month = date_add(last_day(date_add((SELECT EndDate FROM MinMaxDates),1)),-1) THEN 'Latest'\n",
					"            ELSE CONCAT(month_name,' - ',RIGHT(year_int,2)) \n",
					"        END AS Month_Year_Latest\n",
					"    FROM odw_harmonised_db.live_dim_date\n",
					"    WHERE date IN (SELECT dt FROM Dates)\n",
					"    )a\n",
					"),\n",
					"Final\n",
					"AS\n",
					"(\n",
					"    SELECT \n",
					"           CAST(b.date AS date) AS PC_Date,\n",
					"           b.month_name AS PC_Month,\n",
					"           b.month_int,\n",
					"           b.Month_Latest AS PC_Month_Latest,\n",
					"           b.MonthYearLatest_SortKey,\n",
					"           b.Year AS PC_Year,\n",
					"           b.FY AS PC_FY,\n",
					"           b.FY_Latest AS PC_FY_Latest,\n",
					"           b.FY_latest_SortKey,\n",
					"           a.RefNo AS Ref_Number,  -- Changed from Ref_Number to RefNo\n",
					"           DisabilityText,\n",
					"           CASE WHEN DisabilityText IS NULL THEN 'No Record'\n",
					"                WHEN DisabilityText = 'DISABLED' THEN 'Yes'\n",
					"                WHEN DisabilityText = 'NOT DISABLED' THEN 'No'\n",
					"                WHEN DisabilityText IN ('PREFER NOT TO SAY','Not disclosed','Do not wish to disclose') THEN 'Unknown'\n",
					"            END AS Disabled,\n",
					"           CASE DisabilityText\n",
					"                WHEN 'PREFER NOT TO SAY' THEN 'Undeclared'\n",
					"                WHEN 'DISABLED' THEN 'Disabled'\n",
					"                WHEN 'NOT DISABLED' THEN 'Not Disabled'\n",
					"                ELSE 'Not reported'\n",
					"           END AS Disability_group,\n",
					"           EthnicOrigin,\n",
					"           CASE WHEN EthnicOrigin IS NULL THEN 'No Record'\n",
					"                WHEN EthnicOrigin LIKE 'White%' THEN 'White'\n",
					"                WHEN EthnicOrigin IN ('PREFER NOT TO SAY','Not disclosed','Do not wish to disclose','Unknown') THEN 'Unknown'\n",
					"           ELSE 'BME'\n",
					"           END AS Ethnicity,\n",
					"           CASE EthnicOrigin\n",
					"                WHEN 'Asian - Bangladeshi' THEN 'Asian'\n",
					"                WHEN 'Asian - Indian' THEN 'Asian'\n",
					"                WHEN 'Asian - Other' THEN 'Asian'\n",
					"                WHEN 'Asian - Pakistani' THEN 'Asian'\n",
					"                WHEN 'Black - African' THEN 'Black'\n",
					"                WHEN 'Black - Caribbean' THEN 'Black'\n",
					"                WHEN 'Chinese' THEN 'Chinese'\n",
					"                WHEN 'Do not wish to disclose' THEN 'Not declared'\n",
					"                WHEN 'Mixed - Other' THEN 'Mixed'\n",
					"                WHEN 'Mixed - White & Asian' THEN 'Mixed'\n",
					"                WHEN 'Mixed - White & Black African' THEN 'Mixed'\n",
					"                WHEN 'Mixed - White & Black Caribbean' THEN 'Mixed'\n",
					"                WHEN 'Other' THEN 'Other ethnicity'\n",
					"                WHEN 'Unknown' THEN 'Not reported'\n",
					"                WHEN 'White - Any Background' THEN 'White'\n",
					"                WHEN 'White - British' THEN 'White'\n",
					"                WHEN 'White - Irish' THEN 'White'\n",
					"                WHEN 'White - Other' THEN 'White'\n",
					"                WHEN 'White - Any Other Background' THEN 'White'\n",
					"                ELSE 'Not reported'\n",
					"           END AS Ethnicity_group,\n",
					"           ReligiousDenominationKey,\n",
					"           CASE WHEN ReligiousDenominationKey IS NULL THEN 'No Record'\n",
					"                WHEN ReligiousDenominationKey IN ('None','Agnostic / Atheist') OR LEFT(ReligiousDenominationKey,3) IN ('ath','agn') THEN 'Agnostic / Atheist'\n",
					"                WHEN ReligiousDenominationKey = 'Christian' THEN 'Christian'\n",
					"                WHEN ReligiousDenominationKey IN ('PREFER NOT TO SAY','Not disclosed','Do not wish to disclose','Unknown') THEN 'Unknown'\n",
					"           ELSE 'Other Religion'\n",
					"           END AS Religion,\n",
					"           CASE ReligiousDenominationKey\n",
					"                WHEN 'Agnostic' THEN 'No religion'\n",
					"                WHEN 'Atheist' THEN 'No religion'\n",
					"                WHEN 'Buddhist' THEN 'Buddhist'\n",
					"                WHEN 'Christian' THEN 'Christian'\n",
					"                WHEN 'Do not wish to disclose' THEN 'Not declared'\n",
					"                WHEN 'Hindu' THEN 'Hindu'\n",
					"                WHEN 'Jewish' THEN 'Jewish'\n",
					"                WHEN 'Muslim' THEN 'Muslim'\n",
					"                WHEN 'None' THEN 'No religion'\n",
					"                WHEN 'Other (please specify)' THEN 'Any other religion'\n",
					"                WHEN 'Sikh' THEN 'Sikh'\n",
					"                ELSE 'Not reported'\n",
					"           END AS Religion_group,\n",
					"           SxO,\n",
					"           CASE WHEN SxO IS NULL THEN 'No Record'\n",
					"                WHEN SxO ='Heterosexual' THEN 'Heterosexual'\n",
					"                WHEN LEFT(SxO,3) IN ('Gay','Les','Bis') THEN 'LGBT'\n",
					"                WHEN SxO IN ('PREFER NOT TO SAY','Not disclosed','Do not wish to disclose','Unknown','Other') THEN 'Unknown'\n",
					"           ELSE 'Other'\n",
					"           END AS Sexual_Orientation,\n",
					"           CASE SxO\n",
					"                WHEN 'Bisexual' THEN 'Bisexual'\n",
					"                WHEN 'Gay Man' THEN 'Lesbian / Gay'\n",
					"                WHEN 'Heterosexual' THEN 'Hetero / Straight'\n",
					"                WHEN 'Lesbian' THEN 'Lesbian / Gay'\n",
					"                WHEN 'Not disclosed' THEN 'Undeclared'\n",
					"                WHEN 'Other' THEN 'Other'\n",
					"                ELSE 'Not reported'\n",
					"           END AS Sexual_Orientation_group\n",
					"    FROM odw_harmonised_db.sap_hr_protected_data a\n",
					"    LEFT OUTER JOIN dimDate b\n",
					"    ON a.Report_MonthEnd_Date = b.date\n",
					")\n",
					"SELECT *,\n",
					"      1 AS PC_Headcount,\n",
					"      CASE WHEN Disabled IN ('No Record','Unknown') THEN 'No Record or Data not supplied for one or more categories.'\n",
					"            WHEN Ethnicity IN ('No Record','Unknown') THEN 'No Record or Data not supplied for one or more categories.'\n",
					"            WHEN Religion IN ('No Record','Unknown') THEN 'No Record or Data not supplied for one or more categories.'\n",
					"            WHEN Sexual_Orientation IN ('No Record','Unknown') THEN 'No Record or Data not supplied for one or more categories.'\n",
					"      ELSE 'Records Complete'\n",
					"      END AS Data_Completeness \n",
					"FROM Final"
				],
				"execution_count": 11
			},
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"create or replace table odw_curated_db.pbi_HR_ProtectedData\n",
					"using delta\n",
					"as\n",
					"SELECT * FROM odw_curated_db.vw_HR_ProtectedData"
				],
				"execution_count": 12
			}
		]
	}
}