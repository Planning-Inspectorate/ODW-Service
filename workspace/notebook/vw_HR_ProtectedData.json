{
	"name": "vw_HR_ProtectedData",
	"properties": {
		"folder": {
			"name": "odw-curated/curatedviews"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "94eec9d6-fe47-4173-ae47-4adefafdc1e0"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw",
				"name": "pinssynspodw",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#### The purpose of this notebook is to read data from Harmoised layer and build a view & table for Power BI use.\n",
					"\n",
					"**Author** &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   **Created Date** &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; **Description**  \n",
					"Prathap Adicherla &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;01-April-2025 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Protected Data Covered in here;"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"from pyspark.sql.functions import udf, col, lit, when, coalesce, concat, sum, avg, max, min, count, countDistinct, date_format, to_date, datediff, months_between, year, month,  hour, minute, second, expr, asc, desc\n",
					"from pyspark.sql.types import DateType, TimestampType, StringType, IntegerType, FloatType, DoubleType, BooleanType, StructType, StructField, ArrayType, MapType\n",
					"from pyspark.sql.window import Window\n",
					"from pyspark.sql.functions import row_number, rank, dense_rank, lag, lead, ntile\n",
					"from pyspark.sql import SQLContext\n",
					"from pyspark.sql import DataFrame\n",
					"from pyspark.sql import functions as F\n",
					"from pyspark.sql.avro.functions import from_avro, to_avro\n",
					"from pyspark.sql.streaming import DataStreamReader, DataStreamWriter\n",
					"from pyspark.sql.utils import AnalysisException\n",
					"from pyspark.sql.catalog import Catalog\n",
					"from pyspark.sql.column import Column\n",
					"from pyspark.sql.group import GroupedData\n",
					"from pyspark.sql.pandas.functions import pandas_udf\n",
					"\n",
					"from datetime import datetime, timedelta\n",
					"import pandas as pd\n",
					"import numpy as np"
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"source": [
					"\n",
					"%run utils/py_logging_decorator"
				],
				"execution_count": 3
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# ProtectedData"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"\n",
					"\n",
					"try:\n",
					"   # Create the HR Protected Data view\n",
					"   spark.sql(\"\"\"\n",
					"   CREATE OR REPLACE VIEW odw_curated_db.vw_HR_ProtectedData\n",
					"   AS\n",
					"   \n",
					"   WITH Dates AS (\n",
					"       SELECT DISTINCT\n",
					"           Report_MonthEnd_Date AS Dt\n",
					"       FROM odw_harmonised_db.sap_hr_protected_data\n",
					"       WHERE Report_MonthEnd_Date IS NOT NULL\n",
					"   ),\n",
					"   \n",
					"   MinMaxDates AS (\n",
					"       SELECT \n",
					"           MIN(Dt) AS StartDate,\n",
					"           MAX(Dt) AS EndDate\n",
					"       FROM Dates\n",
					"   ),\n",
					"   \n",
					"   Final AS (\n",
					"       SELECT \n",
					"           CAST(b.date AS date) AS PC_Date,\n",
					"           b.month_name AS PC_Month,\n",
					"           b.month_int,\n",
					"           b.MonthYear AS PC_Month_Latest,\n",
					"           CAST(b.MonthYearSortKey AS BIGINT) * -1 AS MonthYearLatest_SortKey,\n",
					"           b.year_int AS PC_Year,\n",
					"           b.FY AS PC_FY,\n",
					"           b.FY_Latest AS PC_FY_Latest,\n",
					"           b.FY_Latest_SortKey,\n",
					"           a.RefNo AS Ref_Number,\n",
					"           DisabilityText,\n",
					"           CASE \n",
					"               WHEN DisabilityText IS NULL THEN 'No Record'\n",
					"               WHEN DisabilityText = '0' THEN 'No Record'\n",
					"               WHEN DisabilityText = 'DISABLED' THEN 'Yes'\n",
					"               WHEN DisabilityText = 'Has a disability (or previously had one)' THEN 'Yes'\n",
					"               WHEN DisabilityText = 'NOT DISABLED' THEN 'No'\n",
					"               WHEN DisabilityText = 'Does not have a disability' THEN 'No'\n",
					"               WHEN DisabilityText IN ('PREFER NOT TO SAY','Not disclosed','Do not wish to disclose') THEN 'Unknown'\n",
					"           END AS Disabled,\n",
					"           CASE DisabilityText\n",
					"               WHEN 'PREFER NOT TO SAY' THEN 'Undeclared'\n",
					"               WHEN 'DISABLED' THEN 'Disabled'\n",
					"               WHEN 'Has a disability (or previously had one)' THEN 'Disabled'\n",
					"               WHEN 'NOT DISABLED' THEN 'Not Disabled'\n",
					"               WHEN 'Does not have a disability' THEN 'Not Disabled'\n",
					"               ELSE 'Not reported'\n",
					"           END AS Disability_group,\n",
					"           EthnicOrigin,\n",
					"           CASE \n",
					"               WHEN EthnicOrigin IS NULL THEN 'No Record'\n",
					"               WHEN EthnicOrigin = '0' THEN 'No Record'\n",
					"               WHEN EthnicOrigin LIKE 'White%' THEN 'White'\n",
					"               WHEN EthnicOrigin IN ('PREFER NOT TO SAY','Not disclosed','Do not wish to disclose','Unknown','Not known') THEN 'Unknown'\n",
					"               ELSE 'BME'\n",
					"           END AS Ethnicity,\n",
					"           CASE \n",
					"               WHEN EthnicOrigin LIKE 'Asian%' THEN 'Asian'\n",
					"               WHEN EthnicOrigin LIKE 'Black%' THEN 'Black'\n",
					"               WHEN EthnicOrigin = 'Chinese' THEN 'Chinese'\n",
					"               WHEN EthnicOrigin = 'Do not wish to disclose' THEN 'Not declared'\n",
					"               WHEN EthnicOrigin = 'Not disclosed' THEN 'Not declared'\n",
					"               WHEN EthnicOrigin LIKE 'Mixed%' THEN 'Mixed'\n",
					"               WHEN EthnicOrigin LIKE 'Other%' THEN 'Other ethnicity'\n",
					"               WHEN EthnicOrigin = 'Unknown' THEN 'Not reported'\n",
					"               WHEN EthnicOrigin = 'Not known' THEN 'Not reported'\n",
					"               WHEN EthnicOrigin LIKE 'White%' THEN 'White'\n",
					"               WHEN EthnicOrigin = 'Prefer not to say' THEN 'Prefer not to say'\n",
					"               ELSE 'Not reported'\n",
					"           END AS Ethnicity_group,\n",
					"           ReligiousDenominationKey,\n",
					"           CASE \n",
					"               WHEN ReligiousDenominationKey IS NULL THEN 'No Record'\n",
					"               WHEN ReligiousDenominationKey IN ('None','Agnostic / Atheist') OR LEFT(ReligiousDenominationKey,3) IN ('ath','agn') THEN 'Agnostic / Atheist'\n",
					"               WHEN ReligiousDenominationKey = 'Christian' THEN 'Christian'\n",
					"               WHEN ReligiousDenominationKey IN ('PREFER NOT TO SAY','Not disclosed','Do not wish to disclose','Unknown') THEN 'Unknown'\n",
					"               ELSE 'Other Religion'\n",
					"           END AS Religion,\n",
					"           CASE ReligiousDenominationKey\n",
					"               WHEN 'Agnostic' THEN 'No religion'\n",
					"               WHEN 'Atheist' THEN 'No religion'\n",
					"               WHEN 'Buddhist' THEN 'Buddhist'\n",
					"               WHEN 'Christian' THEN 'Christian'\n",
					"               WHEN 'Do not wish to disclose' THEN 'Not declared'\n",
					"               WHEN 'Hindu' THEN 'Hindu'\n",
					"               WHEN 'Jewish' THEN 'Jewish'\n",
					"               WHEN 'Muslim' THEN 'Muslim'\n",
					"               WHEN 'None' THEN 'No religion'\n",
					"               WHEN 'No religion' THEN 'No religion'\n",
					"               WHEN 'Other (please specify)' THEN 'Any other religion'\n",
					"               WHEN 'Sikh' THEN 'Sikh'\n",
					"               ELSE 'Not reported'\n",
					"           END AS Religion_group,\n",
					"           SxO,\n",
					"           CASE \n",
					"               WHEN SxO IS NULL THEN 'No Record'\n",
					"               WHEN SxO LIKE '%Hetero%' THEN 'Heterosexual'\n",
					"               WHEN LEFT(SxO,3) IN ('Gay','Les','Bis') THEN 'LGBT'\n",
					"               WHEN SxO IN ('PREFER NOT TO SAY','Not disclosed','Do not wish to disclose','Unknown','Other') THEN 'Unknown'\n",
					"               ELSE 'Other'\n",
					"           END AS Sexual_Orientation,\n",
					"           CASE \n",
					"               WHEN SxO = 'Bisexual' THEN 'Bisexual'\n",
					"               WHEN SxO = 'Gay Man' THEN 'Lesbian / Gay'\n",
					"               WHEN SxO LIKE 'Gay%' THEN 'Lesbian / Gay'\n",
					"               WHEN SxO LIKE '%Hetero%' THEN 'Hetero / Straight'\n",
					"               WHEN SxO = 'Lesbian' THEN 'Lesbian / Gay'\n",
					"               WHEN SxO = 'Not disclosed' THEN 'Undeclared'\n",
					"               WHEN SxO = 'Other' THEN 'Other'\n",
					"               ELSE 'Not reported'\n",
					"           END AS Sexual_Orientation_group,\n",
					"           CASE \n",
					"               WHEN SxO IN ('Bisexual', 'Lesbian / Gay', 'Other') THEN 'LGBTQ+' \n",
					"               ELSE SxO \n",
					"           END AS Sexual_Orientation_PINS_Grouping\n",
					"       FROM odw_harmonised_db.sap_hr_protected_data a\n",
					"       LEFT OUTER JOIN odw_harmonised_db.live_dim_date b\n",
					"           ON CAST(a.Report_MonthEnd_Date AS DATE) = CAST(b.date AS DATE)\n",
					"       WHERE a.Report_MonthEnd_Date IS NOT NULL\n",
					"   )\n",
					"   \n",
					"   SELECT \n",
					"       *,\n",
					"       1 AS PC_Headcount,\n",
					"       CASE \n",
					"           WHEN Disabled IN ('No Record','Unknown') THEN 'No Record or Data not supplied for one or more categories.'\n",
					"           WHEN Ethnicity IN ('No Record','Unknown') THEN 'No Record or Data not supplied for one or more categories.'\n",
					"           WHEN Religion IN ('No Record','Unknown') THEN 'No Record or Data not supplied for one or more categories.'\n",
					"           WHEN Sexual_Orientation IN ('No Record','Unknown') THEN 'No Record or Data not supplied for one or more categories.'\n",
					"           ELSE 'Records Complete'\n",
					"       END AS Data_Completeness,\n",
					"       CONCAT(\n",
					"           PC_Year,\n",
					"           RIGHT('0' + CAST(month_int AS VARCHAR(2)), 2),\n",
					"           RIGHT('0' + CAST(DAY(PC_Date) AS VARCHAR(2)), 2)\n",
					"       ) AS PC_dim_date_key\n",
					"   FROM Final\n",
					"   \"\"\")\n",
					"   \n",
					"   # Drop and recreate the table\n",
					"   spark.sql(\"\"\"\n",
					"   DROP TABLE IF EXISTS odw_curated_db.pbi_HR_ProtectedData\n",
					"   \"\"\")\n",
					"   \n",
					"   spark.sql(\"\"\"\n",
					"   CREATE TABLE odw_curated_db.pbi_HR_ProtectedData\n",
					"   USING delta\n",
					"   AS\n",
					"   SELECT * FROM odw_curated_db.vw_HR_ProtectedData\n",
					"   \"\"\")\n",
					"\n",
					"except Exception as e:\n",
					"   # Log the exception\n",
					"   logError(f\"Error in HR Protected Data setup: {str(e)}\")\n",
					"   logException(e)\n",
					"   raise e\n",
					"finally:\n",
					"   # Always flush logs\n",
					"   flushLogging()"
				],
				"execution_count": 4
			}
		]
	}
}