{
	"name": "hr_record_fact",
	"properties": {
		"folder": {
			"name": "odw-harmonised/SAP-HR"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "f21fb961-a1d0-4d1d-ac7a-0a510abc4552"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw",
				"name": "pinssynspodw",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.2",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Check for new, updated or deleted data\r\n",
					"- This script checks for new, updated or deleted data by checking the source data (sap hr) against the target (odw_harmonised_db.hr_record_fact)\r\n",
					"- **New Data:** where a Pers_No in the source does not exist as an EmployeeNumber in the target. NewData flag is set to 'Y'\r\n",
					"- **Updated data:** Comparison occurs on Pers_No in source and EmployeeNumber in target where the row hash is different i.e. there is a change in one of the columns. NewData flag is set to 'Y'\r\n",
					"- **Deleted data:** where an EmployeeNumber in the target exists but the same Pers_No doesn't exist in the source. DeletedData flag is set to 'Y'\r\n",
					"\r\n",
					"## View hr_record_fact_new is created"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"-- Build hr_record_fact -- merge\r\n",
					"-- Gets modified or deleted from source rows\r\n",
					"\r\n",
					"CREATE OR REPLACE TEMPORARY VIEW hr_record_fact_new \r\n",
					"\r\n",
					"    AS\r\n",
					"\r\n",
					"-- gets data that matches of SourceID and flags that it is modified based on a row (md5) hash. Flags as \"NewData\"\r\n",
					"-- gets data that is in the target but not in source. Flags as \"DeletedData\"\r\n",
					"\r\n",
					"SELECT \r\n",
					"    CASE\r\n",
					"        WHEN T1.Pers_No IS NULL\r\n",
					"        THEN T2.EmployeeID\r\n",
					"        ELSE NULL\r\n",
					"    END as EmployeeID, -- surrogate key\r\n",
					"    T1.First_name AS FirstName,\r\n",
					"    T2.EmployeeID AS EmployeeID,\r\n",
					"    T3.PersonnelAreaID AS PersonnelAreaID,\r\n",
					"    T4.PersonnelSubAreaID AS PersonnelSubAreaID,\r\n",
					"    T5.OrganisationalUnitID AS OrganisationalUnitID,\r\n",
					"    T6.ContractID AS ContractID,\r\n",
					"    T7.PayBandID AS PayBandID,\r\n",
					"    T8.CostCenterID AS CostCenterID,\r\n",
					"    T9.PositionID AS PositionID,\r\n",
					"    T10.ManagerEmployeeID AS ManagerEmployeeID,\r\n",
					"    T10.ManagerPositionID AS ManagerPositionID,\r\n",
					"    T10.CounterSignManagerEmployeeID AS CounterSignManagerEmployeeID,\r\n",
					"    T11.LocationID AS LocationID,\r\n",
					"    T12.WorkScheduleID AS WorkScheduleID,\r\n",
					"    T13.SpecialismID AS SpecialismID,\r\n",
					"    T14.SourceSystemID,\r\n",
					"    current_timestamp as StartDate,\r\n",
					"    NULL as EndDate,\r\n",
					"    current_timestamp as IngestionDate,\r\n",
					"    NULL as ValidTo,\r\n",
					"    md5(concat(T1.First_name,T1.Last_name,T1.Birth_date, IFNULL(T1.NI_number, '.'), IFNULL(T1.Gender_Key, '.'), IFNULL(T2.Street_and_House_Number, '.'),IFNULL(T2.`2nd_Address_Line`, '.'),\r\n",
					"                IFNULL(T2.District, '.'),IFNULL(T2.City, '.'),IFNULL(T2.Region_State_Province_Count, '.'),IFNULL(T2.Postal_Code, '.'),IFNULL(T3.Email_Address, '.'),IFNULL(T2.Personal_Mobile, '.'),\r\n",
					"                IFNULL(T2.Work_Mobile, '.'),IFNULL(T2.Staff_Number, '.'),IFNULL(T1.Pers_No, '.'),T1.FTE,T1.Wk_hrs,IFNULL(T1.`Indicator_Part-Time_Employee`,'.'),T1.Employment_Status,IFNULL(T1.Civil_Service_Start, '.'),IFNULL(T1.Date_to_Current_Job, '.'),\r\n",
					"                IFNULL(T1.Seniority_Date, '.'),IFNULL(T1.Org_Start_Date, '.'),IFNULL(T1.Fix_Term_End_Date, '.'),IFNULL(T1.Loan_End_Date, '.'),IFNULL(T1.Loan_Start_Date, '.'),T1.Payroll_Area,IFNULL(T1.Assignment_Number, '.'),\r\n",
					"                T1.Employee_Group,T1.Annual_salary)) as RowID, \r\n",
					"    'Y' as IsActive\r\n",
					"\r\n",
					"FROM odw_standardised_db.vw_saphr T1\r\n",
					"LEFT JOIN odw_harmonised_db.employee_dim T2 ON T2.EmployeeID = T15.EmployeeID\r\n",
					"LEFT JOIN odw_harmonised_db.personnelarea_dim T3 ON T3.PA = T1.PersonnelSubAreaCode\r\n",
					"LEFT JOIN odw_harmonised_db.personnelsubarea_dim T4 ON T4.PSubArea = T1.PersonnelSubAreaCode\r\n",
					"LEFT JOIN odw_harmonised_db.organisationalunit_dim T5 ON T5.\r\n",
					"LEFT JOIN odw_harmonised_db.contract_dim T6 ON T6.\r\n",
					"LEFT JOIN odw_harmonised_db.payband_dim T7 ON T7.\r\n",
					"LEFT JOIN odw_harmonised_db.costcenter_dim T8 ON T8.\r\n",
					"LEFT JOIN odw_harmonised_db.position_dim T9 ON T9.\r\n",
					"LEFT JOIN odw_harmonised_db.employee_hr_hierarchy_dim T10 ON T10.\r\n",
					"LEFT JOIN odw_harmonised_db.pins_location_dim T11 ON T11.\r\n",
					"LEFT JOIN odw_harmonised_db.workshedule_dim T12 ON T12.\r\n",
					"LEFT JOIN odw_harmonised_db.specialism_dim T13 ON T13.\r\n",
					"LEFT JOIN odw_harmonised_db.sourcesystem_fact T14 ON \"SAP HR\" = T14.Description\r\n",
					"FULL JOIN odw_harmonised_db.hr_record_fact T15 ON ----T1.Pers_No = T7.EmployeeNumber\r\n",
					"WHERE  (T7.IsActive = 'Y' or T7.IsActive IS NULL)\r\n",
					"    \r\n",
					"        AND (\r\n",
					"        \r\n",
					"        -- flags new data        \r\n",
					"        ( CASE\r\n",
					"            WHEN T1.Pers_No = T7.EmployeeNumber AND md5(concat(T1.First_name,T1.Last_name,T1.Birth_date, IFNULL(T1.NI_number, '.'), IFNULL(T1.Gender_Key, '.'), IFNULL(T2.Street_and_House_Number, '.'),IFNULL(T2.`2nd_Address_Line`, '.'),\r\n",
					"                                                                IFNULL(T2.District, '.'),IFNULL(T2.City, '.'),IFNULL(T2.Region_State_Province_Count, '.'),IFNULL(T2.Postal_Code, '.'),IFNULL(T3.Email_Address, '.'),IFNULL(T2.Personal_Mobile, '.'),\r\n",
					"                                                                IFNULL(T2.Work_Mobile, '.'),IFNULL(T2.Staff_Number, '.'),IFNULL(T1.Pers_No, '.'),T1.FTE,T1.Wk_hrs,IFNULL(T1.`Indicator_Part-Time_Employee`,'.'),T1.Employment_Status,IFNULL(T1.Civil_Service_Start, '.'),IFNULL(T1.Date_to_Current_Job, '.'),\r\n",
					"                                                                IFNULL(T1.Seniority_Date, '.'),IFNULL(T1.Org_Start_Date, '.'),IFNULL(T1.Fix_Term_End_Date, '.'),IFNULL(T1.Loan_End_Date, '.'),IFNULL(T1.Loan_Start_Date, '.'),T1.Payroll_Area,IFNULL(T1.Assignment_Number, '.'),\r\n",
					"                                                                T1.Employee_Group,T1.Annual_salary)) <> T7.RowID     \r\n",
					"            THEN 'Y'\r\n",
					"            WHEN T7.EmployeeNumber IS NULL\r\n",
					"            THEN 'Y'\r\n",
					"            ELSE 'N'\r\n",
					"        END  = 'Y' ) OR\r\n",
					"        \r\n",
					"        -- flags deleted data\r\n",
					"        ( CASE\r\n",
					"            WHEN T1.Pers_No IS NULL\r\n",
					"            THEN 'Y'\r\n",
					"            ELSE 'N'\r\n",
					"        END = 'Y' )\r\n",
					")\r\n",
					";\r\n",
					""
				],
				"execution_count": 3
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Dataset is created that contains changed data and corresponding target data\r\n",
					"- This script combines data that has been updated, Deleted or is new, with corresponding target data\r\n",
					"- View **hr_record_fact_new** is unioned to the target data filter to only those rows where changes have been detected\r\n",
					"## View hr_record_fact_changed_rows is created"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"\r\n",
					"-- Create new and updated dataset\r\n",
					"\r\n",
					"CREATE OR REPLACE TEMPORARY  VIEW hr_record_fact_rows\r\n",
					"\r\n",
					"    AS\r\n",
					"\r\n",
					"-- gets updated, deleted and new rows \r\n",
					"\r\n",
					"Select \r\n",
					"    HRRecordID, -- surrogate key\r\n",
					"    EmployeeID,\r\n",
					"    PersonnelAreaID,\r\n",
					"    PersonnelSubAreaID,\r\n",
					"    OrganisationalUnitID,\r\n",
					"    ContractID,\r\n",
					"    PayBandID,\r\n",
					"    CostCenterID,\r\n",
					"    PositionID,\r\n",
					"    ManagerEmployeeID,\r\n",
					"    ManagerPositionID,\r\n",
					"    CounterSignManagerEmployeeID,\r\n",
					"    LocationID,\r\n",
					"    WorkScheduleID,\r\n",
					"    SpecialismID,\r\n",
					"    SourceSystemID,\r\n",
					"    StartDate,\r\n",
					"    EndDate,\r\n",
					"    IngestionDate,\r\n",
					"    ValidTo,\r\n",
					"    RowID,\r\n",
					"    IsActive\r\n",
					"From hr_record_fact_new\r\n",
					"\r\n",
					"    UNION ALL\r\n",
					"\r\n",
					"-- gets original versions of updated rows so we can update EndDate and set IsActive flag to 'N'\r\n",
					"\r\n",
					"SELECT\r\n",
					"    HRRecordID, -- surrogate key\r\n",
					"    EmployeeID,\r\n",
					"    PersonnelAreaID,\r\n",
					"    PersonnelSubAreaID,\r\n",
					"    OrganisationalUnitID,\r\n",
					"    ContractID,\r\n",
					"    PayBandID,\r\n",
					"    CostCenterID,\r\n",
					"    PositionID,\r\n",
					"    ManagerEmployeeID,\r\n",
					"    ManagerPositionID,\r\n",
					"    CounterSignManagerEmployeeID,\r\n",
					"    LocationID,\r\n",
					"    WorkScheduleID,\r\n",
					"    SpecialismID,\r\n",
					"    SourceSystemID,\r\n",
					"    StartDate,\r\n",
					"    EndDate,\r\n",
					"    IngestionDate,\r\n",
					"    ValidTo,\r\n",
					"    RowID,\r\n",
					"    IsActive\r\n",
					"FROM odw_harmonised_db.hr_record_fact\r\n",
					"WHERE EmployeeID IN (SELECT EmployeeID FROM hr_record_fact_new);\r\n",
					""
				],
				"execution_count": 4
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# View hr_record_fact_changed_rows is used in a merge (Upsert) statement into the target table\r\n",
					"- **WHEN MATCHED** ON the Business Key (i.e. Pers_No from SAP HR), EndDate is set to today -1 day and the IsActive flag is set to 'N'\r\n",
					"- **WHEN NOT MATCHED** ON the business key, insert rows\r\n",
					"## Table hr_record_fact.employee_dim is updated"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"-- merge into fact table\r\n",
					"\r\n",
					"MERGE INTO odw_harmonised_db.hr_record_fact AS Target\r\n",
					"USING hr_record_fact_changed_rows AS Source\r\n",
					"\r\n",
					"ON Source.EHRRecordID = Target.EHRRecordID\r\n",
					"\r\n",
					"-- For Updates existing rows\r\n",
					"\r\n",
					"WHEN MATCHED\r\n",
					"    THEN \r\n",
					"    UPDATE SET\r\n",
					"    Target.EndDate = date_sub(current_timestamp,1),\r\n",
					"    Target.IsActive = 'N'\r\n",
					"\r\n",
					"-- Insert completely new rows\r\n",
					"WHEN NOT MATCHED \r\n",
					"    THEN INSERT * ;   \r\n",
					"\r\n",
					"\r\n",
					""
				],
				"execution_count": 5
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Fix the IDs\r\n",
					"- No auto-increment feature is available in delta tables, therefore we need to create new IDs for the inserted rows\r\n",
					"- This is done by select the target data and using INSERT OVERWRITE to re-insert the data is a new Row Number\r\n",
					"## Table odw_harmonised.hr_record_fact is updated"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"-- Insert new SecureInfoID\r\n",
					"\r\n",
					"INSERT OVERWRITE odw_harmonised_db.hr_record_fact\r\n",
					"\r\n",
					"SELECT \r\n",
					"    ROW_NUMBER() OVER (ORDER BY EHRRecordID NULLS LAST) AS EHRRecordID, -- surrogate key\r\n",
					"    EmployeeID,\r\n",
					"    PersonnelAreaID,\r\n",
					"    PersonnelSubAreaID,\r\n",
					"    OrganisationalUnitID,\r\n",
					"    ContractID,\r\n",
					"    PayBandID,\r\n",
					"    CostCenterID,\r\n",
					"    PositionID,\r\n",
					"    ManagerEmployeeID,\r\n",
					"    ManagerPositionID,\r\n",
					"    CounterSignManagerEmployeeID,\r\n",
					"    LocationID,\r\n",
					"    WorkScheduleID,\r\n",
					"    SpecialismID,\r\n",
					"    SourceSystemID,\r\n",
					"    StartDate,\r\n",
					"    EndDate,\r\n",
					"    IngestionDate,\r\n",
					"    ValidTo,\r\n",
					"    RowID,\r\n",
					"    IsActive\r\n",
					"FROM odw_harmonised_db.hr_record_fact;"
				],
				"execution_count": 6
			}
		]
	}
}