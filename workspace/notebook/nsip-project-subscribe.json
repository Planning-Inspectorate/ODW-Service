{
	"name": "nsip-project-subscribe",
	"properties": {
		"folder": {
			"name": "odt-source-to-raw"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "6db63cb6-252b-4b40-8d4e-0d4944c0b5a6"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw",
				"name": "pinssynspodw",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# NSIP Project Subscribe\n",
					"\n",
					"Using a predefined subscription to a topic; read the messages and save them to the data lake\n",
					"\n",
					"See https://learn.microsoft.com/en-us/samples/azure/azure-sdk-for-python/servicebus-samples/ for servicebus samples\n",
					""
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Import Logging"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%run /utils/py_logging_decorator"
				],
				"execution_count": 59
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Sets the notebook variables"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"tags": [
						"parameters"
					]
				},
				"source": [
					"from notebookutils import mssparkutils\n",
					"\n",
					"#destination variables\n",
					"jobId = mssparkutils.env.getJobId()\n",
					"storage_account=mssparkutils.notebook.run('/utils/py_utils_get_storage_account')\n",
					"raw_storage_container = 'abfss://odw-raw@' + storage_account\n",
					"raw_storage_source_folder = 'odt/'\n",
					"raw_storage_folder_path = raw_storage_container + raw_storage_source_folder\n",
					"\n",
					"#service bus variables\n",
					"secret_name=\"odt-message-queue-connection-string\"\n",
					"kv_linked_service=\"ls_kv\"\n",
					"topic_name=\"nsip-project\"\n",
					"subscription_name=\"nsip-project-odw\"\n",
					"max_records = 10"
				],
				"execution_count": 60
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import json\n",
					"from datetime import date\n",
					"import os\n",
					"\n",
					"\n",
					"def writeData(logger, filename, data):\n",
					"    try:\n",
					"        raw_storage_sub_folder = topic_name +'/' +str(date.today())\n",
					"        destination_dir = '/synfs/' +jobId +'/temp_raw/' +raw_storage_sub_folder+'/'\n",
					"        #create the destination_directory, if it doesn't already exist\n",
					"        os.makedirs(destination_dir, exist_ok=True)\n",
					"\n",
					"        with open(f\"{destination_dir}{filename}\", \"w\") as f:\n",
					"            json.dump(data, f)\n",
					"    except Exception as e:\n",
					"        logger.exception(e)\n",
					"        return False\n",
					"    return True"
				],
				"execution_count": 61
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Get the latest messages from the subscription and write to the data lake"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"@logging_to_appins\n",
					"def saveFromSubscription():\n",
					"    from azure.servicebus import ServiceBusClient, ServiceBusMessage\n",
					"    import json\n",
					"    import logging\n",
					"    logger = logging.getLogger(__name__)\n",
					"\n",
					"    from pyspark.sql import SparkSession\n",
					"    spark = SparkSession.builder.getOrCreate()\n",
					"    akv_name=spark.sparkContext.environment.get('keyVaultName', 'get')\n",
					"    from notebookutils import mssparkutils\n",
					"    conn_str = mssparkutils.credentials.getSecret(akv_name, secret_name, kv_linked_service)\n",
					"\n",
					"    \n",
					"\n",
					"    ### mount the data lake storage in Synapse to the Synapse File Mount API\n",
					"    try:\n",
					"        #connect to the service bus\n",
					"        logger.info(\"Connecting to Service Bus\")\n",
					"        servicebus_client = ServiceBusClient.from_connection_string(conn_str=conn_str, logging_enable=True)\n",
					"        logger.info(\"Mounting \" +raw_storage_folder_path)\n",
					"        mssparkutils.fs.unmount(\"/temp_raw\")\n",
					"        mssparkutils.fs.mount(raw_storage_folder_path, \"/temp_raw\", {\"linkedService\":\"ls_storage\"}) \n",
					"    except Exception as e:\n",
					"        logger.exception(e)\n",
					"        return False\n",
					"\n",
					"    try:\n",
					"        with servicebus_client:\n",
					"            receiver = servicebus_client.get_subscription_receiver(\n",
					"                topic_name=topic_name,\n",
					"                subscription_name=subscription_name\n",
					"            )\n",
					"\n",
					"            with receiver:\n",
					"                \n",
					"                while True:\n",
					"                    received_msgs = receiver.receive_messages(max_message_count=max_records, max_wait_time=5)\n",
					"                    \n",
					"                    if len(received_msgs) > 0:\n",
					"                        logger.info(\"Reading \" +str(len(received_msgs)) +\" messages\")\n",
					"\n",
					"                        for message in received_msgs:\n",
					"                            #first json.loads unescapes it, second parses it into a json object\n",
					"                            data = json.loads(str(message))\n",
					"                            filename = str(message.message_id) +'.json'\n",
					"\n",
					"                            #save data to blob\n",
					"                            if writeData(logger, filename, data):\n",
					"                                receiver.complete_message(message)\n",
					"                                logger.info(\"Wrote message to file\" +filename)\n",
					"                            else:\n",
					"                                logger.error(\"Failed to write message \" +filename)\n",
					"                    else:\n",
					"                        logger.info(\"No messages to process\")\n",
					"                        break\n",
					"        return True        \n",
					"    except Exception as e:\n",
					"        logger.exception(e)\n",
					"        return False\n",
					"    finally:\n",
					"        #cleanup\n",
					"        logger.info(\"Unmounting \" +raw_storage_folder_path)\n",
					"        mssparkutils.fs.unmount(\"/temp_raw\")\n",
					"        logger.info(\"Finished\")"
				],
				"execution_count": 62
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"saveFromSubscription()"
				],
				"execution_count": 63
			}
		]
	}
}