{
	"name": "update_last_ingest_date",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw34",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "345a580f-bb4d-4509-9e54-7a074c166b4a"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw34",
				"name": "pinssynspodw34",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw34",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"# Parameters passed from the pipeline\n",
					"dbutils.widgets.text(\"table_name\", \"\")\n",
					"dbutils.widgets.text(\"last_ingest_date\", \"\")\n",
					"\n",
					"table_name = dbutils.widgets.get(\"table_name\")\n",
					"last_ingest_date = dbutils.widgets.get(\"last_ingest_date\")  # Expecting 'yyyy-MM-ddTHH:mm:ss' format (ISO 8601)\n",
					"\n",
					"print(f\"Updating ingestion timestamp for: {table_name} to {last_ingest_date}\")\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"# Read current watermark table from the Lake Database\n",
					"watermark_table = spark.read.table(\"odw_standardised_db.last_ingest_dates\")\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"from pyspark.sql.functions import lit, to_timestamp\n",
					"from pyspark.sql.types import StructType, StructField, StringType, TimestampType\n",
					"from datetime import datetime\n",
					"\n",
					"# Create new row DataFrame\n",
					"new_row = spark.createDataFrame(\n",
					"    [(table_name, datetime.fromisoformat(last_ingest_date))],\n",
					"    schema=StructType([\n",
					"        StructField(\"TableName\", StringType(), False),\n",
					"        StructField(\"LastIngestDate\", TimestampType(), False)\n",
					"    ])\n",
					")\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"# Remove existing record (if any) for the same table\n",
					"filtered = watermark_table.filter(watermark_table.TableName != table_name)\n",
					"\n",
					"# Combine new + filtered data\n",
					"final_df = filtered.unionByName(new_row)\n",
					"\n",
					"# Write the updated table back\n",
					"final_df.write.format(\"delta\").mode(\"overwrite\").saveAsTable(\"odw_standardised_db.last_ingest_dates\")\n",
					""
				],
				"execution_count": null
			}
		]
	}
}