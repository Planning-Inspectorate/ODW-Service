{
	"name": "Stored_Proc_hist_sap_hr",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "af204776-5f30-4586-89c6-1d8fd15874ed"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw",
				"name": "pinssynspodw",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "sparksql"
					}
				},
				"source": [
					"%%sql\r\n",
					"declare @file_date date\r\n",
					"set @file_date = (select top 1 (convert(date, substring([file_name], 19, 8), 108)) from sap_hr.leave_entitlement);"
				],
				"execution_count": 25
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"\n",
					"CREATE OR REPLACE TEMPORARY VIEW staff_cost\n",
					"\n",
					"     AS\n",
					"\n",
					"SELECT\n",
					"    h.pers_no as staff_number,\n",
					"    h.ps_group as grade, \n",
					"\th.annual_salary as salary, \n",
					"    cast(cast(h.annual_salary as float)/(365.0*7.4) as float) as hourly_rate\n",
					"    -- cast(case sign(datediff(dd, cast(le.[Ded# from] as date), @file_date)) -- harmonised.leave_entitlement  LeaveYearStart\n",
					"\t-- \t\t\twhen 1 then le.[Ded# from]\n",
					"\t-- \t\t\twhen 0 then le.[Ded# from]\n",
					"\t-- \t\t\telse dateadd(year, -1, le.[Ded# from])\n",
					"\t-- \t\tend as date) as leave_start_date,\n",
					"\n",
					"FROM odw_standardised_db.hr_saphr h\n",
					"LEFT JOIN odw_harmonised_db.hr_leave_entitlement_dim le on h.pers_no = case left(cast(le.EmployeeID as varchar(10)), 1)\n",
					"                                                            when 4 then '50' + cast(le.EmployeeID as varchar(10))\n",
					"                                                            when 5 then '00' + cast(le.EmployeeID as varchar(10))\n",
					"                                                            else cast(le.EmployeeID as varchar(10))\n",
					"                                                        end\n",
					"WHERE\n",
					"    le.AbsenceQuotaType = 'Annual Leave / P&P';"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"\n",
					"CREATE OR REPLACE TEMPORARY VIEW carried_over\n",
					"    \n",
					"    AS\n",
					"\n",
					"SELECT DISTINCT\n",
					"    h.pers_no as staff_number,\n",
					"    case sign(le.LeaveDaysPerYear - 148)\n",
					"        when 1 then 148\n",
					"        when 0 then 148\n",
					"        else le.LeaveDaysPerYear\n",
					"    end as carried_over_hours\n",
					"\n",
					"FROM odw_standardised_db.hr_saphr h\n",
					"LEFT JOIN odw_harmonised_db.hr_leave_entitlement_dim le on h.pers_no = case left(cast(le.EmployeeID as varchar(10)), 1)\n",
					"                                                                            when 4 then '50' + cast(le.EmployeeID as varchar(10))\n",
					"                                                                            when 5 then '00' + cast(le.EmployeeID as varchar(10))\n",
					"                                                                            else cast(le.EmployeeID as varchar(10))\n",
					"                                                                        end\n",
					"WHERE\n",
					"    le.AbsenceQuotaType = 'Brought Forward';"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"\n",
					"CREATE OR REPLACE TEMPORARY VIEW leave_taken\n",
					"\n",
					"     AS\n",
					"\n",
					"SELECT DISTINCT\n",
					"    h.pers_no as staff_number,\n",
					"    sum(f.Hours) as leave_hours_taken\n",
					"\n",
					"FROM odw_standardised_db.hr_saphr h\n",
					"LEFT JOIN odw_harmonised_db.hr_absence_dim f ON h.pers_no = f.EmployeeID\n",
					"LEFT JOIN staff_cost l ON f.EmployeeID = l.staff_number\n",
					"LEFT JOIN carried_over co ON f.EmployeeID = co.staff_number\n",
					"WHERE \n",
					"    f.AbsenceType IN ('PT Annual / P&P Leave', 'FT Annual / Priv Leave')\n",
					"    -- AND \n",
					"    -- f.AbsenceStartDate BETWEEN l.leave_start_date AND '@file_date' -- or may be AbsenceEndDate\n",
					"GROUP BY \n",
					"    h.pers_no;"
				],
				"execution_count": 26
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"- Missing leave_entitlement.file_name\n",
					"- Confirm if we need to use views or tables for vw_leaves and vw_absences\n",
					"- Confirm if f.absence_date is AbsenceStartDate or AbsenceEndDate\n",
					"- Confirm that Number field is actually le.number"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					}
				},
				"source": [
					"%%sql\n",
					"\n",
					"CREATE OR REPLACE TEMPORARY VIEW sap_hr_historic\n",
					"\n",
					"     AS\n",
					"\t \n",
					"SELECT \n",
					"\th.pers_no,\n",
					"\th.first_name,\n",
					"\th.last_name,\n",
					"\th.employee_no,\n",
					"\th.cocd,\n",
					"\th.company_code,\n",
					"\th.pa,\n",
					"\th.personal.area,\n",
					"\th.psubarea,\n",
					"\th.personal_subarea,\n",
					"\th.org_unit,\n",
					"\th.organizational_unit,\n",
					"\th.organizational_key1,\n",
					"\th.organizational_key2,\n",
					"\th.workc,\n",
					"\th.work_contract,\n",
					"\th.ct,\n",
					"\th.contract_type,\n",
					"\th.ps_group,\n",
					"\th.pay_band_description,\n",
					"\th.fte,\n",
					"\th.wk_hrs,\n",
					"\th.indicator_part_time_employee,\n",
					"\th.s,\n",
					"\th.employment_status,\n",
					"\th.gender_key,\n",
					"\th.tra_start_date,\n",
					"\th.tra_end_date,\n",
					"\th.tra_status,\n",
					"\th.tra_grade,\n",
					"\th.prev_persno,\n",
					"\th.actr,\n",
					"\th.reason_for_action,\n",
					"\th.position,\n",
					"\th.position1,\n",
					"\th.cost_ctr,\n",
					"\th.cost_centre,\n",
					"\th.civil_service_start,\n",
					"\th.date_to_current_job,\n",
					"\th.seniority_date,\n",
					"\th.date_to_subst_grade,\n",
					"\th.pers_no_1,\n",
					"\th.name_of_manager_om,\n",
					"\th.manager_position,\n",
					"\th.manager_position_text,\n",
					"\th.counter_sign_manager,\n",
					"\th.loc,\n",
					"\th.location,\n",
					"\th.org_start_date,\n",
					"\th.fix_term_end_date,\n",
					"\th.loan_start_date,\n",
					"\th.loan_end_date,\n",
					"\th.eegrp,\n",
					"\th.employee_group,\n",
					"\th.annual_salary,\n",
					"\th.curr,\n",
					"\th.ni_number,\n",
					"\th.birth_date,\n",
					"\th.age_of_employee,\n",
					"\th.eo,\n",
					"\th.ethnic_origin,\n",
					"\th.nid,\n",
					"\th.rel,\n",
					"\th.religious_denomination_key,\n",
					"\th.sxo,\n",
					"\th.wage_type,\n",
					"\th.employee_subgroup,\n",
					"\th.loa_abs_type,\n",
					"\th.loa_absence_type_text,\n",
					"\th.scheme_reference,\n",
					"\th.pension_scheme_name,\n",
					"\th.disability_code,\n",
					"\th.disability_text,\n",
					"\th.disability_code_description,\n",
					"\th.parea,\n",
					"\th.payroll_area,\n",
					"\th.assignment_number,\n",
					"\th.fte_2,\n",
					"\tReport_MonthEnd_Date,\n",
					"\tisnull(sc.leave_allowance, 0) + isnull(co.carried_over_hours, 0) as leave_entitlement_hrs,\n",
					"\tisnull(lt.leave_hours_taken, 0) as leave_taken_hrs,\n",
					"\tround((isnull(sc.leave_allowance, 0) + isnull(co.carried_over_hours, 0) - isnull(sc.expected_leave_hours_remaining, 0)  - isnull(lt.leave_hours_taken, 0)), 2) as leave_remaining_hours,\n",
					"\tisnull(round(sc.expected_leave_hours_remaining, 2), 0) as leave_remaining_prorata_hours\n",
					"\t--,isnull(round((isnull(sc.leave_allowance, 0) + isnull(co.carried_over_hours, 0) - isnull(sc.expected_leave_hours_remaining, 0)  - isnull(lt.leave_hours_taken, 0)) * (sc.hourly_rate) * (1 + p.Total), 2),0.0) as cost_untaken_al\n",
					"from odw_standardised_db.hr_saphr h\n",
					"\tleft join staff_cost sc on h.pers_no = sc.staff_number\n",
					"\tleft join carried_over co on sc.staff_number = co.staff_number\n",
					"\tleft join leave_taken lt on sc.staff_number = lt.staff_number\n",
					"\tleft join bis.pension_ernic_rates p on sc.grade = p.Grade\n",
					"where \n",
					"\tright(cast(Report_MonthEnd_Date as varchar(10)),5) in ('01-31','02-28','02-29','03-31','04-30','05-31','06-30','07-31','08-31','09-30','10-31','11-30','12-31')"
				],
				"execution_count": null
			}
		]
	}
}