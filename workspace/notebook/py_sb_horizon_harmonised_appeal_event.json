{
	"name": "py_sb_horizon_harmonised_appeal_event",
	"properties": {
		"folder": {
			"name": "odw-harmonised"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "fa461985-abec-4949-9e67-37693fc64ab7"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw",
				"name": "pinssynspodw",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"from pyspark.sql.types import IntegerType, ArrayType, StructType, StructField\n",
					"from pyspark.sql import Row\n",
					"from pyspark.sql.functions import *"
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"service_bus_table = \"odw_harmonised_db.sb_appeal_event\"\n",
					"horizon_table = \"odw_standardised_db.horizon_appeals_event\"\n",
					"spark_table_final = \"odw_harmonised_db.appeal_event\""
				],
				"execution_count": 3
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Get data out of the service bus with additional fields needed for Horizon data\n",
					"service_bus_data = spark.sql(f\"\"\"\n",
					"                    SELECT DISTINCT\n",
					"                            eventId\n",
					"                            ,caseReference\n",
					"                            ,eventType\n",
					"                            ,eventName\n",
					"                            ,eventstatus\n",
					"                            ,isUrgent\n",
					"                            ,eventPublished\n",
					"                            ,eventStartDatetime\n",
					"                            ,eventEndDatetime\n",
					"                            ,notificationOfSitevisit\n",
					"                            ,AddressLine1\n",
					"                            ,AddressLine2\n",
					"                            ,AddressTown\n",
					"                            ,AddressCounty\n",
					"                            ,AddressPostcode\n",
					"                            ,Migrated\n",
					"                            ,ODTSourceSystem\n",
					"                            ,SourceSystemID -- ID for appeals in odw_harmonised_db.main_sourcesystem_fact\n",
					"                            ,IngestionDate\n",
					"                            ,ValidTo\n",
					"                            ,RowID\n",
					"                            ,IsActive\n",
					"                    FROM {service_bus_table} AS Service_Bus\n",
					"\n",
					"                    \"\"\")"
				],
				"execution_count": 4
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Get data out of Horizon and matching the SB schema (with additional fields and ensure data types match)\n",
					"horizon_data = spark.sql(f\"\"\"\n",
					"                SELECT DISTINCT \n",
					"                        CONCAT(casenumber, '-',eventId) AS eventId\n",
					"                        ,caseReference\n",
					"                        ,eventType\n",
					"                        ,eventName\n",
					"                        ,eventstatus\n",
					"                        ,isUrgent\n",
					"                        ,eventPublished\n",
					"                        ,eventStartDatetime\n",
					"                        ,eventEndDatetime\n",
					"                        ,notificationOfSitevisit\n",
					"                        ,AddressLine1\n",
					"                        ,AddressLine2\n",
					"                        ,AddressTown\n",
					"                        ,AddressCounty\n",
					"                        ,AddressPostcode\n",
					"                        ,0 AS Migrated\n",
					"                        ,'Horizon' AS ODTSourceSystem\n",
					"                        ,9 AS SourceSystemID -- ID for appeals in odw_harmonised_db.main_sourcesystem_fact\n",
					"                        ,ingested_datetime AS IngestionDate\n",
					"                        ,NULL AS ValidTo\n",
					"                        ,'' as RowID\n",
					"                        ,'Y' as IsActive\n",
					"                FROM {horizon_table} AS Horizon\n",
					"     WHERE ingested_datetime = (SELECT MAX(ingested_datetime) FROM {horizon_table}) \"\"\")"
				],
				"execution_count": 5
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"\n",
					"\n",
					"#sort columns into same order as service bus\n",
					"horizon_data = horizon_data.select(service_bus_data.columns)"
				],
				"execution_count": 6
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"results = service_bus_data.union(horizon_data)"
				],
				"execution_count": 7
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"display(results)"
				],
				"execution_count": 8
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"results.write.format(\"delta\").mode(\"Overwrite\").option(\"overwriteSchema\", \"true\").partitionBy(\"IsActive\").saveAsTable(f\"{spark_table_final}\")"
				],
				"execution_count": 7
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"\n",
					"Now need to sort internal ids, IsActive flags, and valid_to dates"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"CREATE OR REPLACE TEMPORARY VIEW vw_appeal_event_calculations_base\n",
					"AS\n",
					"SELECT  \n",
					"    row_number() OVER(PARTITION BY eventId ORDER BY IngestionDate DESC) AS ReverseOrderProcessed\n",
					"    ,row_number() OVER(ORDER BY IngestionDate asc, eventId asc) AS ---- to be added\n",
					"    ,eventId\n",
					"    ,IngestionDate\n",
					"    ,ValidTo\n",
					"    ,'0' AS Migrated\n",
					"    ,CASE row_number() OVER(PARTITION BY eventId ORDER BY IngestionDate DESC)\n",
					"        WHEN 1 THEN\n",
					"            'Y'\n",
					"        ELSE\n",
					"            'N'\n",
					"    END AS IsActive                \n",
					"FROM\n",
					"   odw_harmonised_db.appeal_event"
				],
				"execution_count": 8
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df_calcs = spark.sql(\"\"\"\n",
					"                        SELECT\n",
					"                            CurrentRow.NSIPAdviceID ---- to changed\n",
					"                            ,CurrentRow.eventId \n",
					"                            ,CurrentRow.IngestionDate\n",
					"                            ,COALESCE(NULLIF(CurrentRow.ValidTo,''), NextRow.IngestionDate) AS ValidTo\n",
					"                            ,CASE\n",
					"                                WHEN raw.eventId IS NOT NULL THEN \n",
					"                                    \"1\"\n",
					"                                ELSE \n",
					"                                    \"0\"\n",
					"                            END AS Migrated\n",
					"                            ,CurrentRow.IsActive\n",
					"                        FROM\n",
					"                            vw_appeal_event_calculations_base AS CurrentRow\n",
					"                            LEFT OUTER JOIN vw_appeal_event_calculations_base AS NextRow\n",
					"                                ON CurrentRow.eventId = NextRow.eventId\n",
					"                                AND CurrentRow.ReverseOrderProcessed - 1 = NextRow.ReverseOrderProcessed\n",
					"                            LEFT OUTER JOIN (SELECT DISTINCT eventId FROM  odw_harmonised_db.sb_appeal_event) AS Raw\n",
					"                                ON CurrentRow.eventId = Raw.eventId \n",
					"                            ORDER BY currentRow.ReverseOrderProcessed\n",
					"                    \"\"\")"
				],
				"execution_count": 9
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df_calcs =df_calcs.withColumnRenamed(\"eventId\", \"temp_eventId\").withColumnRenamed(\"IngestionDate\", \"temp_IngestionDate\")\n",
					""
				],
				"execution_count": 10
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"to be done the below!!"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"# results = spark.sql(f\"\"\"\n",
					"#                     SELECT DISTINCT NSIPAdviceID\n",
					"#                         ,adviceId\n",
					"#                         ,adviceReference\n",
					"#                         ,caseId\n",
					"#                         ,caseReference\n",
					"#                         ,title\n",
					"#                         ,titleWelsh\n",
					"#                         ,from\n",
					"#                         ,agent\n",
					"#                         ,method\n",
					"#                         ,enquiryDate\n",
					"#                         ,enquiryDetails\n",
					"#                         ,enquiryDetailsWelsh\n",
					"#                         ,adviceGivenBy \n",
					"#                         ,adviceDate\n",
					"#                         ,adviceDetails\n",
					"#                         ,adviceDetailsWelsh\n",
					"#                         ,status\n",
					"#                         ,redactionStatus\n",
					"#                         ,attachmentIds\n",
					"\n",
					"#                         --Start Horizon only fields\n",
					"#                         ,Section51Advice\n",
					"#                         ,EnquirerFirstName\n",
					"#                         ,EnquirerLastName\n",
					"#                         ,AdviceLastModified\n",
					"#                         ,AttachmentCount\n",
					"#                         ,AttachmentsLastModified\n",
					"#                         ,LastPublishedDate\n",
					"#                         ,WelshLanguage\n",
					"#                         ,CaseWorkType\n",
					"#                         --End Horizon only fields\n",
					"\n",
					"#                         ,Migrated\n",
					"#                         ,ODTSourceSystem\n",
					"#                         ,IngestionDate\n",
					"#                         ,ValidTo\n",
					"#                         ,MD5(CONCAT(\n",
					"#                                     IFNULL(CAST(NSIPAdviceID AS bigint), '.')\n",
					"#                                     ,IFNULL(CAST(adviceId AS integer), '.')\n",
					"#                                     ,IFNULL(CAST(adviceReference AS String), '.')\n",
					"#                                     ,IFNULL(CAST(caseId AS integer), '.')\n",
					"#                                     ,IFNULL(CAST(caseReference AS String), '.')\n",
					"#                                     ,IFNULL(CAST(title AS String), '.')\n",
					"#                                     ,IFNULL(CAST(titleWelsh AS String), '.')\n",
					"#                                     ,IFNULL(CAST(from AS String), '.')\n",
					"#                                     ,IFNULL(CAST(agent AS String), '.')\n",
					"#                                     ,IFNULL(CAST(method AS String), '.')\n",
					"#                                     ,IFNULL(CAST(enquiryDate AS String), '.')\n",
					"#                                     ,IFNULL(CAST(enquiryDetails AS String), '.')\n",
					"#                                     ,IFNULL(CAST(enquiryDetailsWelsh AS String), '.')\n",
					"#                                     ,IFNULL(CAST(adviceGivenBy AS String), '.')\n",
					"#                                     ,IFNULL(CAST(adviceDate AS String), '.')\n",
					"#                                     ,IFNULL(CAST(adviceDetails AS String), '.')\n",
					"#                                     ,IFNULL(CAST(adviceDetailsWelsh AS String), '.')\n",
					"#                                     ,IFNULL(CAST(status AS String), '.')\n",
					"#                                     ,IFNULL(CAST(redactionStatus AS String), '.')\n",
					"#                                     ,IFNULL(CAST(attachmentIds AS String), '.')\n",
					"\n",
					"#                                     ,IFNULL(CAST(Section51Advice AS String), '.')\n",
					"#                                     ,IFNULL(CAST(EnquirerFirstName AS String), '.')\n",
					"#                                     ,IFNULL(CAST(EnquirerLastName AS String), '.')\n",
					"#                                     ,IFNULL(CAST(AdviceLastModified AS String), '.')\n",
					"#                                     ,IFNULL(CAST(AttachmentCount AS String), '.')\n",
					"#                                     ,IFNULL(CAST(AttachmentsLastModified AS String), '.')\n",
					"#                                     ,IFNULL(CAST(LastPublishedDate AS String), '.')\n",
					"#                                     ,IFNULL(CAST(WelshLanguage AS String), '.')\n",
					"#                                     ,IFNULL(CAST(CaseWorkType AS String), '.')\n",
					"\n",
					"#                                     ,IFNULL(CAST(Migrated AS String), '.')\n",
					"#                                     ,IFNULL(CAST(ODTSourceSystem AS String), '.')\n",
					"#                                     ,IFNULL(CAST(IngestionDate AS String), '.')\n",
					"#                                     ,IFNULL(CAST(ValidTo AS String), '.')\n",
					"#                             )\n",
					"#                         ) AS RowID\n",
					"#                         ,IsActive\n",
					"#     FROM \n",
					"#         {spark_table_final}\"\"\")\n",
					"    "
				],
				"execution_count": 11
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"columns = results.columns\n",
					"\n",
					"results = results.drop(\"NSIPAdviceID\", \"ValidTo\", \"Migrated\", \"IsActive\")"
				],
				"execution_count": 12
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"final_df = results.join(df_calcs, (df_calcs[\"temp_adviceid\"] == results[\"adviceid\"]) & (df_calcs[\"temp_IngestionDate\"] == results[\"IngestionDate\"])).select(columns)\n",
					"final_df = final_df.drop_duplicates()"
				],
				"execution_count": 13
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"\n",
					"final_df.write.format(\"delta\").mode(\"Overwrite\").option(\"overwriteSchema\", \"true\").partitionBy(\"IsActive\").saveAsTable(f\"{spark_table_final}\")"
				],
				"execution_count": 14
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"-- select count(*) from odw_harmonised_db.nsip_s51_advice where isactive='Y'"
				],
				"execution_count": 15
			}
		]
	}
}