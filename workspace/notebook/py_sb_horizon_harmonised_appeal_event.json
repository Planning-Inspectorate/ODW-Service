{
	"name": "py_sb_horizon_harmonised_appeal_event",
	"properties": {
		"folder": {
			"name": "odw-harmonised"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "24bb4bfc-adb8-4660-a572-a9d601bae634"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw",
				"name": "pinssynspodw",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"from pyspark.sql.types import IntegerType, ArrayType, StructType, StructField\n",
					"from pyspark.sql import Row\n",
					"from pyspark.sql.functions import *"
				],
				"execution_count": 62
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"service_bus_table = \"odw_harmonised_db.sb_appeal_event\"\n",
					"horizon_table = \"odw_standardised_db.horizon_appeals_event\"\n",
					"spark_table_final = \"odw_harmonised_db.appeal_event\"\n",
					"primary_key = \"eventId\""
				],
				"execution_count": 63
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Get data out of the service bus with additional fields needed for Horizon data\n",
					"service_bus_data = spark.sql(f\"\"\"\n",
					"                    SELECT DISTINCT\n",
					"                            AppealsEventId\n",
					"                            ,eventId\n",
					"                            ,caseReference\n",
					"                            ,eventType\n",
					"                            ,eventName\n",
					"                            ,eventstatus\n",
					"                            ,isUrgent\n",
					"                            ,NULLIF(eventPublished, 'None') AS eventPublished\n",
					"                            ,eventStartDatetime\n",
					"                            ,eventEndDatetime\n",
					"                            ,NULLIF(notificationOfSitevisit, 'None') AS notificationOfSitevisit\n",
					"                            ,AddressLine1\n",
					"                            ,AddressLine2\n",
					"                            ,AddressTown\n",
					"                            ,AddressCounty\n",
					"                            ,AddressPostcode\n",
					"                            ,Migrated\n",
					"                            ,ODTSourceSystem\n",
					"                            ,SourceSystemID \n",
					"                            ,IngestionDate\n",
					"                            ,ValidTo\n",
					"                            ,RowID\n",
					"                            ,IsActive\n",
					"                    FROM {service_bus_table} AS Service_Bus\n",
					"\n",
					"                    \"\"\")"
				],
				"execution_count": 64
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Get data out of Horizon and matching the SB schema (with additional fields and ensure data types match)\n",
					"horizon_data = spark.sql(f\"\"\"\n",
					"                SELECT DISTINCT \n",
					"                        '' as AppealsEventId\n",
					"                        ,CONCAT(casenumber, '-',eventId) AS eventId\n",
					"                        ,caseReference\n",
					"                        ,eventType\n",
					"                        ,eventName\n",
					"                        ,eventstatus\n",
					"                        ,isUrgent\n",
					"                        ,eventPublished\n",
					"                        ,eventStartDatetime\n",
					"                        ,eventEndDatetime\n",
					"                        ,notificationOfSitevisit\n",
					"                        ,AddressLine1\n",
					"                        ,AddressLine2\n",
					"                        ,AddressTown\n",
					"                        ,AddressCounty\n",
					"                        ,AddressPostcode\n",
					"                        ,0 AS Migrated\n",
					"                        ,'Horizon' AS ODTSourceSystem\n",
					"                        ,9 AS SourceSystemID -- ID for appeals in odw_harmonised_db.main_sourcesystem_fact\n",
					"                        ,ingested_datetime AS IngestionDate\n",
					"                        ,NULL AS ValidTo\n",
					"                        ,'' as RowID\n",
					"                        ,'Y' as IsActive\n",
					"                FROM {horizon_table} AS Horizon\n",
					"     WHERE ingested_datetime = (SELECT MAX(ingested_datetime) FROM {horizon_table}) \"\"\")"
				],
				"execution_count": 65
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"\n",
					"\n",
					"#sort columns into same order as service bus\n",
					"horizon_data = horizon_data.select(service_bus_data.columns)"
				],
				"execution_count": 66
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"results = service_bus_data.union(horizon_data)"
				],
				"execution_count": 67
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"results.write.format(\"delta\").mode(\"Overwrite\").option(\"overwriteSchema\", \"true\").partitionBy(\"IsActive\").saveAsTable(f\"{spark_table_final}\")"
				],
				"execution_count": 68
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"\n",
					"Now need to sort internal ids, IsActive flags, and valid_to dates"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"spark.sql(f\"\"\"\n",
					"        CREATE OR REPLACE TEMPORARY VIEW vw_appeal_event_calculations_base\n",
					"        AS\n",
					"        SELECT  \n",
					"        row_number() OVER(PARTITION BY {primary_key} ORDER BY IngestionDate DESC) AS ReverseOrderProcessed\n",
					"        ,row_number() OVER(ORDER BY IngestionDate asc, {primary_key} asc) AS AppealsEventId\n",
					"        ,{primary_key}\n",
					"        ,IngestionDate\n",
					"        ,ValidTo\n",
					"        ,'0' AS Migrated\n",
					"        ,CASE row_number() OVER(PARTITION BY {primary_key} ORDER BY IngestionDate DESC)\n",
					"        WHEN 1 THEN\n",
					"            'Y'\n",
					"        ELSE\n",
					"            'N'\n",
					"        END AS IsActive                \n",
					"        FROM\n",
					"        {spark_table_final}\n",
					"        \"\"\")"
				],
				"execution_count": 70
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df_calcs = spark.sql(f\"\"\"\n",
					"                        SELECT\n",
					"                            CurrentRow.AppealsEventId \n",
					"                            ,CurrentRow.{primary_key}  \n",
					"                            ,CurrentRow.IngestionDate\n",
					"                            ,NextRow.IngestionDate AS ValidTo \n",
					"                            ,CASE\n",
					"                                WHEN raw.{primary_key}  IS NOT NULL THEN \n",
					"                                    \"1\"\n",
					"                                ELSE \n",
					"                                    \"0\"\n",
					"                            END AS Migrated\n",
					"                            ,CurrentRow.IsActive\n",
					"                        FROM\n",
					"                            vw_appeal_event_calculations_base AS CurrentRow\n",
					"                            LEFT OUTER JOIN vw_appeal_event_calculations_base AS NextRow\n",
					"                                ON CurrentRow.{primary_key}  = NextRow.{primary_key} \n",
					"                                AND CurrentRow.ReverseOrderProcessed - 1 = NextRow.ReverseOrderProcessed\n",
					"                            LEFT OUTER JOIN (SELECT DISTINCT eventId as {primary_key} FROM  odw_harmonised_db.sb_appeal_event) AS Raw\n",
					"                                ON CurrentRow.{primary_key}  = Raw.{primary_key}  \n",
					"                            ORDER BY currentRow.ReverseOrderProcessed\n",
					"                    \"\"\")"
				],
				"execution_count": 71
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df_calcs = df_calcs.withColumnRenamed(primary_key, f\"temp_{primary_key}\").withColumnRenamed(\"IngestionDate\", \"temp_IngestionDate\")"
				],
				"execution_count": 72
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"to be done the below!!"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"results = spark.sql(f\"\"\"\n",
					"                    SELECT DISTINCT \n",
					"                        AppealsEventId\n",
					"                        ,{primary_key}\n",
					"                        ,caseReference\n",
					"                        ,eventType\n",
					"                        ,eventName\n",
					"                        ,eventstatus\n",
					"                        ,isUrgent\n",
					"                        ,eventPublished\n",
					"                        ,eventStartDatetime\n",
					"                        ,eventEndDatetime\n",
					"                        ,notificationOfSitevisit\n",
					"                        ,AddressLine1\n",
					"                        ,AddressLine2\n",
					"                        ,AddressTown\n",
					"                        ,AddressCounty\n",
					"                        ,AddressPostcode\n",
					"                        ,Migrated\n",
					"                        ,ODTSourceSystem\n",
					"                        ,SourceSystemID -- ID for appeals in odw_harmonised_db.main_sourcesystem_fact\n",
					"                        ,IngestionDate\n",
					"                        ,ValidTo\n",
					"                        ,MD5(CONCAT(\n",
					"                                    IFNULL(CAST(AppealsEventId AS bigint), '.')\n",
					"                                    ,IFNULL(CAST(eventId AS string), '.')\n",
					"                                    ,IFNULL(CAST(caseReference AS String), '.')\n",
					"                                    ,IFNULL(CAST(eventType AS String), '.')\n",
					"                                    ,IFNULL(CAST(eventName AS String), '.')\n",
					"                                    ,IFNULL(CAST(eventstatus AS String), '.')\n",
					"                                    ,IFNULL(CAST(isUrgent AS TINYINT), '.')\n",
					"                                    ,IFNULL(CAST(eventPublished AS TINYINT), '.')\n",
					"                                    ,IFNULL(CAST(eventStartDatetime AS String), '.')\n",
					"                                    ,IFNULL(CAST(eventEndDatetime AS String), '.')\n",
					"                                    ,IFNULL(CAST(notificationOfSitevisit AS String), '.')\n",
					"                                    ,IFNULL(CAST(AddressLine1 AS String), '.')\n",
					"                                    ,IFNULL(CAST(AddressLine2 AS String), '.')\n",
					"                                    ,IFNULL(CAST(AddressTown AS String), '.')\n",
					"                                    ,IFNULL(CAST(AddressCounty AS String), '.')\n",
					"                                    ,IFNULL(CAST(AddressPostcode AS String), '.')\n",
					"                                    ,IFNULL(CAST(Migrated AS String), '.')\n",
					"                                    ,IFNULL(CAST(ODTSourceSystem AS String), '.')\n",
					"                                    ,IFNULL(CAST(IngestionDate AS String), '.')\n",
					"                                    ,IFNULL(CAST(ValidTo AS String), '.')\n",
					"                                    ,IFNULL(CAST(IsActive AS String), '.')\n",
					"                            )\n",
					"                        ) AS RowID\n",
					"                        ,IsActive\n",
					"    FROM \n",
					"        {spark_table_final}\"\"\")\n",
					"    "
				],
				"execution_count": 73
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"columns = results.columns\n",
					"\n",
					"results = results.drop(\"AppealsEventId\", \"ValidTo\",\"Migrated\", \"IsActive\")"
				],
				"execution_count": 75
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"final_df = results.join(df_calcs, (df_calcs[f\"temp_{primary_key}\"] == results[primary_key]) & (df_calcs[\"temp_IngestionDate\"] == results[\"IngestionDate\"])).select(columns).distinct()\n",
					"final_df = final_df.drop_duplicates()"
				],
				"execution_count": 76
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"\n",
					"final_df.write.format(\"delta\").mode(\"Overwrite\").option(\"overwriteSchema\", \"true\").partitionBy(\"IsActive\").saveAsTable(f\"{spark_table_final}\")"
				],
				"execution_count": 78
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"select * from odw_harmonised_db.appeal_event where isactive='Y'"
				],
				"execution_count": 79
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					""
				],
				"execution_count": null
			}
		]
	}
}