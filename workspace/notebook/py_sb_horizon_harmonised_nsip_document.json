{
	"name": "py_sb_horizon_harmonised_nsip_document",
	"properties": {
		"folder": {
			"name": "odw-harmonised"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw34",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "5b72a22f-1ddc-4952-b0fa-1be87ce10ec8"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw34",
				"name": "pinssynspodw34",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw34",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#### The purpose of this pyspark notebook is to read service bus data from owb_standarsied_db.sb_nsip_document Delta table and other source tables to owb_harmonised_db.nsip_document Delta table based on existing MiPINS business logic.\n",
					"\n",
					"**Description**  \n",
					"The purpose of this pyspark notebook is to read service bus data from owb_standarsied_db.sb_nsip_document Delta table and other source tables to owb_harmonised_db.nsip_document Delta table based on existing MiPINS business logic.\n",
					"\n",
					"**Spark Cluster Configuration** -> Apache Spark Version- 3.4, Python Version \t\t- 3.10, Delta Lake Version \t- 2.4"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Import required libraries"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"from pyspark.sql.types import IntegerType, ArrayType, StructType, StructField\n",
					"from pyspark.sql import Row\n",
					"from pyspark.sql.functions import *\n",
					"from datetime import date,datetime"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Initialise Logging decorator"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%run utils/py_logging_decorator"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Initialise Application Insight Logging functions"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"%run utils/py_utils_common_logging_output"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"service_bus_table = \"odw_harmonised_db.sb_nsip_document\"\n",
					"horizon_table = \"odw_standardised_db.document_meta_data\"\n",
					"aie_extracts_table = \"odw_harmonised_db.aie_document_data\"\n",
					"spark_table_final = \"odw_harmonised_db.nsip_document\"\n",
					"\n",
					"primary_key = 'TEMP_PK'\n",
					"\n",
					"start_exec_time = str(datetime.now())\n",
					"insert_count = 0\n",
					"update_count = 0\n",
					"delete_count = 0"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"spark.catalog.refreshTable(horizon_table)"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"try:\n",
					"    # Get data out of the service bus with additional fields needed for Horizon data\n",
					"    service_bus_data = spark.sql(f\"\"\"\n",
					"                        SELECT DISTINCT\n",
					"                            MD5(CONCAT(documentId, filename, version)) AS {primary_key}\n",
					"                            ,NSIPDocumentID\n",
					"                            ,documentId\n",
					"                            ,caseId\n",
					"                            ,caseRef\n",
					"                            ,documentReference\n",
					"                            ,version\n",
					"                            ,examinationRefNo\n",
					"                            ,filename\n",
					"                            ,originalFilename\n",
					"                            ,size\n",
					"                            ,mime\n",
					"                            ,documentURI\n",
					"                            ,publishedDocumentURI\n",
					"                            ,path\n",
					"                            ,virusCheckStatus\n",
					"                            ,fileMD5\n",
					"                            ,dateCreated\n",
					"                            ,lastModified\n",
					"                            ,caseType\n",
					"                            ,redactedStatus\n",
					"                            ,publishedStatus\n",
					"                            ,datePublished\n",
					"                            ,documentType\n",
					"                            ,securityClassification\n",
					"                            ,sourceSystem\n",
					"                            ,origin\n",
					"                            ,owner\n",
					"                            ,author\n",
					"                            ,authorWelsh\n",
					"                            ,representative\n",
					"                            ,description\n",
					"                            ,descriptionWelsh\n",
					"                            ,documentCaseStage\n",
					"                            ,filter1\n",
					"                            ,filter1Welsh\n",
					"                            ,filter2\n",
					"                            ,horizonFolderId\n",
					"                            ,transcriptId\n",
					"                            \n",
					"                            ,Migrated\n",
					"                            ,ODTSourceSystem\n",
					"                            ,SourceSystemID\n",
					"                            ,IngestionDate \n",
					"                            ,NULLIF(ValidTo, '') AS ValidTo\n",
					"                            ,'' as RowID\n",
					"                            ,IsActive                        \n",
					"                        FROM \n",
					"                            {service_bus_table}\n",
					"\n",
					"                        \"\"\")\n",
					"\n",
					"except Exception as e:\n",
					"        logError(f\"Error in source Service Bus SQL query {service_bus_table}:\\n{e}\")\n",
					"        error_message = app_insight_logger.format_error_message(e, max_length=300)"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"try:\n",
					"    # Get data out of Horizon and matching the SB schema (with additional fields and ensure data types match)\n",
					"    horizon_data = spark.sql(f\"\"\"\n",
					"                    SELECT DISTINCT \n",
					"                        MD5(\n",
					"                            CONCAT(\n",
					"                                COALESCE(Doc.dataId, ''), \n",
					"                                COALESCE(Doc.name, ''), \n",
					"                                COALESCE(CAST(Doc.version AS INTEGER), '')\n",
					"                            )\n",
					"                        ) AS {primary_key}\n",
					"                        ,CAST(NULL AS LONG) AS NSIPDocumentID\n",
					"                        ,CAST(Doc.dataId AS INTEGER) as documentId\n",
					"                        ,CAST(Doc.casenodeid AS INTEGER) AS caseId\n",
					"                        ,Doc.caseReference AS caseRef\n",
					"                        ,Doc.documentReference\n",
					"                        ,CAST(Doc.version AS INTEGER) AS version\n",
					"                        ,Aie.examinationRefNo\n",
					"                        ,Doc.name as filename\n",
					"                        ,Doc.originalFilename as originalFilename\n",
					"                        ,CAST(Doc.dataSize AS INTEGER) AS size\n",
					"                        ,Aie.mime\n",
					"                        ,Aie.documentURI\n",
					"                        ,CAST(NULL AS String) AS publishedDocumentURI\n",
					"                        ,Aie.path\n",
					"                        ,Doc.virusCheckStatus\n",
					"                        ,Aie.fileMD5\n",
					"                        ,Cast(Doc.createDate as string) as dateCreated\n",
					"                        ,Doc.modifyDate as lastModified\n",
					"                        ,Doc.caseworkType as caseType\n",
					"                        ,CAST(NULL AS String) AS redactedStatus\n",
					"                        ,Doc.publishedStatus\n",
					"                        ,Cast(Doc.datePublished as string) as datePublished\n",
					"                        ,Doc.documentType\n",
					"                        ,Aie.securityClassification\n",
					"                        ,Doc.sourceSystem -- set to horizon\n",
					"                        ,Aie.origin AS origin\n",
					"                        ,Aie.owner\n",
					"                        ,Doc.author\n",
					"                        ,Doc.authorWelsh\n",
					"                        ,Doc.representative\n",
					"                        ,Doc.documentDescription AS description\n",
					"                        ,Doc.documentDescriptionWelsh AS descriptionWelsh\n",
					"                        ,Doc.documentCaseStage\n",
					"                        ,Doc.filter1\n",
					"                        ,Doc.filter1Welsh\n",
					"                        ,Doc.filter2\n",
					"                        ,Doc.parentid AS horizonFolderId\n",
					"                        ,Null as transcriptId\n",
					"\n",
					"                        ,\"0\" as Migrated\n",
					"                        ,\"Horizon\" as ODTSourceSystem\n",
					"                        ,NULL AS SourceSystemID\n",
					"                        , to_timestamp(Doc.expected_from)  AS IngestionDate\n",
					"                        ,CAST(null as string) as ValidTo -- to avoid any null descrepancies\n",
					"                        ,'' as RowID\n",
					"                        ,'Y' as IsActive\n",
					"                    FROM\n",
					"                        {horizon_table} AS Doc\n",
					"                    LEFT JOIN {aie_extracts_table} AS Aie\n",
					"                    ON Doc.dataid = Aie.DocumentId \n",
					"                    AND Doc.version = Aie.version\n",
					"                    AND Doc.dataSize = Aie.size\n",
					"                    WHERE\n",
					"                        Doc.expected_from = (SELECT MAX(expected_from) FROM {horizon_table})\n",
					"                \"\"\")\n",
					"\n",
					"except Exception as e:\n",
					"        logError(f\"Error in source Horizon SQL query {horizon_table}:\\n{e}\")\n",
					"        error_message = app_insight_logger.format_error_message(e, max_length=300)"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"logInfo(f\"Combining data for {spark_table_final}\")\n",
					"horizon_data = horizon_data.select(service_bus_data.columns)\n",
					"results = service_bus_data.union(horizon_data)\n",
					"logInfo(f\"Combined data for {spark_table_final}\")"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Prepare data for intermediate nsip_document processing"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"try:\n",
					"    logInfo(f\"Writing {spark_table_final}\")\n",
					"    results.write.format(\"delta\").mode(\"Overwrite\").option(\"overwriteSchema\", \"true\").partitionBy(\"IsActive\").saveAsTable(f\"{spark_table_final}\")\n",
					"    logInfo(f\"Written {spark_table_final}\")\n",
					"\n",
					"except Exception as e:\n",
					"        logError(f\"Error in ingesting delta table {spark_table_final}:\\n{e}\")\n",
					"        error_message = app_insight_logger.format_error_message(e, max_length=300)\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"\n",
					"Now need to sort internal ids, IsActive flags, and valid_to dates"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"spark.sql(f\"\"\"\n",
					"    CREATE OR REPLACE TEMPORARY VIEW vw_nsip_document_calculations_base\n",
					"        AS\n",
					"        SELECT  \n",
					"            row_number() OVER(PARTITION BY {primary_key} ORDER BY IngestionDate DESC) AS ReverseOrderProcessed\n",
					"            ,row_number() OVER(ORDER BY IngestionDate asc, {primary_key} asc) AS NSIPDocumentID\n",
					"            ,{primary_key}\n",
					"            ,IngestionDate\n",
					"            ,ValidTo\n",
					"            ,'0' AS Migrated\n",
					"            ,CASE row_number() OVER(PARTITION BY {primary_key} ORDER BY IngestionDate DESC)\n",
					"                WHEN 1 THEN\n",
					"                    'Y'\n",
					"                ELSE\n",
					"                    'N'\n",
					"            END AS IsActive                \n",
					"        FROM\n",
					"            {spark_table_final}\n",
					"    \"\"\")"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df_calcs = spark.sql(f\"\"\"\n",
					"                        SELECT\n",
					"                            CurrentRow.NSIPDocumentID\n",
					"                            ,CurrentRow.{primary_key} \n",
					"                            ,CurrentRow.IngestionDate\n",
					"                            ,COALESCE(NULLIF(CurrentRow.ValidTo,''), NextRow.IngestionDate) AS ValidTo\n",
					"                            ,CASE\n",
					"                                WHEN raw.{primary_key} IS NOT NULL THEN \n",
					"                                    \"1\"\n",
					"                                ELSE \n",
					"                                    \"0\"\n",
					"                            END AS Migrated\n",
					"                            ,CurrentRow.IsActive\n",
					"                        FROM\n",
					"                            vw_nsip_document_calculations_base AS CurrentRow\n",
					"                            LEFT OUTER JOIN vw_nsip_document_calculations_base AS NextRow\n",
					"                                ON CurrentRow.{primary_key} = NextRow.{primary_key}\n",
					"                                AND CurrentRow.ReverseOrderProcessed - 1 = NextRow.ReverseOrderProcessed\n",
					"                            LEFT OUTER JOIN (SELECT DISTINCT MD5(CONCAT(documentId, filename, version)) AS {primary_key} FROM {service_bus_table}) AS Raw\n",
					"                                ON CurrentRow.{primary_key} = Raw.{primary_key} \n",
					"                            ORDER BY currentRow.ReverseOrderProcessed\n",
					"                    \"\"\")\n",
					"                    "
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df_calcs =df_calcs.withColumnRenamed(primary_key, f\"temp_{primary_key}\").withColumnRenamed(\"IngestionDate\", \"temp_IngestionDate\")"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					""
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"try:\n",
					"    results = spark.sql(f\"\"\"\n",
					"                        SELECT DISTINCT \n",
					"                            {primary_key}\n",
					"                            ,NSIPDocumentID\n",
					"                            ,documentId\n",
					"                            ,caseId\n",
					"                            ,caseRef\n",
					"                            ,documentReference\n",
					"                            ,version\n",
					"                            ,examinationRefNo\n",
					"                            ,filename\n",
					"                            ,originalFilename\n",
					"                            ,size\n",
					"                            ,mime\n",
					"                            ,documentURI\n",
					"                            ,publishedDocumentURI\n",
					"                            ,path\n",
					"                            ,virusCheckStatus\n",
					"                            ,fileMD5\n",
					"                            ,dateCreated\n",
					"                            ,lastModified\n",
					"                            ,caseType\n",
					"                            ,redactedStatus\n",
					"                            ,publishedStatus\n",
					"                            ,datePublished\n",
					"                            ,documentType\n",
					"                            ,securityClassification\n",
					"                            ,sourceSystem\n",
					"                            ,origin\n",
					"                            ,owner\n",
					"                            ,author\n",
					"                            ,authorWelsh\n",
					"                            ,representative\n",
					"                            ,description\n",
					"                            ,descriptionWelsh\n",
					"                            ,documentCaseStage\n",
					"                            ,filter1\n",
					"                            ,filter1Welsh\n",
					"                            ,filter2\n",
					"                            ,horizonFolderId\n",
					"                            ,transcriptId\n",
					"\n",
					"                            ,Migrated\n",
					"                            ,ODTSourceSystem\n",
					"                            ,IngestionDate\n",
					"                            ,ValidTo\n",
					"                            ,MD5(CONCAT(\n",
					"                                    IFNULL(CAST(NSIPDocumentID AS bigint), '.')\n",
					"                                    ,IFNULL(CAST(documentId AS String), '.')\n",
					"                                    ,IFNULL(CAST(caseId AS integer), '.')\n",
					"                                    ,IFNULL(CAST(caseRef AS String), '.')\n",
					"                                    ,IFNULL(CAST(version AS integer), '.')\n",
					"                                    ,IFNULL(CAST(examinationRefNo AS integer), '.')\n",
					"                                    ,IFNULL(CAST(filename AS String), '.')\n",
					"                                    ,IFNULL(CAST(originalFilename AS String), '.')\n",
					"                                    ,IFNULL(CAST(size AS integer), '.')\n",
					"                                    ,IFNULL(CAST(mime AS String), '.')\n",
					"                                    ,IFNULL(CAST(documentURI AS String), '.')\n",
					"                                    ,IFNULL(CAST(publishedDocumentURI AS String), '.')\n",
					"                                    ,IFNULL(CAST(path AS String), '.')\n",
					"                                    ,IFNULL(CAST(virusCheckStatus AS String), '.')\n",
					"                                    ,IFNULL(CAST(fileMD5 AS String), '.')\n",
					"                                    ,IFNULL(CAST(dateCreated AS String), '.')\n",
					"                                    ,IFNULL(CAST(datePublished AS String), '.')\n",
					"                                    ,IFNULL(CAST(lastModified AS String), '.')\n",
					"                                    ,IFNULL(CAST(caseType AS String), '.')\n",
					"                                    ,IFNULL(CAST(redactedStatus AS String), '.')\n",
					"                                    ,IFNULL(CAST(documentType AS String), '.')\n",
					"                                    ,IFNULL(CAST(securityClassification AS String), '.')\n",
					"                                    ,IFNULL(CAST(sourceSystem AS String), '.')\n",
					"                                    ,IFNULL(CAST(origin AS String), '.')\n",
					"                                    ,IFNULL(CAST(owner AS String), '.')\n",
					"                                    ,IFNULL(CAST(author AS String), '.')\n",
					"                                    ,IFNULL(CAST(authorWelsh AS String), '.')\n",
					"                                    ,IFNULL(CAST(description AS String), '.')\n",
					"                                    ,IFNULL(CAST(descriptionWelsh AS String), '.')\n",
					"                                    ,IFNULL(CAST(documentCaseStage AS String), '.')\n",
					"                                    ,IFNULL(CAST(filter1 AS String), '.')\n",
					"                                    ,IFNULL(CAST(filter1Welsh AS String), '.')\n",
					"                                    ,IFNULL(CAST(filter2 AS String), '.')\n",
					"                                    ,IFNULL(CAST(horizonFolderId AS String), '.')\n",
					"                                    ,IFNULL(CAST(transcriptId AS String), '.')\n",
					"                                    ,IFNULL(CAST(publishedStatus AS String), '.')\n",
					"                                    ,IFNULL(CAST(Migrated AS String), '.')\n",
					"                                    ,IFNULL(CAST(ODTSourceSystem AS String), '.')\n",
					"                                    ,IFNULL(CAST(IngestionDate AS String), '.')\n",
					"                                    ,IFNULL(CAST(ValidTo AS String), '.')\n",
					"                                )\n",
					"                            ) AS RowID\n",
					"                            ,IsActive\n",
					"                        FROM \n",
					"                            {spark_table_final}\n",
					"                    \"\"\")\n",
					"\n",
					"except Exception as e:\n",
					"        logError(f\"Error in preparing final results dataframe for {spark_table_final}:\\n{e}\")\n",
					"        error_message = app_insight_logger.format_error_message(e, max_length=300)"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"columns = results.columns\n",
					"\n",
					"results = results.drop(\"NSIPDocumentID\", \"ValidTo\", \"Migrated\", \"IsActive\")"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"final_df = results.join(df_calcs, (df_calcs[f\"temp_{primary_key}\"] == results[primary_key]) & (df_calcs[\"temp_IngestionDate\"] == results[\"IngestionDate\"])).select(columns)\n",
					"final_df = final_df.drop(primary_key).drop_duplicates()"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"columns_to_consider = ['documentId', 'filename', 'version', 'Migrated', 'originalFilename', 'ODTSourceSystem', 'IngestionDate', 'ValidTo', 'IsActive']\n",
					"final_df = final_df.drop_duplicates(subset=columns_to_consider)"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Ingest final data set to delta table nsip_document"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"try:\n",
					"    \n",
					"    insert_count = final_df.count()\n",
					"    logInfo(f\"Writing finalised {spark_table_final}\")\n",
					"    final_df.write.format(\"delta\").mode(\"Overwrite\").option(\"overwriteSchema\", \"true\").partitionBy(\"IsActive\").saveAsTable(f\"{spark_table_final}\")\n",
					"    logInfo(f\"Written finalised {spark_table_final}\")\n",
					"\n",
					"    end_exec_time = str(datetime.now())\n",
					"    app_insight_logger.add_table_result(                    \n",
					"                            delta_table_name = spark_table_final,\n",
					"                            insert_count = insert_count, \n",
					"                            update_count = update_count, \n",
					"                            delete_count = delete_count, \n",
					"                            table_result = \"success\",\n",
					"                            start_exec_time = start_exec_time, \n",
					"                            end_exec_time = end_exec_time,\n",
					"                            total_exec_time = \"\",\n",
					"                            error_message = \"\"\n",
					"                            )\n",
					"except Exception as e:\n",
					"        logError(f\"Error in ingesting delta table in the final step {spark_table_final}:\\n{e}\")\n",
					"        error_message = app_insight_logger.format_error_message(e, max_length=300)\n",
					"        \n",
					"        end_exec_time = str(datetime.now())\n",
					"        app_insight_logger.add_table_result(\n",
					"                    delta_table_name = spark_table_final,\n",
					"                    insert_count = insert_count, \n",
					"                    update_count = update_count, \n",
					"                    delete_count = delete_count, \n",
					"                    table_result = \"failed\",\n",
					"                    start_exec_time = start_exec_time, \n",
					"                    end_exec_time = end_exec_time,\n",
					"                    total_exec_time = \"\",\n",
					"                    error_message = error_message\n",
					"                    )\n",
					""
				],
				"execution_count": null
			}
		]
	}
}