{
	"name": "test_py_delete_table",
	"properties": {
		"folder": {
			"name": "archive/test/integrationTest"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw34",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "true",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "9dac6dd1-c45e-4e3f-8538-2fe25612ada3"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw34",
				"name": "pinssynspodw34",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw34",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"from pyspark.errors import AnalysisException"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"tags": [
						"parameters"
					]
				},
				"source": [
					"TARGET_DB = \"odw_standardised_db\"\n",
					"TARGET_TABLE = \"test_py_delete_table\"\n",
					"TARGET_CONTAINER = \"\"\n",
					"TARGET_BLOB = \"\""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"# These parameters are required\n",
					"assert TARGET_CONTAINER and TARGET_BLOB"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"def setup():\n",
					"    # This table is uploaded to blob storage outside of this notebook via `tests/integration_test/test_py_delete_table.py`\n",
					"    spark.sql(f\"CREATE TABLE IF NOT EXISTS {TARGET_DB}.{TARGET_TABLE} (colA INT, colB INT, colC INT) USING Parquet LOCATION '{TARGET_CONTAINER}/{TARGET_BLOB}'\")\n",
					"    try:\n",
					"        spark.sql(\"SELECT * FROM odw_standardised_db.test_py_delete_table\")\n",
					"    except AnalysisException as e:\n",
					"        if \"TABLE_OR_VIEW_NOT_FOUND\" not in str(e):\n",
					"            assert False, f\"Expected the table '{TARGET_DB}.{TARGET_TABLE}' to exist before testing begins\"\n",
					"        else:\n",
					"            raise e"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"def teardown():\n",
					"    spark.sql(f\"DROP TABLE IF EXISTS {TARGET_DB}.{TARGET_TABLE}\")"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"def test_py_delete_table():\n",
					"    mssparkutils.notebook.run(\n",
					"        \"utils/py_delete_table\",\n",
					"        60,\n",
					"        {\n",
					"            \"db_name\": TARGET_DB,\n",
					"            \"table_name\": TARGET_TABLE\n",
					"        }\n",
					"    )\n",
					"    try:\n",
					"        spark.sql(\"SELECT * FROM odw_standardised_db.test_py_delete_table\")\n",
					"        assert False, f\"Expected the table '{TARGET_DB}.{TARGET_TABLE}' to have been deleted\"\n",
					"    except AnalysisException as e:\n",
					"        if \"TABLE_OR_VIEW_NOT_FOUND\" not in str(e):\n",
					"            raise e"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Run tests"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"setup()"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"# Collect all test functions\n",
					"tests_to_run = {\n",
					"    symbol: eval(symbol)\n",
					"    for symbol in locals()\n",
					"    if symbol.startswith(\"test\") and callable(eval(symbol))\n",
					"}\n",
					"print(\"Running tests\\\\n\")\n",
					"for test_name, test in tests_to_run.items():\n",
					"    print(test_name)\n",
					"    test()"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"teardown()"
				],
				"execution_count": null
			}
		]
	}
}