{
	"name": "py_utils_curated_tests",
	"properties": {
		"description": "Unit tests for the curated layer tables to check they validate against the json schemas.",
		"folder": {
			"name": "utils/data-validation"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodwpr",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "3eab96c1-a932-4eb4-aa6b-b4d8dff89710"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodwpr",
				"name": "pinssynspodwpr",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodwpr",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.2",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"%pip install --quiet azure-identity==1.15.0 azure-functions==1.17.0 jsonschema==4.20.0 iso8601==2.1.0 pytest==7.4.0 git+https://github.com/Planning-Inspectorate/data-model@main#egg=pins_data_model"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import pandas\r\n",
					"import json\r\n",
					"from collections import defaultdict\r\n",
					"import pprint\r\n",
					"from jsonschema import validate, FormatChecker, ValidationError\r\n",
					"from iso8601 import parse_date, ParseError\r\n",
					"from pins_data_model import load_schemas"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "python"
					}
				},
				"source": [
					"%%pyspark\r\n",
					"df = spark.sql(\"SELECT * FROM `odw_curated_db`.`nsip_s51_advice` WHERE caseReference in ('BC010006', 'BC020002') order by caseReference asc\")"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"data = df.toPandas().drop(columns=[\"enquiryDetails\", \"adviceDetails\"])\r\n",
					"data.rename(columns={\"attachmentIds\": \"attachmentId\"}, inplace=True)\r\n",
					"data.head(5)"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"data_dict = defaultdict(dict)\r\n",
					"\r\n",
					"array_fields_to_exclude = [\"attachmentId\"]\r\n",
					"\r\n",
					"for index, row in data.iterrows():\r\n",
					"    caseReference = row[\"caseReference\"]\r\n",
					"\r\n",
					"    if caseReference not in data_dict:\r\n",
					"\r\n",
					"        data_dict[caseReference][\"attachmentIds\"] = []\r\n",
					"\r\n",
					"        for column, value in row.items():\r\n",
					"            if column in array_fields_to_exclude:\r\n",
					"                continue\r\n",
					"            data_dict[caseReference][column] = value\r\n",
					"\r\n",
					"    attachments = data_dict[caseReference][\"attachmentIds\"]\r\n",
					"    new_attachment = row[\"attachmentId\"]\r\n",
					"    if new_attachment not in attachments:\r\n",
					"        attachments.append(new_attachment)\r\n",
					"\r\n",
					"\r\n",
					"# pprint.pprint(data_dict)\r\n",
					"\r\n",
					"final_dict = {key: dict(value) for key, value in data_dict.items()}\r\n",
					"\r\n",
					"dict_to_compare = list(final_dict.values())\r\n",
					"\r\n",
					"pprint.pprint(dict_to_compare)"
				],
				"execution_count": null
			}
		]
	}
}