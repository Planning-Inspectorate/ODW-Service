{
	"name": "py_testing_change_table_schema",
	"properties": {
		"folder": {
			"name": "archive/"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw34",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "a8220798-1afc-422d-9913-e7fe264ab7ae"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw34",
				"name": "pinssynspodw34",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw34",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"%run  \"0-odw-source-to-raw/Fileshare/SAP_HR/py_0_source_to_raw_hr_functions\""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"jsonschema = \"\"\"{\"fields\": [{\"metadata\": {},\"name\": \"Date\",\"nullable\": false,\"type\": \"string\"}, {\"metadata\": {},\"name\": \"Text\",\"nullable\":false,\"type\": \"string\"}]}\"\"\"\r\n",
					"target_container = \"abfss://odw-standardised@\" + spark.sparkContext.environment.get('dataLakeAccountName', 'get') + \".dfs.core.windows.net/\"\r\n",
					"table_name = \"abdullah_test\"\r\n",
					"target_folder = \"config/\" + table_name"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import json\r\n",
					"loaded_schema = json.loads(jsonschema)\r\n",
					"[field.pop('nullable') for field in loaded_schema['fields']]\r\n",
					"loaded_schema"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"create_table_from_schema(jsonschema, \"odw_standardised_db\", table_name, target_container, target_folder)"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"-- select * from odw_config_db.abdullah_test\r\n",
					"insert into odw_standardised_db.abdullah_test VALUES (NULL, 'Hello1 World')"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from delta.tables import DeltaTable\r\n",
					"deltaTable_standardised = DeltaTable.forPath(spark, \"abfss://odw-standardised@\" + spark.sparkContext.environment.get('dataLakeAccountName', 'get') + \".dfs.core.windows.net/\"+\"config/\" + table_name)\r\n",
					"fullHistoryDF = deltaTable_standardised.history()\r\n",
					"# fullHistoryDF.select(\"version\").first()['version']\r\n",
					"deltaTable_standardised.restoreToVersion(2)"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"table_details = spark.sql(f\"DESCRIBE DETAIL odw_standardised_db.abdullah_test\").toPandas()\r\n",
					"table_details['location'][0]"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"fullHistoryDF = deltaTable_standardised.history()\r\n",
					"fullHistoryDF.toPandas()"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"SELECT * FROM odw_harmonised_db.abdullah_test"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df = spark.read.format('delta').table('odw_standardised_db.abdullah_test')\r\n",
					"df.schema.jsonValue()"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# # test new column\r\n",
					"# from pyspark.sql.types import StructType, TimestampType\r\n",
					"# import json\r\n",
					"# from pyspark.sql import SparkSession\r\n",
					"# from pyspark.sql.functions import to_timestamp\r\n",
					"# # df_original = spark.read\r\n",
					"# jsonschema_new_column = \"\"\"{\"fields\": [{\"metadata\": {},\"name\": \"Date\",\"nullable\": true,\"type\": \"timestamp\"}, {\"metadata\": {},\"name\": \"Text\",\"nullable\":false,\"type\": \"string\"}, {\"metadata\": {},\"name\": \"PleaseWork\",\"nullable\":false,\"type\": \"string\"}]}\"\"\"\r\n",
					"\r\n",
					"# schema = StructType.fromJson(json.loads(jsonschema_new_column))\r\n",
					"# spark = SparkSession.builder.getOrCreate()\r\n",
					"# spark.conf.set(\"spark.databricks.delta.schema.autoMerge.enabled\", \"true\")\r\n",
					"# # df_original = spark.table(\"odw_config_db.abdullah_test\")\r\n",
					"# #to_timestamp('2016-12-31 00:12:00') (datetime(2023,3,1),\"hello\",\"world\")\r\n",
					"# from datetime import datetime\r\n",
					"# df = spark.createDataFrame([], schema)\r\n",
					"# # df.unionByName(df_original, allowMissingColumns=True)\r\n",
					"# df.write.option(\"mergeSchema\", \"true\").mode(\"append\").format('delta').saveAsTable('odw_config_db.abdullah_test')"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# from pyspark.sql.functions import col\r\n",
					"\r\n",
					"# # set dataset location and columns with new types\r\n",
					"# types_to_change = {\r\n",
					"#   'Date' : 'timestamp',\r\n",
					"#   'Time' : 'string'\r\n",
					"# }\r\n",
					"# from pyspark.sql.functions import col\r\n",
					"# # load to dataframe, change types\r\n",
					"# df = spark.read.format('delta').table('odw_config_db.abdullah_test')\r\n",
					"# for column in types_to_change:\r\n",
					"#   df = df.withColumn(column,col(column).cast(types_to_change[column]))\r\n",
					"  \r\n",
					"# # save df with new types overwriting the schema\r\n",
					"# df.write.format(\"delta\").mode(\"overwrite\").option(\"overwriteSchema\",True).saveAsTable('odw_config_db.abdullah_test')"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# df = spark.read.format('delta').table('odw_config_db.abdullah_test')\r\n",
					"# df.show()"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# spark.read.format(\"delta\").load(\"odw_config_db.abdullah_test\").show()"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql \r\n",
					"-- DESCRIBE odw_config_db.abdullah_test"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# df_original = spark.table('odw_config_db.abdullah_test')\r\n",
					"# df_original"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"-- SELECT * FROM odw_config_db.abdullah_test"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"insert into odw_config_db.abdullah_test(Date,Text,PleaseWork) VALUES (CAST('2022-10-10' AS TIMESTAMP), 'Hello World', \"My name is...\");\r\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"-- -- select * from odw_config_db.abdullah_test\r\n",
					"-- insert into odw_config_db.abdullah_test(Date,Text,PleaseWork) VALUES (CAST('2022-10-10' AS TIMESTAMP), NULL, \"My name is...\");"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# import json\r\n",
					"# jsonschema = \"\"\"{\"fields\": [{\"metadata\": {},\"name\": \"Date\",\"nullable\": false,\"type\": \"string\"}, {\"metadata\": {},\"name\": \"Text\",\"nullable\":false,\"type\": \"string\"}]}\"\"\"\r\n",
					"# jsonschema_new_column = \"\"\"{\"fields\": [{\"metadata\": {},\"name\": \"Date\",\"nullable\": false,\"type\": \"timestamp\"}, {\"metadata\": {},\"name\": \"Text\",\"nullable\":false,\"type\": \"string\"}, {\"metadata\": {},\"name\": \"PleaseWork\",\"nullable\":false,\"type\": \"string\"}]}\"\"\"\r\n",
					"# new_fields = json.loads(jsonschema_new_column)['fields']\r\n",
					"# old_fields = json.loads(jsonschema)['fields']\r\n",
					"\r\n",
					"# column_type_changed = {}\r\n",
					"# for new_field in new_fields:\r\n",
					"#     for old_field in old_fields:\r\n",
					"#         if old_field['name'] == new_field['name'] and old_field['type'] != new_field['type']:\r\n",
					"#             column_type_changed.update(dict({old_field['name']: new_field['type']}))\r\n",
					"# from pyspark.sql.functions import col\r\n",
					"# # load to dataframe, change types\r\n",
					"# df = spark.read.format('delta').table('odw_config_db.abdullah_test')\r\n",
					"# for column in types_to_change:\r\n",
					"#   df = df.withColumn(column,col(column).cast(types_to_change[column]))\r\n",
					"  \r\n",
					"# # save df with new types overwriting the schema\r\n",
					"# df.write.format(\"delta\").mode(\"overwrite\").option(\"overwriteSchema\",True).saveAsTable('odw_config_db.abdullah_test')"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"tags": [
						"parameters"
					]
				},
				"source": [
					"db_name = ''\r\n",
					"table_name = ''"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"start = {}\r\n",
					"start.update(dict(x=1))\r\n",
					"start.update(dict(y=2))\r\n",
					"start"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def new_schema_cast_columns(old_schema:dict, new_schema:str, db_name:str, table_name:str):\r\n",
					"    '''\r\n",
					"    '''\r\n",
					"    from pyspark.sql import SparkSession\r\n",
					"    spark = SparkSession.builder.getOrCreate()\r\n",
					"    spark.conf.set(\"spark.databricks.delta.schema.autoMerge.enabled\", \"true\")\r\n",
					"\r\n",
					"    import json\r\n",
					"    new_fields = json.loads(new_schema)['fields']\r\n",
					"\r\n",
					"    \r\n",
					"    old_fields = old_schema['fields']\r\n",
					"\r\n",
					"    column_type_changed = {}\r\n",
					"    for new_field in new_fields:\r\n",
					"        for old_field in old_fields:\r\n",
					"            if old_field['name'] == new_field['name'] and old_field['type'] != new_field['type']:\r\n",
					"                column_type_changed.update(dict({old_field['name']: new_field['type']}))\r\n",
					"    if column_type_changed != {}:\r\n",
					"        from pyspark.sql.functions import col\r\n",
					"        # load to dataframe, change types\r\n",
					"        df = spark.read.format('delta').table(f'{db_name}.{table_name}')\r\n",
					"        for column in column_type_changed:\r\n",
					"            df = df.withColumn(column,col(column).cast(types_to_change[column]))\r\n",
					"        \r\n",
					"        # save df with new types overwriting the schema\r\n",
					"        df.write.format(\"delta\").mode(\"overwrite\").option(\"overwriteSchema\",True).saveAsTable(f'{db_name}.{table_name}')\r\n",
					"\r\n",
					"def apply_new_schema(db_name, table_name):\r\n",
					"    '''\r\n",
					"    doc string\r\n",
					"    '''\r\n",
					"    from pyspark.sql import SparkSession\r\n",
					"    from notebookutils import mssparkutils\r\n",
					"    from pyspark.sql.types import StructType\r\n",
					"    import json\r\n",
					"    spark = SparkSession.builder.getOrCreate()\r\n",
					"    spark.conf.set(\"spark.databricks.delta.schema.autoMerge.enabled\", \"true\")\r\n",
					"\r\n",
					"    storage_account= spark.sparkContext.environment.get('dataLakeAccountName', 'get') + \".dfs.core.windows.net\"\r\n",
					"    config_storage_container = 'abfss://odw-config@' + storage_account + '/'\r\n",
					"    storage_acc_name = spark.sparkContext.environment.get('dataLakeAccountName', 'get')\r\n",
					"\r\n",
					"    # json_schema_folder='harmonised_table_definitions'\r\n",
					"    # json_schema_path = config_storage_container + '/' + json_schema_folder\r\n",
					"    # read orchestration json to determine schema location \r\n",
					"    if db_name.lower() == 'odw_standardised_db':\r\n",
					"        \r\n",
					"        orchestration_json = spark.read.text(\"abfss://odw-config@\"+storage_acc_name+\".dfs.core.windows.net/orchestration/orchestration.json\", wholetext=True).first().value\r\n",
					"        json_config_dict = json.loads(orchestration_json)\r\n",
					"        schema_location = \"abfss://odw-config@\"+storage_acc_name+\".dfs.core.windows.net/\" + next(config['Standardised_Table_Definition'] for config in json_config_dict['definitions'] if config['Standardised_Table_Name'] == table_name)\r\n",
					"        schema = spark.read.text(schema_location, wholetext=True).first().value\r\n",
					"\r\n",
					"    elif db_name.lower() == 'odw_harmonised_db':\r\n",
					"        schema_location = next(file.path for file in mssparkutils.fs.ls(\"abfss://odw-config@\"+storage_acc_name+\".dfs.core.windows.net/harmonised_table_definitions/\") if file.name.lower().split('.json')[0] == table_name)\r\n",
					"        schema = spark.read.text(schema_location, wholetext=True).first().value\r\n",
					"\r\n",
					"    elif db_name.lower() == 'odw_curated_db':\r\n",
					"        schema_location = next(file.path for file in mssparkutils.fs.ls(\"abfss://odw-config@\"+storage_acc_name+\".dfs.core.windows.net/curated_table_definitions/\") if file.name.lower().split('.json')[0] == table_name)\r\n",
					"        schema = spark.read.text(schema_location, wholetext=True).first().value\r\n",
					"\r\n",
					"    elif db_name.lower() == 'odw_config_db':\r\n",
					"        if table_name.lower() == 'datalabs_log':\r\n",
					"            schema = 'hello'\r\n",
					"        elif table_name.lower() == 'raw_to_std_outstanding_files':\r\n",
					"            schema = 'world'\r\n",
					"        else:\r\n",
					"            raise RuntimeError(\"No Schema Found\")\r\n",
					"\r\n",
					"    current_json_str = spark.read.format('delta').table(f'{db_name}.{table_name}').schema.jsonValue()    \r\n",
					"    new_schema_cast_columns(current_json_str, schema, db_name, table_name)\r\n",
					"    # attempt to cast existing columns with new type type \r\n",
					"    \r\n",
					"    # if successful, add new columns from new schema schema \r\n",
					"    new_struct = StructType.fromJson(json.loads(schema))\r\n",
					"    spark = SparkSession.builder.getOrCreate()\r\n",
					"    spark.conf.set(\"spark.databricks.delta.schema.autoMerge.enabled\", \"true\")\r\n",
					"    df = spark.createDataFrame([], new_struct)\r\n",
					"    df.write.option(\"mergeSchema\", \"true\").mode(\"append\").format('delta').saveAsTable(f'{db_name}.{table_name}')\r\n",
					"\r\n",
					"apply_new_schema(\"odw_harmonised_db\",\"abdullah_test\")"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# import json\r\n",
					"# storage_acc_name = spark.sparkContext.environment.get('dataLakeAccountName', 'get')\r\n",
					"# orchestration_json = spark.read.text(\"abfss://odw-config@\"+storage_acc_name+\".dfs.core.windows.net/orchestration/orchestration.json\", wholetext=True).first().value\r\n",
					"# json_config_dict = json.loads(orchestration_json)\r\n",
					"# # next(config['Standardised_Table_Definition'] for config in json_config_dict['definitions'] if config['Standardised_Table_Name'] == 'hr_addresses')\r\n",
					"# json_config_dict\r\n",
					"# table_location = \"abfss://odw-config@\"+storage_acc_name+\".dfs.core.windows.net/\" + next(config['Standardised_Table_Definition'] for config in json_config_dict['definitions'] if config['Standardised_Table_Name'] == 'hr_addresses')"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# from notebookutils import mssparkutils\r\n",
					"# next(file.path for file in mssparkutils.fs.ls(\"abfss://odw-config@\"+storage_acc_name+\".dfs.core.windows.net/harmonised_table_definitions/\") if file.name.lower().split('.json')[0] == \"casework_additional_fields_dim\")"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# table_location"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# from pyspark.sql.types import TimestampType, DateType, Type\r\n",
					"# TimestampType().jsonValue()\r\n",
					"# TypeVar().jsonValue()"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"    # json_for_df = spark.read.format('delta').table('odw_config_db.abdullah_test').schema.jsonValue()\r\n",
					"    # string_from_json = json.dumps(json_for_df)\r\n",
					"    # string_from_json"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# json_for_df['fields']"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"jsonschema_new_type = \"\"\"{\"fields\": [{\"metadata\": {},\"name\": \"Date\",\"nullable\": false,\"type\": \"timestamp\"}, {\"metadata\": {},\"name\": \"Text\",\"nullable\":false,\"type\": \"string\"}, {\"metadata\": {},\"name\": \"PleaseWork\",\"nullable\":false,\"type\": \"string\"}]}\"\"\"\r\n",
					"json.loads(jsonschema_new_type)"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# # test change column type \r\n",
					"# jsonschema_new_type = \"\"\"{\"fields\": [{\"metadata\": {},\"name\": \"Date\",\"nullable\": false,\"type\": \"timestamp\"}, {\"metadata\": {},\"name\": \"Text\",\"nullable\":false,\"type\": \"string\"}, {\"metadata\": {},\"name\": \"PleaseWork\",\"nullable\":false,\"type\": \"string\"}]}\"\"\"\r\n",
					"# schema = StructType.fromJson(json.loads(jsonschema_new_column))\r\n",
					"# spark = SparkSession.builder.getOrCreate()\r\n",
					"# spark.conf.set(\"spark.databricks.delta.schema.autoMerge.enabled\", \"true\")\r\n",
					"# # df_original = spark.table(\"odw_config_db.abdullah_test\")\r\n",
					"# #to_timestamp('2016-12-31 00:12:00') (datetime(2023,3,1),\"hello\",\"world\")\r\n",
					"# from datetime import datetime\r\n",
					"# df = spark.createDataFrame([], schema)\r\n",
					"# # df.unionByName(df_original, allowMissingColumns=True)\r\n",
					"# df.write.option(\"mergeSchema\", \"true\").mode(\"append\").format('delta').saveAsTable('odw_config_db.abdullah_test')"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"\r\n",
					"def delete_table(db_name, table_name):\r\n",
					"    import logging\r\n",
					"    logger = logging.getLogger(__name__)\r\n",
					"    from pyspark.sql import SparkSession\r\n",
					"    from notebookutils import mssparkutils\r\n",
					"    spark = SparkSession.builder.getOrCreate()\r\n",
					"    if spark._jsparkSession.catalog().tableExists(db_name, table_name):\r\n",
					"        table_details = spark.sql(f\"DESCRIBE DETAIL {db_name}.{table_name}\").toPandas()\r\n",
					"        if len(table_details) > 1:\r\n",
					"            raise RuntimeError(\"too many locations associated with the table!\")\r\n",
					"        else:\r\n",
					"            loc = table_details['location'][0]\r\n",
					"            mssparkutils.fs.rm(loc, True)\r\n",
					"            spark.sql(f\"DROP TABLE IF EXISTS {db_name}.{table_name}\")\r\n",
					"    else:\r\n",
					"        logger.info(\"Table does not exist\")"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"db_name=\"odw_standardised_db\"\r\n",
					"table_name=\"abdullah_test\""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"delete_table(db_name,table_name)"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"[dbs for dbs in spark.catalog.listDatabases()]"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"[table.name for table in spark.catalog.listTables('odw_config_db')]"
				],
				"execution_count": null
			}
		]
	}
}