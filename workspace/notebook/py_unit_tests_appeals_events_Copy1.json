{
	"name": "py_unit_tests_appeals_events_Copy1",
	"properties": {
		"folder": {
			"name": "utils/unit-tests"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw34",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "4eda6c75-298b-41ae-bbef-854637101303"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": true,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw34",
				"name": "pinssynspodw34",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw34",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import json\r\n",
					"from pyspark.sql.types import *\r\n",
					"from pyspark.sql import DataFrame\r\n",
					"import pprint"
				],
				"execution_count": 10
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"entity_name: str = 'appeal-event'\r\n",
					"std_db_name: str = 'odw_standardised_db'\r\n",
					"hrm_db_name: str = 'odw_harmonised_db'\r\n",
					"curated_db_name: str = 'odw_curated_db'\r\n",
					"std_table_name: str = 'sb_appeal_event' \r\n",
					"\r\n",
					"horizon_std_table_name: str = 'horizon_appeals_event' #horizon\r\n",
					"\r\n",
					"hrm_table_name: str = 'sb_appeal_event'\r\n",
					"hrm_table_final: str = 'appeal_event'\r\n",
					"curated_table_name: str = 'appeal_event'\r\n",
					"\r\n",
					"odw_config_entity = 'HorizonAppealsEvent' #horizon"
				],
				"execution_count": 11
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"storage_account: str = mssparkutils.notebook.run('/utils/py_utils_get_storage_account')\r\n",
					"path_to_orchestration_file: str = \"abfss://odw-config@\"+storage_account+\"orchestration/orchestration.json\""
				],
				"execution_count": 12
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"data_model_columns = [   \r\n",
					"    \"eventId\",\r\n",
					"    \"caseReference\",\r\n",
					"    \"eventType\",\r\n",
					"    \"eventName\",\r\n",
					"    \"eventStatus\",\r\n",
					"    \"isUrgent\",\r\n",
					"    \"eventPublished\",\r\n",
					"    \"eventStartDateTime\",\r\n",
					"    \"eventEndDateTime\",\r\n",
					"    \"notificationOfSiteVisit\",\r\n",
					"    \"addressLine1\",\r\n",
					"    \"addressLine2\",\r\n",
					"    \"addressTown\",\r\n",
					"    \"addressCounty\",\r\n",
					"    \"addressPostcode\"]"
				],
				"execution_count": 13
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%run /utils/unit-tests/py_unit_tests_functions"
				],
				"execution_count": 14
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"sb_std_schema = create_spark_schema(std_db_name, entity_name)\r\n",
					"sb_std_table_schema = spark.table(f\"{std_db_name}.{std_table_name}\").schema\r\n",
					"sb_hrm_schema = create_spark_schema(hrm_db_name, entity_name)\r\n",
					"sb_hrm_table_schema = spark.table(f\"{hrm_db_name}.{hrm_table_name}\").schema\r\n",
					"curated_schema = create_spark_schema(curated_db_name, entity_name)\r\n",
					"curated_table_schema = spark.table(f\"{curated_db_name}.{curated_table_name}\").schema\r\n",
					"\r\n",
					"std_schema_odw_config = create_spark_schema_odw_config(std_db_name, odw_config_entity)\r\n",
					"horizon_std_table_schema = spark.table(f\"{std_db_name}.{horizon_std_table_name}\").schema\r\n",
					""
				],
				"execution_count": 15
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#keep track of the exitCodes, if the exit code is not zero then we've had failures, we flip the boolean \r\n",
					"exitCode: int = 0"
				],
				"execution_count": 16
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Compare schemas"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"std_schema_correct: bool = test_compare_schemas(sb_std_schema, sb_std_table_schema)\r\n",
					"print(f\"Service bus standardised schema correct: {std_schema_correct}\\nTable: {std_db_name}.{std_table_name}\\nDifferences shown above (if any)\")\r\n",
					"exitCode += int(not std_schema_correct)\r\n",
					"hrm_schema_correct: bool = test_compare_schemas(sb_hrm_schema, sb_hrm_table_schema)\r\n",
					"print(f\"Service bus harmonised schema correct: {hrm_schema_correct}\\nTable: {hrm_db_name}.{hrm_table_name}\\nDifferences shown above (if any)\")\r\n",
					"exitCode += int(not hrm_schema_correct)\r\n",
					"cur_schema_correct: bool = test_compare_schemas(curated_schema, curated_table_schema)\r\n",
					"print(f\"Curated schema correct: {cur_schema_correct}\\nTable: {curated_db_name}.{curated_table_name}\\nDifferences shown above (if any)\")\r\n",
					"exitCode += int(not cur_schema_correct)\r\n",
					"\r\n",
					"#horizon validate schema \r\n",
					"std_schema_correct: bool = test_compare_schemas(std_schema_odw_config, horizon_std_table_schema)\r\n",
					"print(f\"odw-config standardised schema correct: {std_schema_correct}\\nTable: {std_db_name}.{horizon_std_table_name}\\nDifferences shown above (if any)\")\r\n",
					"exitCode += int(not std_schema_correct)"
				],
				"execution_count": 19
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Compare service bus standardised with harmonised\r\n",
					"Should be the same count"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"standardised_count, harmonised_count, counts_match = test_deduped_std_same_rows_hrm(std_table_name, hrm_table_name)\r\n",
					"print(f\"Standardised Count: {standardised_count: ,}\\nHarmonised Count: {harmonised_count: ,}\\nCounts match: {counts_match}\")\r\n",
					"\r\n",
					"if standardised_count > harmonised_count:\r\n",
					"    exitCode += 1\r\n",
					"    print(f\"{standardised_count - harmonised_count} rows from Standardised are missing in Harmonised.\" )\r\n",
					"    differentiate_std_and_hrm(f\"{std_db_name}.{std_table_name}\", f\"{hrm_db_name}.{hrm_table_name}\", data_model_columns)    "
				],
				"execution_count": 20
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Compare final harmonised table (if combined with Horizon) with curated table"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"Comparing where IsActive = Y in harmonised = curated row count"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"harmonised_final_count, curated_count, counts_match = test_curated_row_count(hrm_table_final, curated_table_name, data_model_columns)\r\n",
					"print(f\"Harmonised Final Count: {harmonised_final_count: ,}\\nCurated Count: {curated_count: ,}\\nCounts match: {counts_match}\")\r\n",
					"exitCode += int(not counts_match)"
				],
				"execution_count": 21
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def test_sb_std_to_sb_hrm_no_dropping_records(sb_std_table: str, sb_hrm_table: str) -> bool:\r\n",
					"    df: DataFrame = spark.sql(f\"\"\"\r\n",
					"    select eventId\r\n",
					"    from {std_db_name}.{sb_std_table}\r\n",
					"    where eventId not in\r\n",
					"    (\r\n",
					"        select eventId\r\n",
					"        from {hrm_db_name}.{sb_hrm_table}\r\n",
					"    )\r\n",
					"    \"\"\")\r\n",
					"\r\n",
					"    return df.count() == 0"
				],
				"execution_count": 31
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def test_sb_hrm_to_hrm_final_no_dropping_records(sb_hrm_table: str, hrm_table_final: str) -> bool:\r\n",
					"    df: DataFrame = spark.sql(f\"\"\"\r\n",
					"    select eventId\r\n",
					"    from {hrm_db_name}.{sb_hrm_table}\r\n",
					"    where eventId not in\r\n",
					"    (\r\n",
					"        select eventId\r\n",
					"        from {hrm_db_name}.{hrm_table_final}\r\n",
					"    )\r\n",
					"    \"\"\")\r\n",
					"\r\n",
					"    return df.count() == 0"
				],
				"execution_count": 32
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def test_hrm_to_curated_no_dropping_records(hrm_table_final: str, curated_table_name: str) -> bool:\r\n",
					"    df: DataFrame = spark.sql(f\"\"\"\r\n",
					"    select eventId\r\n",
					"    from {hrm_db_name}.{hrm_table_final}\r\n",
					"    where IsActive = 'Y'\r\n",
					"    and eventId not in\r\n",
					"    (\r\n",
					"        select eventId\r\n",
					"        from {curated_db_name}.{curated_table_name}\r\n",
					"    )\r\n",
					"    \"\"\")\r\n",
					"\r\n",
					"    return df.count() == 0"
				],
				"execution_count": 33
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def test_horizon_to_hrm_final_no_dropping_records(horizon_std_table_name: str, hrm_table_final: str) -> bool:\r\n",
					"    df: DataFrame = spark.sql(f\"\"\"\r\n",
					"    select CONCAT(casenumber, '-',eventId) AS eventId\r\n",
					"    from {std_db_name}.{horizon_std_table_name}\r\n",
					"    where ingested_datetime = (select max(ingested_datetime) from {std_db_name}.{horizon_std_table_name})\r\n",
					"    and CONCAT(casenumber, '-',eventId) not in\r\n",
					"    (\r\n",
					"        select eventId\r\n",
					"        from {hrm_db_name}.{hrm_table_final}\r\n",
					"    )\r\n",
					"    \"\"\")\r\n",
					"\r\n",
					"    return df.count() == 0"
				],
				"execution_count": 34
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"result_sb_std_hrm_tes = test_sb_std_to_sb_hrm_no_dropping_records(std_table_name,hrm_table_name)\r\n",
					"result_sb_hrm_f = test_sb_hrm_to_hrm_final_no_dropping_records(hrm_table_name, hrm_table_final)\r\n",
					"result_hrm_cur = test_hrm_to_curated_no_dropping_records(hrm_table_final, curated_table_name)\r\n",
					"result_hzn_hrm_f = test_horizon_to_hrm_final_no_dropping_records(horizon_std_table_name, hrm_table_final)\r\n",
					""
				],
				"execution_count": 35
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"print(f\"Service bus sb_std to sb_hrm table no eventId dropped: {result_sb_std_hrm_tes}\")\r\n",
					"exitCode += int(not result_sb_std_hrm_tes)"
				],
				"execution_count": 36
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"print(f\"Service bus hrm to hrm table final no eventId dropped: {result_sb_hrm_f}\")\r\n",
					"exitCode += int(not result_sb_hrm_f)"
				],
				"execution_count": 28
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"print(f\"hrm table final to curated no eventId dropped: {result_hrm_cur}\")\r\n",
					"exitCode += int(not result_hrm_cur)\r\n",
					"\r\n",
					"print(f\"Horizon std table to hrm table final no eventId dropped: {result_hzn_hrm_f}\")\r\n",
					"exitCode += int(not result_hzn_hrm_f)"
				],
				"execution_count": 29
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"mssparkutils.notebook.exit(exitCode)"
				],
				"execution_count": 30
			}
		]
	}
}