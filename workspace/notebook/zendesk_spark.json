{
	"name": "zendesk_spark",
	"properties": {
		"folder": {
			"name": "odw-raw"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "d9f12e2f-21c6-4f61-9f4e-e558219395a8"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw",
				"name": "pinssynspodw",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"from collections.abc import Mapping\r\n",
					"from itertools import chain\r\n",
					"from operator import add\r\n",
					"#ignore FutureWarning messages \r\n",
					"import warnings\r\n",
					"warnings.filterwarnings(\"ignore\", message=\"iteritems is deprecated\")\r\n",
					"from notebookutils import mssparkutils\r\n",
					"from pprint import pprint as pp\r\n",
					""
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"_FLAG_FIRST = object()\r\n",
					"\r\n",
					"def flattenDict(d, join=add, lift=lambda x:(x,)):\r\n",
					"    '''\r\n",
					"    Description: This fucntion role is to flatten a dictionary \r\n",
					"    Parameters:\r\n",
					"    Outputs:\r\n",
					"    Returns:\r\n",
					"    '''\r\n",
					"    results = []\r\n",
					"    def visit(subdict, results, partialKey):\r\n",
					"        for k,v in subdict.items():\r\n",
					"            newKey = lift(k) if partialKey==_FLAG_FIRST else join(partialKey,lift(k))\r\n",
					"            if isinstance(v,Mapping):\r\n",
					"                visit(v, results, newKey)\r\n",
					"            else:\r\n",
					"                results.append((newKey,v))\r\n",
					"    visit(d, results, _FLAG_FIRST)\r\n",
					"    return results"
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from notebookutils import mssparkutils\r\n",
					"### mount the data lake storage in Synapse to the Synapse File Mount API\r\n",
					"jobId = mssparkutils.env.getJobId()\r\n",
					"mssparkutils.fs.unmount(\"/zendesk_folder\") \r\n",
					"mssparkutils.fs.mount( \r\n",
					"'abfss://odw-raw@pinsstodwdevuks9h80mb.dfs.core.windows.net/JsonTest/', \r\n",
					"\"/zendesk_folder\", \r\n",
					"{\"linkedService\":\"ls_storage\"} \r\n",
					")   "
				],
				"execution_count": 3
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def read_json():\r\n",
					"    with open(f\"/synfs/{jobId}/zendesk_folder/output_0.json\", 'r') as zendesk_raw:\r\n",
					"\r\n",
					"            import json\r\n",
					"            \r\n",
					"            zendesk_dict = json.load(zendesk_raw)\r\n",
					"    return zendesk_dict\r\n",
					"\r\n",
					"    "
				],
				"execution_count": 4
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.sql import SparkSession \r\n",
					"spark = SparkSession.builder.getOrCreate() \r\n",
					"shows = spark.read.json(\"abfss://odw-raw@pinsstodwdevuks9h80mb.dfs.core.windows.net/JsonTest/output_0.json\")\r\n",
					"shows.printSchema()\r\n",
					""
				],
				"execution_count": 5
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"print(shows.columns)"
				],
				"execution_count": 6
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"array_subset = shows.select(\"id\",\"fields\") \r\n",
					"array_subset.show(1, False) "
				],
				"execution_count": 7
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import pyspark.sql.functions as F \r\n",
					"array_subset = array_subset.select(\r\n",
					"    \"id\",\r\n",
					"    array_subset.fields[0].alias(\"dot_and_index\"),\r\n",
					"    F.col(\"fields\")[0].alias(\"col_and_index\"),\r\n",
					"    array_subset.fields.getItem(0).alias(\"dot_and_method\"),\r\n",
					"    F.col(\"fields\").getItem(0).alias(\"col_and_method\"),\r\n",
					"    ) \r\n",
					"# array_subset.show() "
				],
				"execution_count": 8
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"fields = shows.select(\r\n",
					"\"id\", F.explode(\"fields\").alias(\"fields\")\r\n",
					")\r\n",
					"# fields.show() "
				],
				"execution_count": 9
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# fields_id_value = shows.select(F.col(\"id\").alias(\"ticket_id\"),\r\n",
					"#     F.map_from_arrays(\r\n",
					"#     F.col(\"fields.id\"), F.col(\"fields.value\")\r\n",
					"#     ).alias(\"ID_VALUE\")\r\n",
					"#     )\r\n",
					"# fields_id_value.show()\r\n",
					"# fields_id_value = fields_id_value.select(\"ticket_id\",\r\n",
					"#     F.posexplode(\"ID_VALUE\").alias(\"position\", \"id\", \"value\")\r\n",
					"#     )\r\n",
					"# fields_id_value.show()\r\n",
					"# fields_id_value.drop(\"position\")\r\n",
					"# spark.sql(f\"drop table if exists odw_standardised_db.zendesk_fields_id_value;\")\r\n",
					"# fields_id_value.write.saveAsTable(\"odw_standardised_db.zendesk_fields_id_value\")"
				],
				"execution_count": 10
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"collaborator = shows.select(\"id\", F.explode(\"collaborator\").alias(\"collaborator\"))\r\n",
					"collaborator.show()\r\n",
					""
				],
				"execution_count": 11
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import pyspark.sql.functions as F \r\n",
					"comments = shows.select(F.col(\"id\").alias(\"ticket_id\"), F.col(\"comments\").alias(\"comments\"))"
				],
				"execution_count": 12
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"comments_attachments = shows.select(F.col(\"id\").alias(\"ticket_id\"),F.col(\"comments.attachments\"))\r\n",
					"attachments= comments_attachments.select(\"ticket_id\",F.explode(\"attachments\").alias(\"attachments\"))\r\n",
					"attachments= attachments.select(\"ticket_id\",F.explode(\"attachments\").alias(\"attachments\"))\r\n",
					"# attachments= attachments.select(\"ticket_id\",F.posexplode(\"attachments\").alias(\"attachments_id\",\"attachments_value\"))\r\n",
					"attachments.show()"
				],
				"execution_count": 13
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.sql.functions import map_keys\r\n",
					"from pyspark.sql.functions import map_values\r\n",
					"comments_attachments = shows.select(F.col(\"id\").alias(\"ticket_id\"),F.col(\"comments.attachments\"))\r\n",
					"attachments= attachments.select(\"ticket_id\",F.explode(\"attachments\").alias(\"attachments\"))\r\n",
					"attachments.show()"
				],
				"execution_count": 21
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# attachments = attachments.select(\"ticket_id\",map(\"attachments\"))\r\n",
					"# attachments = comments_attachments.select(\"ticket_id\",\r\n",
					"#     map_keys(\"attachments\").alias(\"attachments_keys\"), map_values(\"attachments\").alias(\"attachments_values\")\r\n",
					"#     )"
				],
				"execution_count": null
			}
		]
	}
}