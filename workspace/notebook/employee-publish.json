{
	"name": "employee-publish",
	"properties": {
		"folder": {
			"name": "odw-esb"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodwpr",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "1c860bb6-fc32-4213-95af-dc2a061ccf7b"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodwpr",
				"name": "pinssynspodwpr",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodwpr",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Employee Publish\n",
					"Checks the Service Bus for topics last accessed timestamp, gets all changes from the Change Data Feed and sends each record to the service bus topic. \n",
					"See https://learn.microsoft.com/en-us/samples/azure/azure-sdk-for-python/servicebus-samples/ for servicebus samples\n",
					""
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def get_topic_accessed_at(servicebus_mgmt_client):\n",
					"    get_topic_runtime_properties = servicebus_mgmt_client.get_topic_runtime_properties(topic_name)\n",
					"    return(get_topic_runtime_properties.accessed_at_utc)\n",
					"\n",
					"def send_single_message(sender,content):\n",
					"    message = ServiceBusMessage(content)\n",
					"    sender.send_messages(message)\n",
					"\n",
					"def send_a_list_of_messages(sender):\n",
					"    messages = [ServiceBusMessage(\"Message in list\") for _ in range(10)]\n",
					"    sender.send_messages(messages)\n",
					"\n",
					"def send_batch_message(sender,df):\n",
					"    batch_message = sender.create_message_batch()\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Sets the notebook variables"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"tags": [
						"parameters"
					]
				},
				"source": [
					"secret_name=\"servicebus-connectionstring\"\n",
					"kv_linked_service=\"ls_kv\"\n",
					"topic_name=\"employee\"\n",
					"table_name=\"odw_curated_db.employee\""
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Get Servicebus connectionstring from Key Vault"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.sql import SparkSession\n",
					"spark = SparkSession.builder.getOrCreate()\n",
					"akv_name=spark.sparkContext.environment.get('keyVaultName', 'get')\n",
					"from notebookutils import mssparkutils\n",
					"conn_str = mssparkutils.credentials.getSecret(akv_name, secret_name, kv_linked_service)\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Get Topic Accessed At timestamp"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from azure.servicebus.management import ServiceBusAdministrationClient\n",
					"with ServiceBusAdministrationClient.from_connection_string(conn_str) as servicebus_mgmt_client:\n",
					"    topic_accessed_at=get_topic_accessed_at(servicebus_mgmt_client)\n",
					"#topic_accessed_at=\"2023-02-14 22:00:00.000000+00:00\"\n",
					"print(topic_accessed_at)"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Check the table history"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"DESCRIBE HISTORY odw_curated_db.employee"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Get the latest changes from CDF and send messages"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"from azure.servicebus import ServiceBusClient, ServiceBusMessage\n",
					"servicebus_client = ServiceBusClient.from_connection_string(conn_str=conn_str, logging_enable=True)\n",
					"\n",
					"try:\n",
					"    cdf_df=(spark.read.format(\"delta\")\n",
					"        .option(\"readChangeFeed\", \"true\")\n",
					"        .option(\"startingTimestamp\", topic_accessed_at)\n",
					"        .table(table_name))\n",
					"    with servicebus_client:\n",
					"        sender = servicebus_client.get_topic_sender(topic_name=topic_name)\n",
					"        with sender:\n",
					"            display(cdf_df)\n",
					"            df_json = cdf_df.toJSON()\n",
					"            row_count=df_json.count()\n",
					"            for row in df_json.collect(): \n",
					"                send_single_message(sender,row)\n",
					"                print(row)\n",
					"            print(\"Sent {} messages.\".format(row_count))\n",
					"\n",
					"except Exception as e:  \n",
					"        print(f\"{e}\") "
				],
				"execution_count": null
			}
		]
	}
}