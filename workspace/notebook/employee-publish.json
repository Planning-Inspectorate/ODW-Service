{
	"name": "employee-publish",
	"properties": {
		"folder": {
			"name": "odw-esb"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodwpr",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "3ff97cdc-6ea1-46e0-9a1b-f6617e2e4b46"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodwpr",
				"name": "pinssynspodwpr",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodwpr",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": false
				},
				"source": [
					"display(spark.read.format(\"delta\") \\\n",
					"  .option(\"readChangeFeed\", \"true\") \\\n",
					"  .option(\"startingVersion\", 1) \\\n",
					"  .option(\"endingVersion\", 10) \\\n",
					"  .table(\"odw_curated_db.employee\"))"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from azure.servicebus import ServiceBusClient, ServiceBusMessage"
				],
				"execution_count": 8
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"CONNECTION_STR = \"\"\n",
					"TOPIC_NAME = \"employee\""
				],
				"execution_count": 9
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def send_single_message(sender):\n",
					"    message = ServiceBusMessage(\"Single Message\")\n",
					"    sender.send_messages(message)"
				],
				"execution_count": 10
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def send_a_list_of_messages(sender):\n",
					"    messages = [ServiceBusMessage(\"Message in list\") for _ in range(10)]\n",
					"    sender.send_messages(messages)"
				],
				"execution_count": 11
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def send_batch_message(sender):\n",
					"    batch_message = sender.create_message_batch()\n",
					"    for _ in range(10):\n",
					"        try:\n",
					"            batch_message.add_message(ServiceBusMessage(\"Message inside ServiceBusMessageBatch\"))\n",
					"        except ValueError:\n",
					"            # ServiceBusMessageBatch object reaches max_size.\n",
					"            # New ServiceBusMessageBatch object can be created here to send more data.\n",
					"            break\n",
					"    sender.send_messages(batch_message)"
				],
				"execution_count": 12
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"servicebus_client = ServiceBusClient.from_connection_string(conn_str=CONNECTION_STR, logging_enable=True)\n",
					"with servicebus_client:\n",
					"    sender = servicebus_client.get_topic_sender(topic_name=TOPIC_NAME)\n",
					"    with sender:\n",
					"        send_single_message(sender)\n",
					"        send_a_list_of_messages(sender)\n",
					"        send_batch_message(sender)\n",
					"\n",
					"print(\"Send message is done.\")"
				],
				"execution_count": 13
			}
		]
	}
}