{
	"name": "py_sb_raw_to_std",
	"properties": {
		"folder": {
			"name": "service-bus"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "7031a952-8e1c-4484-a653-4f79530a09a7"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": true,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw",
				"name": "pinssynspodw",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%run utils/py_logging_decorator"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"tags": [
						"parameters"
					]
				},
				"source": [
					"entity_name='appeal-has'\n",
					"date_folder=''"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"from pyspark.sql import SparkSession\n",
					"from notebookutils import mssparkutils\n",
					"import json\n",
					"from datetime import datetime, date\n",
					"from pyspark.sql.functions import current_timestamp, expr, to_timestamp, lit,input_file_name\n",
					"from pyspark.sql import DataFrame\n",
					"from pyspark.sql.types import StructType,TimestampType\n",
					"from pyspark.sql.functions import *\n",
					"import re\n",
					"from functools import reduce\n",
					"import pprint"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"spark: SparkSession = SparkSession.builder.getOrCreate()\n",
					"storage_account: str = mssparkutils.notebook.run('/utils/py_utils_get_storage_account')\n",
					"table_name: str = f\"odw_standardised_db.sb_{entity_name.replace('-', '_')}\"\n",
					"date_folder = datetime.now().date().strftime('%Y-%m-%d') if date_folder == '' else date_folder\n",
					"source_path: str = f\"abfss://odw-raw@{storage_account}ServiceBus/{entity_name}/\"\n",
					"schema = mssparkutils.notebook.run(\"/py_create_spark_schema\", 30, {\"db_name\": 'odw_standardised_db', \"entity_name\": entity_name})\n",
					"spark_schema = StructType.fromJson(json.loads(schema)) if schema != '' else ''"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%run service-bus/py_spark_df_ingestion_functions"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def get_max_value_from_column(table_name: str, column_name: str) -> datetime:\r\n",
					"    \"\"\"\r\n",
					"    Gets the maximum value from a given table column\r\n",
					"\r\n",
					"    Args:\r\n",
					"        table_name: the name of the table, e.g. sb_appeal_has\r\n",
					"        column_name: the name of the table column, e.g. ingested_datetime\r\n",
					"\r\n",
					"    Returns:\r\n",
					"        max_value: the maximum value from the table column\r\n",
					"    \"\"\"\r\n",
					"    df = spark.table(table_name)\r\n",
					"    max_value = df.agg(max(column_name)).collect()[0][0]\r\n",
					"\r\n",
					"    return max_value"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"def get_max_file_date(df: DataFrame) -> datetime:\r\n",
					"    \"\"\"\r\n",
					"    Gets the maximum date from a file path field in a DataFrame.\r\n",
					"    E.g. if the input_file field contained paths such as this:\r\n",
					"    abfss://odw-raw@pinsstodwdevuks9h80mb.dfs.core.windows.net/ServiceBus/appeal-has/2024-12-02/appeal-has_2024-12-02T16:54:35.214679+0000.json\r\n",
					"    It extracts the date from the string for each row and gets the maximum date.\r\n",
					"\r\n",
					"    Args:\r\n",
					"        df: a spark DataFrame\r\n",
					"\r\n",
					"    Returns:\r\n",
					"        formatted_timestamp: a string of the maximum file date\r\n",
					"    \"\"\"\r\n",
					"    date_pattern: str = r'(\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{6}\\+\\d{4})'\r\n",
					"    df: DataFrame = df.withColumn(\"file_date\", regexp_extract(df[\"input_file\"], date_pattern, 1))\r\n",
					"    df: DataFrame = df.withColumn(\"file_date\", df[\"file_date\"].cast(TimestampType()))\r\n",
					"    max_timestamp: list = df.agg(max(\"file_date\")).collect()[0][0]\r\n",
					"    formatted_timestamp: str = max_timestamp.strftime(\"%Y-%m-%dT%H:%M:%S.%f\")+\"+0000\"\r\n",
					"    return formatted_timestamp"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def get_all_files_recursive(source_path: str) -> list:\r\n",
					"    \"\"\"\r\n",
					"    Lists all files in a given source path.\r\n",
					"    Recursively loops through all directories.\r\n",
					"\r\n",
					"    Args:\r\n",
					"        source_path: the folder path to start from, \r\n",
					"        e.g. abfss://odw-raw@pinsstodwdevuks9h80mb.dfs.core.windows.net/ServiceBus/appeal-has/\r\n",
					"\r\n",
					"    Returns:\r\n",
					"        files: a list of files in the source path.\r\n",
					"    \"\"\"\r\n",
					"    files = []\r\n",
					"    entries = mssparkutils.fs.ls(source_path)\r\n",
					"    \r\n",
					"    for entry in entries:\r\n",
					"        # Check if the entry is a directory\r\n",
					"        if entry.isDir:\r\n",
					"            # Recursively process the directory\r\n",
					"            files.extend(get_all_files_recursive(entry.path))\r\n",
					"        else:\r\n",
					"            # If it's a file, add to the list\r\n",
					"            files.append(entry.path)\r\n",
					"    \r\n",
					"    return files"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"def get_missing_files(table_name: str, source_path: str) -> list:\r\n",
					"    \"\"\"\r\n",
					"    Gets the difference between the files in the source path and the files in the table.\r\n",
					"    Converts the table column \"filename\" into a set.\r\n",
					"    Creates a set containing all the files int he source path.\r\n",
					"    Compares the two sets to give the missing files not yet loaded to the table.\r\n",
					"\r\n",
					"    Args:\r\n",
					"        table_name: the name of the table, e.g. sb_appeal_has\r\n",
					"        source_path: the folder path to start from, \r\n",
					"        e.g. abfss://odw-raw@pinsstodwdevuks9h80mb.dfs.core.windows.net/ServiceBus/appeal-has/\r\n",
					"\r\n",
					"    Returns:\r\n",
					"        missing_files: a list of missing files not yet loaded to the table.\r\n",
					"    \"\"\"\r\n",
					"    df: DataFrame = spark.table(table_name)\r\n",
					"    files_in_path: set = set(get_all_files_recursive(source_path))\r\n",
					"    files_in_table: set = set(df.select(\"input_file\").rdd.flatMap(lambda x: x).collect())\r\n",
					"    missing_files = list(files_in_path - files_in_table)\r\n",
					"\r\n",
					"    return missing_files"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def extract_and_filter_paths(files: list, filter_date: str):\r\n",
					"    \"\"\"\r\n",
					"    Takes a list of file paths and filters them to return the file paths greater than the filter_date\r\n",
					"    \r\n",
					"    Args:\r\n",
					"        files: a list of file paths\r\n",
					"        filter_date: a date to filter on\r\n",
					"\r\n",
					"    Returns:\r\n",
					"        filtered_paths: a list of file paths greater than a given date\r\n",
					"    \"\"\"\r\n",
					"    timestamp_pattern: str = re.compile(r\"(\\d{4}-\\d{2}-\\d{2}T\\d{2}[:_]\\d{2}[:_]\\d{2}[.\\d]*[+-]\\d{4})\")\r\n",
					"    filter_datetime: datetime = datetime.strptime(filter_date, \"%Y-%m-%dT%H:%M:%S.%f%z\")\r\n",
					"    filtered_paths: list = []\r\n",
					"\r\n",
					"    for file in files:\r\n",
					"        match = timestamp_pattern.search(file)\r\n",
					"        if match:\r\n",
					"            timestamp_str = match.group(1).replace('_', ':')\r\n",
					"            file_datetime = datetime.strptime(timestamp_str, \"%Y-%m-%dT%H:%M:%S.%f%z\")\r\n",
					"            if file_datetime > filter_datetime:\r\n",
					"                filtered_paths.append(file)\r\n",
					"\r\n",
					"    return filtered_paths"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"table_df = spark.table(table_name)\r\n",
					"max_extracted_date = get_max_file_date(df=table_df)\r\n",
					"print(f\"max_extracted_date: {max_extracted_date}\")\r\n",
					"filtered_paths = extract_and_filter_paths(get_all_files_recursive(source_path=source_path), max_extracted_date)\r\n",
					"filtered_paths"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"missing = get_missing_files(table_name, source_path)\r\n",
					"missing"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"Reading raw data and adding standardised master columns to the dataframe"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"@logging_to_appins\n",
					"def read_raw_messages(filtered_paths: list[str]) -> DataFrame:\n",
					"    try:\n",
					"        # Read JSON files from filtered paths\n",
					"        df = spark.read.json(filtered_paths, schema=spark_schema)\n",
					"        logInfo(f\"Found {df.count()} new rows.\")\n",
					"        # Adding the standardised columns\n",
					"        df = df.withColumn(\"expected_from\", current_timestamp())\n",
					"        df = df.withColumn(\"expected_to\", expr(\"current_timestamp() + INTERVAL 1 DAY\"))\n",
					"        df = df.withColumn(\"ingested_datetime\", to_timestamp(df.message_enqueued_time_utc))\n",
					"        df = df.withColumn(\"input_file\", input_file_name())\n",
					"\n",
					"    except Exception as e:\n",
					"        logError(f'Raw data not found at {source_path}, Exception is {e}')\n",
					"        mssparkutils.notebook.exit('')\n",
					"\n",
					"    return df"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df: DataFrame = read_raw_messages(missing)"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"display(df)"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"Comparing and altering the table's schema based on the current data's schema"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# logInfo(f\"Comparing and merging schema for {table_name}\")\n",
					"# compare_and_merge_schema(df, table_name)\n",
					"# logInfo(f\"Done comparing and merging schema for {table_name}\")"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"Appending the new dataframe into the existing dataframe and removing duplicates"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"@logging_to_appins\r\n",
					"def dedupe_dataframe(df: DataFrame) -> DataFrame:\r\n",
					"    # removing duplicates while ignoring the ingestion dates columns\r\n",
					"    columns_to_ignore: list = ['expected_to', 'expected_from', 'ingested_datetime']\r\n",
					"    columns_to_consider: list = [c for c in table_df.columns if c not in columns_to_ignore]\r\n",
					"    df: DataFrame = df.dropDuplicates(subset=columns_to_consider)\r\n",
					"    \r\n",
					"    return df\r\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"@logging_to_appins\r\n",
					"def append_df_to_table(df: DataFrame, table_name: str) -> None:\r\n",
					"    \"\"\"\r\n",
					"    Appends the new rows to the target table\r\n",
					"\r\n",
					"    Args:\r\n",
					"        df: DataFrame of new rows\r\n",
					"    \"\"\"\r\n",
					"    df \\\r\n",
					"    .write \\\r\n",
					"    .mode(\"append\") \\\r\n",
					"    .format(\"delta\") \\\r\n",
					"    .option(\"mergeSchema\", \"true\") \\\r\n",
					"    .saveAsTable(table_name)\r\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# @logging_to_appins\n",
					"# def create_dataframe_to_load(df: DataFrame, table_name: str) -> DataFrame:\n",
					"#     table_df: DataFrame = spark.table(table_name)\n",
					"#     df: DataFrame = df.select(table_df.columns)\n",
					"#     table_df: DataFrame = table_df.union(df)\n",
					"\n",
					"#     # removing duplicates while ignoring the ingestion dates columns\n",
					"#     columns_to_ignore: list = ['expected_to', 'expected_from', 'ingested_datetime']\n",
					"#     columns_to_consider: list = [c for c in table_df.columns if c not in columns_to_ignore]\n",
					"#     table_df: DataFrame = table_df.dropDuplicates(subset=columns_to_consider)\n",
					"\n",
					"#     return table_df"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"logInfo(f\"Appending new rows to table {table_name}\")\n",
					"dedupe_dataframe(df=df) \n",
					"append_df_to_table(df=df, table_name=table_name)\n",
					"# table_df: DataFrame = create_dataframe_to_load(df, table_name)\n",
					"# apply_df_to_table(table_df, table_name.split('.')[0], table_name.split('.')[1])\n",
					"# logInfo(f\"Done applying DF to {table_name}\")"
				],
				"execution_count": null
			}
		]
	}
}