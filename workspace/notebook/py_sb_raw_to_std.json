{
	"name": "py_sb_raw_to_std",
	"properties": {
		"folder": {
			"name": "1-odw-raw-to-standardised"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "09bf744f-ef41-48f5-8c13-800fa771358a"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": true,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw",
				"name": "pinssynspodw",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"tags": [
						"parameters"
					]
				},
				"source": [
					"entity_name='appeal-document'"
				],
				"execution_count": 15
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### Get the Storage Account"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"from pyspark.sql import SparkSession\n",
					"from notebookutils import mssparkutils\n",
					"import json\n",
					"import calendar\n",
					"from datetime import datetime, timedelta, date\n",
					"import pandas as pd\n",
					"import os\n",
					"\n",
					"spark = SparkSession.builder.getOrCreate()\n",
					"storage_account=mssparkutils.notebook.run('/utils/py_utils_get_storage_account')\n",
					""
				],
				"execution_count": 1
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### Initialise the parameters"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"today = datetime.now().date().strftime('%Y-%m-%d')\n",
					"source_path = f\"abfss://odw-raw@{storage_account}ServiceBus/{entity_name}/{today}\"\n",
					"\n",
					"print(source_path)\n",
					"df = spark.read.json(source_path)\n",
					"df.show()"
				],
				"execution_count": 18
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"\n",
					"# Read the DataFrame from a table (replace \"table_name\" with your actual table name)\n",
					"df_from_table = spark.table(f\"odw_standardised_db.{entity_name.replace('-', '_')}\")\n",
					"\n",
					"# Compare schemas\n",
					"schema_from_files = df.schema\n",
					"schema_from_table = df_from_table.schema\n",
					"\n",
					"# Check if schemas are equal\n",
					"if schema_from_files == schema_from_table:\n",
					"    print(\"Schemas match.\")\n",
					"else:\n",
					"    print(\"Schemas do not match.\")"
				],
				"execution_count": 14
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### Utility functions"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def get_creation_date(file_path):\n",
					"    statinfo = os.stat(file_path)\n",
					"    modified_date = datetime.fromtimestamp(statinfo.st_mtime)\n",
					"    return datetime.fromtimestamp(statinfo.st_ctime)\n",
					"\n",
					"\n",
					"def get_latest_file(source_path):\n",
					"    jobId = mssparkutils.env.getJobId()\n",
					"    mssparkutils.fs.unmount(\"/temp_raw\") \n",
					"    mssparkutils.fs.mount(source_path, \"/temp_raw\", {\"linkedService\":\"ls_storage\"})   \n",
					"\n",
					"    path = f\"/synfs/{jobId}/temp_raw/\"\n",
					"    fpaths = [path + fd for fd in os.listdir(path)]\n",
					"    \n",
					"    return max(fpaths, key=get_creation_date).replace(path, '')"
				],
				"execution_count": 85
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### Ingest the data from the raw/source into the standardised table. \n",
					"If the table doesn't already exist, this will create the table first and ingest the data."
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"if date_folder == '':\n",
					"    date_folder = datetime.now().date()\n",
					"else:\n",
					"    date_folder = datetime.strptime(date_folder, \"%Y-%m-%d\")\n",
					"\n",
					"date_folder_str = date_folder.strftime('%Y-%m-%d')\n",
					"source_folder_path = source_folder if not source_frequency_folder else f\"{source_folder}/{source_frequency_folder}\"\n",
					"\n",
					"# READ ORCHESTRATION DATA\n",
					"path_to_orchestration_file = \"abfss://odw-config@\"+storage_account+\"orchestration/orchestration.json\"\n",
					"df = spark.read.option(\"multiline\",\"true\").json(path_to_orchestration_file)\n",
					"definitions = json.loads(df.toJSON().first())['definitions']\n",
					"\n",
					"source_path = f\"{raw_container}{source_folder_path}/{date_folder_str}\"\n",
					"\n",
					"\n",
					"files = mssparkutils.fs.ls(source_path)\n",
					"for file in files:\n",
					"\n",
					"    # ignore json raw files if source is service bus\n",
					"    if source_folder == 'ServiceBus' and file.name.endswith('.json'):\n",
					"        continue\n",
					"        \n",
					"    definition = next((d for d in definitions if (specific_file == '' or d['Source_Filename_Start'] == specific_file) and (not source_frequency_folder or d['Source_Frequency_Folder'] == source_frequency_folder) and file.name.startswith(d['Source_Filename_Start'])), None)\n",
					"    \n",
					"    if definition:\n",
					"        expected_from = date_folder - timedelta(days=1)\n",
					"        expected_from = datetime.combine(expected_from, datetime.min.time())\n",
					"        expected_to = expected_from + timedelta(days=definition['Expected_Within_Weekdays']) \n",
					"\n",
					"        if delete_existing_table:\n",
					"            print(f\"Deleting existing table if exists odw_standardised_db.{definition['Standardised_Table_Name']}\")\n",
					"            mssparkutils.notebook.run('/utils/py_delete_table', 300, arguments={'db_name': 'odw_standardised_db', 'table_name': definition['Standardised_Table_Name']})\n",
					"\n",
					"        print(f\"Ingesting {file.name}\")\n",
					"        ingest_adhoc(storage_account, definition, source_path, file.name, expected_from, expected_to)\n",
					""
				],
				"execution_count": 86
			}
		]
	}
}