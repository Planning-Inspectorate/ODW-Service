{
	"name": "py_sb_raw_to_std",
	"properties": {
		"folder": {
			"name": "1-odw-raw-to-standardised"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "6e6f2d3c-d641-4f71-b316-1e4e7d522802"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": true,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw",
				"name": "pinssynspodw",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"tags": [
						"parameters"
					]
				},
				"source": [
					"entity_name=''"
				],
				"execution_count": 104
			},
			{
				"cell_type": "code",
				"source": [
					"from pyspark.sql import SparkSession\n",
					"from notebookutils import mssparkutils\n",
					"import json\n",
					"from datetime import datetime, date\n",
					"from pyspark.sql.functions import current_timestamp, expr, to_timestamp, lit\n",
					"\n",
					"spark = SparkSession.builder.getOrCreate()\n",
					"storage_account = mssparkutils.notebook.run('/utils/py_utils_get_storage_account')\n",
					"table_name = f\"odw_standardised_db.{entity_name.replace('-', '_')}\""
				],
				"execution_count": 105
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"today = datetime.now().date().strftime('%Y-%m-%d')\n",
					"source_path = f\"abfss://odw-raw@{storage_account}ServiceBus/{entity_name}/{today}\"\n",
					"\n",
					"try: \n",
					"    df = spark.read.option(\"multiLine\", True).json(source_path)\n",
					"    print(f\"Found {df.count()} new rows.\")\n",
					"\n",
					"    # adding the standardised columns\n",
					"    df = df.withColumn(\"expected_from\", current_timestamp())\n",
					"    df = df.withColumn(\"expected_to\", expr(\"current_timestamp() + INTERVAL 1 DAY\"))\n",
					"    df = df.withColumn(\"ingested_datetime\", to_timestamp(df['message_enqueued_time_utc'], \"yyyy-MM-dd HH:mm:ss\"))\n",
					"\n",
					"except Exception as e:\n",
					"    print('Raw data not found at ', source_path, e)\n",
					"    mssparkutils.notebook.exit({'new_rows': 0})"
				],
				"execution_count": 106
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def compare_schemas(schema1, schema2):\n",
					"    fields1 = set((field.name, field.dataType) for field in schema1.fields)\n",
					"    fields2 = set((field.name, field.dataType) for field in schema2.fields) # can add field.nullable for more accuracy\n",
					"    \n",
					"    in_schema1_not_in_schema2 = fields1 - fields2\n",
					"    in_schema2_not_in_schema1 = fields2 - fields1\n",
					"    \n",
					"    return in_schema1_not_in_schema2, in_schema2_not_in_schema1"
				],
				"execution_count": 107
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def apply_df_to_table(df, table_name):\n",
					"\n",
					"    # Write the DataFrame with the new column to a new temporary table\n",
					"    temp_table_name = \"odw_standardised_db.temp_table\"\n",
					"    df.write.mode(\"overwrite\").saveAsTable(temp_table_name)\n",
					"\n",
					"    # Drop the original table\n",
					"    spark.sql(f\"DROP TABLE IF EXISTS {table_name}\")\n",
					"\n",
					"    # Rename the temporary table to replace the original table\n",
					"    spark.sql(f\"ALTER TABLE {temp_table_name} RENAME TO {table_name}\")"
				],
				"execution_count": 108
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"table_df = spark.table(table_name)\n",
					"\n",
					"# Compare schemas\n",
					"in_current_schema_not_in_existing_schema, in_existing_schema_not_in_current_schema = compare_schemas(df.schema, table_df.schema)\n",
					"\n",
					"if in_current_schema_not_in_existing_schema or in_existing_schema_not_in_current_schema:\n",
					"    print(\"Schemas do not match.\")\n",
					"\n",
					"    # adding new columns in the existing table\n",
					"    for item in in_current_schema_not_in_existing_schema:\n",
					"        print(f\"Adding new column '{item[0]}' of type '{item[1]}' in {table_name} since it's not in the table's schema\")\n",
					"        table_df = table_df.withColumn(item[0], lit(None).cast(item[1]))\n",
					"\n",
					"    # removing columns from the existing table that are not in the new df\n",
					"    for item in in_existing_schema_not_in_current_schema:\n",
					"        print(f\"Removing column '{item[0]}' from {table_name} since it's not in the table's schema\")\n",
					"        table_df = table_df.drop(item[0])\n",
					"    \n",
					"    apply_df_to_table(table_df, table_name)\n",
					"\n",
					"else:\n",
					"    print(\"Schemas match.\")"
				],
				"execution_count": 109
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"print(f\"Ingesting {df.count()} rows\")\n",
					"df.write.mode(\"append\").saveAsTable(table_name)\n",
					"mssparkutils.notebook.exit({'new_rows': df.count()})"
				],
				"execution_count": 110
			}
		]
	}
}