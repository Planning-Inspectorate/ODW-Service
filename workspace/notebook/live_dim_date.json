{
	"name": "live_dim_date",
	"properties": {
		"folder": {
			"name": "odw-harmonised"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "eaf503c4-3f48-4b57-be26-c4a3b4b76474"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw",
				"name": "pinssynspodw",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#### Entity Name : live_dim_date\n",
					"###### Author: Prathap A\n",
					"###### Date: 25/02/2025\n",
					"\n",
					"###### version : 0001\n",
					"###### <u>Description</u>:\n",
					"This Notebook is designed to facilitate the dimension table. It includes steps for initializing the environment, creating and managing Delta tables, and inserting data into harmonized tables. The template ensures that dimension table is accurately transformed, stored, and made available for reporting and analysis."
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"\n",
					"\n",
					"delete from  odw_harmonised_db.live_dim_date;\n",
					"\n",
					"-- Step 2: Create a temporary view for the date range\n",
					"CREATE OR REPLACE TEMPORARY VIEW cte_dates AS\n",
					"SELECT explode(sequence(to_date('2000-01-01'), date_add(current_date(), 1460), interval 1 day)) AS calendar_date;\n",
					"\n",
					"-- Step 3: Insert into live.dim_date\n",
					"INSERT INTO odw_harmonised_db.live_dim_date\n",
					"(\n",
					"\n",
					" dim_date_key,\n",
					"    date,\n",
					"    day_int,\n",
					"    day_name,\n",
					"    month_int,\n",
					"    first_of_month,\n",
					"    month_name,\n",
					"    week_int,\n",
					"    iso_week_int,\n",
					"    day_of_week_int,\n",
					"    quarter_int,\n",
					"    quarter_name,\n",
					"    year_int,\n",
					"    first_of_year,\n",
					"    week_ending_date,\n",
					"    financial_year,\n",
					"    FY_yyyy,\n",
					"    week_ending_year,\n",
					"    week_ending_quarter_int,\n",
					"    week_ending_quarter_name,\n",
					"    week_ending_month_int,\n",
					"    week_ending_month_name,\n",
					"    week_ending_day,\n",
					"    MonthYearSortKey,\n",
					"    MonthYear,\n",
					"    FY,\n",
					"    FY_Latest,\n",
					"    FY_MonthYearLatest,\n",
					"    FY_Quarter,\n",
					"    FY_Latest_SortKey,\n",
					"    week_starting_date\n",
					")\n",
					"SELECT\n",
					"    DATE_FORMAT(calendar_date, 'yyyyMMdd') AS dim_date_key,\n",
					"    calendar_date AS date,\n",
					"    DAY(calendar_date) AS day_int,\n",
					"    DATE_FORMAT(calendar_date, 'E') AS day_name,\n",
					"    MONTH(calendar_date) AS month_int,\n",
					"    DATE_TRUNC('MM', calendar_date) AS first_of_month,\n",
					"    DATE_FORMAT(calendar_date, 'MMM') AS month_name,\n",
					"    WEEKOFYEAR(calendar_date) AS week_int,\n",
					"    WEEKOFYEAR(calendar_date) AS iso_week_int,\n",
					"    DAYOFWEEK(calendar_date) AS day_of_week_int,\n",
					"    QUARTER(calendar_date) AS quarter_int,\n",
					"    CONCAT('Q', QUARTER(calendar_date)) AS quarter_name,\n",
					"    YEAR(calendar_date) AS year_int,\n",
					"    DATE_TRUNC('YYYY', calendar_date) AS first_of_year,\n",
					"    DATE_ADD(calendar_date, 6 - DAYOFWEEK(calendar_date)) AS week_ending_date,\n",
					"    CASE \n",
					"        WHEN CURRENT_DATE() >= DATE_ADD(DATE_TRUNC('YYYY', CURRENT_DATE()), 90) THEN\n",
					"            CASE \n",
					"                WHEN MONTH(calendar_date) > 3 AND YEAR(calendar_date) = YEAR(CURRENT_DATE()) THEN 'Current'\n",
					"                WHEN MONTH(calendar_date) <= 3 AND YEAR(calendar_date) = YEAR(CURRENT_DATE()) + 1 THEN 'Current'\n",
					"                WHEN MONTH(calendar_date) > 3 AND YEAR(calendar_date) = YEAR(CURRENT_DATE()) - 1 THEN 'Previous'\n",
					"                WHEN MONTH(calendar_date) <= 3 AND YEAR(calendar_date) = YEAR(CURRENT_DATE()) THEN 'Previous'\n",
					"                ELSE NULL\n",
					"            END\n",
					"        ELSE NULL\n",
					"    END AS financial_year,\n",
					"    CASE \n",
					"        WHEN MONTH(calendar_date) > 3 THEN YEAR(calendar_date)\n",
					"        ELSE YEAR(calendar_date) - 1\n",
					"    END AS FY_yyyy,\n",
					"    YEAR(DATE_ADD(calendar_date, 6 - DAYOFWEEK(calendar_date))) AS week_ending_year,\n",
					"    QUARTER(DATE_ADD(calendar_date, 6 - DAYOFWEEK(calendar_date))) AS week_ending_quarter_int,\n",
					"    CONCAT('Q', QUARTER(DATE_ADD(calendar_date, 6 - DAYOFWEEK(calendar_date)))) AS week_ending_quarter_name,\n",
					"    MONTH(DATE_ADD(calendar_date, 6 - DAYOFWEEK(calendar_date))) AS week_ending_month_int,\n",
					"    DATE_FORMAT(DATE_ADD(calendar_date, 6 - DAYOFWEEK(calendar_date)), 'MMM') AS week_ending_month_name,\n",
					"    DAY(DATE_ADD(calendar_date, 6 - DAYOFWEEK(calendar_date))) AS week_ending_day,\n",
					"    DATE_FORMAT(calendar_date, 'yyyyMM') AS MonthYearSortKey,\n",
					"    CONCAT(DATE_FORMAT(calendar_date, 'MMM'), ' - ', RIGHT(DATE_FORMAT(calendar_date, 'yyyy'), 2)) AS MonthYear,\n",
					"    CONCAT(CAST(\n",
					"        CASE\n",
					"            WHEN MONTH(calendar_date) > 3 THEN YEAR(calendar_date)\n",
					"            ELSE YEAR(calendar_date) - 1\n",
					"        END AS STRING), '-', RIGHT(CAST(\n",
					"        CASE\n",
					"            WHEN MONTH(calendar_date) > 3 THEN YEAR(calendar_date) + 1\n",
					"            ELSE YEAR(calendar_date)\n",
					"        END AS STRING), 2)) AS FY,\n",
					"    CASE\n",
					"        WHEN CURRENT_DATE() >= DATE_ADD(DATE_TRUNC('YYYY', CURRENT_DATE()), 90) THEN\n",
					"            CASE\n",
					"                WHEN MONTH(calendar_date) > 3 AND YEAR(calendar_date) = YEAR(CURRENT_DATE()) THEN 'Current'\n",
					"                WHEN MONTH(calendar_date) <= 3 AND YEAR(calendar_date) = YEAR(CURRENT_DATE()) + 1 THEN 'Current'\n",
					"                WHEN MONTH(calendar_date) > 3 AND YEAR(calendar_date) = YEAR(CURRENT_DATE()) - 1 THEN 'Previous'\n",
					"                WHEN MONTH(calendar_date) <= 3 AND YEAR(calendar_date) = YEAR(CURRENT_DATE()) THEN 'Previous'\n",
					"                ELSE NULL\n",
					"            END\n",
					"        ELSE NULL\n",
					"    END AS FY_Latest,\n",
					"    CASE\n",
					"        WHEN MONTH(calendar_date) = MONTH(CURRENT_DATE()) AND YEAR(calendar_date) = YEAR(CURRENT_DATE()) THEN 'Current'\n",
					"        WHEN MONTH(calendar_date) = 12 AND MONTH(CURRENT_DATE()) = 1 AND YEAR(calendar_date) = YEAR(CURRENT_DATE()) - 1 THEN 'Previous'\n",
					"        WHEN MONTH(calendar_date) = MONTH(CURRENT_DATE()) - 1 AND YEAR(calendar_date) = YEAR(CURRENT_DATE()) THEN 'Previous'\n",
					"        ELSE CONCAT(DATE_FORMAT(calendar_date, 'MMM'), ' - ', RIGHT(DATE_FORMAT(calendar_date, 'yyyy'), 2))\n",
					"    END AS FY_MonthYearLatest,\n",
					"    CASE\n",
					"        WHEN MONTH(calendar_date) IN (4, 5, 6) THEN 'Q1'\n",
					"        WHEN MONTH(calendar_date) IN (7, 8, 9) THEN 'Q2'\n",
					"        WHEN MONTH(calendar_date) IN (10, 11, 12) THEN 'Q3'\n",
					"        WHEN MONTH(calendar_date) IN (1, 2, 3) THEN 'Q4'\n",
					"    END AS FY_Quarter,\n",
					"    (CASE\n",
					"        WHEN MONTH(calendar_date) > 3 THEN YEAR(calendar_date)\n",
					"        ELSE YEAR(calendar_date) - 1\n",
					"    END) * -1 AS FY_Latest_SortKey,\n",
					"    DATE_ADD(DATE_ADD(calendar_date, 6 - DAYOFWEEK(calendar_date)), -6) AS week_starting_date\n",
					"FROM\n",
					"    cte_dates;"
				],
				"execution_count": 5
			}
		]
	}
}