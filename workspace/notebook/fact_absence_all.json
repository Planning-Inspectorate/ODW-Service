{
	"name": "fact_absence_all",
	"properties": {
		"folder": {
			"name": "odw-harmonised"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "94f8189e-a1d7-4602-953a-6c9222029ca3"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw",
				"name": "pinssynspodw",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"from pyspark.sql.functions import udf\n",
					"from pyspark.sql.types import DateType\n",
					"from datetime import datetime\n",
					"from delta.tables import DeltaTable\n",
					"from pyspark.sql import Window\n",
					"from pyspark.sql.functions import row_number\n",
					"from pyspark.sql.types import StructType, StructField, TimestampType, StringType"
				],
				"execution_count": 6
			},
			{
				"cell_type": "code",
				"source": [
					"spark.sql(\"\"\"\n",
					"CREATE TABLE IF NOT EXISTS odw_harmonised_db.fact_absence_all (\n",
					"        absence_date                STRING,\n",
					"        absence_hours               FLOAT,\n",
					"        staff_number                STRING,\n",
					"        WorkSchedule_Rule           STRING,\n",
					"        AbsType                     STRING,\n",
					"        SicknessGroup               STRING,\n",
					"        AttendanceorAbsence_Type    STRING,\n",
					"        Leave                       FLOAT ,\n",
					"        PSGroup                     STRING,\n",
					"        PersonnelArea               STRING,\n",
					"        PersonnelSubarea            STRING\n",
					"         )\n",
					"USING DELTA\n",
					"\"\"\")"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Required Function \n",
					""
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"editable": false,
					"run_control": {
						"frozen": true
					}
				},
				"source": [
					"import pyodbc\n",
					"\n",
					"# Define the database connection\n",
					"conn = pyodbc.connect('DRIVER={ODBC Driver 17 for SQL Server};SERVER=<server_name>;DATABASE=<database_name>;UID=<username>;PWD=<password>')\n",
					"\n",
					"def get_working_hours2(sched, date):\n",
					"    cursor = conn.cursor()\n",
					"    \n",
					"    # SQL query to get working hours\n",
					"    query = \"\"\"\n",
					"    SELECT \n",
					"        CASE WHEN [DoW] = 2 THEN Mo\n",
					"             WHEN [DoW] = 3 THEN Tu\n",
					"             WHEN [DoW] = 4 THEN We\n",
					"             WHEN [DoW] = 5 THEN Th\n",
					"             WHEN [DoW] = 6 THEN Fr\n",
					"             ELSE 0 END AS working_hours\n",
					"    FROM (\n",
					"        SELECT \n",
					"            CAST(Mo AS NUMERIC(4,2)) AS [Mo],\n",
					"            CAST(Tu AS NUMERIC(4,2)) AS [Tu],\n",
					"            CAST(We AS NUMERIC(4,2)) AS [We],\n",
					"            CAST(Th AS NUMERIC(4,2)) AS [Th],\n",
					"            CAST(Fr AS NUMERIC(4,2)) AS [Fr],\n",
					"            DATEPART(dw, ?) AS [DoW]\n",
					"        FROM sap_hr.work_schedules\n",
					"        WHERE [Work Schedule Rule] = ?\n",
					"    ) AS p\n",
					"    \"\"\"\n",
					"    \n",
					"    # Execute the query with parameters\n",
					"    cursor.execute(query, date, sched)\n",
					"    result = cursor.fetchone()\n",
					"    \n",
					"    # Return the working hours or 0 if no result\n",
					"    if result:\n",
					"        return result[0]\n",
					"    else:\n",
					"        return 0\n",
					"\n",
					"# Example usage\n",
					"sched = 'M0T305W610T610F305'  # Example schedule\n",
					"date = '2023-02-25'  # Example date\n",
					"working_hours = get_working_hours2(sched, date)\n",
					"print(f'Working hours for schedule {sched} on {date}: {working_hours}')"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"-- Truncate the fact tables\n",
					"DELETE FROM odw_harmonised_db.fact_absence_all_TEMP;\n",
					"DELETE FROM odw_harmonised_db.fact_absence_all;\n",
					"\n",
					"DECLARE @sdate DATE,\n",
					"        @edate DATE,\n",
					"        @stime DATETIME,\n",
					"        @etime DATETIME,\n",
					"        @empid INT,\n",
					"        @abs_type VARCHAR(25),\n",
					"        @sched VARCHAR(25),\n",
					"        @sick_grp VARCHAR(25),\n",
					"        @atten_abs_type VARCHAR(25),\n",
					"        @days FLOAT,\n",
					"        @hrs FLOAT,\n",
					"        @cal_days FLOAT;\n",
					"\n",
					"-- Create a temporary table to hold absence data\n",
					"CREATE TABLE #leave (\n",
					"    abs_date DATE,\n",
					"    Staff_Number INT,\n",
					"    Work_Schedule_Rule VARCHAR(50),\n",
					"    Abs_Type VARCHAR(50),\n",
					"    Sickness_Group VARCHAR(50),\n",
					"    Attendance_or_Absence_Type VARCHAR(50),\n",
					"    Hrs FLOAT,\n",
					"    Hrs_Day FLOAT,\n",
					"    Leave FLOAT,\n",
					"    Days FLOAT,\n",
					"    start_time DATETIME,\n",
					"    end_time DATETIME\n",
					");\n",
					"\n",
					"-- Insert absence data into a temporary table\n",
					"INSERT INTO #leave (abs_date, Staff_Number, Work_Schedule_Rule, Hrs, Days, start_time, end_time)\n",
					"SELECT \n",
					"    StartDate AS abs_date,\n",
					"    StaffNumber,\n",
					"    WorkScheduleRule,\n",
					"    --ISNULL(sap_hr.get_working_hours2([Work Schedule Rule], [StartDate]), 0) AS leave_hrs,\n",
					"    ISNULL(StartDate,0) AS leave_hrs, \n",
					"    Days,\n",
					"    Start AS start_time,\n",
					"    End time AS end_time\n",
					"FROM sap_hr.absence_all\n",
					"WHERE StaffNumber IS NOT NULL;\n",
					"\n",
					"-- Loop through each absence period\n",
					"WHILE EXISTS (SELECT 1 FROM #leave WHERE abs_date <= @edate)\n",
					"BEGIN\n",
					"    -- Update the temporary leave table with calculated values\n",
					"    UPDATE T1\n",
					"    SET \n",
					"        Attendance_or_Absence_Type = T2.Attendance_or_Absence_Type,\n",
					"        Abs_Type = T2.Abs_Type,\n",
					"        Sickness_Group = T2.Sickness_Group,\n",
					"        Hrs = CASE \n",
					"                WHEN T1.Days BETWEEN 0.01 AND 0.99 THEN \n",
					"                    CASE DATEPART(dw, T1.abs_date)\n",
					"                        WHEN 2 THEN (ws.Mo) * (T1.Days)\n",
					"                        WHEN 3 THEN (ws.Tu) * (T1.Days)\n",
					"                        WHEN 4 THEN (ws.We) * (T1.Days)\n",
					"                        WHEN 5 THEN (ws.Th) * (T1.Days)\n",
					"                        WHEN 6 THEN (ws.Fr) * (T1.Days)\n",
					"                        ELSE 0\n",
					"                    END\n",
					"                ELSE \n",
					"                    CASE DATEPART(dw, T1.abs_date)\n",
					"                        WHEN 2 THEN ws.Mo\n",
					"                        WHEN 3 THEN ws.Tu\n",
					"                        WHEN 4 THEN ws.We\n",
					"                        WHEN 5 THEN ws.Th\n",
					"                        WHEN 6 THEN ws.Fr\n",
					"                        ELSE 0\n",
					"                    END\n",
					"              END,\n",
					"        Leave = CASE \n",
					"                    WHEN T2.Abs_Type IN ('CB01', 'MT01') AND T2.Days = 0 THEN 1\n",
					"                    ELSE 1\n",
					"                END\n",
					"    FROM #leave T1\n",
					"    LEFT JOIN sap_hr.absence_all T2 ON T1.Staff_Number = T2.[Staff Number]\n",
					"    LEFT JOIN sap_hr.work_schedules ws ON T1.Work_Schedule_Rule = ws.[Work Schedule Rule]\n",
					"    WHERE T1.abs_date BETWEEN T2.[Start Date] AND T2.[End Date];\n",
					"\n",
					"    -- Insert into the fact table\n",
					"    INSERT INTO sap_hr.fact_absence_all_TEMP (absence_date, absence_hours, staff_number, Work_Schedule_Rule, Abs_Type, Sickness_Group, Attendance_or_Absence_Type, Leave)\n",
					"    SELECT  \n",
					"        abs_date,\n",
					"        Hrs,\n",
					"        CASE LEFT(CAST(Staff_Number AS VARCHAR(10)), 1)\n",
					"            WHEN '4' THEN '50' + CAST(Staff_Number AS VARCHAR(10))\n",
					"            WHEN '5' THEN '00' + CAST(Staff_Number AS VARCHAR(10))\n",
					"            WHEN '6' THEN '60' + CAST(Staff_Number AS VARCHAR(10))\n",
					"        END AS staff_number,\n",
					"        Work_Schedule_Rule,\n",
					"        Abs_Type,\n",
					"        Sickness_Group,\n",
					"        Attendance_or_Absence_Type,\n",
					"        ROUND(Leave, 2) AS leave\n",
					"    FROM #leave;\n",
					"\n",
					"    -- Clear the temporary table for the next iteration\n",
					"    DELETE FROM #leave;\n",
					"END;\n",
					"\n",
					"-- Clean up\n",
					"DROP TABLE #leave;\n",
					"\n",
					"-- Insert into the final fact table\n",
					"WITH Duplicate_CTE AS (\n",
					"    SELECT *, \n",
					"           ROW_NUMBER() OVER(PARTITION BY absence_date, staff_number ORDER BY \n",
					"           CASE WHEN Attendance_or_Absence_Type = 'NA Time (Inspectors)' THEN 0 ELSE 1 END DESC) AS Rno\n",
					"    FROM sap_hr.fact_absence_all_TEMP\n",
					")\n",
					"INSERT INTO sap_hr.fact_absence_all\n",
					"SELECT absence_date, absence_hours, staff_number, Work_Schedule_Rule, Abs_Type, Sickness_Group, Attendance_or_Absence_Type, Leave\n",
					"FROM Duplicate_CTE\n",
					"WHERE RNO = 1;\n",
					"\n",
					"-- Delete rows for staff_numbers not in SAP_HR data history\n",
					"DELETE FROM sap_hr.fact_absence_all \n",
					"WHERE staff_number IN ('50410587', '50422294');\n",
					"\n",
					"-- Update Group/Area/Subarea columns\n",
					"WITH abs_ AS (\n",
					"    SELECT *\n",
					"    FROM sap_hr.fact_absence_all a\n",
					"),\n",
					"future AS (\n",
					"    SELECT \n",
					"        Pers#No#, \n",
					"        [PS Group], \n",
					"        [Personnel Area], \n",
					"        [Personnel Subarea],\n",
					"        Report_MonthEnd_Date\n",
					"    FROM load.SAP_HR\n",
					")\n",
					"UPDATE a\n",
					"SET \n",
					"    [PS Group] = h.[PS Group],\n",
					"    [Personnel Area] = h.[Personnel Area],\n",
					"    [Personnel Subarea] = h.[Personnel Subarea]\n",
					"FROM abs_ a \n",
					"INNER JOIN future h ON a.staff_number = h.Pers#No#\n",
					"WHERE a.absence_date >= DATEADD(m, -1, DATEADD(d, 1, h.Report_MonthEnd_Date));\n",
					"\n",
					"-- Update past records\n",
					"WITH abs_ AS (\n",
					"    SELECT *\n",
					"    FROM sap_hr.fact_absence_all a\n",
					"),\n",
					"past AS (\n",
					"    SELECT \n",
					"        Pers#No#, \n",
					"        [PS Group], \n",
					"        [Personnel Area],\n",
					"        [Personnel Subarea], \n",
					"        DATEADD(m, -1, DATEADD(d, 1, Report_MonthEnd_Date)) AS Report_MonStart_Date,\n",
					"        Report_MonthEnd_Date\n",
					"    FROM Hist.SAP_HR\n",
					"    WHERE Report_MonthEnd_Date < (SELECT MAX(Report_MonthEnd_Date) FROM Hist.SAP_HR)\n",
					")\n",
					"UPDATE a\n",
					"SET \n",
					"    [PS Group] = p.[PS Group],\n",
					"    [Personnel Area] = p.[Personnel Area],\n",
					"    [Personnel Subarea] = p.[Personnel Subarea]\n",
					"FROM abs_ a \n",
					"LEFT JOIN past p ON a.staff_number = p.Pers#No#\n",
					"WHERE a.absence_date BETWEEN p.Report_MonStart_Date AND p.Report_MonthEnd_Date;"
				],
				"execution_count": null
			}
		]
	}
}