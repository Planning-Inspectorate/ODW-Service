{
	"name": "fact_absence_all",
	"properties": {
		"folder": {
			"name": "odw-harmonised"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "3605808e-94d9-49ff-8146-906b28afa57b"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw",
				"name": "pinssynspodw",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"from pyspark.sql.functions import udf\n",
					"from pyspark.sql.types import DateType\n",
					"from datetime import datetime\n",
					"from delta.tables import DeltaTable\n",
					"from pyspark.sql import Window\n",
					"from pyspark.sql.functions import row_number\n",
					"from pyspark.sql.types import StructType, StructField, TimestampType, StringType"
				],
				"execution_count": 77
			},
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"drop table odw_harmonised_db.fact_absence_all"
				],
				"execution_count": 78
			},
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"drop table odw_harmonised_db.fact_absence_all_TEMP"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"spark.sql(\"\"\"\n",
					"CREATE TABLE IF NOT EXISTS odw_harmonised_db.fact_absence_all (\n",
					"        absence_date                STRING,\n",
					"        absence_hours               FLOAT,\n",
					"        staffnumber                STRING,\n",
					"        WorkScheduleRule           STRING,\n",
					"        AbsType                     STRING,\n",
					"        SicknessGroup               STRING,\n",
					"        AttendanceorAbsenceType    STRING,\n",
					"        Leave                       FLOAT ,\n",
					"        PSGroup                     STRING,\n",
					"        PersonnelArea               STRING,\n",
					"        PersonnelSubarea            STRING\n",
					"         )\n",
					"USING DELTA\n",
					"\"\"\")"
				],
				"execution_count": 80
			},
			{
				"cell_type": "code",
				"source": [
					"spark.sql(\"\"\"\n",
					"CREATE TABLE IF NOT EXISTS odw_harmonised_db.fact_absence_all_TEMP (\n",
					"        absence_date                STRING,\n",
					"        absence_hours               FLOAT,\n",
					"        staffnumber                STRING,\n",
					"        WorkScheduleRule           STRING,\n",
					"        AbsType                     STRING,\n",
					"        SicknessGroup               STRING,\n",
					"        AttendanceorAbsenceType    STRING,\n",
					"        Leave                       FLOAT ,\n",
					"        PSGroup                     STRING,\n",
					"        PersonnelArea               STRING,\n",
					"        PersonnelSubarea            STRING\n",
					"         )\n",
					"USING DELTA\n",
					"\"\"\")"
				],
				"execution_count": 81
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Required Function \n",
					""
				]
			},
			{
				"cell_type": "code",
				"source": [
					"from pyspark.sql import SparkSession\n",
					"from pyspark.sql.functions import col, expr, dayofweek\n",
					"\n",
					"# Create Spark session\n",
					"spark = SparkSession.builder.appName(\"WorkingHours\").getOrCreate()\n",
					"\n",
					"def get_working_hours2(sched, date):\n",
					"    # Read the work schedules table from the Lakehouse\n",
					"    work_schedules_df = spark.sql(\"SELECT * FROM odw_standardised_db.work_schedules\")\n",
					"\n",
					"    # Prepare a DataFrame with the day of the week\n",
					"    dow_df = spark.createDataFrame([(date,)], [\"date\"])\n",
					"    dow_df = dow_df.withColumn(\"dow\", dayofweek(col(\"date\")))\n",
					"\n",
					"    # Get the day of the week value\n",
					"    dow_value = dow_df.first()[\"dow\"]\n",
					"\n",
					"    # Filter the DataFrame based on the Schedule Rule and select working hours\n",
					"    result_df = work_schedules_df.filter(col(\"WorkScheduleRule\") == sched).select(\n",
					"        expr(f\"\"\"\n",
					"            CASE\n",
					"                WHEN {dow_value} = 1 THEN Mo  -- Sunday\n",
					"                WHEN {dow_value} = 2 THEN Tu  -- Monday\n",
					"                WHEN {dow_value} = 3 THEN We  -- Tuesday\n",
					"                WHEN {dow_value} = 4 THEN Th  -- Wednesday\n",
					"                WHEN {dow_value} = 5 THEN Fr  -- Thursday\n",
					"                -- Excluding Saturday since there is no 'Sa' column\n",
					"                ELSE 0\n",
					"            END AS working_hours\n",
					"        \"\"\")\n",
					"    )\n",
					"\n",
					"    # Collect the result\n",
					"    result = result_df.first()\n",
					"\n",
					"    return result.working_hours if result else 0\n",
					"\n",
					"# Example usage\n",
					"#sched = 'M0T305W610T610F305'  # Example schedule\n",
					"#date = '2023-02-25'  # Example date\n",
					"#working_hours = get_working_hours2(sched, date)\n",
					"#print(f'Working hours for schedule {sched} on {date}: {working_hours}')"
				],
				"execution_count": 82
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# xxxx"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"editable": false,
					"run_control": {
						"frozen": true
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"    --- Truncate temporary and final tables\n",
					"        delete from odw_harmonised_db.fact_absence_all_TEMP;\n",
					"        delete from odw_harmonised_db.fact_absence_all;\n",
					"\n",
					"        -- Step 1: Generate a sequence of numbers using a recursive CTE\n",
					"        WITH Numbers AS (\n",
					"            SELECT 0 AS n\n",
					"            UNION ALL\n",
					"            SELECT n + 1\n",
					"            FROM Numbers\n",
					"            WHERE n < 1000                 ----- Adjust this number based on the maximum number of days we need for this organisation\n",
					"        ),\n",
					"        -- Step 2: Expand absence records into individual days\n",
					"        AbsenceDays AS (\n",
					"            SELECT\n",
					"                StaffNumber,\n",
					"                WorkScheduleRule,\n",
					"                AbsType,\n",
					"                SicknessGroup,\n",
					"                AttendanceorAbsenceType,\n",
					"                StartDate,\n",
					"                EndDate,\n",
					"                Days,\n",
					"                Hrs,\n",
					"                Caldays AS cal_days,\n",
					"                DATEADD(DAY, n.n, StartDate) AS abs_date\n",
					"            FROM\n",
					"                odw_harmonised_db.absence_all\n",
					"            CROSS JOIN\n",
					"                Numbers n\n",
					"            WHERE\n",
					"                n.n <= DATEDIFF(DAY, StartDate, EndDate)\n",
					"                AND AttendanceorAbsenceType = 'Sickness' -- Filter for sickness absences\n",
					"        ),\n",
					"        -- Step 3: Calculate working hours and leave details\n",
					"        ProcessedAbsence AS (\n",
					"            SELECT\n",
					"                ad.abs_date,\n",
					"                ad.StaffNumber,\n",
					"                ad.WorkScheduleRule,\n",
					"                ad.AbsType,\n",
					"                ad.SicknessGroup,\n",
					"                ad.AttendanceorAbsenceType,\n",
					"                ad.Days,\n",
					"                ad.Hrs,\n",
					"                ad.cal_days,\n",
					"                ISNULL(sap_hr.get_working_hours2(ad.WorkScheduleRule, ad.abs_date), 0) AS leave_hrs,\n",
					"                ws.Mo,\n",
					"                ws.Tu,\n",
					"                ws.We,\n",
					"                ws.Th,\n",
					"                ws.Fr\n",
					"            FROM\n",
					"                AbsenceDays ad\n",
					"            LEFT JOIN\n",
					"                odw_standardised_db.work_schedules ws ON ad.WorkScheduleRule = ws.WorkScheduleRule\n",
					"            WHERE\n",
					"                DATEPART(dw, ad.abs_date) BETWEEN 2 AND 6 -- Weekdays only\n",
					"        ),\n",
					"        -- Step 4: Calculate absence hours and leave\n",
					"        FinalAbsence AS (\n",
					"            SELECT\n",
					"                abs_date AS absence_date,\n",
					"                CASE\n",
					"                    WHEN Days BETWEEN 0.01 AND 0.99 THEN\n",
					"                        CASE DATEPART(dw, abs_date)\n",
					"                            WHEN 2 THEN Mo * Days\n",
					"                            WHEN 3 THEN Tu * Days\n",
					"                            WHEN 4 THEN We * Days\n",
					"                            WHEN 5 THEN Th * Days\n",
					"                            WHEN 6 THEN Fr * Days\n",
					"                            ELSE 0\n",
					"                        END\n",
					"                    ELSE\n",
					"                        CASE DATEPART(dw, abs_date)\n",
					"                            WHEN 2 THEN Mo\n",
					"                            WHEN 3 THEN Tu\n",
					"                            WHEN 4 THEN We\n",
					"                            WHEN 5 THEN Th\n",
					"                            WHEN 6 THEN Fr\n",
					"                            ELSE 0\n",
					"                        END\n",
					"                END AS absence_hours,\n",
					"                CASE LEFT(CAST(StaffNumber AS VARCHAR(10)), 1)\n",
					"                    WHEN '4' THEN '50' + CAST(StaffNumber AS VARCHAR(10))\n",
					"                    WHEN '5' THEN '00' + CAST(StaffNumber AS VARCHAR(10))\n",
					"                    WHEN '6' THEN '60' + CAST(StaffNumber AS VARCHAR(10))\n",
					"                    ELSE CAST(StaffNumber AS VARCHAR(10))\n",
					"                END AS staff_number,\n",
					"                WorkScheduleRule,\n",
					"                AbsType,\n",
					"                SicknessGroup,\n",
					"                AttendanceorAbsenceType,\n",
					"                CASE\n",
					"                    WHEN AbsType = 'CB01' AND Days = 0 THEN 1\n",
					"                    WHEN AbsType = 'MT01' AND Days = 0 THEN 1\n",
					"                    WHEN AttendanceorAbsenceType = 'Spec u/p-up to 3mths' AND Days = 0 THEN 1\n",
					"                    WHEN cal_days = 0 THEN Hrs / NULLIF(Hrs, 0)\n",
					"                    ELSE 1\n",
					"                END AS Leave\n",
					"            FROM\n",
					"                ProcessedAbsence\n",
					"        )\n",
					"        -- Step 5: Insert into temporary table\n",
					"        INSERT INTO sap_hr.fact_absence_all_TEMP (\n",
					"            absence_date,\n",
					"            absence_hours,\n",
					"            staff_number,\n",
					"            WorkScheduleRule,\n",
					"            AbsType,\n",
					"            SicknessGroup,\n",
					"            AttendanceorAbsenceType,\n",
					"            Leave\n",
					"        )\n",
					"        SELECT\n",
					"            absence_date,\n",
					"            absence_hours,\n",
					"            staff_number,\n",
					"            WorkScheduleRule,\n",
					"            AbsType,\n",
					"            SicknessGroup,\n",
					"            AttendanceorAbsenceType,\n",
					"            ROUND(Leave, 2) AS Leave\n",
					"        FROM\n",
					"            FinalAbsence;\n",
					"\n",
					"        -- Step 6: Remove duplicates and insert into final table\n",
					"        WITH Duplicate_CTE AS (\n",
					"            SELECT\n",
					"                *,\n",
					"                ROW_NUMBER() OVER (PARTITION BY absence_date, staff_number ORDER BY\n",
					"                    CASE WHEN AttendanceorAbsenceType = 'NA Time (Inspectors)' THEN 0 ELSE 1 END DESC) AS Rno\n",
					"            FROM\n",
					"                sap_hr.fact_absence_all_TEMP\n",
					"        )\n",
					"        INSERT INTO sap_hr.fact_absence_all (\n",
					"            absence_date,\n",
					"            absence_hours,\n",
					"            staff_number,\n",
					"            WorkScheduleRule,\n",
					"            AbsType,\n",
					"            SicknessGroup,\n",
					"            AttendanceorAbsenceType,\n",
					"            Leave,\n",
					"            PSGroup,\n",
					"            PersonnelArea,\n",
					"            PersonnelSubarea\n",
					"        )\n",
					"        SELECT\n",
					"            absence_date,\n",
					"            absence_hours,\n",
					"            staff_number,\n",
					"            WorkScheduleRule,\n",
					"            AbsType,\n",
					"            SicknessGroup,\n",
					"            AttendanceorAbsenceType,\n",
					"            Leave,\n",
					"            h.PSGroup,\n",
					"            h.PersonnelArea,\n",
					"            h.PersonnelSubarea\n",
					"        FROM\n",
					"            Duplicate_CTE d\n",
					"        LEFT JOIN\n",
					"            load.SAP_HR h ON d.staff_number = h.Pers#No#\n",
					"        WHERE\n",
					"            d.Rno = 1;\n",
					"\n",
					"        -- Step 7: Delete rows for invalid staff numbers\n",
					"        DELETE FROM sap_hr.fact_absence_all\n",
					"        WHERE staff_number IN ('50410587', '50422294');\n",
					"\n",
					"    "
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"CREATE OR REPLACE TEMPORARY VIEW Numbers AS\n",
					"SELECT sequence_id AS n\n",
					"FROM (\n",
					"    SELECT posexplode(split(space(1000), ' ')) AS (sequence_id, value)\n",
					");"
				],
				"execution_count": 83
			},
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"-- Truncate temporary and final tables\n",
					"DELETE FROM odw_harmonised_db.fact_absence_all_TEMP;\n",
					"DELETE FROM odw_harmonised_db.fact_absence_all;\n",
					"\n",
					"-- Step 1: Generate a sequence of numbers using a temporary view\n",
					"CREATE OR REPLACE TEMPORARY VIEW Numbers AS\n",
					"SELECT sequence_id AS n\n",
					"FROM (\n",
					"    SELECT posexplode(split(space(1000), ' ')) AS (sequence_id, value)\n",
					");\n",
					"\n",
					"-- Step 2: Expand absence records into individual days\n",
					"WITH AbsenceDays AS (\n",
					"    SELECT\n",
					"        StaffNumber,\n",
					"        WorkScheduleRule,\n",
					"        AbsType,\n",
					"        SicknessGroup,\n",
					"        AttendanceorAbsenceType,\n",
					"        StartDate,\n",
					"        EndDate,\n",
					"        Days,\n",
					"        Hrs,\n",
					"        Caldays AS cal_days,\n",
					"        DATEADD(DAY, n.n, StartDate) AS abs_date\n",
					"    FROM\n",
					"        odw_harmonised_db.absence_all\n",
					"    CROSS JOIN\n",
					"        Numbers n\n",
					"    WHERE\n",
					"        n.n <= DATEDIFF(DAY, StartDate, EndDate)\n",
					"        AND AttendanceorAbsenceType = 'Sickness'\n",
					"),\n",
					"-- Step 3: Calculate working hours and leave details\n",
					"ProcessedAbsence AS (\n",
					"    SELECT\n",
					"        ad.abs_date,\n",
					"        ad.StaffNumber,\n",
					"        ad.WorkScheduleRule,\n",
					"        ad.AbsType,\n",
					"        ad.SicknessGroup,\n",
					"        ad.AttendanceorAbsenceType,\n",
					"        ad.Days,\n",
					"        ad.Hrs,\n",
					"        ad.cal_days,\n",
					"        EXTRACT(DOW FROM ad.abs_date) AS dow,\n",
					"        ws.Mo,\n",
					"        ws.Tu,\n",
					"        ws.We,\n",
					"        ws.Th,\n",
					"        ws.Fr\n",
					"    FROM\n",
					"        AbsenceDays ad\n",
					"    LEFT JOIN\n",
					"        odw_standardised_db.work_schedules ws ON ad.WorkScheduleRule = ws.WorkScheduleRule\n",
					"    WHERE\n",
					"        EXTRACT(DOW FROM ad.abs_date) BETWEEN 2 AND 6\n",
					"),\n",
					"-- Step 4: Calculate absence hours and leave\n",
					"FinalAbsence AS (\n",
					"    SELECT\n",
					"        abs_date AS absence_date,\n",
					"        CASE\n",
					"            WHEN Days BETWEEN 0.01 AND 0.99 THEN\n",
					"                CASE dow\n",
					"                    WHEN 2 THEN Mo * Days\n",
					"                    WHEN 3 THEN Tu * Days\n",
					"                    WHEN 4 THEN We * Days\n",
					"                    WHEN 5 THEN Th * Days\n",
					"                    WHEN 6 THEN Fr * Days\n",
					"                    ELSE 0\n",
					"                END\n",
					"            ELSE\n",
					"                CASE dow\n",
					"                    WHEN 2 THEN Mo\n",
					"                    WHEN 3 THEN Tu\n",
					"                    WHEN 4 THEN We\n",
					"                    WHEN 5 THEN Th\n",
					"                    WHEN 6 THEN Fr\n",
					"                    ELSE 0\n",
					"                END\n",
					"        END AS absence_hours,\n",
					"        CASE LEFT(CAST(StaffNumber AS VARCHAR(10)), 1)\n",
					"            WHEN '4' THEN '50' + CAST(StaffNumber AS VARCHAR(10))\n",
					"            WHEN '5' THEN '00' + CAST(StaffNumber AS VARCHAR(10))\n",
					"            WHEN '6' THEN '60' + CAST(StaffNumber AS VARCHAR(10))\n",
					"            ELSE CAST(StaffNumber AS VARCHAR(10))\n",
					"        END AS staffnumber,\n",
					"        WorkScheduleRule,\n",
					"        AbsType,\n",
					"        SicknessGroup,\n",
					"        AttendanceorAbsenceType,\n",
					"        CASE\n",
					"            WHEN AbsType = 'CB01' AND Days = 0 THEN 1\n",
					"            WHEN AbsType = 'MT01' AND Days = 0 THEN 1\n",
					"            WHEN AttendanceorAbsenceType = 'Spec u/p-up to 3mths' AND Days = 0 THEN 1\n",
					"            WHEN cal_days = 0 THEN Hrs / NULLIF(Hrs, 0)\n",
					"            ELSE 1\n",
					"        END AS Leave\n",
					"    FROM\n",
					"        ProcessedAbsence\n",
					")\n",
					"-- Step 5: Insert into temporary table\n",
					"INSERT INTO odw_harmonised_db.fact_absence_all_TEMP (\n",
					"    absence_date,\n",
					"    absence_hours,\n",
					"    staffnumber,\n",
					"    WorkScheduleRule,\n",
					"    AbsType,\n",
					"    SicknessGroup,\n",
					"    AttendanceorAbsenceType,\n",
					"    Leave,\n",
					"    PSGroup ,\n",
					"    PersonnelArea,\n",
					"    PersonnelSubarea \n",
					")\n",
					"SELECT\n",
					"    absence_date,\n",
					"    absence_hours,\n",
					"    staffnumber,\n",
					"    WorkScheduleRule,\n",
					"    AbsType,\n",
					"    SicknessGroup,\n",
					"    AttendanceorAbsenceType,\n",
					"    ROUND(Leave, 2) AS Leave,\n",
					"    h.PSGroup,\n",
					"    h.PersonnelArea,\n",
					"    h.PersonnelSubarea \n",
					"FROM\n",
					"    FinalAbsence f\n",
					"LEFT JOIN\n",
					"    odw_harmonised_db.load_SAP_HR h ON f.staffnumber = h.PersNo;\n",
					"\n",
					"-- Step 6: Remove duplicates and insert into final table\n",
					"WITH Duplicate_CTE AS (\n",
					"    SELECT\n",
					"        *,\n",
					"        ROW_NUMBER() OVER (PARTITION BY absence_date, staffnumber ORDER BY\n",
					"            CASE WHEN AttendanceorAbsenceType = 'NA Time (Inspectors)' THEN 0 ELSE 1 END DESC) AS Rno\n",
					"    FROM\n",
					"        odw_harmonised_db.fact_absence_all_TEMP\n",
					")\n",
					"INSERT INTO odw_harmonised_db.fact_absence_all (\n",
					"    absence_date,\n",
					"    absence_hours,\n",
					"    staffnumber,\n",
					"    WorkScheduleRule,\n",
					"    AbsType,\n",
					"    SicknessGroup,\n",
					"    AttendanceorAbsenceType,\n",
					"    Leave,\n",
					"    PSGroup,\n",
					"    PersonnelArea,  -- Ensure this column is included\n",
					"    PersonnelSubarea\n",
					")\n",
					"SELECT\n",
					"    absence_date,\n",
					"    absence_hours,\n",
					"    staffnumber,\n",
					"    WorkScheduleRule,\n",
					"    AbsType,\n",
					"    SicknessGroup,\n",
					"    AttendanceorAbsenceType,\n",
					"    Leave,\n",
					"    h.PSGroup,\n",
					"    h.PersonnelArea,  -- Include PersonnelArea in the SELECT\n",
					"    h.PersonnelSubarea  -- Include PersonnelSubarea in the SELECT\n",
					"FROM\n",
					"    Duplicate_CTE d\n",
					"LEFT JOIN\n",
					"    odw_harmonised_db.load_SAP_HR h ON d.staffnumber = h.PersNo\n",
					"WHERE\n",
					"    d.Rno = 1;\n",
					"\n",
					"-- Step 7: Delete rows for invalid staff numbers\n",
					"DELETE FROM odw_harmonised_db.fact_absence_all\n",
					"WHERE staffnumber IN ('50410587', '50422294');"
				],
				"execution_count": 84
			},
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"SELECT COUNT(*) FROM odw_standardised_db.hr_absence_monthly;"
				],
				"execution_count": 85
			},
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"SELECT COUNT(*) FROM odw_harmonised_db.absence_all;"
				],
				"execution_count": 86
			},
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"SELECT COUNT(*) FROM odw_standardised_db.work_schedules;"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"\n",
					"select * from odw_harmonised_db.fact_absence_all"
				],
				"execution_count": 87
			}
		]
	}
}