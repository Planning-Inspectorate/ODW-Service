{
	"name": "secureinfo_fact",
	"properties": {
		"folder": {
			"name": "odw-harmonised/SAP-HR"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "643c4bf8-3046-44b9-b5d1-d2adae0b4e1b"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw",
				"name": "pinssynspodw",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.2",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql  \r\n",
					"\r\n",
					"-- Gets modified or deleted from source rows\r\n",
					"\r\n",
					"CREATE OR REPLACE TEMPORARY VIEW secureinfo_fact_new \r\n",
					"\r\n",
					"    AS\r\n",
					"\r\n",
					"-- gets data that matches of SourceID and flags that it is modified based on a row (md5) hash. Flags as \"NewData\"\r\n",
					"-- gets data that is in the target but not in source. Flags as \"DeletedData\"\r\n",
					"\r\n",
					"SELECT\r\n",
					"    CASE\r\n",
					"        WHEN T1.Ref_No IS NULL\r\n",
					"        THEN T7.SecureInfoID\r\n",
					"        ELSE NULL\r\n",
					"    END as SecureInfoID, -- surrogate key\r\n",
					"    T1.Ref_No AS SourceID, -- source system id\r\n",
					"    T3.DisabilityID,\r\n",
					"    T4.DiversityID,\r\n",
					"    T5.ReligionID,\r\n",
					"    T6.SXOID, \r\n",
					"    T2.SourceSystemID as SourceSystemID,\r\n",
					"    CURRENT_TIMESTAMP AS StartDate,\r\n",
					"    null AS EndDate,\r\n",
					"    CURRENT_TIMESTAMP AS IngestionDate,\r\n",
					"    NULL AS ValidTo,\r\n",
					"    md5(concat(IFNULL(T1.Ref_No,'.'), IFNULL(T3.DisabilityID,'.'), IFNULL(T4.DiversityID,'.'), IFNULL(T5.ReligionID,'.'), IFNULL(T6.SXOID,'.'))) as RowID,\r\n",
					"    'Y' as IsActive,\r\n",
					"    CASE\r\n",
					"        WHEN T1.Ref_No = T7.SourceID AND md5(concat(IFNULL(T1.Ref_No,'.'), IFNULL(T3.DisabilityID,'.'), IFNULL(T4.DiversityID,'.'), IFNULL(T5.ReligionID,'.'), IFNULL(T6.SXOID,'.'))) <> T7.RowID    -- same employee, changed data\r\n",
					"        THEN 'Y'\r\n",
					"        WHEN T7.SourceID IS NULL -- new employee\r\n",
					"        THEN 'Y'\r\n",
					"        ELSE 'N'\r\n",
					"    END as NewData,\r\n",
					"    CASE\r\n",
					"        WHEN T1.Ref_No IS NULL\r\n",
					"        THEN 'Y'\r\n",
					"        ELSE 'N'\r\n",
					"    END AS  DeletedData\r\n",
					"\r\n",
					"FROM odw_standardised_db.vw_protected_characteristics T1\r\n",
					"LEFT JOIN odw_harmonised_db.sourcesystem_fact T2 ON \"SAP HR\" = T2.Description AND T2.IsActive = 'Y'\r\n",
					"LEFT JOIN odw_harmonised_db.disability_dim T3 ON    T1.Disability_Text = T3.DisabilityCode  AND \r\n",
					"                                                    T1.Disability_Code_Description = T3.Description AND T3.IsActive = 'Y'\r\n",
					"LEFT JOIN odw_harmonised_db.diversity_dim T4 ON T1.Ethnic_Origin = T4.Description AND T4.IsActive = 'Y'\r\n",
					"LEFT JOIN odw_harmonised_db.religion_dim T5 ON  T1.Religion = T5.ReligionCode  AND \r\n",
					"                                                T1.Religious_Denomination_Key = T5.Description AND T5.IsActive = 'Y'\r\n",
					"LEFT JOIN odw_harmonised_db.sxo_dim T6 ON T1.SxO = T6.Description AND T6.IsActive = 'Y'\r\n",
					"FULL JOIN odw_harmonised_db.secureinfo_fact T7 ON T1.Ref_No = T7.SourceID\r\n",
					"WHERE  (T7.IsActive = 'Y' or T7.IsActive IS NULL)\r\n",
					"    \r\n",
					"        AND (\r\n",
					"        \r\n",
					"        -- flags new data        \r\n",
					"        (   CASE\r\n",
					"                WHEN T1.Ref_No = T7.SourceID AND md5(concat(IFNULL(T1.Ref_No,'.'), IFNULL(T3.DisabilityID,'.'), IFNULL(T4.DiversityID,'.'), IFNULL(T5.ReligionID,'.'), IFNULL(T6.SXOID,'.'))) <> T7.RowID    -- same employee, changed data\r\n",
					"                THEN 'Y'\r\n",
					"                WHEN T7.SourceID IS NULL -- new employee\r\n",
					"                THEN 'Y'\r\n",
					"                ELSE 'N'\r\n",
					"            END  = 'Y' ) OR\r\n",
					"        \r\n",
					"        -- flags deleted data\r\n",
					"        (   CASE\r\n",
					"                WHEN T1.Ref_No IS NULL\r\n",
					"                THEN 'Y'\r\n",
					"                ELSE 'N'\r\n",
					"            END = 'Y' )\r\n",
					")\r\n",
					";\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					""
				],
				"execution_count": 7
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"-- Create new and updated dataset\r\n",
					"\r\n",
					"CREATE OR REPLACE TEMPORARY  VIEW secureinfo_fact_changed_rows\r\n",
					"\r\n",
					"    AS\r\n",
					"\r\n",
					"-- gets updated, deleted and new rows \r\n",
					"\r\n",
					"Select \r\n",
					"\r\n",
					"    SecureInfoID, -- surrogate key\r\n",
					"    SourceID, -- source system id\r\n",
					"    DisabilityID,\r\n",
					"    DiversityID,\r\n",
					"    ReligionID,\r\n",
					"    SXOID, \r\n",
					"    SourceSystemID,\r\n",
					"    StartDate,\r\n",
					"    EndDate,\r\n",
					"    IngestionDate,\r\n",
					"    ValidTo,\r\n",
					"    RowID,\r\n",
					"    IsActive\r\n",
					"From secureinfo_fact_new\r\n",
					"\r\n",
					"    UNION ALL\r\n",
					"\r\n",
					"-- gets original versions of updated rows so we can update EndDate and set IsActive flag to 'N'\r\n",
					"\r\n",
					"SELECT\r\n",
					"    SecureInfoID, -- surrogate key\r\n",
					"    SourceID, -- source system id\r\n",
					"    DisabilityID,\r\n",
					"    DiversityID,\r\n",
					"    ReligionID,\r\n",
					"    SXOID, \r\n",
					"    SourceSystemID,\r\n",
					"    StartDate,\r\n",
					"    EndDate,\r\n",
					"    IngestionDate,\r\n",
					"    ValidTo,\r\n",
					"    RowID,\r\n",
					"    IsActive\r\n",
					"FROM odw_harmonised_db.secureinfo_fact\r\n",
					"WHERE SourceID IN (SELECT SourceID FROM secureinfo_fact_new);\r\n",
					""
				],
				"execution_count": 8
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"-- merge into fact table\r\n",
					"\r\n",
					"MERGE INTO odw_harmonised_db.secureinfo_fact AS Target\r\n",
					"USING secureinfo_fact_changed_rows AS Source\r\n",
					"\r\n",
					"ON Source.SecureInfoID = Target.SecureInfoID\r\n",
					"\r\n",
					"-- For Updates existing rows\r\n",
					"\r\n",
					"WHEN MATCHED\r\n",
					"    THEN \r\n",
					"    UPDATE SET\r\n",
					"    Target.EndDate = date_sub(current_timestamp,1),\r\n",
					"    Target.IsActive = 'N'\r\n",
					"\r\n",
					"-- Insert completely new rows\r\n",
					"WHEN NOT MATCHED \r\n",
					"    THEN INSERT * ;   \r\n",
					"\r\n",
					"\r\n",
					""
				],
				"execution_count": 9
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"\r\n",
					"-- Insert new SecureInfoID\r\n",
					"\r\n",
					"INSERT OVERWRITE odw_harmonised_db.secureinfo_fact \r\n",
					"\r\n",
					"SELECT \r\n",
					"    ROW_NUMBER() OVER (ORDER BY SecureInfoID NULLS LAST) AS SecureInfoID, \r\n",
					"    SourceID, \r\n",
					"    DisabilityID,\r\n",
					"    DiversityID,\r\n",
					"    ReligionID,\r\n",
					"    SXOID, \r\n",
					"    SourceSystemID,\r\n",
					"    StartDate,\r\n",
					"    EndDate,\r\n",
					"    IngestionDate,\r\n",
					"    ValidTo,\r\n",
					"    RowID,\r\n",
					"    IsActive\r\n",
					"FROM odw_harmonised_db.secureinfo_fact;"
				],
				"execution_count": 10
			}
		]
	}
}