{
	"name": "appeal_s78",
	"properties": {
		"folder": {
			"name": "odw-curated"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "81b4b0a5-3638-4936-8906-f724f7269448"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw",
				"name": "pinssynspodw",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.sql.functions import *\r\n",
					"from pyspark.sql.types import *"
				],
				"execution_count": 2
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### <u>**Note:**</u>\r\n",
					"##### In this notebook we use sb_appeal_s78 only as in this phase we are only processing service bus for this entity. \r\n",
					"##### Curated layer will need to be adjusted once we process horizon data."
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"**Make sure these are the correct columns that need to be in curated layer. This notebook was run before the schema was fully finalised ( some changes from the client were needed to be merged)**"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"CREATE OR REPLACE TEMPORARY VIEW vw_appeal_s78\r\n",
					"AS\r\n",
					"SELECT\r\n",
					"    caseId,\r\n",
					"    caseReference,\r\n",
					"    submissionId,\r\n",
					"    caseStatus,\r\n",
					"    caseType,\r\n",
					"    caseProcedure,\r\n",
					"    lpaCode,\r\n",
					"    caseOfficerId,\r\n",
					"    inspectorId,\r\n",
					"    allocationLevel,\r\n",
					"    allocationBand,\r\n",
					"    caseSpecialisms,\r\n",
					"    caseSubmittedDate,\r\n",
					"    caseCreatedDate,\r\n",
					"    caseUpdatedDate,\r\n",
					"    caseValidDate,\r\n",
					"    caseValidationDate,\r\n",
					"    caseValidationOutcome,\r\n",
					"    caseValidationInvalidDetails,\r\n",
					"    caseValidationIncompleteDetails,\r\n",
					"    caseExtensionDate,\r\n",
					"    caseStartedDate,\r\n",
					"    casePublishedDate,\r\n",
					"    linkedCaseStatus,\r\n",
					"    leadCaseReference,\r\n",
					"    lpaQuestionnaireDueDate,\r\n",
					"    lpaQuestionnaireSubmittedDate,\r\n",
					"    lpaQuestionnaireCreatedDate,\r\n",
					"    lpaQuestionnairePublishedDate,\r\n",
					"    lpaQuestionnaireValidationOutcome,\r\n",
					"    lpaQuestionnaireValidationOutcomeDate,\r\n",
					"    lpaQuestionnaireValidationDetails,\r\n",
					"    lpaStatement,\r\n",
					"    caseWithdrawnDate,\r\n",
					"    caseTransferredDate,\r\n",
					"    transferredCaseClosedDate,\r\n",
					"    caseDecisionOutcomeDate,\r\n",
					"    caseDecisionPublishedDate,\r\n",
					"    caseDecisionOutcome,\r\n",
					"    caseCompletedDate,\r\n",
					"    enforcementNotice,\r\n",
					"    applicationReference,\r\n",
					"    applicationDate,\r\n",
					"    applicationDecision,\r\n",
					"    applicationDecisionDate,\r\n",
					"    caseSubmissionDueDate,\r\n",
					"    siteAddressLine1,\r\n",
					"    siteAddressLine2,\r\n",
					"    siteAddressTown,\r\n",
					"    siteAddressCounty,\r\n",
					"    siteAddressPostcode,\r\n",
					"    siteAccessDetails,\r\n",
					"    siteSafetyDetails,\r\n",
					"    siteAreaSquareMetres,\r\n",
					"    floorSpaceSquareMetres,\r\n",
					"    isCorrectAppealType,\r\n",
					"    isGreenBelt,\r\n",
					"    inConservationArea,\r\n",
					"    ownsAllLand,\r\n",
					"    ownsSomeLand,\r\n",
					"    knowsOtherOwners,\r\n",
					"    knowsAllOwners,\r\n",
					"    advertisedAppeal,\r\n",
					"    notificationMethod,\r\n",
					"    ownersInformed,\r\n",
					"    originalDevelopmentDescription,\r\n",
					"    changedDevelopmentDescription,\r\n",
					"    newConditionDetails,\r\n",
					"    nearbyCaseReferences,\r\n",
					"    neighbouringSiteAddresses,\r\n",
					"    affectedListedBuildingNumbers,\r\n",
					"    changedListedBuildingNumbers,\r\n",
					"    appellantCostsAppliedFor,\r\n",
					"    lpaCostsAppliedFor,\r\n",
					"    agriculturalHolding,\r\n",
					"    tenantAgriculturalHolding,\r\n",
					"    otherTenantsAgriculturalHolding,\r\n",
					"    informedTenantsAgriculturalHolding,\r\n",
					"    appellantProcedurePreference,\r\n",
					"    appellantProcedurePreferenceDetails,\r\n",
					"    appellantProcedurePreferenceDuration,\r\n",
					"    appellantProcedurePreferenceWitnessCount,\r\n",
					"    statusPlanningObligation,\r\n",
					"    affectsScheduledMonument,\r\n",
					"    hasProtectedSpecies,\r\n",
					"    isAonbNationalLandscape,\r\n",
					"    designatedSitesNames,\r\n",
					"    isGypsyOrTravellerSite,\r\n",
					"    isPublicRightOfWay,\r\n",
					"    eiaEnvironmentalImpactSchedule,\r\n",
					"    eiaDevelopmentDescription,\r\n",
					"    eiaSensitiveAreaDetails,\r\n",
					"    eiaColumnTwoThreshold,\r\n",
					"    eiaScreeningOpinion,\r\n",
					"    eiaRequiresEnvironmentalStatement,\r\n",
					"    eiaCompletedEnvironmentalStatement,\r\n",
					"    eiaConsultedBodiesDetails,\r\n",
					"    hasStatutoryConsultees,\r\n",
					"    hasInfrastructureLevy,\r\n",
					"    isInfrastructureLevyFormallyAdopted,\r\n",
					"    infrastructureLevyAdoptedDate,\r\n",
					"    infrastructureLevyExpectedDate,\r\n",
					"    lpaProcedurePreference,\r\n",
					"    lpaProcedurePreferenceDetails,\r\n",
					"    lpaProcedurePreferenceDuration,\r\n",
					"    caseworkReason,\r\n",
					"    developmentType,\r\n",
					"    importantInformation,\r\n",
					"    jurisdiction,\r\n",
					"    redeterminedIndicator,\r\n",
					"    dateCostsReportDespatched,\r\n",
					"    dateNotRecoveredOrDerecovered,\r\n",
					"    dateRecovered,\r\n",
					"    originalCaseDecisionDate,\r\n",
					"    targetDate,\r\n",
					"    appellantCommentsSubmittedDate,\r\n",
					"    appellantStatementSubmittedDate,\r\n",
					"    finalCommentsDueDate,\r\n",
					"    interestedPartyRepsDueDate,\r\n",
					"    lpaCommentsSubmittedDate,\r\n",
					"    lpaProofsSubmittedDate,\r\n",
					"    lpaStatementSubmittedDate,\r\n",
					"    proofsOfEvidenceDueDate,\r\n",
					"    siteNoticesSentDate,\r\n",
					"    statementDueDate,\r\n",
					"    reasonForNeighbourVisits,\r\n",
					"    numberOfResidencesNetChange,\r\n",
					"    siteGridReferenceEasting,\r\n",
					"    siteGridReferenceNorthing,\r\n",
					"    siteViewableFromRoad,\r\n",
					"    siteWithinSSSI,\r\n",
					"    typeOfPlanningApplication\r\n",
					"FROM\r\n",
					"    odw_harmonised_db.sb_appeal_s78\r\n",
					"WHERE\r\n",
					"    IsActive = 'Y'"
				],
				"execution_count": 15
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Create a DataFrame of the data from the view"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"data: DataFrame = spark.sql(\"SELECT * FROM vw_appeal_s78\")"
				],
				"execution_count": 17
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Specify the schema for the data, taken from the curated table which has already been created in advance from the data model"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"schema: StructType = spark.table(\"odw_curated_db.appeal_s78\").schema"
				],
				"execution_count": 18
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Cast all field data types in the data to the data types from the curated table schema\r\n",
					"\r\n",
					"This is necessary because the view generated above is joining harmonised tables, many of which are sourced from Horizon and will have a different schema to the final table and fields will have different data types. Therefore, taking the curated schema as defined in thr data model and casting all fields correctly, ensures accuracy."
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df: DataFrame = data.select(\r\n",
					"    *[\r\n",
					"        col(field.name).cast(field.dataType).alias(field.name)\r\n",
					"        for field in schema.fields\r\n",
					"    ]\r\n",
					")"
				],
				"execution_count": 19
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Print the schema as a visual check"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df.printSchema()"
				],
				"execution_count": 20
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Write the data to the curated table"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"df.write.mode(\"overwrite\").saveAsTable(\"odw_curated_db.appeal_s78\")"
				],
				"execution_count": 21
			}
		]
	}
}