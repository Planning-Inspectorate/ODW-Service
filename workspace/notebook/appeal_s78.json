{
	"name": "appeal_s78",
	"properties": {
		"folder": {
			"name": "odw-curated"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",

			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw",
				"name": "pinssynspodw",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Import Packages"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.sql.functions import *\r\n",
					"from pyspark.sql.types import *\r\n",
					"from pyspark.sql import DataFrame\r\n",
					"import json"
				],

			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%run utils/py_logging_decorator"
				],

			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"db_name: str = \"odw_curated_db\"\r\n",
					"entity_name: str = \"appeal-s78\"\r\n",
					"table_name: str = \"odw_curated_db.appeal_s78\""
				],

			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### <u>**Note:**</u>\r\n",
					"##### In this notebook we use sb_appeal_s78 only as in this phase we are only processing service bus for this entity. \r\n",
					"##### Curated layer will need to be adjusted once we process horizon data."
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"**Make sure these are the correct columns that need to be in curated layer. This notebook was run before the schema was fully finalised (some changes from the client were needed to be merged)**"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Create a view for the data, joining harmonised tables where necessary"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"df = spark.sql(\"\"\"\r\n",
					"SELECT\r\n",
					"    caseReference\r\n",
					"    ,caseId\r\n",
					"    ,submissionId\r\n",
					"    ,caseStatus\r\n",
					"    ,caseType\r\n",
					"    ,caseProcedure\r\n",
					"    ,lpaCode\r\n",
					"    ,caseOfficerId\r\n",
					"    ,inspectorId\r\n",
					"    ,allocationLevel\r\n",
					"    ,allocationBand\r\n",
					"    ,caseSpecialisms\r\n",
					"    ,caseSubmittedDate\r\n",
					"    ,caseCreatedDate\r\n",
					"    ,caseUpdatedDate\r\n",
					"    ,caseValidDate\r\n",
					"    ,caseValidationDate\r\n",
					"    ,caseValidationOutcome\r\n",
					"    ,caseValidationInvalidDetails\r\n",
					"    ,caseValidationIncompleteDetails\r\n",
					"    ,caseExtensionDate\r\n",
					"    ,caseStartedDate\r\n",
					"    ,casePublishedDate\r\n",
					"    ,linkedCaseStatus\r\n",
					"    ,leadCaseReference\r\n",
					"    ,lpaQuestionnaireDueDate\r\n",
					"    ,lpaQuestionnaireSubmittedDate\r\n",
					"    ,lpaQuestionnaireCreatedDate\r\n",
					"    ,lpaQuestionnairePublishedDate\r\n",
					"    ,lpaQuestionnaireValidationOutcome\r\n",
					"    ,lpaQuestionnaireValidationOutcomeDate\r\n",
					"    ,lpaQuestionnaireValidationDetails\r\n",
					"    ,lpaStatement\r\n",
					"    ,caseWithdrawnDate\r\n",
					"    ,caseTransferredDate\r\n",
					"    ,transferredCaseClosedDate\r\n",
					"    ,caseDecisionOutcomeDate\r\n",
					"    ,caseDecisionPublishedDate\r\n",
					"    ,caseDecisionOutcome\r\n",
					"    ,caseCompletedDate\r\n",
					"    ,enforcementNotice\r\n",
					"    ,applicationReference\r\n",
					"    ,applicationDate\r\n",
					"    ,applicationDecision\r\n",
					"    ,applicationDecisionDate\r\n",
					"    ,caseSubmissionDueDate\r\n",
					"    ,siteAddressLine1\r\n",
					"    ,siteAddressLine2\r\n",
					"    ,siteAddressTown\r\n",
					"    ,siteAddressCounty\r\n",
					"    ,siteAddressPostcode\r\n",
					"    ,siteAccessDetails\r\n",
					"    ,siteSafetyDetails\r\n",
					"    ,siteAreaSquareMetres\r\n",
					"    ,floorSpaceSquareMetres\r\n",
					"    ,isCorrectAppealType\r\n",
					"    ,isGreenBelt\r\n",
					"    ,inConservationArea\r\n",
					"    ,ownsAllLand\r\n",
					"    ,ownsSomeLand\r\n",
					"    ,knowsOtherOwners\r\n",
					"    ,knowsAllOwners\r\n",
					"    ,advertisedAppeal\r\n",
					"    ,notificationMethod\r\n",
					"    ,ownersInformed\r\n",
					"    ,originalDevelopmentDescription\r\n",
					"    ,changedDevelopmentDescription\r\n",
					"    ,newConditionDetails\r\n",
					"    ,nearbyCaseReferences\r\n",
					"    ,neighbouringSiteAddresses\r\n",
					"    ,affectedListedBuildingNumbers\r\n",
					"    ,changedListedBuildingNumbers\r\n",
					"    ,appellantCostsAppliedFor\r\n",
					"    ,lpaCostsAppliedFor\r\n",
					"    ,agriculturalHolding\r\n",
					"    ,tenantAgriculturalHolding\r\n",
					"    ,otherTenantsAgriculturalHolding\r\n",
					"    ,informedTenantsAgriculturalHolding\r\n",
					"    ,appellantProcedurePreference\r\n",
					"    ,appellantProcedurePreferenceDetails\r\n",
					"    ,appellantProcedurePreferenceDuration\r\n",
					"    ,appellantProcedurePreferenceWitnessCount\r\n",
					"    ,statusPlanningObligation\r\n",
					"    ,affectsScheduledMonument\r\n",
					"    ,hasProtectedSpecies\r\n",
					"    ,isAonbNationalLandscape\r\n",
					"    ,designatedSitesNames\r\n",
					"    ,isGypsyOrTravellerSite\r\n",
					"    ,isPublicRightOfWay\r\n",
					"    ,eiaEnvironmentalImpactSchedule\r\n",
					"    ,eiaDevelopmentDescription\r\n",
					"    ,eiaSensitiveAreaDetails\r\n",
					"    ,eiaColumnTwoThreshold\r\n",
					"    ,eiaScreeningOpinion\r\n",
					"    ,eiaRequiresEnvironmentalStatement\r\n",
					"    ,eiaCompletedEnvironmentalStatement\r\n",
					"    ,consultedBodiesDetails\r\n",
					"    ,hasStatutoryConsultees\r\n",
					"    ,hasInfrastructureLevy\r\n",
					"    ,isInfrastructureLevyFormallyAdopted\r\n",
					"    ,infrastructureLevyAdoptedDate\r\n",
					"    ,infrastructureLevyExpectedDate\r\n",
					"    ,lpaProcedurePreference\r\n",
					"    ,lpaProcedurePreferenceDetails\r\n",
					"    ,lpaProcedurePreferenceDuration\r\n",
					"    ,caseworkReason\r\n",
					"    ,developmentType\r\n",
					"    ,importantInformation\r\n",
					"    ,jurisdiction\r\n",
					"    ,redeterminedIndicator\r\n",
					"    ,dateCostsReportDespatched\r\n",
					"    ,dateNotRecoveredOrDerecovered\r\n",
					"    ,dateRecovered\r\n",
					"    ,originalCaseDecisionDate\r\n",
					"    ,targetDate\r\n",
					"    ,appellantCommentsSubmittedDate\r\n",
					"    ,appellantStatementSubmittedDate\r\n",
					"    ,appellantProofsSubmittedDate\r\n",
					"    ,finalCommentsDueDate\r\n",
					"    ,interestedPartyRepsDueDate\r\n",
					"    ,lpaCommentsSubmittedDate\r\n",
					"    ,lpaProofsSubmittedDate\r\n",
					"    ,lpaStatementSubmittedDate\r\n",
					"    ,proofsOfEvidenceDueDate\r\n",
					"    ,siteNoticesSentDate\r\n",
					"    ,statementDueDate\r\n",
					"    ,reasonForNeighbourVisits\r\n",
					"    ,numberOfResidencesNetChange\r\n",
					"    ,siteGridReferenceEasting\r\n",
					"    ,siteGridReferenceNorthing\r\n",
					"    ,siteViewableFromRoad\r\n",
					"    ,siteWithinSSSI\r\n",
					"    ,typeOfPlanningApplication\r\n",
					"    \r\n",
					"FROM\r\n",
					"    odw_harmonised_db.sb_appeal_s78\r\n",
					"WHERE\r\n",
					"    IsActive = 'Y'\r\n",
					"\"\"\"\r\n",
					")"
				],

			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Define schema"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"schema = mssparkutils.notebook.run(\"py_create_spark_schema\", 30, {\"db_name\": db_name, \"entity_name\": entity_name})\r\n",
					"spark_schema = StructType.fromJson(json.loads(schema))"
				],

			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Create DataFrame with the correct schema"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"data = spark.createDataFrame(df.rdd, schema=spark_schema)"
				],

			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Write the data to the curated table"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"logInfo(f\"Writing to {table_name}\")\r\n",
					"df.write.mode(\"overwrite\").format(\"parquet\").saveAsTable(table_name)\r\n",
					"logInfo(f\"Written to {table_name}\")"
				],

			},
			{
				"cell_type": "code",
				"source": [
					""
				],
				"execution_count": null
			}
		]
	}
}