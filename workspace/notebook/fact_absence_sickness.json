{
	"name": "fact_absence_sickness",
	"properties": {
		"folder": {
			"name": "odw-harmonised"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "d5b84008-e6b9-4dbd-a6cc-b706e518a9e3"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw",
				"name": "pinssynspodw",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "sparksql"
					}
				},
				"source": [
					"%%sql\n",
					"\n",
					"-- Step 1: Extract sickness absence data\n",
					"CREATE OR REPLACE TEMP VIEW sickness AS\n",
					"SELECT \n",
					"    a.StaffNumber,\n",
					"    CAST(a.StartDate AS DATE) AS sickness_start,\n",
					"    CAST(a.EndDate AS DATE) AS sickness_end,\n",
					"    a.Days,\n",
					"    a.SicknessGroup,\n",
					"    a.WorkScheduleRule\n",
					"FROM sap_hr.absence_all a\n",
					"WHERE a.AttendanceorAbsenceType = 'Sickness';\n",
					"\n",
					"-- Step 2: Identify contiguous sickness periods\n",
					"CREATE OR REPLACE TEMP VIEW sickness_with_lead_lag AS\n",
					"SELECT \n",
					"    s.*,\n",
					"    LEAD(s.sickness_start) OVER (PARTITION BY s.StaffNumber ORDER BY s.sickness_start DESC) AS prev_sickness_start,\n",
					"    LEAD(s.sickness_end) OVER (PARTITION BY s.StaffNumber ORDER BY s.sickness_start DESC) AS prev_sickness_end,\n",
					"    CASE \n",
					"        WHEN DATE_ADD(LEAD(s.sickness_end) OVER (PARTITION BY s.StaffNumber ORDER BY s.sickness_start DESC), 1) = s.sickness_start \n",
					"        THEN UUID() \n",
					"        ELSE NULL \n",
					"    END AS contiguous_sickness\n",
					"FROM sickness s;\n",
					"\n",
					"-- Step 3: Implement DATEADDNOWKNOBH logic (Add Working Days)\n",
					"-- Ensures next working day does not fall on weekends or holidays.\n",
					"CREATE OR REPLACE TEMP VIEW sickness_with_working_days AS\n",
					"SELECT \n",
					"    swl.*,\n",
					"    MIN(h.HolidayDate) OVER (PARTITION BY swl.StaffNumber) AS next_working_day_after_previous_sickness\n",
					"FROM sickness_with_lead_lag swl\n",
					"LEFT JOIN Live.Holidays h \n",
					"    ON h.HolidayDate >= DATE_ADD(swl.prev_sickness_end, 1) -- Start checking from the day after sickness ends\n",
					"    AND NOT DATE_FORMAT(h.HolidayDate, 'E') IN ('Sat', 'Sun') -- Skip weekends\n",
					"ORDER BY swl.StaffNumber, swl.sickness_start;\n",
					"\n",
					"-- Step 4: Assign sickness ID using Spark SQL (Replaces WHILE Loop)\n",
					"CREATE OR REPLACE TEMP VIEW sickness_final AS\n",
					"SELECT \n",
					"    StaffNumber,\n",
					"    SUM(\n",
					"        CASE \n",
					"            WHEN contiguous_sickness IS NULL OR sickness_start <> next_working_day_after_previous_sickness THEN 1\n",
					"            ELSE 0\n",
					"        END\n",
					"    ) OVER (PARTITION BY StaffNumber ORDER BY sickness_start) AS sickness_id, -- Generates sickness_id without a loop\n",
					"    SUM(Days) OVER (PARTITION BY StaffNumber, contiguous_sickness) AS Total_Days,\n",
					"    MIN(sickness_start) OVER (PARTITION BY StaffNumber, contiguous_sickness) AS sickness_start,\n",
					"    MAX(sickness_end) OVER (PARTITION BY StaffNumber, contiguous_sickness) AS sickness_end,\n",
					"    CASE \n",
					"        WHEN sickness_end < DATE_ADD(CURRENT_DATE(), INTERVAL -2 YEAR) THEN 'Older FY'\n",
					"        WHEN sickness_end BETWEEN DATE_ADD(CURRENT_DATE(), INTERVAL -2 YEAR) AND DATE_ADD(CURRENT_DATE(), INTERVAL -1 YEAR) THEN 'Previous FY'\n",
					"        WHEN sickness_end BETWEEN DATE_ADD(CURRENT_DATE(), INTERVAL -1 YEAR) AND CURRENT_DATE() THEN 'Current FY'\n",
					"        ELSE 'Next FY'\n",
					"    END AS financial_year,\n",
					"    CASE \n",
					"        WHEN sickness_end < DATE_ADD(CURRENT_DATE(), INTERVAL -2 YEAR) THEN 'Older CY'\n",
					"        WHEN sickness_end BETWEEN DATE_ADD(CURRENT_DATE(), INTERVAL -2 YEAR) AND DATE_ADD(CURRENT_DATE(), INTERVAL -1 YEAR) THEN 'Previous CY'\n",
					"        WHEN sickness_end BETWEEN DATE_ADD(CURRENT_DATE(), INTERVAL -1 YEAR) AND CURRENT_DATE() THEN 'Current CY'\n",
					"        ELSE 'Future CY'\n",
					"    END AS calendar_year\n",
					"FROM sickness_with_working_days;\n",
					"\n",
					"-- Step 5: Insert processed data into the existing fact table\n",
					"INSERT OVERWRITE TABLE sap_hr.fact_absence_sickness\n",
					"SELECT \n",
					"    sickness_id,\n",
					"    StaffNumber,\n",
					"    Total_Days AS Days,\n",
					"    sickness_start,\n",
					"    sickness_end,\n",
					"    financial_year,\n",
					"    calendar_year\n",
					"FROM sickness_final;"
				],
				"execution_count": null
			}
		]
	}
}