{
	"name": "fact_absence_sickness",
	"properties": {
		"folder": {
			"name": "odw-harmonised"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "76235c31-ff65-4658-ae37-1933d10168a5"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw",
				"name": "pinssynspodw",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Entity : fact_absence_sickness\n",
					"###### Author: Prathap A\n",
					"###### Date: 25/02/2025\n",
					"\n",
					"###### version : 0001\n",
					"###### <u>Description</u>:\n",
					"This template is designed to facilitate the monthly processing and harmonization of Sickness data. It includes steps for initializing the environment, creating and managing Delta tables, and inserting data into harmonized tables. The template ensures that Sickness data is accurately transformed, stored, and made available for reporting and analysis."
				]
			},
			{
				"cell_type": "code",
				"source": [
					"from pyspark.sql.functions import udf, col, lit, when, coalesce, concat, sum, avg, max, min, count, countDistinct, date_format, to_date, datediff, months_between, year, month,  hour, minute, second, expr, asc, desc\n",
					"from pyspark.sql.types import DateType, TimestampType, StringType, IntegerType, FloatType, DoubleType, BooleanType, StructType, StructField, ArrayType, MapType\n",
					"from pyspark.sql.window import Window\n",
					"from pyspark.sql.functions import row_number, rank, dense_rank, lag, lead, ntile\n",
					"from pyspark.sql import SQLContext\n",
					"from pyspark.sql import DataFrame\n",
					"from pyspark.sql import functions as F\n",
					"from pyspark.sql.avro.functions import from_avro, to_avro\n",
					"from pyspark.sql.streaming import DataStreamReader, DataStreamWriter\n",
					"from pyspark.sql.utils import AnalysisException\n",
					"from pyspark.sql.catalog import Catalog\n",
					"from pyspark.sql.column import Column\n",
					"from pyspark.sql.group import GroupedData\n",
					"from pyspark.sql.pandas.functions import pandas_udf\n",
					"\n",
					"from datetime import datetime, timedelta\n",
					"import pandas as pd"
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"\n",
					"delete from odw_harmonised_db.sap_hr_fact_absence_sickness;\n",
					"\n",
					"-- Step 1: Create the initial sickness view\n",
					"CREATE OR REPLACE TEMP VIEW sickness AS\n",
					"SELECT \n",
					"    a.StaffNumber,\n",
					"    CAST(a.StartDate AS DATE) AS sickness_start,\n",
					"    CAST(a.EndDate AS DATE) AS sickness_end,\n",
					"    a.Days,\n",
					"    a.SicknessGroup,\n",
					"    a.WorkScheduleRule,\n",
					"    ds.FY AS FY_start,\n",
					"    de.FY AS FY_end\n",
					"FROM odw_harmonised_db.sap_hr_absence_all a\n",
					"LEFT JOIN odw_harmonised_db.live_dim_date ds ON CAST(a.StartDate AS DATE) = ds.date\n",
					"LEFT JOIN odw_harmonised_db.live_dim_date de ON CAST(a.EndDate AS DATE) = de.date\n",
					"WHERE a.AttendanceorAbsenceType = 'Sickness';\n",
					"\n",
					"\n",
					"-- Step 2: Identify contiguous sickness periods using LEAD and LAG\n",
					"CREATE OR REPLACE TEMP VIEW sickness_with_lead_lag AS\n",
					"SELECT \n",
					"    s.*,\n",
					"    LEAD(s.sickness_start) OVER (PARTITION BY s.StaffNumber ORDER BY s.sickness_start DESC) AS prev_sickness_start,\n",
					"    LEAD(s.sickness_end) OVER (PARTITION BY s.StaffNumber ORDER BY s.sickness_start DESC) AS prev_sickness_end,\n",
					"    CASE \n",
					"        WHEN DATE_ADD(LEAD(s.sickness_end) OVER (PARTITION BY s.StaffNumber ORDER BY s.sickness_start DESC), 1) = s.sickness_start \n",
					"        THEN UUID() \n",
					"        ELSE NULL \n",
					"    END AS contiguous_sickness\n",
					"FROM sickness s;\n",
					"\n",
					"\n",
					"-- Step 3: Implement `DATEADDNOWKNOBH` logic within the query\n",
					"-- This ensures that the next working day does not fall on weekends or holidays.\n",
					"CREATE OR REPLACE TEMP VIEW sickness_with_working_days AS\n",
					"SELECT \n",
					"    swl.*,\n",
					"    (SELECT MIN(h.HolidayDate) \n",
					"     FROM odw_harmonised_db.live_holidays h \n",
					"     WHERE h.HolidayDate >= DATE_ADD(swl.prev_sickness_end, 1) \n",
					"       AND NOT DATE_FORMAT(h.HolidayDate, 'E') IN ('Sat', 'Sun') -- Skip weekends\n",
					"    ) AS next_working_day_after_previous_sickness\n",
					"FROM sickness_with_lead_lag swl;\n",
					"\n",
					"\n",
					"-- Step 4: Assign sickness ID using Spark SQL window function (Replaces WHILE Loop)\n",
					"CREATE OR REPLACE TEMP VIEW sickness_final AS\n",
					"SELECT \n",
					" \n",
					"  StaffNumber,\n",
					"    SUM(\n",
					"        CASE \n",
					"            WHEN contiguous_sickness IS NULL OR sickness_start <> next_working_day_after_previous_sickness THEN 1\n",
					"            ELSE 0\n",
					"        END\n",
					"    ) OVER (PARTITION BY StaffNumber ORDER BY sickness_start) AS sickness_id, -- Generates sickness_id without a loop\n",
					"    SUM(Days) OVER (PARTITION BY StaffNumber, contiguous_sickness) AS Total_Days,\n",
					"    MIN(sickness_start) OVER (PARTITION BY StaffNumber, contiguous_sickness) AS sickness_start,\n",
					"    MAX(sickness_end) OVER (PARTITION BY StaffNumber, contiguous_sickness) AS sickness_end,\n",
					"    MAX(FY_start) OVER () AS FY, -- Keeping the FY information\n",
					"    CASE \n",
					"        WHEN sickness_end < DATE_SUB(CURRENT_DATE(), 2 * 365) THEN 'Older FY'\n",
					"        WHEN sickness_end BETWEEN DATE_SUB(CURRENT_DATE(), 2 * 365) AND DATE_SUB(CURRENT_DATE(), 1 * 365) THEN 'Previous FY'\n",
					"        WHEN sickness_end BETWEEN DATE_SUB(CURRENT_DATE(), 1 * 365) AND CURRENT_DATE() THEN 'Current FY'\n",
					"        ELSE 'Next FY'\n",
					"    END AS financial_year,\n",
					"    CASE \n",
					"        WHEN sickness_end < DATE_SUB(CURRENT_DATE(), 2 * 365) THEN 'Older CY'\n",
					"        WHEN sickness_end BETWEEN DATE_SUB(CURRENT_DATE(), 2 * 365) AND DATE_SUB(CURRENT_DATE(), 1 * 365) THEN 'Previous CY'\n",
					"        WHEN sickness_end BETWEEN DATE_SUB(CURRENT_DATE(), 1 * 365) AND CURRENT_DATE() THEN 'Current CY'\n",
					"        ELSE 'Future CY'\n",
					"    END AS calendar_year\n",
					"FROM sickness_with_working_days;\n",
					"\n",
					"\n",
					"-- Step 5: Insert processed data into the existing fact table\n",
					"INSERT OVERWRITE TABLE odw_harmonised_db.sap_hr_fact_absence_sickness\n",
					"SELECT \n",
					"    sickness_id,\n",
					"    CASE\n",
					"        WHEN TRIM(LEADING '0' FROM LPAD(StaffNumber, 8, '0')) LIKE '4%' THEN \n",
					"            '50' || TRIM(LEADING '0' FROM LPAD(StaffNumber, 8, '0'))\n",
					"        WHEN TRIM(LEADING '0' FROM LPAD(StaffNumber, 8, '0')) LIKE '5%' THEN \n",
					"            '00' || TRIM(LEADING '0' FROM LPAD(StaffNumber, 8, '0'))\n",
					"        WHEN TRIM(LEADING '0' FROM LPAD(StaffNumber, 8, '0')) LIKE '6%' THEN \n",
					"            '60' || TRIM(LEADING '0' FROM LPAD(StaffNumber, 8, '0'))\n",
					"        ELSE LPAD(StaffNumber, 7, '0')\n",
					"    END  AS StaffNumber,\n",
					"    Total_Days AS Days,\n",
					"    sickness_start,\n",
					"    sickness_end,\n",
					"    FY,\n",
					"    financial_year,\n",
					"    calendar_year,\n",
					"    'saphr' AS SourceSystemID,\n",
					"    CURRENT_DATE() AS IngestionDate,\n",
					"    CURRENT_TIMESTAMP() AS ValidFrom,\n",
					"    CURRENT_TIMESTAMP() AS ValidTo,\n",
					"    NULL AS RowID,\n",
					"    'Y' AS IsActive,\n",
					"    CURRENT_TIMESTAMP() AS LastUpdated\n",
					"FROM sickness_final;"
				],
				"execution_count": 46
			},
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"\n",
					"select  distinct StaffNumber\n",
					"from odw_harmonised_db.sap_hr_fact_absence_sickness"
				],
				"execution_count": 48
			},
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"\n",
					"SELECT DISTINCT\n",
					"    LEFT(LPAD(StaffNumber, 7, '0'), 1) AS FirstChar,\n",
					"    LPAD(StaffNumber, 7, '0') AS StaffNumber,\n",
					"    CASE\n",
					"        WHEN TRIM(LEADING '0' FROM LPAD(StaffNumber, 8, '0')) LIKE '4%' THEN \n",
					"            '50' || TRIM(LEADING '0' FROM LPAD(StaffNumber, 8, '0'))\n",
					"        WHEN TRIM(LEADING '0' FROM LPAD(StaffNumber, 8, '0')) LIKE '5%' THEN \n",
					"            '00' || TRIM(LEADING '0' FROM LPAD(StaffNumber, 8, '0'))\n",
					"        WHEN TRIM(LEADING '0' FROM LPAD(StaffNumber, 8, '0')) LIKE '6%' THEN \n",
					"            '60' || TRIM(LEADING '0' FROM LPAD(StaffNumber, 8, '0'))\n",
					"        ELSE LPAD(StaffNumber, 7, '0')\n",
					"    END AS StaffNumber2,\n",
					"    LPAD(StaffNumber, 7, '0') AS StaffNumber3\n",
					"FROM sickness_final;"
				],
				"execution_count": 45
			},
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"\n",
					"SELECT DISTINCT\n",
					"    LEFT(LPAD(StaffNumber, 7, '0'), 1) AS FirstChar, -- Ensures it stays as a 7-character string\n",
					"    LPAD(StaffNumber, 7, '0') AS StaffNumber,\n",
					"    CASE \n",
					"        WHEN LEFT(LPAD(StaffNumber, 7, '0'), 1) = '4' THEN '50' || LPAD(StaffNumber, 7, '0')\n",
					"        WHEN LEFT(LPAD(StaffNumber, 7, '0'), 1) = '5' THEN '00' || LPAD(StaffNumber, 7, '0')\n",
					"        WHEN LEFT(LPAD(StaffNumber, 7, '0'), 1) = '6' THEN '60' || LPAD(StaffNumber, 7, '0')\n",
					"        ELSE LPAD(StaffNumber, 7, '0')\n",
					"    END AS StaffNumber2,\n",
					"    LPAD(StaffNumber, 7, '0') AS StaffNumber3\n",
					"FROM sickness_final;"
				],
				"execution_count": 38
			},
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"\n",
					"SELECT DISTINCT\n",
					"\n",
					"    LEFT(CAST(StaffNumber AS VARCHAR(10)), 1) AS FirstChar,\n",
					"    StaffNumber,\n",
					"    CASE \n",
					"        WHEN LEFT(CAST(StaffNumber AS VARCHAR(10)), 1) = '4' THEN '50' + CAST(StaffNumber AS VARCHAR(10))\n",
					"        WHEN LEFT(CAST(StaffNumber AS VARCHAR(10)), 1) = '5' THEN '00' + CAST(StaffNumber AS VARCHAR(10))\n",
					"        WHEN LEFT(CAST(StaffNumber AS VARCHAR(10)), 1) = '6' THEN '60' + CAST(StaffNumber AS VARCHAR(10))\n",
					"        ELSE CAST(StaffNumber AS VARCHAR(10))\n",
					"    END AS StaffNumber2,\n",
					"    StaffNumber AS StaffNumber3\n",
					"FROM sickness_final;"
				],
				"execution_count": 33
			},
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"\n",
					"UPDATE odw_harmonised_db.sap_hr_fact_absence_sickness\n",
					"SET RowID = md5(\n",
					"    concat_ws('|',\n",
					"    sickness_id,\n",
					"    StaffNumber,\n",
					"    Days ,\n",
					"    sickness_start,\n",
					"    sickness_end,\n",
					"    FY,\n",
					"    financial_year,\n",
					"    calendar_year\n",
					" \n",
					"\n",
					"    )\n",
					")"
				],
				"execution_count": 8
			},
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"\n",
					"select distinct StaffNumber from odw_harmonised_db.sap_hr_fact_absence_sickness;"
				],
				"execution_count": 36
			},
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"\n",
					"select * from odw_harmonised_db.sap_hr_fact_absence_sickness   where staffnumber = '410563'"
				],
				"execution_count": 1
			}
		]
	}
}