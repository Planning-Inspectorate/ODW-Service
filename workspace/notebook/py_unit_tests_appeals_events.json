{
	"name": "py_unit_tests_appeals_events",
	"properties": {
		"folder": {
			"name": "utils/unit-tests"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "dca10e42-a7c5-4d3c-bba3-4b6e9f807875"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": true,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw",
				"name": "pinssynspodw",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import json\r\n",
					"from pyspark.sql.types import *\r\n",
					"from pyspark.sql import DataFrame\r\n",
					"import pprint"
				],
				"execution_count": 252
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"entity_name: str = 'appeal-event'\r\n",
					"std_db_name: str = 'odw_standardised_db'\r\n",
					"hrm_db_name: str = 'odw_harmonised_db'\r\n",
					"curated_db_name: str = 'odw_curated_db'\r\n",
					"std_table_name: str = 'sb_appeal_event'\r\n",
					"horizon_std_table_name: str = 'horizon_appeals_event'\r\n",
					"hrm_table_name: str = 'sb_appeal_event'\r\n",
					"#this does not exist - hrm_table_final: str = 'appeal_event'\r\n",
					"curated_table_name: str = 'appeal_event'"
				],
				"execution_count": 253
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"storage_account: str = mssparkutils.notebook.run('/utils/py_utils_get_storage_account')\r\n",
					"path_to_orchestration_file: str = \"abfss://odw-config@\"+storage_account+\"orchestration/orchestration.json\""
				],
				"execution_count": 254
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%run /utils/unit-tests/py_unit_tests_functions"
				],
				"execution_count": 255
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"sb_std_schema = create_spark_schema(std_db_name, entity_name)\r\n",
					"sb_std_table_schema = spark.table(f\"{std_db_name}.{std_table_name}\").schema\r\n",
					"sb_hrm_schema = create_spark_schema(hrm_db_name, entity_name)\r\n",
					"sb_hrm_table_schema = spark.table(f\"{hrm_db_name}.{hrm_table_name}\").schema\r\n",
					"curated_schema = create_spark_schema(curated_db_name, entity_name)\r\n",
					"curated_table_schema = spark.table(f\"{curated_db_name}.{curated_table_name}\").schema"
				],
				"execution_count": 256
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#keep track of the exitCodes, if the exit code is not zero then we've had failures, we flip the boolean\r\n",
					"exitCode: int = 0"
				],
				"execution_count": 257
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Compare schemas"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"std_schema_correct: bool = test_compare_schemas(sb_std_schema, sb_std_table_schema)\r\n",
					"print(f\"Service bus standardised schema correct: {std_schema_correct}\\nTable: {std_db_name}.{std_table_name}\\nDifferences shown above (if any)\")\r\n",
					"exitCode += int(not std_schema_correct)\r\n",
					"hrm_schema_correct: bool = test_compare_schemas(sb_hrm_schema, sb_hrm_table_schema)\r\n",
					"print(f\"Service bus harmonised schema correct: {hrm_schema_correct}\\nTable: {hrm_db_name}.{hrm_table_name}\\nDifferences shown above (if any)\")\r\n",
					"exitCode += int(not hrm_schema_correct)\r\n",
					"cur_schema_correct: bool = test_compare_schemas(curated_schema, curated_table_schema)\r\n",
					"print(f\"Curated schema correct: {cur_schema_correct}\\nTable: {curated_db_name}.{curated_table_name}\\nDifferences shown above (if any)\")\r\n",
					"exitCode += int(not hrm_schema_correct)"
				],
				"execution_count": 258
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#passing\n",
					"if test_counts_hrm_cur(hrm_db_name, hrm_table_name, curated_db_name, curated_table_name, 'eventId', 'ODTSourceSystem'):\n",
					"    pass\n",
					"else:\n",
					"    exitCode += 1"
				],
				"execution_count": 260
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#check standardised horizon_appeals_event + sb_appeal_event matches harmonised\n",
					"\n",
					"def get_table_count(table_name: str) -> int:\n",
					"    # Function to get the count of rows in a table\n",
					"    df: DataFrame = spark.sql(f\"SELECT * FROM {table_name}\").drop_duplicates()\n",
					"    return df.count()\n",
					"\n",
					"def compare_combined_counts(table1: str, table2: str, comparison_table: str) -> (int, int, int, bool):\n",
					"    # Get the counts of the individual tables\n",
					"    count1 = get_table_count(table1)\n",
					"    count2 = get_table_count(table2)\n",
					"    \n",
					"    combined_count = count1 + count2\n",
					"    comparison_count = get_table_count(comparison_table)\n",
					"    counts_match = combined_count == comparison_count\n",
					"    \n",
					"    return count1, count2, comparison_count, counts_match\n",
					"\n",
					"table1 = \"odw_standardised_db.sb_appeal_event\"\n",
					"table2 = \"odw_standardised_db.horizon_appeals_event\"\n",
					"comparison_table = \"odw_harmonised_db.sb_appeal_event\"\n",
					"\n",
					"# Call the function and get the results\n",
					"count1, count2, comparison_count, counts_match = compare_combined_counts(table1, table2, comparison_table)\n",
					"\n",
					"# Print the results\n",
					"print(f\"Count of {table1}: {count1:,}\")\n",
					"print(f\"Count of {table2}: {count2:,}\")\n",
					"print(f\"Combined Count: {count1 + count2:,}\")\n",
					"print(f\"Count of {comparison_table}: {comparison_count:,}\")\n",
					"print(f\"Counts match: {counts_match}\")\n",
					"\n",
					"# Increment exitCode if counts do not match\n",
					"if not counts_match:\n",
					"    exitCode += 1\n",
					""
				],
				"execution_count": 261
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#passing\n",
					"if test_hrm_to_curated_no_dropping_primary_ids_only_records(hrm_db_name, hrm_table_name, curated_db_name, curated_table_name, 'eventId', 'ODTSourceSystem'):\n",
					"    pass\n",
					"else:\n",
					"    exitCode += 1"
				],
				"execution_count": 262
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#test_hrm_to_curated_no_dropping_records - passing\n",
					"\n",
					"df: DataFrame = spark.sql(f\"\"\"\n",
					"    select eventId\n",
					"    from {hrm_db_name}.{hrm_table_name}\n",
					"    where IsActive = 'Y'\n",
					"    and eventId not in\n",
					"    (\n",
					"        select eventId\n",
					"        from {curated_db_name}.{curated_table_name}\n",
					"    )\n",
					"    \"\"\")\n",
					"if df.count() == 0:\n",
					"    pass\n",
					"else:\n",
					"    exitCode += 1\n",
					""
				],
				"execution_count": 263
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"mssparkutils.notebook.exit(exitCode)"
				],
				"execution_count": 264
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Compare service bus standardised with harmonised\r\n",
					"Should be the same count"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"standardised_count, harmonised_count, counts_match = test_std_same_rows_hrm(std_table_name, hrm_table_name)\r\n",
					"print(f\"Standardised Count: {standardised_count: ,}\\nHarmonised Count: {harmonised_count: ,}\\nCounts match: {counts_match}\")"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"SELECT\r\n",
					"    *\r\n",
					"FROM\r\n",
					"    odw_standardised_db.sb_nsip_project as sb\r\n",
					"    LEFT OUTER JOIN odw_harmonised_db.sb_nsip_project as hrm\r\n",
					"        ON sb.caseId = hrm.caseId\r\n",
					"        AND sb.ingested_datetime = hrm.IngestionDate\r\n",
					"WHERE\r\n",
					"    hrm.caseId Is null\r\n",
					"LIMIT 1"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Trace service bus data from standardised to curated\r\n",
					"We need to make sure the data has loaded through correctly. To do this efficiently, we will select a sample record and check that the data is maintained as it moves through the medallian architecture."
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"SELECT * FROM odw_standardised_db.sb_nsip_project"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"SELECT * FROM odw_standardised_db.sb_nsip_project \r\n",
					"WHERE caseid = 100000504 order by ingested_datetime desc"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"SELECT * FROM odw_harmonised_db.sb_nsip_project WHERE caseid = 100000504 \r\n",
					"Order by IngestionDate desc"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#### Check array fields are aggregated properly\r\n",
					"Go and find examples"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"SELECT\r\n",
					"    horizoncasenumber,\r\n",
					"    COUNT(DISTINCT region)\r\n",
					"FROM\r\n",
					"    odw_standardised_db.horizon_nsip_data\r\n",
					"WHERE\r\n",
					"    ingested_datetime = (SELECT MAX(ingested_datetime) FROM odw_standardised_db.horizon_nsip_data)\r\n",
					"GROUP BY\r\n",
					"    horizoncasenumber\r\n",
					"HAVING\r\n",
					"    COUNT(DISTINCT region) > 1\r\n",
					"ORDER BY\r\n",
					"    2 DESC"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"SELECT * FROM \r\n",
					"    odw_standardised_db.horizon_nsip_data"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#### Trace Horizon data to Harmonised"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"SELECT DISTINCT\r\n",
					"    caseCreatedDate\r\n",
					"    ,projectName\r\n",
					"    ,projectstatus\r\n",
					"    ,examtimetablepublishstatus\r\n",
					"    ,sector\r\n",
					"    ,projectType\r\n",
					"    ,stage\r\n",
					"    ,caseReference\r\n",
					"    ,horizoncasenumber\r\n",
					"    ,projectLocation\r\n",
					"    ,projectEmailAddress\r\n",
					"    ,twitteraccountname\r\n",
					"    ,region\r\n",
					"    ,easting\r\n",
					"    ,northing\r\n",
					"    ,transboundary\r\n",
					"    ,welshLanguage\r\n",
					"    ,exasize\r\n",
					"    ,mapZoomLevel\r\n",
					"    ,projectDescription\r\n",
					"    ,sos\r\n",
					"    ,tene\r\n",
					"    ,anticipatedDateOfSubmission\r\n",
					"    ,dateProjectAppearsOnWebsite\r\n",
					"    ,dateOfDCOAcceptance\r\n",
					"    ,anticipatedDateOfSubmission\r\n",
					"    ,dateOfDCOSubmission\r\n",
					"    ,dateOfRepresentationPeriodOpen\r\n",
					"    ,dateOfRelevantRepresentationClose\r\n",
					"    ,dateRRepAppearOnWebsite\r\n",
					"    ,confirmedStartOfExamination\r\n",
					"    ,dateTimeExaminationEnds\r\n",
					"    ,stage4ExtensionToExamCloseDate\r\n",
					"    ,stage5ExtensionToRecommendationDeadline\r\n",
					"    ,dateOfRecommendations\r\n",
					"    ,confirmedDateOfDecision\r\n",
					"    ,stage5ExtensionToDecisionDeadline\r\n",
					"    ,dateProjectWithdrawn\r\n",
					"    ,section46Notification\r\n",
					"    ,datePINSFirstNotifiedOfProject\r\n",
					"    ,screeningOpinionSought\r\n",
					"    ,screeningOpinionIssued\r\n",
					"    ,scopingOpinionSought\r\n",
					"    ,scopingOpinionIssued\r\n",
					"    ,deadlineForAcceptanceDecision\r\n",
					"    ,dateSection58NoticeReceived\r\n",
					"    ,preliminaryMeetingStartDate\r\n",
					"    ,deadlineForCloseOfExamination\r\n",
					"    ,deadlineForSubmissionOfRecommendation\r\n",
					"    ,deadlineForDecision\r\n",
					"    ,jRPeriodEndDate\r\n",
					"    ,extensionToDateRelevantRepresentationsClose\r\n",
					"    ,summary\r\n",
					"    ,promotername\r\n",
					"    ,applicantfirstname\r\n",
					"    ,applicantlastname\r\n",
					"    ,addressLine1\r\n",
					"    ,addressLine2\r\n",
					"    ,addressTown\r\n",
					"    ,addressCounty\r\n",
					"    ,postcode\r\n",
					"    ,applicantemailaddress\r\n",
					"    ,applicantwebaddress\r\n",
					"    ,applicantphonenumber\r\n",
					"    ,applicantdescriptionofproject\r\n",
					"    ,casenodeid\r\n",
					"FROM\r\n",
					"    odw_standardised_db.horizon_nsip_data\r\n",
					"WHERE\r\n",
					"     horizoncasenumber = '3222228'"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"SELECT\r\n",
					"    caseCreatedDate\r\n",
					"    ,projectName\r\n",
					"    ,publishStatus\r\n",
					"    ,examTimetablePublishStatus\r\n",
					"    ,sector\r\n",
					"    ,projectType\r\n",
					"    ,stage\r\n",
					"    ,caseReference\r\n",
					"    ,caseId\r\n",
					"    ,projectLocation\r\n",
					"    ,projectEmailAddress\r\n",
					"    ,twitteraccountname\r\n",
					"    ,regions\r\n",
					"    ,easting\r\n",
					"    ,northing\r\n",
					"    ,transboundary\r\n",
					"    ,welshLanguage\r\n",
					"    ,exasize\r\n",
					"    ,mapZoomLevel\r\n",
					"    ,projectDescription\r\n",
					"    ,secretaryOfState\r\n",
					"    ,tene\r\n",
					"    ,anticipatedDateOfSubmission\r\n",
					"    ,dateProjectAppearsOnWebsite\r\n",
					"    ,dateOfDCOAcceptance\r\n",
					"    ,anticipatedDateOfSubmission\r\n",
					"    ,dateOfDCOSubmission\r\n",
					"    ,dateOfRepresentationPeriodOpen\r\n",
					"    ,dateOfRelevantRepresentationClose\r\n",
					"    ,dateRRepAppearOnWebsite\r\n",
					"    ,confirmedStartOfExamination\r\n",
					"    ,dateTimeExaminationEnds\r\n",
					"    ,stage4ExtensionToExamCloseDate\r\n",
					"    ,stage5ExtensionToRecommendationDeadline\r\n",
					"    ,dateOfRecommendations\r\n",
					"    ,confirmedDateOfDecision\r\n",
					"    ,stage5ExtensionToDecisionDeadline\r\n",
					"    ,dateProjectWithdrawn\r\n",
					"    ,section46Notification\r\n",
					"    ,datePINSFirstNotifiedOfProject\r\n",
					"    ,screeningOpinionSought\r\n",
					"    ,screeningOpinionIssued\r\n",
					"    ,scopingOpinionSought\r\n",
					"    ,scopingOpinionIssued\r\n",
					"    ,deadlineForAcceptanceDecision\r\n",
					"    ,dateSection58NoticeReceived\r\n",
					"    ,preliminaryMeetingStartDate\r\n",
					"    ,deadlineForCloseOfExamination\r\n",
					"    ,deadlineForSubmissionOfRecommendation\r\n",
					"    ,deadlineForDecision\r\n",
					"    ,jRPeriodEndDate\r\n",
					"    ,extensionToDateRelevantRepresentationsClose\r\n",
					"    --,summary\r\n",
					"    ,promotername\r\n",
					"    ,applicantfirstname\r\n",
					"    ,applicantlastname\r\n",
					"    ,addressLine1\r\n",
					"    ,addressLine2\r\n",
					"    ,addressTown\r\n",
					"    ,addressCounty\r\n",
					"    ,postcode\r\n",
					"    ,applicantemailaddress\r\n",
					"    ,applicantwebaddress\r\n",
					"    ,applicantphonenumber\r\n",
					"    ,applicantdescriptionofproject\r\n",
					"    ,casenodeid\r\n",
					"FROM\r\n",
					"    odw_harmonised_db.nsip_project\r\n",
					"WHERE\r\n",
					"     caseid = '3222228'\r\n",
					"order BY\r\n",
					"    ingestiondate DESC"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### Horizon and Service Bus data successfully combined and flags set appropriately"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"SELECT\r\n",
					"    caseId\r\n",
					"    ,count(*)\r\n",
					"FROM\r\n",
					"    odw_harmonised_db.nsip_project\r\n",
					"WHERE\r\n",
					"    ODTSourceSystem = 'Horizon'\r\n",
					"GROUP BY\r\n",
					"    caseId\r\n",
					"ORDER BY\r\n",
					"    2 desc"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"SELECT\r\n",
					"    caseId\r\n",
					"    ,count(*)\r\n",
					"FROM\r\n",
					"    odw_harmonised_db.nsip_project\r\n",
					"WHERE\r\n",
					"    ODTSourceSystem = 'ODT'\r\n",
					"GROUP BY\r\n",
					"    caseId\r\n",
					"ORDER BY\r\n",
					"    2 desc"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"SELECT\r\n",
					"    *\r\n",
					"FROM\r\n",
					"    odw_harmonised_db.nsip_project\r\n",
					"WHERE\r\n",
					"     caseid = '100000913'\r\n",
					"order BY\r\n",
					"    ingestiondate DESC"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#### Data updated in curated correctly"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"SELECT\r\n",
					"    *\r\n",
					"FROM\r\n",
					"    odw_curated_db.nsip_project\r\n",
					"WHERE\r\n",
					"     caseid = '100000913'"
				],
				"execution_count": null
			}
		]
	}
}