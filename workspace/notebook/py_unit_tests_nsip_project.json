{
	"name": "py_unit_tests_nsip_project",
	"properties": {
		"folder": {
			"name": "utils/unit-tests"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "9b0a0aee-f8fb-4180-8343-90172a4d087e"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw",
				"name": "pinssynspodw",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import json\r\n",
					"from pyspark.sql.types import *\r\n",
					"from pyspark.sql import DataFrame\r\n",
					"import pprint"
				],
				"execution_count": 15
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"entity_name: str = 'nsip-project'\r\n",
					"std_db_name: str = 'odw_standardised_db'\r\n",
					"hrm_db_name: str = 'odw_harmonised_db'\r\n",
					"curated_db_name: str = 'odw_curated_db'\r\n",
					"## new curated database\r\n",
					"curated_db_migration_name: str = 'odw_curated_migration_db'\r\n",
					"std_table_name: str = 'sb_nsip_project'\r\n",
					"hrm_table_name: str = 'sb_nsip_project'\r\n",
					"hrm_table_final: str = 'nsip_project'\r\n",
					"curated_table_name: str = 'nsip_data'"
				],
				"execution_count": 16
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"storage_account: str = mssparkutils.notebook.run('/utils/py_utils_get_storage_account')\r\n",
					"path_to_orchestration_file: str = \"abfss://odw-config@\"+storage_account+\"orchestration/orchestration.json\""
				],
				"execution_count": 17
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def get_incremental_key(entity_name: str, storage_account: str, path_to_orchestration_file: str) -> str:\r\n",
					"    # getting the incremental key from the odw-config/orchestration\r\n",
					"    df: DataFrame = spark.read.option(\"multiline\",\"true\").json(path_to_orchestration_file)\r\n",
					"    definitions: list = json.loads(df.toJSON().first())['definitions']\r\n",
					"    definition: dict = next((d for d in definitions if entity_name == d['Source_Filename_Start']), None)\r\n",
					"    return definition['Harmonised_Incremental_Key'] if definition and 'Harmonised_Incremental_Key' in definition else None"
				],
				"execution_count": 18
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def create_spark_schema(db_name: str, entity_name: str) -> StructType:\r\n",
					"    incremental_key: str = get_incremental_key(entity_name, storage_account, path_to_orchestration_file) if db_name == 'odw_harmonised_db' else None\r\n",
					"    schema = mssparkutils.notebook.run(\"/py_create_spark_schema\", 30, {\"db_name\": db_name, \"entity_name\": entity_name, \"incremental_key\": incremental_key})\r\n",
					"    spark_schema = StructType.fromJson(json.loads(schema))\r\n",
					"    return spark_schema"
				],
				"execution_count": 19
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def create_spark_dataframe() -> DataFrame:\r\n",
					"    spark_dataframe: DataFrame = spark.createDataFrame([], schema=create_spark_schema(db_name, entity_name))\r\n",
					"    return spark_dataframe"
				],
				"execution_count": 20
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Define the harmonise table that only includes horizon data, and the latest record per primary id.\r\n",
					"def harmonise_df_hzn(hrm_table: str) -> DataFrame:\r\n",
					"    df_harmonise_only_hzn: DataFrame = spark.sql(f\"\"\"\r\n",
					"    select *\r\n",
					"    from {hrm_db_name}.{hrm_table_final} tbl_1\r\n",
					"    where SourceSystem='Horizon'\r\n",
					"\tand tbl_1.IngestionDate = (select max(IngestionDate) from {hrm_db_name}.{hrm_table_final} tbl_2  WHERE tbl_1.caseid = tbl_2.caseid group by caseid)\r\n",
					"    \"\"\")\r\n",
					"\r\n",
					"    return df_harmonise_only_hzn"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"sb_std_schema = create_spark_schema(std_db_name, entity_name)\r\n",
					"sb_std_table_schema = spark.table(f\"{std_db_name}.{std_table_name}\").schema\r\n",
					"sb_hrm_schema = create_spark_schema(hrm_db_name, entity_name)\r\n",
					"sb_hrm_table_schema = spark.table(f\"{hrm_db_name}.{hrm_table_name}\").schema"
				],
				"execution_count": 21
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"def extract_schema_structure(schema: StructType) -> dict:\r\n",
					"    def extract_field(field):\r\n",
					"        if isinstance(field.dataType, StructType):\r\n",
					"            return {field.name: {subfield.name: str(subfield.dataType) for subfield in field.dataType.fields}}\r\n",
					"        elif isinstance(field.dataType, ArrayType):\r\n",
					"            element_type = field.dataType.elementType\r\n",
					"            if isinstance(element_type, StructType):\r\n",
					"                return {field.name: {subfield.name: str(subfield.dataType) for subfield in element_type.fields}}\r\n",
					"            else:\r\n",
					"                return {field.name: f'array<{str(element_type)}>'}\r\n",
					"        else:\r\n",
					"            return {field.name: str(field.dataType)}\r\n",
					"    \r\n",
					"    result = {}\r\n",
					"    for field in schema.fields:\r\n",
					"        result.update(extract_field(field))\r\n",
					"    return result"
				],
				"execution_count": 22
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def test_compare_schemas(schema1: StructType, schema2: StructType) -> bool:\r\n",
					"    structure1: dict = extract_schema_structure(schema1)\r\n",
					"    structure2: dict = extract_schema_structure(schema2)\r\n",
					"    \r\n",
					"    differences: list[tuple] = []\r\n",
					"    \r\n",
					"    all_fields: set = set(structure1.keys()).union(set(structure2.keys()))\r\n",
					"    \r\n",
					"    for field in all_fields:\r\n",
					"        if field not in structure1:\r\n",
					"            differences.append((field, \"Field not in schema1\", structure2[field]))\r\n",
					"        elif field not in structure2:\r\n",
					"            differences.append((field, structure1[field], \"Field not in schema2\"))\r\n",
					"        else:\r\n",
					"            if structure1[field] != structure2[field]:\r\n",
					"                if isinstance(structure1[field], dict) and isinstance(structure2[field], dict):\r\n",
					"                    subfields: set = set(structure1[field].keys()).union(set(structure2[field].keys()))\r\n",
					"                    for subfield in subfields:\r\n",
					"                        if subfield not in structure1[field]:\r\n",
					"                            differences.append((f\"{field}.{subfield}\", \"Field not in schema1\", structure2[field][subfield]))\r\n",
					"                        elif subfield not in structure2[field]:\r\n",
					"                            differences.append((f\"{field}.{subfield}\", structure1[field][subfield], \"Field not in schema2\"))\r\n",
					"                        elif structure1[field][subfield] != structure2[field][subfield]:\r\n",
					"                            differences.append((f\"{field}.{subfield}\", structure1[field][subfield], structure2[field][subfield]))\r\n",
					"                else:\r\n",
					"                    differences.append((field, structure1[field], structure2[field]))\r\n",
					"    \r\n",
					"    if differences:\r\n",
					"        # Create a Spark DataFrame to display the differences\r\n",
					"        differences_df: DataFrame = spark.createDataFrame(differences, [\"Field\", \"Schema 1\", \"Schema 2\"])\r\n",
					"        display(differences_df)\r\n",
					"        return False\r\n",
					"    else:\r\n",
					"        return True"
				],
				"execution_count": 23
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def test_std_same_rows_hrm(std_table: str, hrm_table: str) -> tuple[int, int, bool]:\r\n",
					"    std_table_full: str = f\"{std_db_name}.{std_table}\"\r\n",
					"    hrm_table_full: str = f\"{hrm_db_name}.{hrm_table}\"\r\n",
					"    std_count: int = spark.table(std_table_full).count()\r\n",
					"    hrm_count: int = spark.table(hrm_table_full).count()\r\n",
					"    return (std_count, hrm_count, std_count == hrm_count)"
				],
				"execution_count": 24
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def test_curated_row_count(hrm_table_final: str, curated_table: str) -> tuple[int, int, bool]:\r\n",
					"    hrm_table_full: str = f\"{hrm_db_name}.{hrm_table_final}\"\r\n",
					"    curated_table_full: str = f\"{curated_db_name}.{curated_table_name}\"\r\n",
					"    hrm_count: int = spark.sql(f\"select * from {hrm_table_full} where IsActive = 'Y'\").count()\r\n",
					"    curated_count: int = spark.table(curated_table_full).count()\r\n",
					"    return (hrm_count, curated_count, hrm_count == curated_count)"
				],
				"execution_count": 25
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Compare schemas"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"std_schema_correct: bool = test_compare_schemas(sb_std_schema, sb_std_table_schema)\r\n",
					"print(f\"Service bus standardised schema correct: {std_schema_correct}\\nTable: {std_db_name}.{std_table_name}\\nDifferences shown above (if any)\")\r\n",
					"hrm_schema_correct: bool = test_compare_schemas(sb_hrm_schema, sb_hrm_table_schema)\r\n",
					"print(f\"Service bus harmonised schema correct: {hrm_schema_correct}\\nTable: {hrm_db_name}.{hrm_table_name}\\nDifferences shown above (if any)\")"
				],
				"execution_count": 26
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Compare service bus standardised with harmonised\r\n",
					"Should be the same count"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"standardised_count, harmonised_count, counts_match = test_std_same_rows_hrm(std_table_name, hrm_table_name)\r\n",
					"print(f\"Standardised Count: {standardised_count: ,}\\nHarmonised Count: {harmonised_count: ,}\\nCounts match: {counts_match}\")"
				],
				"execution_count": 27
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"SELECT\r\n",
					"    *\r\n",
					"FROM\r\n",
					"    odw_standardised_db.sb_nsip_project as sb\r\n",
					"    LEFT OUTER JOIN odw_harmonised_db.sb_nsip_project as hrm\r\n",
					"        ON sb.caseId = hrm.caseId\r\n",
					"        AND sb.ingested_datetime = hrm.IngestionDate\r\n",
					"WHERE\r\n",
					"    hrm.caseId Is null\r\n",
					"LIMIT 1"
				],
				"execution_count": 36
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Compare final harmonised table (if combined with Horizon) with curated table\r\n",
					"Comparing where IsActive = Y in harmonised = curated row count"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"harmonised_final_count, curated_count, counts_match = test_curated_row_count(hrm_table_final, curated_table_name)\r\n",
					"print(f\"Harmonised Final Count: {harmonised_final_count: ,}\\nCurated Count: {curated_count: ,}\\nCounts match: {counts_match}\")"
				],
				"execution_count": 28
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### The below tests are for the curated_migration_db table\r\n",
					"##### Test 1:  Counts match in harmonised and curated\r\n",
					""
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def test_counts_hrm_cur(hrm_table: str, cur_table: str) -> tuple[int, int, bool]:   \r\n",
					"\r\n",
					"    ## Define harmonise and curated dataframes\r\n",
					"\r\n",
					"    df_harmonise_hzn = harmonise_df_hzn(hrm_table)\r\n",
					"\r\n",
					"    df_curated:DataFrame =  spark.sql(f\"\"\"\r\n",
					"    select *\r\n",
					"    from {curated_db_migration_name}.{curated_table_name}\"\"\")\r\n",
					"    \r\n",
					"    ## calculate counts\r\n",
					"\r\n",
					"    hrm_count = df_harmonise_hzn.count()\r\n",
					"    cur_count = df_curated.count()\r\n",
					"    return (hrm_count, cur_count, hrm_count == cur_count)"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"harmonised_count, curated_count, counts_match = test_counts_hrm_cur(hrm_table_final, curated_table_name)\r\n",
					"print(f\"Harmonised Count: {harmonised_count: ,}\\nCurated Count: {curated_count: ,}\\nCounts match: {counts_match}\")"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Test 2: Check curated layer only has horizon data and unique records (distinct primary ids)"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def test_curated_unique_hzn_only(cur_table: str) -> tuple[bool,int,int,bool]: \r\n",
					"\r\n",
					"    df_curated:DataFrame =  spark.sql(f\"\"\"\r\n",
					"    select *\r\n",
					"    from {curated_db_migration_name}.{curated_table_name}\"\"\")\r\n",
					"\r\n",
					"    count_not_hzn_records: int = df_curated.filter(\"SourceSystem != 'horizon'\").count()\r\n",
					"\r\n",
					"    total_count = df_curated.count()\r\n",
					"\r\n",
					"    #Count of distinct caseid (primary id)\r\n",
					"    distinct_count = df_curated.select(\"caseid\").distinct().count()\r\n",
					"\r\n",
					"\r\n",
					"    return (count_not_hzn_records == 0,total_count,distinct_count,total_count == distinct_count)\r\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"no_horizon_records, total_curated_count, distinct_curated_count,counts_match = test_curated_unique_hzn_only(curated_table_name)\r\n",
					"print(f\"There is no other records than Horizon: {no_horizon_records:}\\nCurated Count: {total_curated_count: ,}\\n Distinct Curated Count: {distinct_curated_count:,}\\nCounts match: {counts_match}\")"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Test 3: Check we are not loosing caseids, only rows, as we are getting the latest ingestionDate"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def test_hrm_to_curated_no_dropping_primary_ids_only_records(hrm_table_final: str, curated_table_name: str) -> bool:\r\n",
					"    df: DataFrame = spark.sql(f\"\"\"\r\n",
					"    select caseid\r\n",
					"    from {hrm_db_name}.{hrm_table_final}\r\n",
					"    where sourcesystem = 'Horizon'\r\n",
					"    and caseid not in\r\n",
					"    (\r\n",
					"        select caseid\r\n",
					"        from {curated_db_migration_name}.{curated_table_name}\r\n",
					"    )\r\n",
					"    \"\"\")\r\n",
					"\r\n",
					"    return df.count() == 0"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"print(f\"Horizon to curated no caseids are dropped: {test_hrm_to_curated_no_dropping_primary_ids_only_records(hrm_table_final, curated_table_name)}\")"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Trace service bus data from standardised to curated\r\n",
					"We need to make sure the data has loaded through correctly. To do this efficiently, we will select a sample record and check that the data is maintained as it moves through the medallian architecture."
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"SELECT * FROM odw_standardised_db.sb_nsip_project"
				],
				"execution_count": 38
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"SELECT * FROM odw_standardised_db.sb_nsip_project \r\n",
					"WHERE caseid = 100000504 order by ingested_datetime desc"
				],
				"execution_count": 41
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"SELECT * FROM odw_harmonised_db.sb_nsip_project WHERE caseid = 100000504 \r\n",
					"Order by IngestionDate desc"
				],
				"execution_count": 43
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#### Check array fields are aggregated properly\r\n",
					"Go and find examples"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"SELECT\r\n",
					"    horizoncasenumber,\r\n",
					"    COUNT(DISTINCT region)\r\n",
					"FROM\r\n",
					"    odw_standardised_db.horizon_nsip_data\r\n",
					"WHERE\r\n",
					"    ingested_datetime = (SELECT MAX(ingested_datetime) FROM odw_standardised_db.horizon_nsip_data)\r\n",
					"GROUP BY\r\n",
					"    horizoncasenumber\r\n",
					"HAVING\r\n",
					"    COUNT(DISTINCT region) > 1\r\n",
					"ORDER BY\r\n",
					"    2 DESC"
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"SELECT * FROM \r\n",
					"    odw_standardised_db.horizon_nsip_data"
				],
				"execution_count": 4
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#### Trace Horizon data to Harmonised"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"SELECT DISTINCT\r\n",
					"    caseCreatedDate\r\n",
					"    ,projectName\r\n",
					"    ,projectstatus\r\n",
					"    ,examtimetablepublishstatus\r\n",
					"    ,sector\r\n",
					"    ,projectType\r\n",
					"    ,stage\r\n",
					"    ,caseReference\r\n",
					"    ,horizoncasenumber\r\n",
					"    ,projectLocation\r\n",
					"    ,projectEmailAddress\r\n",
					"    ,twitteraccountname\r\n",
					"    ,region\r\n",
					"    ,easting\r\n",
					"    ,northing\r\n",
					"    ,transboundary\r\n",
					"    ,welshLanguage\r\n",
					"    ,exasize\r\n",
					"    ,mapZoomLevel\r\n",
					"    ,projectDescription\r\n",
					"    ,sos\r\n",
					"    ,tene\r\n",
					"    ,anticipatedDateOfSubmission\r\n",
					"    ,dateProjectAppearsOnWebsite\r\n",
					"    ,dateOfDCOAcceptance\r\n",
					"    ,anticipatedDateOfSubmission\r\n",
					"    ,dateOfDCOSubmission\r\n",
					"    ,dateOfRepresentationPeriodOpen\r\n",
					"    ,dateOfRelevantRepresentationClose\r\n",
					"    ,dateRRepAppearOnWebsite\r\n",
					"    ,confirmedStartOfExamination\r\n",
					"    ,dateTimeExaminationEnds\r\n",
					"    ,stage4ExtensionToExamCloseDate\r\n",
					"    ,stage5ExtensionToRecommendationDeadline\r\n",
					"    ,dateOfRecommendations\r\n",
					"    ,confirmedDateOfDecision\r\n",
					"    ,stage5ExtensionToDecisionDeadline\r\n",
					"    ,dateProjectWithdrawn\r\n",
					"    ,section46Notification\r\n",
					"    ,datePINSFirstNotifiedOfProject\r\n",
					"    ,screeningOpinionSought\r\n",
					"    ,screeningOpinionIssued\r\n",
					"    ,scopingOpinionSought\r\n",
					"    ,scopingOpinionIssued\r\n",
					"    ,deadlineForAcceptanceDecision\r\n",
					"    ,dateSection58NoticeReceived\r\n",
					"    ,preliminaryMeetingStartDate\r\n",
					"    ,deadlineForCloseOfExamination\r\n",
					"    ,deadlineForSubmissionOfRecommendation\r\n",
					"    ,deadlineForDecision\r\n",
					"    ,jRPeriodEndDate\r\n",
					"    ,extensionToDateRelevantRepresentationsClose\r\n",
					"    ,summary\r\n",
					"    ,promotername\r\n",
					"    ,applicantfirstname\r\n",
					"    ,applicantlastname\r\n",
					"    ,addressLine1\r\n",
					"    ,addressLine2\r\n",
					"    ,addressTown\r\n",
					"    ,addressCounty\r\n",
					"    ,postcode\r\n",
					"    ,applicantemailaddress\r\n",
					"    ,applicantwebaddress\r\n",
					"    ,applicantphonenumber\r\n",
					"    ,applicantdescriptionofproject\r\n",
					"    ,casenodeid\r\n",
					"FROM\r\n",
					"    odw_standardised_db.horizon_nsip_data\r\n",
					"WHERE\r\n",
					"     horizoncasenumber = '3222228'"
				],
				"execution_count": 25
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"SELECT\r\n",
					"    caseCreatedDate\r\n",
					"    ,projectName\r\n",
					"    ,publishStatus\r\n",
					"    ,examTimetablePublishStatus\r\n",
					"    ,sector\r\n",
					"    ,projectType\r\n",
					"    ,stage\r\n",
					"    ,caseReference\r\n",
					"    ,caseId\r\n",
					"    ,projectLocation\r\n",
					"    ,projectEmailAddress\r\n",
					"    ,twitteraccountname\r\n",
					"    ,regions\r\n",
					"    ,easting\r\n",
					"    ,northing\r\n",
					"    ,transboundary\r\n",
					"    ,welshLanguage\r\n",
					"    ,exasize\r\n",
					"    ,mapZoomLevel\r\n",
					"    ,projectDescription\r\n",
					"    ,secretaryOfState\r\n",
					"    ,tene\r\n",
					"    ,anticipatedDateOfSubmission\r\n",
					"    ,dateProjectAppearsOnWebsite\r\n",
					"    ,dateOfDCOAcceptance\r\n",
					"    ,anticipatedDateOfSubmission\r\n",
					"    ,dateOfDCOSubmission\r\n",
					"    ,dateOfRepresentationPeriodOpen\r\n",
					"    ,dateOfRelevantRepresentationClose\r\n",
					"    ,dateRRepAppearOnWebsite\r\n",
					"    ,confirmedStartOfExamination\r\n",
					"    ,dateTimeExaminationEnds\r\n",
					"    ,stage4ExtensionToExamCloseDate\r\n",
					"    ,stage5ExtensionToRecommendationDeadline\r\n",
					"    ,dateOfRecommendations\r\n",
					"    ,confirmedDateOfDecision\r\n",
					"    ,stage5ExtensionToDecisionDeadline\r\n",
					"    ,dateProjectWithdrawn\r\n",
					"    ,section46Notification\r\n",
					"    ,datePINSFirstNotifiedOfProject\r\n",
					"    ,screeningOpinionSought\r\n",
					"    ,screeningOpinionIssued\r\n",
					"    ,scopingOpinionSought\r\n",
					"    ,scopingOpinionIssued\r\n",
					"    ,deadlineForAcceptanceDecision\r\n",
					"    ,dateSection58NoticeReceived\r\n",
					"    ,preliminaryMeetingStartDate\r\n",
					"    ,deadlineForCloseOfExamination\r\n",
					"    ,deadlineForSubmissionOfRecommendation\r\n",
					"    ,deadlineForDecision\r\n",
					"    ,jRPeriodEndDate\r\n",
					"    ,extensionToDateRelevantRepresentationsClose\r\n",
					"    --,summary\r\n",
					"    ,promotername\r\n",
					"    ,applicantfirstname\r\n",
					"    ,applicantlastname\r\n",
					"    ,addressLine1\r\n",
					"    ,addressLine2\r\n",
					"    ,addressTown\r\n",
					"    ,addressCounty\r\n",
					"    ,postcode\r\n",
					"    ,applicantemailaddress\r\n",
					"    ,applicantwebaddress\r\n",
					"    ,applicantphonenumber\r\n",
					"    ,applicantdescriptionofproject\r\n",
					"    ,casenodeid\r\n",
					"FROM\r\n",
					"    odw_harmonised_db.nsip_project\r\n",
					"WHERE\r\n",
					"     caseid = '3222228'\r\n",
					"order BY\r\n",
					"    ingestiondate DESC"
				],
				"execution_count": 24
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### Horizon and Service Bus data successfully combined and flags set appropriately"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"SELECT\r\n",
					"    caseId\r\n",
					"    ,count(*)\r\n",
					"FROM\r\n",
					"    odw_harmonised_db.nsip_project\r\n",
					"WHERE\r\n",
					"    ODTSourceSystem = 'Horizon'\r\n",
					"GROUP BY\r\n",
					"    caseId\r\n",
					"ORDER BY\r\n",
					"    2 desc"
				],
				"execution_count": 28
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"SELECT\r\n",
					"    caseId\r\n",
					"    ,count(*)\r\n",
					"FROM\r\n",
					"    odw_harmonised_db.nsip_project\r\n",
					"WHERE\r\n",
					"    ODTSourceSystem = 'ODT'\r\n",
					"GROUP BY\r\n",
					"    caseId\r\n",
					"ORDER BY\r\n",
					"    2 desc"
				],
				"execution_count": 29
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"SELECT\r\n",
					"    *\r\n",
					"FROM\r\n",
					"    odw_harmonised_db.nsip_project\r\n",
					"WHERE\r\n",
					"     caseid = '100000913'\r\n",
					"order BY\r\n",
					"    ingestiondate DESC"
				],
				"execution_count": 32
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#### Data updated in curated correctly"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"SELECT\r\n",
					"    *\r\n",
					"FROM\r\n",
					"    odw_curated_db.nsip_data\r\n",
					"WHERE\r\n",
					"     caseid = '100000913'"
				],
				"execution_count": 33
			}
		]
	}
}