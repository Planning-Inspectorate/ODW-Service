{
	"name": "py_load_horizon",
	"properties": {
		"folder": {
			"name": "utils"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "1b8fdf42-6da9-4d06-baa0-550f20c4468d"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": true,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw",
				"name": "pinssynspodw",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import asyncio\r\n",
					"import nest_asyncio\r\n",
					"import tracemalloc\r\n",
					"tracemalloc.start()\r\n",
					"\r\n",
					"from pyspark.sql import SparkSession\r\n",
					"from notebookutils import mssparkutils\r\n",
					"import json\r\n",
					"import calendar\r\n",
					"from datetime import datetime, timedelta, date\r\n",
					"import pandas as pd\r\n",
					"import os\r\n",
					"\r\n",
					"storage_account=mssparkutils.notebook.run('/utils/py_utils_get_storage_account')\r\n",
					"raw_container = \"abfss://odw-raw@\" + storage_account"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%run 1-odw-raw-to-standardised/Fileshare/SAP_HR/py_1_raw_to_standardised_hr_functions"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%run 1-odw-raw-to-standardised/py_raw_to_std"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%run utils/py_mount_storage"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"horizon_files = [\r\n",
					"    \"NSIPData\",\r\n",
					"    \"NSIPAdvice\",\r\n",
					"    \"HorizonFolder\",\r\n",
					"    \"HorizonAppealsFolder\",\r\n",
					"    \"HorizonAppealsEvent\",\r\n",
					"    \"HorizonAppealsDocumentMetadata\",\r\n",
					"    \"ExaminationTimetable\",\r\n",
					"    \"DocumentMetadata\",\r\n",
					"    \"CaseInvolvement\",\r\n",
					"    \"NSIPRelevantRepresentation\",\r\n",
					"    \"S62AViewCaseBasicData\",\r\n",
					"    \"S62AViewCaseDates\",\r\n",
					"    \"S62AViewCaseExtendedData\",\r\n",
					"    \"S62AViewCaseOfficers\",\r\n",
					"    \"S62AViewCases\"\r\n",
					"]"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"date_folder='2024-11-20'\r\n",
					"source_folder='Horizon'\r\n",
					"source_frequency_folder=''\r\n",
					"specific_file=''\r\n",
					"isMultiLine = True\r\n",
					"delete_existing_table=False\r\n",
					"dataAttribute = \"\"\r\n",
					"source_path = f\"{raw_container}{source_folder}/{date_folder}\""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"jobId = mssparkutils.env.getJobId()\r\n",
					"mount_storage(path=source_path)"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Load horizon standardised\r\n",
					"\r\n",
					"Sequentially, this took around 12 mins for all tables to be loaded"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"# for file in horizon_files:\r\n",
					"#     print(f\"Ingesting data for {file}\")\r\n",
					"#     mssparkutils.notebook.run(path=\"1-odw-raw-to-standardised/py_raw_to_std\", \r\n",
					"#         timeout_seconds=600, \r\n",
					"#         arguments={\r\n",
					"#             \"source_folder\": source_folder, \r\n",
					"#             \"specific_file\": file, \r\n",
					"#             \"date_folder\": date_folder\r\n",
					"#             }\r\n",
					"#         )"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"async def load_horizon_async():\r\n",
					"    tasks: list = [\r\n",
					"        ingest_horizon(date_folder=date_folder) for file in horizon_files\r\n",
					"    ]\r\n",
					"    await asyncio.gather(*tasks)\r\n",
					"\r\n",
					"nest_asyncio.apply()\r\n",
					"loop = asyncio.get_event_loop()\r\n",
					"loop.run_until_complete(load_horizon_async())"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"unmount_storage()"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# async def test1():\r\n",
					"#     print(\"Hello1\")\r\n",
					"\r\n",
					"# async def test2():\r\n",
					"#     print(\"Hello2\")\r\n",
					"\r\n",
					"# async def main():\r\n",
					"#     tasks: list = [test1(), test2()]\r\n",
					"#     await asyncio.gather(*tasks)\r\n",
					"\r\n",
					"# nest_asyncio.apply()\r\n",
					"# loop = asyncio.get_event_loop()\r\n",
					"# loop.run_until_complete(main())"
				],
				"execution_count": null
			}
		]
	}
}