{
	"name": "nsip_representation",
	"properties": {
		"description": "Creation of the Relevant Representation Curated layer for use by ODT",
		"folder": {
			"name": "archive/odw-curated"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw34",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "c5fcaeef-6025-4a1d-8463-5601becff425"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw34",
				"name": "pinssynspodw34",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw34",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Import Packages"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.sql.functions import *\n",
					"from pyspark.sql.types import *\n",
					"from pyspark.sql import DataFrame\n",
					"import json"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%run utils/py_logging_decorator"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"db_name: str = \"odw_curated_db\"\n",
					"entity_name: str = \"nsip-representation\"\n",
					"table_name: str = \"odw_curated_db.nsip_representation\""
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Create a view for the data, joining harmonised tables where necessary"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"outputs_hidden": false
					},
					"collapsed": false
				},
				"source": [
					"df = spark.sql(\"\"\"\r\n",
					"\r\n",
					"SELECT DISTINCT\r\n",
					"\r\n",
					"    RR.representationId\r\n",
					"    ,RR.webreference As referenceId\r\n",
					"    ,RR.examinationLibraryRef\r\n",
					"    ,RR.caseRef\r\n",
					"    ,RR.caseId\r\n",
					"    ,CASE\r\n",
					"        WHEN RR.status = 'New' OR RR.status = 'In Progress' THEN\r\n",
					"            'awaiting_review'\r\n",
					"        WHEN RR.status = 'Complete' THEN\r\n",
					"            'valid'\r\n",
					"        WHEN RR.status = 'Do Not Publish' THEN\r\n",
					"            'invalid'\r\n",
					"        ELSE \r\n",
					"            LOWER(RR.status)\r\n",
					"    END AS status\r\n",
					"    ,COALESCE(RR.originalRepresentation, '') AS originalRepresentation\r\n",
					"    ,RR.redacted\r\n",
					"    ,RR.redactedRepresentation\r\n",
					"    ,RR.redactedBy\r\n",
					"    ,RR.redactedNotes\r\n",
					"    ,CASE\r\n",
					"        WHEN RR.representationFrom = 'An Organisation' THEN \r\n",
					"            'ORGANISATION'\r\n",
					"        -- WHEN RR.representationFrom = 'Members of the Public/Businesses' and SU2.Organisation IS NOT NULL THEN\r\n",
					"        --     'ORGANISATION'\r\n",
					"        WHEN RR.representationFrom = 'Members of the Public/Businesses' THEN\r\n",
					"            'PERSON'\r\n",
					"        -- WHEN RR.representationFrom = 'Another Individual or Organisation' and SU2.Organisation IS NOT NULL THEN\r\n",
					"        --      'ORGANISATION'\r\n",
					"        WHEN RR.representationFrom = 'Another Individual or Organisation' THEN\r\n",
					"            'PERSON'\r\n",
					"        WHEN RR.representationFrom = 'Myself' THEN\r\n",
					"            'PERSON'\r\n",
					"        ELSE\r\n",
					"            RR.representationFrom\r\n",
					"    END AS representationFrom\r\n",
					"    ,RR.representedId\r\n",
					"    ,RR.representativeId\r\n",
					"    ,CASE\r\n",
					"        WHEN RR.representationFrom = 'An Organisation' THEN\r\n",
					"            'ORGANISATION'\r\n",
					"        -- WHEN RR.representationFrom = 'Members of the Public/Businesses' AND SU1.Organisation IS NOT NULL THEN\r\n",
					"        --     'ORGANISATION'\r\n",
					"        WHEN RR.representationFrom = 'Members of the Public/Businesses' THEN\r\n",
					"            'PERSON'\r\n",
					"        -- WHEN RR.representationFrom = 'Another Individual or Organisation' AND SU1.Organisation IS NOT NULL THEN \r\n",
					"        --     'ORGANISATION'\r\n",
					"        WHEN RR.representationFrom = 'Another Individual or Organisation' THEN\r\n",
					"            'PERSON'\r\n",
					"        WHEN RR.representationFrom = 'Myself' THEN\r\n",
					"            'PERSON'\r\n",
					"        ELSE\r\n",
					"            RR.registerFor\r\n",
					"    END AS registerFor\r\n",
					"    ,CASE\r\n",
					"        WHEN RR.representationType = 'Other Statutory Consultees' THEN\r\n",
					"            'Statutory Consultees'\r\n",
					"        ELSE\r\n",
					"            RR.representationType\r\n",
					"        END AS representationType\r\n",
					"        ,RR.dateReceived\r\n",
					"        ,RR.attachmentIds\r\n",
					"\r\n",
					"\r\n",
					"FROM odw_harmonised_db.nsip_representation AS RR\r\n",
					"\r\n",
					"-- INNER JOIN odw_curated_db.nsip_project AS NP -- project\r\n",
					"--     ON RR.caseRef = NP.caseReference\r\n",
					"\r\n",
					"WHERE RR.IsActive = 'Y'\r\n",
					"    AND RR.caseRef IS NOT NULL\r\n",
					"\"\"\"\r\n",
					")\r\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Define schema"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"schema = mssparkutils.notebook.run(\"py_create_spark_schema\", 30, {\"db_name\": db_name, \"entity_name\": entity_name})\n",
					"spark_schema = StructType.fromJson(json.loads(schema))"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"data = spark.createDataFrame(df.rdd, schema=spark_schema)"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Write the data to the curated table"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"logInfo(f\"Writing to {table_name}\")\n",
					"df.write.mode(\"overwrite\").format(\"parquet\").saveAsTable(table_name)\n",
					"logInfo(f\"Written to {table_name}\")"
				],
				"execution_count": null
			}
		]
	}
}