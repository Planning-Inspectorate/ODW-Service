{
	"name": "document_tree_dim",
	"properties": {
		"folder": {
			"name": "odw-harmonised/DocumentTree"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodwpr",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "fcb61ea9-6484-439f-8333-131a2bb47ceb"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodwpr",
				"name": "pinssynspodwpr",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodwpr",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.2",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Check for new, updated or deleted data\n",
					"- This script checks for new, updated or deleted data by checking the source data (horizon tables) against the target (odw_harmonised_db.casework tables)\n",
					"- **New Data:** where an main Reference in the source does not exist in the target, then NewData flag is set to 'Y'\n",
					"- **Updated data:** Comparison occurs on Reference Fields in source and in target where the row hash is different i.e. there is a change in one of the columns. NewData flag is set to 'Y'\n",
					"- **Deleted data:** where an Reference info in the target exists but the same identifyers don't exist in the source. DeletedData flag is set to 'Y'\n",
					"\n",
					"## View document_tree_dim is created"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"-- Build document_tree_dim table\r\n",
					"-- Gets modified or deleted from source rows\r\n",
					"\r\n",
					"CREATE OR REPLACE TEMPORARY VIEW document_tree_dim_new\r\n",
					"\r\n",
					"     AS\r\n",
					"\r\n",
					"-- gets data that matches of SourceID and flags that it is modified based on a row (md5) hash. Flags as \"NewData\"\r\n",
					"-- gets data that is in the target but not in source. Flags as \"DeletedData\"\r\n",
					"\r\n",
					"SELECT DISTINCT\r\n",
					"    CASE\r\n",
					"        WHEN T1.casereference IS NULL\r\n",
					"        THEN T3.DocumentCaseReferenceID\r\n",
					"        ELSE NULL\r\n",
					"    END                             AS DTreeID,\r\n",
					"    T1.OwnerID AS OwnerID,\r\n",
					"    T1.ParentID AS ParentID,\r\n",
					"    T1.DataID AS DataID,\r\n",
					"    T1.Name AS Name,\r\n",
					"    T1.OriginOwnerID AS OriginOwnerID,\r\n",
					"    T1.OriginDataID AS OriginDataID,\r\n",
					"    T1.UserID AS UserID,\r\n",
					"    T1.GroupID AS GroupID,\r\n",
					"    T1.UPermissions AS UPermissions,\r\n",
					"    T1.GPermissions AS GPermissions,\r\n",
					"    T1.WPermissions AS WPermissions,\r\n",
					"    T1.SPermissions AS SPermissions,\r\n",
					"    T1.ACLCount AS ACLCount,\r\n",
					"    T1.PermID AS PermID,\r\n",
					"    T1.DataType AS DataType,\r\n",
					"    T1.CreatedBy AS CreatedBy,\r\n",
					"    T1.CreateDate AS CreateDate,\r\n",
					"    T1.ModifiedBy AS ModifiedBy,\r\n",
					"    T1.ModifyDate AS ModifyDate,\r\n",
					"    T1.MaxVers AS MaxVers,\r\n",
					"    T1.Reserved AS Reserved,\r\n",
					"    T1.ReservedBy AS ReservedBy,\r\n",
					"    T1.ReservedDate AS ReservedDate,\r\n",
					"    T1.VersionNum AS VersionNum,\r\n",
					"    T1.DComment AS DComment,\r\n",
					"    T1.DCategory AS DCategory,\r\n",
					"    T1.SubType AS SubType,\r\n",
					"    T1.ExAtt1 AS ExAtt1,\r\n",
					"    T1.ExAtt2 AS ExAtt2,\r\n",
					"    T1.Ordering AS Ordering,\r\n",
					"    T1.Major AS Major,\r\n",
					"    T1.Minor AS Minor,\r\n",
					"    T1.ReleaseRef AS ReleaseRef,\r\n",
					"    T1.ChildCount AS ChildCount,\r\n",
					"    T1.AssignedTo AS AssignedTo,\r\n",
					"    T1.DateAssigned AS DateAssigned,\r\n",
					"    T1.DateEffective AS DateEffective,\r\n",
					"    T1.DateExpiration AS DateExpiration,\r\n",
					"    T1.DateDue AS DateDue,\r\n",
					"    T1.DateStarted AS DateStarted,\r\n",
					"    T1.DateCompleted AS DateCompleted,\r\n",
					"    T1.Status AS Status,\r\n",
					"    T1.Priority AS Priority,\r\n",
					"    T1.GIF AS GIF,\r\n",
					"    T1.ExtendedData AS ExtendedData,\r\n",
					"    T1.Catalog AS Catalog,\r\n",
					"    T1.CacheExpiration AS CacheExpiration,\r\n",
					"    T1.Deleted                      AS Deleted,\r\n",
					"    T1.GUID                         AS GUID,\r\n",
					"    T2.SourceSystemID               AS SourceSystemID,\r\n",
					"    to_timestamp(T1.expected_from)  AS IngestionDate,\r\n",
					"    NULL                            AS ValidTo,\r\n",
					"    md5(\r\n",
					"        concat(\r\n",
					"            IFNULL(T1.OwnerID,'.'),\r\n",
					"            IFNULL(T1.ParentID,'.'),\r\n",
					"            IFNULL(T1.DataID,'.'),\r\n",
					"            IFNULL(T1.Name,'.'),\r\n",
					"            IFNULL(T1.OriginOwnerID,'.'),\r\n",
					"            IFNULL(T1.OriginDataID,'.'),\r\n",
					"            IFNULL(T1.UserID,'.'),\r\n",
					"            IFNULL(T1.GroupID,'.'),\r\n",
					"            IFNULL(T1.UPermissions,'.'),\r\n",
					"            IFNULL(T1.GPermissions,'.'),\r\n",
					"            IFNULL(T1.WPermissions,'.'),\r\n",
					"            IFNULL(T1.SPermissions,'.'),\r\n",
					"            IFNULL(T1.ACLCount,'.'),\r\n",
					"            IFNULL(T1.PermID,'.'),\r\n",
					"            IFNULL(T1.DataType,'.'),\r\n",
					"            IFNULL(T1.CreatedBy,'.'),\r\n",
					"            IFNULL(T1.CreateDate,'.'),\r\n",
					"            IFNULL(T1.ModifiedBy,'.'),\r\n",
					"            IFNULL(T1.ModifyDate,'.'),\r\n",
					"            IFNULL(T1.MaxVers,'.'),\r\n",
					"            IFNULL(T1.Reserved,'.'),\r\n",
					"            IFNULL(T1.ReservedBy,'.'),\r\n",
					"            IFNULL(T1.ReservedDate,'.'),\r\n",
					"            IFNULL(T1.VersionNum,'.'),\r\n",
					"            IFNULL(T1.DComment,'.'),\r\n",
					"            IFNULL(T1.DCategory,'.'),\r\n",
					"            IFNULL(T1.SubType,'.'),\r\n",
					"            IFNULL(T1.ExAtt1,'.'),\r\n",
					"            IFNULL(T1.ExAtt2,'.'),\r\n",
					"            IFNULL(T1.Ordering,'.'),\r\n",
					"            IFNULL(T1.Major,'.'),\r\n",
					"            IFNULL(T1.Minor,'.'),\r\n",
					"            IFNULL(T1.ReleaseRef,'.'),\r\n",
					"            IFNULL(T1.ChildCount,'.'),\r\n",
					"            IFNULL(T1.AssignedTo,'.'),\r\n",
					"            IFNULL(T1.DateAssigned,'.'),\r\n",
					"            IFNULL(T1.DateEffective,'.'),\r\n",
					"            IFNULL(T1.DateExpiration,'.'),\r\n",
					"            IFNULL(T1.DateDue,'.'),\r\n",
					"            IFNULL(T1.DateStarted,'.'),\r\n",
					"            IFNULL(T1.DateCompleted,'.'),\r\n",
					"            IFNULL(T1.Status,'.'),\r\n",
					"            IFNULL(T1.Priority,'.'),\r\n",
					"            IFNULL(T1.GIF,'.'),\r\n",
					"            IFNULL(T1.ExtendedData,'.'),\r\n",
					"            IFNULL(T1.Catalog,'.'),\r\n",
					"            IFNULL(T1.CacheExpiration,'.'),\r\n",
					"            IFNULL(T1.Deleted,'.'),\r\n",
					"            IFNULL(T1.GUID,'.')\r\n",
					"        ))                          AS RowID, -- this hash should contain all the defining fields\r\n",
					"    'Y'                             AS IsActive,\r\n",
					"    T3.IsActive                     AS HistoricIsActive\r\n",
					"\r\n",
					"FROM odw_standardised_db.document_case_reference T1\r\n",
					"LEFT JOIN odw_harmonised_db.main_sourcesystem_fact T2 \r\n",
					"    ON \"DocumentTree\" = T2.Description AND \r\n",
					"        T2.IsActive = 'Y'\r\n",
					"FULL JOIN odw_harmonised_db.document_tree_dim T3 \r\n",
					"    ON T1.casereference = T3.CaseReference AND \r\n",
					"        T3.IsActive = 'Y'\r\n",
					"WHERE\r\n",
					"    -- flags new data        \r\n",
					"    (CASE\r\n",
					"        WHEN T1.casereference = T3.CaseReference AND md5(\r\n",
					"            concat(\r\n",
					"                IFNULL(T1.OwnerID,'.'),\r\n",
					"                IFNULL(T1.ParentID,'.'),\r\n",
					"                IFNULL(T1.DataID,'.'),\r\n",
					"                IFNULL(T1.Name,'.'),\r\n",
					"                IFNULL(T1.OriginOwnerID,'.'),\r\n",
					"                IFNULL(T1.OriginDataID,'.'),\r\n",
					"                IFNULL(T1.UserID,'.'),\r\n",
					"                IFNULL(T1.GroupID,'.'),\r\n",
					"                IFNULL(T1.UPermissions,'.'),\r\n",
					"                IFNULL(T1.GPermissions,'.'),\r\n",
					"                IFNULL(T1.WPermissions,'.'),\r\n",
					"                IFNULL(T1.SPermissions,'.'),\r\n",
					"                IFNULL(T1.ACLCount,'.'),\r\n",
					"                IFNULL(T1.PermID,'.'),\r\n",
					"                IFNULL(T1.DataType,'.'),\r\n",
					"                IFNULL(T1.CreatedBy,'.'),\r\n",
					"                IFNULL(T1.CreateDate,'.'),\r\n",
					"                IFNULL(T1.ModifiedBy,'.'),\r\n",
					"                IFNULL(T1.ModifyDate,'.'),\r\n",
					"                IFNULL(T1.MaxVers,'.'),\r\n",
					"                IFNULL(T1.Reserved,'.'),\r\n",
					"                IFNULL(T1.ReservedBy,'.'),\r\n",
					"                IFNULL(T1.ReservedDate,'.'),\r\n",
					"                IFNULL(T1.VersionNum,'.'),\r\n",
					"                IFNULL(T1.DComment,'.'),\r\n",
					"                IFNULL(T1.DCategory,'.'),\r\n",
					"                IFNULL(T1.SubType,'.'),\r\n",
					"                IFNULL(T1.ExAtt1,'.'),\r\n",
					"                IFNULL(T1.ExAtt2,'.'),\r\n",
					"                IFNULL(T1.Ordering,'.'),\r\n",
					"                IFNULL(T1.Major,'.'),\r\n",
					"                IFNULL(T1.Minor,'.'),\r\n",
					"                IFNULL(T1.ReleaseRef,'.'),\r\n",
					"                IFNULL(T1.ChildCount,'.'),\r\n",
					"                IFNULL(T1.AssignedTo,'.'),\r\n",
					"                IFNULL(T1.DateAssigned,'.'),\r\n",
					"                IFNULL(T1.DateEffective,'.'),\r\n",
					"                IFNULL(T1.DateExpiration,'.'),\r\n",
					"                IFNULL(T1.DateDue,'.'),\r\n",
					"                IFNULL(T1.DateStarted,'.'),\r\n",
					"                IFNULL(T1.DateCompleted,'.'),\r\n",
					"                IFNULL(T1.Status,'.'),\r\n",
					"                IFNULL(T1.Priority,'.'),\r\n",
					"                IFNULL(T1.GIF,'.'),\r\n",
					"                IFNULL(T1.ExtendedData,'.'),\r\n",
					"                IFNULL(T1.Catalog,'.'),\r\n",
					"                IFNULL(T1.CacheExpiration,'.'),\r\n",
					"                IFNULL(T1.Deleted,'.'),\r\n",
					"                IFNULL(T1.GUID,'.')\r\n",
					"            )) <> T3.RowID  -- same record, changed data\r\n",
					"        THEN 'Y'\r\n",
					"        WHEN T3.CaseReference IS NULL -- new record\r\n",
					"        THEN 'Y'\r\n",
					"    ELSE 'N'\r\n",
					"    END  = 'Y' )\r\n",
					"    AND T1.casereference IS NOT NULL\r\n",
					"    AND T1.expected_from = (SELECT MAX(expected_from) FROM odw_standardised_db.document_case_reference)\r\n",
					";"
				],
				"execution_count": 1
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Dataset is created that contains changed data and corresponding target data\n",
					"- This script combines data that has been updated, Deleted or is new, with corresponding target data\n",
					"- View **casework_all_appeals_new** is unioned to the target data filter to only those rows where changes have been detected\n",
					"## View document_tree_dim_changed_rows is created"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"-- Create new and updated dataset\r\n",
					"\r\n",
					"CREATE OR REPLACE TEMPORARY VIEW document_tree_dim_changed_rows\r\n",
					"\r\n",
					"    AS\r\n",
					"\r\n",
					"-- gets updated, deleted and new rows \r\n",
					"SELECT \r\n",
					"    DocumentCaseReferenceID,\r\n",
					"    CaseUniqueId,\r\n",
					"    CaseNodeId,\r\n",
					"    CaseReference,\r\n",
					"    CaseParentId,\r\n",
					"    CaseCreateDate,\r\n",
					"    CaseCloseDate,\r\n",
					"    CaseCloseStatus,\r\n",
					"    CaseOwnerId,\r\n",
					"    ChangeTypeStartedAt,\r\n",
					"    ChangeTypeStartedBy,\r\n",
					"    CaseTypeId,\r\n",
					"    CaseLockedAt,\r\n",
					"    CaseLockedBy,\r\n",
					"    CaseLockedFor,\r\n",
					"    SourceSystemID,\r\n",
					"    IngestionDate,\r\n",
					"    ValidTo,\r\n",
					"    RowID,\r\n",
					"    IsActive\r\n",
					"    \r\n",
					"\r\n",
					"From document_tree_dim_new WHERE HistoricIsActive = 'Y' or HistoricIsActive IS NULL\r\n",
					"\r\n",
					"    UNION ALL\r\n",
					"\r\n",
					"-- gets original versions of updated rows so we can update EndDate and set IsActive flag to 'N'\r\n",
					"SELECT\r\n",
					"    DocumentCaseReferenceID,\r\n",
					"    CaseUniqueId,\r\n",
					"    CaseNodeId,\r\n",
					"    CaseReference,\r\n",
					"    CaseParentId,\r\n",
					"    CaseCreateDate,\r\n",
					"    CaseCloseDate,\r\n",
					"    CaseCloseStatus,\r\n",
					"    CaseOwnerId,\r\n",
					"    ChangeTypeStartedAt,\r\n",
					"    ChangeTypeStartedBy,\r\n",
					"    CaseTypeId,\r\n",
					"    CaseLockedAt,\r\n",
					"    CaseLockedBy,\r\n",
					"    CaseLockedFor,\r\n",
					"    SourceSystemID,\r\n",
					"    IngestionDate,\r\n",
					"    ValidTo,\r\n",
					"    RowID,\r\n",
					"    IsActive\r\n",
					"    \r\n",
					"FROM odw_harmonised_db.document_tree_dim\r\n",
					"WHERE CaseReference IN (SELECT CaseReference FROM document_tree_dim_new WHERE NSIPProjectInfoInternalID IS NULL) AND IsActive = 'Y'; "
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"\n",
					"CREATE OR REPLACE TEMPORARY VIEW Loading_month\n",
					"\n",
					"    AS\n",
					"\n",
					"SELECT DISTINCT\n",
					"    IngestionDate AS IngestionDate,\n",
					"    to_timestamp(date_sub(IngestionDate,1)) AS ClosingDate,\n",
					"    'Y' AS IsActive\n",
					"\n",
					"FROM document_tree_dim_new;\n",
					"\n",
					"CREATE OR REPLACE TEMPORARY VIEW document_tree_dim_changed_rows_final\n",
					"\n",
					"    AS\n",
					"\n",
					"SELECT \n",
					"    DocumentCaseReferenceID,\n",
					"    CaseUniqueId,\n",
					"    CaseNodeId,\n",
					"    CaseReference,\n",
					"    CaseParentId,\n",
					"    CaseCreateDate,\n",
					"    CaseCloseDate,\n",
					"    CaseCloseStatus,\n",
					"    CaseOwnerId,\n",
					"    ChangeTypeStartedAt,\n",
					"    ChangeTypeStartedBy,\n",
					"    CaseTypeId,\n",
					"    CaseLockedAt,\n",
					"    CaseLockedBy,\n",
					"    CaseLockedFor,\n",
					"    T1.SourceSystemID,\n",
					"    T1.IngestionDate,\n",
					"    T1.ValidTo,\n",
					"    T1.RowID,\n",
					"    T1.IsActive,\n",
					"    T2.ClosingDate\n",
					"FROM document_tree_dim_changed_rows T1\n",
					"FULL JOIN Loading_month T2 ON T1.IsActive = T2.IsActive"
				],
				"execution_count": 3
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					""
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# View document_tree_dim_changed_rows is used in a merge (Upsert) statement into the target table\n",
					"- **WHEN MATCHED** ON the surrogate Key (i.e. AllAppealsID), EndDate is set to today -1 day and the IsActive flag is set to 'N'\n",
					"- **WHEN NOT MATCHED** ON the surrogate Key, insert rows\n",
					"## Table odw_harmonised_db.document_tree_dim is updated"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"-- merge into dim table\r\n",
					"\r\n",
					"MERGE INTO odw_harmonised_db.document_tree_dim AS Target\r\n",
					"USING document_tree_dim_changed_rows_final AS Source\r\n",
					"\r\n",
					"ON Source.NSIPProjectInfoInternalID = Target.NSIPProjectInfoInternalID\r\n",
					"\r\n",
					"-- For Updates existing rows\r\n",
					"\r\n",
					"WHEN MATCHED\r\n",
					"    THEN \r\n",
					"    UPDATE SET\r\n",
					"    Target.ValidTo = to_timestamp(ClosingDate),\r\n",
					"    Target.IsActive = 'N'\r\n",
					"\r\n",
					"-- Insert completely new rows\r\n",
					"\r\n",
					"WHEN NOT MATCHED \r\n",
					"    THEN INSERT (\r\n",
					"        DocumentCaseReferenceID,\r\n",
					"        CaseUniqueId,\r\n",
					"        CaseNodeId,\r\n",
					"        CaseReference,\r\n",
					"        CaseParentId,\r\n",
					"        CaseCreateDate,\r\n",
					"        CaseCloseDate,\r\n",
					"        CaseCloseStatus,\r\n",
					"        CaseOwnerId,\r\n",
					"        ChangeTypeStartedAt,\r\n",
					"        ChangeTypeStartedBy,\r\n",
					"        CaseTypeId,\r\n",
					"        CaseLockedAt,\r\n",
					"        CaseLockedBy,\r\n",
					"        CaseLockedFor,\r\n",
					"        SourceSystemID,\r\n",
					"        IngestionDate,\r\n",
					"        ValidTo,\r\n",
					"        RowID,\r\n",
					"        IsActive)\r\n",
					"    VALUES (\r\n",
					"        Source.DocumentCaseReferenceID,\r\n",
					"        Source.CaseUniqueId,\r\n",
					"        Source.CaseNodeId,\r\n",
					"        Source.CaseReference,\r\n",
					"        Source.CaseParentId,\r\n",
					"        Source.CaseCreateDate,\r\n",
					"        Source.CaseCloseDate,\r\n",
					"        Source.CaseCloseStatus,\r\n",
					"        Source.CaseOwnerId,\r\n",
					"        Source.ChangeTypeStartedAt,\r\n",
					"        Source.ChangeTypeStartedBy,\r\n",
					"        Source.CaseTypeId,\r\n",
					"        Source.CaseLockedAt,\r\n",
					"        Source.CaseLockedBy,\r\n",
					"        Source.CaseLockedFor,\r\n",
					"        Source.SourceSystemID,\r\n",
					"        Source.IngestionDate,\r\n",
					"        Source.ValidTo,\r\n",
					"        Source.RowID,\r\n",
					"        Source.IsActive)\r\n",
					"     ;   "
				],
				"execution_count": 4
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Fix the IDs\n",
					"- No auto-increment feature is available in delta tables, therefore we need to create new IDs for the inserted rows\n",
					"- This is done by select the target data and using INSERT OVERWRITE to re-insert the data is a new Row Number\n",
					"## Table odw_harmonised_db.document_tree_dim is updated"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"-- Insert new document_tree_dim\r\n",
					"\r\n",
					"INSERT OVERWRITE odw_harmonised_db.document_tree_dim\r\n",
					"\r\n",
					"SELECT \r\n",
					"    ROW_NUMBER() OVER (ORDER BY DocumentCaseReferenceID NULLS LAST) AS DocumentCaseReferenceID,\r\n",
					"    CaseUniqueId,\r\n",
					"    CaseNodeId,\r\n",
					"    CaseReference,\r\n",
					"    CaseParentId,\r\n",
					"    CaseCreateDate,\r\n",
					"    CaseCloseDate,\r\n",
					"    CaseCloseStatus,\r\n",
					"    CaseOwnerId,\r\n",
					"    ChangeTypeStartedAt,\r\n",
					"    ChangeTypeStartedBy,\r\n",
					"    CaseTypeId,\r\n",
					"    CaseLockedAt,\r\n",
					"    CaseLockedBy,\r\n",
					"    CaseLockedFor,\r\n",
					"    SourceSystemID,\r\n",
					"    IngestionDate,\r\n",
					"    ValidTo,\r\n",
					"    RowID,\r\n",
					"    IsActive\r\n",
					"FROM odw_harmonised_db.document_tree_dim;\r\n",
					""
				],
				"execution_count": 5
			}
		]
	}
}