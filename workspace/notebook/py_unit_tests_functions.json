{
	"name": "py_unit_tests_functions",
	"properties": {
		"folder": {
			"name": "utils/unit-tests"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "f9abbf16-f0dd-4332-acda-ceeae6a9b838"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": true,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw",
				"name": "pinssynspodw",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import json\n",
					"from pyspark.sql.types import *\n",
					"from pyspark.sql import DataFrame\n",
					"import pprint\n",
					"\n",
					"storage_account: str = mssparkutils.notebook.run('/utils/py_utils_get_storage_account')\n",
					"path_to_orchestration_file: str = \"abfss://odw-config@\"+storage_account+\"orchestration/orchestration.json\""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"def get_incremental_key(entity_name: str, storage_account: str, path_to_orchestration_file: str) -> str:\n",
					"    # getting the incremental key from the odw-config/orchestration\n",
					"    df: DataFrame = spark.read.option(\"multiline\",\"true\").json(path_to_orchestration_file)\n",
					"    definitions: list = json.loads(df.toJSON().first())['definitions']\n",
					"    definition: dict = next((d for d in definitions if entity_name == d['Source_Filename_Start']), None)\n",
					"    return definition['Harmonised_Incremental_Key'] if definition and 'Harmonised_Incremental_Key' in definition else None"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def create_spark_schema(db_name: str, entity_name: str, folder_name: str = None, is_servicebus_schema: str = True) -> StructType:\n",
					"    incremental_key: str = get_incremental_key(folder_name if folder_name else entity_name, storage_account, path_to_orchestration_file) if db_name == 'odw_harmonised_db' else None\n",
					"    schema = mssparkutils.notebook.run(\"/py_create_spark_schema\", 30, {\"db_name\": db_name, \"entity_name\": entity_name, \"incremental_key\": incremental_key, \"is_servicebus_schema\": is_servicebus_schema})\n",
					"    spark_schema = StructType.fromJson(json.loads(schema))\n",
					"    return spark_schema"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def create_spark_dataframe() -> DataFrame:\n",
					"    spark_dataframe: DataFrame = spark.createDataFrame([], schema=create_spark_schema(db_name, entity_name))\n",
					"    return spark_dataframe"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def get_dataframe(query: str) -> DataFrame:\n",
					"    return spark.sql(query)"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def compare_dataframes(df1: DataFrame, df2: DataFrame, columns: list) -> bool:\n",
					"    df1_selected = df1.select(columns)\n",
					"    df2_selected = df2.select(columns)\n",
					"    \n",
					"    diff_df = df1_selected.exceptAll(df2_selected).union(df2_selected.exceptAll(df1_selected))\n",
					"    if diff_df.count() == 0:\n",
					"        print(\"DataFrames match for the specified columns.\")\n",
					"        return True\n",
					"    else:\n",
					"        print(\"DataFrames do not match for the specified columns.\")\n",
					"        diff_df.show()\n",
					"        return False"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def extract_schema_structure(schema: StructType) -> dict:\n",
					"    def extract_field(field):\n",
					"        if isinstance(field.dataType, StructType):\n",
					"            return {field.name: {subfield.name: str(subfield.dataType) for subfield in field.dataType.fields}}\n",
					"        elif isinstance(field.dataType, ArrayType):\n",
					"            element_type = field.dataType.elementType\n",
					"            if isinstance(element_type, StructType):\n",
					"                subfield_extract = {}\n",
					"                for subfield in element_type.fields:\n",
					"                    if isinstance(subfield.dataType, ArrayType):\n",
					"                        subfield_extract.update(extract_field(subfield))\n",
					"                    else:\n",
					"                        subfield_extract.update({subfield.name: str(subfield.dataType)})\n",
					"                return {field.name: subfield_extract}\n",
					"            else:\n",
					"                return {field.name: f'array<{str(element_type)}>'}\n",
					"        else:\n",
					"            return {field.name: str(field.dataType)}\n",
					"        \n",
					"    \n",
					"    result = {}\n",
					"    for field in schema.fields:\n",
					"        result.update(extract_field(field))\n",
					"    return result"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def test_compare_schemas(schema1: StructType, schema2: StructType) -> bool:\n",
					"    structure1: dict = extract_schema_structure(schema1)\n",
					"    structure2: dict = extract_schema_structure(schema2)\n",
					"    \n",
					"    differences: list[tuple] = []\n",
					"    \n",
					"    all_fields: set = set(structure1.keys()).union(set(structure2.keys()))\n",
					"    \n",
					"    for field in all_fields:\n",
					"        if field not in structure1:\n",
					"            differences.append((field, \"Field not in schema1\", structure2[field]))\n",
					"        elif field not in structure2:\n",
					"            differences.append((field, structure1[field], \"Field not in schema2\"))\n",
					"        else:\n",
					"            if structure1[field] != structure2[field]:\n",
					"                if isinstance(structure1[field], dict) and isinstance(structure2[field], dict):\n",
					"                    subfields: set = set(structure1[field].keys()).union(set(structure2[field].keys()))\n",
					"                    for subfield in subfields:\n",
					"                        if subfield not in structure1[field]:\n",
					"                            differences.append((f\"{field}.{subfield}\", \"Field not in schema1\", structure2[field][subfield]))\n",
					"                        elif subfield not in structure2[field]:\n",
					"                            differences.append((f\"{field}.{subfield}\", structure1[field][subfield], \"Field not in schema2\"))\n",
					"                        elif structure1[field][subfield] != structure2[field][subfield]:\n",
					"                            differences.append((f\"{field}.{subfield}\", structure1[field][subfield], structure2[field][subfield]))\n",
					"                else:                    \n",
					"                    differences.append((field, structure1[field], structure2[field]))\n",
					"    \n",
					"    if differences:\n",
					"        # Create a Spark DataFrame to display the differences\n",
					"        differences_df: DataFrame = spark.createDataFrame(differences, [\"Field\", \"Schema 1\", \"Schema 2\"])\n",
					"        display(differences_df)\n",
					"        return False\n",
					"    else:\n",
					"        return True"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def test_std_same_rows_hrm(std_table: str, hrm_table: str) -> tuple[int, int, bool]:\n",
					"    std_table_full: str = f\"{std_db_name}.{std_table}\"\n",
					"    hrm_table_full: str = f\"{hrm_db_name}.{hrm_table}\"\n",
					"\n",
					"    # filter standardised df with non-null message_type\n",
					"    std_df: DataFrame = spark.table(std_table_full)\n",
					"\n",
					"    if \"message_type\" in std_df.columns:\n",
					"        std_df = std_df.filter(std_df.message_type.isNotNull() & std_df.message_id.isNotNull())\n",
					"    \n",
					"    std_count: int = std_df.count()\n",
					"    hrm_count: int = spark.table(hrm_table_full).count()\n",
					"\n",
					"    return (std_count, hrm_count, std_count == hrm_count)"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def test_curated_row_count(hrm_table_final: str, curated_table: str, data_model_columns: list = None) -> tuple[int, int, bool]:\n",
					"    hrm_table_full: str = f\"{hrm_db_name}.{hrm_table_final}\"\n",
					"    curated_table_full: str = f\"{curated_db_name}.{curated_table_name}\"\n",
					"    \n",
					"    hrm_df: DataFrame = spark.sql(f\"select * from {hrm_table_full} where IsActive = 'Y'\").drop_duplicates()\n",
					"    \n",
					"    if data_model_columns:\n",
					"        hrm_df = hrm_df.select(data_model_columns).drop_duplicates()\n",
					"        \n",
					"    hrm_count: int = hrm_df.count()\n",
					"\n",
					"    curated_count: int = spark.table(curated_table_full).count()\n",
					"    \n",
					"    return (hrm_count, curated_count, hrm_count == curated_count)"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def differentiate_std_and_hrm(std_table_full: str, hrm_table_full: str, data_model_columns: list):\n",
					"    # filter standardised df with non-null message_type and exclude 'Delete' message_type since it doesn't add a new row in hrm\n",
					"    std_df: DataFrame = spark.table(std_table_full)\n",
					"    if \"message_type\" in std_df.columns:\n",
					"        std_df = std_df.filter((std_df.message_type != 'Delete') & (std_df.message_type.isNotNull()))\n",
					"\n",
					"    hrm_df  = spark.table(hrm_table_full)\n",
					"\n",
					"    # Find rows in the original table that are not in the new table\n",
					"    missing_rows_in_std = hrm_df.select(data_model_columns).subtract(std_df.select(data_model_columns))\n",
					"    if missing_rows_in_std.count() > 0:\n",
					"        print(f\"Data in Harmonised not in Standardised: {missing_rows_in_std.count()} rows\")\n",
					"        display(missing_rows_in_std)\n",
					"\n",
					"    missing_rows_in_hrm = std_df.select(data_model_columns).subtract(hrm_df.select(data_model_columns))\n",
					"    if missing_rows_in_hrm.count() > 0:\n",
					"        print(f\"Data in Standardised not in Harmonised: {missing_rows_in_hrm.count()} rows\")\n",
					"        display(missing_rows_in_hrm)"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Define the harmonise table that only includes horizon data, and the latest record per primary id.\r\n",
					"##SourceColumns are not named consistently across different data types\r\n",
					"\r\n",
					"def harmonise_df_hzn(hrm_db: str, hrm_table: str, primary_key: str, sourceColumn: str = \"sourceSystem\") -> DataFrame:\r\n",
					"    df_harmonise_only_hzn: DataFrame = spark.sql(f\"\"\"\r\n",
					"    select *\r\n",
					"    from {hrm_db}.{hrm_table} tbl_1\r\n",
					"    where LOWER({sourceColumn})='horizon'\r\n",
					"    and tbl_1.IngestionDate = (select max(IngestionDate) from {hrm_db}.{hrm_table} tbl_2  WHERE tbl_1.{primary_key} = tbl_2.{primary_key} group by {primary_key})\r\n",
					"    \"\"\")\r\n",
					"\r\n",
					"    return df_harmonise_only_hzn"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def test_counts_hrm_cur(hrm_db: str, hrm_table: str, curated_db: str, curated_table: str, primary_key: str, sourceColumn: str = \"sourceSystem\") -> tuple[int, int, bool]:   \r\n",
					"\r\n",
					"    ## Define harmonise and curated dataframes\r\n",
					"\r\n",
					"    df_harmonise_hzn = harmonise_df_hzn(hrm_db, hrm_table, primary_key, sourceColumn)\r\n",
					"\r\n",
					"    df_curated: DataFrame =  spark.sql(f\"SELECT * FROM {curated_db}.{curated_table}\")\r\n",
					"    \r\n",
					"    ## calculate counts\r\n",
					"\r\n",
					"    hrm_count = df_harmonise_hzn.count()\r\n",
					"    cur_count = df_curated.count()\r\n",
					"    return (hrm_count, cur_count, hrm_count == cur_count)"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def test_curated_unique_hzn_only(curated_db: str, curated_table: str, primary_key: str, sourceColumn: str = \"sourceSystem\") -> tuple[bool,int,int,bool]: \r\n",
					"\r\n",
					"    df_curated: DataFrame = spark.sql(f\"SELECT * FROM {curated_db}.{curated_table}\")\r\n",
					"    count_not_hzn_records: int = df_curated.filter(f\"{sourceColumn} != 'horizon' AND {sourceColumn} != 'Horizon'\").count()\r\n",
					"\r\n",
					"    total_count = df_curated.count()\r\n",
					"\r\n",
					"    #Count of distinct caseid (primary id)\r\n",
					"    distinct_count = df_curated.select(primary_key).distinct().count()\r\n",
					"\r\n",
					"\r\n",
					"    return (count_not_hzn_records == 0, total_count, distinct_count, total_count == distinct_count)\r\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def test_hrm_to_curated_no_dropping_primary_ids_only_records(hrm_db: str, hrm_table: str, curated_db: str, curated_table: str, primary_key: str, sourceColumn: str = \"sourceSystem\" ) -> bool:\r\n",
					"    df: DataFrame = spark.sql(f\"\"\"\r\n",
					"                                SELECT {primary_key}\r\n",
					"                                FROM {hrm_db}.{hrm_table}\r\n",
					"                                WHERE LOWER({sourceColumn}) = 'horizon'\r\n",
					"                                AND {primary_key} NOT IN\r\n",
					"                                (\r\n",
					"                                    SELECT {primary_key}\r\n",
					"                                    FROM {curated_db}.{curated_table}\r\n",
					"                                )\r\n",
					"                            \"\"\")\r\n",
					"\r\n",
					"    return df.count() == 0"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def test_sb_std_to_sb_hrm_no_dropping_records(sb_std_table: str, sb_hrm_table: str, primary_key: str) -> bool:\n",
					"    df: DataFrame = spark.sql(f\"\"\"\n",
					"    select {primary_key}\n",
					"    from {std_db_name}.{sb_std_table}\n",
					"    where {primary_key} not in\n",
					"    (\n",
					"        select {primary_key}\n",
					"        from {hrm_db_name}.{sb_hrm_table}\n",
					"    ) \n",
					"    and message_id is not null\n",
					"    \"\"\")\n",
					"    return df.count() == 0"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def test_sb_hrm_to_hrm_final_no_dropping_records(sb_hrm_table: str, hrm_table_final: str, primary_key: str) -> bool:\n",
					"    df: DataFrame = spark.sql(f\"\"\"\n",
					"    select {primary_key}\n",
					"    from {hrm_db_name}.{sb_hrm_table}\n",
					"    where {primary_key} not in\n",
					"    (\n",
					"        select {primary_key}\n",
					"        from {hrm_db_name}.{hrm_table_final}\n",
					"    )\n",
					"    \"\"\")\n",
					"\n",
					"    return df.count() == 0"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def test_hrm_to_curated_no_dropping_records(hrm_table_final: str, curated_table_name: str, primary_key: str) -> bool:\n",
					"    df: DataFrame = spark.sql(f\"\"\"\n",
					"    select {primary_key}\n",
					"    from {hrm_db_name}.{hrm_table_final}\n",
					"    where IsActive = 'Y'\n",
					"    and {primary_key} not in\n",
					"    (\n",
					"        select {primary_key}\n",
					"        from {curated_db_name}.{curated_table_name}\n",
					"    )\n",
					"    \"\"\")\n",
					"\n",
					"    return df.count() == 0"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def test_horizon_to_hrm_final_no_dropping_records(horizon_std_table_name: str, hrm_table_final: str, primary_key:str) -> bool:\n",
					"    df: DataFrame = spark.sql(f\"\"\"\n",
					"    select {primary_key}\n",
					"    from {std_db_name}.{horizon_std_table_name}\n",
					"    where ingested_datetime = (select max(ingested_datetime) from {std_db_name}.{horizon_std_table_name})\n",
					"    and {primary_key} not in\n",
					"    (\n",
					"        select {primary_key}\n",
					"        from {hrm_db_name}.{hrm_table_final}\n",
					"    )\n",
					"    \"\"\")\n",
					"\n",
					"    return df.count() == 0"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def test_aie_std_to_hrm_no_dropping_records(aie_std_table_name: str, aie_hrm_table_name: str) -> bool:\n",
					"    df: DataFrame = aie_std_documentIds.subtract(aie_hrm_documentIds)\n",
					"    return df.count() == 0"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def test_aie_hrm_to_hrm_final_no_dropping_records(aie_hrm_table_name: str, hrm_table_final: str) -> bool:\n",
					"    if aie_appeals_documents_count > 0:\n",
					"        df: DataFrame = aie_hrm_documentIds.subtract(hrm_final_documentIds)\n",
					"        return df.count() == 0\n",
					"    else:\n",
					"        return True"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def test_document_row_counts_match(hrm_table_final: str, curated_table_name: str) -> DataFrame:\n",
					"    # Count rows per documentId in harmonised final table\n",
					"    hrm_final_counts: DataFrame = hrm_final_df_active.groupBy(\"documentId\").agg(F.count(\"*\").alias(\"hrm_final_count\"))\n",
					"\n",
					"    # Count rows per documentId in curated table\n",
					"    curated_counts: DataFrame = curated_df.groupBy(\"documentId\").agg(F.count(\"*\").alias(\"curated_count\"))\n",
					"\n",
					"    # Join both tables on documentId to compare the counts\n",
					"    comparison_df: DataFrame = hrm_final_counts.join(curated_counts, \"documentId\", how=\"outer\")\n",
					"\n",
					"    comparison_df: DataFrame = comparison_df.withColumn(\"count_difference\", F.col(\"hrm_final_count\") - F.col(\"curated_count\"))\n",
					"\n",
					"    non_zero_differences: DataFrame = comparison_df.filter(\"count_difference > 0\")\n",
					"\n",
					"    return non_zero_differences.count() == 0"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Unit tests for Migration Tables"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def test_hzn_and_curated_count_matched(hzn_table: str, curated_table: str, hzn_primary_key: str, cur_primary_key: str = '') -> bool: \n",
					"\n",
					"    if cur_primary_key == '':\n",
					"        cur_primary_key = hzn_primary_key\n",
					"\n",
					"    df_hzn: DataFrame = spark.sql(f\"\"\"\n",
					"                                SELECT DISTINCT t1.{hzn_primary_key}\n",
					"                                FROM odw_standardised_db.{hzn_table} t1\n",
					"                                INNER JOIN odw_standardised_db.horizon_nsip_data t2\n",
					"                                ON t1.caseReference = t2.caseReference\n",
					"                                WHERE t1.expected_from = (\n",
					"                                        SELECT MAX(expected_from)\n",
					"                                        FROM odw_standardised_db.{hzn_table}\n",
					"                                    )\n",
					"                                AND t2.expected_from = (\n",
					"                                        SELECT MAX(expected_from)\n",
					"                                        FROM odw_standardised_db.horizon_nsip_data\n",
					"                                    )\n",
					"                            \"\"\")\n",
					"\n",
					"    df_cur: DataFrame = spark.sql(f\"\"\"\n",
					"                                SELECT DISTINCT {cur_primary_key}\n",
					"                                FROM odw_curated_migration_db.{curated_table}\n",
					"                            \"\"\")\n",
					"\n",
					"    return df_hzn.count() == df_cur.count()"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def test_hzn_to_curated_no_record_dropped(hzn_table: str, curated_table: str, hzn_primary_key: str, cur_primary_key: str = '') -> bool:\n",
					"    \n",
					"    if cur_primary_key == '':\n",
					"        cur_primary_key = hzn_primary_key\n",
					"    \n",
					"    df: DataFrame = spark.sql(f\"\"\"\n",
					"                                SELECT DISTINCT t1.{hzn_primary_key}\n",
					"                                FROM odw_standardised_db.{hzn_table} t1\n",
					"                                INNER JOIN odw_standardised_db.horizon_nsip_data t2\n",
					"                                ON t1.caseReference = t2.caseReference\n",
					"                                WHERE t1.expected_from = (\n",
					"                                        SELECT MAX(expected_from)\n",
					"                                        FROM odw_standardised_db.{hzn_table}\n",
					"                                    )\n",
					"                                AND t2.expected_from = (\n",
					"                                        SELECT MAX(expected_from)\n",
					"                                        FROM odw_standardised_db.horizon_nsip_data\n",
					"                                    )\n",
					"                                AND t1.{hzn_primary_key} NOT IN (\n",
					"                                        SELECT DISTINCT {cur_primary_key}\n",
					"                                        FROM odw_curated_migration_db.{curated_table}\n",
					"                                    )\n",
					"                            \"\"\")\n",
					"\n",
					"    return df.count() == 0"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def test_no_project_from_horizon_dropped(std_db: str, curated_db_migration: str, horizon_table:str, curated_table_migration:str):\n",
					"    df = spark.sql(f\"\"\"\n",
					"        SELECT *\n",
					"        FROM {std_db}.{horizon_table}\n",
					"        WHERE caseReference NOT IN (\n",
					"            SELECT caseReference FROM {curated_db_migration}.{curated_table_migration}\n",
					"        )\n",
					"        AND expected_from = (\n",
					"            SELECT MAX(expected_from) FROM {std_db}.{horizon_table}\n",
					"        )\n",
					"    \"\"\")\n",
					"\n",
					"    return df.count() == 0"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def test_curated_unique_hzn_only(curated_db: str, curated_table: str, primary_key: str) -> tuple[bool,int,int,bool]: \n",
					"\n",
					"    df_curated: DataFrame = spark.sql(f\"SELECT * FROM {curated_db}.{curated_table}\")\n",
					"\n",
					"    if 'sourceSystem' in df_curated.columns:\n",
					"        count_not_hzn_records: int = df_curated.filter(\"sourceSystem != 'horizon' AND sourceSystem != 'Horizon'\").count()\n",
					"    else:\n",
					"        count_not_hzn_records = 0\n",
					"        \n",
					"    total_count = df_curated.count()\n",
					"\n",
					"    #Count of distinct caseid (primary id)\n",
					"    distinct_count = df_curated.select(primary_key).distinct().count()\n",
					"\n",
					"\n",
					"    return (count_not_hzn_records == 0, total_count, distinct_count, total_count == distinct_count)\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Below are the customised unit tests for document entities only (nsip-document and appeal-document) because of composite primary key"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def test_documents_hzn_and_curated_count_matched(hzn_table: str, curated_table: str) -> bool: \n",
					"    df_hzn: Dataframe = spark.sql(f\"\"\"\n",
					"                                SELECT DISTINCT dataId, name, version\n",
					"                                FROM odw_standardised_db.{hzn_table}\n",
					"                                WHERE expected_from = (\n",
					"                                        SELECT MAX(expected_from)\n",
					"                                        FROM odw_standardised_db.{hzn_table}\n",
					"                                    )\n",
					"                            \"\"\")\n",
					"\n",
					"    df_cur: Dataframe = spark.sql(f\"\"\"\n",
					"                                SELECT DISTINCT documentId, filename, version\n",
					"                                FROM odw_curated_migration_db.{curated_table}\n",
					"                            \"\"\")\n",
					"\n",
					"    return df_hzn.count() == df_cur.count()"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def test_documents_hzn_to_curated_no_record_dropped(hzn_table: str, curated_table: str) -> bool:\n",
					"\n",
					"    df: DataFrame = spark.sql(f\"\"\"\n",
					"                                SELECT DISTINCT\n",
					"                                    MD5(CONCAT(COALESCE(dataId, ''), COALESCE(name, ''), COALESCE(version, '')))\n",
					"                                FROM odw_standardised_db.{hzn_table}\n",
					"                                WHERE expected_from = (\n",
					"                                        SELECT MAX(expected_from)\n",
					"                                        FROM odw_standardised_db.{hzn_table}\n",
					"                                    )\n",
					"                                AND \n",
					"                                    MD5(CONCAT(COALESCE(dataId, ''), COALESCE(name, ''), COALESCE(version, '')))\n",
					"                                    NOT IN (\n",
					"                                        SELECT DISTINCT \n",
					"                                            MD5(CONCAT(COALESCE(documentId, ''), COALESCE(filename, ''), COALESCE(version, '')))\n",
					"                                        FROM odw_curated_migration_db.{curated_table}\n",
					"                                    )\n",
					"                            \"\"\")\n",
					"\n",
					"    return df.count() == 0"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Below are the unit tests for recent changes to the py_sb_std_to_hrm regarding message_ids"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def test_sb_std_to_hrm_no_message_id_dropped(std_table: str, hrm_table: str) -> bool:\r\n",
					"    df: DataFrame = spark.sql(f\"\"\"\r\n",
					"                        SELECT *\r\n",
					"                        FROM {std_table}\r\n",
					"                        WHERE message_id NOT IN (\r\n",
					"                            SELECT message_id\r\n",
					"                            FROM {hrm_table}\r\n",
					"                        )\r\n",
					"                    \"\"\")\r\n",
					"\r\n",
					"    return df.count() == 0\r\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def test_sb_std_to_hrm_no_active_deleted_record(std_table: str, hrm_table: str) -> bool:\n",
					"    df: DataFrame = spark.sql(f\"\"\"\n",
					"                        SELECT *\n",
					"                        FROM {hrm_table}\n",
					"                        WHERE message_id IN (\n",
					"                            SELECT message_id\n",
					"                            FROM {std_table}\n",
					"                            WHERE message_type = 'Delete'\n",
					"                        )\n",
					"                        AND IsActive != 'N'\n",
					"                        AND IngestionDate != ValidTo\n",
					"                    \"\"\")\n",
					"\n",
					"    return df.count() == 0\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from collections import Counter\r\n",
					"\r\n",
					"def test_no_duplicates_in_array_column(curated_db: str, curated_table: str, sourceColumn: str):\r\n",
					"    \r\n",
					"    column_list = spark.sql(f\"SELECT {sourceColumn} AS ids FROM {curated_db}.{curated_table}\").collect()  \r\n",
					"    \r\n",
					"    # Assuming there's only one Row object in the list\r\n",
					"    row = column_list[0]    \r\n",
					"\r\n",
					"    # Get the attachmentIds\r\n",
					"    attachment_ids = row.ids    \r\n",
					"\r\n",
					"    # Count occurrences of each attachmentId\r\n",
					"    id_counts = Counter(attachment_ids)\r\n",
					"\r\n",
					"    for id, count in id_counts.items():\r\n",
					"        if count > 1:\r\n",
					"            return False\r\n",
					"\r\n",
					"    return True  \r\n",
					"        "
				],
				"execution_count": null
			}
		]
	}
}