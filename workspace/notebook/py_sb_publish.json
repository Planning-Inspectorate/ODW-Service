{
	"name": "py_sb_publish",
	"properties": {
		"folder": {
			"name": "service-bus"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "180ffdd9-d608-46ea-98e5-3477f4ab2983"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw",
				"name": "pinssynspodw",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"service_bus=''"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import asyncio\n",
					"from azure.servicebus.aio import ServiceBusClient\n",
					"from azure.servicebus import ServiceBusMessage\n",
					"from azure.identity.aio import DefaultAzureCredential"
				],
				"execution_count": 16
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"FULLY_QUALIFIED_NAMESPACE = \"pins-sb-appeals-bo-dev.servicebus.windows.net\"\n",
					"TOPIC_NAME = \"listed-building\"\n",
					"\n",
					"credential = DefaultAzureCredential()"
				],
				"execution_count": 3
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"FULLY_QUALIFIED_NAMESPACE = \"pins-sb-odw-dev-uks-b9rt9m.servicebus.windows.net\"\n",
					"TOPIC_NAME = \"employee\"\n",
					"\n",
					"credential = DefaultAzureCredential()"
				],
				"execution_count": 17
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"async def send_single_message(sender):\n",
					"    # Create a Service Bus message\n",
					"    message = ServiceBusMessage(\"Single Message\")\n",
					"    # send the message to the topic\n",
					"    await sender.send_messages(message)\n",
					"    print(\"Sent a single message\")"
				],
				"execution_count": 4
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"async def run():\n",
					"    # create a Service Bus client using the credential.\n",
					"    async with ServiceBusClient(\n",
					"        fully_qualified_namespace=FULLY_QUALIFIED_NAMESPACE,\n",
					"        credential=credential,\n",
					"        logging_enable=True) as servicebus_client:\n",
					"        # Get a Topic Sender object to send messages to the topic\n",
					"        sender = servicebus_client.get_topic_sender(topic_name=TOPIC_NAME)\n",
					"        async with sender:\n",
					"            # Send one message\n",
					"            await send_single_message(sender)\n",
					"            # Send a list of messages\n",
					"            # await send_a_list_of_messages(sender)\n",
					"            # # Send a batch of messages\n",
					"            # await send_batch_message(sender)\n",
					"        # Close credential when no longer needed.\n",
					"        await credential.close()\n",
					"\n",
					"await run()\n",
					"print(\"Done sending messages\")\n",
					"print(\"-----------------------\")"
				],
				"execution_count": 21
			}
		]
	}
}