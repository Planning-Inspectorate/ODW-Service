{
	"name": "py_process_raw_to_curated_table_for_reports",
	"properties": {
		"folder": {
			"name": "z-other"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinsodwspark",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "1b206f29-b5b1-4fd2-9d41-8d12d33c0677"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": true,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-odw-data-dev-rg/providers/Microsoft.Synapse/workspaces/pins-odw-data-dev-syn-ws/bigDataPools/pinsodwspark",
				"name": "pinsodwspark",
				"type": "Spark",
				"endpoint": "https://pins-odw-data-dev-syn-ws.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinsodwspark",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.1",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": true
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"tags": []
				},
				"source": [
					"from notebookutils import mssparkutils\n",
					"storage_account=mssparkutils.notebook.run('/utils/py_utils_get_storage_account')"
				],
				"execution_count": 18
			},
			{
				"cell_type": "code",
				"metadata": {
					"tags": [
						"parameters"
					]
				},
				"source": [
					"# https://web.azuresynapse.net/en/authoring/explore/linked/storageaccounts/pins-odw-data-dev-syn-ws-WorkspaceDefaultStorage-pinsodwdatadevstorage%2Fodw-raw?subFolderPath=&workspace=%2Fsubscriptions%2Fff442a29-fc06-4a13-8e3e-65fd5da513b3%2FresourceGroups%2Fpins-odw-data-dev-rg%2Fproviders%2FMicrosoft.Synapse%2Fworkspaces%2Fpins-odw-data-dev-syn-ws\r\n",
					"\r\n",
					"raw_storage_container = 'abfss://odw-raw@' + storage_account  \r\n",
					"raw_storage_source_folder = 'appeal'\r\n",
					"raw_storage_source_name = 'dim_appeal'\r\n",
					"workspace_storage_container = 'abfss://odw-workspace@' + storage_account\r\n",
					"workspace_storage_temp_folder = 'appeal'\r\n",
					"workspace_storage_temp_name = 'dim_appeal'\r\n",
					"curated_storage_container = 'abfss://odw-curated@' + storage_account\r\n",
					"curated_storage_delta_folder = 'appeal'\r\n",
					"curated_storage_parquet_table_name = 'dim_appeal'\r\n",
					"parquet_lake_table_key_column = 'dim_appeal_key' # NEEDED ???\r\n",
					"parquet_lake_table_name = \"dim_appeal\"\r\n",
					"parquet_lake_database_name = 'odw_curated_db'"
				],
				"execution_count": 19
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"from pyspark.sql.types import *\r\n",
					"\r\n",
					"raw_storage_folder_path = raw_storage_container   + '/' + raw_storage_source_folder + '/' + raw_storage_source_name\r\n",
					"workspace_storage_folder_path = workspace_storage_container + '/' + workspace_storage_temp_folder + '/' + workspace_storage_temp_name\r\n",
					"\r\n",
					"rawsourceDF=spark.read.options(header='True', inferSchema='True', delimiter='|').csv(raw_storage_folder_path)\r\n",
					"\r\n",
					"#Rename Columns with illegal Parquet characters\r\n",
					"import re\r\n",
					"cols=[re.sub(\"( |\\#|\\# |\\.|\\(|\\)|\\/)\",\"_\",i) for i in rawsourceDF.columns] # replace chars with _\r\n",
					"cols=[re.sub(\"([\\_]{2,})\",\"_\",i) for i in cols] #replace consecutive _ with one _\r\n",
					"cols=[re.sub(\"(\\_)$\",\"\",i) for i in cols] #remove trailing _\r\n",
					"rawsourceDF=rawsourceDF.toDF(*cols)\r\n",
					"\r\n",
					"rawsourceDF.write.option(\"header\", \"true\").format('parquet').mode('overwrite').save(workspace_storage_folder_path)\r\n",
					"#display(rawsourceDF)"
				],
				"execution_count": 21
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"# Import modules\r\n",
					"from parquet.tables import ParquetTable\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					"curated_storage_parquet_table_path = curated_storage_container + '/' + curated_storage_parquet_folder + '/' + curated_storage_parquet_table_name\r\n",
					"\r\n",
					"sourceParquetDF = spark.read.option(\"inferSchema\",\"true\").format('parquet').option(\"recursiveFileLookup\", \"true\").load(workspace_storage_folder_path)\r\n",
					"\r\n",
					"if (ParquetTable.isParquetTable(spark,curated_storage_parquet_table_path)):\r\n",
					"    parquetTable = ParquetTable.forPath(spark,curated_storage_parquet_table_path)\r\n",
					"    # Merge new data into existing table\r\n",
					"    parquetTable.alias(\"existing\").merge(\r\n",
					"        source=sourceParquetDF.alias(\"updates\"),\r\n",
					"        condition=\"existing.\" + parquet_lake_table_key_column + \" = updates.\" + parquet_lake_table_key_column  # We look for matches on the name column\r\n",
					"    ).whenMatchedUpdateAll(\r\n",
					"    ).whenNotMatchedInsertAll(\r\n",
					"    ).execute()\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					"else:\r\n",
					"    sourceParquetDF.write.format('parquet').save(curated_storage_parquet_table_path)\r\n",
					"    spark.sql(\"CREATE TABLE {0}.{1} USING PARQUET LOCATION '{2}'\".format(parquet_lake_database_name,parquet_lake_table_name,curated_storage_parquet_table_path))"
				],
				"execution_count": 9
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"# Get all versions\r\n",
					"parquet_table = ParquetTable.forPath(spark, curated_storage_parquet_table_path)\r\n",
					"display(parquet_table.history())"
				],
				"execution_count": 10
			}
		]
	}
}