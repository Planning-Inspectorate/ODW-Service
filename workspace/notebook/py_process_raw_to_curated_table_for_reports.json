{
	"name": "py_process_raw_to_curated_table_for_reports",
	"properties": {
		"folder": {
			"name": "MiPINS-data-copy"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodwpr",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "f35b3c75-dee7-44b3-bc6f-7ffc554772be"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": true,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw",
				"name": "pinssynspodw",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net",
					"authHeader": null
				},
				"sparkVersion": "3.2",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"extraHeader": null
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"tags": []
				},
				"source": [
					"from notebookutils import mssparkutils\n",
					"storage_account=mssparkutils.notebook.run('/utils/py_utils_get_storage_account')"
				],
				"execution_count": 30
			},
			{
				"cell_type": "code",
				"metadata": {
					"tags": [
						"parameters"
					]
				},
				"source": [
					"\r\n",
					"raw_storage_container = 'abfss://odw-raw@' + storage_account  \r\n",
					"raw_storage_source_folder = 'appeal'\r\n",
					"raw_storage_source_name = 'dim_appeal_combined.csv'\r\n",
					"curated_storage_container = 'abfss://odw-curated@' + storage_account\r\n",
					"curated_storage_folder = 'appeal'\r\n",
					"curated_storage_table_name = 'dim_appeal_combined'\r\n",
					"curated_database_name = 'odw_curated_db'"
				],
				"execution_count": 31
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"from pyspark.sql.types import *\r\n",
					"\r\n",
					"raw_storage_folder_path = raw_storage_container   + '/' + raw_storage_source_folder + '/' + raw_storage_source_name\r\n",
					"curated_storage_folder_path = curated_storage_container + '/' + curated_storage_folder + '/' + curated_storage_table_name\r\n",
					"\r\n",
					"rawsourceDF=spark.read.options(header='True', inferSchema='True', lineSep=\"ยง\", quote=\"\\\"\", escape=\"\\\\\", quoteAll=\"true\").csv(raw_storage_folder_path)\r\n",
					"\r\n",
					"#Rename Columns with illegal Parquet characters\r\n",
					"import re\r\n",
					"cols=[re.sub(\"( |\\#|\\# |\\.|\\(|\\)|\\/)\",\"_\",i) for i in rawsourceDF.columns] # replace chars with _\r\n",
					"cols=[re.sub(\"([\\_]{2,})\",\"_\",i) for i in cols] #replace consecutive _ with one _\r\n",
					"cols=[re.sub(\"(\\_)$\",\"\",i) for i in cols] #remove trailing _\r\n",
					"rawsourceDF=rawsourceDF.toDF(*cols)\r\n",
					"\r\n",
					"rawsourceDF.write.option(\"header\", \"true\").format('parquet').mode('overwrite').save(curated_storage_folder_path)\r\n",
					"\r\n",
					"spark.sql(\"DROP TABLE {0}.{1}\".format(curated_database_name,curated_storage_table_name))\r\n",
					"spark.sql(\"CREATE TABLE {0}.{1} USING PARQUET LOCATION '{2}' \".format(curated_database_name,curated_storage_table_name,curated_storage_folder_path))\r\n",
					""
				],
				"execution_count": 32
			}
		]
	}
}