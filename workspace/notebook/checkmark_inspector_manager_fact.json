{
	"name": "checkmark_inspector_manager_fact",
	"properties": {
		"folder": {
			"name": "odw-harmonised/Checkmark"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw34",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "42bfde2a-f13c-441f-8882-64f68265d3ee"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw34",
				"name": "pinssynspodw34",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw34",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 32,
				"automaticScaleJobs": true
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Check for new, updated or deleted data\r\n",
					"- This script checks for new, updated or deleted data by checking the source data (sap hr) against the target (odw_harmonised_db.checkmark_inspector_manager_fact)\r\n",
					"- **New Data:** where a Pers_No in the source does not exist as an EmployeeNumber in the target. NewData flag is set to 'Y'\r\n",
					"- **Updated data:** Comparison occurs on Pers_No in source and EmployeeNumber in target where the row hash is different i.e. there is a change in one of the columns. NewData flag is set to 'Y'\r\n",
					"- **Deleted data:** where an EmployeeNumber in the target exists but the same Pers_No doesn't exist in the source. DeletedData flag is set to 'Y'\r\n",
					"\r\n",
					"## View checkmark_inspector_manager_fact_new is created"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql  \r\n",
					"\r\n",
					"-- Gets modified or deleted from source rows\r\n",
					"\r\n",
					"CREATE OR REPLACE TEMPORARY VIEW checkmark_inspector_manager_fact_new \r\n",
					"\r\n",
					"    AS\r\n",
					"\r\n",
					"-- gets data that matches of InspectorManagerDimID and flags that it is modified based on a row (md5) hash. Flags as \"NewData\"\r\n",
					"-- gets data that is in the target but not in source. Flags as \"DeletedData\"\r\n",
					"\r\n",
					"SELECT\r\n",
					"    CASE\r\n",
					"        WHEN T1.InspectorManagerDimID IS NULL\r\n",
					"        THEN T5.InspectorManagerFactID\r\n",
					"        ELSE NULL\r\n",
					"    END AS InspectorManagerFactID, -- surrogate \r\n",
					"    T7.EmployeeID                   AS EmployeeID,\r\n",
					"    T1.InspectorManagerDimID        AS InspectorManagerDimID,\r\n",
					"    T6.ManagerTypeReferenceID       AS ManagerTypeReferenceID,\r\n",
					"    T2.SourceSystemID               AS SourceSystemID,\r\n",
					"    to_timestamp(T1.IngestionDate)  AS IngestionDate,\r\n",
					"    NULL                            AS ValidTo,\r\n",
					"    md5(\r\n",
					"        concat(\r\n",
					"            IFNULL(T7.EmployeeID,'.'),\r\n",
					"            IFNULL(T1.InspectorManagerDimID,'.'),\r\n",
					"            IFNULL(T6.ManagerTypeReferenceID,'.')\r\n",
					"        )) AS RowID,\r\n",
					"    'Y' AS IsActive,\r\n",
					"    T1.IsActive as HistoricIsActive\r\n",
					"\r\n",
					"FROM odw_harmonised_db.checkmark_inspector_manager_dim T1\r\n",
					"LEFT JOIN odw_harmonised_db.main_sourcesystem_fact T2 ON \"SAP HR\" = T2.Description AND T2.IsActive = 'Y'\r\n",
					"LEFT JOIN odw_harmonised_db.checkmark_inspector_manager_fact T5 ON T1.InspectorManagerDimID = T5.InspectorManagerDimID AND T5.IsActive = 'Y'\r\n",
					"LEFT JOIN odw_harmonised_db.checkmark_manager_type_reference_dim T6 ON T1.Type = T6.ManagerTypeReferenceID AND T6.IsActive = 'Y'\r\n",
					"LEFT JOIN odw_harmonised_db.hr_employee_dim T7 ON T1.Email = T7.EmailAddress AND T7.IsActive = 'Y'\r\n",
					"\r\n",
					"WHERE\r\n",
					"     -- flags new data        \r\n",
					"    (CASE\r\n",
					"        WHEN T1.InspectorManagerDimID = T5.InspectorManagerDimID \r\n",
					"            AND md5(\r\n",
					"                concat(\r\n",
					"                IFNULL(T7.EmployeeID,'.'),\r\n",
					"                IFNULL(T1.InspectorManagerDimID,'.'),\r\n",
					"                IFNULL(T6.ManagerTypeReferenceID,'.')\r\n",
					"            )) <> T5.RowID    -- same employee, changed data\r\n",
					"        THEN 'Y'\r\n",
					"        WHEN T5.InspectorManagerDimID IS NULL -- new employee\r\n",
					"        THEN 'Y'\r\n",
					"        ELSE 'N'\r\n",
					"    END  = 'Y' )\r\n",
					"    AND T1.InspectorManagerDimID IS NOT NULL\r\n",
					"    AND T1.IngestionDate = (SELECT MAX(IngestionDate) FROM odw_harmonised_db.checkmark_inspector_manager_dim)\r\n",
					";"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Dataset is created that contains changed data and corresponding target data\r\n",
					"- This script combines data that has been updated, Deleted or is new, with corresponding target data\r\n",
					"- View **checkmark_inspector_manager_fact_new** is unioned to the target data filter to only those rows where changes have been detected\r\n",
					"## View checkmark_inspector_manager_fact_changed_rows is created"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"\r\n",
					"-- Create new and updated dataset\r\n",
					"\r\n",
					"CREATE OR REPLACE TEMPORARY VIEW checkmark_inspector_manager_fact_changed_rows\r\n",
					"\r\n",
					"    AS\r\n",
					"\r\n",
					"-- gets updated, deleted and new rows \r\n",
					"\r\n",
					"Select \r\n",
					"    InspectorManagerFactID, -- surrogate \r\n",
					"    EmployeeID,\r\n",
					"    InspectorManagerDimID,\r\n",
					"    ManagerTypeReferenceID,\r\n",
					"    SourceSystemID,\r\n",
					"    IngestionDate,\r\n",
					"    ValidTo,\r\n",
					"    RowID,\r\n",
					"    IsActive\r\n",
					"From checkmark_inspector_manager_fact_new WHERE HistoricIsActive = 'Y' or HistoricIsActive IS NULL\r\n",
					"\r\n",
					"    UNION ALL\r\n",
					"\r\n",
					"-- gets original versions of updated rows so we can update EndDate and set IsActive flag to 'N'\r\n",
					"\r\n",
					"SELECT\r\n",
					"    InspectorManagerFactID, -- surrogate \r\n",
					"    EmployeeID,\r\n",
					"    InspectorManagerDimID,\r\n",
					"    ManagerTypeReferenceID,\r\n",
					"    SourceSystemID,\r\n",
					"    IngestionDate,\r\n",
					"    ValidTo,\r\n",
					"    RowID,\r\n",
					"    IsActive\r\n",
					"FROM odw_harmonised_db.checkmark_inspector_manager_fact\r\n",
					"WHERE InspectorManagerDimID IN (SELECT InspectorManagerDimID FROM checkmark_inspector_manager_fact_new WHERE InspectorManagerFactID IS NULL) AND IsActive = 'Y';\r\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"\n",
					"CREATE OR REPLACE TEMPORARY VIEW Loading_month\n",
					"\n",
					"    AS\n",
					"\n",
					"SELECT DISTINCT\n",
					"    IngestionDate AS IngestionDate,\n",
					"    to_timestamp(date_sub(IngestionDate,1)) AS ClosingDate,\n",
					"    'Y' AS IsActive\n",
					"\n",
					"FROM checkmark_inspector_manager_fact_new;\n",
					"\n",
					"CREATE OR REPLACE TEMPORARY VIEW checkmark_inspector_manager_fact_changed_rows_final\n",
					"\n",
					"    AS\n",
					"\n",
					"SELECT \n",
					"    InspectorManagerFactID, \n",
					"    EmployeeID,\n",
					"    InspectorManagerDimID,\n",
					"    ManagerTypeReferenceID,\n",
					"    T1.SourceSystemID,\n",
					"    T1.IngestionDate,\n",
					"    T1.ValidTo,\n",
					"    T1.RowID,\n",
					"    T1.IsActive,\n",
					"    T2.ClosingDate\n",
					"FROM checkmark_inspector_manager_fact_changed_rows T1\n",
					"FULL JOIN Loading_month T2 ON T1.IsActive = T2.IsActive"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# View checkmark_inspector_manager_fact_changed_rows is used in a merge (Upsert) statement into the target table\r\n",
					"- **WHEN MATCHED** ON the Business Key (i.e. Pers_No from SAP HR), EndDate is set to today -1 day and the IsActive flag is set to 'N'\r\n",
					"- **WHEN NOT MATCHED** ON the business key, insert rows\r\n",
					"## Table checkmark_inspector_manager_fact.employee_dim is updated"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"-- merge into fact table\r\n",
					"\r\n",
					"MERGE INTO odw_harmonised_db.checkmark_inspector_manager_fact AS Target\r\n",
					"USING checkmark_inspector_manager_fact_changed_rows_final AS Source\r\n",
					"\r\n",
					"ON Source.InspectorManagerFactID = Target.InspectorManagerFactID\r\n",
					"\r\n",
					"-- For Updates existing rows\r\n",
					"WHEN MATCHED\r\n",
					"    THEN \r\n",
					"    UPDATE SET\r\n",
					"    Target.ValidTo = to_timestamp(ClosingDate),\r\n",
					"    Target.IsActive = 'N'\r\n",
					"\r\n",
					"-- Insert completely new rows\r\n",
					"WHEN NOT MATCHED \r\n",
					"    THEN INSERT (InspectorManagerFactID, \r\n",
					"        EmployeeID,\r\n",
					"        InspectorManagerDimID,\r\n",
					"        ManagerTypeReferenceID,\r\n",
					"        SourceSystemID,\r\n",
					"        IngestionDate,\r\n",
					"        ValidTo,\r\n",
					"        RowID,\r\n",
					"        IsActive)  \r\n",
					"        VALUES (Source.InspectorManagerFactID, \r\n",
					"        Source.EmployeeID,\r\n",
					"        Source.InspectorManagerDimID,\r\n",
					"        Source.ManagerTypeReferenceID,\r\n",
					"        Source.SourceSystemID, \r\n",
					"        Source.IngestionDate, \r\n",
					"        Source.ValidTo, \r\n",
					"        Source.RowID, \r\n",
					"        Source.IsActive) \r\n",
					"; \r\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Fix the IDs\r\n",
					"- No auto-increment feature is available in delta tables, therefore we need to create new IDs for the inserted rows\r\n",
					"- This is done by select the target data and using INSERT OVERWRITE to re-insert the data is a new Row Number\r\n",
					"## Table odw_harmonised.checkmark_inspector_manager_fact is updated"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"-- Insert new InspectorManagerFactID\r\n",
					"\r\n",
					"INSERT OVERWRITE odw_harmonised_db.checkmark_inspector_manager_fact\r\n",
					"\r\n",
					"SELECT \r\n",
					"    ROW_NUMBER() OVER (ORDER BY InspectorManagerFactID NULLS LAST) AS InspectorManagerFactID, -- surrogate key\r\n",
					"    EmployeeID,\r\n",
					"    InspectorManagerDimID,\r\n",
					"    ManagerTypeReferenceID,\r\n",
					"    SourceSystemID,\r\n",
					"    IngestionDate,\r\n",
					"    ValidTo,\r\n",
					"    RowID,\r\n",
					"    IsActive\r\n",
					"FROM odw_harmonised_db.checkmark_inspector_manager_fact;"
				],
				"execution_count": null
			}
		]
	}
}