{
	"name": "py_1_raw_to_std_hr_functions",
	"properties": {
		"folder": {
			"name": "1-odw-raw-to-standardised/Fileshare/SAP_HR"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "16bd449e-145d-4b8d-95a2-28d6d52bacd8"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": true,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw",
				"name": "pinssynspodw",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#ignore FutureWarning messages \n",
					"import warnings\n",
					"warnings.filterwarnings(\"ignore\", message=\"iteritems is deprecated\")"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%run utils/py_logging_decorator"
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%run  /0-odw-source-to-raw/Fileshare/SAP_HR/py_0_source_to_raw_hr_functions"
				],
				"execution_count": 3
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%run /utils/py_mount_storage"
				],
				"execution_count": 4
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"@logging_to_appins\n",
					"def validate_parameters(storage_acc, raw_container, raw_source_folder, raw_name, standardised_container, standardised_source_folder, standardised_name, linked_service, sheet_name=0, header_row=0):\n",
					"    \n",
					"    ''' \n",
					"    Type check the parameters that will be used in the ETL processing with pyspark in subsequent functions    \n",
					"\n",
					"    Args:\n",
					"\n",
					"    Returns:\n",
					"\n",
					"    Actions:\n",
					"    \n",
					"    Raises:\n",
					"     '''\n",
					"    \n",
					"    ### imports\n",
					"    from notebookutils import mssparkutils\n",
					"    \n",
					"    ### creating filepath\n",
					"    filepath = raw_container + raw_source_folder + raw_name\n",
					"\n",
					"    ### checking abfss path\n",
					"    if filepath.split('abfss://')[0] != '':\n",
					"        raise ValueError(\"File path string is not of abfss:// type\")\n",
					"        \n",
					"    \n",
					"    ### checking filepath has xlsx file in it \n",
					"\n",
					"    ### checking str data types\n",
					"    # defining parameters to check\n",
					"    parameters = {\n",
					"        'filepath':filepath,\n",
					"        'storage_acc':storage_acc,\n",
					"        'linked_service':linked_service\n",
					"    }\n",
					"\n",
					"    # checking str type\n",
					"    str_errors = ''\n",
					"    for para in parameters:\n",
					"        if type(parameters[para]) != str:\n",
					"            str_errors += para\n",
					"        if str_errors != '':\n",
					"            raise TypeError(f\"Parameters: {str_errors} not of type string\")   \n",
					"            \n",
					"    # checking sheet name type is str or int\n",
					"    if type(sheet_name) != str and type(sheet_name) != int:\n",
					"        raise TypeError(\"Sheet name should either be a string or a integer\")\n",
					"        \n",
					"    # checking int type\n",
					"    if type(header_row) != int:\n",
					"        raise TypeError(\"Header row should be an integer value\")\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"@logging_to_appins\n",
					"def _cleanse_headers(df):\n",
					"    '''\n",
					"    NOT A PURE FUNCTION\n",
					"    Take a dataframe and appropriately cleanse headers in a file\n",
					"    '''\n",
					"    ### imports\n",
					"    import pandas as pd\n",
					"    import re\n",
					"\n",
					"    ### type checks\n",
					"    if not isinstance(df, pd.DataFrame):\n",
					"        raise TypeError(\"Expecting a pandas dataframe\")\n",
					"        \n",
					"    cols = df.columns\n",
					"    cols=[re.sub(\"( |\\#|\\# |\\.|\\(|\\)|\\/)\",\"_\",i) for i in cols] # replace chars with _\n",
					"    cols=[re.sub(\"([\\_]{2,})\",\"_\",i) for i in cols] #replace consecutive _ with one _\n",
					"    cols=[re.sub(\"(\\_)$\",\"\",i) for i in cols] #remove trailing _\n",
					"    cols = [item.replace(',','') for item in cols]\n",
					"    df.columns = cols\n",
					"\n",
					"    return df \n",
					"\n",
					"@logging_to_appins\n",
					"def _change_types(df):\n",
					"    '''\n",
					"    NOT A PURE FUNCTION\n",
					"    Take a dataframe and appropriately make all data types a string\n",
					"    '''\n",
					"\n",
					"    ### imports\n",
					"    import pandas as pd\n",
					"    \n",
					"    ### type checks\n",
					"    if not isinstance(df, pd.DataFrame):\n",
					"        raise TypeError(\"Expecting a pandas dataframe\")\n",
					"        \n",
					"    return df.astype(str, errors='ignore')\n",
					"\n",
					"@logging_to_appins\n",
					"def ingest_excel_to_parquet(storage_acc, raw_container, raw_source_folder, raw_name, standardised_container, standardised_source_folder, standardised_name, linked_service, sheet_name=0, header=0):\n",
					"\n",
					"    '''\n",
					"    Create a parquet file with delta capabilities from a source excel file\n",
					"    '''\n",
					"\n",
					"    ### initialising spark session\n",
					"    from pyspark.sql import SparkSession\n",
					"    spark = SparkSession.builder.getOrCreate()\n",
					"\n",
					"    ### setting appopriate spark variables\n",
					"    source_full_storage_account_name = storage_acc\n",
					"    spark.conf.set(f\"spark.storage.synapse.{source_full_storage_account_name}.linkedServiceName\", linked_service )\n",
					"    spark.conf.set(f\"fs.azure.account.oauth.provider.type.{source_full_storage_account_name}\", \"com.microsoft.azure.synapse.tokenlibrary.LinkedServiceBasedTokenProvider\")\n",
					"\n",
					"    ### creating targetpath variable\n",
					"    filepath = raw_container + raw_source_folder + raw_name\n",
					"    targetpath = standardised_container + standardised_source_folder + standardised_name\n",
					"\n",
					"    ### reading file with abfss file location format\n",
					"    import pandas as pd\n",
					"    from notebookutils import mssparkutils\n",
					"    jobId = mssparkutils.env.getJobId()\n",
					"\n",
					"    mount_storage(path=raw_container + raw_source_folder)\n",
					"    df = pd.read_excel(f\"/synfs/{jobId}/temp_raw/{raw_name}\", sheet_name=sheet_name, header=header, dtype='object')\n",
					"    unmount_storage()\n",
					"    ### cleanse headers \n",
					"    df = _cleanse_headers(df)\n",
					"    \n",
					"    ### change all types to string\n",
					"    df = _change_types(df)\n",
					"\n",
					"    ### writing output\n",
					"    logInfo(f\"Writing to {targetpath}\")\n",
					"    df.to_parquet(targetpath)\n",
					"    logInfo(f\"Written to {targetpath}\")\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"@logging_to_appins\n",
					"def enable_delta_on_parquet(standardised_container, standardised_source_folder):\n",
					"    '''\n",
					"    Take a standard parquet file and enable delta lake capabiltiies on the file\n",
					"    '''\n",
					"\n",
					"    ### initialise spark session\n",
					"    from pyspark.sql import SparkSession\n",
					"    spark = SparkSession.builder.getOrCreate()\n",
					"    spark.conf.set('spark.hadoop.orc.overwrite.output.file','true')\n",
					"\n",
					"    ### create target delta folder variable\n",
					"    target_delta_folder = standardised_container + standardised_source_folder\n",
					"\n",
					"    ### check parquet file in targetpath exists\n",
					"    ### OUTSTANDING\n",
					"\n",
					"    ### converting parquet to delta table\n",
					"    from delta.tables import DeltaTable\n",
					"    if not DeltaTable.isDeltaTable(spark,target_delta_folder):\n",
					"        logInfo(f\"Converting to {target_delta_folder}\")\n",
					"        deltaTable = DeltaTable.convertToDelta(spark, f\"parquet.`{target_delta_folder}`\") \n",
					"        logInfo(f\"Converted to {target_delta_folder}\")"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"@logging_to_appins\n",
					"def lakedb_table_sparksql(db_name,delta_lake_table_name,standardised_container, standardised_source_folder):\n",
					"    '''\n",
					"    Make delta parquet file available in lake database\n",
					"    '''\n",
					"\n",
					"    ### imports and spark session creation\n",
					"    from pyspark.sql import SparkSession\n",
					"    from delta.tables import DeltaTable\n",
					"    spark = SparkSession.builder.getOrCreate()\n",
					"\n",
					"    ### create target delta folder variable\n",
					"    target_delta_folder = standardised_container + standardised_source_folder\n",
					"\n",
					"    ### check parquet file is now delta table\n",
					"    ### outstanding\n",
					"\n",
					"    ### make delta table available to be queried in spark sql\n",
					"    logInfo(f\"Creating delta table {db_name}.{delta_lake_table_name}\")\n",
					"    spark.sql(f\"drop table if exists {db_name}.{delta_lake_table_name};\")\n",
					"    spark.sql(f\"CREATE TABLE {db_name}.{delta_lake_table_name} USING DELTA LOCATION '{target_delta_folder}'\")\n",
					"    logInfo(f\"Created delta table {db_name}.{delta_lake_table_name}\")"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"@logging_to_appins\n",
					"def ingest_adhoc(storage_account, \n",
					"                 definition,\n",
					"                 folder_path, \n",
					"                 filename, \n",
					"                 expected_from, \n",
					"                 expected_to,\n",
					"                 process_name, \n",
					"                 isMultilineJSON=False, \n",
					"                 dataAttribute=None):\n",
					"    '''\n",
					"    Called from the following notebooks:\n",
					"        py_casework_raw_to_std\n",
					"        py_ht_monthly_tw_to_std \n",
					"    '''\n",
					"    # import json\n",
					"    # from datetime import datetime, timedelta, date\n",
					"    # from pyspark.sql.types import StringType, DateType, TimestampType, IntegerType, FloatType, StructType, StructField\n",
					"\n",
					"    ingestion_failure: bool = False\n",
					"\n",
					"    spark = SparkSession.builder.getOrCreate()\n",
					"\n",
					"    standardised_container = \"abfss://odw-standardised@\" + storage_account\n",
					"    base_path = definition['Standardised_Path'] + \"/\"\n",
					"    standardised_table_name = definition['Standardised_Table_Name']\n",
					"    source_filename_start = definition['Source_Filename_Start']\n",
					"\n",
					"    db_name = 'odw_standardised_db'\n",
					"    db_table = f'{db_name}.{standardised_table_name}'\n",
					"\n",
					"    logging_container = f\"abfss://logging@{storage_account}\"\n",
					"    log_name = 'process_logs'\n",
					"    log_location = logging_container + log_name\n",
					"    log_table = f'logging.{log_name}'\n",
					"\n",
					"    # Alex: Standardised_Table_Definition is a parameter (function arg)... ?\n",
					"    if 'Standardised_Table_Definition' in definition:\n",
					"        table_loc = \"abfss://odw-config@\" + storage_account + definition['Standardised_Table_Definition']\n",
					"        standardised_table_def_json = spark.read.text(table_loc, wholetext=True).first().value\n",
					"    else:\n",
					"        standardised_table_def_json = mssparkutils.notebook.run('/py_get_schema_from_url', 30, \n",
					"                                                                {'db_name': db_name,\n",
					"                                                                 'entity_name': definition['Source_Frequency_Folder']\n",
					"                                                                })\n",
					"\n",
					"    # Alex: list_tables = spark.catalog.listTables('odw_standardised_db')\n",
					"    if not spark.catalog.tableExists(f'{db_table}'):\n",
					"        create_table_from_schema(standardised_table_def_json, \n",
					"                                 \"odw_standardised_db\", \n",
					"                                 standardised_table_name,\n",
					"                                 standardised_container , \n",
					"                                 base_path + standardised_table_name)   \n",
					"\n",
					"    # Check that we're dealing with delta already. If not we will convert the table first\n",
					"    #table_metadata = spark.sql(f\"DESCRIBE EXTENDED {db_table}\")\n",
					"    #table_format = table_metadata.filter(table_metadata.col_name == \"Provider\").collect()[0].data_type\n",
					"    table_location = standardised_container + base_path + standardised_table_name\n",
					"    \n",
					"    if not DeltaTable.isDeltaTable(spark, table_location):\n",
					"        delta_table = DeltaTable.convertToDelta(spark,f'parquet.`{table_location}`')\n",
					"\n",
					"    # Alex: Should tables be converted as part of the ingestion process?! no.\n",
					"    \"\"\" \n",
					"    if table_format == \"parquet\":\n",
					"        replace = spark.sql(f\"SELECT * FROM {db_table}\")\n",
					"        replace.write\\\n",
					"            .option(\"mergeSchema\", \"true\")\\\n",
					"            .format(\"delta\")\\\n",
					"            .mode(\"overwrite\")\\\n",
					"            .saveAsTable(f\"{db_table}_new\")\n",
					"\n",
					"        # Drop the original table\n",
					"        spark.sql(f\"DROP TABLE IF EXISTS {db_table}\")\n",
					"\n",
					"        # Rename the temporary table to replace the original table\n",
					"        spark.sql(f\"ALTER TABLE {db_table}_new RENAME TO {db_table}\")\n",
					"    \"\"\"\n",
					"    # Alex: get the table location. Fix bad try/except\n",
					"    \"\"\" \n",
					"    try:\n",
					"        table_location = spark.sql(f\"DESCRIBE FORMATTED {db_table}\")\\\n",
					"                    .filter(\"col_name = 'Location'\")\\\n",
					"                    .select(\"data_type\")\\\n",
					"                    .collect()[0][0] \n",
					"    except:\n",
					"        table_location = standardised_container + base_path + standardised_table_name\n",
					"    \"\"\"\n",
					"\n",
					"    standardised_table_df = spark.read.format(\"delta\").load(table_location)\n",
					"    # rows_new = standardised_table_df.filter((standardised_table_df.expected_from == expected_from) &  (standardised_table_df.expected_to == expected_to)).count()\n",
					"\n",
					"    jobId = mssparkutils.env.getJobId()\n",
					"\n",
					"    ### mount the ADLS data lake storage in Synapse to the Synapse File Mount API\n",
					"    mount_storage(path=folder_path)\n",
					"\n",
					"    ### open .csv and .xlsx files using pandas\n",
					"    logInfo(f\"Reading {filename}\")    \n",
					"    if \".xlsx\" in filename.lower():\n",
					"        sheet_name = definition['Source_Sheet_Name'] if 'Source_Sheet_Name' in definition else 0\n",
					"        df = pd.read_excel(f\"/synfs/{jobId}/temp_raw/{filename}\", dtype=str, sheet_name=sheet_name, na_filter=False)\n",
					"    elif '.csv' in filename.lower():\n",
					"        df = spark.read.options(\n",
					"            quote='\"',\n",
					"            escape=\"\\\\\",\n",
					"            encoding=\"utf8\",\n",
					"            header=True,\n",
					"            multiLine=True,\n",
					"            columnNameOfCorruptRecord=\"corrupted_records\",\n",
					"            mode=\"PERMISSIVE\",\n",
					"        ).csv(f\"{folder_path}/{filename}\")\n",
					"\n",
					"        if \"corrupted_records\" in df.columns:\n",
					"            print(f\"Corrupted Records detected from CSV ingestion in {filename}\")\n",
					"            ingestion_failure = True\n",
					"\n",
					"    elif '.json' in filename.lower():\n",
					"        if isMultilineJSON == False:\n",
					"            df = spark.read.json(f\"{folder_path}/{filename}\")\n",
					"        else:\n",
					"            logInfo(\"Reading multiline JSON\")\n",
					"            df = spark.read.option(\"multiline\", \"true\").json(f\"{folder_path}/{filename}\")\n",
					"\n",
					"            # we need to pull the data from a specific data attribute\n",
					"            if dataAttribute:\n",
					"                dfs: list = [] # an empty list to store the data frames\n",
					"                for row in df.select(dataAttribute).collect():\n",
					"                    for data in row[dataAttribute]:\n",
					"                        dfs.append(data)\n",
					"                df = spark.createDataFrame(dfs)\n",
					"    else:\n",
					"        # Alex: perhaps log the error first...\n",
					"        raise RuntimeError(f\"This file type for {filename} is unsupported\")\n",
					"\n",
					"    ### drop headerless columns\n",
					"    df = df.select([col for col in df.columns if not col.startswith('Unnamed')])\n",
					"    \n",
					"    # Count the rows for logging\n",
					"    rows_raw = df.count()\n",
					"\n",
					"    unmount_storage()\n",
					"\n",
					"    # Alex: santising of column names needs to be... sanitised.\n",
					"    # titles.withColumn('film_id', f.replace( titles.film_id, f.lit('tt'), f.lit('') ).cast(\"int\"))\n",
					"    ### remove characters that Delta can't allow in headers and add numbers to repeated column headers\n",
					"    cols_orig = df.schema.names\n",
					"    cols = [re.sub(\"[^0-9a-zA-Z]+\", \"_\", i).lower() for i in cols_orig]\n",
					"    cols = [colm.rstrip(\"_\") for colm in cols]\n",
					"    \n",
					"    newlist = []\n",
					"    for i, v in enumerate(cols):\n",
					"        totalcount = cols.count(v)\n",
					"        count = cols[:i].count(v)\n",
					"        newlist.append(v + str(count + 1) if totalcount > 1 else v)\n",
					"    \n",
					"    for colix in range(len(cols_orig)):\n",
					"        df = df.toDF(*newlist)\n",
					"\n",
					"    # Alex: ... why do this? code below appears to have no side effect! if necessary do it in spark!\n",
					"    ### change any array field to string\n",
					"    #schema = json.loads(standardised_table_def_json)\n",
					"    #for field in schema['fields']:\n",
					"    #    if field['type'] == 'array':\n",
					"    #        field['type'] = 'string'\n",
					"    #schema = StructType.fromJson(schema)\n",
					"\n",
					"    # Alex: ... bizarre\n",
					"    # Since the df.schema wouldn't have changed above, it's unlikely this following\n",
					"    # for loop, nested comprehension and iterator would have satisfied the != condition.\n",
					"    # some logging when a col is cast would be good.\n",
					"    ### Cast any column in df with type mismatch\n",
					"    for field in df.schema:\n",
					"        table_field = next(\n",
					"            (f for f in schema if f.name.lower() == field.name.lower()), None\n",
					"        )\n",
					"        if table_field is not None and field.dataType != table_field.dataType:\n",
					"            df = df.withColumn(\n",
					"                field.name, col(field.name).cast(table_field.dataType)\n",
					"            )\n",
					"\n",
					"    ### writing the dataframe to the existing standardised table\n",
					"    logInfo(f\"Writing data to {db_table}\")\n",
					"    df.write.option(\"mergeSchema\", \"true\")\\\n",
					"        .format(\"delta\")\\\n",
					"        .mode(\"append\")\\\n",
					"        .saveAsTable(db_table)\n",
					"\n",
					"    # Alex: _new below is a throw away statement.\n",
					"    # standardised_table_df_new = spark.read.format(\"delta\").load(table_location)\n",
					"\n",
					"    # Alex: next section appears to be concerned with logging actual data flow (lineage)...\n",
					"    ### Define schema for the ingestion log table with all required columns\n",
					"    #ingestion_log_schema_loc = \"abfss://odw-config@\" + storage_account + \"tables_logs.json\"\n",
					"    #ingestion_log_schema = spark.read.text(ingestion_log_schema_loc, wholetext=True).first().value\n",
					"\n",
					"    rows_new = standardised_table_df.filter((standardised_table_df.expected_from == expected_from) & \n",
					"                                            (standardised_table_df.expected_to == expected_to)\n",
					"                                            ).count()\n",
					"\n",
					"    # Alex: we should just add a column log_id to trace the row back to an ingestion process\n",
					"    log_id = f.concat(f.lit(input_file_name()), f.current_timestamp().cast(\"string\"))\n",
					"    log_id = sha2(log_id, 256)\n",
					"    \n",
					"    # Alex: these columns belong in a log table, not the dataset\n",
					"    ### add date columns included with every standardised table\n",
					"    \"\"\" df = df.withColumn(\"ingested_datetime\",current_timestamp())\n",
					"    df = df.withColumn(\"ingested_by_process_name\", lit(process_name))\n",
					"    df = df.withColumn(\"expected_from\",lit(expected_from))\n",
					"    df = df.withColumn(\"expected_to\",lit(expected_to))\n",
					"    df = df.withColumn(\"input_file\", input_file_name())\n",
					"    df = df.withColumn(\"modified_datetime\", current_timestamp())\n",
					"    df = df.withColumn(\"modified_by_process_name\", lit(process_name))\n",
					"    df = df.withColumn(\"entity_name\", lit(source_filename_start))\n",
					"    df = df.withColumn(\"file_ID\", log_id)\n",
					"    \"\"\"\n",
					"    log_row = {\"ingested_datetime\": current_timestamp(),\n",
					"                \"ingested_by_process_name\": lit(process_name),\n",
					"                \"expected_from\": lit(expected_from),\n",
					"                \"expected_to\":lit(expected_to),\n",
					"                \"input_file\": input_file_name(),\n",
					"                \"modified_datetime\": current_timestamp(),\n",
					"                \"modified_by_process_name\": lit(process_name),\n",
					"                \"entity_name\": lit(source_filename_start),\n",
					"                \"file_ID\": log_id\n",
					"            }\n",
					"    #log_df = df.withColumns(log_row)\n",
					"    log_df = spark.createDataFrame(log_row)\n",
					"\n",
					"    ### Try loading the ingestion log table, if it exists\n",
					"    if spark.catalog.tableExists(log_location):\n",
					"        table_exists = True\n",
					"\n",
					"    \"\"\"\n",
					"    try:\n",
					"        ingestion_log_df = spark.read.format(\"delta\").load(log_location)\n",
					"        table_exists = True\n",
					"    except Exception as e:\n",
					"        logInfo(f'Error reading from existing log \"{log_location}\": {e}')\n",
					"        table_exists = False\n",
					"    \"\"\"\n",
					"    \n",
					"    ### Extract a single row with the logging columns\n",
					"    \"\"\"\n",
					"    new_log_entry = df.select(\n",
					"        \"file_ID\",\n",
					"        \"ingested_datetime\",\n",
					"        \"ingested_by_process_name\",\n",
					"        \"input_file\",\n",
					"        \"modified_datetime\",\n",
					"        \"modified_by_process_name\",\n",
					"        \"entity_name\"\n",
					"    ).limit(1)\n",
					"\n",
					"    new_log_entry = new_log_entry.withColumn(\"rows_raw\", rows_raw)\n",
					"    new_log_entry = new_log_entry.withColumn(\"rows_new\", rows_new)\n",
					"    \"\"\"\n",
					"\n",
					"    if not table_exists:\n",
					"        # Create the table\n",
					"        log_df.write.format(\"delta\").option(\"path\", log_location).saveAsTable(log_table)\n",
					"        logInfo(f\"Created ingestion log table {log_table} with first entry.\")\n",
					"    else:\n",
					"        # Appending log entry to existing table - using the catalog directly\n",
					"        log_df.write.format(\"delta\").mode(\"append\").saveAsTable(log_table)\n",
					"        logInfo(\"Adding ingestion stage log entry to {log_table}\")\n",
					"\n",
					"    ### Test correct number of rows have written\n",
					"    if (rows_raw <= rows_new):\n",
					"        # count up the rows which match the dates, we should at LEAST have those, multiple runs on the same day will lead to the counts not matching however\n",
					"        logInfo('All rows have successfully been written')\n",
					"    else:\n",
					"        logError(f\"All rows have NOT been written. Expected {rows_raw} but {rows_new} written\")\n",
					"        ingestion_failure = True\n",
					"\n",
					"    return (ingestion_failure, rows_raw)\n",
					""
				],
				"execution_count": 5
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"@logging_to_appins\n",
					"def log_ingestion_metrics(storage_account, process_name):\n",
					"    logInfo(f\"Metrics table {metrics_table_name} is being depricated.\")\n",
					"    return\n",
					"\n",
					"    from pyspark.sql import SparkSession\n",
					"    from notebookutils import mssparkutils\n",
					"    from pyspark.sql.types import StringType, IntegerType, StructType, StructField\n",
					"    from pyspark.sql.functions import col, lit\n",
					"\n",
					"    spark = SparkSession.builder.getOrCreate()\n",
					"    #spark.conf.set(\"spark.databricks.delta.schema.autoMerge.enabled\", \"true\")\n",
					"\n",
					"    logging_container = f\"abfss://logging@{storage_account}\"\n",
					"    logging_table_name = 'tables_logs'\n",
					"    ingestion_log_table_location = logging_container + logging_table_name\n",
					"\n",
					"    metrics_table_name = 'ingestion_metrics'\n",
					"    metrics_table_location = logging_container + metrics_table_name\n",
					"\n",
					"    # Define schema for the metrics table\n",
					"    metrics_schema = StructType([\n",
					"        StructField(\"file_ID\", StringType(), True),\n",
					"        StructField(\"metric_name\", StringType(), True),\n",
					"        StructField(\"value\", IntegerType(), True),\n",
					"        StructField(\\\"process_name\\\", StringType(), True)\n",
					"    ])\n",
					"\n",
					"    # Try loading the ingestion log table\n",
					"    try:\n",
					"        ingestion_log_df = spark.read.format(\"delta\").load(ingestion_log_table_location)\n",
					"    except Exception as e:\n",
					"        logInfo(f\"Ingestion log table not found at {ingestion_log_table_location}. Exiting.\")\n",
					"        return\n",
					"\n",
					"    # Calculate metrics for each file_ID\n",
					"    file_ids = ingestion_log_df.select(\"file_ID\").distinct()\n",
					"\n",
					"    # Join file_ids with ingestion_log_df to access rows_raw and rows_new\n",
					"    metrics_df = file_ids.join(ingestion_log_df, on=\"file_ID\").select(\n",
					"        col(\"file_ID\"),\n",
					"        lit(\"Records loaded\").alias(\"metric_name\"),\n",
					"        col(\"rows_raw\").alias(\"value\")\n",
					"    ).union(\n",
					"        file_ids.join(ingestion_log_df, on=\"file_ID\").select(\n",
					"            col(\"file_ID\"),\n",
					"            lit(\"Records inserted\").alias(\"metric_name\"),\n",
					"            col(\"rows_new\").alias(\"value\")\n",
					"        )\n",
					"    ).union(\n",
					"        file_ids.join(ingestion_log_df, on=\"file_ID\").select(\n",
					"            col(\"file_ID\"),\n",
					"            lit(\"Records rejected\").alias(\"metric_name\"),\n",
					"            (col(\"rows_raw\") - col(\"rows_new\")).alias(\"value\")\n",
					"        )\n",
					"    )\n",
					"\n",
					"    metrics_df = metrics_df.withColumn(\"process_name\", lit(process_name))\n",
					"\n",
					"    # Write (append) metrics to the metrics table\n",
					"    metrics_df.write.format(\"delta\").mode(\"append\").saveAsTable(f\"logging.{metrics_table_name}\")\n",
					"    logInfo(f\"Metrics table {metrics_table_name} updated successfully.\")\n",
					""
				],
				"execution_count": null
			}
		]
	}
}