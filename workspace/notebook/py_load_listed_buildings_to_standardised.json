{
	"name": "py_load_listed_buildings_to_standardised",
	"properties": {
		"folder": {
			"name": "0-odw-source-to-raw/ListedBuildings"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "tempsparkpool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "ca53eca8-d32b-48e8-aef8-bc0b53f6d843"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/tempsparkpool",
				"name": "tempsparkpool",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/tempsparkpool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"tags": [
						"parameters"
					]
				},
				"source": [
					"date_folder='2024-11-23'"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.sql.types import StructType, StructField, StringType, IntegerType, TimestampType\r\n",
					"from pyspark.sql.functions import explode, col"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"Load Listed buildings"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"json_schema = StructType([\r\n",
					"    StructField(\"dataset\", StringType(), True),\r\n",
					"    StructField(\"end-date\", StringType(), True),\r\n",
					"    StructField(\"entity\", StringType(), True),\r\n",
					"    StructField(\"entry-date\", StringType(), True),\r\n",
					"    StructField(\"geometry\", StringType(), True),\r\n",
					"    StructField(\"name\", StringType(), True),\r\n",
					"    StructField(\"organisation-entity\", StringType(), True),\r\n",
					"    StructField(\"point\", StringType(), True),\r\n",
					"    StructField(\"prefix\", StringType(), True),\r\n",
					"    StructField(\"reference\", StringType(), True),\r\n",
					"    StructField(\"start-date\", StringType(), True),\r\n",
					"    StructField(\"typology\", StringType(), True),\r\n",
					"    StructField(\"documentation-url\", StringType(), True),\r\n",
					"    StructField(\"listed-building-grade\", StringType(), True)\r\n",
					"])\r\n",
					"\r\n",
					"storage_acc_name = spark.sparkContext.environment.get('dataLakeAccountName', 'get')\r\n",
					"df = spark.read.option(\"multiline\",\"true\").json(f\"abfss://odw-raw@{storage_acc_name}.dfs.core.windows.net/ListedBuildings/{date_folder}/listed_building.json\")\r\n",
					"entities_df = df.selectExpr(\"explode(entities) as entity\")\r\n",
					"entities = [row.entity.asDict() for row in entities_df.collect()]\r\n",
					"final_df = spark.createDataFrame(data=entities, schema=json_schema)"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"final_df.write.mode(\"overwrite\").saveAsTable(\"odw_standardised_db.listed_building\")"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"Load listed building outline"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"json_schema = StructType([\r\n",
					"    StructField(\"address\", StringType(), True),\r\n",
					"    StructField(\"address-text\", StringType(), True),\r\n",
					"    StructField(\"dataset\", StringType(), True),\r\n",
					"    StructField(\"document-url\", StringType(), True),\r\n",
					"    StructField(\"documentation-url\", StringType(), True),\r\n",
					"    StructField(\"end-date\", StringType(), True),\r\n",
					"    StructField(\"entity\", StringType(), True),\r\n",
					"    StructField(\"entry-date\", StringType(), True),\r\n",
					"    StructField(\"geometry\", StringType(), True),\r\n",
					"    StructField(\"listed-building\", StringType(), True),\r\n",
					"    StructField(\"name\", StringType(), True),\r\n",
					"    StructField(\"notes\", StringType(), True),\r\n",
					"    StructField(\"organisation-entity\", StringType(), True),\r\n",
					"    StructField(\"point\", StringType(), True),\r\n",
					"    StructField(\"prefix\", StringType(), True),\r\n",
					"    StructField(\"reference\", StringType(), True),\r\n",
					"    StructField(\"start-date\", StringType(), True),\r\n",
					"    StructField(\"typology\", StringType(), True)\r\n",
					"])\r\n",
					"\r\n",
					"storage_acc_name = spark.sparkContext.environment.get('dataLakeAccountName', 'get')\r\n",
					"df = spark.read.option(\"multiline\",\"true\").json(f\"abfss://odw-raw@{storage_acc_name}.dfs.core.windows.net/ListedBuildings/{date_folder}/listed_building_outline.json\")\r\n",
					"entities_df = df.selectExpr(\"explode(entities) as entity\")\r\n",
					"entities = [row.entity.asDict() for row in entities_df.collect()]\r\n",
					"final_df = spark.createDataFrame(data=entities, schema=json_schema)"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"final_df.write.mode(\"overwrite\").saveAsTable(\"odw_standardised_db.listed_building_outline\")"
				],
				"execution_count": null
			}
		]
	}
}