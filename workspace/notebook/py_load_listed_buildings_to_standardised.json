{
	"name": "py_load_listed_buildings_to_standardised",
	"properties": {
		"folder": {
			"name": "0-odw-source-to-raw/ListedBuildings"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw34",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "2260e78a-5197-472f-b474-b863ecd873a8"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw34",
				"name": "pinssynspodw34",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw34",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#### The purpose of this pyspark notebook is to ingest data from Json formatted files listed_building.json, listed_building_outline.json into the delta tables, odw_standardised_db.listed_building and odw_standardised_db.listed_building_outline respectively.\r\n",
					"\r\n",
					"**Description**  \r\n",
					"The functionality of this notebook is to ingest data from Json formatted files listed_building.json, listed_building_outline.json into the delta tables, odw_standardised_db.listed_building and odw_standardised_db.listed_building_outline respectively.The addtitional functionality has been added to log the audit information to Application Insight by creating a Json dump at notebook exit.\r\n",
					"\r\n",
					"**Spark Cluster Configuration** -> Apache Spark Version- 3.4, Python Version \t\t- 3.10, Delta Lake Version \t- 2.4"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"tags": [
						"parameters"
					]
				},
				"source": [
					"date_folder='2024-11-23'"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.sql.types import StructType, StructField, StringType, IntegerType, TimestampType\r\n",
					"from pyspark.sql.functions import explode, col"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Initialise Application Insight Logging functions"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"%run utils/py_utils_common_logging_output"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Initialise variables"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"table_name_lbdng = \"odw_standardised_db.listed_building\"\r\n",
					"table_name_lbo = \"odw_standardised_db.listed_building_outline\"\r\n",
					"\r\n",
					"start_exec_time = str(datetime.now())\r\n",
					"insert_count = 0\r\n",
					"update_count = 0\r\n",
					"delete_count = 0"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"Load Listed buildings"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"try:    \r\n",
					"    json_schema = StructType([\r\n",
					"        StructField(\"dataset\", StringType(), True),\r\n",
					"        StructField(\"end-date\", StringType(), True),\r\n",
					"        StructField(\"entity\", StringType(), True),\r\n",
					"        StructField(\"entry-date\", StringType(), True),\r\n",
					"        StructField(\"geometry\", StringType(), True),\r\n",
					"        StructField(\"name\", StringType(), True),\r\n",
					"        StructField(\"organisation-entity\", StringType(), True),\r\n",
					"        StructField(\"point\", StringType(), True),\r\n",
					"        StructField(\"prefix\", StringType(), True),\r\n",
					"        StructField(\"reference\", StringType(), True),\r\n",
					"        StructField(\"start-date\", StringType(), True),\r\n",
					"        StructField(\"typology\", StringType(), True),\r\n",
					"        StructField(\"documentation-url\", StringType(), True),\r\n",
					"        StructField(\"listed-building-grade\", StringType(), True)\r\n",
					"    ])\r\n",
					"\r\n",
					"    storage_acc_name = spark.sparkContext.environment.get('dataLakeAccountName', 'get')\r\n",
					"    df = spark.read.option(\"multiline\",\"true\").json(f\"abfss://odw-raw@{storage_acc_name}.dfs.core.windows.net/ListedBuildings/{date_folder}/listed_building.json\")\r\n",
					"    entities_df = df.selectExpr(\"explode(entities) as entity\")\r\n",
					"    entities = [row.entity.asDict() for row in entities_df.collect()]\r\n",
					"    final_df = spark.createDataFrame(data=entities, schema=json_schema)\r\n",
					"\r\n",
					"except Exception as e:\r\n",
					"    logError(f\"Error in creating data frame for file {date_folder}/listed_building.json\" :\\n{e}\")\r\n",
					"    error_message = app_insight_logger.format_error_message(e, max_length=800)\r\n",
					"    end_exec_time = str(datetime.now())\r\n",
					"    app_insight_logger.add_table_result(\r\n",
					"        delta_table_name = table_name,\r\n",
					"        insert_count = insert_count, \r\n",
					"        update_count = update_count, \r\n",
					"        delete_count = delete_count, \r\n",
					"        table_result = \"failed\",\r\n",
					"        start_exec_time = start_exec_time, \r\n",
					"        end_exec_time = end_exec_time,\r\n",
					"        total_exec_time = \"\",\r\n",
					"        error_message = error_message\r\n",
					"    )\r\n",
					"    # Exit with the JSON result\r\n",
					"    mssparkutils.notebook.exit(app_insight_logger.generate_processing_results())    "
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"try:    \r\n",
					"    logInfo(f\"Writing to {table_name_lbdng}\")\r\n",
					"    insert_count = df.count()\r\n",
					"\r\n",
					"    final_df.write.mode(\"overwrite\").saveAsTable(table_name_lbdng)\r\n",
					"    logInfo(f\"Written to {table_name_lbdng}\")\r\n",
					"    \r\n",
					"    end_exec_time = str(datetime.now())\r\n",
					"    app_insight_logger.add_table_result(                    \r\n",
					"        delta_table_name = table_name_lbdng,\r\n",
					"        insert_count = insert_count, \r\n",
					"        update_count = update_count, \r\n",
					"        delete_count = delete_count, \r\n",
					"        table_result = \"success\",\r\n",
					"        start_exec_time = start_exec_time, \r\n",
					"        end_exec_time = end_exec_time,\r\n",
					"        total_exec_time = \"\",\r\n",
					"        error_message = \"\"\r\n",
					"    )\r\n",
					"\r\n",
					"except Exception as e:\r\n",
					"    logError(f\"Error appending data to the curated layer table :\\n{e}\")\r\n",
					"    error_message = app_insight_logger.format_error_message(e, max_length=800)\r\n",
					"    end_exec_time = str(datetime.now())\r\n",
					"    app_insight_logger.add_table_result(\r\n",
					"        delta_table_name = table_name_lbdng,\r\n",
					"        insert_count = insert_count, \r\n",
					"        update_count = update_count, \r\n",
					"        delete_count = delete_count, \r\n",
					"        table_result = \"failed\",\r\n",
					"        start_exec_time = start_exec_time, \r\n",
					"        end_exec_time = end_exec_time,\r\n",
					"        total_exec_time = \"\",\r\n",
					"        error_message = error_message\r\n",
					"    )\r\n",
					"    # Exit with the JSON result\r\n",
					"    mssparkutils.notebook.exit(app_insight_logger.generate_processing_results())    "
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"Load listed building outline"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"try:\r\n",
					"    start_exec_time = str(datetime.now())\r\n",
					"    json_schema = StructType([\r\n",
					"        StructField(\"address\", StringType(), True),\r\n",
					"        StructField(\"address-text\", StringType(), True),\r\n",
					"        StructField(\"dataset\", StringType(), True),\r\n",
					"        StructField(\"document-url\", StringType(), True),\r\n",
					"        StructField(\"documentation-url\", StringType(), True),\r\n",
					"        StructField(\"end-date\", StringType(), True),\r\n",
					"        StructField(\"entity\", StringType(), True),\r\n",
					"        StructField(\"entry-date\", StringType(), True),\r\n",
					"        StructField(\"geometry\", StringType(), True),\r\n",
					"        StructField(\"listed-building\", StringType(), True),\r\n",
					"        StructField(\"name\", StringType(), True),\r\n",
					"        StructField(\"notes\", StringType(), True),\r\n",
					"        StructField(\"organisation-entity\", StringType(), True),\r\n",
					"        StructField(\"point\", StringType(), True),\r\n",
					"        StructField(\"prefix\", StringType(), True),\r\n",
					"        StructField(\"reference\", StringType(), True),\r\n",
					"        StructField(\"start-date\", StringType(), True),\r\n",
					"        StructField(\"typology\", StringType(), True)\r\n",
					"    ])\r\n",
					"\r\n",
					"    storage_acc_name = spark.sparkContext.environment.get('dataLakeAccountName', 'get')\r\n",
					"    df = spark.read.option(\"multiline\",\"true\").json(f\"abfss://odw-raw@{storage_acc_name}.dfs.core.windows.net/ListedBuildings/{date_folder}/listed_building_outline.json\")\r\n",
					"    entities_df = df.selectExpr(\"explode(entities) as entity\")\r\n",
					"    entities = [row.entity.asDict() for row in entities_df.collect()]\r\n",
					"    final_df = spark.createDataFrame(data=entities, schema=json_schema)\r\n",
					"\r\n",
					"except Exception as e:\r\n",
					"    logError(f\"Error in creating data frame for file {date_folder}/listed_building_outline.json\" :\\n{e}\")\r\n",
					"    error_message = app_insight_logger.format_error_message(e, max_length=800)\r\n",
					"    end_exec_time = str(datetime.now())\r\n",
					"    app_insight_logger.add_table_result(\r\n",
					"        delta_table_name = table_name_lbo,\r\n",
					"        insert_count = insert_count, \r\n",
					"        update_count = update_count, \r\n",
					"        delete_count = delete_count, \r\n",
					"        table_result = \"failed\",\r\n",
					"        start_exec_time = start_exec_time, \r\n",
					"        end_exec_time = end_exec_time,\r\n",
					"        total_exec_time = \"\",\r\n",
					"        error_message = error_message\r\n",
					"    )\r\n",
					"    # Exit with the JSON result\r\n",
					"    mssparkutils.notebook.exit(app_insight_logger.generate_processing_results())    "
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"try:\r\n",
					"    logInfo(f\"Writing to {table_name_lbo}\")\r\n",
					"    insert_count = final_df.count()\r\n",
					"\r\n",
					"    final_df.write.mode(\"overwrite\").saveAsTable(\"odw_standardised_db.listed_building_outline\")\r\n",
					"    logInfo(f\"Written to {table_name_lbo}\")\r\n",
					"    \r\n",
					"    end_exec_time = str(datetime.now())\r\n",
					"    app_insight_logger.add_table_result(                    \r\n",
					"        delta_table_name = table_name_lbo,\r\n",
					"        insert_count = insert_count, \r\n",
					"        update_count = update_count, \r\n",
					"        delete_count = delete_count, \r\n",
					"        table_result = \"success\",\r\n",
					"        start_exec_time = start_exec_time, \r\n",
					"        end_exec_time = end_exec_time,\r\n",
					"        total_exec_time = \"\",\r\n",
					"        error_message = \"\"\r\n",
					"    )\r\n",
					"\r\n",
					"except Exception as e:\r\n",
					"    logError(f\"Error appending data to the curated layer table :\\n{e}\")\r\n",
					"    error_message = app_insight_logger.format_error_message(e, max_length=800)\r\n",
					"    end_exec_time = str(datetime.now())\r\n",
					"    app_insight_logger.add_table_result(\r\n",
					"        delta_table_name = table_name,\r\n",
					"        insert_count = insert_count, \r\n",
					"        update_count = update_count, \r\n",
					"        delete_count = delete_count, \r\n",
					"        table_result = \"failed\",\r\n",
					"        start_exec_time = start_exec_time, \r\n",
					"        end_exec_time = end_exec_time,\r\n",
					"        total_exec_time = \"\",\r\n",
					"        error_message = error_message\r\n",
					"    )\r\n",
					"    # Exit with the JSON result\r\n",
					"    mssparkutils.notebook.exit(app_insight_logger.generate_processing_results())    "
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Produce Json formatted output"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"# Exit with the JSON result\r\n",
					"mssparkutils.notebook.exit(app_insight_logger.generate_processing_results())"
				],
				"execution_count": null
			}
		]
	}
}