{
	"name": "py_0_source_to_raw_hr_tests",
	"properties": {
		"folder": {
			"name": "0-odw-source-to-raw/Fileshare/SAP_HR"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "b36fd6d8-182d-456c-bc78-8ed98b08d5d5"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "python"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw",
				"name": "pinssynspodw",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.2",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"%run  \"0-source-to-raw/Fileshare/SAP_HR/py_0_source_to_raw_hr_functions\""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import unittest"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"class SourceToRawLoggingTable_MakeParquetAndTable(unittest.TestCase):\r\n",
					"    ''' \r\n",
					"    unit tests and feature tests to test the functions contained within py_0_source_to_raw_hr_functions\r\n",
					"    test_create_parquet +\r\n",
					"    test_create_table +\r\n",
					"    test_existing_table -\r\n",
					"    test_exsting_parquet - \r\n",
					"    othern error that gets thrown -\r\n",
					"    potentialjsontest\r\n",
					"    \r\n",
					"    '''\r\n",
					"    def setUp(self):\r\n",
					"        from pyspark.sql import SparkSession\r\n",
					"        spark = SparkSession.builder.getOrCreate()\r\n",
					"        from notebookutils import mssparkutils\r\n",
					"\r\n",
					"    def test_create_parquet(self):\r\n",
					"        '''Create parquet file log table if the table does not already exist '''\r\n",
					"\r\n",
					"        schema_table = \"\"\"{\"fields\": [{\"metadata\": {},\"name\": \"Process_Date\",\"nullable\": false,\"type\": \"timestamp\"}, {\"metadata\": {},\"name\": \"Filepath\",\"nullable\":false,\"type\": \"string\"},{\"metadata\": {},\"name\": \"File_Modified_Date\",\"nullable\": false,\"type\": \"string\"}]}\"\"\"\r\n",
					"        jsonschema = schema_table\r\n",
					"        db_name =  \"odw_test_db\"\r\n",
					"        table_name = \"datalabs_log\"\r\n",
					"        target_container = \"abfss://odw-config@pinsstodwdevuks9h80mb.dfs.core.windows.net/\"\r\n",
					"        target_folder = \"datalabs_log/\"\r\n",
					"\r\n",
					"        \r\n",
					"        create_table_from_schema(jsonschema, db_name, table_name, target_container, target_folder)\r\n",
					"        self.assertTrue(any([table.name == table_name for table in spark.catalog.listTables(db_name)]))\r\n",
					"\r\n",
					"    def tearDown(self)\r\n",
					"        mssparkutils.fs.rm(target_container+target_folder)\r\n",
					"        spark.sql(\"DROP TABLE IF EXISTS odw_test_db.datalabs_log\")\r\n",
					"\r\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# class TestSourceToRawFileShareChanges(unittest.TestCase):\r\n",
					"#     ''' \r\n",
					"#     unit tests and feature tests to test the functions contained within py_0_source_to_raw_hr_functions\r\n",
					"#     '''\r\n",
					"#     def test_constructor_path_string(self):\r\n",
					"#         ''' Class constructor - checking for file string path being abfss and not https or other formats '''\r\n",
					"#         with self.assertRaises(ValueError) as context:\r\n",
					"#             RawToStandardisedExcel('hello', 'world', 'hello' )\r\n",
					"#         self.assertTrue(str(context.exception), \"String is not of abfss:// type\")"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"output = unittest.main(argv=['first-arg-is-ignored'], exit=False).result.wasSuccessful()"
				],
				"execution_count": null
			}
		]
	}
}