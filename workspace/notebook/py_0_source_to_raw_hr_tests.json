{
	"name": "py_0_source_to_raw_hr_tests",
	"properties": {
		"folder": {
			"name": "0-odw-source-to-raw/Fileshare/SAP_HR"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "2679d36e-feb0-4d8d-b4be-0259ddf18fcb"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "python"
			},
			"language_info": {
				"name": "python"
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"%run  \"0-source-to-raw/Fileshare/SAP_HR/py_0_source_to_raw_hr_functions\""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import unittest"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"class TestSourceToRawLoggingTable(unittest.TestCase):\r\n",
					"    ''' \r\n",
					"    unit tests and feature tests to test the functions contained within py_0_source_to_raw_hr_functions\r\n",
					"    test_create_parquet +\r\n",
					"    test_create_table +\r\n",
					"    test_existing_table -\r\n",
					"    test_exsting_parquet - \r\n",
					"    \r\n",
					"    \r\n",
					"    '''\r\n",
					"    def setUp(self):\r\n",
					"        return None\r\n",
					"    \r\n",
					"    def test_create_parquet(self):\r\n",
					"        '''Create parquet file log table if the table does not already exist '''\r\n",
					"        with self.assertRaises(ValueError) as context:\r\n",
					"            RawToStandardisedExcel('hello', 'world', 'hello' )\r\n",
					"        self.assertTrue(str(context.exception), \"String is not of abfss:// type\")\r\n",
					"\r\n",
					"    def tearDown(self):\r\n",
					"        return None\r\n",
					"\r\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# class TestSourceToRawFileShareChanges(unittest.TestCase):\r\n",
					"#     ''' \r\n",
					"#     unit tests and feature tests to test the functions contained within py_0_source_to_raw_hr_functions\r\n",
					"#     '''\r\n",
					"#     def test_constructor_path_string(self):\r\n",
					"#         ''' Class constructor - checking for file string path being abfss and not https or other formats '''\r\n",
					"#         with self.assertRaises(ValueError) as context:\r\n",
					"#             RawToStandardisedExcel('hello', 'world', 'hello' )\r\n",
					"#         self.assertTrue(str(context.exception), \"String is not of abfss:// type\")"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"output = unittest.main(argv=['first-arg-is-ignored'], exit=False).result.wasSuccessful()"
				],
				"execution_count": null
			}
		]
	}
}