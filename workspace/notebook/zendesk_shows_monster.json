{
	"name": "zendesk_shows_monster",
	"properties": {
		"folder": {
			"name": "odw-raw"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "4e8b17a4-5ff7-4234-aab6-784243c89e48"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw",
				"name": "pinssynspodw",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"from collections.abc import Mapping\r\n",
					"from itertools import chain\r\n",
					"from operator import add\r\n",
					"#ignore FutureWarning messages \r\n",
					"import warnings\r\n",
					"warnings.filterwarnings(\"ignore\", message=\"iteritems is deprecated\")\r\n",
					"from notebookutils import mssparkutils\r\n",
					"from pprint import pprint as pp\r\n",
					"import json\r\n",
					"import pyspark.sql.functions as F \r\n",
					"import pandas as pd\r\n",
					"from pyspark.sql.types import *"
				],
				"execution_count": 96
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"_FLAG_FIRST = object()\r\n",
					"\r\n",
					"#flatteb dict function\r\n",
					"def flattenDict(d, join=add, lift=lambda x:(x,)):\r\n",
					"    results = []\r\n",
					"    def visit(subdict, results, partialKey):\r\n",
					"        for k,v in subdict.items():\r\n",
					"            newKey = lift(k) if partialKey==_FLAG_FIRST else join(partialKey,lift(k))\r\n",
					"            if isinstance(v,Mapping):\r\n",
					"                visit(v, results, newKey)\r\n",
					"            else:\r\n",
					"                results.append((newKey,v))\r\n",
					"    visit(d, results, _FLAG_FIRST)\r\n",
					"    return results"
				],
				"execution_count": 97
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from notebookutils import mssparkutils\r\n",
					"### mount the data lake storage in Synapse to the Synapse File Mount API\r\n",
					"jobId = mssparkutils.env.getJobId()\r\n",
					"mssparkutils.fs.unmount(\"/zendesk_items\") \r\n",
					"mssparkutils.fs.mount( \r\n",
					"'abfss://odw-raw@pinsstodwdevuks9h80mb.dfs.core.windows.net/ZenDesk/Export/', \r\n",
					"\"/zendesk_items\", \r\n",
					"{\"linkedService\":\"ls_storage\"} \r\n",
					")   "
				],
				"execution_count": 98
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# def write_to_single_file():\r\n",
					"\r\n",
					"#     with open(f\"/synfs/{jobId}/zendesk_items/export-2023-03-15-1051-10932060-13758561992081e5c3.json\", 'r',encoding=\"utf-8\") as zendesk_json_raw:\r\n",
					"\r\n",
					"#         zendesk_json_decoded = zendesk_json_raw.read()\r\n",
					"\r\n",
					"#         zendesk_json_array = zendesk_json_decoded.split(\"\\n\")\r\n",
					"\r\n",
					"#         item_number = 0\r\n",
					"\r\n",
					"#         for zendesk_json_item in zendesk_json_array:\r\n",
					"\r\n",
					"#             if zendesk_json_item != \"\":\r\n",
					"\r\n",
					"#                 zendesk_json_dict = json.loads(zendesk_json_item)\r\n",
					"\r\n",
					"#                 with open(f\"/synfs/{jobId}/zendesk_items/output_{item_number}.json\", \"w\", encoding=\"utf-8\") as write_single_zendesk_json:\r\n",
					"\r\n",
					"#                     json.dump(zendesk_json_dict, write_single_zendesk_json)\r\n",
					"\r\n",
					"#                 item_number += 1\r\n",
					"\r\n",
					"# write_to_single_file()"
				],
				"execution_count": 99
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.sql import SparkSession \r\n",
					"spark = SparkSession.builder.getOrCreate() \r\n",
					"# shows = spark.read.json(\"abfss://odw-raw@pinsstodwdevuks9h80mb.dfs.core.windows.net/ZenDesk/Export/output_*.json\",multiLine=True)\r\n",
					""
				],
				"execution_count": 100
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Create mega table\r\n",
					"# spark.sql(f\"drop table if exists odw_standardised_db.zendesk_shows;\")\r\n",
					"# shows.write.format('delta').saveAsTable(\"odw_standardised_db.zendesk_shows\")"
				],
				"execution_count": 101
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# import pyspark.sql.functions as F \r\n",
					"# def fields_table():\r\n",
					"#     fields = shows.select(\r\n",
					"#     \"id\", F.explode(\"fields\").alias(\"fields\")\r\n",
					"#     )\r\n",
					"\r\n",
					"#     fields_id_value = shows.select(F.col(\"id\").alias(\"ticket_id\"),\r\n",
					"#         F.map_from_arrays(\r\n",
					"#         F.col(\"fields.id\"), F.col(\"fields.value\")\r\n",
					"#         ).alias(\"ID_VALUE\")\r\n",
					"#         )\r\n",
					"#     # fields_id_value.show()\r\n",
					"#     fields_id_value = fields_id_value.select(\"ticket_id\",\r\n",
					"#         F.posexplode(\"ID_VALUE\").alias(\"position\", \"id\", \"value\")\r\n",
					"#         )\r\n",
					"#     # fields_id_value.show()\r\n",
					"#     fields_id_value.drop(\"position\")\r\n",
					"#     spark.sql(f\"drop table if exists odw_standardised_db.zendesk_fields_id_value;\")\r\n",
					"#     fields_id_value.write.saveAsTable(\"odw_standardised_db.zendesk_fields_id_value\")\r\n",
					"# fields_table()"
				],
				"execution_count": 102
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# import pyspark.sql.functions as F \r\n",
					"# def custom_fields_table():\r\n",
					"#     custom_fields = shows.select(\r\n",
					"#     \"id\", F.explode(\"custom_fields\").alias(\"custom_fields\")\r\n",
					"#     )\r\n",
					"\r\n",
					"#     custom_fields_id_value = shows.select(F.col(\"id\").alias(\"ticket_id\"),\r\n",
					"#         F.map_from_arrays(\r\n",
					"#         F.col(\"custom_fields.id\"), F.col(\"custom_fields.value\")\r\n",
					"#         ).alias(\"ID_VALUE\")\r\n",
					"#         )\r\n",
					"#     # custom_fields_id_value.show()\r\n",
					"#     custom_fields_id_value = custom_fields_id_value.select(\"ticket_id\",\r\n",
					"#         F.posexplode(\"ID_VALUE\").alias(\"position\", \"id\", \"value\")\r\n",
					"#         )\r\n",
					"#     # custom_fields_id_value.show()\r\n",
					"#     custom_fields_id_value.drop(\"position\")\r\n",
					"#     spark.sql(f\"drop table if exists odw_standardised_db.zendesk_custom_fields_id_value;\")\r\n",
					"#     custom_fields_id_value.write.saveAsTable(\"odw_standardised_db.zendesk_custom_fields_id_value\")\r\n",
					"# custom_fields_table()"
				],
				"execution_count": 103
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# CommentsListOfDict = shows.select(F.explode(\"comments\").alias(\"comments\"))\r\n",
					"# # CommentsListOfDict = CommentsListOfDict.select(F.explode(\"comments\")) \r\n",
					"# CommentsListOfDict.printSchema()\r\n",
					""
				],
				"execution_count": 104
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# def load_all_outputs():\r\n",
					"    #create empty list to store the values of the comments \r\n",
					"FlatCommentsDictList=[]\r\n",
					"#create empty list to store the value of the attachments array within the commments column\r\n",
					"FlatCommentsDictAttachmentsList=[]\r\n",
					"for i in range(2918):\r\n",
					"    print(i)\r\n",
					"    if i == 2802:\r\n",
					"        i=i+1\r\n",
					"    else:\r\n",
					"        with open(f\"/synfs/{jobId}/zendesk_items/output_{i}.json\", \"r\",encoding='utf-8') as big_json:\r\n",
					"            zendesk_dict = json.load(big_json)\r\n",
					"        CommentsListOfDict = zendesk_dict['comments']\r\n",
					"        for CommentsDict in CommentsListOfDict:\r\n",
					"            #adding the file id to the dictionary before converting into df and then table\r\n",
					"            CommentsDict['file_id']=zendesk_dict['id']\r\n",
					"            FlatCommentsDict = dict( flattenDict(CommentsDict, join=lambda a,b:a+'_'+b, lift=lambda x:x) )\r\n",
					"            #go through all attachments within the comments column \r\n",
					"            for attachments in CommentsDict['attachments']:\r\n",
					"                #add the comments id and file id so we can late join the tables on them\r\n",
					"                attachments['file_id']=zendesk_dict['id']\r\n",
					"                attachments['comment_id']=CommentsDict['id']\r\n",
					"                FlatCommentsDictAttachmentsList.append(attachments)\r\n",
					"            #delete the attachment column because we already stored it in a list which will be made in a table \r\n",
					"            del FlatCommentsDict['attachments']\r\n",
					"            #flatten the comments column so we can make a table out of it \r\n",
					"            FlatCommentsDictList.append(FlatCommentsDict)\r\n",
					"#create a dataframe out of all comments of a file to put them in a table \r\n",
					"dfFlatCommentsDictList =pd.DataFrame(FlatCommentsDictList)\r\n",
					"#create a dataframe out of all commects_attachmenst of a file to create and store them in a table \r\n",
					"dfFlatCommentsDictAttachmentsList = pd.DataFrame(FlatCommentsDictAttachmentsList)\r\n",
					"\r\n",
					"    \r\n",
					"\r\n",
					"# load_all_outputs()\r\n",
					""
				],
				"execution_count": 105
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# pp(type(dfFlatCommentsDictList.via_source_from_subject))\r\n",
					"# spark.sql(f\"drop table if exists odw_standardised_db.zendesk_comments;\")\r\n",
					"spark.createDataFrame(FlatCommentsDictList).write.saveAsTable(\"odw_standardised_db.zendesk_comments\")\r\n",
					"\r\n",
					"# spark.sql(f\"drop table if exists odw_standardised_db.zendesk_comments_attachments;\")\r\n",
					"# sparkDF=spark.createDataFrame(dfFlatCommentsDictAttachmentsList)   \r\n",
					"# sparkDF1= sparkDF.withColumn(\"width\",F.col(\"width\").cast(\"string\")).withColumn(\"height\",F.col(\"height\").cast(\"string\")).withColumn(\"thumbnails\",F.col(\"thumbnails\").cast(ArrayType(StringType(),True)))\r\n",
					"# sparkDF1.printSchema\r\n",
					"# sparkDF1.write.saveAsTable(\"odw_standardised_db.zendesk_comments_attachments\")"
				],
				"execution_count": 108
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"print(FlatCommentsDictList[1]['via_source_to_email_ccs'])"
				],
				"execution_count": 112
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"[dict_item['via_source_to_email_ccs'] for dict_item in FlatCommentsDictList]"
				],
				"execution_count": 113
			}
		]
	}
}