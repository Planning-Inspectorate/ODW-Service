{
	"name": "zendesk_shows_monster",
	"properties": {
		"folder": {
			"name": "odw-raw"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "37cdc634-923e-4914-b14c-5878f86f84d5"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw",
				"name": "pinssynspodw",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"from collections.abc import Mapping\r\n",
					"from itertools import chain\r\n",
					"from operator import add\r\n",
					"#ignore FutureWarning messages \r\n",
					"import warnings\r\n",
					"warnings.filterwarnings(\"ignore\", message=\"iteritems is deprecated\")\r\n",
					"from notebookutils import mssparkutils\r\n",
					"from pprint import pprint as pp\r\n",
					"import json"
				],
				"execution_count": 11
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from notebookutils import mssparkutils\r\n",
					"### mount the data lake storage in Synapse to the Synapse File Mount API\r\n",
					"jobId = mssparkutils.env.getJobId()\r\n",
					"mssparkutils.fs.unmount(\"/zendesk_items\") \r\n",
					"mssparkutils.fs.mount( \r\n",
					"'abfss://odw-raw@pinsstodwdevuks9h80mb.dfs.core.windows.net/ZenDesk/Export/', \r\n",
					"\"/zendesk_items\", \r\n",
					"{\"linkedService\":\"ls_storage\"} \r\n",
					")   "
				],
				"execution_count": 12
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# def write_to_single_file():\r\n",
					"\r\n",
					"#     with open(f\"/synfs/{jobId}/zendesk_items/export-2023-03-15-1051-10932060-13758561992081e5c3.json\", 'r',encoding=\"utf-8\") as zendesk_json_raw:\r\n",
					"\r\n",
					"#         zendesk_json_decoded = zendesk_json_raw.read()\r\n",
					"\r\n",
					"#         zendesk_json_array = zendesk_json_decoded.split(\"\\n\")\r\n",
					"\r\n",
					"#         item_number = 0\r\n",
					"\r\n",
					"#         for zendesk_json_item in zendesk_json_array:\r\n",
					"\r\n",
					"#             if zendesk_json_item != \"\":\r\n",
					"\r\n",
					"#                 zendesk_json_dict = json.loads(zendesk_json_item)\r\n",
					"\r\n",
					"#                 with open(f\"/synfs/{jobId}/zendesk_items/output_{item_number}.json\", \"w\", encoding=\"utf-8\") as write_single_zendesk_json:\r\n",
					"\r\n",
					"#                     json.dump(zendesk_json_dict, write_single_zendesk_json)\r\n",
					"\r\n",
					"#                 item_number += 1\r\n",
					"\r\n",
					"# write_to_single_file()"
				],
				"execution_count": 13
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.sql import SparkSession \r\n",
					"spark = SparkSession.builder.getOrCreate() \r\n",
					"shows = spark.read.json(\"abfss://odw-raw@pinsstodwdevuks9h80mb.dfs.core.windows.net/ZenDesk/Export/output_*.json\",multiLine=True)\r\n",
					""
				],
				"execution_count": 14
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Create mega table\r\n",
					"# spark.sql(f\"drop table if exists odw_standardised_db.zendesk_shows;\")\r\n",
					"# shows.write.saveAsTable(\"odw_standardised_db.zendesk_shows\")"
				],
				"execution_count": 15
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import pyspark.sql.functions as F \r\n",
					"def fields_table():\r\n",
					"    fields = shows.select(\r\n",
					"    \"id\", F.explode(\"fields\").alias(\"fields\")\r\n",
					"    )\r\n",
					"\r\n",
					"    fields_id_value = shows.select(F.col(\"id\").alias(\"ticket_id\"),\r\n",
					"        F.map_from_arrays(\r\n",
					"        F.col(\"fields.id\"), F.col(\"fields.value\")\r\n",
					"        ).alias(\"ID_VALUE\")\r\n",
					"        )\r\n",
					"    # fields_id_value.show()\r\n",
					"    fields_id_value = fields_id_value.select(\"ticket_id\",\r\n",
					"        F.posexplode(\"ID_VALUE\").alias(\"position\", \"id\", \"value\")\r\n",
					"        )\r\n",
					"    # fields_id_value.show()\r\n",
					"    fields_id_value.drop(\"position\")\r\n",
					"    spark.sql(f\"drop table if exists odw_standardised_db.zendesk_fields_id_value;\")\r\n",
					"    fields_id_value.write.saveAsTable(\"odw_standardised_db.zendesk_fields_id_value\")\r\n",
					"fields_table()"
				],
				"execution_count": 18
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import pyspark.sql.functions as F \r\n",
					"def custom_fields_table():\r\n",
					"    custom_fields = shows.select(\r\n",
					"    \"id\", F.explode(\"custom_fields\").alias(\"custom_fields\")\r\n",
					"    )\r\n",
					"\r\n",
					"    custom_fields_id_value = shows.select(F.col(\"id\").alias(\"ticket_id\"),\r\n",
					"        F.map_from_arrays(\r\n",
					"        F.col(\"custom_fields.id\"), F.col(\"custom_fields.value\")\r\n",
					"        ).alias(\"ID_VALUE\")\r\n",
					"        )\r\n",
					"    # custom_fields_id_value.show()\r\n",
					"    custom_fields_id_value = custom_fields_id_value.select(\"ticket_id\",\r\n",
					"        F.posexplode(\"ID_VALUE\").alias(\"position\", \"id\", \"value\")\r\n",
					"        )\r\n",
					"    # custom_fields_id_value.show()\r\n",
					"    custom_fields_id_value.drop(\"position\")\r\n",
					"    spark.sql(f\"drop table if exists odw_standardised_db.zendesk_custom_fields_id_value;\")\r\n",
					"    custom_fields_id_value.write.saveAsTable(\"odw_standardised_db.zendesk_custom_fields_id_value\")\r\n",
					"custom_fields_table()"
				],
				"execution_count": 19
			}
		]
	}
}