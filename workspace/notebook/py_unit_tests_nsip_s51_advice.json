{
	"name": "py_unit_tests_nsip_s51_advice",
	"properties": {
		"folder": {
			"name": "utils/unit-tests"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodwpr",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "d3e118c4-ced2-4f67-b403-9dc99824eade"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": true,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodwpr",
				"name": "pinssynspodwpr",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodwpr",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import json\n",
					"from pyspark.sql.types import *\n",
					"from pyspark.sql import DataFrame\n",
					"import pprint"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"spark.catalog.refreshTable('odw_curated_migration_db.s51_advice')"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"spark.catalog.refreshTable('odw_curated_db.s51_advice')"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"entity_name: str = 's51-advice'\n",
					"folder_name: str = 's51-advice'\n",
					"std_db_name: str = 'odw_standardised_db'\n",
					"hrm_db_name: str = 'odw_harmonised_db'\n",
					"curated_db_name: str = 'odw_curated_db'\n",
					"std_table_name: str = 'sb_s51_advice'\n",
					"horizon_std_table_name: str = 'horizon_nsip_advice'\n",
					"hrm_table_name: str = 'sb_s51_advice'\n",
					"hrm_table_final: str = 'nsip_s51_advice'\n",
					"curated_table_name: str = 's51_advice'\n",
					"\n",
					"## new curated database\n",
					"curated_db_migration_name: str = 'odw_curated_migration_db'\n",
					"curated_table_migration_name: str = 's51_advice'\n",
					"primary_key: str = 'adviceId'\n",
					"horizon_pk: str = 'advicenodeid'"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#keep track of the exitCodes, if the exit code is not zero then we've had failures, we flip the boolean\n",
					"exitCode: int = 0"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"data_model_columns = [\"adviceId\",\n",
					"            \"adviceReference\",\n",
					"            \"caseId\",\n",
					"            \"caseReference\",\n",
					"            \"title\",\n",
					"            \"titleWelsh\",\n",
					"            \"from\",\n",
					"            \"agent\",\n",
					"            \"method\",\n",
					"            \"enquiryDate\",\n",
					"            \"enquiryDetails\",\n",
					"            \"enquiryDetailsWelsh\",\n",
					"            \"adviceGivenBy\",\n",
					"            \"adviceDate\",\n",
					"            \"adviceDetails\",\n",
					"            \"adviceDetailsWelsh\",\n",
					"            \"status\",\n",
					"            \"redactionStatus\",\n",
					"            \"attachmentIds\"]"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%run /utils/unit-tests/py_unit_tests_functions"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"sb_std_schema = create_spark_schema(std_db_name, entity_name, folder_name)\n",
					"sb_std_table_schema = spark.table(f\"{std_db_name}.{std_table_name}\").schema\n",
					"sb_hrm_schema = create_spark_schema(hrm_db_name, entity_name, folder_name)\n",
					"sb_hrm_table_schema = spark.table(f\"{hrm_db_name}.{hrm_table_name}\").schema\n",
					"sb_curated_schema = create_spark_schema(curated_db_name, entity_name, folder_name)\n",
					"sb_curated_table_schema = spark.table(f\"{curated_db_name}.{curated_table_name}\").schema\n",
					"horizon_latest_df = spark.sql(f\"select * from {std_db_name}.{horizon_std_table_name} where ingested_datetime = (select max(ingested_datetime) from {std_db_name}.{horizon_std_table_name})\")\n",
					"harmonised_df = spark.table(f\"{hrm_db_name}.{hrm_table_final}\")"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Compare schemas"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"std_schema_correct: bool = test_compare_schemas(sb_std_schema, sb_std_table_schema)\n",
					"exitCode += int(not std_schema_correct)\n",
					"print(f\"Service bus standardised schema correct: {std_schema_correct}\\nTable: {std_db_name}.{std_table_name}\\nDifferences shown above (if any)\")\n",
					"hrm_schema_correct: bool = test_compare_schemas(sb_hrm_schema, sb_hrm_table_schema)\n",
					"print(f\"Service bus harmonised schema correct: {hrm_schema_correct}\\nTable: {hrm_db_name}.{hrm_table_name}\\nDifferences shown above (if any)\")\n",
					"exitCode += int(not hrm_schema_correct)\n",
					"curated_schema_correct: bool = test_compare_schemas(sb_curated_schema, sb_curated_table_schema)\n",
					"print(f\"Curated schema correct: {curated_schema_correct}\\nTable: {curated_db_name}.{curated_table_name}\\nDifferences shown above (if any)\")\n",
					"exitCode += int(not curated_schema_correct)"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Compare service bus standardised with harmonised\n",
					"Should be the same count"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"standardised_count, harmonised_count, counts_match = test_std_same_rows_hrm(std_table_name, hrm_table_name)\n",
					"print(f\"Standardised Count: {standardised_count: ,}\\nHarmonised Count: {harmonised_count: ,}\\nCounts match: {counts_match}\")\n",
					"\n",
					"if standardised_count > harmonised_count:\n",
					"    exitCode += 1\n",
					"    print(f\"{standardised_count - harmonised_count} rows from Standardised are missing in Harmonised.\" )\n",
					"    differentiate_std_and_hrm(f\"{std_db_name}.{std_table_name}\", f\"{hrm_db_name}.{hrm_table_name}\", data_model_columns)"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Compare final harmonised table (if combined with Horizon) with curated table\n",
					"Comparing where IsActive = Y in harmonised = curated row count"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"harmonised_final_count, curated_count, counts_match = test_curated_row_count(hrm_table_final, curated_table_name, data_model_columns)\n",
					"print(f\"Harmonised Final Row Count (Where Active = Y): {harmonised_final_count: ,}\\nCurated Count: {curated_count: ,}\\nCounts match: {counts_match}\")\n",
					"exitCode += int(not counts_match)"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### The below tests are for the curated_migration_db table\n",
					"##### Test 1:  Check no case is dropped from Horizon"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"if test_no_project_from_horizon_dropped(std_db_name, curated_db_migration_name, horizon_std_table_name, curated_table_migration_name, horizon_pk, primary_key):\n",
					"    pass\n",
					"else:\n",
					"    print('FAIL: test_no_project_from_horizon_dropped')\n",
					"    exitCode += 1"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Test 2: Check curated layer only has horizon data and unique records (distinct primary ids)"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"no_horizon_records, total_curated_count, distinct_curated_count, counts_match = test_curated_unique_hzn_only(curated_db_migration_name, curated_table_migration_name, primary_key)\n",
					"print(f\"There is no other records than Horizon: {no_horizon_records:}\\nCurated Count: {total_curated_count: ,}\\n Distinct Curated Count: {distinct_curated_count:,}\\nCounts match: {counts_match}\")\n",
					"exitCode += int(not counts_match)"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Test 3: Check we are not losing caseids, only rows, as we are getting the latest ingestionDate"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"result = test_hrm_to_curated_no_dropping_primary_ids_only_records(hrm_db_name, hrm_table_final, curated_db_migration_name, curated_table_migration_name, primary_key, \"ODTSourceSystem\")\n",
					"print(f\"Horizon to curated no caseids are dropped: {result}\")\n",
					"exitCode += int(not result)"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#### Check array fields have duplicates in curated\n",
					"Go and find examples"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"result = test_no_duplicates_in_array_column(curated_db_name, curated_table_name, \"attachmentIds\")\n",
					"print(f\"No duplicates found in the attachmentIds: {result}\")\n",
					"exitCode += int(not result)"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#### Check array fields have duplicates in curated_migration"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"result = test_no_duplicates_in_array_column(curated_db_migration_name, curated_table_migration_name, \"attachmentIds\")\n",
					"print(f\"No duplicates found in the attachmentIds: {result}\")\n",
					"exitCode += int(not result)"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#### Check no Horizon deleted records are in harmonised table and flags are correct"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"# test no deleted horizon records in harmonised table\n",
					"result = test_no_deleted_horizon_records_in_harmonised(\n",
					"    horizon_latest_df=horizon_latest_df,\n",
					"    harmonised_df=harmonised_df,\n",
					"    horizon_primary_key=horizon_pk,\n",
					"    servicebus_primary_key=primary_key)\n",
					"\n",
					"print(result)\n",
					"exitCode += int(not result)"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# test valid to is set for inactive records\n",
					"result = test_valid_to_set_for_inactive_records(harmonised_df)\n",
					"\n",
					"print(result)\n",
					"exitCode += int(not result)"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"# test valid to is not set for active records\n",
					"result = test_valid_to_not_set_for_active_records(harmonised_df)\n",
					"\n",
					"print(result)\n",
					"exitCode += int(not result)"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"mssparkutils.notebook.exit(exitCode)"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### Trace service bus data from standardised to curated\n",
					"We need to make sure the data has loaded through correctly. To do this efficiently, we will select a sample record and check that the data is maintained as it moves through the medallian architecture."
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Define the harmonise table that only includes horizon data, and the latest record per primary id.\n",
					"##SourceColumns are not named consistently across different data types\n",
					"def harmonise_df_hzn(hrm_db: str, hrm_table: str, primary_key: str, sourceColumn:str ) -> DataFrame:\n",
					"    df_harmonise_only_hzn: DataFrame = spark.sql(f\"\"\"\n",
					"    Select Distinct   \n",
					"    AD.adviceId,\n",
					"    AD.adviceReference ,\n",
					"    CASE\n",
					"        WHEN AD.caseId = 'None'\n",
					"        THEN CAST(\"-1\" as INT)\n",
					"        ELSE AD.caseId\n",
					"    END                                                     AS caseId,\n",
					"    AD.caseReference,\n",
					"    AD.title,\n",
					"    AD.titleWelsh,\n",
					"    AD.from,\n",
					"    CASE\n",
					"        WHEN LOWER(AD.agent) = 'none'\n",
					"        THEN NULL\n",
					"        ELSE AD.agent\n",
					"    END                                                     AS agent,\n",
					"    CASE \n",
					"        WHEN LOWER(AD.method) = 'none'\n",
					"        THEN NULL\n",
					"        ELSE LOWER(AD.method)\n",
					"        END                                                 AS method,\n",
					"    AD.enquiryDate,\n",
					"    AD.enquiryDetails,\n",
					"    AD.enquiryDetailsWelsh,\n",
					"    AD.adviceGivenBy,\n",
					"    AD.adviceDate,\n",
					"    AD.adviceDetails,\n",
					"    AD.adviceDetailsWelsh,\n",
					"    CASE\n",
					"        WHEN AD.status IN ('Not Checked','unchecked','Depublished')\n",
					"        THEN 'unchecked'\n",
					"        WHEN AD.status = 'Do Not Publish'\n",
					"        THEN 'donotpublish'\n",
					"        ELSE LOWER(AD.status)\n",
					"    END                                                     AS status,\n",
					"    AD.redactionStatus,\n",
					"    AD.attachmentIds\n",
					"\n",
					"    from {hrm_db}.{hrm_table} AD\n",
					"    INNER JOIN (\n",
					"            SELECT {primary_key}, MAX(IngestionDate) AS latest_date\n",
					"            FROM {hrm_db}.{hrm_table} AD\n",
					"            WHERE LOWER({sourceColumn}) ='horizon'\n",
					"            GROUP BY {primary_key}) latest \n",
					"            ON AD.{primary_key} = latest.{primary_key} AND AD.IngestionDate = latest.latest_date \"\"\").drop_duplicates()\n",
					"\n",
					"    return df_harmonise_only_hzn"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#### Check array fields are aggregated properly\n",
					"Go and find examples"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					}
				},
				"source": [
					"%%sql\n",
					"SELECT\n",
					"    advicenodeid,\n",
					"    COUNT(DISTINCT attachmentdataid)\n",
					"FROM\n",
					"    odw_standardised_db.horizon_nsip_advice\n",
					"WHERE\n",
					"    ingested_datetime = (SELECT MAX(ingested_datetime) FROM odw_standardised_db.horizon_nsip_advice)\n",
					"GROUP BY\n",
					"    advicenodeid\n",
					"HAVING\n",
					"    COUNT(DISTINCT attachmentdataid) > 1\n",
					"ORDER BY\n",
					"    2 DESC"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					}
				},
				"source": [
					"%%sql\n",
					"select attachmentIds FROM odw_curated_db.s51_advice where adviceId = 16347955"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#### Trace Horizon data to Harmonised"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					}
				},
				"source": [
					"%%sql\n",
					"SELECT DISTINCT\n",
					"    *\n",
					"FROM\n",
					"    odw_standardised_db.horizon_nsip_advice\n",
					"WHERE\n",
					"     advicenodeid = '15179883' AND \n",
					"     ingested_datetime = (select max(ingested_datetime) from odw_standardised_db.horizon_nsip_advice);"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					}
				},
				"source": [
					"%%sql\n",
					"SELECT DISTINCT\n",
					"    *\n",
					"FROM\n",
					"    odw_harmonised_db.nsip_s51_advice\n",
					"WHERE\n",
					"     adviceid = '15179883' and IsActive = 'Y'\n",
					"order BY\n",
					"    ingestiondate DESC"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### Horizon and Service Bus data successfully combined and flags set appropriately"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"SELECT\n",
					"    adviceid\n",
					"    ,count(*)\n",
					"FROM\n",
					"    odw_harmonised_db.nsip_s51_advice\n",
					"WHERE\n",
					"    ODTSourceSystem = 'Horizon'\n",
					"GROUP BY\n",
					"    1\n",
					"ORDER BY\n",
					"    2 desc"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"SELECT\n",
					"    adviceid\n",
					"    ,count(*)\n",
					"FROM\n",
					"    odw_harmonised_db.nsip_s51_advice\n",
					"WHERE\n",
					"    ODTSourceSystem = 'ODT'\n",
					"GROUP BY\n",
					"    1\n",
					"ORDER BY\n",
					"    2 desc"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#### Harmonised Data updated in curated correctly"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					}
				},
				"source": [
					"%%sql\n",
					"SELECT DISTINCT\n",
					"    *\n",
					"FROM\n",
					"    odw_harmonised_db.nsip_s51_advice\n",
					"WHERE\n",
					"     adviceid = '15179883' and IsActive = 'Y'\n",
					"order BY\n",
					"    ingestiondate DESC"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#### Data Validation against the curated table"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					}
				},
				"source": [
					"%%sql\n",
					"SELECT\n",
					"    *\n",
					"FROM\n",
					"    odw_curated_db.s51_advice\n",
					"WHERE\n",
					"     adviceid = '15179883'"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### Horizon and Service Bus data successfully combined and flags set appropriately"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					}
				},
				"source": [
					"%%sql\n",
					"select * from odw_standardised_db.horizon_nsip_advice where adviceNodeId = 25680508 and ingested_datetime = (select max(ingested_datetime) from odw_standardised_db.horizon_nsip_advice);\n",
					"select * from odw_harmonised_db.sb_s51_advice where adviceId = 25680508;\n",
					"select * from odw_harmonised_db.nsip_s51_advice where adviceId = 25680508;\n",
					"select * from odw_curated_db.s51_advice where adviceId = 25680508;"
				],
				"execution_count": null
			}
		]
	}
}