{
	"name": "create_table_from_schema_dafa40a1-7b55-4be7-82b0-9ba522cdd3d1",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw34",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "9fe5189a-f906-49f6-804a-970241c87139"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "python"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw34",
				"name": "pinssynspodw34",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw34",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"from odw.core.util.logging_util import LoggingUtil\n",
					"import pprint\n",
					"from pyspark.sql.types import *\n",
					"import json\n",
					"from pyspark.sql.functions import col\n",
					"from pyspark.sql import DataFrame\n",
					"from notebookutils import mssparkutils\n",
					"import pyspark.sql.utils"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"source": [
					"#### Example of creating a table from a json schema in the data-model repo"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"tags": [
						"parameters"
					]
				},
				"source": [
					"db_name: str = ''\n",
					"entity_name: str = ''\n",
					"is_servicebus_schema: bool = True"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"tags": [
						"parameters_overwritten"
					]
				},
				"source": [
					"# This cell is generated from runtime parameters. Learn more: https://go.microsoft.com/fwlink/?linkid=2161015\n",
					"db_name = \"odw_curated_db\"\n",
					"entity_name = \"pins-inspector\"\n",
					"is_servicebus_schema = False\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"table_name_replace: str = entity_name.replace(\"-\", \"_\")\n",
					"if db_name in (\"odw_curated_db\", \"odw_curated_migration_db\") or not is_servicebus_schema:\n",
					"\ttable_name: str = table_name_replace\n",
					"else:\n",
					"    table_name: str = f\"sb_{table_name_replace}\"\n",
					"\n",
					"full_table_name: str = f\"{db_name}.{table_name}\"\n",
					"storage_account: str = mssparkutils.notebook.run('/utils/py_utils_get_storage_account')\n",
					"path_to_orchestration_file: str = \"abfss://odw-config@\"+storage_account+\"orchestration/orchestration.json\""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"@@LoggingUtil.logging_to_appins\n",
					"def test_table_exists(db_name: str, table_name: str) -> bool:\n",
					"    spark.sql(f\"USE {db_name}\")\n",
					"    tables_df: DataFrame = spark.sql(\"SHOW TABLES\")\n",
					"    table_names: list = [row['tableName'] for row in tables_df.collect()]\n",
					"    return table_name in table_names"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"if test_table_exists(db_name, table_name):\n",
					"    LoggingUtil().log_info(f\"{db_name}.{table_name} Table already exists, exiting\")\n",
					"    mssparkutils.notebook.exit('')\n",
					"else:\n",
					"    LoggingUtil().log_info(f\"{db_name}.{table_name} Table does not already exist\")"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"@@LoggingUtil.logging_to_appins\n",
					"def get_incremental_key(entity_name: str, storage_account: str, path_to_orchestration_file: str) -> str:\n",
					"    # getting the incremental key from the odw-config/orchestration\n",
					"    df: DataFrame = spark.read.option(\"multiline\",\"true\").json(path_to_orchestration_file)\n",
					"    definitions: list = json.loads(df.toJSON().first())['definitions']\n",
					"    definition: dict = next((d for d in definitions if entity_name == d['Source_Filename_Start']), None)\n",
					"    return definition['Harmonised_Incremental_Key'] if definition and 'Harmonised_Incremental_Key' in definition else None"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"@@LoggingUtil.logging_to_appins\n",
					"def create_spark_schema(db_name: str, entity_name: str) -> StructType:\n",
					"    \n",
					"    incremental_key: str = get_incremental_key(entity_name, storage_account, path_to_orchestration_file) if db_name == 'odw_harmonised_db' else None\n",
					"\n",
					"    if incremental_key is None:\n",
					"        raise ValueError(f\"Missing incremental key for entity '{entity_name}' in database '{db_name}'. Schema creation aborted.\")\n",
					"\n",
					"    schema = mssparkutils.notebook.run(\"/py_create_spark_schema\", 30, {\"db_name\": db_name, \"entity_name\": entity_name, \"incremental_key\": incremental_key, \"is_servicebus_schema\": is_servicebus_schema})\n",
					"    try: \n",
					"        LoggingUtil().log_info(f\"Parsing JSON schema for entity '{entity_name}'...\")\n",
					"        schema_dict = json.loads(schema)\n",
					"        LoggingUtil().log_info(f\"Succesfully parsed JSON schema\")\n",
					"\n",
					"    except json.JSONDecodeError as e:\n",
					"        LoggingUtil().log_error(f\"Failed to parse schema JSON for entity '{entity_anme}':{e}\")\n",
					"        raise\n",
					"\n",
					"    LoggingUtil().log_info(\"Creating Spark StructType from parsed schema...\")\n",
					"    spark_schema = StructType.fromJson(schema_dict)\n",
					"    LoggingUtil().log_info(\"Successfully created Spark schema.\")\n",
					"\n",
					"\n",
					"    return spark_schema"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"storage_account: str = mssparkutils.notebook.run('/utils/py_utils_get_storage_account')\n",
					"metadata_path: str = \"abfss://odw-config@\"+storage_account+\"existing-tables-metadata.json\"\n",
					"df  = spark.read.json(metadata_path, multiLine=True)"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"# Explode each metadata category separately (as they are nested lists)\n",
					"standardised_df = df.select(explode(col(\"standardised_metadata\")).alias(\"metadata\"))\n",
					"harmonised_df = df.select(explode(col(\"harmonised_metadata\")).alias(\"metadata\"))\n",
					"curated_df = df.select(explode(col(\"curated_metadata\")).alias(\"metadata\"))\n",
					"logging_df = df.select(explode(col(\"logging_metadata\")).alias(\"metadata\"))\n",
					"config_df = df.select(explode(col(\"config_metadata\")).alias(\"metadata\"))\n",
					"\n",
					"# Select the relevant fields\n",
					"df_exploded = standardised_df.union(harmonised_df).union(curated_df).union(logging_df).union(config_df).selectExpr(\"metadata.*\")"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"@@LoggingUtil.logging_to_appins\n",
					"def get_table_metadata(db_name: str, table_name: str) -> (str, str, str):\n",
					"    \"\"\"\n",
					"    Extracts table_location and table_type given a database and table name.\n",
					"    \"\"\"\n",
					"    filtered_df = df_exploded.filter(\n",
					"        (col(\"database_name\") == db_name) & (col(\"table_name\") == table_name)\n",
					"    ).select(\"table_location\", \"table_type\", \"table_format\")\n",
					"    \n",
					"    # Collect and return the result\n",
					"    result = filtered_df.collect()\n",
					"    if result:\n",
					"        return result[0][\"table_location\"], result[0][\"table_type\"], result[0][\"table_format\"]\n",
					"    else:\n",
					"        return None, None, None\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"@@LoggingUtil.logging_to_appins\n",
					"def create_spark_dataframe() -> DataFrame:\n",
					"    spark_dataframe: DataFrame = spark.createDataFrame([], schema=create_spark_schema(db_name, entity_name))\n",
					"    return spark_dataframe"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"@@LoggingUtil.logging_to_appins\n",
					"def create_spark_table(db_name: str, table_name: str, spark_dataframe: DataFrame) -> None:\n",
					"    \"\"\"\n",
					"    Creates a Delta table in Synapse:\n",
					"      - If table is 'External', writes to the provided `table_location`\n",
					"      - Otherwise, creates a Managed table in Synapse.\n",
					"\n",
					"    :param db_name: Database name in Synapse\n",
					"    :param table_name: Table name\n",
					"    :param table_location: Table storage path (used for External tables)\n",
					"    :param table_type: Type of the table (\"External\" or others)\n",
					"    :param spark_dataframe: The DataFrame to be written as a table\n",
					"    \"\"\"\n",
					"\n",
					"    table_location, table_type, table_format =  get_table_metadata(db_name, table_name)\n",
					"\n",
					"    try:\n",
					"        table_full_name = f\"{db_name}.{table_name}\"\n",
					"        LoggingUtil().log_info(f\"Starting table creation: {table_full_name}, Table Type: {table_type}\")\n",
					"\n",
					"        if table_type.lower() == \"external\":\n",
					"            LoggingUtil().log_info(f\"Writing External table to: {table_location}\")\n",
					"\n",
					"            # Write DataFrame as External Delta Table\n",
					"            spark_dataframe.write.format(table_format).mode(\"overwrite\").option(\"path\", table_location).saveAsTable(table_full_name)\n",
					"\n",
					"            LoggingUtil().log_info(f\"External table {table_full_name} created at {table_location}\")\n",
					"\n",
					"        else:\n",
					"            LoggingUtil().log_info(f\"Creating a Managed Table in Synapse: {table_full_name}\")\n",
					"\n",
					"            # Write as Managed Table\n",
					"            spark_dataframe.write.format(table_format).mode(\"overwrite\").saveAsTable(table_full_name)\n",
					"\n",
					"            LoggingUtil().log_info(f\"Managed table {table_full_name} created in Synapse\")\n",
					"\n",
					"    except AnalysisException as e:\n",
					"        if \"already exists\" in str(e):\n",
					"            logging.warning(f\"Table {table_full_name} already exists. Consider using 'overwrite' mode.\")\n",
					"        elif \"Permission denied\" in str(e):\n",
					"            LoggingUtil().log_error(f\"Permission issue while writing table {table_full_name}. Ensure correct access to {table_location}\")\n",
					"        else:\n",
					"            LoggingUtil().log_error(f\"Error creating table {table_full_name}: {str(e)}\")\n",
					"\n",
					"    except Exception as e: \n",
					"        LoggingUtil().log_error(f\"Unexpected error creating table {table_full_name}: {str(e)}\")"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"@@LoggingUtil.logging_to_appins\n",
					"def get_container_name(db_name: str) -> str:\n",
					"    if db_name == 'odw_standardised_db':\n",
					"        return 'odw-standardised'\n",
					"    if db_name == 'odw_harmonised_db':\n",
					"        return 'odw-harmonised'\n",
					"    if db_name == 'odw_curated_db':\n",
					"        return 'odw-curated'"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"spark_dataframe = create_spark_dataframe()\n",
					"\n",
					"try:\n",
					"    LoggingUtil().log_info(f\"Creating spark table {table_name}\")\n",
					"    create_spark_table(db_name, table_name, spark_dataframe)\n",
					"except pyspark.sql.utils.AnalysisException as e:\n",
					"    table_loc = f\"abfss://{get_container_name(db_name)}@{storage_account}{table_name}\"\n",
					"    LoggingUtil().log_error(f\"Unable to create table because the location ({table_loc}) is not empty. Emptying the location and retrying\")\n",
					"    mssparkutils.fs.rm(table_loc, True)\n",
					"    create_spark_table(db_name, table_name, spark_dataframe)"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"tableExists:bool = test_table_exists(db_name, table_name)\n",
					"LoggingUtil().log_info(f\"{db_name}.{table_name} exists = {tableExists}\")"
				],
				"execution_count": null
			}
		],
		"folder": {
			"name": "archive/"
		}
	}
}