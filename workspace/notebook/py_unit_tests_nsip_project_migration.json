{
	"name": "py_unit_tests_nsip_project_migration",
	"properties": {
		"folder": {
			"name": "utils/unit-tests"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "8ccaf70b-bce8-4482-a659-5c6243053933"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw",
				"name": "pinssynspodw",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#### This unit test notebook is created to test the new curated tables thats contain only horizon data in odw_curated_migration_db database "
				]
			},
			{
				"cell_type": "code",
				"source": [
					"import json\r\n",
					"from pyspark.sql.types import *\r\n",
					"from pyspark.sql import DataFrame\r\n",
					"from pyspark.sql import functions as F\r\n",
					"import pprint"
				],
				"execution_count": 107
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"entity_name: str = 'nsip-project'\r\n",
					"std_db_name: str = 'odw_standardised_db'\r\n",
					"hrm_db_name: str = 'odw_harmonised_db'\r\n",
					"## new curated database\r\n",
					"curated_db_name: str = 'odw_curated_migration_db'\r\n",
					"hrm_table_final: str = 'nsip_project'\r\n",
					"curated_table_name: str = 'nsip_data'"
				],
				"execution_count": 108
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Define new harmonised DataFrame with only Horizon data"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Define the harmonise table that only includes horizon data, and the latest record per primary id.\r\n",
					"def harmonise_df_hzn(hrm_table: str) -> DataFrame:\r\n",
					"    df_harmonise_only_hzn: DataFrame = spark.sql(f\"\"\"\r\n",
					"    select *\r\n",
					"    from {hrm_db_name}.{hrm_table_final} tbl_1\r\n",
					"    where SourceSystem='Horizon'\r\n",
					"\tand tbl_1.IngestionDate = (select max(IngestionDate) from {hrm_db_name}.{hrm_table_final} tbl_2  WHERE tbl_1.caseid = tbl_2.caseid group by caseid)\r\n",
					"    \"\"\")\r\n",
					"\r\n",
					"    return df_harmonise_only_hzn\r\n",
					"\r\n",
					""
				],
				"execution_count": 109
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Test 1:  Counts match in harmonised and curated"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def test_counts_hrm_cur(hrm_table: str, cur_table: str) -> tuple[int, int, bool]:   \r\n",
					"\r\n",
					"    ## Define harmonise and curated dataframes\r\n",
					"\r\n",
					"    df_harmonise_hzn = harmonise_df_hzn(hrm_table)\r\n",
					"\r\n",
					"    df_curated:DataFrame =  spark.sql(f\"\"\"\r\n",
					"    select *\r\n",
					"    from {curated_db_name}.{curated_table_name}\"\"\")\r\n",
					"    \r\n",
					"    ## calculate counts\r\n",
					"\r\n",
					"    hrm_count = df_harmonise_hzn.count()\r\n",
					"    cur_count = df_curated.count()\r\n",
					"    return (hrm_count, cur_count, hrm_count == cur_count)\r\n",
					"\r\n",
					""
				],
				"execution_count": 110
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"harmonised_count, curated_count, counts_match = test_counts_hrm_cur(hrm_table_final, curated_table_name)\r\n",
					"print(f\"Harmonised Count: {harmonised_count: ,}\\nCurated Count: {curated_count: ,}\\nCounts match: {counts_match}\")"
				],
				"execution_count": 111
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Test 2: Check curated layer only has horizon data and unique records (distinct primary ids)"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def test_curated_unique_hzn_only(cur_table: str) -> tuple[bool,int,int,bool]: \r\n",
					"\r\n",
					"    df_curated:DataFrame =  spark.sql(f\"\"\"\r\n",
					"    select *\r\n",
					"    from {curated_db_name}.{curated_table_name}\"\"\")\r\n",
					"\r\n",
					"    count_not_hzn_records: int = df_curated.filter(\"SourceSystem != 'horizon'\").count()\r\n",
					"\r\n",
					"    total_count = df_curated.count()\r\n",
					"\r\n",
					"    #Count of distinct caseid (primary id)\r\n",
					"    distinct_count = df_curated.select(\"caseid\").distinct().count()\r\n",
					"\r\n",
					"\r\n",
					"    return (count_not_hzn_records == 0,total_count,distinct_count,total_count == distinct_count)\r\n",
					"\r\n",
					""
				],
				"execution_count": 112
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"no_horizon_records, total_curated_count, distinct_curated_count,counts_match = test_curated_unique_hzn_only(curated_table_name)\r\n",
					"print(f\"There is no other records than Horizon: {no_horizon_records:}\\nCurated Count: {total_curated_count: ,}\\n Distinct Curated Count: {distinct_curated_count:,}\\nCounts match: {counts_match}\")"
				],
				"execution_count": 113
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Test 3: Check we are not loosing caseids, only rows, as we are getting the latest ingestionDate"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def test_hrm_to_curated_no_dropping_primary_ids_only_records(hrm_table_final: str, curated_table_name: str) -> bool:\r\n",
					"    df: DataFrame = spark.sql(f\"\"\"\r\n",
					"    select caseid\r\n",
					"    from {hrm_db_name}.{hrm_table_final}\r\n",
					"    where sourcesystem = 'Horizon'\r\n",
					"    and caseid not in\r\n",
					"    (\r\n",
					"        select caseid\r\n",
					"        from {curated_db_name}.{curated_table_name}\r\n",
					"    )\r\n",
					"    \"\"\")\r\n",
					"\r\n",
					"    return df.count() == 0"
				],
				"execution_count": 114
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"print(f\"Horizon to curated no caseids are dropped: {test_hrm_to_curated_no_dropping_primary_ids_only_records(hrm_table_final, curated_table_name)}\")"
				],
				"execution_count": 115
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### **Dive into data: Example queries** "
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"Example of caseids with multiple records in harmonised"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"select * from odw_harmonised_db.nsip_project tbl_1\r\n",
					"where caseid in (3148455,3217867) and SourceSystem ='Horizon'\r\n",
					"order by caseid"
				],
				"execution_count": 116
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"Get the latest ingestionDate per primary id (caseid). Expected result: 1 row per primary id."
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"select * from odw_harmonised_db.nsip_project tbl_1\r\n",
					"where SourceSystem='Horizon'  and IngestionDate = (select max(IngestionDate) from odw_harmonised_db.nsip_project tbl_2  WHERE tbl_1.caseid = tbl_2.caseid group by caseid) and caseid in (3148455,3217867)"
				],
				"execution_count": 117
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"Make sure there is not duplicate primary ids. Expected result: No result"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"SELECT caseid, COUNT(*)\r\n",
					"FROM odw_curated_migration_db.vw_nsip_data\r\n",
					"GROUP BY caseid\r\n",
					"HAVING COUNT(*) > 1;"
				],
				"execution_count": 118
			}
		]
	}
}