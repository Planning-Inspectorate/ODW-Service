{
	"name": "py_create_tables",
	"properties": {
		"description": "Create Tables from JSON Schema",
		"folder": {
			"name": "odw-harmonised"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "a67d8c8f-cf31-4716-8f6d-88e10e874b96"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": true,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw",
				"name": "pinssynspodw",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.2",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"tags": []
				},
				"source": [
					"from notebookutils import mssparkutils\n",
					"storage_account=mssparkutils.notebook.run('/utils/py_utils_get_storage_account')"
				],
				"execution_count": 15
			},
			{
				"cell_type": "code",
				"metadata": {
					"tags": [
						"parameters"
					]
				},
				"source": [
					"raw_storage_container = 'n/a' + storage_account\r\n",
					"raw_storage_source_folder = 'n/a'\r\n",
					"raw_storage_source_name = 'n/a'\r\n",
					"workspace_storage_container = 'abfss://odw-workspace@' + storage_account\r\n",
					"workspace_storage_temp_folder = 'employee-syn'\r\n",
					"workspace_storage_temp_name = 'employee-syn'\r\n",
					"harmonised_storage_container = 'abfss://odw-harmonised@' + storage_account\r\n",
					"json_schema_folder='json_schema'\r\n",
					"json_schema_file_name='absence_schema.json'\r\n",
					"harmonised_storage_delta_folder = 'daya_temp'\r\n",
					"harmonised_storage_delta_table_name = 'daya_temp3'\r\n",
					"delta_lake_table_key_column = 'n/a'\r\n",
					"delta_lake_table_name = \"daya_temp3\"\r\n",
					"delta_lake_database_name = \"odw_harmonised_db\"\r\n",
					"sourceColumnNames = 'n/a'"
				],
				"execution_count": 26
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"json_schema_file_path = harmonised_storage_container + '/' + json_schema_folder + '/' + json_schema_file_name\n",
					"\n",
					"df=spark.read.text(json_schema_file_path)\n",
					"\n",
					"table = [x[\"value\"] for x in df.rdd.collect()]\n",
					"\n",
					"\n",
					"\n",
					"json_string = \"\"\n",
					"\n",
					"for item in table:\n",
					"    json_string += item\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.sql.types import StructType, DataType, StructField, StringType, IntegerType\n",
					"import json\n",
					"\n",
					"# new_schema = DataType.json(json_string).asInstanceOf[StructType]\n",
					"new_schema = StructType.fromJson(json.loads(json_string))"
				],
				"execution_count": 28
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"\n",
					"from pyspark.sql.types import StructType, StructField, IntegerType, StringType ,DoubleType\n",
					"from delta.tables import DeltaTable\n",
					"harmonised_storage_delta_table_path = harmonised_storage_container + '/' + harmonised_storage_delta_folder + '/' + harmonised_storage_delta_table_name\n",
					"\n",
					"print('------------harmonised_storage_delta_table_path-----'+harmonised_storage_delta_table_path)\n",
					"\n",
					"if not (DeltaTable.isDeltaTable(spark,harmonised_storage_delta_table_path)):\n",
					"    harmonisationInspectordf = spark.createDataFrame([], new_schema)\n",
					"    harmonisationInspectordf.write.option(\"mergeSchema\", \"true\").format('delta').mode('overwrite').save(harmonised_storage_delta_table_path)\n",
					"    spark.sql(\"CREATE TABLE {0}.{1} USING DELTA LOCATION '{2}'\".format(delta_lake_database_name,delta_lake_table_name,harmonised_storage_delta_table_path))"
				],
				"execution_count": null
			}
		]
	}
}