{
	"name": "py_create_tables",
	"properties": {
		"description": "Create Tables from JSON Schema",
		"folder": {
			"name": "odw-harmonised"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "24dd643e-ac6e-4e95-9015-64f75a5b50e2"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": true,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw",
				"name": "pinssynspodw",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.2",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"tags": []
				},
				"source": [
					"from notebookutils import mssparkutils\n",
					"storage_account=mssparkutils.notebook.run('/utils/py_utils_get_storage_account')"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"tags": [
						"parameters"
					]
				},
				"source": [
					"\r\n",
					"raw_storage_container = 'abfss://odw-raw@' + storage_account  \r\n",
					"raw_storage_source_folder = 'appeal'\r\n",
					"raw_storage_source_name = 'dim_appeal_combined.csv'\r\n",
					"curated_storage_container = 'abfss://odw-curated@' + storage_account\r\n",
					"curated_storage_folder = 'appeal'\r\n",
					"curated_storage_table_name = 'dim_appeal_combined'\r\n",
					"curated_database_name = 'odw_curated_db'"
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import pandas as pd\n",
					"import requests\n",
					"import io\n",
					"\n",
					"path =  raw_storage_container + 'odw-harmonised/json_schema/absence_schema.json'\n",
					"print(path)\n",
					"\n",
					"url= 'https://pinsstodwdevuks9h80mb.blob.core.windows.net/odw-harmonised/json_schema/absence_schema.json'\n",
					"\n",
					"s=requests.get(url).content\n",
					"print(s)\n",
					"c=pd.read_json(io.StringIO(s.decode('utf-8')))\n",
					"\n",
					"print('------direct---')\n",
					"data = pd.read_json(url)\n",
					"print(data)"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.sql.types import *\n",
					"\n",
					"path =  raw_storage_container + 'odw-harmonised/json_schema/absence_schema.json'\n",
					"print(path)\n",
					"df = spark.read.json(path)\n",
					"df.show()"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from org.apache.spark.sql.types import DataType, StructType\n",
					"\n",
					"json_string=\"\"\"\n",
					"{\n",
					"    \"fields\":[\n",
					"        {\n",
					"            \"name\": \"AbsenceID\",\n",
					"            \"type\": \"NVARCHAR\"\n",
					"        },\n",
					"        {\n",
					"            \"name\": \"EmployeeID\",\n",
					"            \"type\": \"NVARCHAR\"\n",
					"        },\n",
					"        {\n",
					"            \"name\": \"StaffNumber\",\n",
					"            \"type\": \"NVARCHAR\"\n",
					"        },\n",
					"        {\n",
					"            \"name\": \"AbsenceStartDate\",\n",
					"            \"type\": \"NVARCHAR\"\n",
					"        },\n",
					"        {\n",
					"            \"name\": \"AbsenceEndDate\",\n",
					"            \"type\": \"NVARCHAR\"\n",
					"        },\n",
					"        {\n",
					"            \"name\": \"Type\",\n",
					"            \"type\": \"NVARCHAR\"\n",
					"        },\n",
					"        {\n",
					"            \"name\": \"SicknessGroup\",\n",
					"            \"type\": \"NVARCHAR\"\n",
					"        },\n",
					"        {\n",
					"            \"name\": \"Days\",\n",
					"            \"type\": \"NVARCHAR\"\n",
					"        },\n",
					"        {\n",
					"            \"name\": \"CalendarDays\",\n",
					"            \"type\": \"NVARCHAR\"\n",
					"        },\n",
					"        {\n",
					"            \"name\": \"WorkScheduleID\",\n",
					"            \"type\": \"NVARCHAR\"\n",
					"        },\n",
					"        {\n",
					"            \"name\": \"AnnualLeaveStart\",\n",
					"            \"type\": \"NVARCHAR\"\n",
					"        },\n",
					"        {\n",
					"            \"name\": \"SourceSystemID\",\n",
					"            \"type\": \"NVARCHAR\"\n",
					"        },\n",
					"        {\n",
					"            \"name\": \"StartDate\",\n",
					"            \"type\": \"NVARCHAR\"\n",
					"        },\n",
					"        {\n",
					"            \"name\": \"EndDate\",\n",
					"            \"type\": \"NVARCHAR\"\n",
					"        }],\n",
					"        \"primaryKey\":\"AbsenceID\",\n",
					"        \"foreignKeys\":[\n",
					"            {\n",
					"                \"fields\": \"EmployeeID\",\n",
					"                \"reference\": {\n",
					"                    \"resource\": \"hr_record_fact\",\n",
					"                    \"fields\": \"EmployeeID\"\n",
					"                }\n",
					"            },\n",
					"            {\n",
					"                \"fields\": \"WorkScheduleID\",\n",
					"                \"reference\": {\n",
					"                    \"resource\": \"hr_record_fact\",\n",
					"                    \"fields\": \"WorkScheduleID\"\n",
					"                }\n",
					"            },\n",
					"            {\n",
					"                \"fields\": \"SourceSystemID\",\n",
					"                \"reference\": {\n",
					"                    \"resource\": \"sourceSystem_fact\",\n",
					"                    \"fields\": \"SourceSystemID\"\n",
					"                }\n",
					"            }\n",
					"        ]\n",
					"}\n",
					"   \n",
					"\"\"\"\n",
					"\n",
					"val schema = DataType.fromJson(jsonString).asInstanceOf[StructType]\n",
					"\n",
					"schema.print\n",
					""
				],
				"execution_count": 18
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"from pyspark.sql.types import *\r\n",
					"\r\n",
					"raw_storage_folder_path = raw_storage_container   + '/' + raw_storage_source_folder + '/' + raw_storage_source_name\r\n",
					"curated_storage_folder_path = curated_storage_container + '/' + curated_storage_folder + '/' + curated_storage_table_name\r\n",
					"\r\n",
					"rawsourceDF=spark.read.options(header='True', inferSchema='True', lineSep=\"ยง\", quote=\"\\\"\", escape=\"\\\\\", quoteAll=\"true\").csv(raw_storage_folder_path)\r\n",
					"\r\n",
					"#Rename Columns with illegal Parquet characters\r\n",
					"import re\r\n",
					"cols=[re.sub(\"( |\\#|\\# |\\.|\\(|\\)|\\/)\",\"_\",i) for i in rawsourceDF.columns] # replace chars with _\r\n",
					"cols=[re.sub(\"([\\_]{2,})\",\"_\",i) for i in cols] #replace consecutive _ with one _\r\n",
					"cols=[re.sub(\"(\\_)$\",\"\",i) for i in cols] #remove trailing _\r\n",
					"rawsourceDF=rawsourceDF.toDF(*cols)\r\n",
					"\r\n",
					"rawsourceDF.write.option(\"header\", \"true\").format('parquet').mode('overwrite').save(curated_storage_folder_path)\r\n",
					"\r\n",
					"spark.sql(\"DROP TABLE {0}.{1}\".format(curated_database_name,curated_storage_table_name))\r\n",
					"spark.sql(\"CREATE TABLE {0}.{1} USING PARQUET LOCATION '{2}' \".format(curated_database_name,curated_storage_table_name,curated_storage_folder_path))\r\n",
					""
				],
				"execution_count": 32
			}
		]
	}
}