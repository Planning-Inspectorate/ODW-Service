{
	"name": "py_process_raw_to_standardised_delta_table",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinsodwspark",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "e47e91a0-40f4-4084-895d-6530d4154de9"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-odw-data-dev-rg/providers/Microsoft.Synapse/workspaces/pins-odw-data-dev-syn-ws/bigDataPools/pinsodwspark",
				"name": "pinsodwspark",
				"type": "Spark",
				"endpoint": "https://pins-odw-data-dev-syn-ws.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinsodwspark",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.1",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"raw_storage_container = 'abfss://odw-raw@pinsodwdatadevstorage.dfs.core.windows.net'\r\n",
					"raw_storage_source_folder = 'iss'\r\n",
					"raw_storage_source_name = 'inspector_raw'\r\n",
					"workspace_storage_container = 'abfss://odw-workspace@pinsodwdatadevstorage.dfs.core.windows.net'\r\n",
					"workspace_storage_temp_folder = 'iss'\r\n",
					"workspace_storage_temp_name = 'inspector_raw'\r\n",
					"standardised_storage_container = 'abfss://odw-standardised@pinsodwdatadevstorage.dfs.core.windows.net'\r\n",
					"standardised_storage_delta_folder = 'iss'\r\n",
					"standardised_storage_delta_table_name = 'inspector_raw'\r\n",
					"delta_lake_table_key_column = 'Id'"
				],
				"execution_count": 4
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"from pyspark.sql.types import *\r\n",
					"\r\n",
					"raw_storage_folder_path = raw_storage_container   + '/' + raw_storage_source_folder + '/' + raw_storage_source_name\r\n",
					"workspace_storage_folder_path = workspace_storage_container + '/' + workspace_storage_temp_folder + '/' + workspace_storage_temp_name\r\n",
					"sourceColumnNames = 'Id,Title,Given_Names,Family_Name,Name,Address_Line_1,Address_Line_2,Town,County,Postcode,Phone_Number,Email_Address,Active_Status,Branch,Chart,Date_In,Date_Out,EO_Responsible,Grade,PINS_Staff_Number,Resource_Group,Staff,Trainee_Level,PDAC_ETL_Date'\r\n",
					"\r\n",
					"sourceColumnNamesList = sourceColumnNames.split (\",\")\r\n",
					"sourceStructString = StructType()\r\n",
					"for sourceColumn in sourceColumnNamesList:\r\n",
					"    sourceStructString.add(StructField(sourceColumn ,StringType(), True))\r\n",
					"\r\n",
					"\r\n",
					"rawsourceDF=spark.read.option(\"delimiter\", \"|\").option(\"header\", \"true\").schema(sourceStructString).csv(raw_storage_folder_path)\r\n",
					"\r\n",
					"rawsourceDF.write.option(\"header\", \"true\").format('parquet').mode('overwrite').save(workspace_storage_folder_path)\r\n",
					""
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"# Import modules\r\n",
					"from delta.tables import DeltaTable\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					"standardised_storage_delta_table_path = standardised_storage_container + '/' + standardised_storage_delta_folder + '/' + standardised_storage_delta_table_name\r\n",
					"\r\n",
					"sourceParquetDF = spark.read.option(\"inferSchema\",\"true\").format('parquet').option(\"recursiveFileLookup\", \"true\").load(workspace_storage_folder_path)\r\n",
					"\r\n",
					"if (DeltaTable.isDeltaTable(spark,standardised_storage_delta_table_path)):\r\n",
					"    deltaTable = DeltaTable.forPath(spark,standardised_storage_delta_table_path)\r\n",
					"    # Merge new data into existing table\r\n",
					"    deltaTable.alias(\"existing\").merge(\r\n",
					"        source=sourceParquetDF.alias(\"updates\"),\r\n",
					"        condition=\"existing.\" + delta_lake_table_key_column + \" = updates.\" + delta_lake_table_key_column  # We look for matches on the name column\r\n",
					"    ).whenMatchedUpdateAll(\r\n",
					"    ).whenNotMatchedInsertAll(\r\n",
					"    ).execute()\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					"else:\r\n",
					"    sourceParquetDF.write.format('delta').save(standardised_storage_delta_table_path)\r\n",
					"    spark.sql(\"CREATE TABLE inspector_raw USING DELTA LOCATION '{0}'\".format(standardised_storage_delta_table_path))"
				],
				"execution_count": 8
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"spark.sql(\"CREATE TABLE inspector_raw USING DELTA LOCATION '{0}'\".format(standardised_storage_delta_table_path))"
				],
				"execution_count": 6
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"# Get all versions\r\n",
					"delta_table = DeltaTable.forPath(spark, standardised_storage_delta_table_path)\r\n",
					"display(delta_table.history())"
				],
				"execution_count": 9
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"select * from default.inspector_raw "
				],
				"execution_count": 7
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"##select * from default.sap_hr TIMESTAMP AS OF \"2022-02-24 15:41:47.719\"\r\n",
					"incrementaldf = spark.read \\\r\n",
					"  .format(\"delta\") \\\r\n",
					"  .option(\"timestampAsOf\", \"2022-02-24 15:39:38.462\") \\\r\n",
					"  .load(standardised_storage_delta_table_path)\r\n",
					"\r\n",
					"display(incrementaldf.limit(5))"
				],
				"execution_count": 75
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					""
				],
				"execution_count": null
			}
		]
	}
}