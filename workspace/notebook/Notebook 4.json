{
	"name": "Notebook 4",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "a7be14b1-0411-4318-931f-36d764cd3952"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "python"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw",
				"name": "pinssynspodw",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"data_model_columns=[\r\n",
					"    \"employeeId\",\r\n",
					"    \"id\",\r\n",
					"    \"givenName\",\r\n",
					"    \"surname\",\r\n",
					"    \"userPrincipalName\"\r\n",
					"    ]"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"def test_std_to_hrm_no_dropping_records(sb_hrm_table: str, hrm_table_final: str) -> bool:\n",
					"    df: DataFrame = spark.sql(f\"\"\"\n",
					"    select documentId\n",
					"    from {hrm_db_name}.{sb_hrm_table}\n",
					"    where documentId not in\n",
					"    (\n",
					"        select documentId\n",
					"        from {hrm_db_name}.{hrm_table_final}\n",
					"    )\n",
					"    \"\"\")\n",
					"\n",
					"    return df.count() == 0"
				],
				"execution_count": null
			}
		]
	}
}