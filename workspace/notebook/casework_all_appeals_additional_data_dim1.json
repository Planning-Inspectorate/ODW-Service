{
	"name": "casework_all_appeals_additional_data_dim1",
	"properties": {
		"folder": {
			"name": "odw-harmonised/Casework"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "b9d91aa4-bdd3-4252-a5a0-9f54307c3aba"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw",
				"name": "pinssynspodw",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Joins the two source tables into one view\n",
					"\n",
					"- This script joins the following two source tables into a single source. It's being done by grouping the source tables by the distinct hash.\n",
					"```\n",
					"odw_standardised_db.horizon_appeals_additional_data\n",
					"odw_standardised_db.horizon_add_additional_data\n",
					"```\n",
					"## View T1 is created"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"\n",
					"%%sql\n",
					"\n",
					"\n",
					"CREATE OR REPLACE TEMPORARY VIEW  ST1 AS \n",
					"SELECT appealrefnumber,lastmodified,decisiondate,decisionsubmitdate,bespokeindicator,bespoketargetdate,processingstate,linkstatus,casecloseddate,pcsappealwithdrawndate,\n",
					"numberofresidences,appealsdocumentscomplete,questionnairereceived,lpaconditionsreceived,lpaconditionsforwarded,statementsdue,lpastatementsubmitted,lpastatementforwarded,\n",
					"appellantstatementsubmitted,appellantstatementforwarded,finalcommentsdue,lpacommentssubmitted,lpacommentsforwarded,statementofcommongrounddue,statementofcommongroundreceived,\n",
					"appellantcommentssubmitted,appellantcommentsforwarded,thirdpartyrepsdue,thirdpartyrepsforwarded,sitenoticesent,proofsdue,lpaproofssubmitted,lpaproofsforwarded,\n",
					"appellantsproofssubmitted,appellantsproofsforwarded,areaofsiteinhectares,dateofdecisionifissued,typeofapplication,appealsourceindicator,developmentorallegation,\n",
					"amountdue,sitegreenbelt,lpaapplicationreference,lpaapplicationdate,datenotrecoveredorderecovered,daterecovered,callindate\n",
					"FROM odw_standardised_db.horizon_appeals_additional_data\n",
					"GROUP BY appealrefnumber,lastmodified,decisiondate,decisionsubmitdate,bespokeindicator,bespoketargetdate,processingstate,linkstatus,casecloseddate,pcsappealwithdrawndate,\n",
					"numberofresidences,appealsdocumentscomplete,questionnairereceived,lpaconditionsreceived,lpaconditionsforwarded,statementsdue,lpastatementsubmitted,lpastatementforwarded,\n",
					"appellantstatementsubmitted,appellantstatementforwarded,finalcommentsdue,lpacommentssubmitted,lpacommentsforwarded,statementofcommongrounddue,statementofcommongroundreceived,\n",
					"appellantcommentssubmitted,appellantcommentsforwarded,thirdpartyrepsdue,thirdpartyrepsforwarded,sitenoticesent,proofsdue,lpaproofssubmitted,lpaproofsforwarded,\n",
					"appellantsproofssubmitted,appellantsproofsforwarded,areaofsiteinhectares,dateofdecisionifissued,typeofapplication,appealsourceindicator,developmentorallegation,\n",
					"amountdue,sitegreenbelt,lpaapplicationreference,lpaapplicationdate,datenotrecoveredorderecovered,daterecovered,callindate;\n",
					"\n",
					"CREATE OR REPLACE TEMPORARY VIEW ST2\n",
					"AS SELECT appealrefnumber,caseprocess,caseworkmarker,costsappliedforindicator,level,procedureappellant,procedurelpa,proceduredetermineddate,targetdate,agriculturalholding,\n",
					"developmentaffectsettingoflistedbuilding,floorspaceinsquaremetres,sitegridreferenceeasting,sitegridreferencenorthing,historicbuildinggrantmade,incarelatestoca,\n",
					"inspectorneedtoentersite,isfloodinganissue,isthesitewithinanaonb,sitewithinsssi\n",
					"FROM odw_standardised_db.horizon_add_additional_data\n",
					"GROUP BY appealrefnumber,caseprocess,caseworkmarker,costsappliedforindicator,level,procedureappellant,procedurelpa,proceduredetermineddate,targetdate,agriculturalholding,\n",
					"developmentaffectsettingoflistedbuilding,floorspaceinsquaremetres,sitegridreferenceeasting,sitegridreferencenorthing,historicbuildinggrantmade,incarelatestoca,\n",
					"inspectorneedtoentersite,isfloodinganissue,isthesitewithinanaonb,sitewithinsssi;\n",
					"\n",
					"CREATE OR REPLACE TEMPORARY VIEW T1 AS SELECT\n",
					"    ST1.*,\n",
					"    ST2.caseprocess,\n",
					"    ST2.caseworkmarker,\n",
					"    ST2.costsappliedforindicator,\n",
					"    ST2.level,\n",
					"    ST2.procedureappellant,\n",
					"    ST2.procedurelpa,\n",
					"    ST2.proceduredetermineddate,\n",
					"    ST2.targetdate,\n",
					"    ST2.agriculturalholding,\n",
					"    ST2.developmentaffectsettingoflistedbuilding,\n",
					"    ST2.floorspaceinsquaremetres,\n",
					"    ST2.sitegridreferenceeasting,\n",
					"    ST2.sitegridreferencenorthing,\n",
					"    ST2.historicbuildinggrantmade,\n",
					"    ST2.incarelatestoca,\n",
					"    ST2.inspectorneedtoentersite,\n",
					"    ST2.isfloodinganissue,\n",
					"    ST2.isthesitewithinanaonb,\n",
					"    ST2.sitewithinsssi\n",
					"    FROM ST1 FULL JOIN ST2 on ST1.appealrefnumber = ST2.appealrefnumber;\n",
					"\n",
					"    select count(*) from T1;"
				],
				"execution_count": 2
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Check for new, updated or deleted data\n",
					"- This script checks for new, updated or deleted data by checking the source data (horizon tables) against the target (odw_harmonised_db.casework tables)\n",
					"- **New Data:** where an main Reference in the source does not exist in the target, then NewData flag is set to 'Y'\n",
					"- **Updated data:** Comparison occurs on Reference Fields in source and in target where the row hash is different i.e. there is a change in one of the columns. NewData flag is set to 'Y'\n",
					"- **Deleted data:** where an Reference info in the target exists but the same identifyers don't exist in the source. DeletedData flag is set to 'Y'\n",
					"\n",
					"## View casework_all_appeals_additional_data_dim_new is created"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"-- Build casework_all_appeals_additional_data_dim_new table\n",
					"-- Gets modified or deleted from source rows\n",
					"\n",
					"CREATE OR REPLACE TEMPORARY VIEW casework_all_appeals_additional_data_dim_new \n",
					"\n",
					"     AS\n",
					"\n",
					"-- gets data that matches of SourceID and flags that it is modified based on a row (md5) hash. Flags as \"NewData\"\n",
					"-- gets data that is in the target but not in source. Flags as \"DeletedData\"\n",
					"\n",
					"SELECT \n",
					"    CASE\n",
					"        WHEN T1.AppealRefNumber IS NULL\n",
					"        THEN T3.AllAppealsAdditionalDataID\n",
					"        ELSE NULL\n",
					"    END as AllAppealsAdditionalDataID,\n",
					"    T1.appealrefnumber AS AppealRefNumber,\n",
					"    T1.lastmodified AS LastModified,\n",
					"    T1.decisiondate AS DecisionDate,\n",
					"    T1.decisionsubmitdate AS DecisionSubmitDate,\n",
					"    T1.bespokeindicator AS BespokeIndicator,\n",
					"    T1.bespoketargetdate AS BespokeTargetDate,\n",
					"    T1.processingstate AS ProcessingState,\n",
					"    T1.linkstatus AS LinkStatus,\n",
					"    T1.casecloseddate AS CaseClosedDate,\n",
					"    T1.pcsappealwithdrawndate AS PCSAppealWithdrawnDate,\n",
					"    T1.numberofresidences AS NumberOfResidences,\n",
					"    T1.appealsdocumentscomplete AS AppealsDocumentsComplete,\n",
					"    T1.questionnairereceived AS QuestionnaireReceived,\n",
					"    T1.lpaconditionsreceived AS LPAConditionsReceived,\n",
					"    T1.lpaconditionsforwarded AS LPAConditionsForwarded,\n",
					"    T1.statementsdue AS StatementsDue,\n",
					"    T1.lpastatementsubmitted AS LPAStatementSubmitted,\n",
					"    T1.lpastatementforwarded AS LPAStatementForwarded,\n",
					"    T1.appellantstatementsubmitted AS AppellantStatementSubmitted,\n",
					"    T1.appellantstatementforwarded AS AppellantStatementForwarded,\n",
					"    T1.finalcommentsdue AS FinalCommentsDue,\n",
					"    T1.lpacommentssubmitted AS LPACommentsSubmitted,\n",
					"    T1.lpacommentsforwarded AS LPACommentsForwarded,\n",
					"    T1.statementofcommongrounddue AS StatementOfCommonGroundDue,\n",
					"    T1.statementofcommongroundreceived AS StatementOfCommonGroundReceived,\n",
					"    T1.appellantcommentssubmitted AS AppellantCommentsSubmitted,\n",
					"    T1.appellantcommentsforwarded AS AppellantCommentsForwarded,\n",
					"    T1.thirdpartyrepsdue AS ThirdPartyRepsDue,\n",
					"    T1.thirdpartyrepsforwarded AS ThirdPartyRepsForwarded,\n",
					"    T1.sitenoticesent AS SiteNoticeSent,\n",
					"    T1.proofsdue AS ProofsDue,\n",
					"    T1.lpaproofssubmitted AS LPAProofsSubmitted,\n",
					"    T1.lpaproofsforwarded AS LPAProofsForwarded,\n",
					"    T1.appellantsproofssubmitted AS AppellantsProofsSubmitted,\n",
					"    T1.appellantsproofsforwarded AS AppellantsProofsForwarded,\n",
					"    T1.areaofsiteinhectares AS AreaOfSiteInHectares,\n",
					"    T1.dateofdecisionifissued AS DateOfDecisionIfIssued,\n",
					"    T1.typeofapplication AS TypeOfApplication,\n",
					"    T1.appealsourceindicator AS AppealSourceIndicator,\n",
					"    T1.developmentorallegation AS DevelopmentOrAllegation,\n",
					"    T1.amountdue AS AmountDue,\n",
					"    T1.sitegreenbelt AS SiteGreenBelt,\n",
					"    T1.lpaapplicationreference AS LPAApplicationReference,\n",
					"    T1.lpaapplicationdate AS LPAApplicationDate,\n",
					"    T1.datenotrecoveredorderecovered AS DateNotRecoveredOrDeRecovered,\n",
					"    T1.daterecovered AS DateRecovered,\n",
					"    T1.callindate AS CallInDate,\n",
					"    T1.caseprocess AS CaseProcess,\n",
					"    T1.caseworkmarker AS CaseworkMarker,\n",
					"    T1.costsappliedforindicator AS CostsAppliedForIndicator,\n",
					"    T1.level AS Level,\n",
					"    T1.procedureappellant AS ProcedureAppellant,\n",
					"    T1.procedurelpa AS ProcedureLPA,\n",
					"    T1.proceduredetermineddate AS ProcedureDeterminedDate,\n",
					"    T1.targetdate AS TargetDate,\n",
					"    T1.agriculturalholding AS AgriculturalHolding,\n",
					"    T1.developmentaffectsettingoflistedbuilding AS DevelopmentAffectSettingOfListedBuilding,\n",
					"    T1.floorspaceinsquaremetres AS FloorSpaceInSquareMetres,\n",
					"    T1.sitegridreferenceeasting AS SiteGridReferenceEasting,\n",
					"    T1.sitegridreferencenorthing AS SiteGridReferenceNorthing,\n",
					"    T1.historicbuildinggrantmade AS HistoricBuildingGrantMade,\n",
					"    T1.incarelatestoca AS InCARelatesToCA,\n",
					"    T1.inspectorneedtoentersite AS InspectorNeedToEnterSite,\n",
					"    T1.isfloodinganissue AS IsFloodingAnIssue,\n",
					"    T1.isthesitewithinanaonb AS IsTheSiteWithinAnAONB,\n",
					"    T1.sitewithinsssi AS SiteWithinSSSI,\n",
					"    T2.SourceSystemID,\n",
					"    CURRENT_TIMESTAMP AS IngestionDate,\n",
					"    NULL AS ValidTo,\n",
					"    md5(concat(IFNULL(T1.appealrefnumber,'.'), IFNULL(T1.lastmodified,'.'), IFNULL(T1.decisiondate,'.'), IFNULL(T1.decisionsubmitdate,'.'), IFNULL(T1.bespokeindicator,'.'), IFNULL(T1.bespoketargetdate,'.'), IFNULL(T1.processingstate,'.'), IFNULL(T1.linkstatus,'.'), IFNULL(T1.casecloseddate,'.'), IFNULL(T1.pcsappealwithdrawndate,'.'), IFNULL(T1.numberofresidences,'.'), IFNULL(T1.appealsdocumentscomplete,'.'), IFNULL(T1.questionnairereceived,'.'), IFNULL(T1.lpaconditionsreceived,'.'), IFNULL(T1.lpaconditionsforwarded,'.'), IFNULL(T1.statementsdue,'.'), IFNULL(T1.lpastatementsubmitted,'.'), IFNULL(T1.lpastatementforwarded,'.'), IFNULL(T1.appellantstatementsubmitted,'.'), IFNULL(T1.appellantstatementforwarded,'.'), IFNULL(T1.finalcommentsdue,'.'), IFNULL(T1.lpacommentssubmitted,'.'), IFNULL(T1.lpacommentsforwarded,'.'), IFNULL(T1.statementofcommongrounddue,'.'), IFNULL(T1.statementofcommongroundreceived,'.'), IFNULL(T1.appellantcommentssubmitted,'.'), IFNULL(T1.appellantcommentsforwarded,'.'), IFNULL(T1.thirdpartyrepsdue,'.'), IFNULL(T1.thirdpartyrepsforwarded,'.'), IFNULL(T1.sitenoticesent,'.'), IFNULL(T1.proofsdue,'.'), IFNULL(T1.lpaproofssubmitted,'.'), IFNULL(T1.lpaproofsforwarded,'.'), IFNULL(T1.appellantsproofssubmitted,'.'), IFNULL(T1.appellantsproofsforwarded,'.'), IFNULL(T1.areaofsiteinhectares,'.'), IFNULL(T1.dateofdecisionifissued,'.'), IFNULL(T1.typeofapplication,'.'), IFNULL(T1.appealsourceindicator,'.'), IFNULL(T1.developmentorallegation,'.'), IFNULL(T1.amountdue,'.'), IFNULL(T1.sitegreenbelt,'.'), IFNULL(T1.lpaapplicationreference,'.'), IFNULL(T1.lpaapplicationdate,'.'), IFNULL(T1.datenotrecoveredorderecovered,'.'), IFNULL(T1.daterecovered,'.'), IFNULL(T1.callindate,'.'), IFNULL(T1.caseprocess,'.'), IFNULL(T1.caseworkmarker,'.'), IFNULL(T1.costsappliedforindicator,'.'), IFNULL(T1.level,'.'), IFNULL(T1.procedureappellant,'.'), IFNULL(T1.procedurelpa,'.'), IFNULL(T1.proceduredetermineddate,'.'), IFNULL(T1.targetdate,'.'), IFNULL(T1.agriculturalholding,'.'), IFNULL(T1.developmentaffectsettingoflistedbuilding,'.'), IFNULL(T1.floorspaceinsquaremetres,'.'), IFNULL(T1.sitegridreferenceeasting,'.'), IFNULL(T1.sitegridreferencenorthing,'.'), IFNULL(T1.historicbuildinggrantmade,'.'), IFNULL(T1.incarelatestoca,'.'), IFNULL(T1.inspectorneedtoentersite,'.'), IFNULL(T1.isfloodinganissue,'.'), IFNULL(T1.isthesitewithinanaonb,'.'), IFNULL(T1.sitewithinsssi,'.'))) as RowID, -- this hash should contain all the defining fields\n",
					"    'Y' as IsActive,\n",
					"    CASE\n",
					"        WHEN T1.appealrefnumber = T3.AppealRefNumber AND md5(concat(IFNULL(T1.appealrefnumber,'.'), IFNULL(T1.lastmodified,'.'), IFNULL(T1.decisiondate,'.'), IFNULL(T1.decisionsubmitdate,'.'), IFNULL(T1.bespokeindicator,'.'), IFNULL(T1.bespoketargetdate,'.'), IFNULL(T1.processingstate,'.'), IFNULL(T1.linkstatus,'.'), IFNULL(T1.casecloseddate,'.'), IFNULL(T1.pcsappealwithdrawndate,'.'), IFNULL(T1.numberofresidences,'.'), IFNULL(T1.appealsdocumentscomplete,'.'), IFNULL(T1.questionnairereceived,'.'), IFNULL(T1.lpaconditionsreceived,'.'), IFNULL(T1.lpaconditionsforwarded,'.'), IFNULL(T1.statementsdue,'.'), IFNULL(T1.lpastatementsubmitted,'.'), IFNULL(T1.lpastatementforwarded,'.'), IFNULL(T1.appellantstatementsubmitted,'.'), IFNULL(T1.appellantstatementforwarded,'.'), IFNULL(T1.finalcommentsdue,'.'), IFNULL(T1.lpacommentssubmitted,'.'), IFNULL(T1.lpacommentsforwarded,'.'), IFNULL(T1.statementofcommongrounddue,'.'), IFNULL(T1.statementofcommongroundreceived,'.'), IFNULL(T1.appellantcommentssubmitted,'.'), IFNULL(T1.appellantcommentsforwarded,'.'), IFNULL(T1.thirdpartyrepsdue,'.'), IFNULL(T1.thirdpartyrepsforwarded,'.'), IFNULL(T1.sitenoticesent,'.'), IFNULL(T1.proofsdue,'.'), IFNULL(T1.lpaproofssubmitted,'.'), IFNULL(T1.lpaproofsforwarded,'.'), IFNULL(T1.appellantsproofssubmitted,'.'), IFNULL(T1.appellantsproofsforwarded,'.'), IFNULL(T1.areaofsiteinhectares,'.'), IFNULL(T1.dateofdecisionifissued,'.'), IFNULL(T1.typeofapplication,'.'), IFNULL(T1.appealsourceindicator,'.'), IFNULL(T1.developmentorallegation,'.'), IFNULL(T1.amountdue,'.'), IFNULL(T1.sitegreenbelt,'.'), IFNULL(T1.lpaapplicationreference,'.'), IFNULL(T1.lpaapplicationdate,'.'), IFNULL(T1.datenotrecoveredorderecovered,'.'), IFNULL(T1.daterecovered,'.'), IFNULL(T1.callindate,'.'), IFNULL(T1.caseprocess,'.'), IFNULL(T1.caseworkmarker,'.'), IFNULL(T1.costsappliedforindicator,'.'), IFNULL(T1.level,'.'), IFNULL(T1.procedureappellant,'.'), IFNULL(T1.procedurelpa,'.'), IFNULL(T1.proceduredetermineddate,'.'), IFNULL(T1.targetdate,'.'), IFNULL(T1.agriculturalholding,'.'), IFNULL(T1.developmentaffectsettingoflistedbuilding,'.'), IFNULL(T1.floorspaceinsquaremetres,'.'), IFNULL(T1.sitegridreferenceeasting,'.'), IFNULL(T1.sitegridreferencenorthing,'.'), IFNULL(T1.historicbuildinggrantmade,'.'), IFNULL(T1.incarelatestoca,'.'), IFNULL(T1.inspectorneedtoentersite,'.'), IFNULL(T1.isfloodinganissue,'.'), IFNULL(T1.isthesitewithinanaonb,'.'), IFNULL(T1.sitewithinsssi,'.'))) <> T3.RowID   -- same row, changed data\n",
					"        THEN 'Y'\n",
					"        WHEN T3.AppealRefNumber IS NULL -- new AppealRefNumber\n",
					"        THEN 'Y'\n",
					"        ELSE 'N'\n",
					"    END as NewData,\n",
					"    CASE\n",
					"        WHEN T1.appealrefnumber IS NULL\n",
					"        THEN 'Y'\n",
					"        ELSE 'N'\n",
					"    END AS  DeletedData, \n",
					"    T3.IsActive as HistoricIsActive\n",
					"    \n",
					"\n",
					"FROM T1\n",
					"LEFT JOIN odw_harmonised_db.main_sourcesystem_fact T2 ON \"Casework\" = T2.Description AND T2.IsActive = 'Y'\n",
					"FULL JOIN odw_harmonised_db.casework_all_appeals_additional_data_dim T3 ON T1.appealrefnumber = T3.AppealRefNumber AND T3.IsActive = 'Y'\n",
					"WHERE\n",
					"    (\n",
					"        -- flags new data        \n",
					"        (   CASE\n",
					"                WHEN T1.appealrefnumber = T3.AppealRefNumber AND md5(concat(IFNULL(T1.appealrefnumber,'.'), IFNULL(T1.lastmodified,'.'), IFNULL(T1.decisiondate,'.'), IFNULL(T1.decisionsubmitdate,'.'), IFNULL(T1.bespokeindicator,'.'), IFNULL(T1.bespoketargetdate,'.'), IFNULL(T1.processingstate,'.'), IFNULL(T1.linkstatus,'.'), IFNULL(T1.casecloseddate,'.'), IFNULL(T1.pcsappealwithdrawndate,'.'), IFNULL(T1.numberofresidences,'.'), IFNULL(T1.appealsdocumentscomplete,'.'), IFNULL(T1.questionnairereceived,'.'), IFNULL(T1.lpaconditionsreceived,'.'), IFNULL(T1.lpaconditionsforwarded,'.'), IFNULL(T1.statementsdue,'.'), IFNULL(T1.lpastatementsubmitted,'.'), IFNULL(T1.lpastatementforwarded,'.'), IFNULL(T1.appellantstatementsubmitted,'.'), IFNULL(T1.appellantstatementforwarded,'.'), IFNULL(T1.finalcommentsdue,'.'), IFNULL(T1.lpacommentssubmitted,'.'), IFNULL(T1.lpacommentsforwarded,'.'), IFNULL(T1.statementofcommongrounddue,'.'), IFNULL(T1.statementofcommongroundreceived,'.'), IFNULL(T1.appellantcommentssubmitted,'.'), IFNULL(T1.appellantcommentsforwarded,'.'), IFNULL(T1.thirdpartyrepsdue,'.'), IFNULL(T1.thirdpartyrepsforwarded,'.'), IFNULL(T1.sitenoticesent,'.'), IFNULL(T1.proofsdue,'.'), IFNULL(T1.lpaproofssubmitted,'.'), IFNULL(T1.lpaproofsforwarded,'.'), IFNULL(T1.appellantsproofssubmitted,'.'), IFNULL(T1.appellantsproofsforwarded,'.'), IFNULL(T1.areaofsiteinhectares,'.'), IFNULL(T1.dateofdecisionifissued,'.'), IFNULL(T1.typeofapplication,'.'), IFNULL(T1.appealsourceindicator,'.'), IFNULL(T1.developmentorallegation,'.'), IFNULL(T1.amountdue,'.'), IFNULL(T1.sitegreenbelt,'.'), IFNULL(T1.lpaapplicationreference,'.'), IFNULL(T1.lpaapplicationdate,'.'), IFNULL(T1.datenotrecoveredorderecovered,'.'), IFNULL(T1.daterecovered,'.'), IFNULL(T1.callindate,'.'), IFNULL(T1.caseprocess,'.'), IFNULL(T1.caseworkmarker,'.'), IFNULL(T1.costsappliedforindicator,'.'), IFNULL(T1.level,'.'), IFNULL(T1.procedureappellant,'.'), IFNULL(T1.procedurelpa,'.'), IFNULL(T1.proceduredetermineddate,'.'), IFNULL(T1.targetdate,'.'), IFNULL(T1.agriculturalholding,'.'), IFNULL(T1.developmentaffectsettingoflistedbuilding,'.'), IFNULL(T1.floorspaceinsquaremetres,'.'), IFNULL(T1.sitegridreferenceeasting,'.'), IFNULL(T1.sitegridreferencenorthing,'.'), IFNULL(T1.historicbuildinggrantmade,'.'), IFNULL(T1.incarelatestoca,'.'), IFNULL(T1.inspectorneedtoentersite,'.'), IFNULL(T1.isfloodinganissue,'.'), IFNULL(T1.isthesitewithinanaonb,'.'), IFNULL(T1.sitewithinsssi,'.'))) <> T3.RowID  -- same row, changed data\n",
					"                THEN 'Y'\n",
					"                WHEN T3.AppealRefNumber IS NULL -- new AppealRefNumber\n",
					"                THEN 'Y'\n",
					"            ELSE 'N'\n",
					"            END  = 'Y' ) OR\n",
					"        \n",
					"        -- flags deleted data\n",
					"        (   CASE\n",
					"                WHEN T1.appealrefnumber IS NULL\n",
					"                THEN 'Y'\n",
					"                ELSE 'N'\n",
					"            END = 'Y' )\n",
					"    );"
				],
				"execution_count": 3
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Run tests to check integrity of data by numbers\n",
					"- This script checks for the total number of current codes in the harmonised table, and compare against the numbers for new data to be added and data to be set as inactive.\n",
					"- **Changes tracking:** where it checks the data against active records in harmonised and compares with records to add and records to be set as inactive.\n",
					"- **Changes tolerance levels:** if the total amount to be added and deleted surpasses the tolerance limit, it will interrupt the process of loading the data"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"outputs_hidden": false,
						"source_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# from pyspark.sql import SparkSession\n",
					"# spark = SparkSession.builder.getOrCreate()\n",
					"\n",
					"# Source_Number = spark.sql(\"SELECT COUNT(*) AS Source_Number FROM pins_casework_all_appeals_additional_data_grouped\")\n",
					"# Current_Number = spark.sql(\"SELECT COUNT (DISTINCT RowID) AS Current_Number FROM odw_harmonised_db.casework_all_appeals_additional_data_dim where IsActive = 'Y' \")\n",
					"# New_Data_Number = spark.sql(\"SELECT COUNT (DISTINCT RowID) AS New_Data_Number FROM casework_all_appeals_additional_data_dim WHERE NewData = 'Y'\")\n",
					"# Deleted_Data_Number = spark.sql(\"SELECT COUNT (DISTINCT RowID) AS Deleted_Data_Number FROM casework_all_appeals_additional_data_dim WHERE DeletedData = 'Y'\")\n",
					"\n",
					"# Source_Number_Pandas = Source_Number.toPandas()\n",
					"# Current_Number_Pandas =  Current_Number.toPandas()\n",
					"# New_Data_Number_Pandas = New_Data_Number.toPandas()\n",
					"# Deleted_Data_Number_Pandas = Deleted_Data_Number.toPandas()\n",
					"\n",
					"# # checking if new total number of registers matches the previously loaded, plus New ones, minus Deleted ones\n",
					"# print(\"SET 1:\")\n",
					"# Total_Number = Source_Number_Pandas['Source_Number'].tolist() \n",
					"# Current_Loaded_Number = Current_Number_Pandas['Current_Number'].tolist() \n",
					"# New_Data_Number = New_Data_Number_Pandas['New_Data_Number'].tolist() \n",
					"# Deleted_Data_Number = Deleted_Data_Number_Pandas['Deleted_Data_Number'].tolist() \n",
					"\n",
					"# if Total_Number[0] != (Current_Loaded_Number[0] + New_Data_Number[0] - Deleted_Data_Number[0]):\n",
					"#     raise RuntimeError(\"Loading Number do not match\")\n",
					"# else:\n",
					"#     print(\"Loading number matches with existing codes plus new, minus deleted!\")\n",
					"\n",
					"# if New_Data_Number[0] > 1000:\n",
					"#     raise RuntimeError(\"ALERT: Too many new codes\")\n",
					"# else:\n",
					"#     print(\"New data under tolerance levels\")\n",
					"\n",
					"# if Deleted_Data_Number[0] > 500:\n",
					"#     raise RuntimeError(\"ALERT: Too many deleted codes\")\n",
					"# else:\n",
					"#     print(\"Unused codes under tolerance levels\")"
				],
				"execution_count": 4
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Run tests to check integrity of data by comparison of codes\n",
					"- This script checks for the total list of current codes in the harmonised table, and compare against the list for new data to be added and data to be set as inactive.\n",
					"- **Changes tracking:** where it checks the data against active records in harmonised and compares with records to add and records to be set as inactive."
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"outputs_hidden": false,
						"source_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# from pyspark.sql import SparkSession\n",
					"# spark = SparkSession.builder.getOrCreate()\n",
					"\n",
					"# Current_Records = spark.sql(\"SELECT DISTINCT RowID AS Current_Records FROM odw_harmonised_db.casework_all_appeals_additional_data_dim where IsActive = 'Y' \")\n",
					"# New_Data_Records = spark.sql(\"SELECT DISTINCT RowID AS New_Data_Records FROM casework_all_appeals_additional_data_dim WHERE NewData = 'Y'\")\n",
					"# Deleted_Data_Records = spark.sql(\"SELECT DISTINCT RowID AS Deleted_Data_Records FROM casework_all_appeals_additional_data_dim WHERE DeletedData = 'Y'\")\n",
					"\n",
					"# Current_Records_Pandas =  Current_Records.toPandas()\n",
					"# New_Data_Records_Pandas = New_Data_Records.toPandas()\n",
					"# Deleted_Data_Records_Pandas = Deleted_Data_Records.toPandas()\n",
					"\n",
					"# # checking if a deleted records are correcly flagged, not existing in the new data, but existing inpreviously loaded\n",
					"# print(\"TEST 2:\")\n",
					"\n",
					"# Current_Records = Current_Records_Pandas['Current_Records'].tolist() \n",
					"# Deleted_Records = Deleted_Data_Records_Pandas['Deleted_Data_Records'].tolist()\n",
					"# New_Records = New_Data_Records_Pandas['New_Data_Records'].tolist()\n",
					"\n",
					"# print(Current_Records)\n",
					"# print(Deleted_Records)\n",
					"# print(New_Records)\n",
					"\n",
					"# for i in Deleted_Records:\n",
					"#     if i in Current_Records: \n",
					"#         print(i + \" to be deleted is in the current records\")\n",
					"#     else:\n",
					"#         raise RuntimeError(\"Records to Delete do not match\")\n",
					"\n",
					"# for j in New_Records:\n",
					"#     if j not in Current_Records: \n",
					"#         print(j + \" to be added is not in the current records\")\n",
					"#     else:\n",
					"#         raise RuntimeError(\"Records to Add do not match\")"
				],
				"execution_count": 5
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Dataset is created that contains changed data and corresponding target data\n",
					"- This script combines data that has been updated, Deleted or is new, with corresponding target data\n",
					"- View **casework_all_appeals_additional_data_dim_new** is unioned to the target data filter to only those rows where changes have been detected\n",
					"## View casework_all_appeals_additional_data_dim_changed_rows is created"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"outputs_hidden": false,
						"source_hidden": false
					},
					"microsoft": {
						"language": "sparksql"
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"-- Create new and updated dataset\n",
					"\n",
					"CREATE OR REPLACE TEMPORARY VIEW casework_all_appeals_additional_data_dim_changed_rows\n",
					"\n",
					"    AS\n",
					"\n",
					"-- gets updated, deleted and new rows \n",
					"Select \n",
					"    AllAppealsAdditionalDataID,\n",
					"    AppealRefNumber,\n",
					"    LastModified,\n",
					"    DecisionDate,\n",
					"    DecisionSubmitDate,\n",
					"    BespokeIndicator,\n",
					"    BespokeTargetDate,\n",
					"    ProcessingState,\n",
					"    LinkStatus,\n",
					"    CaseClosedDate,\n",
					"    PCSAppealWithdrawnDate,\n",
					"    NumberOfResidences,\n",
					"    AppealsDocumentsComplete,\n",
					"    QuestionnaireReceived,\n",
					"    LPAConditionsReceived,\n",
					"    LPAConditionsForwarded,\n",
					"    StatementsDue,\n",
					"    LPAStatementSubmitted,\n",
					"    LPAStatementForwarded,\n",
					"    AppellantStatementSubmitted,\n",
					"    AppellantStatementForwarded,\n",
					"    FinalCommentsDue,\n",
					"    LPACommentsSubmitted,\n",
					"    LPACommentsForwarded,\n",
					"    StatementOfCommonGroundDue,\n",
					"    StatementOfCommonGroundReceived,\n",
					"    AppellantCommentsSubmitted,\n",
					"    AppellantCommentsForwarded,\n",
					"    ThirdPartyRepsDue,\n",
					"    ThirdPartyRepsForwarded,\n",
					"    SiteNoticeSent,\n",
					"    ProofsDue,\n",
					"    LPAProofsSubmitted,\n",
					"    LPAProofsForwarded,\n",
					"    AppellantsProofsSubmitted,\n",
					"    AppellantsProofsForwarded,\n",
					"    AreaOfSiteInHectares,\n",
					"    DateOfDecisionIfIssued,\n",
					"    TypeOfApplication,\n",
					"    AppealSourceIndicator,\n",
					"    DevelopmentOrAllegation,\n",
					"    AmountDue,\n",
					"    SiteGreenBelt,\n",
					"    LPAApplicationReference,\n",
					"    LPAApplicationDate,\n",
					"    DateNotRecoveredOrDeRecovered,\n",
					"    DateRecovered,\n",
					"    CallInDate,\n",
					"    CaseProcess,\n",
					"    CaseworkMarker,\n",
					"    CostsAppliedForIndicator,\n",
					"    Level,\n",
					"    ProcedureAppellant,\n",
					"    ProcedureLPA,\n",
					"    ProcedureDeterminedDate,\n",
					"    TargetDate,\n",
					"    AgriculturalHolding,\n",
					"    DevelopmentAffectSettingOfListedBuilding,\n",
					"    FloorSpaceInSquareMetres,\n",
					"    SiteGridReferenceEasting,\n",
					"    SiteGridReferenceNorthing,\n",
					"    HistoricBuildingGrantMade,\n",
					"    InCARelatesToCA,\n",
					"    InspectorNeedToEnterSite,\n",
					"    IsFloodingAnIssue,\n",
					"    IsTheSiteWithinAnAONB,\n",
					"    SiteWithinSSSI,\n",
					"    SourceSystemID,\n",
					"    IngestionDate,\n",
					"    ValidTo,\n",
					"    RowID,\n",
					"    IsActive\n",
					"\n",
					"From casework_all_appeals_additional_data_dim_new WHERE HistoricIsActive = 'Y' or HistoricIsActive IS NULL\n",
					"\n",
					"    UNION ALL\n",
					"\n",
					"-- gets original versions of updated rows so we can update EndDate and set IsActive flag to 'N'\n",
					"SELECT\n",
					"    AllAppealsAdditionalDataID,\n",
					"    AppealRefNumber,\n",
					"    LastModified,\n",
					"    DecisionDate,\n",
					"    DecisionSubmitDate,\n",
					"    BespokeIndicator,\n",
					"    BespokeTargetDate,\n",
					"    ProcessingState,\n",
					"    LinkStatus,\n",
					"    CaseClosedDate,\n",
					"    PCSAppealWithdrawnDate,\n",
					"    NumberOfResidences,\n",
					"    AppealsDocumentsComplete,\n",
					"    QuestionnaireReceived,\n",
					"    LPAConditionsReceived,\n",
					"    LPAConditionsForwarded,\n",
					"    StatementsDue,\n",
					"    LPAStatementSubmitted,\n",
					"    LPAStatementForwarded,\n",
					"    AppellantStatementSubmitted,\n",
					"    AppellantStatementForwarded,\n",
					"    FinalCommentsDue,\n",
					"    LPACommentsSubmitted,\n",
					"    LPACommentsForwarded,\n",
					"    StatementOfCommonGroundDue,\n",
					"    StatementOfCommonGroundReceived,\n",
					"    AppellantCommentsSubmitted,\n",
					"    AppellantCommentsForwarded,\n",
					"    ThirdPartyRepsDue,\n",
					"    ThirdPartyRepsForwarded,\n",
					"    SiteNoticeSent,\n",
					"    ProofsDue,\n",
					"    LPAProofsSubmitted,\n",
					"    LPAProofsForwarded,\n",
					"    AppellantsProofsSubmitted,\n",
					"    AppellantsProofsForwarded,\n",
					"    AreaOfSiteInHectares,\n",
					"    DateOfDecisionIfIssued,\n",
					"    TypeOfApplication,\n",
					"    AppealSourceIndicator,\n",
					"    DevelopmentOrAllegation,\n",
					"    AmountDue,\n",
					"    SiteGreenBelt,\n",
					"    LPAApplicationReference,\n",
					"    LPAApplicationDate,\n",
					"    DateNotRecoveredOrDeRecovered,\n",
					"    DateRecovered,\n",
					"    CallInDate,\n",
					"    CaseProcess,\n",
					"    CaseworkMarker,\n",
					"    CostsAppliedForIndicator,\n",
					"    Level,\n",
					"    ProcedureAppellant,\n",
					"    ProcedureLPA,\n",
					"    ProcedureDeterminedDate,\n",
					"    TargetDate,\n",
					"    AgriculturalHolding,\n",
					"    DevelopmentAffectSettingOfListedBuilding,\n",
					"    FloorSpaceInSquareMetres,\n",
					"    SiteGridReferenceEasting,\n",
					"    SiteGridReferenceNorthing,\n",
					"    HistoricBuildingGrantMade,\n",
					"    InCARelatesToCA,\n",
					"    InspectorNeedToEnterSite,\n",
					"    IsFloodingAnIssue,\n",
					"    IsTheSiteWithinAnAONB,\n",
					"    SiteWithinSSSI,\n",
					"    SourceSystemID,\n",
					"    IngestionDate,\n",
					"    ValidTo,\n",
					"    RowID,\n",
					"    IsActive\n",
					"    \n",
					"FROM odw_harmonised_db.casework_all_appeals_additional_data_dim\n",
					"WHERE AppealRefNumber IN (SELECT AppealRefNumber FROM casework_all_appeals_additional_data_dim_new WHERE AllAppealsAdditionalDataID IS NULL) AND IsActive = 'Y'; "
				],
				"execution_count": 6
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# View casework_all_appeals_additional_data_dim_changed_rows is used in a merge (Upsert) statement into the target table\n",
					"- **WHEN MATCHED** ON the surrogate Key (i.e. AllAppealsAdditionalDataID), EndDate is set to today -1 day and the IsActive flag is set to 'N'\n",
					"- **WHEN NOT MATCHED** ON the surrogate Key, insert rows\n",
					"## Table odw_harmonised_db.casework_all_appeals_additional_data_dim is updated"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"outputs_hidden": false,
						"source_hidden": false
					},
					"microsoft": {
						"language": "sparksql"
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"-- merge into dim table\n",
					"\n",
					"MERGE INTO odw_harmonised_db.casework_all_appeals_additional_data_dim AS Target\n",
					"USING casework_all_appeals_additional_data_dim_changed_rows AS Source\n",
					"\n",
					"ON Source.AllAppealsAdditionalDataID = Target.AllAppealsAdditionalDataID\n",
					"\n",
					"-- For Updates existing rows\n",
					"\n",
					"WHEN MATCHED\n",
					"    THEN \n",
					"    UPDATE SET\n",
					"    Target.ValidTo = date_sub(current_timestamp,1),\n",
					"    Target.IsActive = 'N'\n",
					"\n",
					"-- Insert completely new rows\n",
					"WHEN NOT MATCHED \n",
					"    THEN INSERT * ;  \n",
					""
				],
				"execution_count": 7
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Fix the IDs\n",
					"- No auto-increment feature is available in delta tables, therefore we need to create new IDs for the inserted rows\n",
					"- This is done by select the target data and using INSERT OVERWRITE to re-insert the data is a new Row Number\n",
					"## Table odw_harmonised_db.casework_all_appeals_additional_data_dim is updated"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"outputs_hidden": false,
						"source_hidden": false
					},
					"microsoft": {
						"language": "sparksql"
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"-- Insert new casework_all_appeals_additional_data_dim\n",
					"\n",
					"INSERT OVERWRITE odw_harmonised_db.casework_all_appeals_additional_data_dim\n",
					"\n",
					"SELECT \n",
					"    ROW_NUMBER() OVER (ORDER BY AppealRefNumber NULLS LAST) AS AllAppealsAdditionalDataID,\n",
					"    AppealRefNumber,\n",
					"    LastModified,\n",
					"    DecisionDate,\n",
					"    DecisionSubmitDate,\n",
					"    BespokeIndicator,\n",
					"    BespokeTargetDate,\n",
					"    ProcessingState,\n",
					"    LinkStatus,\n",
					"    CaseClosedDate,\n",
					"    PCSAppealWithdrawnDate,\n",
					"    NumberOfResidences,\n",
					"    AppealsDocumentsComplete,\n",
					"    QuestionnaireReceived,\n",
					"    LPAConditionsReceived,\n",
					"    LPAConditionsForwarded,\n",
					"    StatementsDue,\n",
					"    LPAStatementSubmitted,\n",
					"    LPAStatementForwarded,\n",
					"    AppellantStatementSubmitted,\n",
					"    AppellantStatementForwarded,\n",
					"    FinalCommentsDue,\n",
					"    LPACommentsSubmitted,\n",
					"    LPACommentsForwarded,\n",
					"    StatementOfCommonGroundDue,\n",
					"    StatementOfCommonGroundReceived,\n",
					"    AppellantCommentsSubmitted,\n",
					"    AppellantCommentsForwarded,\n",
					"    ThirdPartyRepsDue,\n",
					"    ThirdPartyRepsForwarded,\n",
					"    SiteNoticeSent,\n",
					"    ProofsDue,\n",
					"    LPAProofsSubmitted,\n",
					"    LPAProofsForwarded,\n",
					"    AppellantsProofsSubmitted,\n",
					"    AppellantsProofsForwarded,\n",
					"    AreaOfSiteInHectares,\n",
					"    DateOfDecisionIfIssued,\n",
					"    TypeOfApplication,\n",
					"    AppealSourceIndicator,\n",
					"    DevelopmentOrAllegation,\n",
					"    AmountDue,\n",
					"    SiteGreenBelt,\n",
					"    LPAApplicationReference,\n",
					"    LPAApplicationDate,\n",
					"    DateNotRecoveredOrDeRecovered,\n",
					"    DateRecovered,\n",
					"    CallInDate,\n",
					"    CaseProcess,\n",
					"    CaseworkMarker,\n",
					"    CostsAppliedForIndicator,\n",
					"    Level,\n",
					"    ProcedureAppellant,\n",
					"    ProcedureLPA,\n",
					"    ProcedureDeterminedDate,\n",
					"    TargetDate,\n",
					"    AgriculturalHolding,\n",
					"    DevelopmentAffectSettingOfListedBuilding,\n",
					"    FloorSpaceInSquareMetres,\n",
					"    SiteGridReferenceEasting,\n",
					"    SiteGridReferenceNorthing,\n",
					"    HistoricBuildingGrantMade,\n",
					"    InCARelatesToCA,\n",
					"    InspectorNeedToEnterSite,\n",
					"    IsFloodingAnIssue,\n",
					"    IsTheSiteWithinAnAONB,\n",
					"    SiteWithinSSSI,\n",
					"    SourceSystemID,\n",
					"    IngestionDate,\n",
					"    ValidTo,\n",
					"    RowID,\n",
					"    IsActive\n",
					"FROM odw_harmonised_db.casework_all_appeals_additional_data_dim;\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"This last cell is just to check count of rows between source and target on first load, to be deleted!"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"outputs_hidden": false,
						"source_hidden": false
					},
					"microsoft": {
						"language": "sparksql"
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"%%sql \n",
					"\n",
					"SELECT COUNT(*) FROM odw_standardised_db.horizon_appeals_additional_data;\n",
					"SELECT COUNT(*) FROM odw_standardised_db.horizon_add_additional_data;\n",
					"SELECT COUNT(*) FROM odw_harmonised_db.casework_all_appeals_additional_data_dim;"
				],
				"execution_count": null
			}
		]
	}
}