{
	"name": "py_unit_tests_nsip_exam_timetable",
	"properties": {
		"folder": {
			"name": "archive/utils/unit-tests"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw34",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "2e6130c7-3aa5-45f4-bc15-4c3d0ffd1ad4"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": true,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw34",
				"name": "pinssynspodw34",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw34",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import json\n",
					"from pyspark.sql.types import *\n",
					"from pyspark.sql import DataFrame\n",
					"import pprint"
				],
				"execution_count": 25
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"entity_name: str = 'nsip-exam-timetable'\n",
					"folder_name: str = 'nsip-exam-timetable'\n",
					"std_db_name: str = 'odw_standardised_db'\n",
					"hrm_db_name: str = 'odw_harmonised_db'\n",
					"curated_db_name: str = 'odw_curated_db'\n",
					"std_table_name: str = 'sb_nsip_exam_timetable'\n",
					"hrm_table_name: str = 'sb_nsip_exam_timetable'\n",
					"hrm_table_final: str = 'nsip_exam_timetable'\n",
					"curated_table_name: str = 'nsip_exam_timetable'\n",
					"\n",
					"primary_key: str = 'caseReference'\n",
					"std_hzn_table_name: str = 'horizon_examination_timetable'\n",
					"curated_migration_db_name: str = 'odw_curated_migration_db'\n",
					"curated_migration_table_name: str = 'nsip_exam_timetable'"
				],
				"execution_count": 26
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#keep track of the exitCodes, if the exit code is not zero then we've had failures, we flip the boolean\n",
					"exitCode: int = 0"
				],
				"execution_count": 27
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"data_model_columns = [\"caseReference\",\n",
					"            \"published\",\n",
					"            \"events\"]"
				],
				"execution_count": 28
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%run /utils/unit-tests/py_unit_tests_functions"
				],
				"execution_count": 29
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"sb_std_schema = create_spark_schema(std_db_name, entity_name)\n",
					"sb_std_table_schema = spark.table(f\"{std_db_name}.{std_table_name}\").schema\n",
					"sb_hrm_schema = create_spark_schema(hrm_db_name, entity_name)\n",
					"sb_hrm_table_schema = spark.table(f\"{hrm_db_name}.{hrm_table_name}\").schema\n",
					"curated_schema = create_spark_schema(curated_db_name, entity_name)\n",
					"curated_table_schema = spark.table(f\"{curated_db_name}.{curated_table_name}\").schema"
				],
				"execution_count": 30
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Compare schemas"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"std_schema_correct: bool = test_compare_schemas(sb_std_schema, sb_std_table_schema)\n",
					"exitCode += int(not std_schema_correct)\n",
					"print(f\"Service bus standardised schema correct: {std_schema_correct}\\nTable: {std_db_name}.{std_table_name}\\nDifferences shown above (if any)\")\n",
					"\n",
					"hrm_schema_correct: bool = test_compare_schemas(sb_hrm_schema, sb_hrm_table_schema)\n",
					"print(f\"Service bus harmonised schema correct: {hrm_schema_correct}\\nTable: {hrm_db_name}.{hrm_table_name}\\nDifferences shown above (if any)\")\n",
					"exitCode += int(not hrm_schema_correct)\n",
					"\n",
					"cur_schema_correct: bool = test_compare_schemas(curated_schema, curated_table_schema)\n",
					"exitCode += int(not cur_schema_correct)\n",
					"print(f\"Curated schema correct: {cur_schema_correct}\\nTable: {curated_db_name}.{curated_table_name}\\nDifferences shown above (if any)\")"
				],
				"execution_count": 31
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Compare service bus standardised with harmonised\n",
					"Should be the same count"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"standardised_count, harmonised_count, counts_match = test_std_same_rows_hrm(std_table_name, hrm_table_name)\n",
					"print(f\"Standardised Count: {standardised_count: ,}\\nHarmonised Count: {harmonised_count: ,}\\nCounts match: {counts_match}\")\n",
					"\n",
					"if standardised_count > harmonised_count:\n",
					"    exitCode += 1\n",
					"    print(f\"{standardised_count - harmonised_count} rows from Standardised are missing in Harmonised.\" )\n",
					"    differentiate_std_and_hrm(f\"{std_db_name}.{std_table_name}\", f\"{hrm_db_name}.{hrm_table_name}\", data_model_columns)"
				],
				"execution_count": 32
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### The below tests are for the curated_migration_db table\n",
					"##### Test 1:  Schema match the data model\n",
					""
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"cur_migrated_schema = create_spark_schema(curated_migration_db_name, entity_name)\n",
					"cur_migrated_df = spark.table(f\"{curated_migration_db_name}.{curated_migration_table_name}\")\n",
					"\n",
					"cur_migrated_schema_correct: bool = test_compare_schemas(cur_migrated_schema, cur_migrated_df.schema)\n",
					"exitCode += int(not cur_migrated_schema_correct)\n",
					"print(f\"Curated Migration schema correct: {cur_migrated_schema_correct}\\nTable: {curated_migration_db_name}.{curated_migration_table_name}\\nDifferences shown above (if any)\")"
				],
				"execution_count": 33
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Test 2:  Counts match in horizon standardised and curated\n",
					""
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"counts_match = test_hzn_and_curated_count_matched(std_hzn_table_name, curated_migration_table_name, primary_key)\n",
					"print(f\"Horizon to Curated - Counts match: {counts_match}\")\n",
					"exitCode += int(not counts_match)"
				],
				"execution_count": 34
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Show missing records"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"df_hzn: DataFrame = spark.sql(f\"\"\"\r\n",
					"                            SELECT DISTINCT t1.{primary_key}\r\n",
					"                            FROM odw_standardised_db.{std_hzn_table_name} t1\r\n",
					"                            INNER JOIN odw_standardised_db.horizon_nsip_data t2\r\n",
					"                            ON t1.caseReference = t2.caseReference\r\n",
					"                            WHERE t1.expected_from = (\r\n",
					"                                    SELECT MAX(expected_from)\r\n",
					"                                    FROM odw_standardised_db.{std_hzn_table_name}\r\n",
					"                                )\r\n",
					"                            AND t2.expected_from = (\r\n",
					"                                    SELECT MAX(expected_from)\r\n",
					"                                    FROM odw_standardised_db.horizon_nsip_data\r\n",
					"                                )\r\n",
					"                        \"\"\")\r\n",
					"\r\n",
					"df_cur: DataFrame = spark.sql(f\"\"\"\r\n",
					"                            SELECT DISTINCT {primary_key}\r\n",
					"                            FROM odw_curated_migration_db.{curated_migration_table_name}\r\n",
					"                        \"\"\")\r\n",
					"\r\n",
					"\r\n",
					"missing = df_hzn.subtract(df_cur)\r\n",
					"display(missing)\r\n",
					"\r\n",
					"if missing.rdd.isEmpty():\r\n",
					"    pass\r\n",
					"else:\r\n",
					"    exitCode += 1"
				],
				"execution_count": 41
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Test 3:  Checks if any Primary Key record is dropped from Horizon to Curated\n",
					""
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"rows_dropped = test_hzn_to_curated_no_record_dropped(std_hzn_table_name, curated_migration_table_name, primary_key)\n",
					"print(f\"Horizon to Curated - No rows dropped: {rows_dropped}\")\n",
					"exitCode += int(not rows_dropped)"
				],
				"execution_count": 36
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"mssparkutils.notebook.exit(exitCode)"
				],
				"execution_count": 37
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Trace service bus data from standardised to harmonised\n",
					"We need to make sure the data has loaded through correctly. To do this efficiently, we will select a sample record and check that the data is maintained as it moves through the medallian architecture."
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"df_std = spark.sql(\"SELECT * FROM odw_standardised_db.sb_nsip_exam_timetable WHERE casereference = 'BC0110001' ORDER BY ingested_datetime\")\n",
					"display(df_std)\n",
					"\n",
					"df_hrm = spark.sql(\"SELECT * FROM odw_harmonised_db.sb_nsip_exam_timetable WHERE casereference = 'BC0110001' ORDER BY IngestionDate\")\n",
					"display(df_hrm)"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#### Check array fields are aggregated properly\n",
					"Go and find examples"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					}
				},
				"source": [
					"%%sql\n",
					"SELECT\n",
					"    casereference,\n",
					"    COUNT(DISTINCT ID)\n",
					"FROM\n",
					"    odw_standardised_db.horizon_examination_timetable\n",
					"WHERE\n",
					"    ingested_datetime = (SELECT MAX(ingested_datetime) FROM odw_standardised_db.horizon_examination_timetable)\n",
					"GROUP BY\n",
					"    casereference\n",
					"HAVING\n",
					"    COUNT(DISTINCT ID) > 1\n",
					"ORDER BY\n",
					"    2 DESC"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df = spark.sql(\"SELECT * FROM odw_curated_db.nsip_exam_timetable WHERE casereference = 'EN010020'\")\n",
					"display(df)"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#### Trace Horizon data to Harmonised"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"df = spark.sql(\"\"\"\n",
					"        SELECT DISTINCT\n",
					"            *\n",
					"        FROM\n",
					"            odw_standardised_db.horizon_examination_timetable\n",
					"        WHERE\n",
					"            casereference = 'EN010120' and\n",
					"            ingested_datetime = (select max(ingested_datetime) from odw_standardised_db.horizon_examination_timetable)\n",
					"        order by ingested_datetime\n",
					"    \"\"\")\n",
					"    \n",
					"display(df)"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"df = spark.sql(f\"\"\"\n",
					"    SELECT DISTINCT\n",
					"      *\n",
					"    FROM\n",
					"        odw_harmonised_db.nsip_exam_timetable\n",
					"    WHERE\n",
					"        casereference = 'EN010120' \n",
					"    order BY\n",
					"        ingestiondate DESC\n",
					"  \"\"\")\n",
					"    \n",
					"display(df)"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### Horizon and Service Bus data successfully combined and flags set appropriately"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df_hzn_std = spark.sql(\"SELECT * from odw_standardised_db.horizon_examination_timetable where casereference = 'BC010006' and ingested_datetime = (select max(ingested_datetime) from odw_standardised_db.horizon_examination_timetable)\")\n",
					"df_sb_hrm = spark.sql(\"select * from odw_harmonised_db.sb_nsip_exam_timetable where casereference = 'BC010006'\")\n",
					"df_hrm_final = spark.sql(\"select * from odw_harmonised_db.nsip_exam_timetable where casereference = 'BC010006'\")\n",
					"df_cur = spark.sql(\"select * from odw_curated_db.nsip_exam_timetable where casereference = 'BC010006'\")\n",
					"\n",
					"\n",
					"display(df_hzn_std)\n",
					"display(df_sb_hrm)\n",
					"display(df_hrm_final)\n",
					"display(df_cur)"
				],
				"execution_count": null
			}
		]
	}
}