{
	"name": "py_sap_hr_history_files",
	"properties": {
		"folder": {
			"name": "post-deployment"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "aca65257-6fea-4dd6-bbe7-1b9f905a5302"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw",
				"name": "pinssynspodw",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 8,
				"memory": 56,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"from pyspark.sql import SparkSession\n",
					"from notebookutils import mssparkutils\n",
					"import json\n",
					"import calendar\n",
					"from datetime import datetime, timedelta, date\n",
					"import logging\n",
					"logger = logging.getLogger(__name__)\n",
					"import pandas as pd\n",
					"from pyspark.sql.types import StringType,BooleanType,DateType,TimestampType,IntegerType, FloatType, StructType\n",
					"from delta.tables import DeltaTable\n",
					"import re\n",
					"from pyspark.sql.functions import col, lit\n",
					"\n",
					"spark = SparkSession.builder.getOrCreate()\n",
					"spark.conf.set(\"spark.databricks.delta.schema.autoMerge.enabled\", \"true\")\n",
					"\n",
					"storage_account=mssparkutils.notebook.run('/utils/py_utils_get_storage_account')\n",
					"\n",
					"raw_container = \"abfss://odw-raw@\" + storage_account\n",
					"config_container = \"abfss://odw-config@\" + storage_account\n",
					"standardised_container = \"abfss://odw-standardised@\" + storage_account"
				],
				"execution_count": 19
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def ingest(definition, folder_path, filename, expected_from, expected_to):\n",
					"\n",
					"    standardised_path = definition['Standardised_Path'] + \"/\"\n",
					"    standardised_table_loc = \"abfss://odw-config@\"+storage_account + definition['Standardised_Table_Definition']\n",
					"    standardised_table_def_json = spark.read.text(standardised_table_loc, wholetext=True).first().value\n",
					"\n",
					"    standardised_table_name = definition['Standardised_Table_Name']\n",
					"    standardised_container = \"abfss://odw-standardised@\"+storage_account\n",
					"\n",
					"    standardised_table_df = spark.read.format(\"delta\").load(standardised_container+standardised_path+standardised_table_name)\n",
					"    rows = standardised_table_df.filter((standardised_table_df.expected_from == expected_from) &  (standardised_table_df.expected_to == expected_to)).count()\n",
					"\n",
					"    ### check if the file has already been ingested\n",
					"    if rows > 0 :\n",
					"        logger.info(filename + \" has already been ingested for \" + expected_from.strftime(\"%Y%m%d\"))\n",
					"        return\n",
					"\n",
					"    jobId = mssparkutils.env.getJobId()\n",
					"    ### mount the data lake storage in Synapse to the Synapse File Mount API\n",
					"    mssparkutils.fs.unmount(\"/temp_raw\") \n",
					"    mssparkutils.fs.mount( \n",
					"    folder_path, \n",
					"    \"/temp_raw\", \n",
					"    {\"linkedService\":\"ls_storage\"} \n",
					"    )   \n",
					"    ### open .csv and .xlsx files using pandas\n",
					"    if \".xlsx\" in filename.lower():\n",
					"        df = pd.read_excel(f\"/synfs/{jobId}/temp_raw/{filename}\", dtype=str)\n",
					"    elif '.csv' in filename.lower():\n",
					"        df = pd.read_csv(f\"/synfs/{jobId}/temp_raw/{filename}\", quotechar='\"',escapechar='\\\\',encoding=\"utf8\",dtype=str)\n",
					"    else:\n",
					"        raise RuntimeError(f\"This file type for {filename} is unsupported\")\n",
					"    ### drop headerless columns\n",
					"    df = df.loc[:, ~df.columns.str.contains('^Unnamed')]\n",
					"    rows_raw = len(df.index)\n",
					"    mssparkutils.fs.unmount(\"/temp_raw\") \n",
					"    ### convert to pandas dataframe\n",
					"    sparkDF=spark.createDataFrame(df)\n",
					"    ### add date columns included with every standardised table\n",
					"    sparkDF = sparkDF.withColumn(\"ingested_datetime\",lit(datetime.now()))\n",
					"    sparkDF = sparkDF.withColumn(\"expected_from\",lit(expected_from))\n",
					"    sparkDF = sparkDF.withColumn(\"expected_to\",lit(expected_to))\n",
					"\n",
					"                    \n",
					"    schema = StructType.fromJson(json.loads(standardised_table_def_json))\n",
					"    \n",
					"    ### remove characters that Delta can't allow in headers and add numbers to repeated column headers\n",
					"    cols_orig = sparkDF.schema.names\n",
					"    cols=[re.sub('[^0-9a-zA-Z]+', '_', i).lower() for i in cols_orig]\n",
					"    cols=[colm.rstrip('_') for colm in cols]\n",
					"    newlist = []\n",
					"    for i, v in enumerate(cols):\n",
					"        totalcount = cols.count(v)\n",
					"        count = cols[:i].count(v)\n",
					"        newlist.append(v + str(count + 1) if totalcount > 1 else v)\n",
					"    for colix in range(len(cols_orig)):\n",
					"        sparkDF = sparkDF.toDF(*newlist) \n",
					"\n",
					"    ### mappings for Json schema definitions to Pyspark data types\n",
					"    mapping = {\n",
					"        'string': StringType(),\n",
					"        'timestamp': TimestampType(),\n",
					"        'integer': IntegerType(),\n",
					"        'date': DateType(),\n",
					"        'float': FloatType()\n",
					"    }\n",
					"\n",
					"    ### writing the dataframe to the existing standardised table\n",
					"    sparkDF.write.option(\"mergeSchema\", \"true\").format(\"delta\").mode(\"append\").saveAsTable(f\"odw_standardised_db.{standardised_table_name}\")\n",
					"\n",
					"    standardised_table_df_new = spark.read.format(\"delta\").load(standardised_container+standardised_path+standardised_table_name)\n",
					"    rows_new = standardised_table_df.filter((standardised_table_df.expected_from == expected_from) &  (standardised_table_df.expected_to == expected_to)).count()\n",
					"\n",
					"    ### test correct number of rows have written\n",
					"    if rows_raw == rows_new:\n",
					"        logger.info('All rows have successfully written')\n",
					""
				],
				"execution_count": 20
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"history_files_source_path = f\"{raw_container}Fileshare/SAP_HR/HR/zSAP_HR history files/\"\n",
					"new_files_source_path = f\"{raw_container}Fileshare/SAP_HR/HR/Monthly/\"\n",
					"\n",
					"target_files_keys = ['absence', 'address', 'email', 'leaver', 'leave', 'pc', 'saphr', 'specialism']\n",
					"# folders_to_ingest = ['2021-03', '2021-04', '2021-05']\n",
					"\n",
					"# read orchestration data\n",
					"path_to_orchestration_file = \"abfss://odw-config@\"+storage_account+\"orchestration/orchestration.json\"\n",
					"df = spark.read.option(\"multiline\",\"true\").json(path_to_orchestration_file)\n",
					"definitions = json.loads(df.toJSON().first())['definitions']\n",
					"\n",
					"folders_and_files = mssparkutils.fs.ls(history_files_source_path)\n",
					"root_saphr_files = [f for f in folders_and_files if f.isFile]\n",
					"\n",
					"for file in root_saphr_files:\n",
					"    definition = next((d for d in definitions if d['Source_ID'] == 2), None)\n",
					"    expected_from = datetime.strptime(file.name[6:-5], \"%Y%m%d\")\n",
					"\n",
					"    if definition:\n",
					"        expected_from = date(expected_from.year, expected_from.month, calendar.monthrange(expected_from.year, expected_from.month)[1]) + timedelta(days=1)\n",
					"        expected_from = datetime.combine(expected_from, datetime.min.time())\n",
					"        expected_to = expected_from + timedelta(days=definition['Expected_Within_Weekdays']) \n",
					"        ingest(definition, history_files_source_path, file.name, expected_from, expected_to)\n",
					"\n",
					"\n",
					"folders = [f for f in folders_and_files if f.isDir]\n",
					"\n",
					"new_folders_and_files = mssparkutils.fs.ls(new_files_source_path)\n",
					"new_folders = [f for f in new_folders_and_files if f.isDir]\n",
					"\n",
					"folders = folders + new_folders\n",
					"\n",
					"for folder in folders:\n",
					"    files = mssparkutils.fs.ls(folder.path)\n",
					"    files = [f for f in files if f.isFile and f.name.lower().endswith('.xlsx')]\n",
					"    for file in files:\n",
					"        for key in target_files_keys:\n",
					"            if key in file.name.lower():\n",
					"                definition = next((d for d in definitions if key in d['Source_Filename_Start'].lower()), None)\n",
					"\n",
					"                if definition:\n",
					"                    expected_from = datetime.strptime(folder.name, \"%Y-%m\")\n",
					"                    expected_from = date(expected_from.year, expected_from.month, calendar.monthrange(expected_from.year, expected_from.month)[1]) + timedelta(days=1)\n",
					"                    expected_from = datetime.combine(expected_from, datetime.min.time())\n",
					"                    expected_to = expected_from + timedelta(days=definition['Expected_Within_Weekdays']) \n",
					"                    ingest(definition, folder.path, file.name, expected_from, expected_to)\n",
					"                    break"
				],
				"execution_count": 21
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# execute main source system fact"
				],
				"execution_count": 22
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%run /2-odw-standardised-to-harmonised/py_odw_harmonised_table_creation {\"specific_table\": \"main_sourcesystem_fact\"}"
				],
				"execution_count": 23
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"%run /odw-harmonised/main_sourcesystem_fact"
				],
				"execution_count": 24
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#pension rates"
				],
				"execution_count": 25
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%run /1-odw-raw-to-standardised/Scheduling/outstanding_files_add_entry {\"jsonId\": 81,\"year\": 2023,\"month\": 3,\"day\": 22}"
				],
				"execution_count": 26
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%run /1-odw-raw-to-standardised/Scheduling/py_1_initial_run_raw_to_standardised_scheduling {\"source_id\": 81}"
				],
				"execution_count": 27
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# work schedule rules"
				],
				"execution_count": 28
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%run /1-odw-raw-to-standardised/Scheduling/outstanding_files_add_entry {\"jsonId\": 83,\"year\": 2023,\"month\": 4,\"day\": 1}"
				],
				"execution_count": 29
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%run /1-odw-raw-to-standardised/Scheduling/py_1_initial_run_raw_to_standardised_scheduling {\"source_id\": 83}"
				],
				"execution_count": 30
			}
		]
	}
}