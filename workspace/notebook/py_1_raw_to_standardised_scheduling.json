{
	"name": "py_1_raw_to_standardised_scheduling",
	"properties": {
		"folder": {
			"name": "1-odw-raw-to-standardised/Scheduling"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "6abbc76a-aeb4-49c5-9af6-da0358745ece"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": true,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw",
				"name": "pinssynspodw",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.2",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"[obje for obje in json_config_dict[\"definitions\"] if obje[\"Source_ID\"]==1]"
				],
				"execution_count": 49
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import requests\r\n",
					"bhls = requests.get(\"https://www.gov.uk/bank-holidays.json\")\r\n",
					"bhls.json()"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"spark.sql(\"drop table if exists odw_standardised_db.addresses\")"
				],
				"execution_count": 12
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### decouple the scheduling and the processing"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%run  \"0-odw-source-to-raw/Fileshare/SAP_HR/py_0_source_to_raw_hr_functions\""
				],
				"execution_count": 22
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def read_schedule(adhoc=False,):\r\n",
					"    '''\r\n",
					"    Function reads all the schedules for all files, and processes any new files into standardised, and adds old files into an outstanding files table\r\n",
					"    '''\r\n",
					"    ### add parameter for adhoc processing - ignore scheduling - \r\n",
					"    ### do we need something that flags modified files? - generate error and requires ad hoc processing? probably more important for case data\r\n",
					"    \r\n",
					"    ### MAKE SURE THE TABLE FOR OUTSTANDING FILES EXISTS\r\n",
					"    outstanding_files_table_json = spark.read.text(\"abfss://odw-config@pinsstodwdevuks9h80mb.dfs.core.windows.net/orchestration/scheduling_outstanding_files_table.json\", wholetext=True).first().value\r\n",
					"    create_table_from_schema(outstanding_files_table_json, \"odw_config_db\", \"raw_to_std_outstanding_files\", \"abfss://odw-standardised@pinsstodwdevuks9h80mb.dfs.core.windows.net/\", \"raw_to_std_outstanding_files\" )\r\n",
					"\r\n",
					"    ### process outstanding files\r\n",
					"\r\n",
					"    ### LOADS SCHEDULING JSON\r\n",
					"    from pyspark.sql import SparkSession\r\n",
					"    spark = SparkSession.builder.getOrCreate()\r\n",
					"    import json\r\n",
					"    orchestration_json = spark.read.text(\"abfss://odw-config@pinsstodwdevuks9h80mb.dfs.core.windows.net/orchestration/orchestration_test.json\", wholetext=True).first().value\r\n",
					"    json_config_dict = json.loads(orchestration_json)\r\n",
					"        \r\n",
					"    \r\n",
					"    ### ITERATE THROUGH ALL JSON\r\n",
					"    from datetime import datetime, timedelta\r\n",
					"    # from zoneinfo import ZoneInfo tz=ZoneInfo(\"Europe/London\")\r\n",
					"    time_now = datetime(2022,11,7) # datetime.now() ### ingested_datetime\r\n",
					"    definitions = json_config_dict['definitions']\r\n",
					"    for defs in definitions:\r\n",
					"        standardised_container = defs['Standardised_Container']\r\n",
					"        standardised_table_name = defs['Standardised_Table_Name']\r\n",
					"        standardised_path = defs['Standardised_Path']\r\n",
					"        standardised_table_loc = defs['Standardised_Table_Definition']\r\n",
					"        standardised_table_def_json = spark.read.text(standardised_table_loc, wholetext=True).first().value\r\n",
					"        create_table_from_schema(standardised_table_def_json, \"odw_standardised_db\", standardised_table_name,standardised_container , standardised_path+standardised_table_name)\r\n",
					"        \r\n",
					"        cronstart = defs['Completion_Frequency_CRON']\r\n",
					"        deltadays = defs['Expected_Within_Weekdays']\r\n",
					"\r\n",
					"\r\n",
					"        from croniter import croniter\r\n",
					"        iter_start = croniter(cronstart, time_now)\r\n",
					"        last_start_dt = iter_start.get_prev(datetime) ### expected from\r\n",
					"        \r\n",
					"        next_end_dt = last_start_dt + timedelta(days=deltadays) ### expected to\r\n",
					"    \r\n",
					"        ### IS FILE EXPECTED RIGHT NOW?\r\n",
					"        # weekdays handling\r\n",
					"        # if time_now.weekday() > 1 \r\n",
					"        if last_start_dt < time_now < next_end_dt: # always gonna be before midnight\r\n",
					"            standardised_table_df = spark.read.format(\"delta\").load(standardised_container+standardised_path+standardised_table_name)\r\n",
					"            rows = standardised_table_df.filter((standardised_table_df.expected_from == last_start_dt) &  (standardised_table_df.expected_to == next_end_dt)).count()\r\n",
					"            if rows > 0 :\r\n",
					"                print(\"hello world\")\r\n",
					"            else:\r\n",
					"                source_container_path = defs['Source_Container_Path']\r\n",
					"                source_folder =  defs['Source_Folder'] + defs[\"Source_Frequency_Folder\"]\r\n",
					"                # find correct weekly folder \r\n",
					"                date_folders = mssparkutils.fs.ls(source_container_path+source_folder)\r\n",
					"                for date in date_folders:\r\n",
					"                    try:\r\n",
					"                        folder_date = datetime.strptime(date.path.split(source_container_path+source_folder)[1], \"%Y-%m-%d\")\r\n",
					"                    except:\r\n",
					"                        try:\r\n",
					"                            folder_date = datetime.strptime(date.path.split(source_container_path+source_folder)[1], \"%Y-%m\")\r\n",
					"                        except:\r\n",
					"                            raise ValueError(\"Date format in folder is incorrect\")\r\n",
					"                    \r\n",
					"                    if last_start_dt < folder_date < next_end_dt:\r\n",
					"                        source_folder_with_date = mssparkutils.fs.ls(source_container_path+source_folder+folder_date)\r\n",
					"                        for file in source_folder_with_date:\r\n",
					"                            filename = file.path.split(source_container_path+source_folder+folder_date)[-1]\r\n",
					"                            if defs['Source_Filename_Start'] in filename:\r\n",
					"                                if \".xlsx\" in filename:\r\n",
					"                                    import pandas as pd \r\n",
					"                                    df_pd = pd.read_excel(file.path)\r\n",
					"                                    add_columns_df = spark.createDataFrame(df_pd).withColumn(\"ingested_datetime\", )\r\n",
					"                                    add_columns_df = add_columns_df.withColumn()\r\n",
					"\r\n",
					"                                    schema = StructType.fromJson(json.loads(standardised_table_def_json))\r\n",
					"                            else:\r\n",
					"                                #outstanding file\r\n",
					"                    else:\r\n",
					"                        #outstanding file\r\n",
					"\r\n",
					"                # add columns\r\n",
					"\r\n",
					"                # write to table\r\n",
					"\r\n",
					"                # move file into archive\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					"    \r\n",
					"\r\n",
					"    return None "
				],
				"execution_count": 21
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### for migration checks do it with a mount and open ????\r\n",
					"# no just coutn rows i ntable and rows in df = want to make sure the write went okay\r\n",
					"date_folders = mssparkutils.fs.ls(\"abfss://odw-raw@pinsstodwdevuks9h80mb.dfs.core.windows.net/Fileshare/SAP_HR/Weekly/2022-09-12/\")\r\n",
					"for da in date_folders:\r\n",
					"    print('Addresses - ' in da.path.split(\"abfss://odw-raw@pinsstodwdevuks9h80mb.dfs.core.windows.net/Fileshare/SAP_HR/Weekly/2022-09-12/\")[-1])"
				],
				"execution_count": 34
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"date_folders"
				],
				"execution_count": 25
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.sql.types import StructType,StructField, StringType, IntegerType\r\n",
					"data2 = [(\"James\",\"\",\"Smith\",\"36636\",\"M\",3000),\r\n",
					"    (\"Michael\",\"Rose\",\"\",\"40288\",\"M\",4000),\r\n",
					"    (\"Robert\",\"\",\"Williams\",\"42114\",\"M\",4000),\r\n",
					"    (\"Maria\",\"Anne\",\"Jones\",\"39192\",\"F\",4000),\r\n",
					"    (\"Jen\",\"Mary\",\"Brown\",\"\",\"F\",-1)\r\n",
					"  ]\r\n",
					"\r\n",
					"schema = StructType([ \\\r\n",
					"    StructField(\"firstname\",StringType(),True), \\\r\n",
					"    StructField(\"middlename\",StringType(),True), \\\r\n",
					"    StructField(\"lastname\",StringType(),True), \\\r\n",
					"    StructField(\"id\", StringType(), True), \\\r\n",
					"    StructField(\"gender\", StringType(), True), \\\r\n",
					"    StructField(\"salary\", IntegerType(), True) \\\r\n",
					"  ])\r\n",
					" \r\n",
					"df = spark.createDataFrame(data=data2,schema=schema)\r\n",
					"from pyspark.sql.functions import col,lit\r\n",
					"df.withColumn(\"generic\", lit(1))"
				],
				"execution_count": 38
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df ### you need to overwrite "
				],
				"execution_count": 39
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import pyspark.pandas as ps\r\n",
					"import datetime\r\n",
					"from pyspark.sql.functions import col,lit\r\n",
					"df_pd = ps.read_excel(\"abfss://odw-raw@pinsstodwdevuks9h80mb.dfs.core.windows.net/Fileshare/SAP_HR/Weekly/2022-09-12/Addresses - 20220912.XLSX\", dtype=str).to_spark()\r\n",
					"add_columns_df = df_pd.withColumn(\"ingested_datetime\", lit(datetime.datetime.now()) )"
				],
				"execution_count": 53
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"spark.createDataFrame(df_pd)"
				],
				"execution_count": 56
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"add_columns_df"
				],
				"execution_count": 54
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					""
				],
				"execution_count": null
			}
		]
	}
}