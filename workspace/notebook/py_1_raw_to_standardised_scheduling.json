{
	"name": "py_1_raw_to_standardised_scheduling",
	"properties": {
		"folder": {
			"name": "1-odw-raw-to-standardised/Scheduling"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "326f1632-e355-4df8-b130-b2916a5ee7ed"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": true,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw",
				"name": "pinssynspodw",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.2",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import requests\r\n",
					"bhls = requests.get(\"https://www.gov.uk/bank-holidays.json\")\r\n",
					"bhls.json()"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%run  \"0-odw-source-to-raw/Fileshare/SAP_HR/py_0_source_to_raw_hr_functions\""
				],
				"execution_count": 3
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"@logging_to_appins\r\n",
					"def ingest_raw_to_standardised(adhoc=False):\r\n",
					"    '''\r\n",
					"    Function reads all the schedules for all files, and processes any new files into standardised, and adds outstanding files into an outstanding files table\r\n",
					"    Parameters:\r\n",
					"\r\n",
					"    Returns:\r\n",
					"\r\n",
					"    Actions:\r\n",
					"\r\n",
					"    Exceptions:\r\n",
					"    '''\r\n",
					"    from pyspark.sql import SparkSession\r\n",
					"    import logging\r\n",
					"    spark = SparkSession.builder.getOrCreate()\r\n",
					"    import json\r\n",
					"    from notebookutils import mssparkutils\r\n",
					"    from pyspark.sql.types import StructType\r\n",
					"    import pandas as pd\r\n",
					"    ### add parameter for adhoc processing - ignore scheduling - \r\n",
					"    ### do we need something that flags modified files? - generate error and requires ad hoc processing? probably more important for case data\r\n",
					"    \r\n",
					"    ### MAKE SURE THE TABLE FOR OUTSTANDING FILES EXISTS\r\n",
					"    outstanding_files_table_json = spark.read.text(\"abfss://odw-config@pinsstodwdevuks9h80mb.dfs.core.windows.net/orchestration/scheduling_outstanding_files_table.json\", wholetext=True).first().value\r\n",
					"    create_table_from_schema(outstanding_files_table_json, \"odw_config_db\", \"raw_to_std_outstanding_files\", \"abfss://odw-standardised@pinsstodwdevuks9h80mb.dfs.core.windows.net/\", \"config/raw_to_std_outstanding_files\" )\r\n",
					"\r\n",
					"    ### LOADS SCHEDULING JSON\r\n",
					"    \r\n",
					"    orchestration_json = spark.read.text(\"abfss://odw-config@pinsstodwdevuks9h80mb.dfs.core.windows.net/orchestration/orchestration_test.json\", wholetext=True).first().value\r\n",
					"    json_config_dict = json.loads(orchestration_json)\r\n",
					"    \r\n",
					"    ########## process outstanding files\r\n",
					"    outstanding_df = spark.read.format(\"delta\").load(\"abfss://odw-standardised@pinsstodwdevuks9h80mb.dfs.core.windows.net/config/raw_to_std_outstanding_files\")\r\n",
					"    if not outstanding_df.empty:\r\n",
					"        #### oustanding table entries\r\n",
					"        outstanding_df_pd = outstanding_df.toPandas()\r\n",
					"        for pdidx, pdrow in outstanding_df_pd.iterrows():\r\n",
					"            time_now = pdrow['Expected_Datetime']\r\n",
					"            outstanding_source_id = pdrow['DefinitionID']\r\n",
					"            ### ITERATE THROUGH ALL JSON\r\n",
					"            from datetime import datetime, timedelta\r\n",
					"            # from zoneinfo import ZoneInfo tz=ZoneInfo(\"Europe/London\")\r\n",
					"            definitions = json_config_dict['definitions']\r\n",
					"            for defs in definitions:\r\n",
					"                if defs['Source_ID'] = outstanding_source_id:\r\n",
					"                    standardised_container = defs['Standardised_Container'] + \"/\"\r\n",
					"                    standardised_table_name = defs['Standardised_Table_Name']\r\n",
					"                    standardised_path = defs['Standardised_Path'] + \"/\"\r\n",
					"                    standardised_table_loc = defs['Standardised_Table_Definition']\r\n",
					"                    standardised_table_def_json = spark.read.text(standardised_table_loc, wholetext=True).first().value\r\n",
					"                    create_table_from_schema(standardised_table_def_json, \"odw_standardised_db\", standardised_table_name,standardised_container , standardised_path+standardised_table_name)\r\n",
					"                    \r\n",
					"                    cronstart = defs['Completion_Frequency_CRON']\r\n",
					"                    deltadays = defs['Expected_Within_Weekdays']\r\n",
					"\r\n",
					"\r\n",
					"                    from croniter import croniter\r\n",
					"                    iter_start = croniter(cronstart, time_now)\r\n",
					"                    last_start_dt = iter_start.get_prev(datetime) ### expected from\r\n",
					"                    \r\n",
					"                    next_end_dt = last_start_dt + timedelta(days=deltadays) ### expected to\r\n",
					"                \r\n",
					"                    ### IS FILE EXPECTED RIGHT NOW?\r\n",
					"                    if last_start_dt <= time_now < next_end_dt: # always gonna be before midnight\r\n",
					"                        standardised_table_df = spark.read.format(\"delta\").load(standardised_container+standardised_path+standardised_table_name)\r\n",
					"                        rows = standardised_table_df.filter((standardised_table_df.expected_from == last_start_dt) &  (standardised_table_df.expected_to == next_end_dt)).count()\r\n",
					"                        if rows > 0 :\r\n",
					"                            logging.info(\"File has already been ingested\")\r\n",
					"                        else:\r\n",
					"                            source_container_path = defs['Source_Container_Path'] + \"/\"\r\n",
					"                            source_folder =  defs['Source_Folder'] +\"/\"+ defs[\"Source_Frequency_Folder\"] + \"/\"\r\n",
					"                            # find correct weekly folder \r\n",
					"                            date_folders = mssparkutils.fs.ls(source_container_path+source_folder)\r\n",
					"                            for date in date_folders:\r\n",
					"                                date_string = date.path.split(source_container_path+source_folder)[1]\r\n",
					"                                try:\r\n",
					"                                    folder_date = datetime.strptime(date_string, \"%Y-%m-%d\")\r\n",
					"                                except:\r\n",
					"                                    try:\r\n",
					"                                        ### make sure monthly json uses the penultimate day of a month\r\n",
					"                                        folder_date = datetime.strptime(date_string, \"%Y-%m\")\r\n",
					"                                        import calendar\r\n",
					"                                        folder_date = datetime.date(folder_date.year, folder_date.month, calendar.monthrange(folder_date.year, folder_date.month)[-1])\r\n",
					"                                    except:\r\n",
					"                                        raise ValueError(\"Date format in raw folder is incorrect, should be YYYY-MM-DD or YYYY-MM\")\r\n",
					"                                print(folder_date,last_start_dt,next_end_dt)\r\n",
					"                                if last_start_dt <= folder_date < next_end_dt:\r\n",
					"                                    source_folder_with_date = mssparkutils.fs.ls(source_container_path+source_folder+date_string)\r\n",
					"                                    if source_folder_with_date == []:\r\n",
					"                                        raise ValueError(\"Folder is empty\")\r\n",
					"                                    for file in source_folder_with_date:\r\n",
					"                                        filename = file.path.split(source_container_path+source_folder+date_string)[-1]\r\n",
					"                                        if defs['Source_Filename_Start'] in filename:\r\n",
					"                                            if \".xlsx\" in filename.lower():\r\n",
					"                                                \r\n",
					"                                                jobId = mssparkutils.env.getJobId()\r\n",
					"                                                mssparkutils.fs.unmount(\"/temp_raw\") \r\n",
					"                                                mssparkutils.fs.mount( \r\n",
					"                                                source_container_path+source_folder+date_string, \r\n",
					"                                                \"/temp_raw\", \r\n",
					"                                                {\"linkedService\":\"ls_storage\"} \r\n",
					"                                                )   \r\n",
					"                                                df = pd.read_excel(f\"/synfs/{jobId}/temp_raw/{filename}\", dtype=str)\r\n",
					"                                                rows_raw = len(df.index)\r\n",
					"                                                mssparkutils.fs.unmount(\"/temp_raw\") \r\n",
					"                                                sparkDF=spark.createDataFrame(df)\r\n",
					"                                                from pyspark.sql.functions import lit\r\n",
					"                                                sparkDF = sparkDF.withColumn(\"ingested_datetime\",lit(datetime.now()))\r\n",
					"                                                sparkDF = sparkDF.withColumn(\"expected_from\",lit(last_start_dt))\r\n",
					"                                                sparkDF = sparkDF.withColumn(\"expected_to\",lit(next_end_dt))\r\n",
					"                                                schema = StructType.fromJson(json.loads(standardised_table_def_json))\r\n",
					"\r\n",
					"                                                import re\r\n",
					"                                                cols_orig = sparkDF.schema.names\r\n",
					"                                                cols=[re.sub(\"( |\\#|\\# |\\.|\\(|\\)|\\/)\",\"_\",i) for i in cols_orig] # replace chars with _\r\n",
					"                                                cols=[re.sub(\"([\\_]{2,})\",\"_\",i) for i in cols] #replace consecutive _ with one _\r\n",
					"                                                cols=[re.sub(\"(\\_)$\",\"\",i) for i in cols] #remove trailing _\r\n",
					"                                                cols = [item.replace(',','').lower() for item in cols]\r\n",
					"                                                for colix in range(len(cols_orig)):\r\n",
					"                                                    sparkDF = sparkDF.withColumnRenamed(cols_orig[colix], cols[colix])\r\n",
					"\r\n",
					"                                                from pyspark.sql.functions import col\r\n",
					"                                                from pyspark.sql.types import StringType,BooleanType,DateType,TimestampType,IntegerType\r\n",
					"                                                mapping = {\r\n",
					"                                                    'string': StringType(),\r\n",
					"                                                    'timestamp': TimestampType(),\r\n",
					"                                                    'integer': IntegerType()\r\n",
					"                                                }\r\n",
					"\r\n",
					"                                                for field in json.loads(standardised_table_def_json)['fields']:\r\n",
					"                                                    sparkDF = sparkDF.withColumn(field['name'], col(field['name']).cast(mapping[field['type']]))\r\n",
					"                                                colheaders = []\r\n",
					"                                                for field in json.loads(standardised_table_def_json)['fields']:\r\n",
					"                                                    colheaders.append(field['name'])\r\n",
					"                                                sparkDF = sparkDF.select(colheaders)\r\n",
					"                                                sparkDF2 = spark.createDataFrame(sparkDF.rdd, schema=schema)\r\n",
					"                                                sparkDF2.write.format(\"delta\").mode(\"append\").saveAsTable(f\"odw_standardised_db.{standardised_table_name}\")\r\n",
					"\r\n",
					"                                                standardised_table_df_new = spark.read.format(\"delta\").load(standardised_container+standardised_path+standardised_table_name)\r\n",
					"                                                rows_new = standardised_table_df.filter((standardised_table_df.expected_from == last_start_dt) &  (standardised_table_df.expected_to == next_end_dt)).count()\r\n",
					"\r\n",
					"                                                \r\n",
					"                                                if rows_raw == rows_new:\r\n",
					"                                                    # move file into archive\r\n",
					"                                                    # remove entry from outstanding files\r\n",
					"                                                    logging.info('All rows have successfully written')\r\n",
					"                                                else:\r\n",
					"                                                    \r\n",
					"                                                    raise ValueError(f\"Incorrect number of rows have been written to the standardised table {standardised_table_name}, roll back one version\")\r\n",
					"                                                \r\n",
					"                                            else:\r\n",
					"                                                raise ValueError(\"This file type is unsupported\")\r\n",
					"\r\n",
					"    \r\n",
					"    ### ITERATE THROUGH ALL JSON\r\n",
					"    from datetime import datetime, timedelta\r\n",
					"    # from zoneinfo import ZoneInfo tz=ZoneInfo(\"Europe/London\")\r\n",
					"    time_now = datetime(2022,11,4) # datetime.now() ### ingested_datetime\r\n",
					"    definitions = json_config_dict['definitions']\r\n",
					"    for defs in definitions:\r\n",
					"        standardised_container = defs['Standardised_Container'] + \"/\"\r\n",
					"        standardised_table_name = defs['Standardised_Table_Name']\r\n",
					"        standardised_path = defs['Standardised_Path'] + \"/\"\r\n",
					"        standardised_table_loc = defs['Standardised_Table_Definition']\r\n",
					"        standardised_table_def_json = spark.read.text(standardised_table_loc, wholetext=True).first().value\r\n",
					"        create_table_from_schema(standardised_table_def_json, \"odw_standardised_db\", standardised_table_name,standardised_container , standardised_path+standardised_table_name)\r\n",
					"        \r\n",
					"        cronstart = defs['Completion_Frequency_CRON']\r\n",
					"        deltadays = defs['Expected_Within_Weekdays']\r\n",
					"\r\n",
					"\r\n",
					"        from croniter import croniter\r\n",
					"        iter_start = croniter(cronstart, time_now)\r\n",
					"        last_start_dt = iter_start.get_prev(datetime) ### expected from\r\n",
					"        \r\n",
					"        next_end_dt = last_start_dt + timedelta(days=deltadays) ### expected to\r\n",
					"    \r\n",
					"        ### IS FILE EXPECTED RIGHT NOW?\r\n",
					"        if last_start_dt <= time_now < next_end_dt: # always gonna be before midnight\r\n",
					"            standardised_table_df = spark.read.format(\"delta\").load(standardised_container+standardised_path+standardised_table_name)\r\n",
					"            rows = standardised_table_df.filter((standardised_table_df.expected_from == last_start_dt) &  (standardised_table_df.expected_to == next_end_dt)).count()\r\n",
					"            if rows > 0 :\r\n",
					"                logging.info(\"File has already been ingested\")\r\n",
					"            else:\r\n",
					"                source_container_path = defs['Source_Container_Path'] + \"/\"\r\n",
					"                source_folder =  defs['Source_Folder'] +\"/\"+ defs[\"Source_Frequency_Folder\"] + \"/\"\r\n",
					"                # find correct weekly folder \r\n",
					"                date_folders = mssparkutils.fs.ls(source_container_path+source_folder)\r\n",
					"                for date in date_folders:\r\n",
					"                    date_string = date.path.split(source_container_path+source_folder)[1]\r\n",
					"                    try:\r\n",
					"                        folder_date = datetime.strptime(date_string, \"%Y-%m-%d\")\r\n",
					"                    except:\r\n",
					"                        try:\r\n",
					"                            ### make sure monthly json uses the penultimate day of a month\r\n",
					"                            folder_date = datetime.strptime(date_string, \"%Y-%m\")\r\n",
					"                            import calendar\r\n",
					"                            folder_date = datetime.date(folder_date.year, folder_date.month, calendar.monthrange(folder_date.year, folder_date.month)[-1])\r\n",
					"                        except:\r\n",
					"                            raise ValueError(\"Date format in raw folder is incorrect, should be YYYY-MM-DD or YYYY-MM\")\r\n",
					"                    print(folder_date,last_start_dt,next_end_dt)\r\n",
					"                    if last_start_dt <= folder_date < next_end_dt:\r\n",
					"                        source_folder_with_date = mssparkutils.fs.ls(source_container_path+source_folder+date_string)\r\n",
					"                        if source_folder_with_date == []:\r\n",
					"                            raise ValueError(\"Folder is empty\")\r\n",
					"                        for file in source_folder_with_date:\r\n",
					"                            filename = file.path.split(source_container_path+source_folder+date_string)[-1]\r\n",
					"                            if defs['Source_Filename_Start'] in filename:\r\n",
					"                                if \".xlsx\" in filename.lower():\r\n",
					"                                    \r\n",
					"                                    jobId = mssparkutils.env.getJobId()\r\n",
					"                                    mssparkutils.fs.unmount(\"/temp_raw\") \r\n",
					"                                    mssparkutils.fs.mount( \r\n",
					"                                    source_container_path+source_folder+date_string, \r\n",
					"                                    \"/temp_raw\", \r\n",
					"                                    {\"linkedService\":\"ls_storage\"} \r\n",
					"                                    )   \r\n",
					"                                    df = pd.read_excel(f\"/synfs/{jobId}/temp_raw/{filename}\", dtype=str)\r\n",
					"                                    rows_raw = len(df.index)\r\n",
					"                                    mssparkutils.fs.unmount(\"/temp_raw\") \r\n",
					"                                    sparkDF=spark.createDataFrame(df)\r\n",
					"                                    from pyspark.sql.functions import lit\r\n",
					"                                    sparkDF = sparkDF.withColumn(\"ingested_datetime\",lit(datetime.now()))\r\n",
					"                                    sparkDF = sparkDF.withColumn(\"expected_from\",lit(last_start_dt))\r\n",
					"                                    sparkDF = sparkDF.withColumn(\"expected_to\",lit(next_end_dt))\r\n",
					"                                    schema = StructType.fromJson(json.loads(standardised_table_def_json))\r\n",
					"\r\n",
					"                                    import re\r\n",
					"                                    cols_orig = sparkDF.schema.names\r\n",
					"                                    cols=[re.sub(\"( |\\#|\\# |\\.|\\(|\\)|\\/)\",\"_\",i) for i in cols_orig] # replace chars with _\r\n",
					"                                    cols=[re.sub(\"([\\_]{2,})\",\"_\",i) for i in cols] #replace consecutive _ with one _\r\n",
					"                                    cols=[re.sub(\"(\\_)$\",\"\",i) for i in cols] #remove trailing _\r\n",
					"                                    cols = [item.replace(',','').lower() for item in cols]\r\n",
					"                                    for colix in range(len(cols_orig)):\r\n",
					"                                        sparkDF = sparkDF.withColumnRenamed(cols_orig[colix], cols[colix])\r\n",
					"\r\n",
					"                                    from pyspark.sql.functions import col\r\n",
					"                                    from pyspark.sql.types import StringType,BooleanType,DateType,TimestampType,IntegerType\r\n",
					"                                    mapping = {\r\n",
					"                                        'string': StringType(),\r\n",
					"                                        'timestamp': TimestampType(),\r\n",
					"                                        'integer': IntegerType()\r\n",
					"                                    }\r\n",
					"\r\n",
					"                                    for field in json.loads(standardised_table_def_json)['fields']:\r\n",
					"                                        sparkDF = sparkDF.withColumn(field['name'], col(field['name']).cast(mapping[field['type']]))\r\n",
					"                                    colheaders = []\r\n",
					"                                    for field in json.loads(standardised_table_def_json)['fields']:\r\n",
					"                                        colheaders.append(field['name'])\r\n",
					"                                    sparkDF = sparkDF.select(colheaders)\r\n",
					"                                    sparkDF2 = spark.createDataFrame(sparkDF.rdd, schema=schema)\r\n",
					"                                    sparkDF2.write.format(\"delta\").mode(\"append\").saveAsTable(f\"odw_standardised_db.{standardised_table_name}\")\r\n",
					"\r\n",
					"                                    standardised_table_df_new = spark.read.format(\"delta\").load(standardised_container+standardised_path+standardised_table_name)\r\n",
					"                                    rows_new = standardised_table_df.filter((standardised_table_df.expected_from == last_start_dt) &  (standardised_table_df.expected_to == next_end_dt)).count()\r\n",
					"                                    if rows_raw == rows_new:\r\n",
					"                                        logging.info('All rows have successfully written')\r\n",
					"                                    else:\r\n",
					"                                        # move file into archive\r\n",
					"                                        raise ValueError(f\"Incorrect number of rows have been written to the standardised table {standardised_table_name}, roll back one version\")\r\n",
					"                                    \r\n",
					"                                else:\r\n",
					"                                    raise ValueError(\"This file type is unsupported\")\r\n",
					"                            else:\r\n",
					"                                # needs to be upsert\r\n",
					"                                outstanding_struct_schema = StructType.fromJson(json.loads(outstanding_files_table_json))\r\n",
					"                                print(last_start_dt)\r\n",
					"                                new_outst_file = spark.createDataFrame([[last_start_dt, defs['Source_ID']]], outstanding_struct_schema)\r\n",
					"                                new_outst_file.write.format(\"delta\").mode(\"append\").saveAsTable(\"odw_config_db.raw_to_std_outstanding_files\")\r\n",
					"                    else:\r\n",
					"                        #needs to be upsert\r\n",
					"                        outstanding_struct_schema = StructType.fromJson(json.loads(outstanding_files_table_json))\r\n",
					"                        new_outst_file = spark.createDataFrame([[last_start_dt, defs['Source_ID']]], outstanding_struct_schema)\r\n",
					"                        new_outst_file.write.format(\"delta\").mode(\"append\").saveAsTable(\"odw_config_db.raw_to_std_outstanding_files\")"
				],
				"execution_count": 39
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### for migration checks do it with a mount and open ????\r\n",
					"# no just coutn rows i ntable and rows in df = want to make sure the write went okay\r\n",
					"date_folders = mssparkutils.fs.ls(\"abfss://odw-raw@pinsstodwdevuks9h80mb.dfs.core.windows.net/Fileshare/SAP_HR/Weekly/2022-09-12/\")\r\n",
					"for da in date_folders:\r\n",
					"    print('Addresses - ' in da.path.split(\"abfss://odw-raw@pinsstodwdevuks9h80mb.dfs.core.windows.net/Fileshare/SAP_HR/Weekly/2022-09-12/\")[-1])"
				],
				"execution_count": 34
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from notebookutils import mssparkutils\r\n",
					"mssparkutils.fs.ls(\"abfss://odw-raw@pinsstodwdevuks9h80mb.dfs.core.windows.net/Fileshare/SAP_HR/Monthly/test/\")"
				],
				"execution_count": 3
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"ingest_raw_to_standardised()"
				],
				"execution_count": 40
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.sql import SparkSession\r\n",
					"spark = SparkSession.builder.getOrCreate()"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"spark.sql(\"drop table if exists odw_config_db.raw_to_std_outstanding_files\")"
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"outstanding_files_table_json = spark.read.text(\"abfss://odw-config@pinsstodwdevuks9h80mb.dfs.core.windows.net/orchestration/scheduling_outstanding_files_table.json\", wholetext=True).first().value\r\n",
					"create_table_from_schema(outstanding_files_table_json, \"odw_config_db\", \"raw_to_std_outstanding_files\", \"abfss://odw-standardised@pinsstodwdevuks9h80mb.dfs.core.windows.net/\", \"config/raw_to_std_outstanding_files\" )\r\n",
					"outstanding_df = spark.read.format(\"delta\").load(\"abfss://odw-standardised@pinsstodwdevuks9h80mb.dfs.core.windows.net/config/raw_to_std_outstanding_files\")\r\n",
					""
				],
				"execution_count": 12
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from datetime import datetime\r\n",
					"import json\r\n",
					"from pyspark.sql.types import StructType\r\n",
					"outstanding_struct_schema = StructType.fromJson(json.loads(outstanding_files_table_json))\r\n",
					"new_outst_file = spark.createDataFrame([[datetime.now(), 1]], outstanding_struct_schema)\r\n",
					"new_outst_file.write.format(\"delta\").mode(\"append\").saveAsTable(\"odw_config_db.raw_to_std_outstanding_files\")"
				],
				"execution_count": 10
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"outstanding_df_pd = outstanding_df.toPandas()"
				],
				"execution_count": 14
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"for pdidx, pdrow in outstanding_df_pd.iterrows():\r\n",
					"    print(pdrow['Expected_Datetime'])"
				],
				"execution_count": 17
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"not outstanding_df_pd.empty"
				],
				"execution_count": 21
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					""
				],
				"execution_count": null
			}
		]
	}
}