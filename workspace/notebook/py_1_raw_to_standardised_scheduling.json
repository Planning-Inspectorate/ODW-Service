{
	"name": "py_1_raw_to_standardised_scheduling",
	"properties": {
		"folder": {
			"name": "legacy"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "0eeb566b-3376-499e-9c0e-a1fcbff57a3f"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": true,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw",
				"name": "pinssynspodw",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%run  /0-odw-source-to-raw/Fileshare/SAP_HR/py_0_source_to_raw_hr_functions"
				],
				"execution_count": 25
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%run /utils/py_logging_decorator"
				],
				"execution_count": 26
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"tags": [
						"parameters"
					]
				},
				"source": [
					"table_grouping = \"\""
				],
				"execution_count": 27
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"@logging_to_appins\r\n",
					"def ingest_raw_to_standardised():\r\n",
					"    '''\r\n",
					"    Function reads all the schedules for all files, and processes any new files into standardised, and adds outstanding files into an outstanding files table\r\n",
					"    Parameters:\r\n",
					"    None\r\n",
					"\r\n",
					"    Returns:\r\n",
					"    None\r\n",
					"\r\n",
					"    Actions:\r\n",
					"    Processes files from raw to standardised based on a schedule, and will also keep track of files that haven't arrived and attempt to process those\r\n",
					"\r\n",
					"    '''\r\n",
					"    ### module imports\r\n",
					"    from pyspark.sql import SparkSession\r\n",
					"    import logging\r\n",
					"    spark = SparkSession.builder.getOrCreate()\r\n",
					"    import json\r\n",
					"    from notebookutils import mssparkutils\r\n",
					"    import pandas as pd\r\n",
					"    logger = logging.getLogger(__name__)\r\n",
					"    from datetime import datetime, timedelta, date\r\n",
					"    from pyspark.sql.types import StringType,BooleanType,DateType,TimestampType,IntegerType, FloatType, StructType\r\n",
					"    from delta.tables import DeltaTable\r\n",
					"    from croniter import croniter\r\n",
					"    import re\r\n",
					"    from pyspark.sql.functions import col, lit\r\n",
					"    import calendar\r\n",
					"\r\n",
					"    ### use the ADLS gen2 assoicated with the synapse resource in any environment (DR/Dev/Stage/Prod)\r\n",
					"    storage_acc_name = spark.sparkContext.environment.get('dataLakeAccountName', 'get')\r\n",
					"\r\n",
					"    ### create outstanding files table\r\n",
					"    outstanding_files_table_json = spark.read.text(\"abfss://odw-config@\"+storage_acc_name+\".dfs.core.windows.net/orchestration/scheduling_outstanding_files_table.json\", wholetext=True).first().value\r\n",
					"    create_table_from_schema(outstanding_files_table_json, \"odw_config_db\", \"raw_to_std_outstanding_files\", \"abfss://odw-standardised@\"+storage_acc_name+\".dfs.core.windows.net/\", \"config/raw_to_std_outstanding_files\" )\r\n",
					"\r\n",
					"    ### loads json for scheduling\r\n",
					"    orchestration_json = spark.read.text(\"abfss://odw-config@\"+storage_acc_name+\".dfs.core.windows.net/orchestration/orchestration.json\", wholetext=True).first().value\r\n",
					"    json_config_dict = json.loads(orchestration_json)\r\n",
					"    \r\n",
					"    ### process outstanding files\r\n",
					"    outstanding_df = spark.read.format(\"delta\").load(\"abfss://odw-standardised@\"+storage_acc_name+\".dfs.core.windows.net/config/raw_to_std_outstanding_files\")\r\n",
					"    ### make sure there are entries in the outstanding files table\r\n",
					"    if outstanding_df.count() > 0: \r\n",
					"        outstanding_df_pd = outstanding_df.toPandas()\r\n",
					"        for pdidx, pdrow in outstanding_df_pd.iterrows():\r\n",
					"            time_now = pdrow['Expected_Datetime'] \r\n",
					"            outstanding_source_id = pdrow['DefinitionID'] \r\n",
					"            definitions = json_config_dict['definitions']\r\n",
					"            for defs in definitions:\r\n",
					"                ### isolate the scheduling config for the entry in the oustanding files table\r\n",
					"                if defs['Source_ID'] == outstanding_source_id: \r\n",
					"                    standardised_container = \"abfss://odw-standardised@\"+storage_acc_name+\".dfs.core.windows.net/\" # defs['Standardised_Container'] + \"/\"\r\n",
					"                    standardised_table_name = defs['Standardised_Table_Name']\r\n",
					"                    standardised_path = defs['Standardised_Path'] + \"/\"\r\n",
					"                    standardised_table_loc = \"abfss://odw-config@\"+storage_acc_name+\".dfs.core.windows.net/\" + defs['Standardised_Table_Definition']\r\n",
					"                    standardised_table_def_json = spark.read.text(standardised_table_loc, wholetext=True).first().value\r\n",
					"                    create_table_from_schema(standardised_table_def_json, \"odw_standardised_db\", standardised_table_name,standardised_container , standardised_path+standardised_table_name)\r\n",
					"                    deltadays = defs['Expected_Within_Weekdays']\r\n",
					"\r\n",
					"                    ### expected from - change from normal process\r\n",
					"                    last_start_dt = time_now \r\n",
					"                    \r\n",
					"                    ### expected to - change from normal process\r\n",
					"                    next_end_dt = last_start_dt + timedelta(days=deltadays) \r\n",
					"\r\n",
					"                    if last_start_dt <= time_now < next_end_dt: \r\n",
					"                        standardised_table_df = spark.read.format(\"delta\").load(standardised_container+standardised_path+standardised_table_name)\r\n",
					"                        ### check if the file has already been ingested\r\n",
					"                        rows = standardised_table_df.filter((standardised_table_df.expected_from == last_start_dt) &  (standardised_table_df.expected_to == next_end_dt)).count()\r\n",
					"                        \r\n",
					"                        if rows > 0 :\r\n",
					"                            logger.info(\"File has already been ingested\")\r\n",
					"                        else:\r\n",
					"                            source_container_path = \"abfss://odw-raw@\"+storage_acc_name+\".dfs.core.windows.net/\" \r\n",
					"                            if defs[\"Source_Frequency_Folder\"] == \"\":\r\n",
					"                                source_folder =  defs['Source_Folder'] +\"/\"\r\n",
					"                            ### handle weekly / monthly sub folders\r\n",
					"                            else:                            \r\n",
					"                                source_folder =  defs['Source_Folder'] +\"/\"+ defs[\"Source_Frequency_Folder\"] + \"/\"\r\n",
					"                            ### find correct weekly folder \r\n",
					"                            date_folders = mssparkutils.fs.ls(source_container_path+source_folder)\r\n",
					"                            for datex in date_folders:\r\n",
					"                                date_string = datex.name \r\n",
					"                                ### handle YYYY-MM-DD dates\r\n",
					"                                if len(date_string) == 10:\r\n",
					"                                    folder_date = datetime.strptime(date_string, \"%Y-%m-%d\")\r\n",
					"                                ### handle YYYY-MM dates\r\n",
					"                                elif len(date_string) == 7:\r\n",
					"                                    folder_date = datetime.strptime(date_string, \"%Y-%m\")\r\n",
					"                                    \r\n",
					"                                    folder_date = date(folder_date.year, folder_date.month, calendar.monthrange(folder_date.year, folder_date.month)[-1]) + timedelta(days=1)\r\n",
					"                                    folder_date = datetime.combine(folder_date, datetime.min.time())\r\n",
					"                                else:\r\n",
					"                                    raise ValueError(\"Date format in raw folder is incorrect, should be YYYY-MM-DD or YYYY-MM\")\r\n",
					"                                if last_start_dt <= folder_date < next_end_dt:\r\n",
					"                                    source_folder_with_date = mssparkutils.fs.ls(source_container_path+source_folder+date_string)\r\n",
					"                                    if source_folder_with_date == []:\r\n",
					"                                        error_folder_string = source_container_path+source_folder+date_string\r\n",
					"                                        raise RuntimeError(f\"Folder is empty within {error_folder_string}\")\r\n",
					"                                    for file in source_folder_with_date:\r\n",
					"                                        filename = file.name \r\n",
					"                                        ### isolate the correct file\r\n",
					"                                        if defs['Source_Filename_Start'] in filename:\r\n",
					"                                            jobId = mssparkutils.env.getJobId()\r\n",
					"                                            ### mount the data lake storage in Synapse to the Synapse File Mount API\r\n",
					"                                            mssparkutils.fs.unmount(\"/temp_raw\") \r\n",
					"                                            mssparkutils.fs.mount( \r\n",
					"                                            source_container_path+source_folder+date_string, \r\n",
					"                                            \"/temp_raw\", \r\n",
					"                                            {\"linkedService\":\"ls_storage\"} \r\n",
					"                                            )   \r\n",
					"                                            ### open .csv and .xlsx files using pandas\r\n",
					"                                            if \".xlsx\" in filename.lower():\r\n",
					"                                                sheet_name = defs['Source_Sheet_Name'] if 'Source_Sheet_Name' in defs else 0\r\n",
					"                                                df = pd.read_excel(f\"/synfs/{jobId}/temp_raw/{filename}\", dtype=str, sheet_name=sheet_name, na_filter=False)\r\n",
					"                                            elif '.csv' in filename.lower():\r\n",
					"                                                df = pd.read_csv(f\"/synfs/{jobId}/temp_raw/{filename}\", quotechar='\"',escapechar='\\\\',encoding=\"utf8\",dtype=str, na_filter=False)\r\n",
					"                                            elif '.json' in filename.lower():\r\n",
					"                                                df = pd.read_json(f\"/synfs/{jobId}/temp_raw/{filename}\", encoding=\"utf8\", dtype=str)\r\n",
					"                                            else:\r\n",
					"                                                raise RuntimeError(f\"This file type for {filename} is unsupported\")\r\n",
					"                                            ### drop headerless columns\r\n",
					"                                            df = df.loc[:, ~df.columns.str.contains('^Unnamed')]\r\n",
					"                                            rows_raw = len(df.index)\r\n",
					"                                            mssparkutils.fs.unmount(\"/temp_raw\") \r\n",
					"                                            ### convert to pandas dataframe\r\n",
					"                                            sparkDF=spark.createDataFrame(df)\r\n",
					"                                            ### add date columns included with every standardised table\r\n",
					"                                            sparkDF = sparkDF.withColumn(\"ingested_datetime\",lit(datetime.now()))\r\n",
					"                                            sparkDF = sparkDF.withColumn(\"expected_from\",lit(last_start_dt))\r\n",
					"                                            sparkDF = sparkDF.withColumn(\"expected_to\",lit(next_end_dt))\r\n",
					"                                            schema = StructType.fromJson(json.loads(standardised_table_def_json))\r\n",
					"                                            \r\n",
					"                                            ### remove characters that Delta can't allow in headers and add numbers to repeated column headers\r\n",
					"                                            cols_orig = sparkDF.schema.names\r\n",
					"                                            cols=[re.sub('[^0-9a-zA-Z]+', '_', i).lower() for i in cols_orig]\r\n",
					"                                            cols=[colm.rstrip('_') for colm in cols]\r\n",
					"                                            newlist = []\r\n",
					"                                            for i, v in enumerate(cols):\r\n",
					"                                                totalcount = cols.count(v)\r\n",
					"                                                count = cols[:i].count(v)\r\n",
					"                                                newlist.append(v + str(count + 1) if totalcount > 1 else v)\r\n",
					"                                            for colix in range(len(cols_orig)):\r\n",
					"                                                sparkDF = sparkDF.toDF(*newlist) \r\n",
					"\r\n",
					"                                            ### mappings for Json schema definitions to Pyspark data types\r\n",
					"                                            mapping = {\r\n",
					"                                                'string': StringType(),\r\n",
					"                                                'timestamp': TimestampType(),\r\n",
					"                                                'integer': IntegerType(),\r\n",
					"                                                'date': DateType(),\r\n",
					"                                                'float': FloatType()\r\n",
					"                                            }\r\n",
					"\r\n",
					"                                            ### column data type casting\r\n",
					"                                            for field in json.loads(standardised_table_def_json)['fields']:\r\n",
					"                                                sparkDF = sparkDF.withColumn(field['name'], col(field['name']).cast(mapping[field['type']]))\r\n",
					"                                            colheaders = []\r\n",
					"                                            for field in json.loads(standardised_table_def_json)['fields']:\r\n",
					"                                                colheaders.append(field['name'])\r\n",
					"                                            sparkDF = sparkDF.select(colheaders)\r\n",
					"                                            sparkDF2 = spark.createDataFrame(sparkDF.rdd, schema=schema)\r\n",
					"                                            ### writing the dataframe to the existing standardised table\r\n",
					"                                            sparkDF2.write.format(\"delta\").mode(\"append\").saveAsTable(f\"odw_standardised_db.{standardised_table_name}\")\r\n",
					"\r\n",
					"                                            standardised_table_df_new = spark.read.format(\"delta\").load(standardised_container+standardised_path+standardised_table_name)\r\n",
					"                                            rows_new = standardised_table_df.filter((standardised_table_df.expected_from == last_start_dt) &  (standardised_table_df.expected_to == next_end_dt)).count()\r\n",
					"\r\n",
					"                                            ### test correct number of rows have written\r\n",
					"                                            if rows_raw == rows_new:\r\n",
					"                                                mssparkutils.fs.mkdirs(source_container_path+\"archive\"+\"/\"+source_folder+date_string+\"/\")\r\n",
					"                                                mssparkutils.fs.cp(source_container_path+source_folder+date_string+\"/\"+filename,source_container_path+\"archive\"+\"/\"+source_folder+date_string+\"/\"+filename)\r\n",
					"                                                spark.sql(f\"DELETE FROM odw_config_db.raw_to_std_outstanding_files WHERE Expected_Datetime = '{time_now}' and DefinitionID = {outstanding_source_id}\")\r\n",
					"                                                logger.info('All rows have successfully written')\r\n",
					"                                            ### delete transaction if incorrect number of rows has written and raise an error\r\n",
					"                                            else:\r\n",
					"                                                deltaTable_standardised = DeltaTable.forPath(spark, standardised_container+standardised_path+standardised_table_name)\r\n",
					"                                                fullHistoryDF = deltaTable_standardised.history()\r\n",
					"                                                fullHistoryDF.select(\"version\").first()['version']\r\n",
					"                                                deltaTable_standardised.restoreToVersion(fullHistoryDF.select(\"version\").first()['version'] - 1)\r\n",
					"                                                raise RuntimeError(f\"Incorrect number of rows have been written to the standardised table {standardised_table_name}, rolled back to original version\")\r\n",
					"\r\n",
					"    ### regular ingestion process \r\n",
					"\r\n",
					"\r\n",
					"    time_now = datetime.now() ### ingested_datetime\r\n",
					"    definitions = json_config_dict['definitions']\r\n",
					"    for defs in definitions:\r\n",
					"        standardised_container = \"abfss://odw-standardised@\"+storage_acc_name+\".dfs.core.windows.net/\" \r\n",
					"        standardised_table_name = defs['Standardised_Table_Name']                 \r\n",
					"        if defs['Standardised_Path'] != table_grouping:\r\n",
					"            continue\r\n",
					"        standardised_path = defs['Standardised_Path'] + \"/\"\r\n",
					"        standardised_table_loc = \"abfss://odw-config@\"+storage_acc_name+\".dfs.core.windows.net/\" + defs['Standardised_Table_Definition']\r\n",
					"        standardised_table_def_json = spark.read.text(standardised_table_loc, wholetext=True).first().value\r\n",
					"        create_table_from_schema(standardised_table_def_json, \"odw_standardised_db\", standardised_table_name,standardised_container , standardised_path+standardised_table_name)\r\n",
					"        \r\n",
					"        cronstart = defs['Completion_Frequency_CRON']\r\n",
					"        deltadays = defs['Expected_Within_Weekdays']\r\n",
					"        \r\n",
					"        ### ignore any adhoc file being ingested\r\n",
					"        if cronstart == 'Adhoc':\r\n",
					"            continue\r\n",
					"\r\n",
					"        iter_start = croniter(cronstart, time_now)\r\n",
					"        last_start_dt = iter_start.get_prev(datetime) ### expected from\r\n",
					"        \r\n",
					"        next_end_dt = last_start_dt + timedelta(days=deltadays) ### expected to\r\n",
					"    \r\n",
					"        ### check if the file is being expected right now, less than with the expected_to value means no overlaps in expected periods\r\n",
					"        if last_start_dt <= time_now < next_end_dt: \r\n",
					"            folder_available = False\r\n",
					"            standardised_table_df = spark.read.format(\"delta\").load(standardised_container+standardised_path+standardised_table_name)\r\n",
					"            rows = standardised_table_df.filter((standardised_table_df.expected_from == last_start_dt) &  (standardised_table_df.expected_to == next_end_dt)).count()\r\n",
					"            ### check if the file has already been ingested\r\n",
					"            if rows > 0 :\r\n",
					"                folder_available = True\r\n",
					"                logger.info(\"File has already been ingested\")\r\n",
					"            else:\r\n",
					"                source_container_path = \"abfss://odw-raw@\"+storage_acc_name+\".dfs.core.windows.net/\" # defs['Source_Container_Path'] + \"/\"\r\n",
					"                if defs[\"Source_Frequency_Folder\"] == \"\":\r\n",
					"                    source_folder =  defs['Source_Folder'] +\"/\"\r\n",
					"                ### handle weekly / monthly sub folders\r\n",
					"                else:                            \r\n",
					"                    source_folder =  defs['Source_Folder'] +\"/\"+ defs[\"Source_Frequency_Folder\"] + \"/\"\r\n",
					"                ### find correct weekly folder \r\n",
					"                date_folders = mssparkutils.fs.ls(source_container_path+source_folder)\r\n",
					"                for datex in date_folders:\r\n",
					"                    date_string = datex.name\r\n",
					"                    ### handle YYYY-MM-DD dates\r\n",
					"                    if len(date_string) == 10:\r\n",
					"                        folder_date = datetime.strptime(date_string, \"%Y-%m-%d\")\r\n",
					"                    ### handle YYYY-MM dates\r\n",
					"                    elif len(date_string) == 7:\r\n",
					"                        folder_date = datetime.strptime(date_string, \"%Y-%m\")\r\n",
					"                        folder_date = date(folder_date.year, folder_date.month, calendar.monthrange(folder_date.year, folder_date.month)[-1]) + timedelta(days=1)\r\n",
					"                        folder_date = datetime.combine(folder_date, datetime.min.time())\r\n",
					"                    else:\r\n",
					"                        raise ValueError(\"Date format in raw folder is incorrect, should be YYYY-MM-DD or YYYY-MM\")\r\n",
					"                    \r\n",
					"                    if last_start_dt <= folder_date < next_end_dt:\r\n",
					"                        folder_available = True\r\n",
					"                        source_folder_with_date = mssparkutils.fs.ls(source_container_path+source_folder+date_string)\r\n",
					"                        if source_folder_with_date == []:\r\n",
					"                            error_folder_string = source_container_path+source_folder+date_string\r\n",
					"                            raise RuntimeError(f\"Folder is empty within {error_folder_string}\")\r\n",
					"                        file_available = False\r\n",
					"                        for file in source_folder_with_date:\r\n",
					"                            ### isolate the correct file\r\n",
					"                            filename = file.name \r\n",
					"                            if defs['Source_Filename_Start'] in filename:\r\n",
					"                                file_available = True\r\n",
					"                                \r\n",
					"                                ### mount the data lake storage in Synapse to the Synapse File Mount API\r\n",
					"                                jobId = mssparkutils.env.getJobId()\r\n",
					"                                mssparkutils.fs.unmount(\"/temp_raw\") \r\n",
					"                                mssparkutils.fs.mount( \r\n",
					"                                source_container_path+source_folder+date_string, \r\n",
					"                                \"/temp_raw\", \r\n",
					"                                {\"linkedService\":\"ls_storage\"} \r\n",
					"                                )   \r\n",
					"                                ### open .csv and .xlsx files using pandas\r\n",
					"                                if \".xlsx\" in filename.lower():\r\n",
					"                                    sheet_name = defs['Source_Sheet_Name'] if 'Source_Sheet_Name' in defs else 0\r\n",
					"                                    df = pd.read_excel(f\"/synfs/{jobId}/temp_raw/{filename}\", dtype=str, sheet_name=sheet_name, na_filter=False)\r\n",
					"                                elif '.csv' in filename.lower():\r\n",
					"                                    df = pd.read_csv(f\"/synfs/{jobId}/temp_raw/{filename}\", quotechar='\"',escapechar='\\\\',encoding=\"utf8\",dtype=str, na_filter=False)\r\n",
					"                                elif '.json' in filename.lower():\r\n",
					"                                    df = pd.read_json(f\"/synfs/{jobId}/temp_raw/{filename}\", encoding=\"utf8\", dtype=str)\r\n",
					"                                else:\r\n",
					"                                    raise RuntimeError(f\"This file type for {filename} is unsupported\")\r\n",
					"                                ### drop headerless columns\r\n",
					"                                df = df.loc[:, ~df.columns.str.contains('^Unnamed')]\r\n",
					"                                rows_raw = len(df.index)\r\n",
					"                                mssparkutils.fs.unmount(\"/temp_raw\") \r\n",
					"                                ### convert to pandas dataframe\r\n",
					"                                sparkDF=spark.createDataFrame(df)\r\n",
					"                                ### add date columns included with every standardised table\r\n",
					"                                sparkDF = sparkDF.withColumn(\"ingested_datetime\",lit(datetime.now()))\r\n",
					"                                sparkDF = sparkDF.withColumn(\"expected_from\",lit(last_start_dt))\r\n",
					"                                sparkDF = sparkDF.withColumn(\"expected_to\",lit(next_end_dt))\r\n",
					"                                schema = StructType.fromJson(json.loads(standardised_table_def_json))\r\n",
					"\r\n",
					"                                \r\n",
					"                                ### remove characters that Delta can't allow in headers and add numbers to repeated column headers\r\n",
					"                                cols_orig = sparkDF.schema.names\r\n",
					"                                cols=[re.sub('[^0-9a-zA-Z]+', '_', i).lower() for i in cols_orig] \r\n",
					"                                cols=[colm.rstrip('_') for colm in cols]\r\n",
					"                                newlist = []\r\n",
					"                                for i, v in enumerate(cols):\r\n",
					"                                    totalcount = cols.count(v)\r\n",
					"                                    count = cols[:i].count(v)\r\n",
					"                                    newlist.append(v + str(count + 1) if totalcount > 1 else v)\r\n",
					"                                for colix in range(len(cols_orig)):\r\n",
					"                                    sparkDF = sparkDF.toDF(*newlist) \r\n",
					"                                \r\n",
					"                                ### mappings for Json schema definitions to Pyspark data types\r\n",
					"                                mapping = {\r\n",
					"                                    'string': StringType(),\r\n",
					"                                    'timestamp': TimestampType(),\r\n",
					"                                    'integer': IntegerType(),\r\n",
					"                                    'date': DateType(),\r\n",
					"                                    'float': FloatType()\r\n",
					"                                }\r\n",
					"\r\n",
					"                                ### column data type casting\r\n",
					"                                for field in json.loads(standardised_table_def_json)['fields']:\r\n",
					"                                    sparkDF = sparkDF.withColumn(field['name'], col(field['name']).cast(mapping[field['type']]))\r\n",
					"                                colheaders = []\r\n",
					"                                for field in json.loads(standardised_table_def_json)['fields']:\r\n",
					"                                    colheaders.append(field['name'])\r\n",
					"                                sparkDF = sparkDF.select(colheaders)\r\n",
					"                                sparkDF2 = spark.createDataFrame(sparkDF.rdd, schema=schema)\r\n",
					"                                ### writing the dataframe to the existing standardised table\r\n",
					"                                sparkDF2.write.format(\"delta\").mode(\"append\").saveAsTable(f\"odw_standardised_db.{standardised_table_name}\")\r\n",
					"\r\n",
					"                                standardised_table_df_new = spark.read.format(\"delta\").load(standardised_container+standardised_path+standardised_table_name)\r\n",
					"                                rows_new = standardised_table_df.filter((standardised_table_df.expected_from == last_start_dt) &  (standardised_table_df.expected_to == next_end_dt)).count()\r\n",
					"                                ### test correct number of rows have written\r\n",
					"                                if rows_raw == rows_new:\r\n",
					"                                    mssparkutils.fs.mkdirs(source_container_path+\"archive\"+\"/\"+source_folder+date_string+\"/\")\r\n",
					"                                    mssparkutils.fs.cp(source_container_path+source_folder+date_string+\"/\"+filename,source_container_path+\"archive\"+\"/\"+source_folder+date_string+\"/\"+filename)\r\n",
					"                                    logger.info('All rows have successfully written')\r\n",
					"                                \r\n",
					"                                ### delete transaction if incorrect number of rows has written and raise an error\r\n",
					"                                else:\r\n",
					"                                    ### add to outstanding files table?\r\n",
					"                                    deltaTable_standardised = DeltaTable.forPath(spark, standardised_container+standardised_path+standardised_table_name)\r\n",
					"                                    fullHistoryDF = deltaTable_standardised.history()    # get the full history of the table\r\n",
					"                                    fullHistoryDF.select(\"version\").first()['version']\r\n",
					"                                    deltaTable_standardised.restoreToVersion(fullHistoryDF.select(\"version\").first()['version'] - 1)\r\n",
					"                                    raise RuntimeError(f\"Incorrect number of rows have been written to the standardised table {standardised_table_name}, rolled back to original version\")\r\n",
					"\r\n",
					"                        if file_available==False:\r\n",
					"                            outstanding_struct_schema = StructType.fromJson(json.loads(outstanding_files_table_json))\r\n",
					"                            new_outst_file = spark.createDataFrame([[last_start_dt, defs['Source_ID']]], outstanding_struct_schema)\r\n",
					"                            outstanding_df = spark.read.format(\"delta\").load(\"abfss://odw-standardised@\"+storage_acc_name+\".dfs.core.windows.net/config/raw_to_std_outstanding_files\")\r\n",
					"                            outstanding_df = outstanding_df.union(new_outst_file).dropDuplicates()\r\n",
					"                            outstanding_df.write.format(\"delta\").mode(\"overwrite\").save(\"abfss://odw-standardised@\"+storage_acc_name+\".dfs.core.windows.net/config/raw_to_std_outstanding_files\")\r\n",
					"            if folder_available==False:\r\n",
					"                outstanding_struct_schema = StructType.fromJson(json.loads(outstanding_files_table_json))\r\n",
					"                new_outst_file = spark.createDataFrame([[last_start_dt, defs['Source_ID']]], outstanding_struct_schema)\r\n",
					"                outstanding_df = spark.read.format(\"delta\").load(\"abfss://odw-standardised@\"+storage_acc_name+\".dfs.core.windows.net/config/raw_to_std_outstanding_files\")\r\n",
					"                outstanding_df = outstanding_df.union(new_outst_file).dropDuplicates()\r\n",
					"                outstanding_df.write.format(\"delta\").mode(\"overwrite\").save(\"abfss://odw-standardised@\"+storage_acc_name+\".dfs.core.windows.net/config/raw_to_std_outstanding_files\")"
				],
				"execution_count": 28
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"ingest_raw_to_standardised()"
				],
				"execution_count": 29
			}
		]
	}
}