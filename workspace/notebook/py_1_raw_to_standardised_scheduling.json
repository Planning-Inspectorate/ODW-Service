{
	"name": "py_1_raw_to_standardised_scheduling",
	"properties": {
		"folder": {
			"name": "1-odw-raw-to-standardised/Scheduling"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "f2cb261d-aa56-46d8-b1b4-bd0c378f7923"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": true,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw",
				"name": "pinssynspodw",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.2",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"### get the json\r\n",
					"from notebookutils import mssparkutils\r\n",
					"mount_path = \"/scheduling_json\"\r\n",
					"mssparkutils.fs.unmount(mount_path) \r\n",
					"mssparkutils.fs.mount( \r\n",
					"    \"abfss://odw-standardised@pinsstodwdevuks9h80mb.dfs.core.windows.net/config/scheduling_json/\", \r\n",
					"    mount_path, \r\n",
					"    {\"linkedService\":\"ls_storage\"} \r\n",
					") \r\n",
					"\r\n",
					"jobId = mssparkutils.env.getJobId()\r\n",
					"import json\r\n",
					"with open(f\"/synfs/{jobId}/scheduling_json/orchestration_test.json\") as json_config:\r\n",
					"    json_config_dict = json.loads(json_config.read())\r\n",
					"\r\n",
					"\r\n",
					""
				],
				"execution_count": 23
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"\r\n",
					"### process cron dates\r\n",
					"from datetime import datetime, timedelta\r\n",
					"# from zoneinfo import ZoneInfo tz=ZoneInfo(\"Europe/London\")\r\n",
					"time_now = datetime(2022,11,7)\r\n",
					"\r\n",
					"definitions = json_config_dict['definitions']\r\n",
					"for defs in definitions:\r\n",
					"    cronstart = defs['Completion_Start_Date']\r\n",
					"    cronend = int(defs['Expected_Within_Days'])\r\n",
					"\r\n",
					"    from croniter import croniter\r\n",
					"    iter_start = croniter(cronstart, time_now)\r\n",
					"    last_start_dt = iter_start.get_prev(datetime)\r\n",
					"    \r\n",
					"    next_end_dt = last_start_dt + timedelta(days=cronend)\r\n",
					"    if last_start_dt < time_now < next_end_dt:\r\n",
					"        \r\n",
					"\r\n",
					"\r\n",
					"### look into standardised to see if the tables already exist\r\n",
					"\r\n",
					"### check raw for file\r\n",
					"\r\n",
					"### outstanding files table "
				],
				"execution_count": 28
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import datetime \r\n",
					"# from zoneinfo import ZoneInfo tz=ZoneInfo(\"Europe/London\")\r\n",
					"time_now = datetime.datetime.now()\r\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					""
				],
				"execution_count": null
			}
		]
	}
}