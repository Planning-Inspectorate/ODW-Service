{
	"name": "py_1_raw_to_standardised_scheduling",
	"properties": {
		"folder": {
			"name": "1-odw-raw-to-standardised/Scheduling"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "7c4abf78-3a46-4d74-a45c-97eb137bb6c6"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": true,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw",
				"name": "pinssynspodw",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.2",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.sql import SparkSession\r\n",
					"spark = SparkSession.builder.getOrCreate()\r\n",
					"import json\r\n",
					"orchestration_json = spark.read.text(\"abfss://odw-config@pinsstodwdevuks9h80mb.dfs.core.windows.net/orchestration/orchestration_test.json\", wholetext=True).first().value\r\n",
					"json_config_dict = json.loads(orchestration_json)"
				],
				"execution_count": 48
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"[obje for obje in json_config_dict[\"definitions\"] if obje[\"Source_ID\"]==1]"
				],
				"execution_count": 49
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					""
				],
				"execution_count": 53
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### get json schema for outstanding files table \r\n",
					"### expected_datetime | Folderpath | Filename_Format | Filename_Date_Format\r\n",
					"## #create_table_from_schema(jsonschema:str, db_name:str, table_name:str, target_container:str, target_folder:str)"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"outstanding_files_table_json = spark.read.text(\"abfss://odw-config@pinsstodwdevuks9h80mb.dfs.core.windows.net/orchestration/scheduling_outstanding_files_table.json\", wholetext=True).first().value\r\n",
					"# outstanding_files_table_json = json.loads(outstanding_files_table_json)\r\n",
					"\r\n",
					"create_table_from_schema(outstanding_files_table_json, \"odw_config_db\", \"outstanding_files_src2raw\", \"abfss://odw-standardised@pinsstodwdevuks9h80mb.dfs.core.windows.net/\", \"config/outstanding_files_src2raw/\" )"
				],
				"execution_count": 62
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"\r\n",
					"### process cron dates\r\n",
					"from datetime import datetime, timedelta\r\n",
					"# from zoneinfo import ZoneInfo tz=ZoneInfo(\"Europe/London\")\r\n",
					"time_now = datetime(2022,11,7)\r\n",
					"\r\n",
					"definitions = json_config_dict['definitions']\r\n",
					"for defs in definitions:\r\n",
					"    cronstart = defs['Completion_Frequency_CRON']\r\n",
					"    deltadays = defs['Expected_Within_Weekdays'])\r\n",
					"\r\n",
					"    from croniter import croniter\r\n",
					"    iter_start = croniter(cronstart, time_now)\r\n",
					"    last_start_dt = iter_start.get_prev(datetime)\r\n",
					"    \r\n",
					"    next_end_dt = last_start_dt + timedelta(days=deltadays)\r\n",
					"\r\n",
					"    # if time_now.weekday() > 1 \r\n",
					"    if last_start_dt < time_now < next_end_dt:\r\n",
					"        print(next_end_dt)\r\n",
					"\r\n",
					"\r\n",
					"### look into standardised to see if the tables already exist\r\n",
					"\r\n",
					"### check raw for file\r\n",
					"\r\n",
					"### outstanding files table "
				],
				"execution_count": 43
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import requests\r\n",
					"bhls = requests.get(\"https://www.gov.uk/bank-holidays.json\")\r\n",
					"bhls.json()"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import datetime \r\n",
					"# from zoneinfo import ZoneInfo tz=ZoneInfo(\"Europe/London\")\r\n",
					"time_now = datetime.datetime.now()\r\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"last_start_dt"
				],
				"execution_count": 34
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.sql.types import Da\r\n",
					"intvar = IntegerType()\r\n",
					"intvar.json()"
				],
				"execution_count": 58
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"spark.sql(\"drop table if exists odw_standardised_db.addresses\")"
				],
				"execution_count": 5
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def read_schedule(adhoc=False,):\r\n",
					"    '''\r\n",
					"    Function reads all the schedules for all files, and processes any new files into standardised, and adds old files into an outstanding files table\r\n",
					"    '''\r\n",
					"    ### add parameter for adhoc processing - ignore scheduling - \r\n",
					"    ### do we need something that flags modified files? - generate error and requires ad hoc processing? probably more important for case data\r\n",
					"    \r\n",
					"    \r\n",
					"\r\n",
					"    ### LOADS SCHEDULING JSON\r\n",
					"    from pyspark.sql import SparkSession\r\n",
					"    spark = SparkSession.builder.getOrCreate()\r\n",
					"    import json\r\n",
					"    orchestration_json = spark.read.text(\"abfss://odw-config@pinsstodwdevuks9h80mb.dfs.core.windows.net/orchestration/orchestration_test.json\", wholetext=True).first().value\r\n",
					"    json_config_dict = json.loads(orchestration_json)\r\n",
					"        \r\n",
					"    \r\n",
					"    ### ITERATE THROUGH ALL JSON\r\n",
					"    ### process cron dates\r\n",
					"    from datetime import datetime, timedelta\r\n",
					"    # from zoneinfo import ZoneInfo tz=ZoneInfo(\"Europe/London\")\r\n",
					"    time_now = datetime(2022,11,7) # datetime.now() ### ingested_datetime\r\n",
					"\r\n",
					"    ### could make \r\n",
					"    definitions = json_config_dict['definitions']\r\n",
					"    for defs in definitions:\r\n",
					"        standardised_container = defs['Standardised_Container']\r\n",
					"        standardised_table_loc = defs['Standardised_Table_Definition']\r\n",
					"        standardised_table_def_json = spark.read.text(standardised_table_loc, wholetext=True).first().value\r\n",
					"        create_table_from_schema(standardised_table_def_json, \"odw_standardised_db\", defs['Standardised_Table_Name'],standardised_container , defs['Standardised_Table_Name'])\r\n",
					"        \r\n",
					"        cronstart = defs['Completion_Frequency_CRON']\r\n",
					"        deltadays = defs['Expected_Within_Weekdays'])\r\n",
					"\r\n",
					"        from croniter import croniter\r\n",
					"        iter_start = croniter(cronstart, time_now)\r\n",
					"        last_start_dt = iter_start.get_prev(datetime) ### expected from\r\n",
					"        \r\n",
					"        next_end_dt = last_start_dt + timedelta(days=deltadays) ### expected to\r\n",
					"    \r\n",
					"        ### IS FILE EXPECTED RIGHT NOW?\r\n",
					"        # weekdays handling\r\n",
					"        # if time_now.weekday() > 1 \r\n",
					"        if last_start_dt < time_now < next_end_dt:\r\n",
					"            standardised_table_df = spark.read.format(\"delta\").load(\"/tmp/delta-table\")\r\n",
					"\r\n",
					"    \r\n",
					"\r\n",
					"    ### HAS THE FILE BEEN INGESTED ---> REFACTOR STANDARDISED TO INCLUDE NEW PROCESS_DATE COLUMN\r\n",
					"    create_standardised_tables()\r\n",
					"    ### INGEST IF IT HASN'T BEEN INGESTED INTO STANDARDISED\r\n",
					"    ### MOVE FILE INTO ARCHIVE\r\n",
					"\r\n",
					"    ### MAKE SURE THE TABLE FOR OUTSTANDING FILES EXISTS\r\n",
					"    ### ADD TO THIS TABLE FOR ANY OUTSTANDING FILES\r\n",
					"\r\n",
					"    return None "
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%run  \"0-odw-source-to-raw/Fileshare/SAP_HR/py_0_source_to_raw_hr_functions\""
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def create_standardised_tables(json_folder, db_name, table_name, target_container, target_folder):\r\n",
					"    ### load in loop all files from folder\r\n",
					"    from notebookutils import mssparkutils\r\n",
					"    jsons_list = mssparkutils.fs.ls(json_folder)\r\n",
					"    from pyspark.sql import SparkSession\r\n",
					"    spark = SparkSession.builder.getOrCreate()\r\n",
					"    for js in jsons_list:\r\n",
					"        jsonschema = spark.read.text(js.path, wholetext=True).first().value\r\n",
					"        create_table_from_schema(jsonschema, db_name, table_name, target_container, target_folder)\r\n",
					""
				],
				"execution_count": 6
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"create_standardised_tables(\"abfss://odw-config@pinsstodwdevuks9h80mb.dfs.core.windows.net/standardised_table_definitions/\", \"odw_standardised_db\", )"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"\r\n",
					"listoffiles = mssparkutils.fs.ls(\"abfss://odw-config@pinsstodwdevuks9h80mb.dfs.core.windows.net/standardised_table_definitions/\")\r\n",
					"len(listoffiles[0].path.split('/')[-1].lower().split('.json')[0])"
				],
				"execution_count": 11
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					""
				],
				"execution_count": null
			}
		]
	}
}