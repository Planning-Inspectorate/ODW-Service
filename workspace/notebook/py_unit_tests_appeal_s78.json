{
	"name": "py_unit_tests_appeal_s78",
	"properties": {
		"folder": {
			"name": "utils/unit-tests"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "4f476967-9597-410a-87e4-1d00b2780c74"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": true,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw",
				"name": "pinssynspodw",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import json\n",
					"from pyspark.sql.types import *\n",
					"from pyspark.sql import DataFrame\n",
					"from pyspark.sql import functions as F\n",
					"import pprint"
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"entity_name: str = 'appeal-s78'\n",
					"folder_name: str = 'appeal-s78'\n",
					"std_db_name: str = 'odw_standardised_db'\n",
					"hrm_db_name: str = 'odw_harmonised_db'\n",
					"curated_db_name: str = 'odw_curated_db'\n",
					"\n",
					"\n",
					"cases_s78_std_table_name: str = \"cases_s78\"\n",
					"cases_specialisms_std_table_name: str = \"cases_specialisms\"\n",
					"vw_case_dates_std_table_name: str = \"vw_case_dates\"\n",
					"CaseDocumentDatesDates_std_table_name: str = \"CaseDocumentDatesDates\"\n",
					"CaseSiteStrings_std_table_name: str = \"CaseSiteStrings\"\n",
					"TypeOfProcedure_std_table_name: str = \"TypeOfProcedure\"\n",
					"AddAdditionalData_std_table_name: str = \"AddAdditionalData\"\n",
					"TypeOfLevel_std_table_name: str = \"TypeOfLevel\"\n",
					"AdditionalFields_std_table_name: str = \"AdditionalFields\"\n",
					"AppealsAdditonalData_std_table_name: str = \"AppealsAdditonalData\"\n",
					"bis_CaseDates_std_table_name: str = \"bis_CaseDates\"\n",
					"CaseDatesCategoryAdditional_std_table_name: str = \"CaseDatesCategoryAdditional\"\n",
					"Bis_CaseInfo_std_table_name: str = \"BIS_CaseInfo\"\n",
					"CaseSiteCategoryAdditionalStr_std_table_name: str = \"CaseSiteCategoryAdditionalStr\"\n",
					"CaseStrings_std_table_name: str = \"CaseStrings\"\n",
					"TypeOfReasonForCase_std_table_name: str = \"TypeOfReasonForCase\"\n",
					"Bis_LeadCase_std_table_name: str = \"BIS_LeadCase\"\n",
					"PlanningAppDates_std_table_name: str = \"PlanningAppDates\"\n",
					"PlanningAppStrings_std_table_name: str = \"PlanningAppStrings\"\n",
					"SpecialistCaseDates_std_table_name: str = \"SpecialistCaseDates\"\n",
					"Inspector_Cases_std_table_name: str = \"Inspector_Cases\"\n",
					"CurrentActiveCaseTaskGroup_std_table_name: str = \"CurrentActiveCaseTaskGroup\"\n",
					"ActiveTaskGroupModifiedDate_std_table_name: str = \"ActiveTaskGroupModifiedDate\"\n",
					"\n",
					"\n",
					"\n",
					"\n",
					"\n",
					"std_table_name: str = 'sb_appeal_s78'\n",
					"hrm_table_name: str = 'sb_appeal_s78'\n",
					"\n",
					"cases_s78_hrm_table_name: str = \"cases_s78\"\n",
					"cases_specialisms_hrm__table_name: str = \"cases_specialisms\"\n",
					"vw_case_dates_hrm__table_name: str = \"vw_case_dates\"\n",
					"CaseDocumentDatesDates_hrm_table_name: str = \"CaseDocumentDatesDates\"\n",
					"\n",
					"CaseSiteStrings_hrm_table_name: str = \"CaseSiteStringsTypeOfProcedure\"\n",
					"TypeOfProcedure_hrm_table_name: str = \"CaseSiteStringsTypeOfProcedure\"\n",
					"\n",
					"AddAdditionalData_hrm_table_name: str = \"AddAdditionalData_TypeOfLevel\"\n",
					"TypeOfLevel_hrm_table_name: str = \"AddAdditionalData_TypeOfLevel\"\n",
					"AdditionalFields_hrm_table_name: str = \"AdditionalFields\"\n",
					"AppealsAdditonalData_hrm_table_name: str = \"AppealsAdditonalData\"\n",
					"bis_CaseDates_hrm_table_name: str = \"bis_CaseDates\"\n",
					"CaseDatesCategoryAdditional_hrm_table_name: str = \"CaseDatesCategoryAdditional\"\n",
					"Bis_CaseInfo_hrm_table_name: str = \"BIS_CaseInfo\"\n",
					"CaseSiteCategoryAdditionalStr_hrm_table_name: str = \"CaseSiteCategoryAdditionalStr\"\n",
					"\n",
					"CaseStrings_hrm_table_name: str = \"BIS_CaseStrings_TypeOfReasonForCase\"\n",
					"TypeOfReasonForCase_hrm_table_name: str = \"BIS_CaseStrings_TypeOfReasonForCase\"\n",
					"\n",
					"Bis_LeadCase_hrm_table_name: str = \"BIS_LeadCase\"\n",
					"PlanningAppDates_hrm_table_name: str = \"PlanningAppDates\"\n",
					"PlanningAppStrings_hrm_table_name: str = \"PlanningAppStrings\"\n",
					"SpecialistCaseDates_hrm_table_name: str = \"SpecialistCaseDates\"\n",
					"Inspector_Cases_hrm_table_name: str = \"Inspector_Cases\"\n",
					"\n",
					"CurrentActiveCaseTaskGroup_hrm_table_name: str = \"CurrentActiveCaseTaskGroup_ActiveTaskGroupModifiedDate\"\n",
					"ActiveTaskGroupModifiedDate_hrm_table_name: str = \"CurrentActiveCaseTaskGroup_ActiveTaskGroupModifiedDate\"\n",
					"\n",
					"\n",
					"hrm_table_name_hrzn: str = 'appeal_s78_hrzn_final'\n",
					"\n",
					"hrm_table_final: str = 'appeal_s78_hrm'\n",
					"curated_table_name: str = 'appeal_s78'"
				],
				"execution_count": 3
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"added primary key, in comments, keep concistency oever id in all entities that are going to be joined."
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"horizon_std_df = spark.table(f\"{std_db_name}.{horizon_std_table_name}\")\r\n",
					"\r\n",
					"aie_std_df = spark.table(f\"{std_db_name}.{aie_std_table_name}\")\r\n",
					"aie_hrm_df = spark.table(f\"{hrm_db_name}.{aie_hrm_table_name}\")\r\n",
					"\r\n",
					"\r\n",
					"hrm_final_df = spark.table(f\"{hrm_db_name}.{hrm_table_final}\")\r\n",
					"hrm_final_df_active = hrm_final_df.filter(\"IsActive = 'Y'\")\r\n",
					"curated_df = spark.table(f\"{curated_db_name}.{curated_table_name}\")\r\n",
					"sb_std_df = spark.table(f\"{std_db_name}.{std_table_name}\")\r\n",
					"sb_hrm_df = spark.table(f\"{hrm_db_name}.{hrm_table_name}\")\r\n",
					"\r\n",
					"##To add primary keys and change the names of these variables\r\n",
					"horizon_documentIds = horizon_std_df.select(\"\")\r\n",
					"aie_std_documentIds = aie_std_df.select(\"\")\r\n",
					"aie_hrm_documentIds = aie_hrm_df.select(\"\")\r\n",
					"hrm_final_documentIds = hrm_final_df.select(\"\")\r\n",
					"sb_std_documentIds = sb_std_df.select(\"\")\r\n",
					"sb_hrm_documentIds = sb_hrm_df.select(\"\")\r\n",
					"curated_documentIds = curated_df.select(\"\")\r\n",
					"aie_appeals_documentIds = aie_std_documentIds.intersect(horizon_documentIds)\r\n",
					"aie_appeals_documents_count = aie_appeals_documentIds.count()"
				],
				"execution_count": 26
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#keep track of the exitCodes, if the exit code is not zero then we've had failures, we flip the boolean\n",
					"exitCode: int = 0"
				],
				"execution_count": 27
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"data_model_columns = [\n",
					"\"caseId\",\n",
					"    \"caseReference\",\n",
					"    \"caseStatus\",\n",
					"    \"caseType\",\n",
					"    \"caseProcedure\",\n",
					"    \"lpaCode\",\n",
					"    \"caseOfficerId\",\n",
					"    \"inspectorId\",\n",
					"    \"allocationLevel\",\n",
					"    \"allocationBand\",\n",
					"    \"caseSpecialisms\",\n",
					"    \"caseSubmittedDate\",\n",
					"    \"caseCreatedDate\",\n",
					"    \"caseUpdatedDate\",\n",
					"    \"caseValidDate\",\n",
					"    \"caseValidationDate\",\n",
					"    \"caseValidationOutcome\",\n",
					"    \"caseValidationInvalidDetails\",\n",
					"    \"caseValidationIncompleteDetails\",\n",
					"    \"caseExtensionDate\",\n",
					"    \"caseStartedDate\",\n",
					"    \"casePublishedDate\",\n",
					"    \"linkedCaseStatus\",\n",
					"    \"leadCaseReference\",\n",
					"    \"lpaQuestionnaireDueDate\",\n",
					"    \"lpaQuestionnaireSubmittedDate\",\n",
					"    \"lpaQuestionnaireCreatedDate\",\n",
					"    \"lpaQuestionnairePublishedDate\",\n",
					"    \"lpaQuestionnaireValidationOutcome\",\n",
					"    \"lpaQuestionnaireValidationOutcomeDate\",\n",
					"    \"lpaQuestionnaireValidationDetails\",\n",
					"    \"lpaStatement\",\n",
					"    \"caseWithdrawnDate\",\n",
					"    \"caseTransferredDate\",\n",
					"    \"transferredCaseClosedDate\",\n",
					"    \"caseDecisionOutcomeDate\",\n",
					"    \"caseDecisionPublishedDate\",\n",
					"    \"caseDecisionOutcome\",\n",
					"    \"caseCompletedDate\",\n",
					"    \"enforcementNotice\",\n",
					"    \"applicationReference\",\n",
					"    \"applicationDate\",\n",
					"    \"applicationDecision\",\n",
					"    \"applicationDecisionDate\",\n",
					"    \"caseSubmissionDueDate\",\n",
					"    \"siteAddressLine1\",\n",
					"    \"siteAddressLine2\",\n",
					"    \"siteAddressTown\",\n",
					"    \"siteAddressCounty\",\n",
					"    \"siteAddressPostcode\",\n",
					"    \"siteAccessDetails\",\n",
					"    \"siteSafetyDetails\",\n",
					"    \"siteAreaSquareMetres\",\n",
					"    \"floorSpaceSquareMetres\",\n",
					"    \"isCorrectAppealType\",\n",
					"    \"isGreenBelt\",\n",
					"    \"inConservationArea\",\n",
					"    \"ownsAllLand\",\n",
					"    \"ownsSomeLand\",\n",
					"    \"knowsOtherOwners\",\n",
					"    \"knowsAllOwners\",\n",
					"    \"advertisedAppeal\",\n",
					"    \"notificationMethod\",\n",
					"    \"ownersInformed\",\n",
					"    \"originalDevelopmentDescription\",\n",
					"    \"changedDevelopmentDescription\",\n",
					"    \"newConditionDetails\",\n",
					"    \"nearbyCaseReferences\",\n",
					"    \"neighbouringSiteAddresses\",\n",
					"    \"affectedListedBuildingNumbers\",\n",
					"    \"changedListedBuildingNumbers\",\n",
					"    \"appellantCostsAppliedFor\",\n",
					"    \"lpaCostsAppliedFor\",\n",
					"    \"agriculturalHolding\",\n",
					"    \"tenantAgriculturalHolding\",\n",
					"    \"otherTenantsAgriculturalHolding\",\n",
					"    \"informedTenantsAgriculturalHolding\",\n",
					"    \"appellantProcedurePreference\",\n",
					"    \"appellantProcedurePreferenceDetails\",\n",
					"    \"appellantProcedurePreferenceDuration\",\n",
					"    \"inquiryHowManyWitnesses\",\n",
					"    \"updatedDevelopmentDescriptionUploaded\",\n",
					"    \"ownershipCertificateSubmitted\",\n",
					"    \"designAccessStatementProvided\",\n",
					"    \"newPlansDrawingsProvided\",\n",
					"    \"planningObligation\",\n",
					"    \"statusPlanningObligation\",\n",
					"    \"appellantFinalCommentDetails\",\n",
					"    \"appellantWitnesses\",\n",
					"    \"affectsScheduledMonument\",\n",
					"    \"hasProtectedSpecies\",\n",
					"    \"isAonbNationalLandscape\",\n",
					"    \"designatedSitesNames\",\n",
					"    \"hasTreePreservationOrder\",\n",
					"    \"isGypsyOrTravellerSite\",\n",
					"    \"isPublicRightOfWay\",\n",
					"    \"eiaEnvironmentalImpactSchedule\",\n",
					"    \"eiaDevelopmentDescription\",\n",
					"    \"eiaSensitiveAreaDetails\",\n",
					"    \"eiaColumnTwoThreshold\",\n",
					"    \"eiaScreeningOpinion\",\n",
					"    \"eiaRequiresEnvironmentalStatement\",\n",
					"    \"eiaCompletedEnvironmentalStatement\",\n",
					"    \"eiaConsultedBodiesDetails\",\n",
					"    \"hasStatutoryConsultees\",\n",
					"    \"hasConsultationResponses\",\n",
					"    \"hasEmergingPlan\",\n",
					"    \"hasSupplementaryPlanningDocs\",\n",
					"    \"hasInfrastructureLevy\",\n",
					"    \"isInfrastructureLevyFormallyAdopted\",\n",
					"    \"infrastructureLevyAdoptedDate\",\n",
					"    \"infrastructureLevyExpectedDate\",\n",
					"    \"lpaProcedurePreference\",\n",
					"    \"lpaProcedurePreferenceDetails\",\n",
					"    \"lpaProcedurePreferenceDuration\",\n",
					"    \"lpaFinalCommentDetails\",\n",
					"    \"lpaAddedWitnesses\",\n",
					"    \"caseworkReason\",\n",
					"    \"developmentType\",\n",
					"    \"importantInformation\",\n",
					"    \"jurisdiction\",\n",
					"    \"redeterminedIndicator\",\n",
					"    \"dateCostsReportDespatched\",\n",
					"    \"dateNotRecoveredOrDerecovered\",\n",
					"    \"dateRecovered\",\n",
					"    \"originalCaseDecisionDate\",\n",
					"    \"targetDate\",\n",
					"    \"appellantCommentsSubmitted\",\n",
					"    \"appellantStatementSubmitted\",\n",
					"    \"finalCommentsDueDate\",\n",
					"    \"interestedPartyRepsDueDate\",\n",
					"    \"lpaCommentsSubmitted\",\n",
					"    \"lpaProofsSubmitted\",\n",
					"    \"lpaStatementSubmitted\",\n",
					"    \"proofsOfEvidenceDueDate\",\n",
					"    \"siteNoticesSent\",\n",
					"    \"statementDueDate\",\n",
					"    \"inspectorNeedToEnterSite\",\n",
					"    \"numberOfResidences\",\n",
					"    \"siteGridReferenceEasting\",\n",
					"    \"siteGridReferenceNorthing\",\n",
					"    \"siteViewableFromRoad\",\n",
					"    \"siteWithinSSSI\",\n",
					"    \"typeOfPlanningApplication\"\n",
					"  ]"
				],
				"execution_count": 28
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%run /utils/unit-tests/py_unit_tests_functions"
				],
				"execution_count": 29
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"sb_std_schema = create_spark_schema(std_db_name, entity_name)\n",
					"sb_std_table_schema = spark.table(f\"{std_db_name}.{std_table_name}\").schema\n",
					"sb_hrm_schema = create_spark_schema(hrm_db_name, entity_name)\n",
					"sb_hrm_table_schema = spark.table(f\"{hrm_db_name}.{hrm_table_name}\").schema\n",
					"curated_schema = create_spark_schema(curated_db_name, entity_name)\n",
					"curated_table_schema = spark.table(f\"{curated_db_name}.{curated_table_name}\").schema"
				],
				"execution_count": 30
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Compare schemas"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"std_schema_correct: bool = test_compare_schemas(sb_std_schema, sb_std_table_schema)\n",
					"exitCode += int(not std_schema_correct)\n",
					"print(f\"Service bus standardised schema correct: {std_schema_correct}\\nTable: {std_db_name}.{std_table_name}\\nDifferences shown above (if any)\")\n",
					"hrm_schema_correct: bool = test_compare_schemas(sb_hrm_schema, sb_hrm_table_schema)\n",
					"print(f\"Service bus harmonised schema correct: {hrm_schema_correct}\\nTable: {hrm_db_name}.{hrm_table_name}\\nDifferences shown above (if any)\")\n",
					"exitCode += int(not hrm_schema_correct)\n",
					"cur_schema_correct: bool = test_compare_schemas(curated_schema, curated_table_schema)\n",
					"print(f\"Curated schema correct: {cur_schema_correct}\\nTable: {curated_db_name}.{curated_table_name}\\nDifferences shown above (if any)\")\n",
					"exitCode += int(not cur_schema_correct)"
				],
				"execution_count": 31
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Compare service bus standardised with harmonised\n",
					"Should be the same count"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"standardised_count, harmonised_count, counts_match = test_std_same_rows_hrm(std_table_name, hrm_table_name)\n",
					"print(f\"Standardised Count: {standardised_count: ,}\\nHarmonised Count: {harmonised_count: ,}\\nCounts match: {counts_match}\")\n",
					"\n",
					"if standardised_count > harmonised_count:\n",
					"    exitCode += 1\n",
					"    print(f\"{standardised_count - harmonised_count} rows from Standardised are missing in Harmonised.\" )\n",
					"    differentiate_std_and_hrm(f\"{std_db_name}.{std_table_name}\", f\"{hrm_db_name}.{hrm_table_name}\", data_model_columns)"
				],
				"execution_count": 32
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Compare final harmonised table (if combined with Horizon) with curated table\n",
					"Comparing where IsActive = Y in harmonised = curated row count"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"harmonised_final_count, curated_count, counts_match = test_curated_row_count(hrm_table_final, curated_table_name, data_model_columns)\n",
					"print(f\"Harmonised Final Count: {harmonised_final_count: ,}\\nCurated Count: {curated_count: ,}\\nCounts match: {counts_match}\")\n",
					"exitCode += int(not counts_match)"
				],
				"execution_count": 33
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"**TO BE CHANGED: FOR SPECIFCIC PRIMARY ID**"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Trace service bus data from standardised to harmonised\n",
					"# automated version of previous visual check which is now moved to bottom of notebook\n",
					"\n",
					"sb_standardised_query = \"\"\"\n",
					"SELECT caseId, caseReference, version, size \n",
					"FROM odw_standardised_db.sb_appeal_document\n",
					"WHERE documentid = 'fa4b88ff-2f61-4b45-ad11-0e588f21cc65'\n",
					"ORDER BY ingested_datetime\n",
					"\"\"\"\n",
					"\n",
					"sb_harmonised_query = \"\"\"\n",
					"SELECT caseId, caseReference, version, size \n",
					"FROM odw_harmonised_db.sb_appeal_document\n",
					"WHERE documentid = 'fa4b88ff-2f61-4b45-ad11-0e588f21cc65'\n",
					"ORDER BY IngestionDate\n",
					"\"\"\"\n",
					"\n",
					"SB_standardised_dataframe = get_dataframe(sb_standardised_query)\n",
					"SB_harmonised_dataframe = get_dataframe(sb_harmonised_query)\n",
					"\n",
					"sb_columns_to_compare = [\"caseId\", \"caseReference\", \"version\", \"size\"]\n",
					"\n",
					"if compare_dataframes(SB_standardised_dataframe, SB_harmonised_dataframe, sb_columns_to_compare):\n",
					"    pass\n",
					"else:\n",
					"    print(\"Failed: Trace service bus data from standardised to harmonised\")\n",
					"    exitCode += 1\n",
					""
				],
				"execution_count": 34
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Trace Horizon data to Harmonised\n",
					"# automated version of previous visual check which is now moved to bottom of notebook\n",
					"\n",
					"horizon_standardised_query = \"\"\"\n",
					"SELECT caseReference, filename, size \n",
					"FROM odw_standardised_db.horizon_appeals_document_metadata\n",
					"WHERE documentid = '12471993' \n",
					"AND ingested_datetime = (SELECT MAX(ingested_datetime) FROM odw_standardised_db.horizon_appeals_document_metadata)\n",
					"ORDER BY ingested_datetime\n",
					"\"\"\"\n",
					"\n",
					"horizon_harmonised_query = \"\"\"\n",
					"SELECT caseReference, filename, size \n",
					"FROM odw_harmonised_db.appeal_document\n",
					"WHERE documentid = '12471993'\n",
					"ORDER BY ingestiondate DESC\n",
					"\"\"\"\n",
					"\n",
					"horizon_standardised_dataframe = get_dataframe(horizon_standardised_query)\n",
					"horizon_harmonised_dataframe = get_dataframe(horizon_harmonised_query)\n",
					"\n",
					"horizon_columns_to_compare = [\"caseReference\", \"filename\", \"size\"]\n",
					"\n",
					"if compare_dataframes(horizon_standardised_dataframe, horizon_harmonised_dataframe, horizon_columns_to_compare):\n",
					"    pass\n",
					"else:\n",
					"    print(\"Failed: Trace Horizon data to Harmonised\")\n",
					"    exitCode += 1"
				],
				"execution_count": 35
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Check if there is data coming from ODT (back-office-appeals) and Horizon\n",
					"# automated version of previous visual check which is now moved to bottom of notebook\n",
					"\n",
					"check_ODT_and_horizon_data_query = \"\"\"\n",
					"(SELECT DISTINCT\n",
					"*\n",
					"FROM odw_harmonised_db.appeal_document\n",
					"WHERE horizonfolderid IS NULL AND sourcesystem = 'back-office-appeals'\n",
					"ORDER BY ingestiondate DESC)\n",
					"\"\"\"\n",
					"\n",
					"ODT_and_horizon_dataframe = get_dataframe(check_ODT_and_horizon_data_query)\n",
					"\n",
					"if ODT_and_horizon_dataframe.isEmpty():\n",
					"    print(\"Failed: data coming from ODT (back-office-appeals) and Horizon\")\n",
					"    exitCode += 1"
				],
				"execution_count": 36
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"to BE CHANGED WITH PRIMARY KEY."
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"if test_sb_std_to_sb_hrm_no_dropping_records(std_table_name, hrm_table_name, 'documentId'):\n",
					"    pass  \n",
					"else:\n",
					"    print(\"Failed: test_sb_std_to_sb_hrm_no_dropping_records\")\n",
					"    exitCode += 1"
				],
				"execution_count": 37
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"if test_sb_hrm_to_hrm_final_no_dropping_records(hrm_table_name, hrm_table_final, 'documentId'):\n",
					"    pass\n",
					"else:\n",
					"    print(\"Failed: test_sb_hrm_to_hrm_final_no_dropping_records\")\n",
					"    exitCode += 1"
				],
				"execution_count": 38
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"if test_hrm_to_curated_no_dropping_records(hrm_table_final, curated_table_name, 'documentId'):\n",
					"    pass\n",
					"else:\n",
					"    print(\"Failed: test_hrm_to_curated_no_dropping_records\")\n",
					"    exitCode += 1"
				],
				"execution_count": 39
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"if test_horizon_to_hrm_final_no_dropping_records(horizon_std_table_name, hrm_table_final, 'documentId'):\n",
					"    pass\n",
					"else:\n",
					"    print(\"Failed: test_horizon_to_hrm_final_no_dropping_records\")\n",
					"    exitCode += 1"
				],
				"execution_count": 40
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"if test_aie_std_to_hrm_no_dropping_records(aie_std_table_name, aie_hrm_table_name):\n",
					"    pass\n",
					"else:\n",
					"    print(\"Failed: test_aie_std_to_hrm_no_dropping_records\")\n",
					"    exitCode += 1\n",
					""
				],
				"execution_count": 41
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"if test_aie_hrm_to_hrm_final_no_dropping_records(aie_hrm_table_name, hrm_table_final):\n",
					"    pass\n",
					"else:\n",
					"    print(\"Failed: test_aie_hrm_to_hrm_final_no_dropping_records\")\n",
					"    exitCode += 1"
				],
				"execution_count": 42
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"if test_document_row_counts_match(hrm_table_final, curated_table_name):\n",
					"    pass\n",
					"else:\n",
					"    print(\"Failed: test_document_row_counts_match\")\n",
					"    exitCode += 1"
				],
				"execution_count": 43
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"if test_sb_std_to_hrm_no_message_id_dropped(f\"{std_db_name}.{std_table_name}\", f\"{hrm_db_name}.{hrm_table_name}\"):\n",
					"    pass\n",
					"else:\n",
					"    print(\"Failed: test_sb_std_to_hrm_no_message_id_dropped\")\n",
					"    exitCode += 1"
				],
				"execution_count": 44
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"if test_sb_std_to_hrm_no_active_deleted_record(f\"{std_db_name}.{std_table_name}\", f\"{hrm_db_name}.{hrm_table_name}\"):\n",
					"    pass\n",
					"else:\n",
					"    print(\"Failed: test_sb_std_to_hrm_no_active_deleted_record\")\n",
					"    exitCode += 1"
				],
				"execution_count": 45
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"mssparkutils.notebook.exit(exitCode)"
				],
				"execution_count": 46
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Visual checks moved to below notebook exit\n",
					"This is so they won't run when notebook is called during automation run"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"Trace service bus data from standardised to harmonised\n",
					"\n",
					"We need to make sure the data has loaded through correctly. To do this efficiently, we will select a sample record and check that the data is maintained as it moves through the medallian architecture"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"SELECT * FROM  odw_standardised_db.sb_appeal_document\n",
					"where documentid = 'fa4b88ff-2f61-4b45-ad11-0e588f21cc65'\n",
					"order by ingested_datetime"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"SELECT * FROM  odw_harmonised_db.sb_appeal_document\n",
					"where documentid = 'fa4b88ff-2f61-4b45-ad11-0e588f21cc65'\n",
					"order by IngestionDate"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"Trace Horizon data to Harmonised"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					}
				},
				"source": [
					"%%sql\n",
					"refresh  odw_harmonised_db.appeal_document"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					}
				},
				"source": [
					"%%sql\n",
					"SELECT DISTINCT\n",
					"*\n",
					"FROM odw_harmonised_db.appeal_document\n",
					"\n",
					"where  documentid = '12471993'\n",
					"order BY\n",
					"    ingestiondate DESC"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					}
				},
				"source": [
					"%%sql\n",
					"SELECT DISTINCT\n",
					"*\n",
					"FROM odw_standardised_db.horizon_appeals_document_metadata\n",
					"where documentid = '12471993' \n",
					"and ingested_datetime = (select max(ingested_datetime) from odw_standardised_db.horizon_appeals_document_metadata)\n",
					"\n",
					"order by ingested_datetime"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"Check if there is data coming from ODT (back-office-appeals) and Horizon"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					}
				},
				"source": [
					"%%sql\n",
					"SELECT DISTINCT\n",
					"*\n",
					"FROM odw_harmonised_db.appeal_document\n",
					"\n",
					"where  horizonfolderid  is null and sourcesystem = 'back-office-appeals'\n",
					"order BY\n",
					"    ingestiondate DESC"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"Horizon and Service Bus data successfully combined and flags set appropriately"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df_hzn_std = spark.sql(\"SELECT * from odw_standardised_db.horizon_appeals_document_metadata where documentid = 'fa4b88ff-2f61-4b45-ad11-0e588f21cc65' and ingested_datetime = (select max(ingested_datetime) from odw_standardised_db.horizon_appeals_document_metadata)\")\n",
					"df_sb_hrm = spark.sql(\"select * from odw_harmonised_db.sb_appeal_document where documentid = 'fa4b88ff-2f61-4b45-ad11-0e588f21cc65' order by IngestionDate\")\n",
					"df_hrm_final = spark.sql(\"select * from odw_harmonised_db.appeal_document where documentid = 'fa4b88ff-2f61-4b45-ad11-0e588f21cc65'order by IngestionDate\")\n",
					"df_cur = spark.sql(\"select * from odw_curated_db.appeal_document where documentid = 'fa4b88ff-2f61-4b45-ad11-0e588f21cc65'\")\n",
					"\n",
					"\n",
					"display(df_hzn_std) # as of 25-09-2024 this table has not been displaying\n",
					"display(df_sb_hrm)\n",
					"display(df_hrm_final)\n",
					"display(df_cur)"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"Data updated in curated correctly"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"SELECT\n",
					"    *\n",
					"FROM\n",
					"    odw_curated_db.appeal_document\n",
					"WHERE\n",
					"     documentId = '10847936'"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"data: DataFrame = spark.sql(\"SELECT * FROM odw_curated_db.appeal_document\")\n",
					"data.printSchema()"
				],
				"execution_count": null
			}
		]
	}
}