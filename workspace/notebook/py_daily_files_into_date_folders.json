{
	"name": "py_daily_files_into_date_folders",
	"properties": {
		"folder": {
			"name": "0-odw-source-to-raw/Fileshare/Casework"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "temppool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 1,
			"conf": {
				"spark.dynamicAllocation.enabled": "true",
				"spark.dynamicAllocation.minExecutors": "1",
				"spark.dynamicAllocation.maxExecutors": "5",
				"spark.autotune.trackingId": "2956fffe-a342-4c01-b546-a8b59846af45"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/temppool",
				"name": "temppool",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/temppool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.2",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": true
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"from pyspark.sql import SparkSession\n",
					"from notebookutils import mssparkutils\n",
					"import datetime\n",
					"\n",
					"container_name = 'odw-raw'\n",
					"storage_account = mssparkutils.notebook.run('/utils/py_utils_get_storage_account')\n",
					"relative_path = 'Fileshare/SAP_HR/Casework'\n",
					"\n",
					"folders_to_check = ['HH', 'HGW', 'TPO', 'LocalPlans']\n",
					"file_extension = '.xlsx'\n",
					"\n",
					"\n",
					"def is_excel(file):\n",
					"    return file.endswith(file_extension)\n",
					"\n",
					"\n",
					"def is_valid_date(date):\n",
					"    try:\n",
					"        datetime.date.fromisoformat(format_date(date))\n",
					"        return True\n",
					"    except:\n",
					"        return False\n",
					"\n",
					"\n",
					"def format_date(date):\n",
					"    return datetime.datetime.strptime(date, '%Y%m%d').strftime('%Y-%m-%d')\n",
					"\n",
					"\n",
					"folders = mssparkutils.fs.ls(\"abfss://\"+container_name+\"@\"+storage_account+relative_path)\n",
					"\n",
					"for folder in folders:\n",
					"\n",
					"    if not folder.isDir or folder.name not in folders_to_check:\n",
					"        continue\n",
					"\n",
					"    files = mssparkutils.fs.ls(folder.path)\n",
					"\n",
					"    for file in files:\n",
					"        if not file.isFile or not is_excel(file.name):\n",
					"            continue\n",
					"\n",
					"        # getting last 8 characters before the extension to extract date\n",
					"        date = file.name[len(file_extension) * -1 - 8:len(file_extension) * -1]\n",
					"\n",
					"        if is_valid_date(date):\n",
					"            date_formatted = format_date(date)\n",
					"            dest_dir = \"{}/{}/{}\".format(folder.path, date_formatted, file.name)\n",
					"            mssparkutils.fs.mv(file.path, dest_dir, True, overwrite=True)\n",
					""
				],
				"execution_count": 43
			}
		]
	}
}