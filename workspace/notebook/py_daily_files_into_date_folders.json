{
	"name": "py_daily_files_into_date_folders",
	"properties": {
		"folder": {
			"name": "0-odw-source-to-raw/Fileshare/Casework"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "4ea548a4-aa5a-4b07-9048-61b02dd19f7d"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw",
				"name": "pinssynspodw",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"%run  /0-odw-source-to-raw/Fileshare/SAP_HR/py_0_source_to_raw_hr_functions"
				],
				"execution_count": 49
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%run /utils/py_logging_decorator"
				],
				"execution_count": 50
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.sql import SparkSession\n",
					"from notebookutils import mssparkutils\n",
					"import datetime\n",
					"import logging\n",
					"\n",
					"logger = logging.getLogger(__name__)\n",
					"container_name = 'odw-raw'\n",
					"relative_path = 'Fileshare/SAP_HR/Casework'\n",
					"folders_to_check = ['HH', 'HGW', 'TPO', 'LocalPlans']\n",
					"\n",
					"@logging_to_appins\n",
					"def move_files_in_dated_folders():\n",
					"\n",
					"    '''\n",
					"        Function to move excel files which end with date to their respective dated folders\n",
					"\n",
					"        Args:\n",
					"        None\n",
					"\n",
					"        Returns:\n",
					"        None\n",
					"\n",
					"        Actions:\n",
					"        Moves excel files which end with a date to their respective dated folders.\n",
					"\n",
					"    '''\n",
					"\n",
					"    storage_account = mssparkutils.notebook.run('/utils/py_utils_get_storage_account')\n",
					"    folders = mssparkutils.fs.ls(\"abfss://\"+container_name+\"@\"+storage_account+relative_path)\n",
					"\n",
					"    file_extension = '.xlsx'\n",
					"    incorrect_formatted_files = []\n",
					"    \n",
					"    for folder in folders:\n",
					"        if not folder.isDir or folder.name not in folders_to_check:\n",
					"            continue\n",
					"\n",
					"        files = mssparkutils.fs.ls(folder.path)\n",
					"\n",
					"        for file in files:\n",
					"            if not file.isFile or not is_excel(file.name):\n",
					"                continue\n",
					"\n",
					"            # getting last 8 characters before the extension to extract date\n",
					"            date = file.name[len(file_extension) * -1 - 8:len(file_extension) * -1]\n",
					"\n",
					"            if is_valid_date(date):\n",
					"                date_formatted = format_date(date)\n",
					"                dest_dir = \"{}/{}/{}\".format(folder.path, date_formatted, file.name)\n",
					"                mssparkutils.fs.mv(file.path, dest_dir, True, overwrite=True)\n",
					"            else:\n",
					"                incorrect_formatted_files.append(file.path)\n",
					"\n",
					"    if(len(incorrect_formatted_files) == 0):\n",
					"        logger.info('All files have been successfully moved')\n",
					"    else:\n",
					"        logger.info('Unable to move the following files because of incorrect date format in the filename. Should be YYYYMDD')\n",
					"        logger.info('\\n'.join(incorrect_formatted_files))\n",
					"\n",
					"\n",
					"def is_excel(file):\n",
					"    return file.endswith('.xlsx')\n",
					"\n",
					"\n",
					"def is_valid_date(date):\n",
					"    try:\n",
					"        datetime.date.fromisoformat(format_date(date))\n",
					"        return True\n",
					"    except:\n",
					"        return False\n",
					"\n",
					"\n",
					"def format_date(date):\n",
					"    return datetime.datetime.strptime(date, '%Y%m%d').strftime('%Y-%m-%d')"
				],
				"execution_count": 51
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"move_files_in_dated_folders()"
				],
				"execution_count": 52
			}
		]
	}
}