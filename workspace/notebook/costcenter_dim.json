{
	"name": "costcenter_dim",
	"properties": {
		"folder": {
			"name": "odw-harmonised/SAP-HR"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "caf0519b-2122-47c7-b251-527e090cd26a"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw",
				"name": "pinssynspodw",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.2",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"\r\n",
					"CREATE OR REPLACE TEMPORARY VIEW costcentre_grouped\r\n",
					"\r\n",
					"    AS\r\n",
					"\r\n",
					"SELECT  \r\n",
					"    Cost_Ctr AS CostCenterCode,\r\n",
					"    first(Cost_Centre) AS Description\r\n",
					"       \r\n",
					"FROM odw_standardised_db.vw_saphr\r\n",
					"WHERE Cost_Ctr IS NOT NULL\r\n",
					"GROUP BY Cost_Ctr;"
				],
				"execution_count": 1
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Check for new, updated or deleted data\n",
					"- This script checks for new, updated or deleted data by checking the source data (sap hr) against the target (odw_harmonised_db.cost_center_dim)\n",
					"- **New Data:** where a Cost_Ctr in the source does not exist as a CostCenterCode in the target. NewData flag is set to 'Y'\n",
					"- **Updated data:** Comparison occurs on Cost_Ctr in source and CostCenterCode in target where the row hash is different i.e. there is a change in one of the columns. NewData flag is set to 'Y'\n",
					"- **Deleted data:** where an CostCenterCode in the target exists but the same Cost_Ctr doesn't exist in the source. DeletedData flag is set to 'Y'\n",
					"\n",
					"## View costcenter_dim_new is created"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"-- Build costcenter_dim_new table\r\n",
					"-- Gets modified or deleted from source rows\r\n",
					"\r\n",
					"CREATE OR REPLACE TEMPORARY VIEW costcenter_dim_new\r\n",
					"\r\n",
					"    AS\r\n",
					"\r\n",
					"-- gets data that matches of SourceID and flags that it is modified based on a row (md5) hash. Flags as \"NewData\"\r\n",
					"-- gets data that is in the target but not in source. Flags as \"DeletedData\"\r\n",
					"\r\n",
					"SELECT \r\n",
					"    CASE\r\n",
					"        WHEN T1.CostCenterCode IS NULL\r\n",
					"        THEN T7.CostCenterID\r\n",
					"        ELSE NULL\r\n",
					"    END as CostCenterID, -- surrogate key\r\n",
					"    T1.CostCenterCode,\r\n",
					"    T1.Description,\r\n",
					"    T2.SourceSystemID,\r\n",
					"    CURRENT_TIMESTAMP AS StartDate,\r\n",
					"    NULL AS EndDate,\r\n",
					"    CURRENT_TIMESTAMP AS IngestionDate,\r\n",
					"    NULL AS ValidTo,\r\n",
					"    md5(concat(IFNULL(T1.CostCenterCode,'.'), IFNULL(T1.Description,'.'))) as RowID,\r\n",
					"    'Y' as IsActive,\r\n",
					"    CASE\r\n",
					"        WHEN T1.CostCenterCode = T7.CostCenterCode AND  md5(concat(IFNULL(T1.CostCenterCode,'.'), IFNULL(T1.Description,'.'))) <> T7.RowID    -- same employee, changed data\r\n",
					"        THEN 'Y'\r\n",
					"        WHEN T7.CostCenterCode IS NULL -- new employee\r\n",
					"        THEN 'Y'\r\n",
					"        ELSE 'N'\r\n",
					"    END as NewData,\r\n",
					"    CASE\r\n",
					"        WHEN T1.CostCenterCode IS NULL\r\n",
					"        THEN 'Y'\r\n",
					"        ELSE 'N'\r\n",
					"    END AS  DeletedData\r\n",
					"\r\n",
					"FROM costcentre_grouped T1\r\n",
					"LEFT JOIN odw_harmonised_db.sourcesystem_fact T2 ON \"SAP HR\" = T2.Description and T2.IsActive = 'Y'\r\n",
					"FULL JOIN odw_harmonised_db.CostCenter_Dim T7 ON T1.CostCenterCode = T7.CostCenterCode \r\n",
					"WHERE  (T7.IsActive = 'Y' or T7.IsActive IS NULL)\r\n",
					"    \r\n",
					"        AND (\r\n",
					"        \r\n",
					"        -- flags new data        \r\n",
					"        (   CASE\r\n",
					"                WHEN T1.CostCenterCode = T7.CostCenterCode AND  md5(concat(IFNULL(T1.CostCenterCode,'.'), IFNULL(T1.Description,'.'))) <> T7.RowID    -- same employee, changed data\r\n",
					"                THEN 'Y'\r\n",
					"                WHEN T7.CostCenterCode IS NULL -- new employee\r\n",
					"                THEN 'Y'\r\n",
					"                ELSE 'N'\r\n",
					"            END  = 'Y' ) OR\r\n",
					"        \r\n",
					"        -- flags deleted data\r\n",
					"        (   CASE\r\n",
					"                WHEN T1.CostCenterCode IS NULL\r\n",
					"                THEN 'Y'\r\n",
					"                ELSE 'N'\r\n",
					"            END = 'Y' )\r\n",
					")\r\n",
					"\r\n",
					";\r\n",
					""
				],
				"execution_count": 3
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Run tests to check integrity of data by numbers\n",
					"- This script checks for the total number of current codes in the harmonised table, and compare against the numbers for new data to be added and data to be set as inactive.\n",
					"- **Changes tracking:** where it checks the data against active records in harmonised and compares with records to add and records to be set as inactive.\n",
					"- **Changes tolerance levels:** if the total amount to be added and deleted surpasses the tolerance limit, it will interrupt the process of loading the data."
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.sql import SparkSession\r\n",
					"spark = SparkSession.builder.getOrCreate()\r\n",
					"\r\n",
					"Source_Number = spark.sql(\"SELECT COUNT(*) AS Source_Number FROM costcentre_grouped\")\r\n",
					"Current_Number = spark.sql(\"SELECT COUNT (DISTINCT RowID) AS Current_Number FROM odw_harmonised_db.costcenter_dim where IsActive = 'Y' \")\r\n",
					"New_Data_Number = spark.sql(\"SELECT COUNT (DISTINCT RowID) AS New_Data_Number FROM costcenter_dim_new WHERE NewData = 'Y'\")\r\n",
					"Deleted_Data_Number = spark.sql(\"SELECT COUNT (DISTINCT RowID) AS Deleted_Data_Number FROM costcenter_dim_new WHERE DeletedData = 'Y'\")\r\n",
					"\r\n",
					"Source_Number_Pandas = Source_Number.toPandas()\r\n",
					"Current_Number_Pandas =  Current_Number.toPandas()\r\n",
					"New_Data_Number_Pandas = New_Data_Number.toPandas()\r\n",
					"Deleted_Data_Number_Pandas = Deleted_Data_Number.toPandas()\r\n",
					"\r\n",
					"# checking if new total number of registers matches the previously loaded, plus New ones, minus Deleted ones\r\n",
					"print(\"SET 1:\")\r\n",
					"Total_Number = Source_Number_Pandas['Source_Number'].tolist() \r\n",
					"Current_Loaded_Number = Current_Number_Pandas['Current_Number'].tolist() \r\n",
					"New_Data_Number = New_Data_Number_Pandas['New_Data_Number'].tolist() \r\n",
					"Deleted_Data_Number = Deleted_Data_Number_Pandas['Deleted_Data_Number'].tolist() \r\n",
					"\r\n",
					"print(Total_Number) \r\n",
					"print(Current_Loaded_Number) \r\n",
					"print(New_Data_Number) \r\n",
					"print(Deleted_Data_Number)\r\n",
					"\r\n",
					"#if Total_Number[0] != (Current_Loaded_Number[0] + New_Data_Number[0] - Deleted_Data_Number[0]):\r\n",
					"    #raise RuntimeError(\"Loading Number do not match\")\r\n",
					"#else:\r\n",
					"#    print(\"Loading number matches with existing codes plus new, minus deleted!\")\r\n",
					"\r\n",
					"#if New_Data_Number[0] > 1000:\r\n",
					"    #raise RuntimeError(\"ALERT: Too many new codes\")\r\n",
					"#else:\r\n",
					"#    print(\"New data under tolerance levels\")\r\n",
					"\r\n",
					"#if Deleted_Data_Number[0] > 500:\r\n",
					"    #raise RuntimeError(\"ALERT: Too many deleted codes\")\r\n",
					"#else:\r\n",
					"#    print(\"Unused codes under tolerance levels\")"
				],
				"execution_count": 1
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Run tests to check integrity of data by comparison of codes\n",
					"- This script checks for the total list of current codes in the harmonised table, and compare against the list for new data to be added and data to be set as inactive.\n",
					"- **Changes tracking:** where it checks the data against active records in harmonised and compares with records to add and records to be set as inactive."
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.sql import SparkSession\r\n",
					"spark = SparkSession.builder.getOrCreate()\r\n",
					"\r\n",
					"Current_Records = spark.sql(\"SELECT DISTINCT RowID AS Current_Records FROM odw_harmonised_db.costcenter_dim where IsActive = 'Y' \")\r\n",
					"New_Data_Records = spark.sql(\"SELECT DISTINCT RowID AS New_Data_Records FROM costcenter_dim_new WHERE NewData = 'Y'\")\r\n",
					"Deleted_Data_Records = spark.sql(\"SELECT DISTINCT RowID AS Deleted_Data_Records FROM costcenter_dim_new WHERE DeletedData = 'Y'\")\r\n",
					"\r\n",
					"Current_Records_Pandas =  Current_Records.toPandas()\r\n",
					"New_Data_Records_Pandas = New_Data_Records.toPandas()\r\n",
					"Deleted_Data_Records_Pandas = Deleted_Data_Records.toPandas()\r\n",
					"\r\n",
					"# checking if a deleted records are correcly flagged, not existing in the new data, but existing inpreviously loaded\r\n",
					"print(\"TEST 2:\")\r\n",
					"\r\n",
					"Current_Records = Current_Records_Pandas['Current_Records'].tolist() \r\n",
					"Deleted_Records = Deleted_Data_Records_Pandas['Deleted_Data_Records'].tolist()\r\n",
					"New_Records = New_Data_Records_Pandas['New_Data_Records'].tolist()\r\n",
					"\r\n",
					"print(Current_Records)\r\n",
					"print(Deleted_Records)\r\n",
					"print(New_Records)\r\n",
					"\r\n",
					"#for i in Deleted_Records:\r\n",
					"#    if i in Current_Records: \r\n",
					"#        print(i + \" to be deleted is in the current records\")\r\n",
					"#    else:\r\n",
					"        #raise RuntimeError(\"Records to Delete do not match\")\r\n",
					"\r\n",
					"#for j in New_Records:\r\n",
					"#    if j not in Current_Records: \r\n",
					"#        print(j + \" to be added is not in the current records\")\r\n",
					"#    else:\r\n",
					"        #raise RuntimeError(\"Records to Add do not match\")"
				],
				"execution_count": 7
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Dataset is created that contains changed data and corresponding target data\n",
					"- This script combines data that has been updated, Deleted or is new, with corresponding target data\n",
					"- View **CostCenter_Dim_new** is unioned to the target data filter to only those rows where changes have been detected\n",
					"## View CostCenter_Dim_changed_rows is created"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"-- Create new and updated dataset\r\n",
					"\r\n",
					"CREATE OR REPLACE TEMPORARY VIEW CostCenter_Dim_changed_rows\r\n",
					"\r\n",
					"    AS\r\n",
					"\r\n",
					"-- gets updated, deleted and new rows \r\n",
					"\r\n",
					"Select \r\n",
					"    CostCenterID, -- surrogate key\r\n",
					"    CostCenterCode,\r\n",
					"    Description,\r\n",
					"    SourceSystemID,\r\n",
					"    StartDate,\r\n",
					"    EndDate,\r\n",
					"    IngestionDate,\r\n",
					"    ValidTo,\r\n",
					"    RowID,\r\n",
					"    IsActive\r\n",
					"    \r\n",
					"From CostCenter_Dim_new\r\n",
					"\r\n",
					"    UNION ALL\r\n",
					"\r\n",
					"-- gets original versions of updated rows so we can update EndDate and set IsActive flag to 'N'\r\n",
					"\r\n",
					"SELECT\r\n",
					"    CostCenterID, -- surrogate key\r\n",
					"    CostCenterCode,\r\n",
					"    Description,\r\n",
					"    SourceSystemID,\r\n",
					"    StartDate,\r\n",
					"    EndDate,\r\n",
					"    IngestionDate,\r\n",
					"    ValidTo,\r\n",
					"    RowID,\r\n",
					"    IsActive\r\n",
					"FROM odw_harmonised_db.CostCenter_Dim\r\n",
					"WHERE CostCenterCode IN (SELECT CostCenterCode FROM CostCenter_Dim_new WHERE CostCenterID IS NULL); "
				],
				"execution_count": 3
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# View CostCenter_dim_changed_rows is used in a merge (Upsert) statement into the target table\n",
					"- **WHEN MATCHED** ON the Business Key (i.e. CostCenterID from employee_dim), EndDate is set to today -1 day and the IsActive flag is set to 'N'\n",
					"- **WHEN NOT MATCHED** ON the business key, insert rows\n",
					"## Table odw_harmonised_db.CostCenter_dim is updated"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"\r\n",
					"-- merge into fact table\r\n",
					"\r\n",
					"MERGE INTO odw_harmonised_db.CostCenter_Dim AS Target\r\n",
					"USING CostCenter_Dim_changed_rows AS Source\r\n",
					"\r\n",
					"ON Source.CostCenterID = Target.CostCenterID\r\n",
					"\r\n",
					"-- For Updates existing rows\r\n",
					"\r\n",
					"WHEN MATCHED\r\n",
					"    THEN \r\n",
					"    UPDATE SET\r\n",
					"    Target.EndDate = date_sub(current_timestamp,1),\r\n",
					"    Target.IsActive = 'N'\r\n",
					"\r\n",
					"-- Insert completely new rows\r\n",
					"WHEN NOT MATCHED \r\n",
					"    THEN INSERT * ;  \r\n",
					""
				],
				"execution_count": 4
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Fix the IDs\n",
					"- No auto-increment feature is available in delta tables, therefore we need to create new IDs for the inserted rows\n",
					"- This is done by select the target data and using INSERT OVERWRITE to re-insert the data is a new Row Number\n",
					"## Table odw_harmonised_db.CostCenter_dim_changed_rows is updated"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"-- Insert new employee_hr_hierarchy_dim\r\n",
					"\r\n",
					"INSERT OVERWRITE odw_harmonised_db.CostCenter_Dim\r\n",
					"\r\n",
					"SELECT \r\n",
					"    ROW_NUMBER() OVER (ORDER BY CostCenterID NULLS LAST) AS CostCenterID,\r\n",
					"    CostCenterCode,\r\n",
					"    Description,\r\n",
					"    SourceSystemID,\r\n",
					"    StartDate,\r\n",
					"    EndDate,\r\n",
					"    IngestionDate,\r\n",
					"    ValidTo,\r\n",
					"    RowID,\r\n",
					"    IsActive\r\n",
					"FROM odw_harmonised_db.CostCenter_Dim;\r\n",
					"\r\n",
					""
				],
				"execution_count": 5
			}
		]
	}
}