{
	"name": "py_horizon_raw_to_std",
	"properties": {
		"folder": {
			"name": "1-odw-raw-to-standardised"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "7f94cd30-76a5-405e-ad54-d416ece9cd70"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": true,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw",
				"name": "pinssynspodw",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Prerequisites\n",
					"1. Make sure the new raw file's entry has been added to the Orchestration i.e `/infrastructure/configuration/data-lake/orchestration/orchestration.json`\n",
					"2. Make sure the standardised table's schema is present on the path specified in the entry added in step 1.\n",
					"3. Only if the raw file is huge (several GBs), the spark pool might need some upscaling. Hence the following cell"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%%configure -f\n",
					"{\n",
					"    \"conf\": {\n",
					"        \"spark.kryoserializer.buffer.max\": \"2047m\",\n",
					"        \"spark.driver.maxResultSize\": \"10g\",\n",
					"        \"spark.rpc.message.maxSize\": \"1280\"\n",
					"    }\n",
					"}"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%run utils/py_logging_decorator"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### Get the Storage Account"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"import asyncio\n",
					"import nest_asyncio\n",
					"import tracemalloc\n",
					"tracemalloc.start()\n",
					"from pyspark.sql import SparkSession\n",
					"from notebookutils import mssparkutils\n",
					"import json\n",
					"import calendar\n",
					"from datetime import datetime, timedelta, date\n",
					"import pandas as pd\n",
					"import os"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%run \"/utils/py_mount_storage\""
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### Initialise the parameters"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"tags": [
						"parameters"
					]
				},
				"source": [
					"date_folder=''\n",
					"source_folder='Horizon'\n",
					"source_frequency_folder=''\n",
					"specific_file='' # if not provided, it will ingest all files in the date_folder\n",
					"isMultiLine = True\n",
					"delete_existing_table=False\n",
					"dataAttribute = \"\""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"spark = SparkSession.builder.getOrCreate()\n",
					"storage_account=mssparkutils.notebook.run('/utils/py_utils_get_storage_account')\n",
					"raw_container = \"abfss://odw-raw@\" + storage_account\n",
					"source_path: str = f\"abfss://odw-raw@{storage_account}{source_folder}/\"\n",
					"process_name = mssparkutils.runtime.context['currentNotebookName']"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"# List all items in the directory\n",
					"items = mssparkutils.fs.ls(source_path)\n",
					"# Filter for directories and get their names and modification times\n",
					"folders = [(item.name, item.modifyTime) for item in items if item.isDir]\n",
					"# Sort folders by modification time in descending order\n",
					"sorted_folders = sorted(folders, key=lambda x: x[1], reverse=True)\n",
					"# Get the name of the latest modified folder\n",
					"if sorted_folders:\n",
					"    latest_folder = sorted_folders[0][0]\n",
					"    source_path=f\"{source_path}{latest_folder}\"\n",
					"    print(f\"Latest modified folder: {latest_folder}\")\n",
					"    print(source_path)\n",
					"else:\n",
					"    print(\"No folders found in the specified directory.\")"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"files = mssparkutils.fs.ls(source_path)\n",
					"horizon_files = [file.name for file in files]\n",
					"horizon_files \n",
					"# = horizon_files[:1] # comment this during the full execution"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### Ingest the data from the raw/source into the standardised table. \n",
					"If the table doesn't already exist, this will create the table first and ingest the data."
				]
			},
			{
				"cell_type": "code",
				"source": [
					"@logging_to_appins\n",
					"def create_table_from_schema(jsonschema:str, db_name:str, table_name:str, target_container:str, target_folder:str, change_data_feed=False):\n",
					"    ### type checks\n",
					"\n",
					"    ### imports\n",
					"    from pyspark.sql.types import StructType\n",
					"    from pyspark.sql import SparkSession\n",
					"    import json\n",
					"    from delta import DeltaTable\n",
					"    spark = SparkSession.builder.getOrCreate()\n",
					"\n",
					"    ### define target location\n",
					"    target_loc = target_container + target_folder\n",
					"\n",
					"    ### change any array field to string \n",
					"    jsonschema = json.loads(jsonschema)\n",
					"    for field in jsonschema['fields']:\n",
					"        if field['type'] == 'array':\n",
					"            field['type'] = 'string'\n",
					"    \n",
					"    ### use json to create dataframe\n",
					"    schema = StructType.fromJson(jsonschema)\n",
					"    df = spark.createDataFrame([], schema)\n",
					"\n",
					"    ### table checks\n",
					"    if any([dbs.name == db_name for dbs in spark.catalog.listDatabases()]):\n",
					"        if any([table.name == table_name for table in spark.catalog.listTables(db_name)]):\n",
					"            table_details = spark.sql(f\"DESCRIBE DETAIL {db_name}.{table_name}\").toPandas()\n",
					"            if len(table_details) > 1:\n",
					"                raise ValueError(\"S2R-SAPHR: The table is represented by multiple parquet files- please investigate!\")\n",
					"            else:\n",
					"                if table_details['location'][0].rstrip(\"/\") == target_loc.rstrip(\"/\"):\n",
					"                    logInfo(f\"S2R-SAPHR: Table already exists with correct location\")\n",
					"                else:\n",
					"                    table_deets = table_details['location'][0]\n",
					"        \n",
					"                    raise ValueError(f\"S2R-SAPHR: Table already exists but the location provided doesn't match the existing parquet location for the table!, {table_deets}, {target_loc}\")\n",
					"        else:\n",
					"            ### create spark sql table from parquet\n",
					"            if any([dbs.name == db_name for dbs in spark.catalog.listDatabases()]):\n",
					"            ### write df to parquet location\n",
					"                if not (DeltaTable.isDeltaTable(spark,target_loc)):\n",
					"                    df.write.option(\"mergeSchema\", \"false\").format('delta').save(target_loc)# no overwrite on table creation\n",
					"                    \n",
					"                if not any([table.name == table_name for table in spark.catalog.listTables(db_name)]):\n",
					"                    logInfo(f\"Creating {db_name}.{table_name}\")\n",
					"                    spark.sql(\"CREATE TABLE {0}.{1} USING DELTA LOCATION '{2}'\".format(db_name,table_name,target_loc))\n",
					"                    if change_data_feed == True:\n",
					"                        spark.sql(\"ALTER TABLE {0}.{1} SET TBLPROPERTIES (delta.enableChangeDataFeed = true)\".format(db_name,table_name))\n",
					"                    logInfo(f\"Created {db_name}.{table_name}\")\n",
					"    else:\n",
					"        raise NameError(f\"{db_name} doesn't exist\")"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"@logging_to_appins\n",
					"def ingest_adhoc(storage_account, \n",
					"                    definition,\n",
					"                    folder_path, \n",
					"                    filename, \n",
					"                    expected_from, \n",
					"                    expected_to,\n",
					"                    process_name, \n",
					"                    isMultilineJSON=False, \n",
					"                    dataAttribute=None):\n",
					"\n",
					"    from pyspark.sql import SparkSession\n",
					"    from notebookutils import mssparkutils\n",
					"    import json\n",
					"    from datetime import datetime, timedelta, date\n",
					"    import pandas as pd\n",
					"    from pyspark.sql.types import StringType,DateType,TimestampType,IntegerType, FloatType, StructType, StructField\n",
					"    import re\n",
					"    from pyspark.sql.functions import col, lit, input_file_name, current_timestamp, sha2, concat, count\n",
					"    import pyspark.sql.types as types\n",
					"\n",
					"    ingestion_failure: bool = False\n",
					"\n",
					"    spark = SparkSession.builder.getOrCreate()\n",
					"    spark.conf.set(\"spark.databricks.delta.schema.autoMerge.enabled\", \"true\")\n",
					"\n",
					"    standardised_container = \"abfss://odw-standardised@\"+storage_account\n",
					"    standardised_path = definition['Standardised_Path'] + \"/\"\n",
					"    standardised_table_name = definition['Standardised_Table_Name']\n",
					"    source_filename_start = definition['Source_Filename_Start']\n",
					"\n",
					"    logging_container = f\"abfss://logging@{storage_account}\"\n",
					"    logging_table_name = 'tables_logs'\n",
					"    ingestion_log_table_location = logging_container + logging_table_name\n",
					"\n",
					"    if 'Standardised_Table_Definition' in definition:\n",
					"        standardised_table_loc = \"abfss://odw-config@\"+storage_account + definition['Standardised_Table_Definition']\n",
					"        standardised_table_def_json = spark.read.text(standardised_table_loc, wholetext=True).first().value\n",
					"    else:\n",
					"        standardised_table_def_json = mssparkutils.notebook.run('/py_get_schema_from_url', 30, {'db_name': 'odw_standardised_db', 'entity_name': definition['Source_Frequency_Folder']})\n",
					" \n",
					"    if not any([table.name.lower() == standardised_table_name.lower() for table in spark.catalog.listTables('odw_standardised_db')]):\n",
					"        create_table_from_schema(standardised_table_def_json, \"odw_standardised_db\", standardised_table_name,standardised_container , standardised_path+standardised_table_name)   \n",
					"\n",
					"    #Check that we're dealing with delta already. If not we will convert the table first\n",
					"    table_metadata = spark.sql(f\"DESCRIBE EXTENDED odw_standardised_db.{standardised_table_name}\")\n",
					"    data_format = table_metadata.filter(table_metadata.col_name == \"Provider\").collect()[0].data_type\n",
					"\n",
					"    if data_format == \"parquet\":\n",
					"        replace = spark.sql(f\"SELECT * FROM odw_standardised_db.{standardised_table_name}\")\n",
					"        replace.write.option(\"mergeSchema\", \"true\").format(\"delta\").mode(\"overwrite\").saveAsTable(f\"odw_standardised_db.{standardised_table_name}_new\")\n",
					"\n",
					"        # Drop the original table\n",
					"        spark.sql(f\"DROP TABLE IF EXISTS odw_standardised_db.{standardised_table_name}\")\n",
					"\t\t\n",
					"        # Rename the temporary table to replace the original table\n",
					"        spark.sql(f\"ALTER TABLE odw_standardised_db.{standardised_table_name}_new RENAME TO odw_standardised_db.{standardised_table_name}\")\n",
					"\n",
					"    try:\n",
					"        standardised_table_location = spark.sql(f\"DESCRIBE FORMATTED odw_standardised_db.{standardised_table_name}\") \\\n",
					"                    .filter(\"col_name = 'Location'\") \\\n",
					"                    .select(\"data_type\") \\\n",
					"                    .collect()[0][0] \n",
					"    except:\n",
					"        standardised_table_location = standardised_container+standardised_path+standardised_table_name\n",
					"                   \n",
					"    standardised_table_df = spark.read.format(\"delta\").load(standardised_table_location)\n",
					"    rows = standardised_table_df.filter((standardised_table_df.expected_from == expected_from) &  (standardised_table_df.expected_to == expected_to)).count()\n",
					"\n",
					"    jobId = mssparkutils.env.getJobId()\n",
					"\n",
					"    ### mount the data lake storage in Synapse to the Synapse File Mount API \n",
					"    mount_storage(path=folder_path)\n",
					"\n",
					"    logInfo(f\"Reading {filename}\")\n",
					"\n",
					"    ### open .csv and .xlsx files using pandas                                 \n",
					"    if \".xlsx\" in filename.lower():\n",
					"        sheet_name = definition['Source_Sheet_Name'] if 'Source_Sheet_Name' in definition else 0\n",
					"        df = pd.read_excel(f\"/synfs/{jobId}/temp_raw/{filename}\", dtype=str, sheet_name=sheet_name, na_filter=False)\n",
					"    elif '.csv' in filename.lower():\n",
					"        df = spark.read.options(quote='\"', escape='\\\\', encoding='utf8', header=True, multiLine=True, columnNameOfCorruptRecord='corrupted_records', mode=\"PERMISSIVE\").csv(f\"{folder_path}/{filename}\")\n",
					"\n",
					"        if \"corrupted_records\" in df.columns:\n",
					"            print(f\"Corrupted Records detected from CSV ingestion in {filename}\")\n",
					"            ingestion_failure = True\n",
					"            \n",
					"\n",
					"    elif '.json' in filename.lower():\n",
					"        if isMultilineJSON == False:\n",
					"            df = spark.read.json(f\"{folder_path}/{filename}\")\n",
					"        else:\n",
					"            logInfo(\"Reading multiline JSON\")\n",
					"            df = spark.read.option(\"multiline\", \"true\").json(f\"{folder_path}/{filename}\")\n",
					"\n",
					"            #we need to pull the data from a specific data attribute\n",
					"            if dataAttribute:\n",
					"                dfs: list = [] # an empty list to store the data frames\n",
					"                for row in df.select(dataAttribute).collect():\n",
					"                    for data in row[dataAttribute]:\n",
					"                        dfs.append(data)\n",
					"                df = spark.createDataFrame(dfs)\n",
					"    else:\n",
					"        raise RuntimeError(f\"This file type for {filename} is unsupported\")\n",
					"\n",
					"    ### drop headerless columns\n",
					"    sparkDF = df.select([col for col in df.columns if not col.startswith('Unnamed')])\n",
					"    # rows_raw = len(df.index)\n",
					"    rows_raw = sparkDF.count()\n",
					"\n",
					"    try:\n",
					"        unmount_storage()\n",
					"    except Exception as e:\n",
					"        logInfo('Unable to unmount storage')\n",
					"\n",
					"    ### add date columns included with every standardised table\n",
					"    sparkDF = sparkDF.withColumn(\"ingested_datetime\",current_timestamp())\n",
					"    sparkDF = sparkDF.withColumn(\"ingested_by_process_name\", lit(process_name))\n",
					"    sparkDF = sparkDF.withColumn(\"expected_from\",lit(expected_from))\n",
					"    sparkDF = sparkDF.withColumn(\"expected_to\",lit(expected_to))\n",
					"    sparkDF = sparkDF.withColumn(\"input_file\", input_file_name())\n",
					"    sparkDF = sparkDF.withColumn(\"modified_datetime\", current_timestamp())\n",
					"    sparkDF = sparkDF.withColumn(\"modified_by_process_name\", lit(process_name))\n",
					"    sparkDF = sparkDF.withColumn(\"entity_name\", lit(source_filename_start))\n",
					"    sparkDF = sparkDF.withColumn(\"file_ID\", sha2(concat(lit(input_file_name()), current_timestamp().cast(\"string\")), 256))\n",
					"\n",
					"    ### change any array field to string\n",
					"    schema = json.loads(standardised_table_def_json)\n",
					"    for field in schema['fields']:\n",
					"        if field['type'] == 'array':\n",
					"            field['type'] = 'string'\n",
					"    schema = StructType.fromJson(schema)\n",
					"\n",
					"    ### remove characters that Delta can't allow in headers and add numbers to repeated column headers\n",
					"    cols_orig = sparkDF.schema.names\n",
					"    cols=[re.sub('[^0-9a-zA-Z]+', '_', i).lower() for i in cols_orig]\n",
					"    cols=[colm.rstrip('_') for colm in cols]\n",
					"    newlist = []\n",
					"    for i, v in enumerate(cols):\n",
					"        totalcount = cols.count(v)\n",
					"        count = cols[:i].count(v)\n",
					"        newlist.append(v + str(count + 1) if totalcount > 1 else v)\n",
					"    for colix in range(len(cols_orig)):\n",
					"        sparkDF = sparkDF.toDF(*newlist) \n",
					"\n",
					"    ### Cast any column in sparkDF with type mismatch\n",
					"    for field in sparkDF.schema:\n",
					"        table_field = next((f for f in schema if f.name.lower() == field.name.lower()), None)\n",
					"        if table_field is not None and field.dataType != table_field.dataType:\n",
					"            sparkDF = sparkDF.withColumn(field.name, col(field.name).cast(table_field.dataType))\n",
					"\n",
					"    ### writing the dataframe to the existing standardised table\n",
					"    logInfo(f\"Writing data to odw_standardised_db.{standardised_table_name}\")\n",
					"    sparkDF.write.option(\"mergeSchema\", \"true\").format(\"delta\").mode(\"append\").saveAsTable(f\"odw_standardised_db.{standardised_table_name}\")\n",
					"    logInfo(f\"Written data to odw_standardised_db.{standardised_table_name}\")\n",
					"\n",
					"    standardised_table_df_new = spark.read.format(\"delta\").load(standardised_table_location)\n",
					"    rows_new = standardised_table_df.filter((standardised_table_df.expected_from == expected_from) &  (standardised_table_df.expected_to == expected_to)).count()\n",
					"\n",
					"\n",
					"    try:\n",
					"        ### Define schema for the ingestion log table with all required columns\n",
					"        ingestion_log_schema_loc = \"abfss://odw-config@\" + storage_account + \"tables_logs.json\"\n",
					"        ingestion_log_schema = spark.read.text(ingestion_log_schema_loc, wholetext=True).first().value\n",
					"\n",
					"        ### Try loading the ingestion log table, if it exists\n",
					"        try:\n",
					"            ingestion_log_df = spark.read.format(\"delta\").load(ingestion_log_table_location)\n",
					"            table_exists = True\n",
					"        except Exception as e:\n",
					"            logInfo(f\"Ingestion log table not found at {ingestion_log_table_location}. Creating a new one.\")\n",
					"            table_exists = False\n",
					"\n",
					"        ### Extract a single row with the logging columns\n",
					"        new_log_entry = sparkDF.select(\n",
					"            \"file_ID\",\n",
					"            \"ingested_datetime\",\n",
					"            \"ingested_by_process_name\",\n",
					"            \"input_file\",\n",
					"            \"modified_datetime\",\n",
					"            \"modified_by_process_name\",\n",
					"            \"entity_name\"\n",
					"        ).limit(1)\n",
					"\n",
					"        new_log_entry = new_log_entry.withColumn(\"rows_raw\", lit(sparkDF.count()))\n",
					"        new_log_entry = new_log_entry.withColumn(\"rows_new\", lit(standardised_table_df.filter((standardised_table_df.expected_from == expected_from) &  (standardised_table_df.expected_to == expected_to)).count()))\n",
					"\n",
					"\n",
					"        if not table_exists:\n",
					"            # Create the table\n",
					"            new_log_entry.write.format(\"delta\").option(\"path\", ingestion_log_table_location).saveAsTable(f\"logging.{logging_table_name}\")\n",
					"            logInfo(f\"Updating ingestion logging table {logging_table_name} with first entry.\")\n",
					"        else:\n",
					"            # Appending log entry to existing table - using the catalog directly\n",
					"            new_log_entry.write.format(\"delta\").mode(\"append\").saveAsTable(f\"logging.{logging_table_name}\")\n",
					"            logInfo(\"Appended to existing ingestion logging table with new entry\")\n",
					"    \n",
					"    except Exception as e:\n",
					"        logInfo('Logging to tables_logs failed')\n",
					"\n",
					"    ### Test correct number of rows have written\n",
					"    if rows_raw <= rows_new:\n",
					"        #count up the rows which match the dates, we should at LEAST have those, multiple runs on the same day will lead to the counts not matching however\n",
					"        logInfo('All rows have successfully been written')\n",
					"    else:\n",
					"        logError(f\"All rows have NOT been successfully written. Expected {rows_raw} but {rows_new} written\")\n",
					"        ingestion_failure = True\n",
					"    return (ingestion_failure, rows_raw)\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"async def ingest_horizon(date_folder: str, file: str):\n",
					"\n",
					"    if date_folder == '':\n",
					"        date_folder = datetime.now().date()\n",
					"    else:\n",
					"        date_folder = datetime.strptime(date_folder, \"%Y-%m-%d\")\n",
					"\n",
					"    date_folder_str = date_folder.strftime('%Y-%m-%d')\n",
					"    # source_folder_path = source_folder if not source_frequency_folder else f\"{source_folder}/{source_frequency_folder}\"\n",
					"\n",
					"    # READ ORCHESTRATION DATA\n",
					"    path_to_orchestration_file = \"abfss://odw-config@\"+storage_account+\"orchestration/orchestration.json\"\n",
					"    df = spark.read.option(\"multiline\",\"true\").json(path_to_orchestration_file)\n",
					"    definitions = json.loads(df.toJSON().first())['definitions']\n",
					"\n",
					"    # source_path = f\"{raw_container}{source_folder_path}/{date_folder_str}\"\n",
					"\n",
					"    # try:\n",
					"    #     files = mssparkutils.fs.ls(source_path)\n",
					"    # except Exception as e:\n",
					"    #     mssparkutils.notebook.exit(f\"Raw file not found at {source_path}\")\n",
					"\n",
					"\n",
					"    # for file in files:\n",
					"\n",
					"    # ignore json raw files if source is service bus\n",
					"    # if source_folder == 'ServiceBus' and file.endswith('.json'):\n",
					"    #     continue\n",
					"\n",
					"    # # ignore files other than specified file \n",
					"    # if specific_file != '' and not file.startswith(specific_file + '.'):\n",
					"    #     continue\n",
					"        \n",
					"    definition = next((d for d in definitions if (specific_file == '' or d['Source_Filename_Start'] == specific_file) \n",
					"                        and (not source_frequency_folder or d['Source_Frequency_Folder'] == source_frequency_folder) \n",
					"                        and file.startswith(d['Source_Filename_Start'])), None)\n",
					"    \n",
					"    if definition:\n",
					"        expected_from = date_folder - timedelta(days=1)\n",
					"        expected_from = datetime.combine(expected_from, datetime.min.time())\n",
					"        expected_to = expected_from + timedelta(days=definition['Expected_Within_Weekdays']) \n",
					"\n",
					"        if delete_existing_table:\n",
					"            print(f\"Deleting existing table if exists odw_standardised_db.{definition['Standardised_Table_Name']}\")\n",
					"            mssparkutils.notebook.run('/utils/py_delete_table', 300, arguments={'db_name': 'odw_standardised_db', 'table_name': definition['Standardised_Table_Name']})\n",
					"\n",
					"        print(f\"Ingesting {file}\")\n",
					"        (ingestion_failure, row_count) = ingest_adhoc(storage_account, definition, source_path, file, expected_from, expected_to,process_name,isMultiLine, dataAttribute)\n",
					"        print(f\"Ingested {row_count} rows\")\n",
					"\n",
					"        if ingestion_failure:\n",
					"            print(f\"Errors reported during Ingestion!!\")\n",
					"            raise RuntimeError(\"Ingestion Failure\")\n",
					"        else:\n",
					"            print(f\"No Errors reported during Ingestion\")\n",
					"\n",
					"    else:\n",
					"        if specific_file != '':\n",
					"            raise ValueError(f\"No definition found for {specific_file}\")\n",
					"        else:\n",
					"            print(\"No definition found\")\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"async def load_horizon_async():\n",
					"    tasks: list = [\n",
					"        ingest_horizon(date_folder=latest_folder, file=file) for file in horizon_files\n",
					"    ]\n",
					"    await asyncio.gather(*tasks)\n",
					"\n",
					"nest_asyncio.apply()\n",
					"loop = asyncio.get_event_loop()\n",
					"loop.run_until_complete(load_horizon_async())"
				],
				"execution_count": null
			}
		]
	}
}