{
	"name": "py_sb_to_raw",
	"properties": {
		"folder": {
			"name": "archive"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodwpr",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "23e00cbd-63f8-45ac-a6f8-c79332f0d67b"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/a82fd28d-5989-4e06-a0bb-1a5d859f9e0c/resourceGroups/pins-rg-data-odw-prod-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-prod-uks/bigDataPools/pinssynspodwpr",
				"name": "pinssynspodwpr",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-prod-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodwpr",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Set the notebook parameters"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"tags": [
						"parameters"
					]
				},
				"source": [
					"kv_linked_service=\"ls_kv\"\n",
					"secret_name=''\n",
					"\n",
					"\n",
					"topic_name=''\n",
					"subscription_name=''\n",
					"\n",
					"output_file_name=''"
				],
				"execution_count": 9
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Establish the connection with the Service Bus"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"from pyspark.sql import SparkSession\n",
					"spark = SparkSession.builder.getOrCreate()\n",
					"akv_name=spark.sparkContext.environment.get('keyVaultName', 'get')\n",
					"from notebookutils import mssparkutils\n",
					"from azure.servicebus import ServiceBusClient, ServiceBusMessage\n",
					"\n",
					"conn_str = mssparkutils.credentials.getSecret(akv_name, secret_name, kv_linked_service)\n",
					"servicebus_client = ServiceBusClient.from_connection_string(conn_str=conn_str, logging_enable=True)"
				],
				"execution_count": 10
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Utils"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def convert_json_array_to_csv(json_obj):\n",
					"    def process_json(obj):\n",
					"        if isinstance(obj, dict):\n",
					"            for key, value in obj.items():\n",
					"                obj[key] = process_json(value)\n",
					"            return obj\n",
					"        elif isinstance(obj, list):\n",
					"            return ', '.join(obj)\n",
					"        else:\n",
					"            return obj\n",
					"\n",
					"    return process_json(json_obj)"
				],
				"execution_count": 11
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Receive the new messages"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"try:\n",
					"    import json\n",
					"\n",
					"    new_messages = []\n",
					"\n",
					"\n",
					"    with servicebus_client:\n",
					"        receiver = servicebus_client.get_subscription_receiver(topic_name=topic_name, subscription_name=subscription_name, max_wait_time=5)\n",
					"        with receiver:\n",
					"            received_msgs = receiver.receive_messages(max_wait_time=60, max_message_count=9999999) \n",
					"            for received_msg in received_msgs:\n",
					"                msg = json.loads(str(received_msg))\n",
					"                receiver.complete_message(received_msg)\n",
					"                if isinstance(msg, list):\n",
					"                    for single_msg in msg:\n",
					"                        new_messages.append(convert_json_array_to_csv(single_msg))\n",
					"                elif isinstance(msg, dict):\n",
					"                    new_messages.append(convert_json_array_to_csv(msg))\n",
					"            \n",
					"            receiver.close()\n",
					"            servicebus_client.close()  \n",
					"\n",
					"    if len(new_messages) == 0:\n",
					"        print('No new messages')\n",
					"        mssparkutils.notebook.exit(False)\n",
					"\n",
					"    new_messages = json.dumps(new_messages)\n",
					"    \n",
					"except Exception as e:\n",
					"    print('Exception', e)\n",
					"    mssparkutils.notebook.exit(False)\n",
					""
				],
				"execution_count": 12
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Ingest the new messages in the data lake i.e odw-raw"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from datetime import date\n",
					"\n",
					"storage_account=mssparkutils.notebook.run('/utils/py_utils_get_storage_account')\n",
					"todaysdate = date.today().strftime(\"%Y-%m-%d\")\n",
					"\n",
					"df = spark.read.json(spark.sparkContext.parallelize([new_messages]))\n",
					"\n",
					"output_folder_path = f\"abfss://odw-raw@{storage_account}ServiceBus/{output_file_name}/{todaysdate}/output.csv\"\n",
					"df.repartition(1).write.mode('overwrite').option(\"header\",True).csv(output_folder_path)\n",
					"\n",
					"output_files = mssparkutils.fs.ls(output_folder_path)\n",
					"output_files = [f for f in output_files if f.name.endswith('.csv')]\n",
					"\n",
					"if len(output_files) > 0:\n",
					"    output_file = output_files[0]\n",
					"    mssparkutils.fs.rm(output_folder_path.replace('output', output_file_name), True)\n",
					"    mssparkutils.fs.mv(output_file.path, output_folder_path.replace('output', output_file_name), True)\n",
					"    mssparkutils.fs.rm(output_folder_path, True)\n",
					"\n",
					"mssparkutils.notebook.exit(True)"
				],
				"execution_count": null
			}
		]
	}
}