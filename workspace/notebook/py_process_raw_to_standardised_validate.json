{
	"name": "py_process_raw_to_standardised_validate",
	"properties": {
		"description": "Validate rows from excel to standardised \n",
		"folder": {
			"name": "archive/odw-raw"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw34",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "04e668d2-1688-48e0-b341-22b5b2cc774c"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw34",
				"name": "pinssynspodw34",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw34",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from notebookutils import mssparkutils\n",
					"storage_account=mssparkutils.notebook.run('/utils/py_utils_get_storage_account')"
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"metadata": {
					"tags": [
						"parameters"
					]
				},
				"source": [
					"raw_storage_container = 'abfss://odw-raw@' + storage_account\r\n",
					"workspace_storage_container = 'abfss://odw-workspace@' + storage_account\r\n",
					"standardised_storage_container = 'abfss://odw-standardised@' + storage_account\r\n",
					"delta_lake_database_name = 'odw_standardised_db'"
				],
				"execution_count": 4
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import pyspark.pandas as ps\r\n",
					"from pyspark.sql.functions import count\r\n",
					"\r\n",
					"\r\n",
					"raw_storage_container = 'abfss://odw-raw@' + storage_account\r\n",
					"raw_storage_source_folder ='Fileshare/SAP_HR/2022-08/'\r\n",
					"raw_storage_source_name ='SAPHR_20220831.xlsx'\r\n",
					"raw_storage_folder_path = raw_storage_container   + '/' + raw_storage_source_folder + '/' \r\n",
					"print('raw_storage_folder_path------ '+raw_storage_folder_path)\r\n",
					"\r\n",
					"file_table_mapping = {\"Addresses - 20220831.xlsx\" : \"addresses\", \"HR Absence Data 220831.xlsx\": \"absences\", \r\n",
					"\"HR PC 2022_08.xlsx\":  \"personal_characteristics\", \"Leave Entitlement_20220831.xlsx\": \"leave\", \"SAP_email_20220831.xlsx\" : \"email\",\r\n",
					"\"SAP_Leavers_20220831.xlsx\" : \"leavers\", \"Specialisms - 220831.xlsx\" : \"specialisms\"}\r\n",
					"\r\n",
					"\r\n",
					"def validate_data():\r\n",
					"    print('---Validation started---')\r\n",
					"    for file, table in file_table_mapping.items():\r\n",
					"        try:\r\n",
					"            full_path =raw_storage_folder_path + file\r\n",
					"            print('-----Validating file '+file)\r\n",
					"            df = ps.read_excel(full_path, dtype=str)\r\n",
					"            file_count = len(df.index)\r\n",
					"            sql_df= spark.sql(\"SELECT count(*) FROM odw_standardised_db.\"+table)\r\n",
					"            table_count = sql_df.first()[0]\r\n",
					"\r\n",
					"            if(table_count == file_count):\r\n",
					"                print('------File count and Table counts are equal')\r\n",
					"            else:\r\n",
					"                print('------File count and Table counts are not equal')\r\n",
					"                print('------File Count: '+str(file_count) +' Table Count: '+str(table_count))\r\n",
					"                raise ValueError('File count and Table counts are not equal')\r\n",
					"\r\n",
					"        except ValueError as err:\r\n",
					"            print(err.args)\r\n",
					"    print('---Validation finished---')\r\n",
					"\r\n",
					"\r\n",
					"validate_data()\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					""
				],
				"execution_count": 9
			}
		]
	}
}