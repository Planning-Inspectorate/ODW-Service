{
	"name": "zendesk_harmonised_export",
	"properties": {
		"folder": {
			"name": "odw-harmonised/Zendesk"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "tempsparkpool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "bd779a6c-e993-421f-8225-b089b2aad264"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/tempsparkpool",
				"name": "tempsparkpool",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/tempsparkpool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"from collections.abc import Mapping\r\n",
					"from itertools import chain\r\n",
					"from operator import add\r\n",
					"#ignore FutureWarning messages \r\n",
					"import warnings\r\n",
					"warnings.filterwarnings(\"ignore\", message=\"iteritems is deprecated\")\r\n",
					"from notebookutils import mssparkutils\r\n",
					"from pprint import pprint as pp\r\n",
					"import json\r\n",
					"import pyspark.sql.functions as F \r\n",
					"import pandas as pd\r\n",
					"from pyspark.sql.types import *\r\n",
					"from pyspark.sql.functions import lit\r\n",
					"from pyspark.sql.functions import row_number\r\n",
					"from pyspark.sql.functions import *\r\n",
					"from pyspark.sql.window import Window"
				],
				"execution_count": 55
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%run /utils/py_mount_storage"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"ms_comments": [
						{
							"threadId": "85770421-1f75-4461-b831-0cc4944d7cc9",
							"text": "parameterise for environment",
							"status": "resolved",
							"user": {
								"name": "Pakwashee, Abdullah",
								"idType": "aad"
							},
							"createdDateUTC": 1685110159242,
							"modifiedDateUTC": 1685544441197,
							"replies": []
						}
					]
				},
				"source": [
					"from notebookutils import mssparkutils\r\n",
					"### mount the data lake storage in Synapse to the Synapse File Mount API\r\n",
					"jobId = mssparkutils.env.getJobId()\r\n",
					"storage_acc_name = spark.sparkContext.environment.get('dataLakeAccountName', 'get')\r\n",
					"mount_storage(path=\"abfss://odw-raw@\"+storage_acc_name+\".dfs.core.windows.net/ZenDesk/Export/\", mount_point=\"/zendesk_items\")"
				],
				"execution_count": 57
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import json\r\n",
					"import jsonschema\r\n",
					"from jsonschema import validate\r\n",
					"list_with_all_zendesk_dict = []\r\n",
					"def read_zendesk():\r\n",
					"    for i in range(2918):\r\n",
					"            with open(f\"/synfs/{jobId}/zendesk_items/output_{i}.json\", \"r\",encoding='utf-8') as big_json:\r\n",
					"                zendesk_dict = json.load(big_json)\r\n",
					"                list_with_all_zendesk_dict.append(zendesk_dict)\r\n",
					"    return list_with_all_zendesk_dict\r\n",
					"zendesk_dict = read_zendesk()"
				],
				"execution_count": 58
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"ms_comments": [
						{
							"threadId": "437e3dbd-79c9-4db6-bfb3-2bce1e8ea056",
							"text": "let's review this once we fix the logic app",
							"status": "active",
							"user": {
								"name": "Pakwashee, Abdullah",
								"idType": "aad"
							},
							"createdDateUTC": 1685111080736,
							"modifiedDateUTC": 1685111080736,
							"replies": []
						},
						{
							"threadId": "3bdf619d-6e98-4047-8495-94d579792d6b",
							"text": "ticket_id",
							"status": "resolved",
							"user": {
								"name": "Pakwashee, Abdullah",
								"idType": "aad"
							},
							"createdDateUTC": 1685110934263,
							"modifiedDateUTC": 1685436289130,
							"replies": [
								{
									"replyId": "1d05f795-3ab9-43fa-b597-cb57357343c0",
									"text": "consistency in naming convention- use ticket everywhere",
									"user": {
										"name": "Pakwashee, Abdullah",
										"idType": "aad"
									},
									"createdDateUTC": 1685110952830,
									"modifiedDateUTC": 1685110952830
								}
							]
						},
						{
							"threadId": "99e88483-8d34-41b4-882e-7e79a22f8872",
							"text": "needs to be delta",
							"status": "active",
							"user": {
								"name": "Pakwashee, Abdullah",
								"idType": "aad"
							},
							"createdDateUTC": 1685111128426,
							"modifiedDateUTC": 1685111128426,
							"replies": [
								{
									"replyId": "5f78509d-d5f5-4035-86a1-97ffa3e8c34a",
									"text": "let's debug it if it can't be delta",
									"user": {
										"name": "Pakwashee, Abdullah",
										"idType": "aad"
									},
									"createdDateUTC": 1685111147234,
									"modifiedDateUTC": 1685111147234
								}
							]
						}
					],
					"ms_comment_ranges": {
						"3bdf619d-6e98-4047-8495-94d579792d6b": {
							"text": " the",
							"start": {
								"line": 13,
								"column": 73
							},
							"end": {
								"line": 13,
								"column": 77
							}
						},
						"437e3dbd-79c9-4db6-bfb3-2bce1e8ea056": {
							"text": " comments_and_attachments():",
							"start": {
								"line": 1,
								"column": 4
							},
							"end": {
								"line": 1,
								"column": 32
							}
						}
					}
				},
				"source": [
					"def comments_and_attachments():\r\n",
					"    FlatCommentsDictList=[]\r\n",
					"    FlatCommentsDictAttachmentsList=[]\r\n",
					"    for i in range(2918):\r\n",
					"        with open(f\"/synfs/{jobId}/zendesk_items/output_{i}.json\", \"r\",encoding='utf-8') as big_json:\r\n",
					"            zendesk_dict = json.load(big_json)\r\n",
					"            CommentsListOfDict = zendesk_dict['comments']\r\n",
					"            for CommentsDict in CommentsListOfDict:\r\n",
					"                #adding the file id to the dictionary before converting into df and then table\r\n",
					"                CommentsDict['ticket_id']=zendesk_dict['id']\r\n",
					"                #go through all attachments within the comments column \r\n",
					"                for attachments in CommentsDict['attachments']:\r\n",
					"                    #add the comments id and file id so we can late join the tables on them\r\n",
					"                    attachments['ticket_id']=zendesk_dict['id']\r\n",
					"                    attachments['comment_id']=CommentsDict['id']\r\n",
					"                    FlatCommentsDictAttachmentsList.append(attachments)\r\n",
					"        #delete the attachment column because we already stored it in a list which will be made in a table \r\n",
					"        del CommentsDict['attachments']\r\n",
					"        #flatten the comments column so we can make a table out of it \r\n",
					"        FlatCommentsDictList.append(CommentsDict)\r\n",
					"    #create a dataframe out of all comments of a file to put them in a table \r\n",
					"    dfFlatCommentsDictList =pd.DataFrame(FlatCommentsDictList)\r\n",
					"    #create a dataframe out of all commects_attachmenst of a file to create and store them in a table \r\n",
					"    dfFlatCommentsDictAttachmentsList = pd.DataFrame(FlatCommentsDictAttachmentsList)\r\n",
					"    # dfFlatCommentsDictList.via_source_to_email_ccs = dfFlatCommentsDictList.via_source_to_email_ccs.astype(str)\r\n",
					"    sFlatCommentsDictList = spark.createDataFrame(dfFlatCommentsDictList)\r\n",
					"    spark.sql(f\"drop table if exists odw_harmonised_db.zendesk_comments;\")\r\n",
					"    sFlatCommentsDictList.write.saveAsTable(\"odw_harmonised_db.zendesk_comments\")\r\n",
					"    spark.sql(f\"drop table if exists odw_harmonised_db.zendesk_comments_attachments;\")\r\n",
					"    sparkDF=spark.createDataFrame(dfFlatCommentsDictAttachmentsList)\r\n",
					"    partition = Window.partitionBy(\"SourceSystemID\").orderBy('id')\r\n",
					"    sparkDF = sparkDF.withColumn(\"SourceSystemID\",lit(6)).withColumn('IngestionDate', F.current_timestamp()).withColumn('ValidTo', lit(\"NULL\")).withColumn('IsActive', lit(\"Y\")).withColumn('RowID', row_number().over(partition))\r\n",
					"\r\n",
					"    sparkDF.write.format('delta').saveAsTable(\"odw_harmonised_db.zendesk_comments_attachments\")      \r\n",
					"comments_and_attachments()\r\n",
					""
				],
				"execution_count": 59
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"ms_comments": [
						{
							"threadId": "52e648f1-d6c1-4fdb-a508-ed450b8ca1cb",
							"text": "let's explore this",
							"status": "active",
							"user": {
								"name": "Pakwashee, Abdullah",
								"idType": "aad"
							},
							"createdDateUTC": 1685111258127,
							"modifiedDateUTC": 1685111258127,
							"replies": []
						}
					],
					"ms_comment_ranges": {
						"52e648f1-d6c1-4fdb-a508-ed450b8ca1cb": {
							"text": "from pyspark.sql.types import StructType, StructField, String",
							"start": {
								"line": 24,
								"column": 5
							},
							"end": {
								"line": 24,
								"column": 66
							}
						}
					}
				},
				"source": [
					"def assignee_table():\r\n",
					"    assigneelist=[]\r\n",
					"    for i in range(2918):\r\n",
					"            with open(f\"/synfs/{jobId}/zendesk_items/output_{i}.json\", \"r\",encoding='utf-8') as big_json:\r\n",
					"                zendesk_dict = json.load(big_json)\r\n",
					"                AssigneeDict= zendesk_dict['assignee']\r\n",
					"                if AssigneeDict is None:\r\n",
					"                    continue\r\n",
					"                else:\r\n",
					"                    AssigneeDict['ticket_id']=zendesk_dict['id']\r\n",
					"                    assigneelist.append(AssigneeDict)\r\n",
					"            \r\n",
					"    \r\n",
					"    dfassigneelist=pd.DataFrame(assigneelist)\r\n",
					"    dfassigneelist.id = dfassigneelist.id.astype(str)\r\n",
					"    dfassigneelist.locale_id = dfassigneelist.locale_id.astype(str)\r\n",
					"    dfassigneelist.organization_id = dfassigneelist.organization_id.astype(str)\r\n",
					"    dfassigneelist.role_type = dfassigneelist.role_type.astype(str)\r\n",
					"    dfassigneelist.custom_role_id = dfassigneelist.custom_role_id.astype(str)\r\n",
					"    dfassigneelist.organization_id = dfassigneelist.organization_id.astype(str)\r\n",
					"    dfassigneelist.default_group_id = dfassigneelist.default_group_id.astype(str)\r\n",
					"\r\n",
					"\r\n",
					"    from pyspark.sql.types import StructType, StructField, StringType\r\n",
					"    schema = StructType([StructField(\"foo\", StringType(), True)])\r\n",
					"    dfassigneelist = dfassigneelist.dropna(axis='columns', how='all') # Drops columns with all NA values\r\n",
					"\r\n",
					"    sassigneelist = spark.createDataFrame(dfassigneelist)\r\n",
					"    partition = Window.partitionBy(\"SourceSystemID\").orderBy('ticket_id')\r\n",
					"    sassigneelist = sassigneelist.withColumn(\"SourceSystemID\",lit(6)).withColumn('IngestionDate', F.current_timestamp()).withColumn('ValidTo', lit(\"NULL\")).withColumn('IsActive', lit(\"Y\")).withColumn('RowID', row_number().over(partition))\r\n",
					"    spark.sql(f\"drop table if exists odw_harmonised_db.zendesk_assignee;\")\r\n",
					"    sassigneelist.write.format('delta').saveAsTable(\"odw_harmonised_db.zendesk_assignee\")\r\n",
					"\r\n",
					"assignee_table()"
				],
				"execution_count": 60
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def submitter_table():\r\n",
					"    submitterlist=[]\r\n",
					"    for i in range(2918):\r\n",
					"            with open(f\"/synfs/{jobId}/zendesk_items/output_{i}.json\", \"r\",encoding='utf-8') as big_json:\r\n",
					"                zendesk_dict = json.load(big_json)\r\n",
					"                submitterDict= zendesk_dict['submitter']\r\n",
					"                if submitterDict is None:\r\n",
					"                    continue\r\n",
					"                else:\r\n",
					"                    submitterDict['ticket_id']=zendesk_dict['id']\r\n",
					"                    submitterlist.append(submitterDict)\r\n",
					"            \r\n",
					"    \r\n",
					"    dfsubmitterlist=pd.DataFrame(submitterlist)\r\n",
					"    dfsubmitterlist.id = dfsubmitterlist.id.astype(str)\r\n",
					"    dfsubmitterlist.locale_id = dfsubmitterlist.locale_id.astype(str)\r\n",
					"    dfsubmitterlist.organization_id = dfsubmitterlist.organization_id.astype(str)\r\n",
					"    dfsubmitterlist.role_type = dfsubmitterlist.role_type.astype(str)\r\n",
					"    dfsubmitterlist.custom_role_id = dfsubmitterlist.custom_role_id.astype(str)\r\n",
					"    dfsubmitterlist.organization_id = dfsubmitterlist.organization_id.astype(str)\r\n",
					"    dfsubmitterlist.default_group_id = dfsubmitterlist.default_group_id.astype(str)\r\n",
					"\r\n",
					"\r\n",
					"    from pyspark.sql.types import StructType, StructField, StringType\r\n",
					"    schema = StructType([StructField(\"foo\", StringType(), True)])\r\n",
					"    dfsubmitterlist = dfsubmitterlist.dropna(axis='columns', how='all') # Drops columns with all NA values\r\n",
					"\r\n",
					"    ssubmitterlist = spark.createDataFrame(dfsubmitterlist)\r\n",
					"    partition = Window.partitionBy(\"SourceSystemID\").orderBy('id')\r\n",
					"    ssubmitterlist = ssubmitterlist.withColumn(\"SourceSystemID\",lit(6)).withColumn('IngestionDate', F.current_timestamp()).withColumn('ValidTo', lit(\"NULL\")).withColumn('IsActive', lit(\"Y\")).withColumn('RowID', row_number().over(partition))\r\n",
					"\r\n",
					"    spark.sql(f\"drop table if exists odw_harmonised_db.zendesk_submitter;\")\r\n",
					"    ssubmitterlist.write.format('delta').saveAsTable(\"odw_harmonised_db.zendesk_submitter\")\r\n",
					"\r\n",
					"submitter_table()"
				],
				"execution_count": 61
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def requester_table():\r\n",
					"    requesterlist=[]\r\n",
					"    for i in range(2918):\r\n",
					"            with open(f\"/synfs/{jobId}/zendesk_items/output_{i}.json\", \"r\",encoding='utf-8') as big_json:\r\n",
					"                zendesk_dict = json.load(big_json)\r\n",
					"                requesterDict= zendesk_dict['requester']\r\n",
					"                if requesterDict is None:\r\n",
					"                    continue\r\n",
					"                else:\r\n",
					"                    requesterDict['ticket_id']=zendesk_dict['id']\r\n",
					"                    requesterlist.append(requesterDict)\r\n",
					"            \r\n",
					"    \r\n",
					"    dfrequesterlist=pd.DataFrame(requesterlist)\r\n",
					"    dfrequesterlist.id = dfrequesterlist.id.astype(str)\r\n",
					"    dfrequesterlist.locale_id = dfrequesterlist.locale_id.astype(str)\r\n",
					"    dfrequesterlist.organization_id = dfrequesterlist.organization_id.astype(str)\r\n",
					"    dfrequesterlist.role_type = dfrequesterlist.role_type.astype(str)\r\n",
					"    dfrequesterlist.custom_role_id = dfrequesterlist.custom_role_id.astype(str)\r\n",
					"    dfrequesterlist.organization_id = dfrequesterlist.organization_id.astype(str)\r\n",
					"    dfrequesterlist.default_group_id = dfrequesterlist.default_group_id.astype(str)\r\n",
					"\r\n",
					"\r\n",
					"    from pyspark.sql.types import StructType, StructField, StringType\r\n",
					"    schema = StructType([StructField(\"foo\", StringType(), True)])\r\n",
					"    dfrequesterlist = dfrequesterlist.dropna(axis='columns', how='all') # Drops columns with all NA values\r\n",
					"\r\n",
					"    srequesterlist = spark.createDataFrame(dfrequesterlist)\r\n",
					"    partition = Window.partitionBy(\"SourceSystemID\").orderBy('id')\r\n",
					"    srequesterlist = srequesterlist.withColumn(\"SourceSystemID\",lit(6)).withColumn('IngestionDate', F.current_timestamp()).withColumn('ValidTo', lit(\"NULL\")).withColumn('IsActive', lit(\"Y\")).withColumn('RowID', row_number().over(partition))\r\n",
					"    spark.sql(f\"drop table if exists odw_harmonised_db.zendesk_requester;\")\r\n",
					"    srequesterlist.write.format('delta').saveAsTable(\"odw_harmonised_db.zendesk_requester\")\r\n",
					"\r\n",
					"requester_table()"
				],
				"execution_count": 62
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def collaborator_table():\r\n",
					"    collaboratorlist=[]\r\n",
					"    for i in range(2918):\r\n",
					"            with open(f\"/synfs/{jobId}/zendesk_items/output_{i}.json\", \"r\",encoding='utf-8') as big_json:\r\n",
					"                zendesk_dict = json.load(big_json)\r\n",
					"                collaboratorDict= zendesk_dict['collaborator']\r\n",
					"                if collaboratorDict is None:\r\n",
					"                    continue\r\n",
					"                else:\r\n",
					"                    for dictionary in collaboratorDict:\r\n",
					"                        dictionary['ticket_id']=zendesk_dict['id']\r\n",
					"                        collaboratorlist.append(dictionary)\r\n",
					"            \r\n",
					"    \r\n",
					"    dfcollaboratorlist=pd.DataFrame(collaboratorlist)\r\n",
					"    dfcollaboratorlist.id = dfcollaboratorlist.id.astype(str)\r\n",
					"    dfcollaboratorlist.locale_id = dfcollaboratorlist.locale_id.astype(str)\r\n",
					"    dfcollaboratorlist.organization_id = dfcollaboratorlist.organization_id.astype(str)\r\n",
					"    dfcollaboratorlist.role_type = dfcollaboratorlist.role_type.astype(str)\r\n",
					"    dfcollaboratorlist.custom_role_id = dfcollaboratorlist.custom_role_id.astype(str)\r\n",
					"    dfcollaboratorlist.organization_id = dfcollaboratorlist.organization_id.astype(str)\r\n",
					"    dfcollaboratorlist.default_group_id = dfcollaboratorlist.default_group_id.astype(str)\r\n",
					"\r\n",
					"\r\n",
					"    from pyspark.sql.types import StructType, StructField, StringType\r\n",
					"    schema = StructType([StructField(\"foo\", StringType(), True)])\r\n",
					"    dfcollaboratorlist = dfcollaboratorlist.dropna(axis='columns', how='all') # Drops columns with all NA values\r\n",
					"\r\n",
					"    scollaboratorlist = spark.createDataFrame(dfcollaboratorlist)\r\n",
					"    partition = Window.partitionBy(\"SourceSystemID\").orderBy('id')\r\n",
					"    scollaboratorlist = scollaboratorlist.withColumn(\"SourceSystemID\",lit(6)).withColumn('IngestionDate', F.current_timestamp()).withColumn('ValidTo', lit(\"NULL\")).withColumn('IsActive', lit(\"Y\")).withColumn('RowID', row_number().over(partition))\r\n",
					"   \r\n",
					"    spark.sql(f\"drop table if exists odw_harmonised_db.zendesk_collaborator;\")\r\n",
					"    scollaboratorlist.write.format('delta').saveAsTable(\"odw_harmonised_db.zendesk_collaborator\")\r\n",
					"\r\n",
					"collaborator_table()"
				],
				"execution_count": 63
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"ms_comments": [
						{
							"threadId": "16e9b02f-2b18-4cbe-8e09-52277ee4425e",
							"text": "Add ingested_datetime",
							"status": "active",
							"user": {
								"name": "Pakwashee, Abdullah",
								"idType": "aad"
							},
							"createdDateUTC": 1685110739841,
							"modifiedDateUTC": 1685110739841,
							"replies": []
						},
						{
							"threadId": "92bcd456-8b3a-4d69-85ba-69d3624637e3",
							"text": "Change 7 tables to harmonised, delete the tables you don't need from standardised",
							"status": "resolved",
							"user": {
								"name": "Pakwashee, Abdullah",
								"idType": "aad"
							},
							"createdDateUTC": 1685110888188,
							"modifiedDateUTC": 1685435903349,
							"replies": []
						}
					],
					"ms_comment_ranges": {
						"16e9b02f-2b18-4cbe-8e09-52277ee4425e": {
							"text": "Comments",
							"start": {
								"line": 1,
								"column": 10
							},
							"end": {
								"line": 1,
								"column": 18
							}
						},
						"92bcd456-8b3a-4d69-85ba-69d3624637e3": {
							"text": "Comments",
							"start": {
								"line": 1,
								"column": 10
							},
							"end": {
								"line": 1,
								"column": 18
							}
						}
					}
				},
				"source": [
					"#General Comments\r\n",
					"# spark.sql(f\"drop table if exists odw_standardised_db.zendesk_collaborator;\")\r\n",
					"# spark.sql(f\"drop table if exists odw_standardised_db.zendesk_requester;\")\r\n",
					"# spark.sql(f\"drop table if exists odw_standardised_db.zendesk_submitter;\")\r\n",
					"# spark.sql(f\"drop table if exists odw_standardised_db.zendesk_assignee;\")\r\n",
					"# spark.sql(f\"drop table if exists odw_standardised_db.zendesk_comments_attachments;\")\r\n",
					"# spark.sql(f\"drop table if exists odw_standardised_db.zendesk_comments;\")\r\n",
					"# spark.sql(f\"drop table if exists odw_standardised_db.zendesk_fields_id_value;\")\r\n",
					"# spark.sql(f\"drop table if exists odw_standardised_db.zendesk_custom_fields_id_value;\")\r\n",
					"# spark.sql(f\"drop table if exists odw_standardised_db.zendesk_shows;\")"
				],
				"execution_count": 64
			}
		]
	}
}