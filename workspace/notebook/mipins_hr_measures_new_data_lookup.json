{
	"name": "mipins_hr_measures_new_data_lookup",
	"properties": {
		"folder": {
			"name": "odw-harmonised/HR-Cube"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "39a71043-259c-4e19-9faf-dfc119628318"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw",
				"name": "pinssynspodw",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import pandas as pd\n",
					"from datetime import datetime\n",
					"from pyspark.sql import SparkSession\n",
					"from notebookutils import mssparkutils\n",
					"spark = SparkSession.builder.getOrCreate()"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"tags": [
						"parameters"
					]
				},
				"source": [
					"month=datetime.now().month\n",
					"year=datetime.now().year"
				],
				"execution_count": 40
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"expected_from = datetime(year, month, 1).strftime('%Y-%m-%d')\n",
					"report_month_end_date = (pd.to_datetime(expected_from) -  pd.to_timedelta(1, unit='d')).strftime(\"%Y-%m-%d\")\n",
					"\n",
					"# check if latest HR measures report for the month has been generated\n",
					"df = spark.sql(\"select count(*) as count from odw_curated_db.mipins_hr_measures where cast(ReportMonthEndDate as date) ='\"+report_month_end_date+\"'\");\n",
					"if df.first().asDict()['count'] > 0:\n",
					"    print(\"Data already exists for the ReportMonthEndDate \" + report_month_end_date)\n",
					"    mssparkutils.notebook.exit(False)\n",
					"\n",
					"# check if the latest data is in the standardised tables\n",
					"df = spark.sql(\"select count(*) as count from odw_standardised_db.hr_absences where expected_from ='\"+expected_from+\"'\");\n",
					"absences_count = df.first().asDict()['count']\n",
					"\n",
					"df = spark.sql(\"select count(*) as count from odw_standardised_db.hr_leave where expected_from ='\"+expected_from+\"'\");\n",
					"leave_count = df.first().asDict()['count']\n",
					"\n",
					"df = spark.sql(\"select count(*) as count from odw_standardised_db.hr_saphr where expected_from ='\"+expected_from+\"'\");\n",
					"saphr_count = df.first().asDict()['count']\n",
					"\n",
					"if saphr_count == 0 or leave_count == 0 or absences_count == 0:\n",
					"    print(\"Data doesn't exist in standardised tables for \" + expected_from)\n",
					"    mssparkutils.notebook.exit(False)\n",
					"\n",
					"mssparkutils.notebook.exit(True)"
				],
				"execution_count": 41
			}
		]
	}
}