{
	"name": "appeal_document",
	"properties": {
		"folder": {
			"name": "odw-curated"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "harrisonPool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "39b29914-e428-4e76-8da9-0a9c7cc4bdf4"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/harrisonPool",
				"name": "harrisonPool",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/harrisonPool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Import Packages"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.sql.functions import *\n",
					"from pyspark.sql.types import *\n",
					"from pyspark.sql import DataFrame\n",
					"import json"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%run utils/py_logging_decorator"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"db_name: str = \"odw_curated_db\"\n",
					"entity_name: str = \"appeal-document\"\n",
					"table_name: str = \"odw_curated_db.appeal_document\""
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Create a view for the data, joining harmonised tables where necessary"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": false
				},
				"source": [
					"df = spark.sql(\"\"\"\n",
					"\n",
					"SELECT DISTINCT \n",
					"    doc.documentId,\n",
					"    doc.caseId,\n",
					"    doc.caseReference,\n",
					"    doc.version,\n",
					"    doc.filename,\n",
					"    doc.originalFilename,\n",
					"    doc.size,\n",
					"    COALESCE(doc.mime, '') AS mime,\n",
					"    COALESCE(doc.documentURI, '') AS documentURI,\n",
					"    doc.publishedDocumentURI,\n",
					"    doc.virusCheckStatus,\n",
					"    doc.fileMD5,\n",
					"    doc.dateCreated,\n",
					"    doc.dateReceived,\n",
					"    doc.datePublished,\n",
					"    doc.lastModified,\n",
					"    CASE\n",
					"        WHEN doc.caseType = 'Planning Listed Building and Conservation Area Appeal (Y)' THEN 'Y'\n",
					"        WHEN doc.caseType = 'Lawful Development Certificate Appeal' THEN 'X'\n",
					"        WHEN doc.caseType = 'Planning Obligation Appeal' THEN 'Q'\n",
					"        WHEN doc.caseType = 'Commercial (CAS) Appeal' THEN 'Z'\n",
					"        WHEN doc.caseType = 'Enforcement Listed Building and Conservation Area Appeal' THEN 'F'\n",
					"        WHEN doc.caseType = 'Advertisement Appeal' THEN 'H'\n",
					"        WHEN doc.caseType = 'Planning Appeal (A)' THEN 'W'\n",
					"        WHEN doc.caseType = 'Enforcement Notice Appeal' THEN 'C'\n",
					"        WHEN doc.caseType = 'Discontinuance Notice Appeal' THEN 'G'\n",
					"        WHEN doc.caseType = 'Community Infrastructure Levy' THEN 'L'\n",
					"        WHEN doc.caseType = 'Planning Appeal (W)' THEN 'W'\n",
					"        WHEN doc.caseType = 'Call-In Application' THEN 'V'\n",
					"        WHEN doc.caseType = 'Affordable Housing Obligation Appeal' THEN 'S'\n",
					"        WHEN doc.caseType = 'Householder (HAS) Appeal' THEN 'D'\n",
					"        ELSE doc.caseType\n",
					"    END\n",
					"    AS caseType,\n",
					"    doc.redactedStatus,\n",
					"    doc.documentType,\n",
					"    doc.sourceSystem,\n",
					"    doc.origin,\n",
					"    doc.owner,\n",
					"    doc.author,\n",
					"    doc.description,\n",
					"    doc.caseStage,\n",
					"    doc.horizonFolderId\n",
					"    \n",
					"FROM odw_harmonised_db.appeal_document as doc\n",
					"WHERE doc.IsActive = 'Y'\n",
					"\"\"\"\n",
					")"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Define schema"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"schema = mssparkutils.notebook.run(\"py_create_spark_schema\", 30, {\"db_name\": db_name, \"entity_name\": entity_name})\n",
					"spark_schema = StructType.fromJson(json.loads(schema))"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Create DataFrame with the correct schema"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"data = spark.createDataFrame(df.rdd, schema=spark_schema)"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Write DataFrame to table"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"logInfo(f\"Writing to {table_name}\")\n",
					"df.write.mode(\"overwrite\").format(\"parquet\").saveAsTable(table_name)\n",
					"logInfo(f\"Written to {table_name}\")"
				],
				"execution_count": null
			}
		]
	}
}