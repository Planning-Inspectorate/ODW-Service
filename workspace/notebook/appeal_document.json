{
	"name": "appeal_document",
	"properties": {
		"folder": {
			"name": "odw-curated"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "037a12f0-f6e6-4597-b1a0-d442e359b1b2"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw",
				"name": "pinssynspodw",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.sql.functions import *\n",
					"from pyspark.sql.types import *"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Create a view for the data, joining harmonised tables where necessary"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"\n",
					"CREATE OR REPLACE VIEW odw_curated_db.vw_appeal_document\n",
					"\n",
					"AS\n",
					"\n",
					"SELECT DISTINCT \n",
					"    doc.documentId,\n",
					"    doc.caseId,\n",
					"    doc.caseReference,\n",
					"    doc.version,\n",
					"    doc.filename,\n",
					"    doc.originalFilename,\n",
					"    doc.size,\n",
					"    COALESCE(doc.mime, '') AS mime,\n",
					"    COALESCE(doc.documentURI, '') AS documentURI,\n",
					"    doc.publishedDocumentURI,\n",
					"    doc.virusCheckStatus,\n",
					"    doc.fileMD5,\n",
					"    doc.dateCreated,\n",
					"    doc.dateReceived,\n",
					"    doc.datePublished,\n",
					"    doc.lastModified,\n",
					"    CASE\n",
					"        WHEN doc.caseType = 'Planning Listed Building and Conservation Area Appeal (Y)' THEN 'Y'\n",
					"        WHEN doc.caseType = 'Lawful Development Certificate Appeal' THEN 'X'\n",
					"        WHEN doc.caseType = 'Planning Obligation Appeal' THEN 'Q'\n",
					"        WHEN doc.caseType = 'Commercial (CAS) Appeal' THEN 'Z'\n",
					"        WHEN doc.caseType = 'Enforcement Listed Building and Conservation Area Appeal' THEN 'F'\n",
					"        WHEN doc.caseType = 'Advertisement Appeal' THEN 'H'\n",
					"        WHEN doc.caseType = 'Planning Appeal (A)' THEN 'W'\n",
					"        WHEN doc.caseType = 'Enforcement Notice Appeal' THEN 'C'\n",
					"        WHEN doc.caseType = 'Discontinuance Notice Appeal' THEN 'G'\n",
					"        WHEN doc.caseType = 'Community Infrastructure Levy' THEN 'L'\n",
					"        WHEN doc.caseType = 'Planning Appeal (W)' THEN 'W'\n",
					"        WHEN doc.caseType = 'Call-In Application' THEN 'V'\n",
					"        WHEN doc.caseType = 'Affordable Housing Obligation Appeal' THEN 'S'\n",
					"        WHEN doc.caseType = 'Householder (HAS) Appeal' THEN 'D'\n",
					"        ELSE doc.caseType\n",
					"    END\n",
					"    AS caseType,\n",
					"    doc.redactedStatus,\n",
					"    doc.documentType,\n",
					"    doc.sourceSystem,\n",
					"    doc.origin,\n",
					"    doc.owner,\n",
					"    doc.author,\n",
					"    doc.description,\n",
					"    doc.caseStage,\n",
					"    doc.horizonFolderId\n",
					"    \n",
					"FROM odw_harmonised_db.appeal_document as doc\n",
					"LEFT JOIN odw_curated_db.nsip_data as proj\n",
					"ON doc.caseReference = proj.caseReference\n",
					"WHERE doc.IsActive = 'Y'"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Create a DataFrame of the data from the view"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"data: DataFrame = spark.sql(\"SELECT * FROM odw_curated_db.vw_appeal_document\")"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Specify the schema for the data, taken from the curated table which has already been created in advance from the data model"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"schema: StructType = spark.table(\"odw_curated_db.appeal_document\").schema"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Cast all field data types in the data to the data types from the curated table schema\n",
					"\n",
					"This is necessary because the view generated above is joining harmonised tables, many of which are sourced from Horizon and will have a different schema to the final table and fields will have different data types. Therefore, taking the curated schema as defined in thr data model and casting all fields correctly, ensures accuracy."
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df: DataFrame = data.select(\n",
					"    *[\n",
					"        col(field.name).cast(field.dataType).alias(field.name)\n",
					"        for field in schema.fields\n",
					"    ]\n",
					")"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Print the schema as a visual check"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df.printSchema()"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Write the data to the curated table"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df.write.mode(\"overwrite\").saveAsTable(\"odw_curated_db.appeal_document\")"
				],
				"execution_count": null
			}
		]
	}
}