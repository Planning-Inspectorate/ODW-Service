{
	"name": "document_metadata_appeals",
	"properties": {
		"folder": {
			"name": "odw-curated"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "4d4d4647-b59f-457b-9783-61227773b3d2"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw",
				"name": "pinssynspodw",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.sql.functions import *\r\n",
					"from pyspark.sql.types import *"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Create a view for the data, joining harmonised tables where necessary"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"\n",
					"CREATE OR REPLACE VIEW odw_curated_db.vw_appeals_document_metadata\n",
					"\n",
					"AS\n",
					"\n",
					"SELECT DISTINCT \n",
					"ADM.documentId\t                        AS documentId,\n",
					"ADM.caseId          \t                AS caseId,\n",
					"ADM.caseReference\t                    AS caseReference,\n",
					"ADM.Version                             AS version,\n",
					"ADM.filename\t                        AS filename,\n",
					"ADM.filename\t                        AS originalFilename,\n",
					"ADM.size            \t                AS size,\n",
					"ADM.mime\t                            AS mime,\n",
					"ADM.DocumentURI\t                        AS documentURI,\n",
					"ADM.DocumentURI\t\t                    AS publishedDocumentURI,\n",
					"ADM.virusCheckStatus\t                AS virusCheckStatus,\n",
					"ADM.fileMd5\t                            AS fileMD5,\n",
					"ADM.dateCreated                 \t    AS dateCreated,\n",
					"ADM.dateReceived                        AS dateReceived,\n",
					"ADM.lastModified                \t    AS lastModified,\n",
					"LOWER(ADM.caseType)\t                    AS caseType,\n",
					"CASE\n",
					"    WHEN ADM.redactedStatus = ' '   \n",
					"    THEN '-1'\n",
					"    ELSE ADM.redactedStatus                \n",
					"END                                     AS redactedStatus,\n",
					"CASE\n",
					"    WHEN ADM.PublishedStatus = 'Depublished'\n",
					"    THEN 'unpublished'\n",
					"    ELSE REPLACE(\n",
					"        LOWER(ADM.PublishedStatus),\n",
					"        ' ',\n",
					"        '_')\n",
					"END                  \t                AS publishedStatus,\n",
					"ADM.DatePublished                   \tAS datePublished,\n",
					"ADM.DocumentType\t                    AS documentType,\n",
					"'-1'\t                                AS securityClassification,\n",
					"ADM.SourceSystem\t                    AS sourceSystem,\n",
					"CASE\n",
					"    WHEN ADM.origin  = ' '\n",
					"    THEN '-1'\n",
					"    ELSE ADM.origin\n",
					"END\t                                    AS origin,\n",
					"ADM.owner                               AS owner,\n",
					"ADM.Author\t                            AS author,\n",
					"ADM.description\t                        AS description,\n",
					"CASE\n",
					"    WHEN ADM.caseStage = \"Developer's Application\"\n",
					"    THEN 'developers_application'\n",
					"    WHEN ADM.caseStage = 'Post decision'\n",
					"    THEN 'post_decision'\n",
					"    ELSE LOWER(ADM.caseStage)\t            \n",
					"END                                     AS caseStage,\n",
					"ADM.horizonFolderId\t                    AS horizonFolderId,\n",
					"'-1'\t                                AS transcriptId\t\n",
					"\n",
					"FROM odw_harmonised_db.appeals_document_metadata AS ADM\n",
					"WHERE ADM.IsActive = 'Y'"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Create a DataFrame of the data from the view"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"data: DataFrame = spark.sql(\"SELECT * FROM odw_curated_db.vw_appeals_document_metadata\")"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Specify the schema for the data, taken from the curated table which has already been created in advance from the data model"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"schema: StructType = spark.table(\"odw_curated_db.appeal_document\").schema"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Cast all field data types in the data to the data types from the curated table schema\r\n",
					"\r\n",
					"This is necessary because the view generated above is joining harmonised tables, many of which are sourced from Horizon and will have a different schema to the final table and fields will have different data types. Therefore, taking the curated schema as defined in thr data model and casting all fields correctly, ensures accuracy."
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df: DataFrame = data.select(\r\n",
					"    *[\r\n",
					"        col(field.name).cast(field.dataType).alias(field.name)\r\n",
					"        for field in schema.fields\r\n",
					"    ]\r\n",
					")"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Print the schema as a visual check"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df.printSchema()"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Write the data to the curated table"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df.write.mode(\"overwrite\").saveAsTable(\"odw_curated_db.appeal_document\")"
				],
				"execution_count": null
			}
		]
	}
}