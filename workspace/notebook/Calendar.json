{
	"name": "Calendar",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "aaf48bc5-7f88-4fd9-b88f-e262814090dc"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw",
				"name": "pinssynspodw",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"from pyspark.sql import SparkSession\r\n",
					"spark = SparkSession.builder.getOrCreate()\r\n",
					"from pyspark.sql.functions import explode, sequence, to_date\r\n",
					"\r\n",
					"beginDate = '2000-01-01'\r\n",
					"endDate = '2050-12-31'\r\n",
					"\r\n",
					"(\r\n",
					"  spark.sql(f\"select explode(sequence(to_date('{beginDate}'), to_date('{endDate}'), interval 1 day)) as calendarDate\")\r\n",
					"    .createOrReplaceTempView('dates')\r\n",
					")"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql  \r\n",
					"SELECT * from dates"
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"select\r\n",
					"  year(calendarDate) * 10000 + month(calendarDate) * 100 + day(calendarDate) as dateInt,\r\n",
					"  CalendarDate,\r\n",
					"  year(calendarDate) AS CalendarYear,\r\n",
					"  date_format(calendarDate, 'MMMM') as CalendarMonth,\r\n",
					"  month(calendarDate) as MonthOfYear,\r\n",
					"  date_format(calendarDate, 'EEEE') as CalendarDay,\r\n",
					"  dayofweek(calendarDate) AS DayOfWeek,\r\n",
					"  weekday(calendarDate) + 1 as DayOfWeekStartMonday,\r\n",
					"  case\r\n",
					"    when weekday(calendarDate) < 5 then 'Y'\r\n",
					"    else 'N'\r\n",
					"  end as IsWeekDay,\r\n",
					"  dayofmonth(calendarDate) as DayOfMonth,\r\n",
					"  case\r\n",
					"    when calendarDate = last_day(calendarDate) then 'Y'\r\n",
					"    else 'N'\r\n",
					"  end as IsLastDayOfMonth,\r\n",
					"  dayofyear(calendarDate) as DayOfYear,\r\n",
					"  weekofyear(calendarDate) as WeekOfYearIso,\r\n",
					"  quarter(calendarDate) as QuarterOfYear,\r\n",
					"  /* Use fiscal periods needed by organization fiscal calendar */\r\n",
					"  case\r\n",
					"    when month(calendarDate) >= 10 then year(calendarDate) + 1\r\n",
					"    else year(calendarDate)\r\n",
					"  end as FiscalYearOctToSep,\r\n",
					"  (month(calendarDate) + 2) % 12 + 1 AS FiscalMonthOctToSep,\r\n",
					"  case\r\n",
					"    when month(calendarDate) >= 7 then year(calendarDate) + 1\r\n",
					"    else year(calendarDate)\r\n",
					"  end as FiscalYearJulToJun,\r\n",
					"  (month(calendarDate) + 5) % 12 + 1 AS FiscalMonthJulToJun\r\n",
					"from\r\n",
					"  dates\r\n",
					"order by\r\n",
					"  calendarDate"
				],
				"execution_count": 3
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					}
				},
				"source": [
					"%%sql\r\n",
					"create or replace table dim_calendar\r\n",
					"using delta\r\n",
					"location '/odw-harmonised'\r\n",
					"as select\r\n",
					"  year(calendarDate) * 10000 + month(calendarDate) * 100 + day(calendarDate) as DateInt,\r\n",
					"  CalendarDate,\r\n",
					"  year(calendarDate) AS CalendarYear,\r\n",
					"  date_format(calendarDate, 'MMMM') as CalendarMonth,\r\n",
					"  month(calendarDate) as MonthOfYear,\r\n",
					"  date_format(calendarDate, 'EEEE') as CalendarDay,\r\n",
					"  dayofweek(calendarDate) as DayOfWeek,\r\n",
					"  weekday(calendarDate) + 1 as DayOfWeekStartMonday,\r\n",
					"  case\r\n",
					"    when weekday(calendarDate) < 5 then 'Y'\r\n",
					"    else 'N'\r\n",
					"  end as IsWeekDay,\r\n",
					"  dayofmonth(calendarDate) as DayOfMonth,\r\n",
					"  case\r\n",
					"    when calendarDate = last_day(calendarDate) then 'Y'\r\n",
					"    else 'N'\r\n",
					"  end as IsLastDayOfMonth,\r\n",
					"  dayofyear(calendarDate) as DayOfYear,\r\n",
					"  weekofyear(calendarDate) as WeekOfYearIso,\r\n",
					"  quarter(calendarDate) as QuarterOfYear,\r\n",
					"  /* Use fiscal periods needed by organization fiscal calendar */\r\n",
					"  case\r\n",
					"    when month(calendarDate) >= 10 then year(calendarDate) + 1\r\n",
					"    else year(calendarDate)\r\n",
					"  end as FiscalYearOctToSep,\r\n",
					"  (month(calendarDate) + 2) % 12 + 1 as FiscalMonthOctToSep,\r\n",
					"  case\r\n",
					"    when month(calendarDate) >= 7 then year(calendarDate) + 1\r\n",
					"    else year(calendarDate)\r\n",
					"  end as FiscalYearJulToJun,\r\n",
					"  (month(calendarDate) + 5) % 12 + 1 as FiscalMonthJulToJun\r\n",
					"from\r\n",
					"  dates\r\n",
					""
				],
				"execution_count": null
			}
		]
	}
}