{
	"name": "listed_building_outline_dim",
	"properties": {
		"folder": {
			"name": "archive/odw-harmonised/ListedBuilding"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "178c3d0a-5c6d-4702-ae54-565413b8e5e4"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw",
				"name": "pinssynspodw",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"-- Build listed_building_outline_dim table -- merge\r\n",
					"\r\n",
					"-- Notes - Addresses are only supplied for Inspectors - need to check inspector count against addresses data\r\n",
					"\r\n",
					"-- Gets modified or deleted from source rows\r\n",
					"\r\n",
					"CREATE OR REPLACE TEMPORARY VIEW listed_building_outline_dim_new \r\n",
					"\r\n",
					"    AS\r\n",
					"\r\n",
					"-- gets data that matches of SourceID and flags that it is modified based on a row (md5) hash. Flags as \"NewData\"\r\n",
					"-- gets data that is in the target but not in source. Flags as \"DeletedData\"\r\n",
					"\r\n",
					"SELECT DISTINCT\r\n",
					"    CASE\r\n",
					"        WHEN T1.reference IS NULL\r\n",
					"        THEN T3.ListedBuildingOutlineID\r\n",
					"        ELSE NULL\r\n",
					"    END                                         AS ListedBuildingOutlineID, -- surrogate key\r\n",
					"    IFNULL(T1.entity,'No Info')                 AS ListedBuildingOutlineEntity,\r\n",
					"    IFNULL(T1.entry_date,'No Info')             AS ListedBuildingOutlineEntryDate,\r\n",
					"    IFNULL(T1.geometry,'No Info')               AS ListedBuildingOutlineGeometry,\r\n",
					"    IFNULL(T1.name,'No Info')                   AS ListedBuildingOutlineName,\r\n",
					"    IFNULL(T1.organisation_entity,'No Info')    AS ListedBuildingOutlineOrganisationEntity,\r\n",
					"    IFNULL(T1.point,'No Info')                  AS ListedBuildingOutlinePoint,\r\n",
					"    IFNULL(T1.prefix,'No Info')                 AS ListedBuildingOutlinePrefix,\r\n",
					"    IFNULL(T1.reference,'No Info')              AS ListedBuildingOutlineReference,\r\n",
					"    IFNULL(T1.start_date,'No Info')             AS ListedBuildingOutlineStartDate,\r\n",
					"    IFNULL(T1.typology,'No Info')               AS ListedBuildingOutlineTypology,\r\n",
					"    IFNULL(T1.address_text,'No Info')           AS ListedBuildingOutlineAddress,\r\n",
					"    IFNULL(T1.description,'No Info')            AS ListedBuildingOutlineDescription,\r\n",
					"    IFNULL(T1.document_url,'No Info')           AS ListedBuildingOutlineDocumentURL,\r\n",
					"    IFNULL(T1.documentation_url,'No Info')      AS ListedBuildingOutlineDocumentationURL,\r\n",
					"    IFNULL(T1.listed_building,'No Info')        AS ListedBuildingOutlineNumber,\r\n",
					"    IFNULL(T1.listed_building_grade,'No Info')  AS ListedBuildingOutlineGrade,\r\n",
					"    IFNULL(T1.notes,'No Info')                  AS ListedBuildingOutlineNotes,\r\n",
					"    T2.SourceSystemID                           AS SourceSystemID,\r\n",
					"    to_timestamp(T1.expected_from)              AS IngestionDate,\r\n",
					"    NULL                                        AS ValidTo,\r\n",
					"    md5(concat( \r\n",
					"        IFNULL(T1.entity,'.'), \r\n",
					"        IFNULL(T1.entry_date,'.'), \r\n",
					"        IFNULL(T1.geometry,'.'), \r\n",
					"        IFNULL(T1.name,'.'), \r\n",
					"        IFNULL(T1.organisation_entity,'.'), \r\n",
					"        IFNULL(T1.point,'.'), \r\n",
					"        IFNULL(T1.prefix,'.'), \r\n",
					"        IFNULL(T1.reference,'.'), \r\n",
					"        IFNULL(T1.start_date,'.'), \r\n",
					"        IFNULL(T1.typology,'.'), \r\n",
					"        IFNULL(T1.address_text,'.'), \r\n",
					"        IFNULL(T1.description,'.'), \r\n",
					"        IFNULL(T1.document_url,'.'), \r\n",
					"        IFNULL(T1.documentation_url,'.'), \r\n",
					"        IFNULL(T1.listed_building,'.'), \r\n",
					"        IFNULL(T1.listed_building_grade,'.'), \r\n",
					"        IFNULL(T1.notes,'.')\r\n",
					"    ))                                          AS RowID, \r\n",
					"    'Y'                                         AS IsActive, \r\n",
					"    T3.IsActive                                 AS HistoricIsActive\r\n",
					"\r\n",
					"FROM odw_standardised_db.listed_building_outline T1\r\n",
					"LEFT JOIN odw_harmonised_db.main_sourcesystem_fact T2 \r\n",
					"    ON  \"ListedBuilding\" = T2.Description AND \r\n",
					"        T2.IsActive = 'Y'\r\n",
					"FULL JOIN odw_harmonised_db.listed_building_outline_dim T3 \r\n",
					"    ON  T1.reference = T3.ListedBuildingOutlineReference AND \r\n",
					"        T3.IsActive = 'Y'\r\n",
					"\r\n",
					"WHERE\r\n",
					"        -- flags new data        \r\n",
					"        ( CASE\r\n",
					"            WHEN    T1.reference = T3.ListedBuildingOutlineReference AND \r\n",
					"                    md5(concat(\r\n",
					"                        IFNULL(T1.entity,'.'), \r\n",
					"                        IFNULL(T1.entry_date,'.'), \r\n",
					"                        IFNULL(T1.geometry,'.'), \r\n",
					"                        IFNULL(T1.name,'.'), \r\n",
					"                        IFNULL(T1.organisation_entity,'.'), \r\n",
					"                        IFNULL(T1.point,'.'), \r\n",
					"                        IFNULL(T1.prefix,'.'), \r\n",
					"                        IFNULL(T1.reference,'.'), \r\n",
					"                        IFNULL(T1.start_date,'.'), \r\n",
					"                        IFNULL(T1.typology,'.'), \r\n",
					"                        IFNULL(T1.address_text,'.'), \r\n",
					"                        IFNULL(T1.description,'.'), \r\n",
					"                        IFNULL(T1.document_url,'.'), \r\n",
					"                        IFNULL(T1.documentation_url,'.'), \r\n",
					"                        IFNULL(T1.listed_building,'.'), \r\n",
					"                        IFNULL(T1.listed_building_grade,'.'), \r\n",
					"                        IFNULL(T1.notes,'.')))  <> T3.RowID     \r\n",
					"            THEN 'Y'\r\n",
					"            WHEN T3.ListedBuildingOutlineID IS NULL\r\n",
					"            THEN 'Y'\r\n",
					"            ELSE 'N'\r\n",
					"        END  = 'Y' )\r\n",
					"    AND T1.reference IS NOT NULL\r\n",
					"    AND T1.expected_from = (SELECT MAX(expected_from) FROM odw_standardised_db.listed_building_outline);\r\n",
					""
				],
				"execution_count": 3
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Dataset is created that contains changed data and corresponding target data\r\n",
					"- This script combines data that has been updated, Deleted or is new, with corresponding target data\r\n",
					"- View **listed_building_outline_dim_new** is unioned to the target data filter to only those rows where changes have been detected\r\n",
					"## View listed_building_outline_dim_changed_rows is created"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"\r\n",
					"-- Create new and updated dataset\r\n",
					"\r\n",
					"CREATE OR REPLACE TEMPORARY  VIEW listed_building_outline_dim_changed_rows\r\n",
					"\r\n",
					"    AS\r\n",
					"\r\n",
					"-- gets updated, deleted and new rows \r\n",
					"\r\n",
					"SELECT DISTINCT\r\n",
					"    ListedBuildingOutlineID,\r\n",
					"    ListedBuildingOutlineEntity,\r\n",
					"    ListedBuildingOutlineEntryDate,\r\n",
					"    ListedBuildingOutlineGeometry,\r\n",
					"    ListedBuildingOutlineName,\r\n",
					"    ListedBuildingOutlineOrganisationEntity,\r\n",
					"    ListedBuildingOutlinePoint,\r\n",
					"    ListedBuildingOutlinePrefix,\r\n",
					"    ListedBuildingOutlineReference,\r\n",
					"    ListedBuildingOutlineStartDate,\r\n",
					"    ListedBuildingOutlineTypology,\r\n",
					"    ListedBuildingOutlineAddress,\r\n",
					"    ListedBuildingOutlineDescription,\r\n",
					"    ListedBuildingOutlineDocumentURL,\r\n",
					"    ListedBuildingOutlineDocumentationURL,\r\n",
					"    ListedBuildingOutlineNumber,\r\n",
					"    ListedBuildingOutlineGrade,\r\n",
					"    ListedBuildingOutlineNotes,\r\n",
					"    SourceSystemID,\r\n",
					"    IngestionDate,\r\n",
					"    ValidTo,\r\n",
					"    RowID,\r\n",
					"    IsActive\r\n",
					"From listed_building_outline_dim_new WHERE HistoricIsActive = 'Y' or HistoricIsActive IS NULL\r\n",
					"\r\n",
					"    UNION ALL\r\n",
					"\r\n",
					"-- gets original versions of updated rows so we can update EndDate and set IsActive flag to 'N'\r\n",
					"\r\n",
					"SELECT DISTINCT\r\n",
					"    ListedBuildingOutlineID,\r\n",
					"    ListedBuildingOutlineEntity,\r\n",
					"    ListedBuildingOutlineEntryDate,\r\n",
					"    ListedBuildingOutlineGeometry,\r\n",
					"    ListedBuildingOutlineName,\r\n",
					"    ListedBuildingOutlineOrganisationEntity,\r\n",
					"    ListedBuildingOutlinePoint,\r\n",
					"    ListedBuildingOutlinePrefix,\r\n",
					"    ListedBuildingOutlineReference,\r\n",
					"    ListedBuildingOutlineStartDate,\r\n",
					"    ListedBuildingOutlineTypology,\r\n",
					"    ListedBuildingOutlineAddress,\r\n",
					"    ListedBuildingOutlineDescription,\r\n",
					"    ListedBuildingOutlineDocumentURL,\r\n",
					"    ListedBuildingOutlineDocumentationURL,\r\n",
					"    ListedBuildingOutlineNumber,\r\n",
					"    ListedBuildingOutlineGrade,\r\n",
					"    ListedBuildingOutlineNotes,\r\n",
					"    SourceSystemID,\r\n",
					"    IngestionDate,\r\n",
					"    ValidTo,\r\n",
					"    RowID,\r\n",
					"    IsActive\r\n",
					"FROM odw_harmonised_db.listed_building_outline_dim\r\n",
					"WHERE ListedBuildingOutlineReference IN (SELECT ListedBuildingOutlineReference FROM listed_building_outline_dim_new WHERE ListedBuildingOutlineID IS NULL) AND IsActive = 'Y';\r\n",
					""
				],
				"execution_count": 4
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"\n",
					"CREATE OR REPLACE TEMPORARY VIEW Loading_month\n",
					"\n",
					"    AS\n",
					"\n",
					"SELECT DISTINCT\n",
					"    IngestionDate AS IngestionDate,\n",
					"    to_timestamp(date_sub(IngestionDate,1)) AS ClosingDate,\n",
					"    'Y' AS IsActive\n",
					"\n",
					"FROM listed_building_outline_dim_new;\n",
					"\n",
					"CREATE OR REPLACE TEMPORARY VIEW listed_building_outline_dim_changed_rows_final\n",
					"\n",
					"    AS\n",
					"\n",
					"SELECT \n",
					"    ListedBuildingOutlineID,\n",
					"    ListedBuildingOutlineEntity,\n",
					"    ListedBuildingOutlineEntryDate,\n",
					"    ListedBuildingOutlineGeometry,\n",
					"    ListedBuildingOutlineName,\n",
					"    ListedBuildingOutlineOrganisationEntity,\n",
					"    ListedBuildingOutlinePoint,\n",
					"    ListedBuildingOutlinePrefix,\n",
					"    ListedBuildingOutlineReference,\n",
					"    ListedBuildingOutlineStartDate,\n",
					"    ListedBuildingOutlineTypology,\n",
					"    ListedBuildingOutlineAddress,\n",
					"    ListedBuildingOutlineDescription,\n",
					"    ListedBuildingOutlineDocumentURL,\n",
					"    ListedBuildingOutlineDocumentationURL,\n",
					"    ListedBuildingOutlineNumber,\n",
					"    ListedBuildingOutlineGrade,\n",
					"    ListedBuildingOutlineNotes,\n",
					"    T1.SourceSystemID,\n",
					"    T1.IngestionDate,\n",
					"    T1.ValidTo,\n",
					"    T1.RowID,\n",
					"    T1.IsActive,\n",
					"    T2.ClosingDate\n",
					"FROM listed_building_outline_dim_changed_rows T1\n",
					"FULL JOIN Loading_month T2 ON T1.IsActive = T2.IsActive\n",
					""
				],
				"execution_count": 5
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# View listed_building_outline_dim_changed_rows is used in a merge (Upsert) statement into the target table\r\n",
					"- **WHEN MATCHED** ON the Business Key (i.e. Pers_No from SAP HR), EndDate is set to today -1 day and the IsActive flag is set to 'N'\r\n",
					"- **WHEN NOT MATCHED** ON the business key, insert rows\r\n",
					"## Table odw_harmonised.listed_building_outline_dim is updated"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"-- merge into fact table\r\n",
					"\r\n",
					"MERGE INTO odw_harmonised_db.listed_building_outline_dim AS Target\r\n",
					"USING listed_building_outline_dim_changed_rows_final AS Source\r\n",
					"\r\n",
					"ON Source.ListedBuildingOutlineID = Target.ListedBuildingOutlineID\r\n",
					"\r\n",
					"-- For Updates existing rows\r\n",
					"\r\n",
					"WHEN MATCHED\r\n",
					"    THEN \r\n",
					"    UPDATE SET\r\n",
					"    Target.ValidTo = to_timestamp(ClosingDate),\r\n",
					"    Target.IsActive = 'N'\r\n",
					"\r\n",
					"-- Insert completely new rows\r\n",
					"WHEN NOT MATCHED \r\n",
					"    THEN INSERT (ListedBuildingOutlineID,\r\n",
					"        ListedBuildingOutlineEntity,\r\n",
					"        ListedBuildingOutlineEntryDate,\r\n",
					"        ListedBuildingOutlineGeometry,\r\n",
					"        ListedBuildingOutlineName,\r\n",
					"        ListedBuildingOutlineOrganisationEntity,\r\n",
					"        ListedBuildingOutlinePoint,\r\n",
					"        ListedBuildingOutlinePrefix,\r\n",
					"        ListedBuildingOutlineReference,\r\n",
					"        ListedBuildingOutlineStartDate,\r\n",
					"        ListedBuildingOutlineTypology,\r\n",
					"        ListedBuildingOutlineAddress,\r\n",
					"        ListedBuildingOutlineDescription,\r\n",
					"        ListedBuildingOutlineDocumentURL,\r\n",
					"        ListedBuildingOutlineDocumentationURL,\r\n",
					"        ListedBuildingOutlineNumber,\r\n",
					"        ListedBuildingOutlineGrade,\r\n",
					"        ListedBuildingOutlineNotes,\r\n",
					"        SourceSystemID,\r\n",
					"        IngestionDate,\r\n",
					"        ValidTo,\r\n",
					"        RowID,\r\n",
					"        IsActive)  \r\n",
					"        VALUES (Source.ListedBuildingOutlineID,\r\n",
					"        Source.ListedBuildingOutlineEntity,\r\n",
					"        Source.ListedBuildingOutlineEntryDate,\r\n",
					"        Source.ListedBuildingOutlineGeometry,\r\n",
					"        Source.ListedBuildingOutlineName,\r\n",
					"        Source.ListedBuildingOutlineOrganisationEntity,\r\n",
					"        Source.ListedBuildingOutlinePoint,\r\n",
					"        Source.ListedBuildingOutlinePrefix,\r\n",
					"        Source.ListedBuildingOutlineReference,\r\n",
					"        Source.ListedBuildingOutlineStartDate,\r\n",
					"        Source.ListedBuildingOutlineTypology,\r\n",
					"        Source.ListedBuildingOutlineAddress,\r\n",
					"        Source.ListedBuildingOutlineDescription,\r\n",
					"        Source.ListedBuildingOutlineDocumentURL,\r\n",
					"        Source.ListedBuildingOutlineDocumentationURL,\r\n",
					"        Source.ListedBuildingOutlineNumber,\r\n",
					"        Source.ListedBuildingOutlineGrade,\r\n",
					"        Source.ListedBuildingOutlineNotes,\r\n",
					"        Source.SourceSystemID, \r\n",
					"        Source.IngestionDate, \r\n",
					"        Source.ValidTo, \r\n",
					"        Source.RowID, \r\n",
					"        Source.IsActive) ;  \r\n",
					""
				],
				"execution_count": 6
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Fix the IDs\r\n",
					"- No auto-increment feature is available in delta tables, therefore we need to create new IDs for the inserted rows\r\n",
					"- This is done by select the target data and using INSERT OVERWRITE to re-insert the data is a new Row Number\r\n",
					"## Table odw_harmonised.listed_building_outline_dim is updated"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"-- Insert new SecureInfoID\r\n",
					"\r\n",
					"INSERT OVERWRITE odw_harmonised_db.listed_building_outline_dim \r\n",
					"\r\n",
					"SELECT \r\n",
					"    ROW_NUMBER() OVER (ORDER BY ListedBuildingOutlineID NULLS LAST) AS ListedBuildingOutlineID,\r\n",
					"    ListedBuildingOutlineEntity,\r\n",
					"    ListedBuildingOutlineEntryDate,\r\n",
					"    ListedBuildingOutlineGeometry,\r\n",
					"    ListedBuildingOutlineName,\r\n",
					"    ListedBuildingOutlineOrganisationEntity,\r\n",
					"    ListedBuildingOutlinePoint,\r\n",
					"    ListedBuildingOutlinePrefix,\r\n",
					"    ListedBuildingOutlineReference,\r\n",
					"    ListedBuildingOutlineStartDate,\r\n",
					"    ListedBuildingOutlineTypology,\r\n",
					"    ListedBuildingOutlineAddress,\r\n",
					"    ListedBuildingOutlineDescription,\r\n",
					"    ListedBuildingOutlineDocumentURL,\r\n",
					"    ListedBuildingOutlineDocumentationURL,\r\n",
					"    ListedBuildingOutlineNumber,\r\n",
					"    ListedBuildingOutlineGrade,\r\n",
					"    ListedBuildingOutlineNotes,\r\n",
					"    SourceSystemID,\r\n",
					"    IngestionDate,\r\n",
					"    ValidTo,\r\n",
					"    RowID,\r\n",
					"    IsActive\r\n",
					"FROM odw_harmonised_db.listed_building_outline_dim ;"
				],
				"execution_count": 7
			}
		]
	}
}