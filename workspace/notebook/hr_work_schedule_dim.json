{
	"name": "hr_work_schedule_dim",
	"properties": {
		"folder": {
			"name": "odw-harmonised/SAP-HR"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodwpr",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "6f77ac39-9e36-46fa-861f-e156fe454781"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/a82fd28d-5989-4e06-a0bb-1a5d859f9e0c/resourceGroups/pins-rg-data-odw-prod-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-prod-uks/bigDataPools/pinssynspodwpr",
				"name": "pinssynspodwpr",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-prod-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodwpr",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Check for new, updated or deleted data\n",
					"- This script checks for new, updated or deleted data by checking the source data (sap hr) against the target (odw_harmonised_db.workschedule_dim)\n",
					"- **New Data:** where a PA in the source does not exist as an Work_Schedule_Rule in the target. NewData flag is set to 'Y'\n",
					"- **Updated data:** Comparison occurs on PA in source and Work_Schedule_Rule in target where the row hash is different i.e. there is a change in one of the columns. NewData flag is set to 'Y'\n",
					"- **Deleted data:** where an Work_Schedule_Rule in the target exists but the same PA doesn't exist in the source. DeletedData flag is set to 'Y'\n",
					"\n",
					"## View workschedule_dim_new is created"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"-- Build workschedule_dim table\r\n",
					"-- Gets modified or deleted from source rows\r\n",
					"\r\n",
					"CREATE OR REPLACE TEMPORARY VIEW workschedule_dim_new\r\n",
					"\r\n",
					"    AS\r\n",
					"\r\n",
					"-- gets data that matches of SourceID and flags that it is modified based on a row (md5) hash. Flags as \"NewData\"\r\n",
					"-- gets data that is in the target but not in source. Flags as \"DeletedData\"\r\n",
					"\r\n",
					"SELECT DISTINCT\r\n",
					"    CASE\r\n",
					"        WHEN T1.Work_Schedule_Rule IS NULL\r\n",
					"        THEN first(T7.WorkScheduleID)\r\n",
					"        ELSE NULL\r\n",
					"    END as WorkScheduleID, -- surrogate key\r\n",
					"    Work_Schedule_Rule AS WorkScheduleRule, -- source system id\r\n",
					"    WkDys AS WorkWeekDays,\r\n",
					"    Wk_hrs AS WorkWeekHours,\r\n",
					"    Hrs_Day AS WorkDayHours, \r\n",
					"    First(T2.SourceSystemID) as SourceSystemID,\r\n",
					"    First(to_timestamp(T1.expected_from)) AS IngestionDate,\r\n",
					"    NULL AS ValidTo,\r\n",
					"    md5(concat(IFNULL(T1.Work_Schedule_Rule,'.'), IFNULL(T1.WkDys,'.'),IFNULL(T1.Wk_hrs,'.'),IFNULL(T1.Hrs_Day,'.'))) as RowID,\r\n",
					"    'Y' as IsActive,\r\n",
					"    First(T7.IsActive) as HistoricIsActive\r\n",
					"\r\n",
					"FROM odw_standardised_db.vw_absences T1\r\n",
					"LEFT JOIN odw_harmonised_db.main_sourcesystem_fact T2 ON \"SAP HR\" = T2.Description and T2.IsActive = 'Y'\r\n",
					"FULL JOIN odw_harmonised_db.hr_work_schedule_dim T7 ON T1.Work_Schedule_Rule = T7.WorkScheduleRule AND\r\n",
					"                                                    T1.WkDys = T7.WorkWeekDays AND\r\n",
					"                                                    T1.Wk_hrs = T7.WorkWeekHours AND\r\n",
					"                                                    T1.Hrs_Day = T7.WorkDayHours AND \r\n",
					"                                                    T7.IsActive = 'Y'\r\n",
					"WHERE\r\n",
					"    -- flags new data        \r\n",
					"    CASE\r\n",
					"        WHEN T1.Work_Schedule_Rule = T7.WorkScheduleRule AND\r\n",
					"            T1.WkDys = T7.WorkWeekDays AND\r\n",
					"            T1.Wk_hrs = T7.WorkWeekHours AND\r\n",
					"            T1.Hrs_Day = T7.WorkDayHours AND\r\n",
					"            md5(concat(IFNULL(T1.Work_Schedule_Rule,'.'), IFNULL(T1.WkDys,'.'),IFNULL(T1.Wk_hrs,'.'),IFNULL(T1.Hrs_Day,'.'))) <> T7.RowID   -- same employee, changed data\r\n",
					"        THEN 'Y'\r\n",
					"        WHEN T7.WorkScheduleRule IS NULL -- new work schedule\r\n",
					"        THEN 'Y'\r\n",
					"        ELSE 'N'\r\n",
					"    END  = 'Y' \r\n",
					"GROUP BY T1.Work_Schedule_Rule, T1.WkDys, T1.Wk_hrs, T1.Hrs_Day;"
				],
				"execution_count": 1
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Run tests to check integrity of data by numbers\r\n",
					"- This script checks for the total number of current codes in the harmonised table, and compare against the numbers for new data to be added and data to be set as inactive.\r\n",
					"- **Changes tracking:** where it checks the data against active records in harmonised and compares with records to add and records to be set as inactive.\r\n",
					"- **Changes tolerance levels:** if the total amount to be added and deleted surpasses the tolerance limit, it will interrupt the process of loading the data"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# from pyspark.sql import SparkSession\r\n",
					"# spark = SparkSession.builder.getOrCreate()\r\n",
					"\r\n",
					"# Source_Number = spark.sql(\"SELECT COUNT(*) AS Source_Number FROM odw_harmonised_db.workschedule_dim\")\r\n",
					"# Current_Number = spark.sql(\"SELECT COUNT (DISTINCT RowID) AS Current_Number FROM odw_harmonised_db.workschedule_dim where IsActive = 'Y' \")\r\n",
					"# New_Data_Number = spark.sql(\"SELECT COUNT (DISTINCT RowID) AS New_Data_Number FROM workschedule_dim_new WHERE NewData = 'Y'\")\r\n",
					"# Deleted_Data_Number = spark.sql(\"SELECT COUNT (DISTINCT RowID) AS Deleted_Data_Number FROM workschedule_dim_new WHERE DeletedData = 'Y'\")\r\n",
					"\r\n",
					"# Source_Number_Pandas = Source_Number.toPandas()\r\n",
					"# Current_Number_Pandas =  Current_Number.toPandas()\r\n",
					"# New_Data_Number_Pandas = New_Data_Number.toPandas()\r\n",
					"# Deleted_Data_Number_Pandas = Deleted_Data_Number.toPandas()\r\n",
					"\r\n",
					"# # checking if new total number of registers matches the previously loaded, plus New ones, minus Deleted ones\r\n",
					"# print(\"SET 1:\")\r\n",
					"# Total_Number = Source_Number_Pandas['Source_Number'].tolist() \r\n",
					"# Current_Loaded_Number = Current_Number_Pandas['Current_Number'].tolist() \r\n",
					"# New_Data_Number = New_Data_Number_Pandas['New_Data_Number'].tolist() \r\n",
					"# Deleted_Data_Number = Deleted_Data_Number_Pandas['Deleted_Data_Number'].tolist() \r\n",
					"\r\n",
					"# print(Total_Number)\r\n",
					"# print(Current_Loaded_Number)\r\n",
					"# print(New_Data_Number)\r\n",
					"# print(Deleted_Data_Number)\r\n",
					"\r\n",
					"#if Total_Number[0] != (Current_Loaded_Number[0] + New_Data_Number[0] - Deleted_Data_Number[0]):\r\n",
					"    #raise RuntimeError(\"Loading Number do not match\")\r\n",
					"#else:\r\n",
					"#    print(\"Loading number matches with existing codes plus new, minus deleted!\")\r\n",
					"\r\n",
					"#if New_Data_Number[0] > 1000:\r\n",
					"   # raise RuntimeError(\"ALERT: Too many new codes\")\r\n",
					"#:\r\n",
					"#    print(\"New data under tolerance levels\")\r\n",
					"\r\n",
					"#if Deleted_Data_Number[0] > 500:\r\n",
					"    #raise RuntimeError(\"ALERT: Too many deleted codes\")\r\n",
					"#else:\r\n",
					"#    print(\"Unused codes under tolerance levels\")"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Run tests to check integrity of data by comparison of codes\r\n",
					"- This script checks for the total list of current codes in the harmonised table, and compare against the list for new data to be added and data to be set as inactive.\r\n",
					"- **Changes tracking:** where it checks the data against active records in harmonised and compares with records to add and records to be set as inactive."
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# from pyspark.sql import SparkSession\r\n",
					"# spark = SparkSession.builder.getOrCreate()\r\n",
					"\r\n",
					"# Current_Records = spark.sql(\"SELECT DISTINCT RowID AS Current_Records FROM odw_harmonised_db.workschedule_dim where IsActive = 'Y' \")\r\n",
					"# New_Data_Records = spark.sql(\"SELECT DISTINCT RowID AS New_Data_Records FROM workschedule_dim_new WHERE NewData = 'Y'\")\r\n",
					"# Deleted_Data_Records = spark.sql(\"SELECT DISTINCT RowID AS Deleted_Data_Records FROM workschedule_dim_new WHERE DeletedData = 'Y'\")\r\n",
					"\r\n",
					"# Current_Records_Pandas =  Current_Records.toPandas()\r\n",
					"# New_Data_Records_Pandas = New_Data_Records.toPandas()\r\n",
					"# Deleted_Data_Records_Pandas = Deleted_Data_Records.toPandas()\r\n",
					"\r\n",
					"# # checking if a deleted records are correcly flagged, not existing in the new data, but existing inpreviously loaded\r\n",
					"# print(\"TEST 2:\")\r\n",
					"\r\n",
					"# Current_Records = Current_Records_Pandas['Current_Records'].tolist() \r\n",
					"# Deleted_Records = Deleted_Data_Records_Pandas['Deleted_Data_Records'].tolist()\r\n",
					"# New_Records = New_Data_Records_Pandas['New_Data_Records'].tolist()\r\n",
					"\r\n",
					"# print(Current_Records)\r\n",
					"# print(Deleted_Records)\r\n",
					"# print(New_Records)\r\n",
					"\r\n",
					"#for i in Deleted_Records:\r\n",
					"#    if i in Current_Records: \r\n",
					"#        print(i + \" to be deleted is in the current records\")\r\n",
					"#    else:\r\n",
					"        #raise RuntimeError(\"Records to Delete do not match\")\r\n",
					"\r\n",
					"#for j in New_Records:\r\n",
					"#    if j not in Current_Records: \r\n",
					"#        print(j + \" to be added is not in the current records\")\r\n",
					"#    else:\r\n",
					"        #raise RuntimeError(\"Records to Add do not match\")"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Dataset is created that contains changed data and corresponding target data\n",
					"- This script combines data that has been updated, Deleted or is new, with corresponding target data\n",
					"- View **workschedule_dim_new** is unioned to the target data filter to only those rows where changes have been detected\n",
					"## View workschedule_dim_changed_rows is created"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"-- Creating new and updated dataset\r\n",
					"\r\n",
					"CREATE OR REPLACE TEMPORARY VIEW workschedule_dim_changed_rows\r\n",
					"\r\n",
					"    AS\r\n",
					"\r\n",
					"SELECT \r\n",
					"    WorkScheduleID,\r\n",
					"    WorkScheduleRule,\r\n",
					"    WorkWeekDays,\r\n",
					"    WorkWeekHours,\r\n",
					"    WorkDayHours,\r\n",
					"    SourceSystemID,\r\n",
					"    IngestionDate,\r\n",
					"    ValidTo,\r\n",
					"    RowID,\r\n",
					"    IsActive\r\n",
					"FROM workschedule_dim_new WHERE HistoricIsActive = 'Y' or HistoricIsActive IS NULL\r\n",
					"\r\n",
					"    UNION ALL\r\n",
					"\r\n",
					"SELECT\r\n",
					"    WorkScheduleID,\r\n",
					"    WorkScheduleRule,\r\n",
					"    WorkWeekDays,\r\n",
					"    WorkWeekHours,\r\n",
					"    WorkDayHours,\r\n",
					"    SourceSystemID,\r\n",
					"    IngestionDate,\r\n",
					"    ValidTo,\r\n",
					"    RowID,\r\n",
					"    IsActive\r\n",
					"FROM odw_harmonised_db.hr_work_schedule_dim\r\n",
					"WHERE WorkScheduleRule IN (SELECT WorkScheduleRule FROM workschedule_dim_new WHERE WorkScheduleID IS NULL) AND IsActive = 'Y'; \r\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					}
				},
				"source": [
					"%%sql\n",
					"\n",
					"CREATE OR REPLACE TEMPORARY VIEW Loading_month\n",
					"\n",
					"    AS\n",
					"\n",
					"SELECT DISTINCT\n",
					"    IngestionDate AS IngestionDate,\n",
					"    to_timestamp(date_sub(IngestionDate,1)) AS ClosingDate,\n",
					"    'Y' AS IsActive\n",
					"\n",
					"FROM workschedule_dim_new;\n",
					"\n",
					"CREATE OR REPLACE TEMPORARY VIEW workschedule_dim_changed_rows_final\n",
					"\n",
					"    AS\n",
					"\n",
					"SELECT \n",
					"    T1.WorkScheduleID,\n",
					"    T1.WorkScheduleRule,\n",
					"    T1.WorkWeekDays,\n",
					"    T1.WorkWeekHours,\n",
					"    T1.WorkDayHours,\n",
					"    T1.SourceSystemID,\n",
					"    T1.IngestionDate,\n",
					"    T1.ValidTo,\n",
					"    T1.RowID,\n",
					"    T1.IsActive,\n",
					"    T2.ClosingDate\n",
					"FROM workschedule_dim_changed_rows T1\n",
					"FULL JOIN Loading_month T2 ON T1.IsActive = T2.IsActive"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# View workschedule_dim_changed_rows is used in a merge (Upsert) statement into the target table\n",
					"- **WHEN MATCHED** ON the Business Key (i.e. PA from SAPHR), EndDate is set to today -1 day and the IsActive flag is set to 'N'\n",
					"- **WHEN NOT MATCHED** ON the business key, insert rows\n",
					"## Table odw_harmonised.workschedule_dim is updated"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"-- merge into fact table\r\n",
					"\r\n",
					"MERGE INTO odw_harmonised_db.hr_work_schedule_dim AS Target\r\n",
					"USING workschedule_dim_changed_rows_final AS Source\r\n",
					"\r\n",
					"ON Source.WorkScheduleID = Target.WorkScheduleID\r\n",
					"\r\n",
					"-- For Updates existing rows\r\n",
					"\r\n",
					"WHEN MATCHED\r\n",
					"    THEN \r\n",
					"    UPDATE SET\r\n",
					"    Target.ValidTo = to_timestamp(ClosingDate),\r\n",
					"    Target.IsActive = 'N'\r\n",
					"\r\n",
					"-- Insert completely new rows\r\n",
					"WHEN NOT MATCHED \r\n",
					"    THEN INSERT (WorkScheduleID,\r\n",
					"        WorkScheduleRule,\r\n",
					"        WorkWeekDays,\r\n",
					"        WorkWeekHours,\r\n",
					"        WorkDayHours,\r\n",
					"        SourceSystemID,\r\n",
					"        IngestionDate,\r\n",
					"        ValidTo,\r\n",
					"        RowID,\r\n",
					"        IsActive)  \r\n",
					"        VALUES (Source.WorkScheduleID,\r\n",
					"        Source.WorkScheduleRule,\r\n",
					"        Source.WorkWeekDays,\r\n",
					"        Source.WorkWeekHours,\r\n",
					"        Source.WorkDayHours,\r\n",
					"        Source.SourceSystemID,\r\n",
					"        Source.IngestionDate,\r\n",
					"        Source.ValidTo,\r\n",
					"        Source.RowID,\r\n",
					"        Source.IsActive);\r\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Fix the IDs\n",
					"- No auto-increment feature is available in delta tables, therefore we need to create new IDs for the inserted rows\n",
					"- This is done by select the target data and using INSERT OVERWRITE to re-insert the data is a new Row Number\n",
					"## Table odw_harmonised.workschedule_dim is updated"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"-- Insert new WorkScheduleID\r\n",
					"\r\n",
					"INSERT OVERWRITE odw_harmonised_db.hr_work_schedule_dim\r\n",
					"\r\n",
					"SELECT \r\n",
					"    ROW_NUMBER() OVER (ORDER BY WorkScheduleID NULLS LAST) AS WorkScheduleID,\r\n",
					"    WorkScheduleRule,\r\n",
					"    WorkWeekDays,\r\n",
					"    WorkWeekHours,\r\n",
					"    WorkDayHours,\r\n",
					"    SourceSystemID,\r\n",
					"    IngestionDate,\r\n",
					"    ValidTo,\r\n",
					"    RowID,\r\n",
					"    IsActive\r\n",
					"FROM odw_harmonised_db.hr_work_schedule_dim;\r\n",
					""
				],
				"execution_count": null
			}
		]
	}
}