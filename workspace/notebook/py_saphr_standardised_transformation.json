{
	"name": "py_saphr_standardised_transformation",
	"properties": {
		"folder": {
			"name": "odw-standardised/saphr"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw34",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "70698876-33da-4aa5-af58-cff6e41532e2"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw34",
				"name": "pinssynspodw34",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw34",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#### The purpose of this pyspark notebook is to read Delta tables from owb_standarsied_db Delta table path and load all transformed records to Delta.\n",
					"\n",
					"**Author** &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; **Created Date** &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; **Description**  \n",
					"Rohit Shukla &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;04-Mar-2025 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; The functionality of this notebook is to transform odw-standardised/saphr Delta Tables after successful ingestion of all Delta tables.\n",
					"\n",
					"**Spark Cluster Configuration** -> Apache Spark Version- 3.4, Python Version \t\t- 3.10, Delta Lake Version \t- 2.4\n",
					"\n",
					""
				]
			},
			{
				"cell_type": "code",
				"source": [
					"#import all libraries and initialise Spark Session\n",
					"import json\n",
					"import traceback\n",
					"from datetime import datetime, timedelta, date\n",
					"import pyspark.sql.functions as F \n",
					"import os\n",
					"import re\n",
					"from notebookutils import mssparkutils\n",
					"from pyspark.sql.functions import col, expr, when, lit, lpad\n",
					"from pyspark.sql.types import *\n",
					"from pyspark.sql import SparkSession\n",
					"spark = SparkSession.builder.getOrCreate()\n",
					"from delta.tables import DeltaTable\n",
					"#ignore FutureWarning messages \n",
					"import warnings\n",
					"warnings.filterwarnings(\"ignore\", message=\"iteritems is deprecated\")\n",
					""
				],
				"execution_count": 38
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Get Storage account"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"#Get Storage account name\n",
					"storage_account=mssparkutils.notebook.run('/utils/py_utils_get_storage_account')\n",
					"print(storage_account)"
				],
				"execution_count": 39
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Enable message logging"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"%run utils/py_logging_decorator"
				],
				"execution_count": 40
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Define all storage paths"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"# Define delta table names, database name and table paths\n",
					"source_database_name = \"odw_standardised_db\"\n",
					"target_database_name = \"odw_harmonised_db\"\n",
					"delta_table_base_path = f\"abfss://odw-standardised@{storage_account}saphr/\"\n",
					"# JSON schema file path\n",
					"json_schema_file_path = f\"abfss://odw-config@{storage_account}/orchestration/orchestration_saphr.json\"\n",
					""
				],
				"execution_count": 41
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Define Process Delta table update function"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"# Initialize json processing results\n",
					"processing_results = {\n",
					"    \"processing_summary\":{\n",
					"    \"total_tables_processed\": 0,\n",
					"    \"successful_overwrites\": 0,\n",
					"    \"failed_overwrites\": 0\n",
					"    },\n",
					"    \"update_table_details\": []\n",
					"}\n",
					"\n",
					"@logging_to_appins\n",
					"def time_diff_seconds(start, end):\n",
					"    try:\n",
					"        if not start or not end:\n",
					"            return 0\n",
					"\n",
					"        # Parse strings into datetime objects if needed\n",
					"        if isinstance(start, str):\n",
					"            start = datetime.strptime(start, \"%Y-%m-%d %H:%M:%S.%f\")\n",
					"        if isinstance(end, str):\n",
					"            end = datetime.strptime(end, \"%Y-%m-%d %H:%M:%S.%f\")\n",
					"\n",
					"        diff_seconds = int((end - start).total_seconds())\n",
					"        return diff_seconds if diff_seconds > 0 else 0\n",
					"\n",
					"    except Exception as e:\n",
					"        return 0\n",
					"\n",
					"#This funtion handles datetime object and covert into string\n",
					"def datetime_handler(obj):\n",
					"    if isinstance(obj, datetime):\n",
					"        return obj.isoformat()\n",
					"    raise TypeError(f\"Object of type {obj.__class__.__name__} is not JSON serializable\")\n",
					"\n",
					"@logging_to_appins\n",
					"def add_table_result(delta_table_name, update_count=0, table_result=\"success\",\n",
					"start_update_exec_time=\"\",end_update_exec_time=\"\",total_update_exec_time=\"\", error_message=\"\"):\n",
					"    \"\"\"Add processing result for a table to the tracking structure\"\"\"\n",
					"    table_detail = {\n",
					"        \"delta_table_name\": delta_table_name,\n",
					"        \"update_count\": update_count,\n",
					"        \"table_result\": table_result,\n",
					"        \"start_update_exec_time\": start_update_exec_time,\n",
					"        \"end_update_exec_time\": end_update_exec_time,\n",
					"        \"total_update_exec_time\": total_update_exec_time,\n",
					"        \"error_message\": error_message\n",
					"    }\n",
					"    processing_results[\"update_table_details\"].append(table_detail)\n",
					"    processing_results[\"processing_summary\"][\"total_tables_processed\"] += 1\n",
					"    \n",
					"    if table_result == \"success\":\n",
					"        processing_results[\"processing_summary\"][\"successful_overwrites\"] += 1\n",
					"    else:\n",
					"        processing_results[\"processing_summary\"][\"failed_overwrites\"] += 1\n",
					"\n",
					"# NEW FUNCTION: Read orchestration JSON file and extract saphr delta table names\n",
					"@logging_to_appins\n",
					"def get_delta_tables_from_json(json_file_path):\n",
					"    \"\"\"\n",
					"    Read orchestration JSON file and extract unique saphr delta table names\n",
					"    with Source_Frequency_Folder filter for MONTHLY and WEEKLY\n",
					"    \"\"\"\n",
					"    try:\n",
					"        logInfo(f\"Reading orchestration JSON file from: {json_file_path}\")\n",
					"        \n",
					"        # Read JSON file content\n",
					"        json_content = mssparkutils.fs.head(json_file_path, max_bytes=1000000)  # Read up to 1MB\n",
					"        orchestration_data = json.loads(json_content)\n",
					"        \n",
					"        # Extract unique table names from saphr path with frequency filter\n",
					"        saphr_tables = set()\n",
					"        allowed_frequencies = {\"MONTHLY\", \"WEEKLY\"}\n",
					"        \n",
					"        for definition in orchestration_data.get(\"definitions\", []):\n",
					"            standardised_path = definition.get(\"Standardised_Path\", \"\")\n",
					"            table_name = definition.get(\"Standardised_Table_Name\", \"\")\n",
					"            frequency_folder = definition.get(\"Source_Frequency_Folder\", \"\")\n",
					"            \n",
					"            # Filter for saphr tables with MONTHLY or WEEKLY frequency\n",
					"            if (standardised_path.lower() == \"saphr\" and \n",
					"                table_name and \n",
					"                frequency_folder in allowed_frequencies):\n",
					"                saphr_tables.add(table_name)\n",
					"                \n",
					"        table_list = list(saphr_tables)\n",
					"        return table_list\n",
					"        \n",
					"    except Exception as e:\n",
					"        logError(f\"Error reading orchestration JSON file: {e}\")\n",
					"        return []\n",
					"\n",
					"# MODIFIED FUNCTION: Updated to accept table list from JSON instead of scanning directory\n",
					"def get_delta_tables(base_path, table_names_from_json):\n",
					"    \"\"\"\n",
					"    Validate that the table names from JSON actually exist as Delta tables in the path\n",
					"    \"\"\"\n",
					"    try:\n",
					"        validated_tables = []\n",
					"        \n",
					"        for table_name in table_names_from_json:\n",
					"            table_path = f\"{base_path}{table_name}\"\n",
					"            try:\n",
					"                # Check if it's a valid Delta table\n",
					"                if DeltaTable.isDeltaTable(spark, table_path):\n",
					"                    validated_tables.append(table_name)                    \n",
					"                else:\n",
					"                    logInfo(f\"Not a Delta table (skipping): {table_name}\")\n",
					"            except Exception as table_check_error:\n",
					"                logInfo(f\"Error checking table {table_name}: {table_check_error}\")\n",
					"        \n",
					"        logInfo(f\"Validated {len(validated_tables)} Delta tables out of {len(table_names_from_json)} from JSON\")\n",
					"        return validated_tables\n",
					"        \n",
					"    except Exception as e:\n",
					"        logError(f\"Error validating Delta tables: {e}\")\n",
					"        return []\n",
					"\n",
					"@logging_to_appins\n",
					"def process_delta_table(table_name):\n",
					"    try:\n",
					"        #Process the Delta table to find and modify the specified columns\n",
					"        delta_table_path = f\"{delta_table_base_path}{table_name}\"\n",
					"\n",
					"        update_count = 0\n",
					"\n",
					"        if DeltaTable.isDeltaTable(spark, delta_table_path):\n",
					"            \n",
					"            logInfo(f\"Processing Delta Table: {table_name}\")\n",
					"            df = spark.read.format(\"delta\").load(delta_table_path)\n",
					"            \n",
					"            start_exec_time = str(datetime.now())\n",
					"            update_count = df.count()\n",
					"\n",
					"            # Identify columns that need modification\n",
					"            target_columns = [col_name for col_name in [\"PersNo\",\"PersNo1\", \"StaffNumber\"] if col_name in df.columns]\n",
					"\n",
					"            if target_columns:\n",
					"                logInfo(f\"Modifying columns: {target_columns}\")\n",
					"\n",
					"                for col_name in target_columns:\n",
					"                    df = df.withColumn(col_name, when(col(col_name).isNotNull() & (col(col_name).cast(\"string\").rlike(\"^\\\\d{1,7}$\")), lpad(col(col_name).cast(\"string\"), 8, '0'))\n",
					"                                        .otherwise(col(col_name)))\n",
					"\n",
					"                # Write back to Delta Table\n",
					"                df.write.format(\"delta\").mode(\"overwrite\").save(delta_table_path)\n",
					"                logInfo(f\"Updated Delta Table: {table_name}\")\n",
					"                \n",
					"                end_exec_time = str(datetime.now())\n",
					"                time_diff = time_diff_seconds(start_exec_time, end_exec_time)\n",
					"\n",
					"                add_table_result(table_name, update_count, \"success\",start_exec_time, end_exec_time,\n",
					"                 time_diff,\"\")\n",
					"            else:\n",
					"                logInfo(f\"No matching columns found in {table_name}\")\n",
					"        else:\n",
					"            logInfo(f\"Not a Delta Table: {table_name}\")\n",
					"            #add_table_result(table_name, 0, \"failed\", f\"Not a valid Delta table: {table_name}\")\n",
					"            \n",
					"            end_exec_time = str(datetime.now())\n",
					"            time_diff = time_diff_seconds(start_exec_time, end_exec_time)\n",
					"            add_table_result(table_name, update_count, \"failed\",start_exec_time, end_exec_time,\n",
					"                 time_diff,f\"Not a valid Delta table: {table_name}\")\n",
					"\n",
					"    except Exception as e:\n",
					"            error_msg = f\"Failed processing for {table_name} - {str(e)}\"\n",
					"            logError(error_msg)\n",
					"            #add_table_result(table_name, 0, \"failed\", error_msg)\n",
					"            \n",
					"            end_exec_time = str(datetime.now())\n",
					"            time_diff = time_diff_seconds(start_exec_time, end_exec_time)\n",
					"            \n",
					"            add_table_result(table_name, update_count, \"failed\",start_exec_time, end_exec_time,\n",
					"                 time_diff,error_msg)\n",
					"\n",
					"def generate_processing_results():\n",
					"    \n",
					"    #Generate and display the final processing results in JSON format\"\"\"\n",
					"    \n",
					"    # Create the final result structure\n",
					"    exit_value = {\n",
					"        \"processing_summary\": processing_results[\"processing_summary\"],\n",
					"        \"update_table_details\": processing_results[\"update_table_details\"]\n",
					"    }\n",
					"    \n",
					"    # Convert to JSON string for display\n",
					"    json_output = json.dumps(exit_value, indent=2)\n",
					"    \n",
					"    # Log the results\n",
					"    logInfo(f\"Total tables processed: {exit_value['processing_summary']['total_tables_processed']}\")\n",
					"    logInfo(f\"Successful overwrites: {exit_value['processing_summary']['successful_overwrites']}\")\n",
					"    logInfo(f\"Failed overwrites: {exit_value['processing_summary']['failed_overwrites']}\")\n",
					"    \n",
					"    # Display detailed results\n",
					"    print(f\"ExitValue: {json_output}\")\n",
					"    \n",
					"    # Log any failures for quick reference\n",
					"    failed_tables = [table for table in exit_value['update_table_details'] if table['table_result'] == 'failed']\n",
					"    if failed_tables:\n",
					"        for table in failed_tables:\n",
					"            logError(f\"Table: {table['delta_table_name']} - Error: {table['error_message']}\")\n",
					"    \n",
					"    return exit_value"
				],
				"execution_count": 42
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Main Execution for delta table updates"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"# Main Execution for processing - now uses JSON file instead of directory scanning\n",
					"logInfo(\"Reading Delta table names from orchestration JSON file...\")\n",
					"table_names_from_json = get_delta_tables_from_json(json_schema_file_path)\n",
					"\n",
					"if table_names_from_json:\n",
					"    logInfo(\"Validating Delta tables...\")\n",
					"    delta_tables = get_delta_tables(delta_table_base_path, table_names_from_json)\n",
					"    logInfo(f\"Processing {len(delta_tables)} validated Delta tables\")\n",
					"    \n",
					"    for table in delta_tables:\n",
					"        process_delta_table(table)\n",
					"    \n",
					"    logInfo(\"Delta table updates completed successfully.\")\n",
					"else:\n",
					"    logError(\"No tables found in orchestration JSON file. Exiting...\")\n",
					""
				],
				"execution_count": 43
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Update Old employees numbers with new employee numbers"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"#Define source and target Delta tables\n",
					"\n",
					"try:\n",
					"    source_table = \"odw_standardised_db.sap_hr_previous_employee_numbers\"\n",
					"    target_tables = [\n",
					"        \"odw_standardised_db.sap_hr_weekly\",\n",
					"        \"odw_standardised_db.sap_hr_history_monthly\",\n",
					"        \"odw_standardised_db.sap_hr_leavers_monthly\"\n",
					"    ]\n",
					"\n",
					"    # Load source data\n",
					"    df_source = spark.read.format(\"delta\").table(source_table)\n",
					"\n",
					"    # Loop through target tables and update EmployeeNo where PersNo matches\n",
					"    for target_table in target_tables:\n",
					"        try:\n",
					"            df_target = spark.read.format(\"delta\").table(target_table)\n",
					"            update_count = df_target.count()\n",
					"\n",
					"            start_exec_time = str(datetime.now())\n",
					"            \n",
					"            spark.sql(f\"\"\"\n",
					"                MERGE INTO {target_table} AS target\n",
					"                USING {source_table} AS source\n",
					"                ON target.PersNo = source.PersNo\n",
					"                WHEN MATCHED THEN\n",
					"                UPDATE SET target.EmployeeNo = source.EmployeeNo\n",
					"            \"\"\")\n",
					"\n",
					"            logInfo(f\"Updated {target_table}\")\n",
					"            #add_table_result(target_table, update_count, \"success\", \"\")\n",
					"            \n",
					"            end_exec_time = str(datetime.now())\n",
					"            time_diff = time_diff_seconds(start_exec_time, end_exec_time)\n",
					"            \n",
					"            add_table_result(target_table, update_count, \"success\",start_exec_time, end_exec_time,\n",
					"                 time_diff,\"\")\n",
					"        \n",
					"            logInfo(\"Delta table updates completed.\")\n",
					"\n",
					"        except Exception as table_error:\n",
					"            \n",
					"            #Code added to capture meaningful error message\n",
					"            full_trace = traceback.format_exc()\n",
					"            \n",
					"            table_error_msg = str(table_error)\n",
					"\n",
					"            complete_msg = table_error_msg + \"\\n\" + full_trace\n",
					"            error_text = complete_msg[:300]           \n",
					"            \n",
					"            # Find the position of the last full stop before 300 characters\n",
					"            last_period_index = error_text.rfind('.')\n",
					"\n",
					"            # Use up to the last full stop, if found; else fall back to 300 chars\n",
					"            if last_period_index != -1:\n",
					"                error_message = error_text[:last_period_index + 1] \n",
					"            else:\n",
					"                error_message = error_text\n",
					"\n",
					"            table_name = target_table.split(\".\")[-1]\n",
					"            error_msg = f\"Failed processing for {table_name} - {str(table_error)}\"\n",
					"            logError(error_msg)\n",
					"            \n",
					"            #add_table_result(table_name, 0, \"failed\", error_msg)\n",
					"\n",
					"            end_exec_time = str(datetime.now())\n",
					"            time_diff = time_diff_seconds(start_exec_time, end_exec_time)\n",
					"            \n",
					"            add_table_result(table_name, update_count, \"failed\",start_exec_time, end_exec_time,\n",
					"                 time_diff,error_message)\n",
					"\n",
					"except Exception as e:\n",
					"            logError(f\"Failed processing for {target_table} - {e}\")\n",
					"            logError(\"Delta table updates failed\")\n",
					""
				],
				"execution_count": 44
			},
			{
				"cell_type": "code",
				"source": [
					"# Generate and display the final results\n",
					"final_results = generate_processing_results()\n",
					"\n",
					"# Convert to JSON string\n",
					"result_json_str = json.dumps(final_results, indent=2, default=datetime_handler)\n",
					""
				],
				"execution_count": 45
			},
			{
				"cell_type": "code",
				"source": [
					"# Exit with the JSON result\n",
					"mssparkutils.notebook.exit(result_json_str)"
				],
				"execution_count": 46
			},
			{
				"cell_type": "code",
				"source": [
					"#spark.sql(f\"DROP TABLE IF EXISTS odw_harmonised_db.load_sap_hr_weekly\")"
				],
				"execution_count": null
			}
		]
	}
}