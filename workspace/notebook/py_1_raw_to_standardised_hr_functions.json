{
	"name": "py_1_raw_to_standardised_hr_functions",
	"properties": {
		"folder": {
			"name": "1-odw-raw-to-standardised/Fileshare/SAP_HR"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "c404893f-cb90-4aa6-be7a-9e8dad2ffd18"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": true,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw",
				"name": "pinssynspodw",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#ignore FutureWarning messages \n",
					"import warnings\n",
					"warnings.filterwarnings(\"ignore\", message=\"iteritems is deprecated\")"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%run  /0-odw-source-to-raw/Fileshare/SAP_HR/py_0_source_to_raw_hr_functions"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%run /utils/py_mount_storage"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def validate_parameters(storage_acc, raw_container, raw_source_folder, raw_name, standardised_container, standardised_source_folder, standardised_name, linked_service, sheet_name=0, header_row=0):\n",
					"    \n",
					"    ''' \n",
					"    Type check the parameters that will be used in the ETL processing with pyspark in subsequent functions    \n",
					"\n",
					"    Args:\n",
					"\n",
					"    Returns:\n",
					"\n",
					"    Actions:\n",
					"    \n",
					"    Raises:\n",
					"     '''\n",
					"    \n",
					"    ### imports\n",
					"    from notebookutils import mssparkutils\n",
					"    import logging\n",
					"    \n",
					"    ### creating filepath\n",
					"    filepath = raw_container + raw_source_folder + raw_name\n",
					"\n",
					"    ### checking abfss path\n",
					"    if filepath.split('abfss://')[0] != '':\n",
					"        raise ValueError(\"File path string is not of abfss:// type\")\n",
					"        \n",
					"    \n",
					"    ### checking filepath has xlsx file in it \n",
					"\n",
					"    ### checking str data types\n",
					"    # defining parameters to check\n",
					"    parameters = {\n",
					"        'filepath':filepath,\n",
					"        'storage_acc':storage_acc,\n",
					"        'linked_service':linked_service\n",
					"    }\n",
					"\n",
					"    # checking str type\n",
					"    str_errors = ''\n",
					"    for para in parameters:\n",
					"        if type(parameters[para]) != str:\n",
					"            str_errors += para\n",
					"        if str_errors != '':\n",
					"            raise TypeError(f\"Parameters: {str_errors} not of type string\")   \n",
					"            \n",
					"    # checking sheet name type is str or int\n",
					"    if type(sheet_name) != str and type(sheet_name) != int:\n",
					"        raise TypeError(\"Sheet name should either be a string or a integer\")\n",
					"        \n",
					"    # checking int type\n",
					"    if type(header_row) != int:\n",
					"        raise TypeError(\"Header row should be an integer value\")\n",
					""
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def _cleanse_headers(df):\n",
					"    '''\n",
					"    NOT A PURE FUNCTION\n",
					"    Take a dataframe and appropriately cleanse headers in a file\n",
					"    '''\n",
					"    ### imports\n",
					"    import pandas as pd\n",
					"    import re\n",
					"\n",
					"    ### type checks\n",
					"    if not isinstance(df, pd.DataFrame):\n",
					"        raise TypeError(\"Expecting a pandas dataframe\")\n",
					"        \n",
					"    cols = df.columns\n",
					"    cols=[re.sub(\"( |\\#|\\# |\\.|\\(|\\)|\\/)\",\"_\",i) for i in cols] # replace chars with _\n",
					"    cols=[re.sub(\"([\\_]{2,})\",\"_\",i) for i in cols] #replace consecutive _ with one _\n",
					"    cols=[re.sub(\"(\\_)$\",\"\",i) for i in cols] #remove trailing _\n",
					"    cols = [item.replace(',','') for item in cols]\n",
					"    df.columns = cols\n",
					"\n",
					"    return df \n",
					"\n",
					"def _change_types(df):\n",
					"    '''\n",
					"    NOT A PURE FUNCTION\n",
					"    Take a dataframe and appropriately make all data types a string\n",
					"    '''\n",
					"\n",
					"    ### imports\n",
					"    import pandas as pd\n",
					"    \n",
					"    ### type checks\n",
					"    if not isinstance(df, pd.DataFrame):\n",
					"        raise TypeError(\"Expecting a pandas dataframe\")\n",
					"        \n",
					"    return df.astype(str, errors='ignore')\n",
					"\n",
					"def ingest_excel_to_parquet(storage_acc, raw_container, raw_source_folder, raw_name, standardised_container, standardised_source_folder, standardised_name, linked_service, sheet_name=0, header=0):\n",
					"\n",
					"    '''\n",
					"    Create a parquet file with delta capabilities from a source excel file\n",
					"    '''\n",
					"\n",
					"    ### initialising spark session\n",
					"    from pyspark.sql import SparkSession\n",
					"    spark = SparkSession.builder.getOrCreate()\n",
					"\n",
					"    ### setting appopriate spark variables\n",
					"    source_full_storage_account_name = storage_acc\n",
					"    spark.conf.set(f\"spark.storage.synapse.{source_full_storage_account_name}.linkedServiceName\", linked_service )\n",
					"    spark.conf.set(f\"fs.azure.account.oauth.provider.type.{source_full_storage_account_name}\", \"com.microsoft.azure.synapse.tokenlibrary.LinkedServiceBasedTokenProvider\")\n",
					"\n",
					"    ### creating targetpath variable\n",
					"    filepath = raw_container + raw_source_folder + raw_name\n",
					"    targetpath = standardised_container + standardised_source_folder + standardised_name\n",
					"\n",
					"    ### reading file with abfss file location format\n",
					"    import pandas as pd\n",
					"    from notebookutils import mssparkutils\n",
					"    jobId = mssparkutils.env.getJobId()\n",
					"\n",
					"    mount_storage(path=raw_container + raw_source_folder)\n",
					"    df = pd.read_excel(f\"/synfs/{jobId}/temp_raw/{raw_name}\", sheet_name=sheet_name, header=header, dtype='object')\n",
					"    unmount_storage()\n",
					"    ### cleanse headers \n",
					"    df = _cleanse_headers(df)\n",
					"    \n",
					"    ### change all types to string\n",
					"    df = _change_types(df)\n",
					"\n",
					"    ### writing output\n",
					"    df.to_parquet(targetpath)\n",
					""
				],
				"execution_count": 3
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def enable_delta_on_parquet(standardised_container, standardised_source_folder):\n",
					"    '''\n",
					"    Take a standard parquet file and enable delta lake capabiltiies on the file\n",
					"    '''\n",
					"\n",
					"    ### initialise spark session\n",
					"    from pyspark.sql import SparkSession\n",
					"    spark = SparkSession.builder.getOrCreate()\n",
					"    spark.conf.set('spark.hadoop.orc.overwrite.output.file','true')\n",
					"\n",
					"    ### create target delta folder variable\n",
					"    target_delta_folder = standardised_container + standardised_source_folder\n",
					"\n",
					"    ### check parquet file in targetpath exists\n",
					"    ### OUTSTANDING\n",
					"\n",
					"    ### converting parquet to delta table\n",
					"    from delta.tables import DeltaTable\n",
					"    if not DeltaTable.isDeltaTable(spark,target_delta_folder):\n",
					"        deltaTable = DeltaTable.convertToDelta(spark, f\"parquet.`{target_delta_folder}`\") "
				],
				"execution_count": 4
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def lakedb_table_sparksql(db_name,delta_lake_table_name,standardised_container, standardised_source_folder):\n",
					"    '''\n",
					"    Make delta parquet file available in lake database\n",
					"    '''\n",
					"\n",
					"    ### imports and spark session creation\n",
					"    from pyspark.sql import SparkSession\n",
					"    from delta.tables import DeltaTable\n",
					"    spark = SparkSession.builder.getOrCreate()\n",
					"\n",
					"    ### create target delta folder variable\n",
					"    target_delta_folder = standardised_container + standardised_source_folder\n",
					"\n",
					"    ### check parquet file is now delta table\n",
					"    ### outstanding\n",
					"\n",
					"    ### make delta table available to be queried in spark sql\n",
					"    spark.sql(f\"drop table if exists {db_name}.{delta_lake_table_name};\")\n",
					"    spark.sql(f\"CREATE TABLE {db_name}.{delta_lake_table_name} USING DELTA LOCATION '{target_delta_folder}'\")"
				],
				"execution_count": 5
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def ingest_adhoc(storage_account, \n",
					"                    definition,\n",
					"                    folder_path, \n",
					"                    filename, \n",
					"                    expected_from, \n",
					"                    expected_to, \n",
					"                    isMultilineJSON=False, \n",
					"                    dataAttribute=None):\n",
					"\n",
					"    from pyspark.sql import SparkSession\n",
					"    from notebookutils import mssparkutils\n",
					"    import json\n",
					"    from datetime import datetime, timedelta, date\n",
					"    import pandas as pd\n",
					"    from pyspark.sql.types import StringType,DateType,TimestampType,IntegerType, FloatType, StructType\n",
					"    import re\n",
					"    from pyspark.sql.functions import col, lit\n",
					"\n",
					"    spark = SparkSession.builder.getOrCreate()\n",
					"    spark.conf.set(\"spark.databricks.delta.schema.autoMerge.enabled\", \"true\")\n",
					"\n",
					"    standardised_container = \"abfss://odw-standardised@\"+storage_account\n",
					"    standardised_path = definition['Standardised_Path'] + \"/\"\n",
					"    standardised_table_name = definition['Standardised_Table_Name']\n",
					"\n",
					"    if 'Standardised_Table_Definition' in definition:\n",
					"        standardised_table_loc = \"abfss://odw-config@\"+storage_account + definition['Standardised_Table_Definition']\n",
					"        standardised_table_def_json = spark.read.text(standardised_table_loc, wholetext=True).first().value\n",
					"    else:\n",
					"        standardised_table_def_json = mssparkutils.notebook.run('/py_get_schema_from_url', 30, {'db_name': 'odw_standardised_db', 'entity_name': definition['Source_Frequency_Folder']})\n",
					" \n",
					"    if not any([table.name == standardised_table_name for table in spark.catalog.listTables('odw_standardised_db')]):\n",
					"        create_table_from_schema(standardised_table_def_json, \"odw_standardised_db\", standardised_table_name,standardised_container , standardised_path+standardised_table_name)   \n",
					"\n",
					"    #Check that we're dealing with delta already. If not we will convert the table first\n",
					"    table_metadata = spark.sql(f\"DESCRIBE EXTENDED odw_standardised_db.{standardised_table_name}\")\n",
					"    data_format = table_metadata.filter(table_metadata.col_name == \"Provider\").collect()[0].data_type\n",
					"\n",
					"    if data_format == \"parquet\":\n",
					"        replace = spark.sql(f\"SELECT * FROM odw_standardised_db.{standardised_table_name}\")\n",
					"        replace.write.option(\"mergeSchema\", \"true\").format(\"delta\").mode(\"overwrite\").saveAsTable(f\"odw_standardised_db.{standardised_table_name}_new\")\n",
					"\n",
					"        # Drop the original table\n",
					"        spark.sql(f\"DROP TABLE IF EXISTS odw_standardised_db.{standardised_table_name}\")\n",
					"\t\t\n",
					"        # Rename the temporary table to replace the original table\n",
					"        spark.sql(f\"ALTER TABLE odw_standardised_db.{standardised_table_name}_new RENAME TO odw_standardised_db.{standardised_table_name}\")\n",
					"\n",
					"    try:\n",
					"        standardised_table_location = spark.sql(f\"DESCRIBE FORMATTED odw_standardised_db.{standardised_table_name}\") \\\n",
					"                    .filter(\"col_name = 'Location'\") \\\n",
					"                    .select(\"data_type\") \\\n",
					"                    .collect()[0][0] \n",
					"    except:\n",
					"        standardised_table_location = standardised_container+standardised_path+standardised_table_name\n",
					"                   \n",
					"    standardised_table_df = spark.read.format(\"delta\").load(standardised_table_location)\n",
					"    rows = standardised_table_df.filter((standardised_table_df.expected_from == expected_from) &  (standardised_table_df.expected_to == expected_to)).count()\n",
					"\n",
					"    jobId = mssparkutils.env.getJobId()\n",
					"    ### mount the data lake storage in Synapse to the Synapse File Mount API \n",
					"    mount_storage(path=folder_path)\n",
					"\n",
					"    ### open .csv and .xlsx files using pandas                                 \n",
					"    if \".xlsx\" in filename.lower():\n",
					"        sheet_name = definition['Source_Sheet_Name'] if 'Source_Sheet_Name' in definition else 0\n",
					"        df = pd.read_excel(f\"/synfs/{jobId}/temp_raw/{filename}\", dtype=str, sheet_name=sheet_name, na_filter=False)\n",
					"    elif '.csv' in filename.lower():\n",
					"        # df = pd.read_csv(f\"/synfs/{jobId}/temp_raw/{filename}\", quotechar='\"', escapechar='\\\\', encoding=\"utf8\", dtype=str, na_filter=False)\n",
					"        df = spark.read.options(quote='\"', escape='\\\\', encoding='utf8', header=True, multiLine=True).csv(f\"{folder_path}/{filename}\")\n",
					"        # df = df.toPandas()\n",
					"    elif '.json' in filename.lower():\n",
					"        if isMultilineJSON == False:\n",
					"            df = spark.read.json(f\"{folder_path}/{filename}\")\n",
					"        else:\n",
					"            print(\"Reading multiline JSON\")\n",
					"            df = spark.read.option(\"multiline\", \"true\").json(f\"{folder_path}/{filename}\")\n",
					"\n",
					"            #we need to pull the data from a specific data attribute\n",
					"            if dataAttribute:\n",
					"                dfs: list = [] # an empty list to store the data frames\n",
					"                for row in df.select(dataAttribute).collect():\n",
					"                    for data in row[dataAttribute]:\n",
					"                        dfs.append(data)\n",
					"                df = spark.createDataFrame(dfs)\n",
					"        # df = df.toPandas()\n",
					"    else:\n",
					"        raise RuntimeError(f\"This file type for {filename} is unsupported\")\n",
					"        \n",
					"    ### drop headerless columns\n",
					"    # df = df.loc[:, ~df.columns.str.contains('^Unnamed')]\n",
					"    sparkDF = df.select([col for col in df.columns if not col.startswith('Unnamed')])\n",
					"    # rows_raw = len(df.index)\n",
					"    rows_raw = sparkDF.count()\n",
					"    unmount_storage()\n",
					"    ### convert to pandas dataframe\n",
					"    # sparkDF=spark.createDataFrame(df) already a spark dataframe\n",
					"    ### add date columns included with every standardised table\n",
					"    sparkDF = sparkDF.withColumn(\"ingested_datetime\",lit(datetime.now()))\n",
					"    sparkDF = sparkDF.withColumn(\"expected_from\",lit(expected_from))\n",
					"    sparkDF = sparkDF.withColumn(\"expected_to\",lit(expected_to))\n",
					"    \n",
					"    ### change any array field to string\n",
					"    schema = json.loads(standardised_table_def_json)\n",
					"    for field in schema['fields']:\n",
					"        if field['type'] == 'array':\n",
					"            field['type'] = 'string'\n",
					"    schema = StructType.fromJson(schema)\n",
					"\n",
					"    ### remove characters that Delta can't allow in headers and add numbers to repeated column headers\n",
					"    cols_orig = sparkDF.schema.names\n",
					"    cols=[re.sub('[^0-9a-zA-Z]+', '_', i).lower() for i in cols_orig]\n",
					"    cols=[colm.rstrip('_') for colm in cols]\n",
					"    newlist = []\n",
					"    for i, v in enumerate(cols):\n",
					"        totalcount = cols.count(v)\n",
					"        count = cols[:i].count(v)\n",
					"        newlist.append(v + str(count + 1) if totalcount > 1 else v)\n",
					"    for colix in range(len(cols_orig)):\n",
					"        sparkDF = sparkDF.toDF(*newlist) \n",
					"\n",
					"    ### Cast any column in sparkDF with type mismatch\n",
					"    for field in sparkDF.schema:\n",
					"        table_field = next((f for f in schema if f.name.lower() == field.name.lower()), None)\n",
					"        if table_field is not None and field.dataType != table_field.dataType:\n",
					"            sparkDF = sparkDF.withColumn(field.name, col(field.name).cast(table_field.dataType))\n",
					"\n",
					"    ### writing the dataframe to the existing standardised table\n",
					"    sparkDF.write.option(\"mergeSchema\", \"true\").format(\"delta\").mode(\"append\").saveAsTable(f\"odw_standardised_db.{standardised_table_name}\")\n",
					"    \n",
					"    standardised_table_df_new = spark.read.format(\"delta\").load(standardised_table_location)\n",
					"    rows_new = standardised_table_df.filter((standardised_table_df.expected_from == expected_from) &  (standardised_table_df.expected_to == expected_to)).count()\n",
					"\n",
					"    ### test correct number of rows have written\n",
					"    if rows_raw == rows_new:\n",
					"        print('All rows have successfully been written')\n",
					"    return rows_raw\n",
					""
				],
				"execution_count": 6
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"source_folder='Horizon'\n",
					"source_frequency_folder=''\n",
					"specific_file='HorizonFolder'\n",
					"isMultiLine = True\n",
					"delete_existing_table=False\n",
					"dataAttribute = \"\"\n",
					"\n",
					"\n",
					"from pyspark.sql import SparkSession\n",
					"from notebookutils import mssparkutils\n",
					"import json\n",
					"import calendar\n",
					"from datetime import datetime, timedelta, date\n",
					"import pandas as pd\n",
					"import os\n",
					"\n",
					"spark = SparkSession.builder.getOrCreate()\n",
					"\n",
					"storage_account=mssparkutils.notebook.run('/utils/py_utils_get_storage_account')\n",
					"raw_container = \"abfss://odw-raw@\" + storage_account\n",
					"date_folder = datetime.now().date()\n",
					"date_folder_str = date_folder.strftime('%Y-%m-%d')\n",
					"source_folder_path = source_folder if not source_frequency_folder else f\"{source_folder}/{source_frequency_folder}\"\n",
					"path_to_orchestration_file = \"abfss://odw-config@\"+storage_account+\"orchestration/orchestration.json\"\n",
					"df = spark.read.option(\"multiline\",\"true\").json(path_to_orchestration_file)\n",
					"definitions = json.loads(df.toJSON().first())['definitions']\n",
					"\n",
					"source_path = f\"{raw_container}{source_folder_path}/{date_folder_str}\"\n",
					"\n",
					"try:\n",
					"    files = mssparkutils.fs.ls(source_path)\n",
					"except Exception as e:\n",
					"    mssparkutils.notebook.exit(f\"Raw file not found at {source_path}\")\n",
					"\n",
					"\n",
					"for file in files:\n",
					"\n",
					"    # ignore json raw files if source is service bus\n",
					"    if source_folder == 'ServiceBus' and file.name.endswith('.json'):\n",
					"        continue\n",
					"\n",
					"    # ignore files other than specified file \n",
					"    if specific_file != '' and not file.name.startswith(specific_file + '.'):\n",
					"        continue\n",
					"        \n",
					"    definition = next((d for d in definitions if (specific_file == '' or d['Source_Filename_Start'] == specific_file) \n",
					"                        and (not source_frequency_folder or d['Source_Frequency_Folder'] == source_frequency_folder) \n",
					"                        and file.name.startswith(d['Source_Filename_Start'])), None)\n",
					"    \n",
					"    if definition:\n",
					"        expected_from = date_folder - timedelta(days=1)\n",
					"        expected_from = datetime.combine(expected_from, datetime.min.time())\n",
					"        expected_to = expected_from + timedelta(days=definition['Expected_Within_Weekdays']) \n",
					"\n",
					"        if delete_existing_table:\n",
					"            print(f\"Deleting existing table if exists odw_standardised_db.{definition['Standardised_Table_Name']}\")\n",
					"            mssparkutils.notebook.run('/utils/py_delete_table', 300, arguments={'db_name': 'odw_standardised_db', 'table_name': definition['Standardised_Table_Name']})\n",
					"\n",
					"        print(f\"Ingesting {file.name}\")\n",
					"        row_count = ingest_adhoc(storage_account, definition, source_path, file.name, expected_from, expected_to, isMultiLine, dataAttribute)\n",
					"        print(f\"Ingested {row_count} rows\")\n",
					"    else:\n",
					"        if specific_file != '':\n",
					"            raise ValueError(f\"No definition found for {specific_file}\")\n",
					"        else:\n",
					"            print(\"No definition found\")\n",
					"\n",
					"\n",
					""
				],
				"execution_count": null
			}
		]
	}
}