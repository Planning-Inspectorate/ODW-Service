{
	"name": "py_1_raw_to_standardised_hr_functions",
	"properties": {
		"folder": {
			"name": "1-odw-raw-to-standardised/Fileshare/SAP_HR"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "8c03ccb8-f287-4c98-988d-bb8e47df89e5"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": true,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw",
				"name": "pinssynspodw",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.2",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"tags": [
						"parameters"
					]
				},
				"source": [
					"table_name = \"leave\"\r\n",
					"filepath = \"abfss://odw-raw@pinsstodwdevuks9h80mb.dfs.core.windows.net/Fileshare/SAP_HR/2022-08/Leave Entitlement_20220831.xlsx\"\r\n",
					"targetpath = 'abfss://odw-standardised@pinsstodwdevuks9h80mb.dfs.core.windows.net/HR/' + table_name + \"/\"\r\n",
					"# deltatargetpath = targetpath + 'Delta/HR'\r\n",
					"storage_acc = \"pinsstodwdevuks9h80mb.dfs.core.windows.net\"\r\n",
					"linked_service = \"ls_storage\"\r\n",
					"#abfss://odw-harmonised@pinsstodwdevuks9h80mb.dfs.core.windows.net//daya_temp/daya_temp3"
				],
				"execution_count": 63
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def validate_parameters(filepath, storage_acc, linked_service, sheet_name=0, header_row=0):\r\n",
					"\r\n",
					"    ### imports\r\n",
					"    from notebookutils import mssparkutils\r\n",
					"\r\n",
					"    ### checking abfss path\r\n",
					"    if filepath.split('abfss://')[0] != '':\r\n",
					"        raise ValueError(\"File path string is not of abfss:// type\")\r\n",
					"        mssparkutils.notebook.exit()\r\n",
					"    \r\n",
					"\r\n",
					"    ### checking str data types\r\n",
					"    # defining parameters to check\r\n",
					"    parameters = {\r\n",
					"        'filepath':filepath,\r\n",
					"        'storage_acc':storage_acc,\r\n",
					"        'linked_service':linked_service\r\n",
					"    }\r\n",
					"\r\n",
					"    # checking str type\r\n",
					"    str_errors = ''\r\n",
					"    for para in parameters:\r\n",
					"        if type(parameters[para]) != str:\r\n",
					"            str_errors += parameters[para]\r\n",
					"        if str_errors != '':\r\n",
					"            raise TypeError(f\"Parameters: {str_errors} not of type string\") \r\n",
					"            mssparkutils.notebook.exit()\r\n",
					"\r\n",
					"    # checking sheet name type is str or int\r\n",
					"    if type(sheet_name) != str and type(sheet_name) != int:\r\n",
					"        raise TypeError(\"Sheet name should either be a string or a integer\")\r\n",
					"        mssparkutils.notebook.exit()\r\n",
					"\r\n",
					"    # checking int type\r\n",
					"    if type(sheet_name) != int:\r\n",
					"        raise TypeError(\"Header row should be an integer value\")\r\n",
					"        mssparkutils.notebook.exit()"
				],
				"execution_count": 64
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def ingest_excel_to_parquet(storage_acc, filepath, targetpath, linked_service, sheet_name=0, header=0):\r\n",
					"\r\n",
					"    ### initialising spark session\r\n",
					"    from pyspark.sql import SparkSession\r\n",
					"    spark = SparkSession.builder.getOrCreate()\r\n",
					"\r\n",
					"    ### setting appopriate spark variables#\r\n",
					"    source_full_storage_account_name = storage_acc\r\n",
					"    spark.conf.set(f\"spark.storage.synapse.{source_full_storage_account_name}.linkedServiceName\", linked_service )\r\n",
					"    spark.conf.set(f\"fs.azure.account.oauth.provider.type.{source_full_storage_account_name}\", \"com.microsoft.azure.synapse.tokenlibrary.LinkedServiceBasedTokenProvider\")\r\n",
					"\r\n",
					"    ### reading file with abfss file format\r\n",
					"    import pandas as pd\r\n",
					"    df = pd.read_excel(filepath, sheet_name=sheet_name, header=header, dtype='object')\r\n",
					"    \r\n",
					"    ### cleanse headers\r\n",
					"    import re\r\n",
					"    cols = df.columns\r\n",
					"    cols=[re.sub(\"( |\\#|\\# |\\.|\\(|\\)|\\/)\",\"_\",i) for i in cols] # replace chars with _\r\n",
					"    cols=[re.sub(\"([\\_]{2,})\",\"_\",i) for i in cols] #replace consecutive _ with one _\r\n",
					"    cols=[re.sub(\"(\\_)$\",\"\",i) for i in cols] #remove trailing _\r\n",
					"    cols = [item.replace(',','') for item in cols]\r\n",
					"    df.columns = cols\r\n",
					"    print(cols)\r\n",
					"    ###\r\n",
					"    df = df.astype(str, errors='ignore')\r\n",
					"\r\n",
					"    ### writing output\r\n",
					"    targetpath += filepath.split(\".windows.net/\")[1].split(\".xlsx\")[0] + '.snappy.parquet'\r\n",
					"    print(df.head())\r\n",
					"    df.to_parquet(targetpath,allow_truncated_timestamps=True)\r\n",
					"    # \"abfss://temp-sap-hr-data@pinsstodwdevuks9h80mb.dfs.core.windows.net/test.snappy.parquet\""
				],
				"execution_count": 65
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def change_types(filepath, targetpath):\r\n",
					"    import pandas as pd\r\n",
					"    ### changing all types to string - makes life easier\r\n",
					"    targetpath += filepath.split(\".windows.net/\")[1].split(\".xlsx\")[0] + '.snappy.parquet'\r\n",
					"    print(targetpath)\r\n",
					"    df = pd.read_parquet(targetpath)\r\n",
					"    print(\"testing\")\r\n",
					"    df = df.astype(str, errors='ignore')\r\n",
					"\r\n",
					"    ### writing file\r\n",
					"    df.to_parquet(targetpath)"
				],
				"execution_count": 66
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def enable_delta_on_parquet(targetpath):\r\n",
					"    from delta.tables import DeltaTable\r\n",
					"    deltaTable = DeltaTable.convertToDelta(spark, f\"parquet.`{targetpath}`\") "
				],
				"execution_count": 67
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def mount_parquet_synapsesql(curated_database_name,curated_storage_table_name,targetpath):\r\n",
					"    from pyspark.sql import SparkSession\r\n",
					"    from delta.tables import DeltaTable\r\n",
					"    spark = SparkSession.builder.getOrCreate()\r\n",
					"    from delta.tables import DeltaTable\r\n",
					"    #if not (DeltaTable.isDeltaTable(spark,targetpath)):\r\n",
					"    spark.sql(f\"CREATE TABLE {curated_database_name}.{curated_storage_table_name} USING DELTA LOCATION '{targetpath}'\")"
				],
				"execution_count": 68
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"validate_parameters(filepath, storage_acc, linked_service)\r\n",
					"ingest_excel_to_parquet(storage_acc, filepath, targetpath, linked_service)"
				],
				"execution_count": 69
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"enable_delta_on_parquet(targetpath)"
				],
				"execution_count": 70
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"mount_parquet_synapsesql(\"odw_standardised_db\", table_name, targetpath)"
				],
				"execution_count": 71
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					""
				],
				"execution_count": null
			}
		]
	}
}