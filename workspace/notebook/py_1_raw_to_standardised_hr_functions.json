{
	"name": "py_1_raw_to_standardised_hr_functions",
	"properties": {
		"folder": {
			"name": "1-odw-raw-to-standardised/Fileshare/SAP_HR"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "8d5fbdd4-520d-403b-814b-b5f073e9ac77"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": true,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw",
				"name": "pinssynspodw",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.2",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"%run \"utils/functions_lib\""
				],
				"execution_count": 40
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"class RawToStandardisedExcel():\r\n",
					"\r\n",
					"    def __init__(self, storage_acc: str, path: str, linked_service:str, sheet_name: str = None, header_row: int = None):\r\n",
					"        \r\n",
					"        ### storage account string e.g. example.dfs.core.windows.net\r\n",
					"        if type(storage_acc) != str:\r\n",
					"            raise TypeError(\"Storage account variable is not of type string, should be xxx.dfs.core.windows.net\")\r\n",
					"        else:\r\n",
					"            self.storage_acc = storage_acc\r\n",
					"\r\n",
					"        ### abfss path to file\r\n",
					"        if type(path) != str:\r\n",
					"            raise TypeError(\"File path variable is not of type string\")\r\n",
					"        elif path.split('abfss://')[0] != '':\r\n",
					"            raise ValueError(\"File path string is not of abfss:// type\")\r\n",
					"        else:\r\n",
					"            self.path = path\r\n",
					"\r\n",
					"        ### linked service\r\n",
					"        if type(linked_service) != str:\r\n",
					"            raise TypeError(\"Linked service variable is not of type string\")\r\n",
					"        else:\r\n",
					"            self.linked_service = linked_service\r\n",
					"        \r\n",
					"        ### sheet name \r\n",
					"        if type(sheet_name) != str:\r\n",
					"            raise TypeError(\"Sheet name variable is not of type string\")\r\n",
					"        else:\r\n",
					"            self.sheet_name = sheet_name\r\n",
					"\r\n",
					"        ### header_row\r\n",
					"        if type(header_row) != int:\r\n",
					"            raise TypeError(\"Header row variable is not of type int\")\r\n",
					"        else:\r\n",
					"            self.header_row = header_row\r\n",
					"\r\n",
					"        ### no df on initialisation\r\n",
					"        self.df = None\r\n",
					"        \r\n",
					"    \r\n",
					"    def ingest(self):\r\n",
					"        from pyspark.sql import SparkSession\r\n",
					"        spark = SparkSession.builder.getOrCreate()\r\n",
					"\r\n",
					"        self.df = spark.createDataFrame(ingest_excel_to_df(self.storage_acc, self.path, self.linked_service, self.sheet_name, self.header_row))\r\n",
					"\r\n",
					"    def convert(self):\r\n",
					"        return None\r\n",
					"\r\n",
					""
				],
				"execution_count": 35
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"RawToStandardisedExcel('hello', 'abfss://hello', 'world', 3  )"
				],
				"execution_count": 38
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					""
				],
				"execution_count": null
			}
		]
	}
}