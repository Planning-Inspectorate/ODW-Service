{
	"name": "py_1_raw_to_standardised_hr_functions",
	"properties": {
		"folder": {
			"name": "1-odw-raw-to-standardised/Fileshare/SAP_HR"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "aed6dc34-7d2e-46f4-8def-1f8ec2384bda"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": true,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw",
				"name": "pinssynspodw",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%run \"utils/py_logging_decorator\""
				],
				"execution_count": 20
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%run  /0-odw-source-to-raw/Fileshare/SAP_HR/py_0_source_to_raw_hr_functions"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"@logging_to_appins\r\n",
					"def validate_parameters(storage_acc, raw_container, raw_source_folder, raw_name, standardised_container, standardised_source_folder, standardised_name, linked_service, sheet_name=0, header_row=0):\r\n",
					"    \r\n",
					"    ''' \r\n",
					"    Type check the parameters that will be used in the ETL processing with pyspark in subsequent functions    \r\n",
					"\r\n",
					"    Args:\r\n",
					"\r\n",
					"    Returns:\r\n",
					"\r\n",
					"    Actions:\r\n",
					"    \r\n",
					"    Raises:\r\n",
					"     '''\r\n",
					"    \r\n",
					"    ### imports\r\n",
					"    from notebookutils import mssparkutils\r\n",
					"    import logging\r\n",
					"    \r\n",
					"    ### creating filepath\r\n",
					"    filepath = raw_container + raw_source_folder + raw_name\r\n",
					"\r\n",
					"    ### checking abfss path\r\n",
					"    if filepath.split('abfss://')[0] != '':\r\n",
					"        raise ValueError(\"File path string is not of abfss:// type\")\r\n",
					"        \r\n",
					"    \r\n",
					"    ### checking filepath has xlsx file in it \r\n",
					"\r\n",
					"    ### checking str data types\r\n",
					"    # defining parameters to check\r\n",
					"    parameters = {\r\n",
					"        'filepath':filepath,\r\n",
					"        'storage_acc':storage_acc,\r\n",
					"        'linked_service':linked_service\r\n",
					"    }\r\n",
					"\r\n",
					"    # checking str type\r\n",
					"    str_errors = ''\r\n",
					"    for para in parameters:\r\n",
					"        if type(parameters[para]) != str:\r\n",
					"            str_errors += para\r\n",
					"        if str_errors != '':\r\n",
					"            raise TypeError(f\"Parameters: {str_errors} not of type string\")   \r\n",
					"            \r\n",
					"    # checking sheet name type is str or int\r\n",
					"    if type(sheet_name) != str and type(sheet_name) != int:\r\n",
					"        raise TypeError(\"Sheet name should either be a string or a integer\")\r\n",
					"        \r\n",
					"    # checking int type\r\n",
					"    if type(header_row) != int:\r\n",
					"        raise TypeError(\"Header row should be an integer value\")\r\n",
					""
				],
				"execution_count": 21
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def _cleanse_headers(df):\r\n",
					"    '''\r\n",
					"    NOT A PURE FUNCTION\r\n",
					"    Take a dataframe and appropriately cleanse headers in a file\r\n",
					"    '''\r\n",
					"    ### imports\r\n",
					"    import pandas as pd\r\n",
					"    import re\r\n",
					"\r\n",
					"    ### type checks\r\n",
					"    if not isinstance(df, pd.DataFrame):\r\n",
					"        raise TypeError(\"Expecting a pandas dataframe\")\r\n",
					"        \r\n",
					"    cols = df.columns\r\n",
					"    cols=[re.sub(\"( |\\#|\\# |\\.|\\(|\\)|\\/)\",\"_\",i) for i in cols] # replace chars with _\r\n",
					"    cols=[re.sub(\"([\\_]{2,})\",\"_\",i) for i in cols] #replace consecutive _ with one _\r\n",
					"    cols=[re.sub(\"(\\_)$\",\"\",i) for i in cols] #remove trailing _\r\n",
					"    cols = [item.replace(',','') for item in cols]\r\n",
					"    df.columns = cols\r\n",
					"\r\n",
					"    return df \r\n",
					"\r\n",
					"def _change_types(df):\r\n",
					"    '''\r\n",
					"    NOT A PURE FUNCTION\r\n",
					"    Take a dataframe and appropriately make all data types a string\r\n",
					"    '''\r\n",
					"\r\n",
					"    ### imports\r\n",
					"    import pandas as pd\r\n",
					"    \r\n",
					"    ### type checks\r\n",
					"    if not isinstance(df, pd.DataFrame):\r\n",
					"        raise TypeError(\"Expecting a pandas dataframe\")\r\n",
					"        \r\n",
					"    return df.astype(str, errors='ignore')\r\n",
					"\r\n",
					"@logging_to_appins\r\n",
					"def ingest_excel_to_parquet(storage_acc, raw_container, raw_source_folder, raw_name, standardised_container, standardised_source_folder, standardised_name, linked_service, sheet_name=0, header=0):\r\n",
					"\r\n",
					"    '''\r\n",
					"    Create a parquet file with delta capabilities from a source excel file\r\n",
					"    '''\r\n",
					"\r\n",
					"    ### initialising spark session\r\n",
					"    from pyspark.sql import SparkSession\r\n",
					"    spark = SparkSession.builder.getOrCreate()\r\n",
					"\r\n",
					"    ### setting appopriate spark variables\r\n",
					"    source_full_storage_account_name = storage_acc\r\n",
					"    spark.conf.set(f\"spark.storage.synapse.{source_full_storage_account_name}.linkedServiceName\", linked_service )\r\n",
					"    spark.conf.set(f\"fs.azure.account.oauth.provider.type.{source_full_storage_account_name}\", \"com.microsoft.azure.synapse.tokenlibrary.LinkedServiceBasedTokenProvider\")\r\n",
					"\r\n",
					"    ### creating targetpath variable\r\n",
					"    filepath = raw_container + raw_source_folder + raw_name\r\n",
					"    targetpath = standardised_container + standardised_source_folder + standardised_name\r\n",
					"\r\n",
					"    ### reading file with abfss file location format\r\n",
					"    import pandas as pd\r\n",
					"    from notebookutils import mssparkutils\r\n",
					"    jobId = mssparkutils.env.getJobId()\r\n",
					"    mssparkutils.fs.unmount(\"/temp_raw\") \r\n",
					"    mssparkutils.fs.mount( \r\n",
					"    raw_container + raw_source_folder, \r\n",
					"    \"/temp_raw\", \r\n",
					"    {\"linkedService\":\"ls_storage\"} \r\n",
					"    )   \r\n",
					"    df = pd.read_excel(f\"/synfs/{jobId}/temp_raw/{raw_name}\", sheet_name=sheet_name, header=header, dtype='object')\r\n",
					"    mssparkutils.fs.unmount(\"/temp_raw\") \r\n",
					"    ### cleanse headers \r\n",
					"    df = _cleanse_headers(df)\r\n",
					"    \r\n",
					"    ### change all types to string\r\n",
					"    df = _change_types(df)\r\n",
					"\r\n",
					"    ### writing output\r\n",
					"    df.to_parquet(targetpath)\r\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"@logging_to_appins\r\n",
					"def enable_delta_on_parquet(standardised_container, standardised_source_folder):\r\n",
					"    '''\r\n",
					"    Take a standard parquet file and enable delta lake capabiltiies on the file\r\n",
					"    '''\r\n",
					"\r\n",
					"    ### initialise spark session\r\n",
					"    from pyspark.sql import SparkSession\r\n",
					"    spark = SparkSession.builder.getOrCreate()\r\n",
					"    spark.conf.set('spark.hadoop.orc.overwrite.output.file','true')\r\n",
					"\r\n",
					"    ### create target delta folder variable\r\n",
					"    target_delta_folder = standardised_container + standardised_source_folder\r\n",
					"\r\n",
					"    ### check parquet file in targetpath exists\r\n",
					"    ### OUTSTANDING\r\n",
					"\r\n",
					"    ### converting parquet to delta table\r\n",
					"    from delta.tables import DeltaTable\r\n",
					"    if not DeltaTable.isDeltaTable(spark,target_delta_folder):\r\n",
					"        deltaTable = DeltaTable.convertToDelta(spark, f\"parquet.`{target_delta_folder}`\") "
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"@logging_to_appins\r\n",
					"def lakedb_table_sparksql(db_name,delta_lake_table_name,standardised_container, standardised_source_folder):\r\n",
					"    '''\r\n",
					"    Make delta parquet file available in lake database\r\n",
					"    '''\r\n",
					"\r\n",
					"    ### imports and spark session creation\r\n",
					"    from pyspark.sql import SparkSession\r\n",
					"    from delta.tables import DeltaTable\r\n",
					"    spark = SparkSession.builder.getOrCreate()\r\n",
					"\r\n",
					"    ### create target delta folder variable\r\n",
					"    target_delta_folder = standardised_container + standardised_source_folder\r\n",
					"\r\n",
					"    ### check parquet file is now delta table\r\n",
					"    ### outstanding\r\n",
					"\r\n",
					"    ### make delta table available to be queried in spark sql\r\n",
					"    spark.sql(f\"drop table if exists {db_name}.{delta_lake_table_name};\")\r\n",
					"    spark.sql(f\"CREATE TABLE {db_name}.{delta_lake_table_name} USING DELTA LOCATION '{target_delta_folder}'\")"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"@logging_to_appins\n",
					"def ingest_adhoc(storage_account, definition, folder_path, filename, expected_from, expected_to):\n",
					"\n",
					"    from pyspark.sql import SparkSession\n",
					"    from notebookutils import mssparkutils\n",
					"    import json\n",
					"    from datetime import datetime, timedelta, date\n",
					"    import pandas as pd\n",
					"    from pyspark.sql.types import StringType,DateType,TimestampType,IntegerType, FloatType, StructType\n",
					"    import re\n",
					"    from pyspark.sql.functions import col, lit\n",
					"\n",
					"    spark = SparkSession.builder.getOrCreate()\n",
					"    spark.conf.set(\"spark.databricks.delta.schema.autoMerge.enabled\", \"true\")\n",
					"    \n",
					"    standardised_path = definition['Standardised_Path'] + \"/\"\n",
					"    standardised_table_loc = \"abfss://odw-config@\"+storage_account + definition['Standardised_Table_Definition']\n",
					"    standardised_table_def_json = spark.read.text(standardised_table_loc, wholetext=True).first().value\n",
					"\n",
					"    standardised_table_name = definition['Standardised_Table_Name']\n",
					"    standardised_container = \"abfss://odw-standardised@\"+storage_account\n",
					"\n",
					"    create_table_from_schema(standardised_table_def_json, \"odw_standardised_db\", standardised_table_name,standardised_container , standardised_path+standardised_table_name)   \n",
					"                     \n",
					"    standardised_table_df = spark.read.format(\"delta\").load(standardised_container+standardised_path+standardised_table_name)\n",
					"    rows = standardised_table_df.filter((standardised_table_df.expected_from == expected_from) &  (standardised_table_df.expected_to == expected_to)).count()\n",
					"\n",
					"    ### check if the file has already been ingested\n",
					"    if rows > 0 :\n",
					"        print(filename + \" has already been ingested for \" + expected_from.strftime(\"%Y%m%d\"))\n",
					"        return\n",
					"\n",
					"    jobId = mssparkutils.env.getJobId()\n",
					"    ### mount the data lake storage in Synapse to the Synapse File Mount API\n",
					"    mssparkutils.fs.unmount(\"/temp_raw\") \n",
					"    mssparkutils.fs.mount( \n",
					"    folder_path, \n",
					"    \"/temp_raw\", \n",
					"    {\"linkedService\":\"ls_storage\"} \n",
					"    )   \n",
					"    ### open .csv and .xlsx files using pandas                                 \n",
					"    if \".xlsx\" in filename.lower():\n",
					"        sheet_name = definition['Source_Sheet_Name'] if 'Source_Sheet_Name' in definition else 0\n",
					"        df = pd.read_excel(f\"/synfs/{jobId}/temp_raw/{filename}\", dtype=str, sheet_name=sheet_name, na_filter=False)\n",
					"    elif '.csv' in filename.lower():\n",
					"        df = pd.read_csv(f\"/synfs/{jobId}/temp_raw/{filename}\", quotechar='\"', escapechar='\\\\', encoding=\"utf8\", dtype=str, na_filter=False)\n",
					"    elif '.json' in filename.lower():\n",
					"        df = spark.read.json(folder_path + filename)\n",
					"        df = df.toPandas()\n",
					"    else:\n",
					"        raise RuntimeError(f\"This file type for {filename} is unsupported\")\n",
					"    ### drop headerless columns\n",
					"    df = df.loc[:, ~df.columns.str.contains('^Unnamed')]\n",
					"    rows_raw = len(df.index)\n",
					"    mssparkutils.fs.unmount(\"/temp_raw\") \n",
					"    ### convert to pandas dataframe\n",
					"    sparkDF=spark.createDataFrame(df)\n",
					"    ### add date columns included with every standardised table\n",
					"    sparkDF = sparkDF.withColumn(\"ingested_datetime\",lit(datetime.now()))\n",
					"    sparkDF = sparkDF.withColumn(\"expected_from\",lit(expected_from))\n",
					"    sparkDF = sparkDF.withColumn(\"expected_to\",lit(expected_to))\n",
					"\n",
					"                    \n",
					"    schema = StructType.fromJson(json.loads(standardised_table_def_json))\n",
					"    \n",
					"    ### remove characters that Delta can't allow in headers and add numbers to repeated column headers\n",
					"    cols_orig = sparkDF.schema.names\n",
					"    cols=[re.sub('[^0-9a-zA-Z]+', '_', i).lower() for i in cols_orig]\n",
					"    cols=[colm.rstrip('_') for colm in cols]\n",
					"    newlist = []\n",
					"    for i, v in enumerate(cols):\n",
					"        totalcount = cols.count(v)\n",
					"        count = cols[:i].count(v)\n",
					"        newlist.append(v + str(count + 1) if totalcount > 1 else v)\n",
					"    for colix in range(len(cols_orig)):\n",
					"        sparkDF = sparkDF.toDF(*newlist) \n",
					"\n",
					"    ### mappings for Json schema definitions to Pyspark data types\n",
					"    mapping = {\n",
					"        'string': StringType(),\n",
					"        'timestamp': TimestampType(),\n",
					"        'integer': IntegerType(),\n",
					"        'date': DateType(),\n",
					"        'float': FloatType()\n",
					"    }\n",
					"\n",
					"    ### writing the dataframe to the existing standardised table\n",
					"    sparkDF.write.option(\"mergeSchema\", \"true\").format(\"delta\").mode(\"append\").saveAsTable(f\"odw_standardised_db.{standardised_table_name}\")\n",
					"\n",
					"    standardised_table_df_new = spark.read.format(\"delta\").load(standardised_container+standardised_path+standardised_table_name)\n",
					"    rows_new = standardised_table_df.filter((standardised_table_df.expected_from == expected_from) &  (standardised_table_df.expected_to == expected_to)).count()\n",
					"\n",
					"    ### test correct number of rows have written\n",
					"    if rows_raw == rows_new:\n",
					"        print('All rows have successfully written')\n",
					""
				],
				"execution_count": 1
			}
		]
	}
}