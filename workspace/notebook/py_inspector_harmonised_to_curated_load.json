{
	"name": "py_inspector_harmonised_to_curated_load",
	"properties": {
		"folder": {
			"name": "odw-curated"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinsodwspark",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "19541c56-cd30-4c13-a049-04082cdfca79"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-odw-data-dev-rg/providers/Microsoft.Synapse/workspaces/pins-odw-data-dev-syn-ws/bigDataPools/pinsodwspark",
				"name": "pinsodwspark",
				"type": "Spark",
				"endpoint": "https://pins-odw-data-dev-syn-ws.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinsodwspark",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.1",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"tags": [
						"parameters"
					]
				},
				"source": [
					"workspace_storage_container = 'abfss://odw-workspace@pinsodwdatadevstorage.dfs.core.windows.net'\r\n",
					"workspace_storage_temp_folder = 'inspector'\r\n",
					"workspace_storage_temp_name = 'inspector'\r\n",
					"curated_storage_container = 'abfss://odw-curated@pinsodwdatadevstorage.dfs.core.windows.net'\r\n",
					"curated_storage_delta_folder = 'inspector'\r\n",
					"curated_storage_delta_table_name = 'inspector'\r\n",
					"delta_lake_table_key_column = 'Pers_No'\r\n",
					"delta_lake_table_name = \"inspector\"\r\n",
					""
				],
				"execution_count": 7
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.sql.types import StructType, StructField, IntegerType, StringType ,DoubleType\r\n",
					"from delta.tables import DeltaTable\r\n",
					"curated_storage_delta_table_path = curated_storage_container + '/' + curated_storage_delta_folder + '/' + curated_storage_delta_table_name\r\n",
					"\r\n",
					"curatedInspectorSchema = StructType([\r\n",
					"    StructField(\"source_id\", StringType(), True),\\\r\n",
					"    StructField(\"pins_staff_number\", StringType(), False),\\\r\n",
					"    StructField(\"given_names\", StringType(), False), \\\r\n",
					"    StructField(\"family_names\", StringType(), False),\\\r\n",
					"    StructField(\"inspector_name\", StringType(), False),\\\r\n",
					"    StructField(\"inspector_postcode\", StringType(), False), \\\r\n",
					"    StructField(\"active_status\", StringType(), False),\\\r\n",
					"    StructField(\"date_in\", StringType(), False),\\\r\n",
					"    StructField(\"date_out\", StringType(), False),\\\r\n",
					"    StructField(\"eo_responsible\", StringType(), False),\\\r\n",
					"    StructField(\"grade\", StringType(), False),\\\r\n",
					"    StructField(\"FTE\", DoubleType(), False),\\\r\n",
					"    StructField(\"Inspector_Address\", StringType(), False),\\\r\n",
					"    StructField(\"Telephone_no\", StringType(), False),\\\r\n",
					"    StructField(\"Work_Mobile\", StringType(), False),\\\r\n",
					"    StructField(\"is_sgl\", IntegerType(), False),\\\r\n",
					"    StructField(\"pins_email_address\", StringType(), False),\\\r\n",
					"    StructField(\"emp_type\", StringType(), False)\r\n",
					"])\r\n",
					"\r\n",
					"\r\n",
					"# or df = sc.parallelize([]).toDF(schema)\r\n",
					"\r\n",
					"# Spark < 2.0 \r\n",
					"# sqlContext.createDataFrame([], schema)\r\n",
					"if not (DeltaTable.isDeltaTable(spark,curated_storage_delta_table_path)):\r\n",
					"    curatedInspectordf = spark.createDataFrame([], curatedInspectorSchema)\r\n",
					"    curatedInspectordf.write.option(\"mergeSchema\", \"true\").format('delta').mode('overwrite').save(curated_storage_delta_table_path)\r\n",
					"    spark.sql(\"CREATE TABLE odw_curated_db.inspector USING DELTA LOCATION '{0}'\".format(curated_storage_delta_table_path))\r\n",
					""
				],
				"execution_count": 14
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"merge into odw_curated_db.inspector target\r\n",
					"using (select * from odw_harmonised_db.inspector ) updates\r\n",
					"on target.source_id=updates.source_id\r\n",
					"WHEN MATCHED THEN\r\n",
					"  UPDATE SET *\r\n",
					"WHEN NOT MATCHED\r\n",
					"  THEN INSERT *"
				],
				"execution_count": 17
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"select * from odw_curated_db.inspector"
				],
				"execution_count": 16
			}
		]
	}
}