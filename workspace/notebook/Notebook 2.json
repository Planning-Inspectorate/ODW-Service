{
	"name": "Notebook 2",
	"properties": {
		"folder": {
			"name": "odw-harmonised"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "74183f16-9f03-43c4-9a69-0cd2a6f7e8d7"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw",
				"name": "pinssynspodw",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"spark.sql('Drop table odw_harmonised_db.casework_nsip_advice_dim_temp')\n",
					"df = spark.sql(f\"SELECT * FROM {hrm_db}.casework_nsip_advice_dim WHERE IsActive = 'Y' LIMIT 6\")\n",
					"df.write.format(\"delta\").mode(\"overwrite\").saveAsTable(f\"{hrm_db}.{hrm_table}\")"
				],
				"execution_count": 333
			},
			{
				"cell_type": "code",
				"source": [
					"std_db = 'odw_standardised_db'\n",
					"hrm_db = 'odw_harmonised_db'\n",
					"std_table = 'nsip_s51_advice'\n",
					"hrm_table = 'casework_nsip_advice_dim_temp'\n",
					"\n",
					"hrm_incremental_key = 'NSIPAdviceID'\n",
					"hrm_primary_key = 'AdviceNodeID'"
				],
				"execution_count": 315
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"mapping = {\n",
					"    'AdviceNodeID': 'caseid',\n",
					"    'AdviceTitle': 'title',\n",
					"    'CaseReference': 'casereference',\n",
					"    'AdviceReference': 'advicereference',\n",
					"    'AdviceStatus': 'status',\n",
					"    'Section51Advice': 'Yes',\n",
					"    'Enquirer': 'from',\n",
					"    'EnquirerOrganisation': 'agent',\n",
					"    'EnquiryDate': 'enquirydate',\n",
					"    'EnquiryMethod': 'method',\n",
					"    'Enquiry': 'enquirydetails',\n",
					"    'AdviceFrom': 'advicegivenby',\n",
					"    'AdviceDate': 'advicedate',\n",
					"    'Advice': 'advicedetails',\n",
					"    'AdviceLastModified': None,\n",
					"    'AttachmentCount': None,\n",
					"    'AttachmentID': 'attachmentids',\n",
					"    'AttachmentLastModified': None,\n",
					"    'LastPublishedDate': None,\n",
					"    'CaseNodeID': 'adviceid',\n",
					"    'WelshLanguage': None,\n",
					"    'CaseWorkType': None,\n",
					"    'IngestionDate': 'expected_from'\n",
					"}"
				],
				"execution_count": 316
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.sql import SparkSession\n",
					"from notebookutils import mssparkutils\n",
					"import json\n",
					"import calendar\n",
					"from datetime import datetime, timedelta, date\n",
					"import pandas as pd\n",
					"import os\n",
					"from IPython.display import display\n",
					"\n",
					"spark = SparkSession.builder.getOrCreate()\n",
					"\n",
					"storage_account=mssparkutils.notebook.run('/utils/py_utils_get_storage_account')\n",
					"raw_container = \"abfss://odw-raw@\" + storage_account"
				],
				"execution_count": 332
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Get the latest ingested data in Standardised"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# order by message_enqueue_time ascending the below query\n",
					"latest_ingestion = spark.sql(f\"SELECT * FROM {std_db}.{std_table} WHERE expected_from = (SELECT MAX(expected_from) FROM {std_db}.{std_table})\")\n",
					"\n",
					"# remove the column ingested_datetime and then removing duplicates\n",
					"latest_ingestion = latest_ingestion.toPandas()\n",
					"latest_ingestion = latest_ingestion.drop(columns=['ingested_datetime']).drop_duplicates()\n",
					"\n",
					"create_df = latest_ingestion[latest_ingestion['message_type'] == 'Created']\n",
					"update_df = latest_ingestion[latest_ingestion['message_type'] == 'Updated']\n",
					"delete_df = latest_ingestion[latest_ingestion['message_type'] == 'Deleted']"
				],
				"execution_count": 318
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import hashlib\n",
					"\n",
					"def calculate_md5(row):\n",
					"    row_str = ''.join(map(str, row))\n",
					"    md5_hash = hashlib.md5(row_str.encode()).hexdigest()\n",
					"    return md5_hash\n",
					"\n",
					"def apply_mapping(df):\n",
					"    target_df = pd.DataFrame()\n",
					"    for target_col, source_col in mapping.items():\n",
					"        if source_col in df.columns:\n",
					"            if 'Date' in target_col:\n",
					"                target_df[target_col] = pd.to_datetime(df[source_col])\n",
					"            else:\n",
					"                target_df[target_col] = df[source_col]\n",
					"        else:\n",
					"            target_df[target_col] = source_col\n",
					"\n",
					"    target_df['RowID'] = target_df.apply(calculate_md5, axis=1)\n",
					"\n",
					"    source_system_df = spark.sql(f\"SELECT * FROM {hrm_db}.main_sourcesystem_fact WHERE Description = 'Casework' AND IsActive = 'Y'\")\n",
					"    target_df['SourceSystemID'] = source_system_df.toPandas().at[0, 'SourceSystemID']\n",
					"\n",
					"    target_df['Migrated'] = '1'\n",
					"    target_df['ODTSourceSystem'] = 'ODT'\n",
					"    target_df['ValidTo'] = None\n",
					"    target_df['IsActive'] = 'Y'\n",
					"    target_df[hrm_incremental_key] = ''\n",
					"\n",
					"    return target_df\n",
					"\n",
					"def insert_rows(source_df):\n",
					"    # appending the incremental key\n",
					"    incremental_key_df = spark.sql(f\"SELECT Max({hrm_incremental_key}) AS {hrm_incremental_key} FROM {hrm_db}.{hrm_table}\")\n",
					"    max_id = int(incremental_key_df.toPandas().at[0, hrm_incremental_key])\n",
					"    for index, rows in source_df.iterrows():\n",
					"        max_id += 1\n",
					"        source_df.loc[index, hrm_incremental_key] = str(max_id)\n",
					"\n",
					"    # appending the rows in the table\n",
					"    df_to_append = spark.createDataFrame(source_df)\n",
					"    df_to_append.write.format(\"delta\").mode(\"append\").saveAsTable(f\"{hrm_db}.{hrm_table}\")\n",
					"\n",
					"def insert_rows_in_df(source_df, target_df, incremental_key):\n",
					"    # appending the incremental key\n",
					"    max_id = target_df[incremental_key].max()\n",
					"    for index, rows in source_df.iterrows():\n",
					"        max_id += 1\n",
					"        source_df.loc[index, incremental_key] = str(max_id)\n",
					"\n",
					"    return target_df.append(source_df)\n",
					"\n",
					"def soft_delete_rows_from_df(source_df, target_df, pk, deletion_time):\n",
					"    # Create a boolean mask to identify rows present in source_df\n",
					"    mask = target_df[pk].isin(source_df[pk])\n",
					"\n",
					"    # Update ValidTo column only for the rows present in source_df\n",
					"    target_df.loc[mask, 'IsActive'] = 'N'\n",
					"    target_df.loc[mask, 'ValidTo'] = deletion_time\n",
					"\n",
					"    return target_df\n",
					""
				],
				"execution_count": 374
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Handling new rows"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# converting the dataframe into harmonised schema\n",
					"source_df = apply_mapping(create_df)\n",
					"insert_rows(source_df)"
				],
				"execution_count": 346
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Handling updated rows"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"source_df = apply_mapping(update_df)\n",
					"source_df"
				],
				"execution_count": 356
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# converting the dataframe into harmonised schema\n",
					"source_df = apply_mapping(update_df)\n",
					"# source_df = source_df.sort_values(by='message_enqueue_time')\n",
					"\n",
					"target_df = spark.sql(f\"SELECT * FROM {hrm_db}.{hrm_table} WHERE IsActive = 'Y'\").toPandas()\n",
					"\n",
					"current_timestamp = datetime.now()\n",
					"\n",
					"for index, row in source_df.iterrows():\n",
					"    existing_row = target_df[target_df[hrm_primary_key] == row[hrm_primary_key]]\n",
					"    soft_delete_rows_from_df(existing_row, target_df, hrm_primary_key, current_timestamp)\n",
					"    insert_rows_in_df(row, target_df, hrm_incremental_key)\n",
					"#     display(existing_row)\n",
					"#     existing_row['Section51Advice'] = 'No'\n",
					"#     display(existing_row)\n",
					"\n",
					"\n",
					"# target_df = soft_delete_rows_from_df(source_df, target_df, hrm_primary_key)\n",
					"\n",
					"\n",
					"# max_id = int(target_df[hrm_incremental_key].max())\n",
					"# for index, rows in source_df.iterrows():\n",
					"#     max_id += 1\n",
					"#     source_df.loc[index, hrm_incremental_key] = str(max_id)\n",
					"\n",
					"# target_df = target_df.append(source_df)\n",
					"\n",
					"display(target_df)\n",
					"\n",
					"\n",
					"# TODO: for each updated row (orderd by message datetime)\n",
					"# insert a new row in the table and update the existing one while setting it IsActive = 'N'"
				],
				"execution_count": 376
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Handling deleted rows"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# converting the dataframe into harmonised schema\n",
					"source_df = apply_mapping(delete_df)\n",
					"\n",
					"# extracting the deleted primary keys as a comma seperated string\n",
					"comma_separated_ids = ','.join([f\"'{str(value)}'\" for value in source_df[hrm_primary_key]])\n",
					"\n",
					"current_timestamp = datetime.now()\n",
					"\n",
					"if comma_separated_ids:\n",
					"    # updating the deleted rows\n",
					"    spark.sql(f\"\"\"\n",
					"        UPDATE {hrm_db}.{hrm_table}\n",
					"        SET IsActive = 'N', ValidTo = '{current_timestamp}'\n",
					"        WHERE {hrm_primary_key} IN ({comma_separated_ids})\n",
					"    \"\"\")"
				],
				"execution_count": 323
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"select * from odw_harmonised_db.casework_nsip_advice_dim_temp"
				],
				"execution_count": 347
			}
		]
	}
}