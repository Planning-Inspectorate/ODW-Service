{
	"name": "Notebook 2",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "4d5c0f71-0173-43e9-8f98-97aef0be949d"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw",
				"name": "pinssynspodw",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.2",
				"nodeCount": 3,
				"cores": 8,
				"memory": 56,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import pandas as pd"
				],
				"execution_count": 98
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"d = {'col1': [1, 2], 'col2': [3, 4]}"
				],
				"execution_count": 99
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df = pd.DataFrame(data=d)"
				],
				"execution_count": 100
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import io\r\n",
					"output = io.BytesIO()\r\n",
					"df.to_csv(output)"
				],
				"execution_count": 101
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"db_name =  \"odw_config_db\"\r\n",
					"table_name = \"datalabs_log\"\r\n",
					"target_container = \"abfss://odw-raw@pinsstodwdevuks9h80mb.dfs.core.windows.net/\"\r\n",
					"target_folder = \"config/datalabs_log/\"\r\n",
					"akv_name=\"pinskvsynwodwdevuks\"\r\n",
					"secret_name=\"datalab-connectionstring\"\r\n",
					"kv_linked_service=\"ls_kv\"\r\n",
					"share_name =\"datalab\"\r\n",
					"directory_path = \"ODW/HR/\""
				],
				"execution_count": 102
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from azure.storage.fileshare import ShareDirectoryClient\r\n",
					"from notebookutils import mssparkutils\r\n",
					"creds = mssparkutils.credentials.getSecret(akv_name, secret_name, kv_linked_service)\r\n",
					"parent_dir = ShareDirectoryClient.from_connection_string(conn_str=creds, share_name=share_name, directory_path=directory_path)"
				],
				"execution_count": 103
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"parent_dir.delete_file(\"example.csv\")"
				],
				"execution_count": 130
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"parent_dir.upload_file(\"example.csv\", data=output)"
				],
				"execution_count": 131
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					""
				],
				"execution_count": 108
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%run \"utils/py_logging_decorator\""
				],
				"execution_count": 119
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# @logging_to_appins\r\n",
					"def testfunc():\r\n",
					"    mssparkutils.notebook.exit(\"hello world\")"
				],
				"execution_count": 132
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def logging_test(func):\r\n",
					"    from notebookutils import mssparkutils\r\n",
					"\r\n",
					"    def wrapper(*args, **kwargs):\r\n",
					"        from notebookutils import mssparkutils\r\n",
					"\r\n",
					"        args_repr = [repr(a) for a in args]\r\n",
					"        kwargs_repr = [f\"{k}={v!r}\" for k, v in kwargs.items()]\r\n",
					"        signature = \", \".join(args_repr + kwargs_repr)\r\n",
					"        # logger.info(f\"function {func.__name__} called with args {signature}\")\r\n",
					"        try:\r\n",
					"            result = func(*args, **kwargs)\r\n",
					"            return result\r\n",
					"        except mssparkutils.handlers.notebookHandler.NotebookExit as e:\r\n",
					"            print(\"1\")\r\n",
					"            # logger.info(f\"Notebook exited with value {e}\")\r\n",
					"        except Exception as e:\r\n",
					"            print(\"2\")\r\n",
					"            # logger.exception(e)\r\n",
					"            raise e\r\n",
					"    return wrapper\r\n",
					"\r\n",
					"@logging_test\r\n",
					"def testfunc():\r\n",
					"    mssparkutils.notebook.exit(\"hello world\")\r\n",
					"\r\n",
					"testfunc()"
				],
				"execution_count": 137
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.sql import SparkSession\r\n",
					"from pyspark.sql.functions import lit\r\n",
					"spark = SparkSession.builder.getOrCreate()\r\n",
					"spark.sql(\"drop table if exists odw_config_db.datalabs_log_test\")"
				],
				"execution_count": 95
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					""
				],
				"execution_count": null
			}
		]
	}
}