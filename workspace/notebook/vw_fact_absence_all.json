{
	"name": "vw_fact_absence_all",
	"properties": {
		"folder": {
			"name": "odw-curated/saphr"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw34",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "ced77e77-939f-4c57-b5da-06529e9da596"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw34",
				"name": "pinssynspodw34",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw34",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#### The purpose of this notebook is to read data from Harmoised layer and build a view & table for Power BI use.\n",
					"\n",
					"**Author** &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   **Created Date** &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; **Description**  \n",
					"Prathap Adicherla &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;01-April-2025 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Fact Absence view :\n",
					"\n",
					"Combining sickness-related absences (with additional sickness details like duration and classification) with non-sickness absences\n",
					"\n",
					"Calculating standardized leave metrics (Leave_ONS) based on work schedules\n",
					"\n",
					"Providing a comprehensive dataset for absence analysis, including type, duration, and work schedule adjustments\n",
					";"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"from odw.core.util.util import Util\n",
					"from pyspark.sql.functions import udf, col, lit, when, coalesce, concat, sum, avg, max, min, count, countDistinct, date_format, to_date, datediff, months_between, year, month,  hour, minute, second, expr, asc, desc\n",
					"from pyspark.sql.types import DateType, TimestampType, StringType, IntegerType, FloatType, DoubleType, BooleanType, StructType, StructField, ArrayType, MapType\n",
					"from pyspark.sql.window import Window\n",
					"from pyspark.sql.functions import row_number, rank, dense_rank, lag, lead, ntile\n",
					"from pyspark.sql import SQLContext\n",
					"from pyspark.sql import DataFrame\n",
					"from pyspark.sql import functions as F\n",
					"from pyspark.sql.avro.functions import from_avro, to_avro\n",
					"from pyspark.sql.streaming import DataStreamReader, DataStreamWriter\n",
					"from pyspark.sql.utils import AnalysisException\n",
					"from pyspark.sql.catalog import Catalog\n",
					"from pyspark.sql.column import Column\n",
					"from pyspark.sql.group import GroupedData\n",
					"from pyspark.sql.pandas.functions import pandas_udf\n",
					"\n",
					"from datetime import datetime, timedelta\n",
					"import pandas as pd\n",
					"import numpy as np"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"from odw.core.util.logging_util import LoggingUtil"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"import json\n",
					"\n",
					"# Initialize result dictionary\n",
					"result = {\n",
					"    \"status\": \"success\",\n",
					"    \"record_count\": 0,\n",
					"    \"error_message\": None\n",
					"}\n",
					"\n",
					"try:\n",
					"    LoggingUtil().log_info(\"Starting HR Fact Absence All setup\")\n",
					"    \n",
					"    # Get storage account \n",
					"    storage_account = Util.get_storage_account()\n",
					"    LoggingUtil().log_info(f\"Using storage account: {storage_account}\")\n",
					"    \n",
					"    # Fix the path\n",
					"    storage_account = storage_account.rstrip('/')\n",
					"    delta_table_path = f\"abfss://odw-curated@{storage_account}/saphr/pbi_fact_absence_all\"\n",
					"    LoggingUtil().log_info(f\"Delta table will be created at: {delta_table_path}\")\n",
					"    \n",
					"    # Create/refresh view\n",
					"    LoggingUtil().log_info(\"Creating view odw_curated_db.vw_fact_absence_all\")\n",
					"    spark.sql(\"\"\"\n",
					"    CREATE OR REPLACE VIEW odw_curated_db.vw_fact_absence_all AS\n",
					"    SELECT\n",
					"        faa.absencedate,\n",
					"        ROUND(CAST(faa.absencehours AS FLOAT), 3) AS absencehours,  -- Explicitly cast to FLOAT and round to 3 decimal places\n",
					"        faa.staffnumber,\n",
					"        faa.WorkScheduleRule,\n",
					"        faa.AbsType,\n",
					"        faa.SicknessGroup,\n",
					"        faa.AttendanceorAbsenceType,\n",
					"        faa.Leave,\n",
					"        ROUND(CASE DAYOFWEEK(absencedate)\n",
					"            WHEN 2 THEN ws.Mo/7.4  -- Monday\n",
					"            WHEN 3 THEN ws.Tu/7.4   -- Tuesday\n",
					"            WHEN 4 THEN ws.We/7.4   -- Wednesday\n",
					"            WHEN 5 THEN ws.Th/7.4   -- Thursday\n",
					"            WHEN 6 THEN ws.Fr/7.4   -- Friday\n",
					"            ELSE NULL\n",
					"        END, 3) AS Leave_ONS,\n",
					"        faa.PSGroup,\n",
					"        faa.PersonnelArea,\n",
					"        faa.PersonnelSubarea,\n",
					"        fas.sickness_id,\n",
					"        fas.Days AS sicknesslength,\n",
					"        CASE\n",
					"            WHEN fas.Days > 20.0 THEN 'long-term'\n",
					"            ELSE 'short-term'\n",
					"        END AS sicknesslengthtype\n",
					"    FROM\n",
					"        odw_harmonised_db.sap_hr_fact_absence_all faa\n",
					"        LEFT JOIN odw_harmonised_db.sap_hr_fact_absence_sickness fas ON faa.staffnumber = fas.StaffNumber\n",
					"        LEFT JOIN odw_standardised_db.work_schedules ws ON faa.WorkScheduleRule = ws.WorkScheduleRule\n",
					"    WHERE\n",
					"        faa.AttendanceorAbsenceType = 'Sickness'\n",
					"        AND\n",
					"        faa.absencedate BETWEEN fas.sickness_start AND fas.sickness_end\n",
					"    \n",
					"    UNION\n",
					"    \n",
					"    SELECT\n",
					"        faa.absencedate,\n",
					"        ROUND(CAST(faa.absencehours AS FLOAT), 3) AS absencehours,  -- Explicitly cast to FLOAT and round to 3 decimal places\n",
					"        faa.staffnumber,\n",
					"        faa.WorkScheduleRule,\n",
					"        faa.AbsType,\n",
					"        faa.SicknessGroup,\n",
					"        faa.AttendanceorAbsenceType,\n",
					"        faa.Leave,\n",
					"        ROUND(CASE DAYOFWEEK(absencedate)\n",
					"            WHEN 2 THEN ws.Mo/7.4  -- Monday\n",
					"            WHEN 3 THEN ws.Tu/7.4   -- Tuesday\n",
					"            WHEN 4 THEN ws.We/7.4   -- Wednesday\n",
					"            WHEN 5 THEN ws.Th/7.4   -- Thursday\n",
					"            WHEN 6 THEN ws.Fr/7.4   -- Friday\n",
					"            ELSE NULL\n",
					"        END, 3) AS Leave_ONS,\n",
					"        faa.PSGroup,\n",
					"        faa.PersonnelArea,\n",
					"        faa.PersonnelSubarea,\n",
					"        NULL AS sickness_id,\n",
					"        NULL AS sicknesslength,\n",
					"        NULL AS sicknesslengthtype\n",
					"    FROM\n",
					"        odw_harmonised_db.sap_hr_fact_absence_all faa\n",
					"        LEFT JOIN odw_standardised_db.work_schedules ws ON faa.WorkScheduleRule = ws.WorkScheduleRule\n",
					"    WHERE\n",
					"        faa.AttendanceorAbsenceType <> 'Sickness'\n",
					"    \"\"\")\n",
					"    LoggingUtil().log_info(\"Successfully created view odw_curated_db.vw_fact_absence_all\")\n",
					"    \n",
					"    # Count records in view\n",
					"    fact_absence_count = spark.sql(\"SELECT COUNT(*) as count FROM odw_curated_db.vw_fact_absence_all\").collect()[0]['count']\n",
					"    LoggingUtil().log_info(f\"View contains {fact_absence_count} absence records\")\n",
					"    \n",
					"    # Drop the table if it exists\n",
					"    LoggingUtil().log_info(\"Dropping table odw_curated_db.pbi_fact_absence_all if it exists\")\n",
					"    spark.sql(\"\"\"\n",
					"    DROP TABLE IF EXISTS odw_curated_db.pbi_fact_absence_all\n",
					"    \"\"\")\n",
					"    LoggingUtil().log_info(\"Table dropped or did not exist\")\n",
					"    \n",
					"    # Create table from view with specified location and explicit casting\n",
					"    LoggingUtil().log_info(\"Creating table odw_curated_db.pbi_fact_absence_all from view with specified location\")\n",
					"    spark.sql(f\"\"\"\n",
					"    CREATE OR REPLACE TABLE odw_curated_db.pbi_fact_absence_all\n",
					"    USING delta\n",
					"    LOCATION '{delta_table_path}'\n",
					"    AS \n",
					"    SELECT \n",
					"        absencedate,\n",
					"        ROUND(CAST(absencehours AS DOUBLE), 3) AS absencehours,  -- Explicitly cast to DOUBLE and round to 3 decimal places\n",
					"        staffnumber,\n",
					"        WorkScheduleRule,\n",
					"        AbsType,\n",
					"        SicknessGroup,\n",
					"        AttendanceorAbsenceType,\n",
					"        Leave,\n",
					"        Leave_ONS,\n",
					"        PSGroup,\n",
					"        PersonnelArea,\n",
					"        PersonnelSubarea,\n",
					"        sickness_id,\n",
					"        sicknesslength,\n",
					"        sicknesslengthtype\n",
					"    FROM odw_curated_db.vw_fact_absence_all\n",
					"    \"\"\")\n",
					"    \n",
					"    # Count records in table - this is our final record count\n",
					"    table_count = spark.sql(\"SELECT COUNT(*) as count FROM odw_curated_db.pbi_fact_absence_all\").collect()[0]['count']\n",
					"    result[\"record_count\"] = table_count\n",
					"    LoggingUtil().log_info(f\"Created table with {table_count} records at location: {delta_table_path}\")\n",
					"    \n",
					"    LoggingUtil().log_info(\"HR Fact Absence All setup completed successfully\")\n",
					"\n",
					"except Exception as e:\n",
					"    # Capture error information\n",
					"    error_msg = f\"Error in HR Fact Absence All setup: {str(e)}\"\n",
					"    LoggingUtil().log_error(error_msg)\n",
					"    LoggingUtil().log_exception(e)\n",
					"    \n",
					"    # Try to get current record count even in case of error\n",
					"    try:\n",
					"        error_count = spark.sql(\"SELECT COUNT(*) as count FROM odw_curated_db.pbi_fact_absence_all\").collect()[0]['count']\n",
					"        result[\"record_count\"] = error_count\n",
					"    except:\n",
					"        result[\"record_count\"] = 0\n",
					"    \n",
					"    # Update result for error case\n",
					"    result[\"status\"] = \"failed\"\n",
					"    result[\"error_message\"] = error_msg[:300]  # Truncate to 300 characters\n",
					"    \n",
					"    # Re-raise the exception to ensure the notebook fails properly\n",
					"    raise e\n",
					"\n",
					"finally:\n",
					"    # Always flush logs regardless of success or failure\n",
					"    LoggingUtil().log_info(\"Flushing logs\")\n",
					"    LoggingUtil().flush_logging()\n",
					"    \n",
					"    # Output the result as JSON for ADF to capture\n",
					"    mssparkutils.notebook.exit(json.dumps(result))"
				],
				"execution_count": null
			}
		]
	}
}