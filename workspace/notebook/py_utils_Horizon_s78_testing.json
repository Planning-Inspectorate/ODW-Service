{
	"name": "py_utils_Horizon_s78_testing",
	"properties": {
		"folder": {
			"name": "utils/data-validation"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "a935c62f-1bd8-4841-ab48-9fb5cff1f315"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw",
				"name": "pinssynspodw",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 32,
				"automaticScaleJobs": true
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"import json\r\n",
					"from pyspark.sql.types import *\r\n",
					"from pyspark.sql import DataFrame\r\n",
					"from pyspark.sql import functions as F\r\n",
					"import pprint"
				],
				"execution_count": 63
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"The below testings ar eregarding tracing records accross data tables in Horizon s78 (phase 1)."
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def check_count_match(hzn_table: str, hzn_table_2: str, primary_k_1:str, primary_k_2:str) -> tuple: \r\n",
					"    df_hzn_1: Dataframe = spark.sql(f\"\"\"\r\n",
					"                                SELECT DISTINCT {primary_k_1}\r\n",
					"                                FROM odw_standardised_db.{hzn_table}\r\n",
					"                            \"\"\")\r\n",
					"\r\n",
					"    df_hzn_2: Dataframe = spark.sql(f\"\"\"\r\n",
					"                                SELECT DISTINCT {primary_k_2}\r\n",
					"                                FROM odw_standardised_db.{hzn_table_2}\r\n",
					"                                \r\n",
					"                            \"\"\")\r\n",
					"\r\n",
					"    return df_hzn_1.count(), df_hzn_2.count(), df_hzn_1.count() == df_hzn_2.count()\r\n",
					""
				],
				"execution_count": 16
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# All tables are expected to not have the same amount of records from the master table ( horizon_Cases_s78) eg. for every caseunique id in case specialism there could be from 0-3 records.\r\n",
					"# All tables that have primary key = casenodeid they have same amount records and are expected to have duplicates as they are pivot tables confirmed with Gareth. (10/02/2025)\r\n",
					"#Also will not check if the count macth for typeofprocedure and horizon_typeofreasonforcase as they are reference tables and also they are not directly connected with horizon cases_s78.\r\n",
					"\r\n",
					"count_hzn_1, count_hzn_2, count_records = check_count_match('horizoncases_s78','cases_specialisms','casereference','caseReference')\r\n",
					"print(f\"Count of horizon_cases_s78: {count_hzn_1}, Count of cases_specialisms: {count_hzn_2}, Does the count match?: {count_records}\")\r\n",
					"\r\n",
					"count_hzn_1, count_hzn_2, count_records = check_count_match('horizoncases_s78','casesitestrings','caseuniqueid','casenodeid')\r\n",
					"print(f\"Count of horizon_cases_s78: {count_hzn_1}, Count of casesitestrings: {count_hzn_2}, Does the count match?: {count_records}\")\r\n",
					"\r\n",
					"count_hzn_1, count_hzn_2, count_records = check_count_match('horizoncases_s78','casedocumentdatesdates','caseuniqueid','casenodeid')\r\n",
					"print(f\"Count of horizon_cases_s78: {count_hzn_1}, Count of casedocumentdatesdates: {count_hzn_2}, Does the count match?: {count_records}\")\r\n",
					"\r\n",
					"count_hzn_1, count_hzn_2, count_records = check_count_match('horizoncases_s78','vw_case_dates','caseuniqueid','casenodeid')\r\n",
					"print(f\"Count of horizon_cases_s78: {count_hzn_1}, Count of vw_case_dates: {count_hzn_2}, Does the count match?: {count_records}\")\r\n",
					"\r\n",
					"\r\n",
					"count_hzn_1, count_hzn_2, count_records = check_count_match('horizoncases_s78','vw_addadditionaldata','caseuniqueid','AppealRefNumber')\r\n",
					"print(f\"Count of horizon_cases_s78: {count_hzn_1}, Count of vw_addadditionaldata: {count_hzn_2}, Does the count match?: {count_records}\")\r\n",
					"\r\n",
					"\r\n",
					"count_hzn_1, count_hzn_2, count_records = check_count_match('horizoncases_s78','vw_additionalfields','caseuniqueid','AppealRefNumber')\r\n",
					"print(f\"Count of horizon_cases_s78: {count_hzn_1}, Count of vw_additionalfields: {count_hzn_2}, Does the count match?: {count_records}\")\r\n",
					"\r\n",
					""
				],
				"execution_count": 17
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def check_dupl_records(hzn_table:str, primary_k:str)->True:\r\n",
					"        df: Dataframe = spark.sql(f\"\"\"\r\n",
					"                                SELECT distinct 1\r\n",
					"                                FROM odw_standardised_db.{hzn_table}\r\n",
					"                                GROUP BY {primary_k}\r\n",
					"                                HAVING COUNT(*) > 1 \r\n",
					"                                Limit 1\r\n",
					"                            \"\"\")\r\n",
					"        # If df is empty, no duplicates; otherwise, duplicates exist\r\n",
					"        return  df.count() != 0"
				],
				"execution_count": 18
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"print('Does cases_specialism have duplicates?:', check_dupl_records('cases_specialisms','caseReference'))\r\n",
					"print('Does horizoncases_s78 have duplicates?:',check_dupl_records('horizoncases_s78','casereference'))\r\n",
					"print('Does casesitestrings have duplicates?:', check_dupl_records('casesitestrings','casenodeid'))\r\n",
					"print('Does casedocumentdatesdates have duplicates?:',check_dupl_records('casedocumentdatesdates','casenodeid'))\r\n",
					"print('Does vw_case_dates have duplicates?:', check_dupl_records('vw_case_dates','casenodeid'))\r\n",
					"print('Does vw_addadditionaldata have duplicates?:',check_dupl_records('vw_addadditionaldata','AppealRefNumber'))\r\n",
					"print('Does vw_additionalfields have duplicates?:',check_dupl_records('vw_additionalfields','AppealRefNumber'))\r\n",
					"print('Does typeofprocedure have duplicates?:',check_dupl_records('typeofprocedure','Name'))\r\n",
					"print('Does horizon_typeofreasonforcase have duplicates?:',check_dupl_records('horizon_typeofreasonforcase','Id'))"
				],
				"execution_count": 19
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#### Trace some records to see if they exists in all horizon tables in phase 1. Below you will see SQL queeries."
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"We are going to take casereference = 'APP/B3030/W/17/3184391' or  'APP/L2630/W/16/3155500'from horizon_cases_s78 and check if records exists in the following tables. Each table I am checking I am using their primary key to check accordingly."
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"SELECT *\r\n",
					"FROM odw_standardised_db.horizoncases_s78\r\n",
					"-- where casereference = 'APP/B3030/W/17/3184391'\r\n",
					"where casereference = 'APP/L2630/W/16/3155500'\r\n",
					"\r\n",
					"\r\n",
					""
				],
				"execution_count": 67
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"case specialism can have more records by casereference."
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"create a vie csl"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"select  distinct * from odw_standardised_db.cases_specialisms\r\n",
					"where casereference = '3155500'\r\n",
					"--where casereference = '3184391'"
				],
				"execution_count": 66
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"SELECT distinct *\r\n",
					"FROM odw_standardised_db.cases_specialisms\r\n",
					"-- where  casereference = '3184391'\r\n",
					"where  casereference =  '3155500'\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					""
				],
				"execution_count": 68
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"SELECT *\r\n",
					"FROM odw_standardised_db.casesitestrings\r\n",
					"--where casenodeid = '23849934'\r\n",
					"where casenodeid = '17248610'\r\n",
					"    "
				],
				"execution_count": 69
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"SELECT *\r\n",
					"FROM odw_standardised_db.casedocumentdatesdates\r\n",
					"--where casenodeid = '23849934'\r\n",
					"where casenodeid = '17248610'"
				],
				"execution_count": 70
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"SELECT *\r\n",
					"FROM odw_standardised_db.vw_case_dates\r\n",
					"-- where casenodeid = '23849934'\r\n",
					"where casenodeid = '17248610'"
				],
				"execution_count": 71
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"SELECT *\r\n",
					"FROM odw_standardised_db.vw_addadditionaldata\r\n",
					"-- where appealrefnumber = '3184391'\r\n",
					"where appealrefnumber = '3155500'"
				],
				"execution_count": 73
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"SELECT *\r\n",
					"FROM odw_standardised_db.vw_additionalfields\r\n",
					"-- where appealrefnumber = '3184391'\r\n",
					" where appealrefnumber = '3155500'"
				],
				"execution_count": 72
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"This table `horizon_appeal_s78_final` is the merged table that includes all horizon data tables. \r\n",
					"For this `casereference = 'APP/L2630/W/16/3155500'` we are expected to see 2 records per casereference as in `casespecialism` table there are 2 different info for casespecialism ( 1 to many relationship)"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"SELECT *\r\n",
					"FROM odw_standardised_db.horizon_appeal_s78_final\r\n",
					"-- where casereference = 'APP/B3030/W/17/3184391'\r\n",
					"where casereference = 'APP/L2630/W/16/3155500'"
				],
				"execution_count": 75
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"The below two tables are reference tables and thats why we dont have that many records.\r\n",
					""
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"SELECT *\r\n",
					"FROM odw_standardised_db.typeofprocedure\r\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"SELECT *\r\n",
					"FROM odw_standardised_db.horizon_typeofreasonforcase\r\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					""
				],
				"execution_count": null
			}
		]
	}
}