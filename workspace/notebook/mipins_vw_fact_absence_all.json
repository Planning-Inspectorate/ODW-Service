{
	"name": "mipins_vw_fact_absence_all",
	"properties": {
		"folder": {
			"name": "odw-curated"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "8e412705-59a8-46ab-80a3-71fe41b63004"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw",
				"name": "pinssynspodw",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"CREATE OR REPLACE VIEW odw_curated_db.vw_mipins_fact_absence_all\r\n",
					"AS\r\n",
					"\r\n",
					"SELECT DISTINCT\r\n",
					"\r\n",
					"    T1.AbsenceStartDate,\r\n",
					"    T1.AbsenceEndDate,\r\n",
					"    T1.Hours AS AbsenceHours,\r\n",
					"    T1.EmployeeID AS StaffNumber,\r\n",
					"    T6.WorkScheduleRule,\r\n",
					"    T1.AbsenceType,\r\n",
					"    T1.SicknessGroup,\r\n",
					"    CASE \r\n",
					"        WHEN AbsenceType = 'Sickness' THEN 'Sickness'\r\n",
					"        WHEN AbsenceType LIKE '%Annual%' THEN 'Annual'\r\n",
					"        ElSE '0'\r\n",
					"    END AS AbsenceGroup,\r\n",
					"    CASE    \r\n",
					"        WHEN T6.WorkDayHours = 0 THEN T1.HOURS\r\n",
					"        WHEN T6.WorkDayHours = '' THEN T1.HOURS\r\n",
					"        WHEN T6.WorkDayHours IS NULL THEN T1.HOURS\r\n",
					"        ELSE T1.Hours/T6.WorkDayHours\r\n",
					"    END AS Leave,\r\n",
					"\tcase date_part(\"DAYOFWEEK\",AbsenceStartDate)\r\n",
					"\t\twhen 2 then T6.WorkDayHours/7.4\r\n",
					"\t\twhen 3 then T6.WorkDayHours/7.4\r\n",
					"\t\twhen 4 then T6.WorkDayHours/7.4\r\n",
					"\t\twhen 5 then T6.WorkDayHours/7.4\r\n",
					"\t\twhen 6 then T6.WorkDayHours/7.4\r\n",
					"\t\telse null\r\n",
					"\tend as LeaveONS,\r\n",
					"    T6.WorkDayHours,\r\n",
					"    T5.Description PayBand,\r\n",
					"    T5.PSGroupCode AS PSGroup,\r\n",
					"    T3.Description AS PersonnelArea,\r\n",
					"    T4.Description AS PersonnelSubArea,\r\n",
					"    T1.AbsenceID AS SicknessID,\r\n",
					"\tT1.Days as SicknessLength,\r\n",
					"    CASE \r\n",
					"        WHEN CAST(Days AS FLOAT) > 20.0 then 'long-term'\r\n",
					"\t\tELSE 'short-term'\r\n",
					"    END AS SicknessLengthType\r\n",
					"\r\n",
					"FROM odw_harmonised_db.hr_absence_dim T1\r\n",
					"LEFT JOIN odw_harmonised_db.hr_record_fact T2 ON T1.EmployeeID=T2.EmployeeID AND T2.IsActive = 'Y'\r\n",
					"LEFT JOIN odw_harmonised_db.hr_personnel_area_dim T3 ON T3.PersonnelAreaID=T2.PersonnelAreaID AND T3.IsActive = 'Y'\r\n",
					"LEFT JOIN odw_harmonised_db.hr_personnel_sub_area_dim T4 ON T4.PersonnelSubAreaID=T2.PersonnelSubAreaID AND T4.IsActive = 'Y'\r\n",
					"LEFT JOIN odw_harmonised_db.hr_payband_dim T5 ON T5.PayBandID=T2.PayBandID AND T5.IsActive = 'Y'\r\n",
					"LEFT JOIN odw_harmonised_db.hr_work_schedule_dim T6 ON T6.WorkScheduleID = T2.WorkScheduleID AND T6.IsActive = 'Y'\r\n",
					"\r\n",
					"WHERE T1.IsActive = 'Y'\r\n",
					""
				],
				"execution_count": 5
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"spark.sql(f\"drop table if exists odw_curated_db.mipins_fact_absence_all;\")"
				],
				"execution_count": 6
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"create or replace table odw_curated_db.mipins_fact_absence_all\r\n",
					"using delta\r\n",
					"as\r\n",
					"SELECT * FROM odw_curated_db.vw_mipins_fact_absence_all"
				],
				"execution_count": 7
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"[Monday 16:04] Cross, Michael\r\n",
					"\r\n",
					"SET ANSI_NULLS ON\r\n",
					"\r\n",
					"GO\r\n",
					"\r\n",
					" \r\n",
					"\r\n",
					"SET QUOTED_IDENTIFIER ON\r\n",
					"\r\n",
					"GO\r\n",
					"\r\n",
					" \r\n",
					"\r\n",
					" \r\n",
					"\r\n",
					" \r\n",
					"\r\n",
					"CREATE procedure [sap_hr].[build_fact_absence_sickness]\r\n",
					"\r\n",
					"as\r\n",
					"\r\n",
					" \r\n",
					"\r\n",
					"truncate table sap_hr.fact_absence_sickness;\r\n",
					"\r\n",
					" \r\n",
					"\r\n",
					"declare @sickness table ([row_num] int\r\n",
					"\r\n",
					"\t\t\t\t\t\t,[Staff Number] int\r\n",
					"\r\n",
					"\t\t\t\t\t\t,[Days] float\r\n",
					"\r\n",
					"\t\t\t\t\t\t,[Sickness Group] varchar(50)\r\n",
					"\r\n",
					"\t\t\t\t\t\t,contiguous_sickness uniqueidentifier\r\n",
					"\r\n",
					"\t\t\t\t\t\t,next_working_day_after_previous_sickness date\r\n",
					"\r\n",
					"\t\t\t\t\t\t,sickness_start date\r\n",
					"\r\n",
					"\t\t\t\t\t\t,sickness_end date\r\n",
					"\r\n",
					"\t\t\t\t\t\t,previous_sickness_start date\r\n",
					"\r\n",
					"\t\t\t\t\t\t,previous_sickness_end date\r\n",
					"\r\n",
					"\t\t\t\t\t\t,FY varchar(20)\r\n",
					"\r\n",
					"\t\t\t\t\t\t,financial_year varchar(11)\r\n",
					"\r\n",
					"\t\t\t\t\t\t,calendar_year varchar(11)\r\n",
					"\r\n",
					"\t\t\t\t\t\t,[Work Schedule Rule] nvarchar(255)\r\n",
					"\r\n",
					"\t\t\t\t\t\t,sickness_id int);\r\n",
					"\r\n",
					" \r\n",
					"\r\n",
					"/* grab all absence data with absence type of sickness */\r\n",
					"\r\n",
					"with sickness as\r\n",
					"\r\n",
					"(\r\n",
					"\r\n",
					"select \r\n",
					"\r\n",
					"\ta.[Staff Number]\r\n",
					"\r\n",
					"\t,ds.FY as FY_start\r\n",
					"\r\n",
					"\t,de.FY as FY_end\r\n",
					"\r\n",
					"\t,cast(d12.[date] as date) as CY1\r\n",
					"\r\n",
					"\t,cast(d24.[date] as date) as CY2\r\n",
					"\r\n",
					"    ,cast(a.[Start Date] as date) as sickness_start\r\n",
					"\r\n",
					"    ,cast(a.[End Date] as date) as sickness_end\r\n",
					"\r\n",
					"\t,[Days]\r\n",
					"\r\n",
					"\t,[Sickness Group]\r\n",
					"\r\n",
					"\t,[Work Schedule Rule]\r\n",
					"\r\n",
					"from\r\n",
					"\r\n",
					"\tsap_hr.absence_all a\r\n",
					"\r\n",
					"\t\tright outer join Live.dim_date ds on cast(a.[Start Date] as date) = cast(ds.[date] as date)\r\n",
					"\r\n",
					"\t\tright outer join Live.dim_date de on cast(a.[End Date] as date) = cast(de.[date] as date)\r\n",
					"\r\n",
					"\t\tright outer join Live.dim_date d12 on cast(dateadd(yyyy, -1, getDate()) as date) = cast(d12.[date] as date)\r\n",
					"\r\n",
					"\t\tright outer join Live.dim_date d24 on cast(dateadd(yyyy, -2, getDate()) as date) = cast(d24.[date] as date)\r\n",
					"\r\n",
					"\t\twhere\r\n",
					"\r\n",
					"\t[Attendance or Absence Type] = 'Sickness'\r\n",
					"\r\n",
					")\r\n",
					"\r\n",
					", sickness2 as\r\n",
					"\r\n",
					"(select\r\n",
					"\r\n",
					"\t\ts.[Staff Number]\r\n",
					"\r\n",
					"\t\t,s.[Days]\r\n",
					"\r\n",
					"\t\t,LEAD(s.sickness_start, 1, NULL) OVER (PARTITION BY [Staff Number] order by sickness_start DESC) AS prev_sickness_start\r\n",
					"\r\n",
					"\t\t,LEAD(s.sickness_end, 1, NULL) OVER (PARTITION BY [Staff Number] order by sickness_start DESC) AS prev_sickness_end\r\n",
					"\r\n",
					"\t\t,case\r\n",
					"\r\n",
					"\t\t\twhen cast([Live].[DATEADDNOWKNOBH] (LEAD(s.sickness_end, 1, NULL) OVER (PARTITION BY [Staff Number] order by sickness_start DESC), 1) as date) = s.sickness_start then NEWID()\r\n",
					"\r\n",
					"\t\t\twhen cast([Live].[DATEADDNOWKNOBH] (s.sickness_end, 1) as date) = LAG(s.sickness_start, 1, null) over (PARTITION BY [Staff Number] order by sickness_start DESC) then NEWID()\r\n",
					"\r\n",
					"\t\t\telse NULL\r\n",
					"\r\n",
					"\t\tend as contiguous_sickness\r\n",
					"\r\n",
					"\t\t,cast([Live].[DATEADDNOWKNOBH] (LEAD(s.sickness_end, 1, NULL) OVER (PARTITION BY [Staff Number] order by sickness_start DESC), 1) as date) as next_working_day_after_previous_sickness\r\n",
					"\r\n",
					"\t\t,cast([Live].[DATEADDNOWKNOBH] (s.sickness_end, 1) as date) as next_working_day_after_current_sickness\r\n",
					"\r\n",
					"\t\t,s.sickness_start\r\n",
					"\r\n",
					"\t\t,s.sickness_end\r\n",
					"\r\n",
					"\t\t,FY_start as FY\r\n",
					"\r\n",
					"\t\t,case\r\n",
					"\r\n",
					"\t\t\twhen (s.sickness_end >= (SELECT  dateadd(yyyy,-2, cast(cast(YEAR(getdate())-\r\n",
					"\r\n",
					"\t\t\t\t\t\t\t\t\t\t(case \r\n",
					"\r\n",
					"\t\t\t\t\t\t\t\t\t\t\twhen month(getDate()) between 1 and 3 then 1\r\n",
					"\r\n",
					"\t\t\t\t\t\t\t\t\t\t\telse 0\r\n",
					"\r\n",
					"\t\t\t\t\t\t\t\t\t\tend) as varchar)+'0401' as date)))) \r\n",
					"\r\n",
					"\t\t\t\tand\r\n",
					"\r\n",
					"\t\t\t\t(s.sickness_end < (SELECT  dateadd(yyyy,0, cast(cast(YEAR(getdate())-\r\n",
					"\r\n",
					"\t\t\t\t\t\t\t\t\t\t(case \r\n",
					"\r\n",
					"\t\t\t\t\t\t\t\t\t\t\twhen month(getDate()) between 1 and 3 then 1\r\n",
					"\r\n",
					"\t\t\t\t\t\t\t\t\t\t\telse 0\r\n",
					"\r\n",
					"\t\t\t\t\t\t\t\t\t\tend) as varchar)+'0401' as date))))\r\n",
					"\r\n",
					"\t\t\t\tthen 'Previous FY'\r\n",
					"\r\n",
					"\t\t\twhen \r\n",
					"\r\n",
					"\t\t\t\t(s.sickness_end < (SELECT  dateadd(yyyy,-1, cast(cast(YEAR(getdate())-\r\n",
					"\r\n",
					"\t\t\t\t\t\t\t\t\t\t(case \r\n",
					"\r\n",
					"\t\t\t\t\t\t\t\t\t\t\twhen month(getDate()) between 1 and 3 then 1\r\n",
					"\r\n",
					"\t\t\t\t\t\t\t\t\t\t\telse 0\r\n",
					"\r\n",
					"\t\t\t\t\t\t\t\t\t\tend) as varchar)+'0401' as date))))\r\n",
					"\r\n",
					"\t\t\t\tthen 'Older FY'\r\n",
					"\r\n",
					"\t\t\t\twhen \r\n",
					"\r\n",
					"\t\t\t\t(s.sickness_end >= (SELECT  dateadd(yyyy,-1, cast(cast(YEAR(getdate())-\r\n",
					"\r\n",
					"\t\t\t\t\t\t\t\t\t\t(case \r\n",
					"\r\n",
					"\t\t\t\t\t\t\t\t\t\t\twhen month(getDate()) between 1 and 3 then 1\r\n",
					"\r\n",
					"\t\t\t\t\t\t\t\t\t\t\telse 0\r\n",
					"\r\n",
					"\t\t\t\t\t\t\t\t\t\tend) as varchar)+'0401' as date))))\r\n",
					"\r\n",
					"\t\t\t\t\tand\r\n",
					"\r\n",
					"\t\t\t\t(s.sickness_end < (SELECT  dateadd(yyyy,+1, cast(cast(YEAR(getdate())-\r\n",
					"\r\n",
					"\t\t\t\t\t\t\t\t\t\t(case \r\n",
					"\r\n",
					"\t\t\t\t\t\t\t\t\t\t\twhen month(getDate()) between 1 and 3 then 1\r\n",
					"\r\n",
					"\t\t\t\t\t\t\t\t\t\t\telse 0\r\n",
					"\r\n",
					"\t\t\t\t\t\t\t\t\t\tend) as varchar)+'0401' as date))))\r\n",
					"\r\n",
					"\t\t\t\tthen 'Current FY'\r\n",
					"\r\n",
					"\t\t\telse 'Next FY'\r\n",
					"\r\n",
					"\t\t\tend as financial_year\r\n",
					"\r\n",
					" \r\n",
					"\r\n",
					"\t\t,case\r\n",
					"\r\n",
					"\t\t\twhen (s.sickness_end >= (SELECT  cast(dateadd(yyyy,-2, getDate()) as date)))\r\n",
					"\r\n",
					"\t\t\t\tand\r\n",
					"\r\n",
					"\t\t\t\t(s.sickness_end < (SELECT  cast(dateadd(yyyy,-1, getDate()) as date)))\r\n",
					"\r\n",
					"\t\t\tthen 'Previous CY'\r\n",
					"\r\n",
					"\t\t\twhen \r\n",
					"\r\n",
					"\t\t\t\t(s.sickness_end < (SELECT  cast(dateadd(yyyy,-2, getDate()) as date)))\r\n",
					"\r\n",
					"\t\t\t\tthen 'Older CY'\r\n",
					"\r\n",
					"\t\t\t\twhen \r\n",
					"\r\n",
					"\t\t\t\t(s.sickness_end >= (SELECT  cast(dateadd(yyyy,-1, getDate()) as date)))\r\n",
					"\r\n",
					"\t\t\t\t\tand\r\n",
					"\r\n",
					"\t\t\t\t(s.sickness_end < (cast(getDate() as date)))\r\n",
					"\r\n",
					"\t\t\t\tthen 'Current CY'\r\n",
					"\r\n",
					"\t\t\telse 'Future CY'\r\n",
					"\r\n",
					"\t\t\tend as calendar_year\r\n",
					"\r\n",
					"\t\t\t,[Sickness Group]\r\n",
					"\r\n",
					"\t\t\t,[Work Schedule Rule]\r\n",
					"\r\n",
					"from\t\t\t\t\r\n",
					"\r\n",
					"\tsickness s\r\n",
					"\r\n",
					"\t)\r\n",
					"\r\n",
					",sickness3 as\r\n",
					"\r\n",
					"(\r\n",
					"\r\n",
					"select \r\n",
					"\r\n",
					"\t\tROW_NUMBER() OVER(ORDER BY [Staff Number], sickness_start) row_num\r\n",
					"\r\n",
					"\t\t,null as suid\r\n",
					"\r\n",
					"\t\t,[Staff Number]\r\n",
					"\r\n",
					"\t\t,[Days]\r\n",
					"\r\n",
					"\t\t,[Sickness Group]\r\n",
					"\r\n",
					"\t\t,contiguous_sickness\r\n",
					"\r\n",
					"\t\t,next_working_day_after_previous_sickness\r\n",
					"\r\n",
					"\t\t,sickness_start\r\n",
					"\r\n",
					"\t\t,sickness_end\r\n",
					"\r\n",
					"\t\t,prev_sickness_start\r\n",
					"\r\n",
					"\t\t,prev_sickness_end\r\n",
					"\r\n",
					"\t\t,FY\r\n",
					"\r\n",
					"\t\t,financial_year\r\n",
					"\r\n",
					"\t\t,calendar_year\r\n",
					"\r\n",
					"\t\t,[Work Schedule Rule]\r\n",
					"\r\n",
					"from sickness2 s2\r\n",
					"\r\n",
					")\r\n",
					"\r\n",
					"insert into @sickness ([row_num],[Staff Number],[Days],[Sickness Group],contiguous_sickness,next_working_day_after_previous_sickness,sickness_start,sickness_end,previous_sickness_start,previous_sickness_end,FY,financial_year,calendar_year,[Work Schedule Rule],sickness_id)\r\n",
					"\r\n",
					"select \r\n",
					"\r\n",
					"\ts3.row_num\r\n",
					"\r\n",
					"\t,s3.[Staff Number]\r\n",
					"\r\n",
					"\t,s3.[Days]\r\n",
					"\r\n",
					"\t,s3.[Sickness Group]\r\n",
					"\r\n",
					"\t,s3.contiguous_sickness\r\n",
					"\r\n",
					"\t,s3.next_working_day_after_previous_sickness\r\n",
					"\r\n",
					"\t,s3.sickness_start\r\n",
					"\r\n",
					"\t,s3.sickness_end\r\n",
					"\r\n",
					"\t,s3.prev_sickness_start\r\n",
					"\r\n",
					"\t,s3.prev_sickness_end\r\n",
					"\r\n",
					"\t,s3.FY\r\n",
					"\r\n",
					"\t,s3.financial_year\r\n",
					"\r\n",
					"\t,s3.calendar_year\r\n",
					"\r\n",
					"\t,s3.[Work Schedule Rule]\r\n",
					"\r\n",
					"\t,NULL as sickness_id\r\n",
					"\r\n",
					"from \r\n",
					"\r\n",
					"\tsickness3 s3 \r\n",
					"\r\n",
					"order by \r\n",
					"\r\n",
					"\ts3.[Staff Number],s3.sickness_end;\r\n",
					"\r\n",
					" \r\n",
					"\r\n",
					"/*Assign sickness id, grouping contiguous periods of sickness*/\r\n",
					"\r\n",
					"declare @maxloop int\r\n",
					"\r\n",
					"set @maxloop = (select max(row_num) from @sickness)\r\n",
					"\r\n",
					" \r\n",
					"\r\n",
					"declare @loopid int\r\n",
					"\r\n",
					"set @loopid = 1\r\n",
					"\r\n",
					" \r\n",
					"\r\n",
					"declare @sickness_id int\r\n",
					"\r\n",
					"set @sickness_id = 1\r\n",
					"\r\n",
					" \r\n",
					"\r\n",
					"update @sickness set sickness_id = @sickness_id where row_num = 1\r\n",
					"\r\n",
					"set @loopid = 2\r\n",
					"\r\n",
					" \r\n",
					"\r\n",
					" \r\n",
					"\r\n",
					"while @loopid < @maxloop + 1\r\n",
					"\r\n",
					"\tbegin\r\n",
					"\r\n",
					"\t\tdeclare @cs uniqueidentifier = (select contiguous_sickness from @sickness where row_num = @loopid)\r\n",
					"\r\n",
					"\t\tdeclare @sick_start date = (select sickness_start from @sickness where row_num = @loopid)\r\n",
					"\r\n",
					"\t\tdeclare @prev_date date = (select next_working_day_after_previous_sickness from @sickness where row_num = @loopid)\r\n",
					"\r\n",
					" \r\n",
					"\r\n",
					"\t\tif @cs = null\r\n",
					"\r\n",
					"\t\t\tbegin\r\n",
					"\r\n",
					"\t\t\t\tset @sickness_id = @sickness_id + 1\r\n",
					"\r\n",
					"\t\t\t\tupdate @sickness set sickness_id = @sickness_id where row_num = @loopid \r\n",
					"\r\n",
					"\t\t\tend\r\n",
					"\r\n",
					"\t\telse\r\n",
					"\r\n",
					"\t\t\tif @sick_start = @prev_date\r\n",
					"\r\n",
					"\t\t\t\tbegin\r\n",
					"\r\n",
					"\t\t\t\t\tupdate @sickness set sickness_id = @sickness_id where row_num = @loopid\r\n",
					"\r\n",
					"\t\t\t\tend\r\n",
					"\r\n",
					"\t\t\telse\r\n",
					"\r\n",
					"\t\t\t\tbegin\r\n",
					"\r\n",
					"\t\t\t\t\tset @sickness_id = @sickness_id + 1\r\n",
					"\r\n",
					"\t\t\t\t\tupdate @sickness set sickness_id = @sickness_id where row_num = @loopid\r\n",
					"\r\n",
					"\t\t\t\tend\r\n",
					"\r\n",
					"\t\tset @loopid = @loopid + 1\r\n",
					"\r\n",
					"\tend\r\n",
					"\r\n",
					" \r\n",
					"\r\n",
					"/*Group by staff_number and sickness_id*/\r\n",
					"\r\n",
					"insert into sap_hr.fact_absence_sickness\r\n",
					"\r\n",
					"select \r\n",
					"\r\n",
					"\tsickness_id\r\n",
					"\r\n",
					"\t--,s3.[Staff Number]\r\n",
					"\r\n",
					"\t,case left(cast(s3.[Staff Number] as varchar(10)), 1)\r\n",
					"\r\n",
					"\t\t\t\t\twhen '4' then '50' + cast(s3.[Staff Number] as varchar(10))\r\n",
					"\r\n",
					"\t\t\t\t\twhen '5' then '00' + cast(s3.[Staff Number] as varchar(10))\r\n",
					"\r\n",
					"\t\t\t\t\tend as [Staff Number]\r\n",
					"\r\n",
					"\t,sum(s3.[Days]) as [Days]\r\n",
					"\r\n",
					"\t,min(s3.sickness_start) as [sickness_start]\r\n",
					"\r\n",
					"\t,max(s3.sickness_end) as [sickness_end]\r\n",
					"\r\n",
					"\t,max(s3.FY) as FY\r\n",
					"\r\n",
					"\t,max(s3.financial_year) as financial_year\r\n",
					"\r\n",
					"\t,max(s3.calendar_year) as calendar_year\r\n",
					"\r\n",
					"from @sickness s3\r\n",
					"\r\n",
					"\tgroup by \r\n",
					"\r\n",
					"\t\ts3.[Staff Number],\r\n",
					"\r\n",
					"\t\tsickness_id\r\n",
					"\r\n",
					" \r\n",
					"\r\n",
					"GO"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"[Monday 16:08] Cross, Michael\r\n",
					"\r\n",
					"There is another one also....\r\n",
					"\r\n",
					" \r\n",
					"\r\n",
					"SET ANSI_NULLS ON\r\n",
					"\r\n",
					"GO\r\n",
					"\r\n",
					" \r\n",
					"\r\n",
					"SET QUOTED_IDENTIFIER ON\r\n",
					"\r\n",
					"GO\r\n",
					"\r\n",
					" \r\n",
					"\r\n",
					"CREATE procedure [sap_hr].[build_fact_absence_all]\r\n",
					"\r\n",
					"as\r\n",
					"\r\n",
					" \r\n",
					"\r\n",
					"--truncate fact_table\r\n",
					"\r\n",
					"truncate table sap_hr.fact_absence_all;\r\n",
					"\r\n",
					" \r\n",
					"\r\n",
					"declare @sdate date\r\n",
					"\r\n",
					"declare @edate date\r\n",
					"\r\n",
					"declare @stime date\r\n",
					"\r\n",
					"declare @etime date\r\n",
					"\r\n",
					"declare @vdate date\r\n",
					"\r\n",
					"declare @sched varchar(25)\r\n",
					"\r\n",
					"declare @empid int\r\n",
					"\r\n",
					"declare @abs_type varchar(25)\r\n",
					"\r\n",
					"declare @sick_grp varchar(25)\r\n",
					"\r\n",
					"declare @atten_abs_type varchar(25)\r\n",
					"\r\n",
					"declare @days float\r\n",
					"\r\n",
					"declare @hrs float\r\n",
					"\r\n",
					"declare @cal_days float\r\n",
					"\r\n",
					" \r\n",
					"\r\n",
					" \r\n",
					"\r\n",
					"declare cur_abs cursor fast_forward for\r\n",
					"\r\n",
					"\r\n",
					"\tselect \r\n",
					"\r\n",
					"\t\t[Staff Number]\r\n",
					"\r\n",
					"\t\t,[Work Schedule Rule]\r\n",
					"\r\n",
					"\t\t,[Abs Type]\r\n",
					"\r\n",
					"\t\t,[Sickness Group]\r\n",
					"\r\n",
					"\t\t,[Attendance or Absence Type]\r\n",
					"\r\n",
					"\t\t,[Start Date]\r\n",
					"\r\n",
					"\t\t,[End Date]\r\n",
					"\r\n",
					"\t\t,[Start] as start_time\r\n",
					"\r\n",
					"\t\t,[End time] as end_time\t\r\n",
					"\r\n",
					"\t\t,[Days]\r\n",
					"\r\n",
					"\t\t,[Hrs]\r\n",
					"\r\n",
					"\t\t,[Cal#days] as cal_days\r\n",
					"\r\n",
					"\tfrom \r\n",
					"\r\n",
					"\t\t[sap_hr].[absence_all]\r\n",
					"\r\n",
					"\t--where [Staff Number] = 410541--500444\r\n",
					"\r\n",
					"\torder by \r\n",
					"\r\n",
					"\t\t[Staff Number], [Start Date];\r\n",
					"\r\n",
					" \r\n",
					"\r\n",
					"open cur_abs\r\n",
					"\r\n",
					"\tfetch next from cur_abs into @empid, @sched, @abs_type, @sick_grp, @atten_abs_type, @sdate, @edate, @stime, @etime, @days, @hrs, @cal_days\r\n",
					"\r\n",
					" \r\n",
					"\r\n",
					"\t\twhile @@FETCH_STATUS = 0\r\n",
					"\r\n",
					"\t\t\tbegin\r\n",
					"\r\n",
					" \r\n",
					"\r\n",
					"\t\t\t----for absences starting > 3 years ago, set start date to FY start minus 2 years\r\n",
					"\r\n",
					"\t\t\t--if (@sdate < (SELECT  dateadd(yyyy,-2, cast(cast(YEAR(getdate())-\r\n",
					"\r\n",
					"\t\t\t--\t\t(case \r\n",
					"\r\n",
					"\t\t\t--\t\t\twhen month(getDate()) between 1 and 3 then 1\r\n",
					"\r\n",
					"\t\t\t--\t\t\telse 0\r\n",
					"\r\n",
					"\t\t\t--\t\tend) as varchar)+'0401' as date))))\r\n",
					"\r\n",
					"\t\t\t--\t\t(select @sdate = (SELECT  dateadd(yyyy,-2, cast(cast(YEAR(getdate())-\r\n",
					"\r\n",
					"\t\t\t--\t\t(case \r\n",
					"\r\n",
					"\t\t\t--\t\t\twhen month(getDate()) between 1 and 3 then 1\r\n",
					"\r\n",
					"\t\t\t--\t\t\telse 0\r\n",
					"\r\n",
					"\t\t\t--\t\tend) as varchar)+'0401' as date))));\r\n",
					"\r\n",
					" \r\n",
					"\r\n",
					"\t\t\t---- for absences ending after current FY, set end date to current FY end\r\n",
					"\r\n",
					"\t\t\t--if (@edate > (SELECT  cast(cast(YEAR(getdate()) +\r\n",
					"\r\n",
					"\t\t\t--\t\t(case \r\n",
					"\r\n",
					"\t\t\t--\t\t\twhen month(getDate()) between 1 and 3 then 0\r\n",
					"\r\n",
					"\t\t\t--\t\t\telse 1\r\n",
					"\r\n",
					"\t\t\t--\t\tend) as varchar)+'0331' as date)))\r\n",
					"\r\n",
					"\t\t\t--\t\t(select @edate = (SELECT  cast(cast(YEAR(getdate()) +\r\n",
					"\r\n",
					"\t\t\t--\t\t(case \r\n",
					"\r\n",
					"\t\t\t--\t\t\twhen month(getDate()) between 1 and 3 then 0\r\n",
					"\r\n",
					"\t\t\t--\t\t\telse 1\r\n",
					"\r\n",
					"\t\t\t--\t\tend) as varchar)+'0331' as date)));\r\n",
					"\r\n",
					" \r\n",
					"\r\n",
					" \r\n",
					"\r\n",
					"\t\t\tdeclare @leave table ([abs_date] date\r\n",
					"\r\n",
					"\t\t\t\t\t\t\t,[Staff Number] int\r\n",
					"\r\n",
					"\t\t\t\t\t\t\t,[Work Schedule Rule] varchar(50)\r\n",
					"\r\n",
					"\t\t\t\t\t\t\t,[Abs Type] varchar(50)\r\n",
					"\r\n",
					"\t\t\t\t\t\t\t,[Sickness Group] varchar(50)\r\n",
					"\r\n",
					"\t\t\t\t\t\t\t,[Attendance or Absence Type] varchar(50)\r\n",
					"\r\n",
					"\t\t\t\t\t\t\t,[Hrs] float\r\n",
					"\r\n",
					"\t\t\t\t\t\t\t,[Hrs/Day] float\r\n",
					"\r\n",
					"\t\t\t\t\t\t\t,[Leave] float\r\n",
					"\r\n",
					"\t\t\t\t\t\t\t,[Days] float\r\n",
					"\r\n",
					"\t\t\t\t\t\t\t,[start_time] datetime\r\n",
					"\r\n",
					"\t\t\t\t\t\t\t,[end_time] datetime);\r\n",
					"\r\n",
					" \r\n",
					"\r\n",
					"\t\t\t--populate temp table with scheduled working dates/hours from absence period\r\n",
					"\r\n",
					"\t\t\twhile (@sdate <= @edate) \r\n",
					"\r\n",
					"\t\t\t\tbegin\r\n",
					"\r\n",
					"\t\t\t\t\tif datepart(dw, @sdate) between 2 and 6\r\n",
					"\r\n",
					"\t\t\t\t\t\tbegin\r\n",
					"\r\n",
					"\t\t\t\t\t\t\tinsert into @leave ([abs_date], [Staff Number], [Work Schedule Rule], [Hrs], [Days], [start_time], [end_time])\r\n",
					"\r\n",
					"\t\t\t\t\t\t\tselect  \r\n",
					"\r\n",
					"\t\t\t\t\t\t\t\t@sdate as abs_date\r\n",
					"\r\n",
					"\t\t\t\t\t\t\t\t,@empid as empid\r\n",
					"\r\n",
					"\t\t\t\t\t\t\t\t,@sched as wk_sched\r\n",
					"\r\n",
					"\t\t\t\t\t\t\t\t,isnull(sap_hr.get_working_hours2(@sched, @sdate),0) as leave_hrs\r\n",
					"\r\n",
					"\t\t\t\t\t\t\t\t,@days\r\n",
					"\r\n",
					"\t\t\t\t\t\t\t\t,@stime\r\n",
					"\r\n",
					"\t\t\t\t\t\t\t\t,@etime\r\n",
					"\r\n",
					"\t\t\t\t\t\t\twhere\r\n",
					"\r\n",
					"\t\t\t\t\t\t\t\tisnull(sap_hr.get_working_hours2(@sched, @sdate),0) > 0;\r\n",
					"\r\n",
					"\t\t\t\t\t\tend\r\n",
					"\r\n",
					"\t\t\t\t\tset @sdate = dateadd(day, 1, @sdate)\r\n",
					"\r\n",
					"\t\t\t\tend\r\n",
					"\r\n",
					" \r\n",
					"\r\n",
					"\t\t\t--update temp table with leave calc\r\n",
					"\r\n",
					"\t\t\tupdate T1 \r\n",
					"\r\n",
					"\t\t\tset\r\n",
					"\r\n",
					"\t\t\t\t[Attendance or Absence Type] = T2.[Attendance or Absence Type]\r\n",
					"\r\n",
					"\t\t\t\t,[Abs Type] = T2.[Abs Type]\r\n",
					"\r\n",
					"\t\t\t\t,[Sickness Group] = T2.[Sickness Group]\r\n",
					"\r\n",
					"\t\t\t\t,[Hrs/Day] = T2.[Hrs/Day]\r\n",
					"\r\n",
					"\t\t\t\t--,[Hrs] = case \r\n",
					"\r\n",
					"\t\t\t\t--\t\t\twhen T2.Cal#days = 0 then T2.[Days]*T1.[Hrs]\r\n",
					"\r\n",
					"\t\t\t\t--\t\t\telse T1.[Hrs]\r\n",
					"\r\n",
					"\t\t\t\t--\t\t\tend\r\n",
					"\r\n",
					"\t\t\t\t,[Hrs] = case\r\n",
					"\r\n",
					"\t\t\t\t\t\t\t-- fractional days\r\n",
					"\r\n",
					"\t\t\t\t\t\t\twhen (T1.[Days] BETWEEN 0.01 and 0.99) then \r\n",
					"\r\n",
					"\t\t\t\t\t\t\t\tcase datepart(dw, T1.[abs_date])\r\n",
					"\r\n",
					"\t\t\t\t\t\t\t\t\twhen 2 then (ws.Mo)*(T1.[Days])\r\n",
					"\r\n",
					"\t\t\t\t\t\t\t\t\twhen 3 then (ws.Tu)*(T1.[Days])\r\n",
					"\r\n",
					"\t\t\t\t\t\t\t\t\twhen 4 then (ws.We)*(T1.[Days])\r\n",
					"\r\n",
					"\t\t\t\t\t\t\t\t\twhen 5 then (ws.Th)*(T1.[Days])\r\n",
					"\r\n",
					"\t\t\t\t\t\t\t\t\twhen 6 then (ws.Fr)*(T1.[Days])\r\n",
					"\r\n",
					"\t\t\t\t\t\t\t\t\telse 0\r\n",
					"\r\n",
					"\t\t\t\t\t\t\t\tend\r\n",
					"\r\n",
					"\t\t\t\t\t\t\telse \r\n",
					"\r\n",
					"\t\t\t\t\t\t\t--whole days\r\n",
					"\r\n",
					"\t\t\t\t\t\t\t\tcase datepart(dw, T1.[abs_date])\r\n",
					"\r\n",
					"\t\t\t\t\t\t\t\t\twhen 2 then ws.Mo\r\n",
					"\r\n",
					"\t\t\t\t\t\t\t\t\twhen 3 then ws.Tu\r\n",
					"\r\n",
					"\t\t\t\t\t\t\t\t\twhen 4 then ws.We\r\n",
					"\r\n",
					"\t\t\t\t\t\t\t\t\twhen 5 then ws.Th\r\n",
					"\r\n",
					"\t\t\t\t\t\t\t\t\twhen 6 then ws.Fr\r\n",
					"\r\n",
					"\t\t\t\t\t\t\t\t\telse 0\r\n",
					"\r\n",
					"\t\t\t\t\t\t\t\tend\r\n",
					"\r\n",
					"\t\t\t\t\t\tend\r\n",
					"\r\n",
					"\t\t\t\t,Leave = case\r\n",
					"\r\n",
					"\t\t\t\t\t\t\twhen (T2.[Abs Type] = 'CB01' and T2.Days = 0)  then 1\r\n",
					"\r\n",
					"\t\t\t\t\t\t\twhen (T2.[Abs Type] = 'MT01' and T2.Days = 0)  then 1\r\n",
					"\r\n",
					"\t\t\t\t\t\t\twhen (T2.[Attendance or Absence Type] = 'Spec u/p-up to 3mths' and T2.[Days] = 0) then 1\r\n",
					"\r\n",
					"\t\t\t\t\t\t\twhen T2.Cal#days = 0 then T2.Hrs/T2.[Hrs/Day]\r\n",
					"\r\n",
					"\t\t\t\t\t\t\telse 1\r\n",
					"\r\n",
					"\t\t\t\t\t\t\tend\r\n",
					"\r\n",
					"\t\t\tfrom @leave T1 \r\n",
					"\r\n",
					"\t\t\t\tleft join sap_hr.absence_all T2 \r\n",
					"\r\n",
					"\t\t\t\t\ton T1.[Staff Number] = T2.[Staff Number]\r\n",
					"\r\n",
					"\t\t\t\t\tand T1.[Work Schedule Rule] = T2.[Work Schedule Rule]\r\n",
					"\r\n",
					"\t\t\t\t\tand T1.abs_date between T2.[Start Date] and T2.[End Date]\r\n",
					"\r\n",
					"\t\t\t\tleft join sap_hr.work_schedules ws \r\n",
					"\r\n",
					"\t\t\t\t\ton T1.[Work Schedule Rule] = ws.[Work Schedule Rule];\r\n",
					"\r\n",
					" \r\n",
					"\r\n",
					"\t\t\t--insert fact table rows\r\n",
					"\r\n",
					"\t\t\tinsert into sap_hr.fact_absence_all([absence_date],[absence_hours],[staff_number],[Work Schedule Rule],[Abs Type],[Sickness Group],[Attendance or Absence Type],[Leave])\r\n",
					"\r\n",
					"\t\t\tselect  \r\n",
					"\r\n",
					"\t\t\t\tabs_date as absence_date\r\n",
					"\r\n",
					"\t\t\t\t,[Hrs] as absence_hours\r\n",
					"\r\n",
					"\t\t\t\t,case left(cast([Staff Number] as varchar(10)), 1)\r\n",
					"\r\n",
					"\t\t\t\t\twhen '4' then '50' + cast([Staff Number] as varchar(10))\r\n",
					"\r\n",
					"\t\t\t\t\twhen '5' then '00' + cast([Staff Number] as varchar(10))\r\n",
					"\r\n",
					"\t\t\t\t\tend as staff_number\r\n",
					"\r\n",
					"\t\t\t\t,[Work Schedule Rule]\r\n",
					"\r\n",
					"\t\t\t\t,[Abs Type]\r\n",
					"\r\n",
					"\t\t\t\t,[Sickness Group]\r\n",
					"\r\n",
					"\t\t\t\t,[Attendance or Absence Type]\r\n",
					"\r\n",
					"\t\t\t\t,round([Leave],2) as leave\r\n",
					"\r\n",
					"\t\t\tfrom @leave;\r\n",
					"\r\n",
					" \r\n",
					"\r\n",
					"\t\t\tdelete from @leave;\r\n",
					"\r\n",
					" \r\n",
					"\r\n",
					"\t\t\tfetch next from cur_abs into @empid, @sched, @abs_type, @sick_grp, @atten_abs_type, @sdate, @edate, @stime, @etime, @days, @hrs, @cal_days\r\n",
					"\r\n",
					"\r\n",
					"\t\t\tend\r\n",
					"\r\n",
					" \r\n",
					"\r\n",
					"\tclose cur_abs\r\n",
					"\r\n",
					"\tdeallocate cur_abs\r\n",
					"\r\n",
					" \r\n",
					"\r\n",
					"\t--delete rows for staff_numbers that does not exist in SAP_HR data history\r\n",
					"\r\n",
					"\tdelete from sap_hr.fact_absence_all where staff_number IN ('50410587', '50422294');\r\n",
					"\r\n",
					" \r\n",
					"\r\n",
					"\t--update Group/Area/Subarea columns\r\n",
					"\r\n",
					"\twith abs_ as \r\n",
					"\r\n",
					"\t(\r\n",
					"\r\n",
					"\tselect *\r\n",
					"\r\n",
					"\tfrom \r\n",
					"\r\n",
					"\t\tsap_hr.fact_absence_all a \r\n",
					"\r\n",
					"\t)\r\n",
					"\r\n",
					"\t,future as\r\n",
					"\r\n",
					"\t(\r\n",
					"\r\n",
					"\tselect \r\n",
					"\r\n",
					"\t\tPers#No#, \r\n",
					"\r\n",
					"\t\t[PS Group], \r\n",
					"\r\n",
					"\t\t[Personnel Area], \r\n",
					"\r\n",
					"\t\t[Personnel Subarea],\r\n",
					"\r\n",
					"\t\tReport_MonthEnd_Date\r\n",
					"\r\n",
					"\tfrom load.SAP_HR\r\n",
					"\r\n",
					"\t)\r\n",
					"\r\n",
					"\tupdate a\r\n",
					"\r\n",
					"\t\tset \r\n",
					"\r\n",
					"\t\t[PS Group] = h.[PS Group]\r\n",
					"\r\n",
					"\t\t,[Personnel Area] = h.[Personnel Area]\r\n",
					"\r\n",
					"\t\t,[Personnel Subarea] = h.[Personnel Subarea]\r\n",
					"\r\n",
					"\tfrom abs_ a \r\n",
					"\r\n",
					"\t\tinner join future h on a.staff_number = h.Pers#No#\r\n",
					"\r\n",
					"\twhere \r\n",
					"\r\n",
					"\t\ta.absence_date >= dateadd(m, -1, dateadd(d, 1, h.Report_MonthEnd_Date));\r\n",
					"\r\n",
					" \r\n",
					"\r\n",
					" \r\n",
					"\r\n",
					"--union\r\n",
					"\r\n",
					" \r\n",
					"\r\n",
					"with abs_ as \r\n",
					"\r\n",
					"(\r\n",
					"\r\n",
					"select *\r\n",
					"\r\n",
					"from \r\n",
					"\r\n",
					"\tsap_hr.fact_absence_all a \r\n",
					"\r\n",
					")\r\n",
					"\r\n",
					",past as\r\n",
					"\r\n",
					"(\r\n",
					"\r\n",
					"select \r\n",
					"\r\n",
					"\tPers#No# \r\n",
					"\r\n",
					"\t,[PS Group] \r\n",
					"\r\n",
					"\t,[Personnel Area]\r\n",
					"\r\n",
					"\t,[Personnel Subarea] \r\n",
					"\r\n",
					"\t,dateadd(m, -1, dateadd(d,1,Report_MonthEnd_Date)) as Report_MonStart_Date\r\n",
					"\r\n",
					"\t,Report_MonthEnd_Date\r\n",
					"\r\n",
					"from Hist.SAP_HR\r\n",
					"\r\n",
					"where\t\r\n",
					"\r\n",
					"\tReport_MonthEnd_Date < (select MAX(Report_MonthEnd_Date) from Hist.SAP_HR)\r\n",
					"\r\n",
					" \r\n",
					"\r\n",
					")\r\n",
					"\r\n",
					"update a\r\n",
					"\r\n",
					"\tset \r\n",
					"\r\n",
					"\t[PS Group] = p.[PS Group]\r\n",
					"\r\n",
					"\t,[Personnel Area] = p.[Personnel Area]\r\n",
					"\r\n",
					"\t,[Personnel Subarea] = p.[Personnel Subarea]\r\n",
					"\r\n",
					"from abs_ a \r\n",
					"\r\n",
					"\tleft join past p on a.staff_number = p.Pers#No#\r\n",
					"\r\n",
					"WHERE a.absence_date between p.Report_MonStart_Date and p.Report_MonthEnd_Date \r\n",
					"\r\n",
					";\r\n",
					"\r\n",
					"GO\r\n",
					"\r\n",
					" \r\n",
					"\r\n",
					" "
				],
				"execution_count": null
			}
		]
	}
}