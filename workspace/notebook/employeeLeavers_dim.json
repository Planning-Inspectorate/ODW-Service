{
	"name": "employeeLeavers_dim",
	"properties": {
		"folder": {
			"name": "odw-harmonised/SAP-HR"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "a7a58f1f-f205-4487-8545-23199744d1b9"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw",
				"name": "pinssynspodw",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net",
					"authHeader": null
				},
				"sparkVersion": "3.2",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"extraHeader": null
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Check for new, updated or deleted data\n",
					"- This script checks for new, updated or deleted data by checking the source data (sap hr) against the target (odw_harmonised_db.contract_dim)\n",
					"- **New Data:** where a workc in the source does not exist as an ContractCode in the target. NewData flag is set to 'Y'\n",
					"- **Updated data:** Comparison occurs on workc in source and ContractCode in target where the row hash is different i.e. there is a change in one of the columns. NewData flag is set to 'Y'\n",
					"- **Deleted data:** where an ContractCode in the target exists but the same workc doesn't exist in the source. DeletedData flag is set to 'Y'\n",
					"\n",
					"## View contract_dim_new is created"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"-- Build Employee_Dim table -- merge\r\n",
					"\r\n",
					"-- Notes - Addresses are only supplied for Inspectors - need to check inspector count against addresses data\r\n",
					"\r\n",
					"-- Gets modified or deleted from source rows\r\n",
					"\r\n",
					"CREATE OR REPLACE TEMPORARY VIEW employee_dim_new \r\n",
					"\r\n",
					"    AS\r\n",
					"\r\n",
					"-- gets data that matches of SourceID and flags that it is modified based on a row (md5) hash. Flags as \"NewData\"\r\n",
					"-- gets data that is in the target but not in source. Flags as \"DeletedData\"\r\n",
					"\r\n",
					"SELECT \r\n",
					"    CASE\r\n",
					"        WHEN T1.Pers_No IS NULL\r\n",
					"        THEN T7.EmployeeID\r\n",
					"        ELSE NULL\r\n",
					"    END as EmployeeID, -- surrogate key\r\n",
					"    T1.First_name as FirstName,\r\n",
					"    T1.Last_name as LastName,\r\n",
					"    NULL as DOB,\r\n",
					"    NULL as NINumber,\r\n",
					"    NULL as Gender,\r\n",
					"    T2.Street_and_House_Number as AddressLine1,\r\n",
					"    T2.`2nd_Address_Line` as AddressLine2,\r\n",
					"    T2.District as AddressLine3,\r\n",
					"    T2.City as City,\r\n",
					"    T2.Region_State_Province_Count as County,\r\n",
					"    T2.Postal_Code as PostCode,\r\n",
					"    T3.Email_Address as EmailAddress,\r\n",
					"    T2.Personal_Mobile as TelephoneNumberPersonal,\r\n",
					"    T2.Work_Mobile as TelephoneNumberWork,\r\n",
					"    T2.Staff_Number as PersNumber,\r\n",
					"    T1.Pers_No as EmployeeNumber,\r\n",
					"    NULL,\r\n",
					"    NULL as WorkHours,\r\n",
					"    NULL as PartTimeEmployee,\r\n",
					"    NULL as EmploymentStatus,\r\n",
					"    NULL as CivilServiceStart,\r\n",
					"    NULL as DateToCurrentJob,\r\n",
					"    NULL as SeniorityDate,\r\n",
					"    NULL as OrgStartDate,\r\n",
					"    NULL as FixTermEndDate,\r\n",
					"    NULL as LoanStartDate,\r\n",
					"    NULL as LoanEndDate,\r\n",
					"    NULL as PayrollArea,\r\n",
					"    NULL as AssignmentNumber,\r\n",
					"    NULL as EmployeeGroup,\r\n",
					"    NULL as AnnualSalary, -- T1.Annual_salary\r\n",
					"    T4.SourceSystemID,\r\n",
					"    current_timestamp as StartDate,\r\n",
					"    NULL as EndDate,\r\n",
					"    current_timestamp as IngestionDate,\r\n",
					"    NULL as ValidTo,\r\n",
					"    md5(concat( IFNULL(T1.First_name,'.'),IFNULL(T1.Last_name,'.'),IFNULL(NULL,'.'), IFNULL(NULL, '.'), IFNULL(NULL, '.'), IFNULL(T2.Street_and_House_Number, '.'),IFNULL(T2.`2nd_Address_Line`, '.'),\r\n",
					"                IFNULL(T2.District, '.'),IFNULL(T2.City, '.'),IFNULL(T2.Region_State_Province_Count, '.'),IFNULL(T2.Postal_Code, '.'),IFNULL(T3.Email_Address, '.'),IFNULL(T2.Personal_Mobile, '.'),\r\n",
					"                IFNULL(T2.Work_Mobile, '.'),IFNULL(T2.Staff_Number, '.'),IFNULL(T1.Pers_No, '.'),IFNULL(NULL,'.'),IFNULL(NULL,'.'),IFNULL(NULL,'.'),NULL,IFNULL(NULL, '.'),IFNULL(NULL, '.'),\r\n",
					"                IFNULL(NULL, '.'),IFNULL(NULL, '.'),IFNULL(NULL, '.'),IFNULL(NULL, '.'),IFNULL(NULL, '.'),IFNULL(NULL,'.'),IFNULL(NULL, '.'),\r\n",
					"                IFNULL(NULL,'.'))) as RowID, \r\n",
					"    'Y' as IsActive\r\n",
					"\r\n",
					"FROM odw_standardised_db.vw_leavers T1\r\n",
					"LEFT JOIN odw_standardised_db.vw_addresses T2 ON T1.Pers_No = T2.Staff_Number\r\n",
					"LEFT JOIN odw_standardised_db.vw_email T3 ON T1.Pers_No = T3.Staff_Number\r\n",
					"LEFT JOIN odw_harmonised_db.sourcesystem_fact T4 ON \"SAP HR\" = T4.Description and T4.IsActive = 'Y'\r\n",
					"FULL JOIN odw_harmonised_db.employee_dim T7 ON T1.Pers_No = T7.EmployeeNumber \r\n",
					"WHERE  (T7.IsActive = 'Y' or T7.IsActive IS NULL)\r\n",
					"    \r\n",
					"        AND (\r\n",
					"        \r\n",
					"        -- flags new data        \r\n",
					"        ( CASE\r\n",
					"            WHEN T1.Pers_No = T7.EmployeeNumber AND md5(concat( IFNULL(T1.First_name,'.'),IFNULL(T1.Last_name,'.'),IFNULL(NULL,'.'), IFNULL(NULL, '.'), IFNULL(NULL, '.'), IFNULL(T2.Street_and_House_Number, '.'),IFNULL(T2.`2nd_Address_Line`, '.'),\r\n",
					"                                                    IFNULL(T2.District, '.'),IFNULL(T2.City, '.'),IFNULL(T2.Region_State_Province_Count, '.'),IFNULL(T2.Postal_Code, '.'),IFNULL(T3.Email_Address, '.'),IFNULL(T2.Personal_Mobile, '.'),\r\n",
					"                                                    IFNULL(T2.Work_Mobile, '.'),IFNULL(T2.Staff_Number, '.'),IFNULL(T1.Pers_No, '.'),IFNULL(NULL,'.'),IFNULL(NULL,'.'),IFNULL(NULL,'.'),NULL,IFNULL(NULL, '.'),IFNULL(NULL, '.'),\r\n",
					"                                                    IFNULL(NULL, '.'),IFNULL(NULL, '.'),IFNULL(NULL, '.'),IFNULL(NULL, '.'),IFNULL(NULL, '.'),IFNULL(NULL,'.'),IFNULL(NULL, '.'),\r\n",
					"                                                    IFNULL(NULL,'.')))   <> T7.RowID     \r\n",
					"            THEN 'Y'\r\n",
					"            WHEN T7.EmployeeNumber IS NULL\r\n",
					"            THEN 'Y'\r\n",
					"            ELSE 'N'\r\n",
					"        END  = 'Y' ) OR\r\n",
					"        \r\n",
					"        -- flags deleted data\r\n",
					"        ( CASE\r\n",
					"            WHEN T1.Pers_No IS NULL\r\n",
					"            THEN 'Y'\r\n",
					"            ELSE 'N'\r\n",
					"        END = 'Y' )\r\n",
					")\r\n",
					";\r\n",
					""
				],
				"execution_count": 35
			},
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"\r\n",
					"CREATE OR REPLACE TEMPORARY VIEW employeeleavers_dim_new\r\n",
					"\r\n",
					"    AS\r\n",
					"\r\n",
					"-- gets data that matches of SourceID and flags that it is modified based on a row (md5) hash. Flags as \"NewData\"\r\n",
					"-- gets data that is in the target but not in source. Flags as \"DeletedData\"\r\n",
					"SELECT \r\n",
					"    CASE\r\n",
					"        WHEN T3.EmployeeID IS NULL\r\n",
					"        THEN T7.EmployeeLeaversID\r\n",
					"        ELSE NULL\r\n",
					"    END as EmployeeLeaversID,     \r\n",
					"    T3.EmployeeID,\r\n",
					"    T1.Reason_For_Action AS ReasonForLeaving, \r\n",
					"    CASE \r\n",
					"        WHEN T1.Org_Start_Date = '00/00/0000'\r\n",
					"        THEN '1900-01-01 00:00:00'\r\n",
					"        ELSE T1.Org_Start_Date\r\n",
					"    END AS EmploymentStartDate,\r\n",
					"    T1.Leaving AS EmploymentEndDate,\r\n",
					"    T2.SourceSystemID as SourceSystemID,\r\n",
					"    CURRENT_TIMESTAMP AS StartDate,\r\n",
					"    NULL AS EndDate,\r\n",
					"    CURRENT_TIMESTAMP AS IngestionDate,\r\n",
					"    NULL AS ValidTo,\r\n",
					"    md5(concat(IFNULL(T1.Reason_For_Action,'.'),IFNULL(T1.Org_Start_Date,'.'), IFNULL(T1.Leaving,'.'))) as RowID,\r\n",
					"    'Y' as IsActive,\r\n",
					"    CASE\r\n",
					"        WHEN T3.EmployeeID = T7.EmployeeID AND \r\n",
					"             T1.Org_Start_Date = T7.EmploymentStartDate AND\r\n",
					"             T1.Leaving = T7.EmploymentEndDate AND\r\n",
					"             md5(concat(IFNULL(T1.Reason_For_Action,'.'),IFNULL(T1.Org_Start_Date,'.'),IFNULL(T1.Leaving,'.'))) <> T7.RowID  -- same employee, changed data\r\n",
					"        THEN 'Y'\r\n",
					"        WHEN T7.EmployeeID  IS NULL -- new employee\r\n",
					"        THEN 'Y'\r\n",
					"        ELSE 'N'\r\n",
					"    END as NewData,\r\n",
					"    CASE\r\n",
					"        WHEN T3.EmployeeID IS NULL\r\n",
					"        THEN 'Y'\r\n",
					"        ELSE 'N'\r\n",
					"    END AS  DeletedData\r\n",
					"\r\n",
					"FROM odw_standardised_db.vw_leavers T1\r\n",
					"LEFT JOIN odw_harmonised_db.sourcesystem_fact T2 ON \"SAP HR\" = T2.Description\r\n",
					"LEFT JOIN odw_harmonised_db.employee_dim T3 ON T1.Pers_No = T3.EmployeeNumber\r\n",
					"FULL JOIN odw_harmonised_db.EmployeeLeavers_dim T7 ON   T3.EmployeeID = T7.EmployeeID AND \r\n",
					"                                                        T1.Org_Start_Date = T7.EmploymentStartDate AND\r\n",
					"                                                        T1.Leaving = T7.EmploymentEndDate\r\n",
					"\r\n",
					"WHERE  (T7.IsActive = 'Y' or T7.IsActive IS NULL)\r\n",
					"    \r\n",
					"        AND (\r\n",
					"        \r\n",
					"        -- flags new data        \r\n",
					"        (       CASE\r\n",
					"                    WHEN T3.EmployeeID = T7.EmployeeID AND \r\n",
					"                            T1.Org_Start_Date = T7.EmploymentStartDate AND\r\n",
					"                            T1.Leaving = T7.EmploymentEndDate AND\r\n",
					"                            md5(concat(IFNULL(T1.Reason_For_Action,'.'),IFNULL(T1.Org_Start_Date,'.'),IFNULL(T1.Leaving,'.'))) <> T7.RowID  -- same employee, changed data\r\n",
					"                    THEN 'Y'\r\n",
					"                    WHEN T7.EmployeeID  IS NULL -- new employee\r\n",
					"                    THEN 'Y'\r\n",
					"                    ELSE 'N'\r\n",
					"                END  = 'Y' ) OR\r\n",
					"        \r\n",
					"        -- flags deleted data\r\n",
					"        (   CASE\r\n",
					"                WHEN T3.EmployeeID IS NULL\r\n",
					"                THEN 'Y'\r\n",
					"                ELSE 'N'\r\n",
					"            END = 'Y' )\r\n",
					")\r\n",
					"\r\n",
					";"
				],
				"execution_count": 27
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Dataset is created that contains changed data and corresponding target data\n",
					"- This script combines data that has been updated, Deleted or is new, with corresponding target data\n",
					"- View **contract_dim_new** is unioned to the target data filter to only those rows where changes have been detected\n",
					"## View contract_dim_changed_rows is created"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"\r\n",
					"CREATE OR REPLACE TEMPORARY VIEW employeeleavers_dim_changed_rows\r\n",
					"\r\n",
					"    AS\r\n",
					"\r\n",
					"Select \r\n",
					"    EmployeeLeaversID,\r\n",
					"    EmployeeID,\r\n",
					"    ReasonForLeaving, \r\n",
					"    EmploymentStartDate,\r\n",
					"    EmploymentEndDate,\r\n",
					"    SourceSystemID,\r\n",
					"    StartDate,\r\n",
					"    EndDate,\r\n",
					"    IngestionDate,\r\n",
					"    ValidTo,\r\n",
					"    RowID,\r\n",
					"    IsActive\r\n",
					"From employeeleavers_dim_new\r\n",
					"\r\n",
					"    UNION ALL\r\n",
					"\r\n",
					"SELECT\r\n",
					"    T1.EmployeeLeaversID,\r\n",
					"    T1.EmployeeID,\r\n",
					"    T1.ReasonForLeaving, \r\n",
					"    T1.EmploymentStartDate,\r\n",
					"    T1.EmploymentEndDate,\r\n",
					"    T1.SourceSystemID,\r\n",
					"    T1.StartDate,\r\n",
					"    T1.EndDate,\r\n",
					"    T1.IngestionDate,\r\n",
					"    T1.ValidTo,\r\n",
					"    T1.RowID,\r\n",
					"    T1.IsActive\r\n",
					"FROM odw_harmonised_db.employeeleavers_dim T1\r\n",
					"INNER JOIN employeeleavers_dim_new T2 ON    T1.EmployeeID = T2.EmployeeID AND \r\n",
					"                                            T1.EmploymentStartDate = T2.EmploymentStartDate AND\r\n",
					"                                            T1.EmploymentEndDate = T2.EmploymentEndDate\r\n",
					"; \r\n",
					""
				],
				"execution_count": 21
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"-- select * from(\r\n",
					"-- SELECT EmployeeLeaversID, count(*) as count\r\n",
					"-- from employeeleavers_dim_changed_rows\r\n",
					"-- group by EmployeeLeaversID\r\n",
					"-- )\r\n",
					"-- where Count > 1\r\n",
					"\r\n",
					"\r\n",
					"select *\r\n",
					"from employeeleavers_dim_changed_rows\r\n",
					"where EmployeeID = 331"
				],
				"execution_count": 22
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# View contract_dim_changed_rows is used in a merge (Upsert) statement into the target table\n",
					"- **WHEN MATCHED** ON the Business Key (i.e. workc from SAPHR), EndDate is set to today -1 day and the IsActive flag is set to 'N'\n",
					"- **WHEN NOT MATCHED** ON the business key, insert rows\n",
					"## Table odw_harmonised.contract_dim is updated"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"\r\n",
					"-- merge into fact table\r\n",
					"\r\n",
					"MERGE INTO odw_harmonised_db.employeeleavers_dim AS Target\r\n",
					"USING employeeleavers_dim_changed_rows AS Source\r\n",
					"\r\n",
					"ON Source.EmployeeID = Target.EmployeeID\r\n",
					"\r\n",
					"-- For Updates existing rows\r\n",
					"\r\n",
					"WHEN MATCHED\r\n",
					"    THEN \r\n",
					"    UPDATE SET\r\n",
					"    Target.EndDate = date_sub(current_timestamp,1),\r\n",
					"    Target.IsActive = 'N'\r\n",
					"\r\n",
					"-- Insert completely new rows\r\n",
					"WHEN NOT MATCHED \r\n",
					"    THEN INSERT * ;  \r\n",
					""
				],
				"execution_count": 23
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Fix the IDs\n",
					"- No auto-increment feature is available in delta tables, therefore we need to create new IDs for the inserted rows\n",
					"- This is done by select the target data and using INSERT OVERWRITE to re-insert the data is a new Row Number\n",
					"## Table odw_harmonised.contract_dim is updated"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"\r\n",
					"-- Insert new ContractID\r\n",
					"\r\n",
					"INSERT OVERWRITE odw_harmonised_db.employeeleavers_dim\r\n",
					"\r\n",
					"SELECT \r\n",
					"    ROW_NUMBER() OVER (ORDER BY EmployeeLeaversID NULLS LAST) AS EmployeeLeaversID,\r\n",
					"    EmployeeID,\r\n",
					"    ReasonForLeaving, \r\n",
					"    EmploymentStartDate,\r\n",
					"    EmploymentEndDate,\r\n",
					"    SourceSystemID,\r\n",
					"    StartDate,\r\n",
					"    EndDate,\r\n",
					"    IngestionDate,\r\n",
					"    ValidTo,\r\n",
					"    RowID,\r\n",
					"    IsActive\r\n",
					"FROM odw_harmonised_db.employeeleavers_dim;\r\n",
					""
				],
				"execution_count": 24
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"SELECT count(*)\n",
					"from odw_harmonised_db.employeeleavers_dim\n",
					"where employeeid is null;"
				],
				"execution_count": 26
			}
		]
	}
}