{
	"name": "py_unit_tests_entraid",
	"properties": {
		"folder": {
			"name": "utils/unit-tests"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "d085972d-33e1-44ea-a442-4c2d56ed65e9"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": true,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw",
				"name": "pinssynspodw",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import json\n",
					"from pyspark.sql.types import *\n",
					"from pyspark.sql import DataFrame\n",
					"import pprint"
				],
				"execution_count": 100
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"entity_name: str = 'entraid'\n",
					"std_db_name: str = 'odw_standardised_db'\n",
					"hrm_db_name: str = 'odw_harmonised_db'\n",
					"curated_db_name: str = 'odw_curated_db'\n",
					"\n",
					"std_table_name: str = 'entraid'\n",
					"hrm_table_name: str = 'entraid'\n",
					"curated_table_name: str = 'entraid'"
				],
				"execution_count": 101
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#keep track of the exitCodes, if the exit code is not zero then we've had failures, we flip the boolean\n",
					"exitCode: int = 0"
				],
				"execution_count": 102
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%run /utils/unit-tests/py_unit_tests_functions"
				],
				"execution_count": 103
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"sb_std_schema = create_spark_schema(std_db_name, entity_name, None, False)\n",
					"sb_std_table_schema = spark.table(f\"{std_db_name}.{std_table_name}\").schema\n",
					"sb_hrm_schema = create_spark_schema(hrm_db_name, entity_name, None, False)\n",
					"sb_hrm_table_schema = spark.table(f\"{hrm_db_name}.{hrm_table_name}\").schema"
				],
				"execution_count": 104
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Compare schemas"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"std_schema_correct: bool = test_compare_schemas(sb_std_schema, sb_std_table_schema)\n",
					"exitCode += int(not std_schema_correct)\n",
					"print(f\"Service bus standardised schema correct: {std_schema_correct}\\nTable: {std_db_name}.{std_table_name}\\nDifferences shown above (if any)\")\n",
					"hrm_schema_correct: bool = test_compare_schemas(sb_hrm_schema, sb_hrm_table_schema)\n",
					"print(f\"Service bus harmonised schema correct: {hrm_schema_correct}\\nTable: {hrm_db_name}.{hrm_table_name}\\nDifferences shown above (if any)\")\n",
					"exitCode += int(not hrm_schema_correct)"
				],
				"execution_count": 105
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Compare service bus standardised with harmonised\n",
					"Should be the same count"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def entraid_test_sb_std_to_sb_hrm_no_dropping_records(sb_std_table: str, sb_hrm_table: str, primary_key: str) -> bool:\r\n",
					"    df: DataFrame = spark.sql(f\"\"\"\r\n",
					"    select {primary_key}\r\n",
					"    from {std_db_name}.{sb_std_table}\r\n",
					"    where {primary_key} not in\r\n",
					"    (\r\n",
					"        select {primary_key}\r\n",
					"        from {hrm_db_name}.{sb_hrm_table}\r\n",
					"    )\r\n",
					"    \"\"\")\r\n",
					"    return df.count() == 0"
				],
				"execution_count": 106
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"if entraid_test_sb_std_to_sb_hrm_no_dropping_records(std_table_name, hrm_table_name, 'Id'):\r\n",
					"   print(\"Test passed: No records were dropped.\")\r\n",
					"else:\r\n",
					"    exitCode += 1"
				],
				"execution_count": 107
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Compare final harmonised table with curated table\n",
					"Comparing where IsActive = Y in harmonised = curated row count"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"harmonised_final_count, curated_count, counts_match = test_curated_row_count(hrm_table_name, curated_table_name)\n",
					"print(f\"Harmonised Final Count: {harmonised_final_count: ,}\\nCurated Count: {curated_count: ,}\\nCounts match: {counts_match}\")\n",
					"exitCode += int(not counts_match)"
				],
				"execution_count": 108
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def show_differences_between_tables(hrm_table: str, curated_table: str, primary_key: str) -> DataFrame:\r\n",
					"    differences_df: DataFrame = spark.sql(f\"\"\"\r\n",
					"    SELECT *\r\n",
					"    FROM {hrm_db_name}.{hrm_table} hrm\r\n",
					"    FULL OUTER JOIN {curated_db_name}.{curated_table} curated\r\n",
					"    ON hrm.{primary_key} = curated.{primary_key}\r\n",
					"    WHERE hrm.{primary_key} IS NULL OR curated.{primary_key} IS NULL\r\n",
					"    \"\"\")\r\n",
					"    return differences_df\r\n",
					"\r\n",
					"differences_df = show_differences_between_tables(hrm_table_name, curated_table_name, 'Id')\r\n",
					"differences_df.show()"
				],
				"execution_count": 109
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def show_records_in_hrm_not_in_curated(hrm_table: str, curated_table: str, primary_key: str) -> DataFrame:\r\n",
					"    # List of common columns\r\n",
					"    common_columns = [\"employeeId\", \"id\", \"givenName\", \"surname\", \"userPrincipalName\"]\r\n",
					"\r\n",
					"    # Records in harmonised table but not in curated table\r\n",
					"    hrm_not_in_curated_df: DataFrame = spark.sql(f\"\"\"\r\n",
					"    SELECT {', '.join([f'hrm.{col}' for col in common_columns])}\r\n",
					"    FROM {hrm_db_name}.{hrm_table} hrm\r\n",
					"    LEFT JOIN {curated_db_name}.{curated_table} curated\r\n",
					"    ON hrm.{primary_key} = curated.{primary_key}\r\n",
					"    WHERE curated.{primary_key} IS NULL\r\n",
					"    \"\"\")\r\n",
					"\r\n",
					"    return hrm_not_in_curated_df\r\n",
					"\r\n",
					"differences_df = show_records_in_hrm_not_in_curated(hrm_table_name, curated_table_name, 'Id')\r\n",
					"differences_df.show()"
				],
				"execution_count": 110
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def show_differences_between_tables(hrm_table: str, curated_table: str, primary_key: str) -> DataFrame:\r\n",
					"    # List of common columns\r\n",
					"    common_columns = [\"employeeId\", \"id\", \"givenName\", \"surname\", \"userPrincipalName\"]\r\n",
					"\r\n",
					"    # Records in harmonised table but not in curated table\r\n",
					"    hrm_not_in_curated_df: DataFrame = spark.sql(f\"\"\"\r\n",
					"    SELECT {', '.join([f'hrm.{col}' for col in common_columns])}\r\n",
					"    FROM {hrm_db_name}.{hrm_table} hrm\r\n",
					"    LEFT JOIN {curated_db_name}.{curated_table} curated\r\n",
					"    ON hrm.{primary_key} = curated.{primary_key}\r\n",
					"    WHERE curated.{primary_key} IS NULL\r\n",
					"    \"\"\")\r\n",
					"\r\n",
					"    # Records in curated table but not in harmonised table\r\n",
					"    curated_not_in_hrm_df: DataFrame = spark.sql(f\"\"\"\r\n",
					"    SELECT {', '.join([f'curated.{col}' for col in common_columns])}\r\n",
					"    FROM {curated_db_name}.{curated_table} curated\r\n",
					"    LEFT JOIN {hrm_db_name}.{hrm_table} hrm\r\n",
					"    ON curated.{primary_key} = hrm.{primary_key}\r\n",
					"    WHERE hrm.{primary_key} IS NULL\r\n",
					"    \"\"\")\r\n",
					"\r\n",
					"    # Union the two DataFrames to get all differing records\r\n",
					"    differences_df: DataFrame = hrm_not_in_curated_df.union(curated_not_in_hrm_df)\r\n",
					"    return differences_df\r\n",
					"\r\n",
					"differences_df = show_differences_between_tables(hrm_table_name, curated_table_name, 'Id')\r\n",
					"differences_df.show()"
				],
				"execution_count": 111
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Validate Curated Data against the data model\n",
					"https://github.com/Planning-Inspectorate/data-model/blob/main/schemas/entraid.schema.json"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"is_valid_data = mssparkutils.notebook.run(\"/utils/data-validation/py_utils_curated_validate_table\", 300, {\"entity_name\": entity_name, \"table_name\": curated_table_name, \"primary_key\": \"Id\"})\n",
					"print(f\"Is Curated Data Valid: {is_valid_data}\")\n",
					"exitCode += int(not is_valid_data)"
				],
				"execution_count": 112
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"mssparkutils.notebook.exit(exitCode)"
				],
				"execution_count": 113
			}
		]
	}
}