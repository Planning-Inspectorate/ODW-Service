{
	"name": "nsip_document",
	"properties": {
		"folder": {
			"name": "odw-curated"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pynssynspodw34",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "fba55bb3-bdc3-4dce-b212-8824b91c0eb6"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pynssynspodw34",
				"name": "pynssynspodw34",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pynssynspodw34",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Import Packages"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.sql.functions import *\n",
					"from pyspark.sql.types import *\n",
					"from pyspark.sql import DataFrame\n",
					"import json"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%run utils/py_logging_decorator"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"db_name: str = \"odw_curated_db\"\n",
					"entity_name: str = \"nsip-document\"\n",
					"table_name: str = \"odw_curated_db.nsip_document\""
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Create a view for the data, joining harmonised tables where necessary"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"df = spark.sql(\"\"\"\r\n",
					"\r\n",
					"SELECT DISTINCT \r\n",
					"doc.documentId,\r\n",
					"doc.caseId,\r\n",
					"doc.caseRef,\r\n",
					"doc.documentReference,\r\n",
					"doc.version,\r\n",
					"doc.examinationRefNo,\r\n",
					"doc.filename,\r\n",
					"doc.originalFilename,\r\n",
					"doc.size,\r\n",
					"doc.mime,\r\n",
					"COALESCE(doc.documentURI, '') AS documentURI,\r\n",
					"doc.publishedDocumentURI,\r\n",
					"doc.path,\r\n",
					"doc.virusCheckStatus,\r\n",
					"doc.fileMD5,\r\n",
					"doc.dateCreated,\r\n",
					"doc.lastModified,\r\n",
					"LOWER(doc.caseType) AS caseType,\r\n",
					"doc.redactedStatus,\r\n",
					"CASE\r\n",
					"    WHEN doc.PublishedStatus = 'Depublished'\r\n",
					"    THEN 'unpublished'\r\n",
					"    ELSE REPLACE(\r\n",
					"        LOWER(doc.PublishedStatus),\r\n",
					"        ' ',\r\n",
					"        '_')\r\n",
					"END AS publishedStatus,\r\n",
					"doc.datePublished,\r\n",
					"doc.documentType,\r\n",
					"doc.securityClassification,\r\n",
					"doc.sourceSystem,\r\n",
					"doc.origin,\r\n",
					"doc.owner,\r\n",
					"doc.author,\r\n",
					"doc.authorWelsh,\r\n",
					"doc.representative,\r\n",
					"doc.description,\r\n",
					"doc.descriptionWelsh,\r\n",
					"CASE\r\n",
					"    WHEN doc.documentCaseStage = \"Developer's Application\"\r\n",
					"    THEN 'developers_application'\r\n",
					"    WHEN doc.documentCaseStage = 'Post decision'\r\n",
					"    THEN 'post_decision'\r\n",
					"    ELSE LOWER(doc.documentCaseStage)\t            \r\n",
					"END AS documentCaseStage,\r\n",
					"doc.filter1,\r\n",
					"doc.filter1Welsh,\r\n",
					"doc.filter2,\r\n",
					"doc.horizonFolderId,\r\n",
					"doc.transcriptId\t\r\n",
					"\r\n",
					"FROM odw_harmonised_db.nsip_document AS doc\r\n",
					"LEFT JOIN odw_curated_db.nsip_project proj\r\n",
					"    ON proj.caseReference = doc.caseRef\r\n",
					"\r\n",
					"WHERE doc.IsActive = 'Y'\r\n",
					"    \"\"\"\r\n",
					")"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Define schema"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"schema = mssparkutils.notebook.run(\"py_create_spark_schema\", 30, {\"db_name\": db_name, \"entity_name\": entity_name})\n",
					"spark_schema = StructType.fromJson(json.loads(schema))"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Create DataFrame with the correct schema"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"data = spark.createDataFrame(df.rdd, schema=spark_schema)"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Write DataFrame to table"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"logInfo(f\"Writing to {table_name}\")\n",
					"df.write.mode(\"overwrite\").format(\"parquet\").saveAsTable(table_name)\n",
					"logInfo(f\"Written to {table_name}\")"
				],
				"execution_count": null
			}
		]
	}
}