{
	"name": "nsip_docuemnt",
	"properties": {
		"folder": {
			"name": "odw-curated"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "1f7b9619-0126-49f0-9b99-3714d7acf4d5"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw",
				"name": "pinssynspodw",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.sql.functions import *\n",
					"from pyspark.sql.types import *\n",
					"from pyspark.sql import DataFrame"
				],
				"execution_count": 13
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Create a view for the data, joining harmonised tables where necessary"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"\r\n",
					"CREATE OR REPLACE VIEW odw_curated_db.vw_nsip_document\r\n",
					"\r\n",
					"AS\r\n",
					"\r\n",
					"SELECT DISTINCT \r\n",
					"Doc.documentId,\r\n",
					"Doc.caseId,\r\n",
					"Doc.caseRef,\r\n",
					"Doc.documentReference,\r\n",
					"Doc.version,\r\n",
					"Doc.examinationRefNo,\r\n",
					"Doc.filename,\r\n",
					"Doc.originalFilename,\r\n",
					"Doc.size,\r\n",
					"Doc.mime,\r\n",
					"COALESCE(Doc.documentURI, '') AS documentURI,\r\n",
					"Doc.publishedDocumentURI,\r\n",
					"Doc.path,\r\n",
					"Doc.virusCheckStatus,\r\n",
					"Doc.fileMD5,\r\n",
					"Doc.dateCreated,\r\n",
					"Doc.lastModified,\r\n",
					"LOWER(Doc.caseType) AS caseType,\r\n",
					"Doc.redactedStatus,\r\n",
					"CASE\r\n",
					"    WHEN Doc.PublishedStatus = 'Depublished'\r\n",
					"    THEN 'unpublished'\r\n",
					"    ELSE REPLACE(\r\n",
					"        LOWER(Doc.PublishedStatus),\r\n",
					"        ' ',\r\n",
					"        '_')\r\n",
					"END AS publishedStatus,\r\n",
					"Doc.datePublished,\r\n",
					"Doc.documentType,\r\n",
					"Doc.securityClassification,\r\n",
					"Doc.sourceSystem,\r\n",
					"Doc.origin,\r\n",
					"Doc.owner,\r\n",
					"Doc.author,\r\n",
					"Doc.authorWelsh,\r\n",
					"Doc.representative,\r\n",
					"Doc.description,\r\n",
					"Doc.descriptionWelsh,\r\n",
					"CASE\r\n",
					"    WHEN Doc.DocumentCaseStage = \"Developer's Application\"\r\n",
					"    THEN 'developers_application'\r\n",
					"    WHEN Doc.DocumentCaseStage = 'Post decision'\r\n",
					"    THEN 'post_decision'\r\n",
					"    ELSE LOWER(Doc.DocumentCaseStage)\t            \r\n",
					"END AS documentCaseStage,\r\n",
					"Doc.filter1,\r\n",
					"Doc.filter1Welsh,\r\n",
					"Doc.filter2,\r\n",
					"Doc.horizonFolderId,\r\n",
					"Doc.transcriptId\t\r\n",
					"\r\n",
					"FROM odw_harmonised_db.nsip_document AS Doc\r\n",
					"LEFT JOIN odw_curated_db.nsip_data Dat\r\n",
					"    ON Dat.casereference = Doc.caseRef\r\n",
					"\r\n",
					"WHERE Doc.IsActive = 'Y';"
				],
				"execution_count": 14
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Create a DataFrame of the data from the view"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.sql import SparkSession\r\n",
					"spark = SparkSession.builder.getOrCreate()\r\n",
					"view_df = spark.sql('SELECT * FROM odw_curated_db.vw_nsip_document')\r\n",
					"view_df.write.mode(\"overwrite\").saveAsTable('odw_curated_db.nsip_document')"
				],
				"execution_count": 15
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"view_df.printSchema()"
				],
				"execution_count": 16
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## THE BELOW IS OLDER CODE, AND IT CHANGED THE SCHEMA"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Specify the schema for the data, taken from the curated table which has already been created in advance from the data model"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"data: DataFrame = spark.sql(\"SELECT * FROM odw_curated_db.vw_nsip_document\")\r\n",
					"schema: StructType = spark.table(\"odw_curated_db.nsip_document\").schema"
				],
				"execution_count": 17
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Cast all field data types in the data to the data types from the curated table schema\n",
					"\n",
					"This is necessary because the view generated above is joining harmonised tables, many of which are sourced from Horizon and will have a different schema to the final table and fields will have different data types. Therefore, taking the curated schema as defined in thr data model and casting all fields correctly, ensures accuracy."
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df: DataFrame = data.select(\n",
					"    *[\n",
					"        col(field.name).cast(field.dataType).alias(field.name)\n",
					"        for field in schema.fields\n",
					"    ]\n",
					")"
				],
				"execution_count": 18
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Print the schema as a visual check"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"df.printSchema()"
				],
				"execution_count": 19
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Write the data to the curated table"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"data.write.mode(\"overwrite\").format(\"delta\").saveAsTable(\"odw_curated_db.nsip_document\")"
				],
				"execution_count": 20
			}
		]
	}
}