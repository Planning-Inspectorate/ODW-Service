{
	"name": "py_create_tables_from_url_schema",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "9ed1296f-badc-4da2-9e9b-8daa7ebdffc4"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw",
				"name": "pinssynspodw",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"tags": [
						"parameters"
					]
				},
				"source": [
					"entity_name=''\n",
					"db_name=''"
				],
				"execution_count": 6
			},
			{
				"cell_type": "code",
				"source": [
					"def get_schema_from_url(url):\n",
					"    import requests\n",
					"    try:\n",
					"        response = requests.get(url)\n",
					"        if response.status_code == 200:\n",
					"            data = response.json()\n",
					"            return data\n",
					"        else:\n",
					"            print(\"Failed to fetch data from URL. Status code:\", response.status_code)\n",
					"    except requests.exceptions.RequestException as e:\n",
					"        print(\"Error fetching data:\", e)\n",
					"\n",
					"def convert_to_datalake_schema(schema):\n",
					"    data_model = {'fields': []}\n",
					"\n",
					"    for key in schema['properties'].keys():\n",
					"        data_model['fields'].append({\n",
					"            'metadata': {},\n",
					"            'name': key,\n",
					"            'type': 'string' if isinstance(schema['properties'][key]['type'], list) else schema['properties'][key]['type'],\n",
					"            'nullable': key not in schema['required']\n",
					"        })\n",
					"    \n",
					"    if db_name == 'odw_standardised_db':\n",
					"        data_model['fields'].extend([\n",
					"            {\n",
					"                'metadata': {},\n",
					"                'name': 'ingested_datetime',\n",
					"                'type': 'timestamp',\n",
					"                'nullable': False\n",
					"            },\n",
					"            {\n",
					"                'metadata': {},\n",
					"                'name': 'expected_from',\n",
					"                'type': 'timestamp',\n",
					"                'nullable': False\n",
					"            },\n",
					"            {\n",
					"                'metadata': {},\n",
					"                'name': 'expected_to',\n",
					"                'type': 'timestamp',\n",
					"                'nullable': False\n",
					"            },\n",
					"            {\n",
					"                'metadata': {},\n",
					"                'name': 'message_type',\n",
					"                'type': 'string',\n",
					"                'nullable': False\n",
					"            },\n",
					"            {\n",
					"                'metadata': {},\n",
					"                'name': 'message_enqueued_time_utc',\n",
					"                'type': 'string',\n",
					"                'nullable': False\n",
					"            }\n",
					"        ])\n",
					"\n",
					"    elif db_name == 'odw_harmonised_db':\n",
					"        data_model['fields'].extend([\n",
					"            {\n",
					"                'metadata': {},\n",
					"                'name': 'Migrated',\n",
					"                'type': 'string',\n",
					"                'nullable': False\n",
					"            },\n",
					"            {\n",
					"                'metadata': {},\n",
					"                'name': 'ODTSourceSystem',\n",
					"                'type': 'string',\n",
					"                'nullable': True\n",
					"            },\n",
					"            {\n",
					"                'metadata': {},\n",
					"                'name': 'SourceSystemID',\n",
					"                'type': 'string',\n",
					"                'nullable': True\n",
					"            },\n",
					"            {\n",
					"                'metadata': {},\n",
					"                'name': 'IngestionDate',\n",
					"                'type': 'timestamp',\n",
					"                'nullable': True\n",
					"            },\n",
					"            {\n",
					"                'metadata': {},\n",
					"                'name': 'ValidTo',\n",
					"                'type': 'timestamp',\n",
					"                'nullable': True\n",
					"            },\n",
					"            {\n",
					"                'metadata': {},\n",
					"                'name': 'RowID',\n",
					"                'type': 'string',\n",
					"                'nullable': True\n",
					"            },\n",
					"            {\n",
					"                'metadata': {},\n",
					"                'name': 'IsActive',\n",
					"                'type': 'string',\n",
					"                'nullable': True\n",
					"            }\n",
					"        ])\n",
					"    return data_model"
				],
				"execution_count": 7
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import json\n",
					"\n",
					"url = f\"https://raw.githubusercontent.com/Planning-Inspectorate/data-model/main/schemas/{entity_name}.schema.json\"\n",
					"schema = get_schema_from_url(url)\n",
					"\n",
					"if not schema:\n",
					"    mssparkutils.notebook.exit(f\"Schema for {entity_name} not found.\")\n",
					"\n",
					"mssparkutils.notebook.exit(json.dumps(convert_to_datalake_schema(schema)))"
				],
				"execution_count": 13
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%run  /0-odw-source-to-raw/Fileshare/SAP_HR/py_0_source_to_raw_hr_functions"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import json\n",
					"\n",
					"table_name = entity_name.replace('-', '_')\n",
					"storage_account=mssparkutils.notebook.run('/utils/py_utils_get_storage_account')\n",
					"\n",
					"std_container = \"abfss://odw-standardised@\"+storage_account\n",
					"hrm_container = \"abfss://odw-harmonised@\"+storage_account\n",
					"\n",
					"std_schema = convert_to_datalake_schema(schema, 'odw_standardised_db')\n",
					"hrm_schema = convert_to_datalake_schema(schema, 'odw_harmonised_db')\n",
					"\n",
					"create_table_from_schema(json.dumps(std_schema), \"odw_standardised_db\", table_name, std_container, table_name)   \n",
					"create_table_from_schema(json.dumps(hrm_schema), \"odw_harmonised_db\", table_name, hrm_container, table_name)   "
				],
				"execution_count": null
			}
		]
	}
}