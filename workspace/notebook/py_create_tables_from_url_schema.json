{
	"name": "Notebook 2",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "fb0f8fd6-5038-4efc-b8d3-a6690dfbeecf"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw",
				"name": "pinssynspodw",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"entity_name='nsip-project-update'"
				],
				"execution_count": 14
			},
			{
				"cell_type": "code",
				"source": [
					"def get_schema_from_url(url):\n",
					"    import requests\n",
					"\n",
					"    try:\n",
					"        response = requests.get(url)\n",
					"        if response.status_code == 200:\n",
					"            data = response.json()\n",
					"            return data\n",
					"        else:\n",
					"            print(\"Failed to fetch data from URL. Status code:\", response.status_code)\n",
					"    except requests.exceptions.RequestException as e:\n",
					"        print(\"Error fetching data:\", e)"
				],
				"execution_count": 17
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"url = f\"https://raw.githubusercontent.com/Planning-Inspectorate/data-model/main/schemas/{entity_name}.schema.json\"\n",
					"schema = get_schema_from_url(url)"
				],
				"execution_count": 18
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"schema['required']"
				],
				"execution_count": 29
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					""
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"<!-- «»\\\\|\\\\««Generate Standardised Schema -->"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### Generate Standardised Schema"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"std_schema = {'fields': []}\n",
					"\n",
					"for key in schema['properties'].keys():\n",
					"    std_schema['fields'].append({\n",
					"        'metadata': {},\n",
					"        'name': key,\n",
					"        'type': 'string' if isinstance(schema['properties'][key]['type'], list) else schema['properties'][key]['type'],\n",
					"        'nullable': key not in schema['required']\n",
					"    })\n",
					"\n",
					"std_schema['fields'].extend([{\n",
					"    'metadata': {},\n",
					"    'name': 'ingested_datetime',\n",
					"    'type': 'timestamp',\n",
					"    'nullable': False\n",
					"},\n",
					"{\n",
					"    'metadata': {},\n",
					"    'name': 'expected_from',\n",
					"    'type': 'timestamp',\n",
					"    'nullable': False\n",
					"},{\n",
					"    'metadata': {},\n",
					"    'name': 'expected_to',\n",
					"    'type': 'timestamp',\n",
					"    'nullable': False\n",
					"},{\n",
					"    'metadata': {},\n",
					"    'name': 'message_type',\n",
					"    'type': 'string',\n",
					"    'nullable': False\n",
					"},{\n",
					"    'metadata': {},\n",
					"    'name': 'message_enqueued_time_utc',\n",
					"    'type': 'string',\n",
					"    'nullable': False\n",
					"}])\n",
					"\n",
					""
				],
				"execution_count": 93
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%run  /0-odw-source-to-raw/Fileshare/SAP_HR/py_0_source_to_raw_hr_functions"
				],
				"execution_count": 9
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def create_table_from_schema(jsonschema:str, db_name:str, table_name:str, target_container:str, target_folder:str, change_data_feed=False):\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import json\n",
					"storage_account=mssparkutils.notebook.run('/utils/py_utils_get_storage_account')\n",
					"std_container = \"abfss://odw-standardised@\"+storage_account\n",
					"\n",
					"std_table_name = entity_name.replace('-', '_')\n",
					"std_container \n",
					"print(json.dumps(std_schema), \"odw_standardised_db\", std_table_name, std_container, '/'+std_table_name)   \n",
					"create_table_from_schema(json.dumps(std_schema), \"odw_standardised_db\", std_table_name, std_container, '/'+std_table_name)   "
				],
				"execution_count": 96
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"definition = {\n",
					"      \"Source_ID\": 34,\n",
					"      \"Source_Folder\": \"Horizon\",\n",
					"      \"Source_Frequency_Folder\": \"\",\n",
					"      \"Source_Filename_Format\": \"AllAppeals.csv\",\n",
					"      \"Source_Filename_Start\": \"AllAppeals\",\n",
					"      \"Expected_Within_Weekdays\": 1,\n",
					"      \"Standardised_Path\": \"Horizon\",\n",
					"      \"Standardised_Table_Name\": \"horizon_all_appeals\",\n",
					"      \"Standardised_Table_Definition\": \"standardised_table_definitions/Horizon/AllAppeals.json\"\n",
					"    }\n",
					"standardised_table_loc = \"abfss://odw-config@\"+storage_account + definition['Standardised_Table_Definition']\n",
					"standardised_table_def_json = spark.read.text(standardised_table_loc, wholetext=True).first().value"
				],
				"execution_count": 95
			}
		]
	}
}