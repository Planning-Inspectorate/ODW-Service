{
	"name": "compare_horizon_schemas",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw34",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "280fbe01-d763-4c99-a434-d3437a3a4dcd"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw34",
				"name": "pinssynspodw34",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw34",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"from pyspark.sql.functions import *"
				],
				"execution_count": 43
			},
			{
				"cell_type": "code",
				"source": [
					"df = spark.sql(\"desc table  `odw_standardised_db`.`horizon_appeals_event`\")"
				],
				"execution_count": 47
			},
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": false
				},
				"source": [
					"#display(df)\n",
					"filtered_df = df.drop(\"comment\")\n",
					"\n",
					"display(filtered_df)"
				],
				"execution_count": 51
			},
			{
				"cell_type": "code",
				"source": [
					"# from pyspark.sql import SparkSession\n",
					"\n",
					"# # Clean up and extract the schema definition from the string\n",
					"# schema_raw = schema_string.strip()\n",
					"# schema_raw = schema_raw[schema_raw.index(\"[\") + 1 : schema_raw.rindex(\"]\")]\n",
					"\n",
					"# # Split into column:type pairs\n",
					"# columns = [col.strip() for col in schema_raw.split(\",\")]\n",
					"\n",
					"# # Extract name and type\n",
					"# schema_list = [(col.split(\":\")[0].strip(), col.split(\":\")[1].strip()) for col in columns]\n",
					"\n",
					"# # Create a DataFrame from the list\n",
					"# schema_df = spark.createDataFrame(schema_list, [\"column_name\", \"data_type\"])\n",
					"\n",
					"# # Show the result\n",
					"# schema_df.show(truncate=False)\n",
					""
				],
				"execution_count": 59
			},
			{
				"cell_type": "code",
				"source": [
					"df_schema = spark.read.option(\"multiline\", \"true\").json(\"abfss://odw-config@pinsstodwdevuks9h80mb.dfs.core.windows.net/standardised_table_definitions/Horizon/HorizonAppealsEvent.json\")\n",
					""
				],
				"execution_count": 52
			},
			{
				"cell_type": "code",
				"source": [
					"df_schema.printSchema()"
				],
				"execution_count": 53
			},
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": false
				},
				"source": [
					"df_HorizonAppealsEvent_json = df_schema.selectExpr(\"explode(fields)\").select(\"col.*\")"
				],
				"execution_count": 54
			},
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": false
				},
				"source": [
					"filtered_df_HorizonAppealsEvent_json= (df_HorizonAppealsEvent_json).drop(\"nullable\")"
				],
				"execution_count": 57
			},
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": false
				},
				"source": [
					"display(filtered_df_HorizonAppealsEvent_json)"
				],
				"execution_count": 58
			},
			{
				"cell_type": "code",
				"source": [
					"renamed_df = filtered_df_HorizonAppealsEvent_json \\\n",
					"    .withColumnRenamed(\"name\", \"col_name\") \\\n",
					"    .withColumnRenamed(\"type\", \"data_type\")"
				],
				"execution_count": 60
			},
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": false
				},
				"source": [
					"display(renamed_df)"
				],
				"execution_count": 61
			},
			{
				"cell_type": "code",
				"source": [
					"df1_set = filtered_df.select(\"col_name\", \"data_type\").distinct()\n",
					"df2_set = renamed_df.select(\"col_name\", \"data_type\").distinct()\n",
					"df1_set\n",
					"# Step 2: Columns in df1 but not in df2 (Missing in actual)\n",
					"missing_in_df2 = df1_set.subtract(df2_set)\n",
					"\n",
					"# Step 3: Columns in df2 but not in df1 (Extra or unexpected)\n",
					"extra_in_df2 = df2_set.subtract(df1_set)\n",
					"\n",
					"# Step 4: Columns with mismatched data types\n",
					"# Join on column name to find type mismatches\n",
					"mismatched_types = df1_set.alias(\"a\") \\\n",
					"    .join(df2_set.alias(\"b\"), on=\"col_name\") \\\n",
					"    .filter(\"a.data_type != b.data_type\") \\\n",
					"    .select(\"col_name\", \"a.data_type\", \"b.data_type\")\n",
					"\n",
					"\n",
					"print(\"Missing in df2:\")\n",
					"missing_in_df2.show(truncate=False)\n",
					"\n",
					"print(\"Extra in df2:\")\n",
					"extra_in_df2.show(truncate=False)\n",
					"\n",
					"print(\"Mismatched types:\")\n",
					"mismatched_types.show(truncate=False)"
				],
				"execution_count": 68
			}
		]
	}
}