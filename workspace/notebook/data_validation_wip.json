{
	"name": "data_validation_wip",
	"properties": {
		"folder": {
			"name": "utils"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodwpr",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "f47e2107-8971-40c0-a5ef-6c13df23c39c"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodwpr",
				"name": "pinssynspodwpr",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodwpr",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.2",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Data validation notebook  \r\n",
					"\r\n",
					"This contains a table mapping of source (MiPINS) and target (ODW) tables and various data validation tests to run to compare each source with its corresponding target table."
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#### Imports etc"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"from notebookutils import mssparkutils\r\n",
					"import pprint\r\n",
					"\r\n",
					"# update pandas to make use of pandas.compare \"result_names\" parameter\r\n",
					"# however, %pip magic command is disabled when running a notebook from a pipeline so this needs sorting first\r\n",
					"# %pip install -U pandas\r\n",
					"# import pandas as pd"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#### Get MiPINS password from KeyVault"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"akv_name = 'pinskvsynwodwdevuks'\r\n",
					"secret_name = 'sql-mipins-password'\r\n",
					"kv_linked_service = 'ls_kv'\r\n",
					"password = mssparkutils.credentials.getSecret(akv_name, secret_name, kv_linked_service)\r\n",
					"print(\"Password retrieved\")"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#### Define MiPINS SQL connection"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"source_servername = \"jdbc:sqlserver://pins-prod-pdac-sql.database.windows.net:1433\"\r\n",
					"source_dbname = \"MiPINS-PRD-ISS\"\r\n",
					"source_url = source_servername + \";\" + \"databaseName=\" + source_dbname + \";\"\r\n",
					"source_user = \"kincarta\" \r\n",
					"source_password = password\r\n",
					"print(\"Connection created\")"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#### Dictionary of the mapping between source tables in MiPINS (left) and target tables in ODW (right)  \r\n",
					"\r\n",
					"This can be added to manually and we can maybe keep a copy of this in storage to update independently of the notebook (future enhancement)"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"tablemapping = {\r\n",
					"    \"sap_hr.vw_fact_absence_all\": \"vw_mipins_fact_absence_all\",\r\n",
					"    \"load.High_Court_Appeals\": \"vw_mipins_high_court\",\r\n",
					"    \"live.dim_HR_work_contract\": \"vw_mipins_hr_contract\",\r\n",
					"    \"live.dim_HR_cost_centre\": \"vw_mipins_hr_cost_centre\",\r\n",
					"    \"load.SAP_HR_Leavers\": \"vw_mipins_hr_employee_leavers\",\r\n",
					"    \"sap_hr.vw_fact_sickness\": \"vw_mipins_hr_fact_sickness\",\r\n",
					"    \"Live.dim_HR_Gender\": \"vw_mipins_hr_gender\",\r\n",
					"    \"Live.dim_HR_Organisation_Unit\": \"vw_mipins_hr_organisational_unit\",\r\n",
					"    \"Live.dim_HR_personnel_area\": \"vw_mipins_hr_personnel_area\",\r\n",
					"    \"Live.dim_HR_Personnel_SubArea\": \"vw_mipins_hr_personnel_sub_area\",\r\n",
					"    \"ims.v_master_data_map\": \"vw_mipins_IMS_MasterDataMap\"\r\n",
					"}\r\n",
					"\r\n",
					"print(\"Mapping created\")"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#### Initial manually created dictionary of the source tables and test names  \r\n",
					"\r\n",
					"This can be added to using the functions below  \r\n",
					"\r\n",
					"NB: save this as a reference in the storage account"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"test_results_dict = {\r\n",
					"'Live.dim_HR_Gender': {'target_table': '',\r\n",
					"                        'test1_rows_in_source_not_in_target': '',\r\n",
					"                        'test2_rows_in_target_not_in_source': '',\r\n",
					"                        'test3_count_source_table_rows': '',\r\n",
					"                        'test4_count_target_table_rows': '',\r\n",
					"                        'test5_count_source_table_columns': '',\r\n",
					"                        'test6_count_target_table_columns': ''},\r\n",
					" 'Live.dim_HR_Organisation_Unit': {'target_table': '',\r\n",
					"                                   'test1_rows_in_source_not_in_target': '',\r\n",
					"                                   'test2_rows_in_target_not_in_source': '',\r\n",
					"                                   'test3_count_source_table_rows': '',\r\n",
					"                                   'test4_count_target_table_rows': '',\r\n",
					"                                   'test5_count_source_table_columns': '',\r\n",
					"                                   'test6_count_target_table_columns': ''},\r\n",
					" 'Live.dim_HR_Personnel_SubArea': {'target_table': '',\r\n",
					"                                   'test1_rows_in_source_not_in_target': '',\r\n",
					"                                   'test2_rows_in_target_not_in_source': '',\r\n",
					"                                   'test3_count_source_table_rows': '',\r\n",
					"                                   'test4_count_target_table_rows': '',\r\n",
					"                                   'test5_count_source_table_columns': '',\r\n",
					"                                   'test6_count_target_table_columns': ''},\r\n",
					" 'Live.dim_HR_personnel_area': {'target_table': '',\r\n",
					"                                'test1_rows_in_source_not_in_target': '',\r\n",
					"                                'test2_rows_in_target_not_in_source': '',\r\n",
					"                                'test3_count_source_table_rows': '',\r\n",
					"                                'test4_count_target_table_rows': '',\r\n",
					"                                'test5_count_source_table_columns': '',\r\n",
					"                                'test6_count_target_table_columns': ''},\r\n",
					" 'ims.v_master_data_map': {'target_table': '',\r\n",
					"                           'test1_rows_in_source_not_in_target': '',\r\n",
					"                           'test2_rows_in_target_not_in_source': '',\r\n",
					"                           'test3_count_source_table_rows': '',\r\n",
					"                           'test4_count_target_table_rows': '',\r\n",
					"                           'test5_count_source_table_columns': '',\r\n",
					"                           'test6_count_target_table_columns': ''},\r\n",
					" 'live.dim_HR_cost_centre': {'target_table': '',\r\n",
					"                             'test1_rows_in_source_not_in_target': '',\r\n",
					"                             'test2_rows_in_target_not_in_source': '',\r\n",
					"                             'test3_count_source_table_rows': '',\r\n",
					"                             'test4_count_target_table_rows': '',\r\n",
					"                             'test5_count_source_table_columns': '',\r\n",
					"                             'test6_count_target_table_columns': ''},\r\n",
					" 'live.dim_HR_work_contract': {'target_table': '',\r\n",
					"                               'test1_rows_in_source_not_in_target': '',\r\n",
					"                               'test2_rows_in_target_not_in_source': '',\r\n",
					"                               'test3_count_source_table_rows': '',\r\n",
					"                               'test4_count_target_table_rows': '',\r\n",
					"                               'test5_count_source_table_columns': '',\r\n",
					"                               'test6_count_target_table_columns': ''},\r\n",
					" 'load.High_Court_Appeals': {'target_table': '',\r\n",
					"                             'test1_rows_in_source_not_in_target': '',\r\n",
					"                             'test2_rows_in_target_not_in_source': '',\r\n",
					"                             'test3_count_source_table_rows': '',\r\n",
					"                             'test4_count_target_table_rows': '',\r\n",
					"                             'test5_count_source_table_columns': '',\r\n",
					"                             'test6_count_target_table_columns': ''},\r\n",
					" 'load.SAP_HR_Leavers': {'target_table': '',\r\n",
					"                         'test1_rows_in_source_not_in_target': '',\r\n",
					"                         'test2_rows_in_target_not_in_source': '',\r\n",
					"                         'test3_count_source_table_rows': '',\r\n",
					"                         'test4_count_target_table_rows': '',\r\n",
					"                         'test5_count_source_table_columns': '',\r\n",
					"                         'test6_count_target_table_columns': ''},\r\n",
					" 'sap_hr.vw_fact_absence_all': {'target_table': '',\r\n",
					"                                'test1_rows_in_source_not_in_target': '',\r\n",
					"                                'test2_rows_in_target_not_in_source': '',\r\n",
					"                                'test3_count_source_table_rows': '',\r\n",
					"                                'test4_count_target_table_rows': '',\r\n",
					"                                'test5_count_source_table_columns': '',\r\n",
					"                                'test6_count_target_table_columns': ''},\r\n",
					" 'sap_hr.vw_fact_sickness': {'target_table': '',\r\n",
					"                             'test1_rows_in_source_not_in_target': '',\r\n",
					"                             'test2_rows_in_target_not_in_source': '',\r\n",
					"                             'test3_count_source_table_rows': '',\r\n",
					"                             'test4_count_target_table_rows': '',\r\n",
					"                             'test5_count_source_table_columns': '',\r\n",
					"                             'test6_count_target_table_columns': ''}}\r\n",
					"\r\n",
					"print(\"test_results_dict created\")"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#### Function to define target dataset"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def targetdataset(target_dbtable: str):\r\n",
					"    query = f\"SELECT * FROM `odw_curated_db`.`{target_dbtable}`\"\r\n",
					"    target_df = spark.sql(query)\r\n",
					"    target_df = target_df.toPandas()\r\n",
					"\r\n",
					"    return target_df"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#### Function to define source dataset"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def sourcedataset(source_dbtable: str):\r\n",
					"        sourceData = spark.read \\\r\n",
					"                .format(\"com.microsoft.sqlserver.jdbc.spark\") \\\r\n",
					"                .option(\"url\", source_url) \\\r\n",
					"                .option(\"dbtable\", source_dbtable) \\\r\n",
					"                .option(\"user\", source_user) \\\r\n",
					"                .option(\"password\", source_password).load()\r\n",
					"\r\n",
					"        source_df = sourceData.toPandas()\r\n",
					"\r\n",
					"        return source_df"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#### test1_rows_in_source_not_in_target"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def test1_rows_in_source_not_in_target(test_source_df, test_target_df):\r\n",
					"    result_df = test_source_df[~test_source_df.index.isin(test_target_df.index)]\r\n",
					"    if len(result_df) > 0:\r\n",
					"        result = True\r\n",
					"    else:\r\n",
					"        result = False\r\n",
					"    return result"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#### test2_rows_in_target_not_in_source"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def test2_rows_in_target_not_in_source(test_source_df, test_target_df):\r\n",
					"    result_df = test_target_df[~test_target_df.index.isin(test_source_df.index)]\r\n",
					"    if len(result_df) > 0:\r\n",
					"        result = True\r\n",
					"    else:\r\n",
					"        result = False\r\n",
					"    return result"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#### test3_count_source_table_rows"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def test3_count_source_table_rows(test_source_df):\r\n",
					"    return f'{len(test_source_df):,}'"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#### test4_count_target_table_rows"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def test4_count_target_table_rows(test_target_df):\r\n",
					"    return f'{len(test_target_df):,}'"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#### test5_count_source_table_columns"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def test5_count_source_table_columns(test_source_df):\r\n",
					"    return f'{len(test_source_df.columns):,}'"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#### test6_count_target_table_columns"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def test6_count_target_table_columns(test_target_df):\r\n",
					"    return f'{len(test_target_df.columns):,}'"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#### Function to add a new test to the test results dictionary\r\n",
					"\r\n",
					"Pass a test name into the function and it sets the test result initially to \"\" (empty string)"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# def add_new_test_to_results_dict(test_name: str) -> None:\r\n",
					"#     for k, v in test_results_dict.items():\r\n",
					"#         value_dict = v\r\n",
					"#         value_dict[test_name] = \"\""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# # add a new test\r\n",
					"# add_new_test_to_results_dict(\"test6_count_target_table_columns\")"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#### Function to add a new source table to the test results dictionary\r\n",
					"\r\n",
					"Pass the name of the new source table into the function and it will get added to the test results dictionary with the same values as the other source tables"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# def add_new_source_table_to_test_results_dict(new_source_table: str) -> None:\r\n",
					"#     for k, v in test_results_dict.copy().items():\r\n",
					"#         if new_source_table not in test_results_dict.keys():\r\n",
					"#             test_results_dict[new_source_table] = v"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# # add a new source table\r\n",
					"# add_new_source_table_to_test_result_dict(\"{table name}\")\r\n",
					"# pprint.pprint(test_result_dict)"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#### Loop through tables and run each test against each table"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"for source, target in tablemapping.items():\r\n",
					"    source_dbtable = source\r\n",
					"    target_dbtable = target\r\n",
					"    test_source_df = sourcedataset(source_dbtable)\r\n",
					"    test_target_df = targetdataset(target_dbtable)\r\n",
					"    \r\n",
					"    # run test1_rows_in_source_not_in_target\r\n",
					"    result = test1_rows_in_source_not_in_target(test_source_df, test_target_df)\r\n",
					"    test_results_dict[source_dbtable]['target_table'] = target_dbtable\r\n",
					"    test_results_dict[source_dbtable]['test1_rows_in_source_not_in_target'] = result\r\n",
					"\r\n",
					"    # run test2_rows_in_target_not_in_source\r\n",
					"    result = test2_rows_in_target_not_in_source(test_source_df, test_target_df)\r\n",
					"    test_results_dict[source_dbtable]['test2_rows_in_target_not_in_source'] = result\r\n",
					"\r\n",
					"    # run test3_count_source_table_rows\r\n",
					"    result = test3_count_source_table_rows(test_source_df)\r\n",
					"    test_results_dict[source_dbtable]['test3_count_source_table_rows'] = result\r\n",
					"\r\n",
					"    # run test4_count_target_table_rows\r\n",
					"    result = test4_count_target_table_rows(test_target_df)\r\n",
					"    test_results_dict[source_dbtable]['test4_count_target_table_rows'] = result\r\n",
					"\r\n",
					"    # run test5_count_source_table_columns\r\n",
					"    result = test5_count_source_table_columns(test_source_df)\r\n",
					"    test_results_dict[source_dbtable]['test5_count_source_table_columns'] = result\r\n",
					"\r\n",
					"    # run test6_count_target_table_columns\r\n",
					"    result = test6_count_target_table_columns(test_source_df)\r\n",
					"    test_results_dict[source_dbtable]['test6_count_target_table_columns'] = result\r\n",
					"\r\n",
					"print(\"All tests complete!\")"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#### Show test results in a DataFrame"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"result_df = pd.DataFrame.from_dict(test_results_dict, orient=\"index\")\r\n",
					"result_df.index.name = \"Source Table\"\r\n",
					"result_df"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#### Set the exit value of the notebook to the test results dictionary"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"mssparkutils.notebook.exit(test_results_dict)"
				],
				"execution_count": null
			}
		]
	}
}