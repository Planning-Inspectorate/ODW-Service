{
	"name": "data_validation_wip",
	"properties": {
		"folder": {
			"name": "utils/data-validation"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodwpr",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "4b273dac-902c-47a0-9e61-2f8d20a49f9f"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": true,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodwpr",
				"name": "pinssynspodwpr",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodwpr",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Data validation notebook  \r\n",
					"\r\n",
					"This contains a table mapping of source (MiPINS) and target (ODW) tables and various data validation tests to run to compare each source with its corresponding target table."
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#### Imports etc"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"from notebookutils import mssparkutils\r\n",
					"from pyspark.sql import SparkSession \r\n",
					"from pyspark.sql.types import * \r\n",
					"import pyspark.sql.functions as f\r\n",
					"import pprint\r\n",
					"import json\r\n",
					"from tqdm import tqdm\r\n",
					"from azure.storage.blob import BlobServiceClient\r\n",
					"import requests as r\r\n",
					"import inspect\r\n",
					"import pandas as pd\r\n",
					"\r\n",
					"# NB: DataFrame.iteritems is deprecated from 1.5 upwards. Use .items instead. \r\n",
					"# spark.createDataFrame uses iteritems which won't work so temporarily hardcoding this switch to get around this.\r\n",
					"# Better package management is needed longer term\r\n",
					"pd.DataFrame.iteritems = pd.DataFrame.items"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#### Run data_validation_utils notebook to reference all functions and variables from there  \r\n",
					"\r\n",
					"This keeps this notebook a lot smaller and tidier and just contains the bare minimum code"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%run utils/data-validation/py_utils_data_validation"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"test_function_list = [\r\n",
					"    test1_rows_in_source_not_in_target,\r\n",
					"    test1_export_values,\r\n",
					"    test2_rows_in_target_not_in_source,\r\n",
					"    test2_export_values,\r\n",
					"    test3_count_source_table_rows,\r\n",
					"    test4_count_target_table_rows,\r\n",
					"    test5_count_source_table_columns,\r\n",
					"    test6_count_target_table_columns,\r\n",
					"    test7_duplicates_in_odw,\r\n",
					"    test8_source_target_shape_match,\r\n",
					"    test9_values_mismatch\r\n",
					"    # test10_count_values_mismatch,\r\n",
					"    # test11_values_match_percentage\r\n",
					"]\r\n",
					"\r\n",
					"test_list = [\r\n",
					"    \"test1_rows_in_source_not_in_target\",\r\n",
					"    \"test2_rows_in_target_not_in_source\",\r\n",
					"    \"test3_count_source_table_rows\",\r\n",
					"    \"test4_count_target_table_rows\",\r\n",
					"    \"test5_count_source_table_columns\",\r\n",
					"    \"test6_count_target_table_columns\",\r\n",
					"    \"test7_duplicates_in_odw\",\r\n",
					"    \"test8_source_target_shape_match\",\r\n",
					"    \"test9_values_mismatch\"\r\n",
					"    # \"test10_count_values_mismatch\",\r\n",
					"    # \"test11_values_match_percentage\"\r\n",
					"]"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#### Print lists of all callables and / or functions available in the current context.  \r\n",
					"\r\n",
					"This might be useful to see in one place here rather than switching between notebooks looking for the function names etc"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# print a list of everything that is callable within the current context (variables, functions, imports etc)\r\n",
					"# print(\"List of callables...\")\r\n",
					"# callables = [f for f in dir() if f[0] != '_']\r\n",
					"# callables.sort()\r\n",
					"# pprint.pprint(callables)\r\n",
					"# print(\"*********************************\")\r\n",
					"# print(\"*********************************\")\r\n",
					"# print a list of functions available in the current context\r\n",
					"function_list = ([f.__name__ for f in globals().values() if type(f) == type(lambda *args: None)])\r\n",
					"# list of functions that I'm not interested in (maybe built-in notebook functions?)\r\n",
					"unwanted = [\"trap_exit\", \"initializeLHContext\", \"display\"]\r\n",
					"for i in unwanted:\r\n",
					"    function_list.remove(i)\r\n",
					"function_list.sort()\r\n",
					"# print(\"List of functions...\")\r\n",
					"# pprint.pprint(function_list)"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#### Print the test functions and their required arguments"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"for test in test_function_list:\r\n",
					"    func_args = inspect.getfullargspec(test).args\r\n",
					"    print(f'{test.__name__} -> {func_args}')\r\n",
					"    # print(type(func_args))"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# add a new test\r\n",
					"# add_new_test_to_results_dict(\"test8_source_target_shape_match\")"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# # add a new source table\r\n",
					"# add_new_source_table_to_test_result_dict(\"{table name}\")\r\n",
					"# pprint.pprint(test_result_dict)"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# for source, target in table_mapping.items():\r\n",
					"#     if source == 'live.dim_HR_cost_centre':\r\n",
					"#         source_dbtable = source\r\n",
					"#         target_dbtable = target\r\n",
					"#         test_source_df = sourcedataset(source_dbtable)\r\n",
					"#         test_target_df = targetdataset(target_database, target_dbtable)\r\n",
					"#         test_results_dict[source_dbtable]['target_table'] = target_dbtable\r\n",
					"        \r\n",
					"#         # run tests\r\n",
					"#         test_vars = []\r\n",
					"\r\n",
					"#         for test_func in test_function_list:\r\n",
					"#             func_args = inspect.getfullargspec(test_func).args\r\n",
					"#             result = test_func(*func_args)\r\n",
					"#             print(result)\r\n",
					"\r\n",
					"# print(\"All tests complete!\")"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# print(test_vars)\r\n",
					"# print(type(test_vars[0]))\r\n",
					"# for k, v in myvars.items():\r\n",
					"#     if k == 'test_source_df':\r\n",
					"#         print(k)"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#### Print the table mappings"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"pprint.pprint(table_mapping)"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#### Print the table keys"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"pprint.pprint(table_keys)"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#### Loop through tables and run each test against each table"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"for source, target in tqdm(table_mapping.items()):\r\n",
					"    source_dbtable = source\r\n",
					"    target_dbtable = target\r\n",
					"    test_source_df = sourcedataset(source_dbtable)\r\n",
					"    test_target_df = targetdataset(target_database, target_dbtable)\r\n",
					"    \r\n",
					"    # run test1_rows_in_source_not_in_target\r\n",
					"    result = test1_rows_in_source_not_in_target(test_source_df, test_target_df)\r\n",
					"    test_results_dict[source_dbtable]['target_table'] = target_dbtable\r\n",
					"    test_results_dict[source_dbtable]['test1_rows_in_source_not_in_target'] = result\r\n",
					"\r\n",
					"    # run test2_rows_in_target_not_in_source\r\n",
					"    result = test2_rows_in_target_not_in_source(test_source_df, test_target_df)\r\n",
					"    test_results_dict[source_dbtable]['test2_rows_in_target_not_in_source'] = result\r\n",
					"\r\n",
					"    # run test3_count_source_table_rows\r\n",
					"    result = test3_count_source_table_rows(test_source_df)\r\n",
					"    test_results_dict[source_dbtable]['test3_count_source_table_rows'] = result\r\n",
					"\r\n",
					"    # run test4_count_target_table_rows\r\n",
					"    result = test4_count_target_table_rows(test_target_df)\r\n",
					"    test_results_dict[source_dbtable]['test4_count_target_table_rows'] = result\r\n",
					"\r\n",
					"    # run test5_count_source_table_columns\r\n",
					"    result = test5_count_source_table_columns(test_source_df)\r\n",
					"    test_results_dict[source_dbtable]['test5_count_source_table_columns'] = result\r\n",
					"\r\n",
					"    # run test6_count_target_table_columns\r\n",
					"    result = test6_count_target_table_columns(test_target_df)\r\n",
					"    test_results_dict[source_dbtable]['test6_count_target_table_columns'] = result\r\n",
					"\r\n",
					"    # run test7_duplicates_in_odw\r\n",
					"    result = test7_duplicates_in_odw(test_target_df)\r\n",
					"    test_results_dict[source_dbtable]['test7_duplicates_in_odw'] = result\r\n",
					"\r\n",
					"    # run test8_source_target_shape_match\r\n",
					"    result = test8_source_target_shape_match(test_source_df, test_target_df)\r\n",
					"    test_results_dict[source_dbtable]['test8_source_target_shape_match'] = result\r\n",
					"\r\n",
					"print(\"All tests complete!\")"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#### Show test results in a DataFrame"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"result_df = pd.DataFrame.from_dict(test_results_dict, orient=\"index\")\r\n",
					"result_df.index.name = \"Source Table\"\r\n",
					"result_df"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# # Get full path\r\n",
					"# test_results_path = create_adls_path(account_name, container_name, test_results_relative_path)\r\n",
					"\r\n",
					"# # convert result_df to spark DataFrame\r\n",
					"# data = spark.createDataFrame(result_df)\r\n",
					"\r\n",
					"# # use repartition and set to 1 so all data is written to 1 file\r\n",
					"# data = data.repartition(1)\r\n",
					"\r\n",
					"# # call the write_to_storage function, passing in the variables above\r\n",
					"# write_to_storage(account_name, container_name, test_results_relative_path, data)\r\n",
					"# print(\"File written to storage\")\r\n",
					"\r\n",
					"# # Rename the file\r\n",
					"# print(\"Renaming file...\")\r\n",
					"# test_results_relative_path_new = 'data_validation/outputs/test_results/test_results.csv'\r\n",
					"# test_results_new_path = create_adls_path(account_name, container_name, test_results_relative_path_new)\r\n",
					"# rename_csv_files(old_path=test_results_path, new_path=test_results_new_path)\r\n",
					"# print(\"File renamed: \" + test_results_new_path)\r\n",
					"\r\n",
					"# # Remove _SUCCESS file\r\n",
					"# print(\"Deleting _SUCCESS file...\")\r\n",
					"# remove_success_files(old_path=test_results_path, new_path=test_results_new_path)\r\n",
					"# print(\"_SUCCESS file deleted\")"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#### Write mismatched records to a csv file and send to storage account"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# loop through test results and set the source and target DataFrames\r\n",
					"for source, target in tqdm(test_results_dict.items()):\r\n",
					"    source_dbtable = source\r\n",
					"    target_dbtable = target['target_table']\r\n",
					"    test_source_df = sourcedataset(source_dbtable)\r\n",
					"    test_target_df = targetdataset(target_database, target_dbtable)\r\n",
					"\r\n",
					"    # if certain tests are True then the records need exporting to csv and saved in storage\r\n",
					"    if target['test1_rows_in_source_not_in_target'] == True:\r\n",
					"        test = test1_export_values\r\n",
					"        folder = 'test1_rows_in_source_not_in_target'\r\n",
					"        write_records_to_csv(test, folder)\r\n",
					"        print(\"test1 records saved to storage\")\r\n",
					"    elif target['test2_rows_in_target_not_in_source'] == True:\r\n",
					"        test = test2_export_values\r\n",
					"        folder = 'test2_rows_in_target_not_in_source'\r\n",
					"        write_records_to_csv(test, folder)\r\n",
					"        print(\"test2 records saved to storage\")\r\n",
					"    else:\r\n",
					"        print(f'Table {source}: No records saved to storage')\r\n",
					"\r\n",
					"print(\"Test 1 and test 2 output files written to storage\")"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#### Run pandas compare against DataFrames with the same shape"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# for source, target in tqdm(test_results_dict.items()):\r\n",
					"#     if source == 'load.SAP_HR_Leavers':\r\n",
					"#         source_dbtable = source\r\n",
					"#         target_dbtable = target['target_table']\r\n",
					"#         test_source_df = sourcedataset(source_dbtable)\r\n",
					"#         test_target_df = targetdataset(target_database, target_dbtable)\r\n",
					"#         print(f\"{source_dbtable} -> {target_dbtable}\")\r\n",
					"#         if target['test8_source_target_shape_match'] == True:\r\n",
					"#             compare_df = pandas_compare_dataframes(test_source_df, test_target_df)\r\n",
					"#             print(compare_df)\r\n",
					"#         else:\r\n",
					"#             print(f\"Source and target shapes don't match for {source_dbtable}\")\r\n",
					"        \r\n",
					"# print(\"Finished comparisons\")"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# test_source_df"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# test_target_df"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# rename ODW columns (just in DataFrame) with the MiPINS column names so they can be compared\r\n",
					"# test_target_df.columns = [col for col in test_source_df.columns]"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# test_target_df.info()"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# test_source_df = test_source_df.astype('string')\r\n",
					"# test_target_df = test_target_df.astype('string')\r\n",
					"# print(f'Source DataFrame and target DataFrame data types set to string to enable comparison')"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Table keys need referencing from a config file\r\n",
					"# table_key = ['Pers#No#', 'Leaving']\r\n",
					"# table_key = ['dim_personnel_subarea_key']\r\n",
					"# merge_df = test_source_df.merge(test_target_df, how='outer', on=table_key, suffixes=('_MiPINS', '_ODW'), indicator='Table?')\r\n",
					"# merge_df.set_index(table_key, inplace=True, drop=False)\r\n",
					"# merge_df"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Set merge_df columns to string to enable comparison\r\n",
					"# merge_df = merge_df.astype('string')\r\n",
					"# print(f'Merged DataFrame data types set to string to enable comparison')"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# merge_df.info()"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# merge_df = merge_df.fillna('UNKNOWN')"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# def match_flag(row):\r\n",
					"#     if row['WorkContractCode_MiPINS'] == row['WorkContractCode_ODW']:\r\n",
					"#         return True\r\n",
					"#     else:\r\n",
					"#         return False\r\n",
					"\r\n",
					"# merge_df['match'] = merge_df.apply(match_flag, axis = 1)\r\n",
					"# merge_df"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# MiPINS_cols = table_key + ['Table?'] + [col for col in merge_df.columns if (col[-7:]=='_MiPINS')]\r\n",
					"# print(MiPINS_cols)\r\n",
					"# MiPINS_renamed = list([col.replace('_MiPINS', '') for col in MiPINS_cols])\r\n",
					"# print(MiPINS_renamed)\r\n",
					"# odw_cols = table_key + ['Table?'] + [col for col in merge_df.columns if (col[-4:]=='_ODW')]\r\n",
					"# print(odw_cols)\r\n",
					"# odw_renamed = list([col.replace('_ODW', '') for col in odw_cols])\r\n",
					"# print(odw_renamed)"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# merge_df_mipins = merge_df[MiPINS_cols]\r\n",
					"# merge_df_mipins.columns = [col for col in MiPINS_renamed]\r\n",
					"# # merge_df_mipins.set_index(table_key)\r\n",
					"# merge_df_mipins.head(5)"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# merge_df_mipins.info()"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# merge_df_odw = merge_df[odw_cols]\r\n",
					"# merge_df_odw.columns = [col for col in odw_renamed]\r\n",
					"# # merge_df_odw.set_index(table_key)\r\n",
					"# merge_df_odw.head(5)"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# merge_df_mipins.shape == merge_df_odw.shape"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# df_compare = pandas_compare_dataframes(merge_df_mipins, merge_df_odw) \r\n",
					"# # merge_df_mipins.compare(merge_df_odw, result_names=('MiPINS', 'ODW'), keep_shape=False, keep_equal=False)\r\n",
					"# # df_compare.set_index(merge_df.index, inplace=True)\r\n",
					"# # df_compare[[table_key]].fillna(value = )\r\n",
					"# df_compare"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#### Call create_dataframes_to_compare function"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"for source, target in tqdm(test_results_dict.items()):\r\n",
					"    for table, key in table_keys.items():\r\n",
					"        if table == source:\r\n",
					"            table_key = key\r\n",
					"            source_dbtable = source\r\n",
					"            target_dbtable = target['target_table']\r\n",
					"            test_source_df = sourcedataset(source_dbtable)\r\n",
					"            test_target_df = targetdataset(target_database, target_dbtable)\r\n",
					"            print(f'Creating df_compare for table {source_dbtable}')\r\n",
					"            print(\"****************************************\")\r\n",
					"            print(\"****************************************\")\r\n",
					"            # check if dataframes have the same number of columns\r\n",
					"            if test5_count_source_table_columns(test_source_df) == test6_count_target_table_columns(test_target_df):\r\n",
					"                df_compare = create_dataframes_to_compare(test_source_df, test_target_df, table_key)\r\n",
					"                print(\"Running test9_values_mismatch against df_compare...\")\r\n",
					"                result = test9_values_mismatch(df_compare)\r\n",
					"                print(f'Values mismatch: {result}')\r\n",
					"                print(\"Updating test_results_dict with test9_values_mismatch result...\")\r\n",
					"                test_results_dict[source_dbtable]['target_table'] = target_dbtable\r\n",
					"                test_results_dict[source_dbtable]['test9_values_mismatch'] = result\r\n",
					"                # save to results to storage\r\n",
					"                print(\"Writing the output to storage...\")\r\n",
					"                df_compare_csv = df_compare.to_csv(header=True, index=True)\r\n",
					"                df_compare_path = f'{mount_path}/outputs/comparison_records'\r\n",
					"                df_compare_filename = f'{source_dbtable}.csv'\r\n",
					"                write_file_to_storage(\r\n",
					"                    path=df_compare_path,\r\n",
					"                    filename=df_compare_filename,\r\n",
					"                    data=df_compare_csv\r\n",
					"                    )\r\n",
					"                print(\"****************************************\")\r\n",
					"                print(\"****************************************\")\r\n",
					"            else:\r\n",
					"                print(\"Column mismatch - cannot compare\")\r\n",
					"                result = \"Column mismatch\"\r\n",
					"                test_results_dict[source_dbtable]['test9_values_mismatch'] = result\r\n",
					"                print(\"****************************************\")\r\n",
					"                print(\"****************************************\")"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#### Show updated test results table"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"result_df = pd.DataFrame.from_dict(test_results_dict, orient=\"index\")\r\n",
					"result_df.index.name = \"Source Table\"\r\n",
					"result_df"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#### Write test results file to storage account"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"test_results_csv = result_df.to_csv(header=True, index=True)\r\n",
					"\r\n",
					"write_file_to_storage(\r\n",
					"    path = f'{mount_path}{test_results_relative_path}',\r\n",
					"    filename = test_results_file_name,\r\n",
					"    data = test_results_csv\r\n",
					")"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# mssparkutils.fs.put(test_file, test_csv, overwrite=True)\r\n",
					"# mssparkutils.fs.ls(mount_path)"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"    # source = 'load.SAP_HR_Leavers'\r\n",
					"    # folder = source\r\n",
					"\r\n",
					"    # # pass in the source table name to the file path so the records for each source table are saved in their own folder\r\n",
					"    # relative_path = f'data_validation/outputs/test_results_records/{folder}/{source}'\r\n",
					"    # data = spark.createDataFrame(df_compare)\r\n",
					"\r\n",
					"    # # cast null columns to string to avoid errors\r\n",
					"    # data = data.select([f.lit(None).cast('string').alias(i.name) if isinstance(i.dataType, NullType) else i.name for i in data.schema])\r\n",
					"\r\n",
					"    # # repartition so all data is written to a single file\r\n",
					"    # data = data.repartition(1)\r\n",
					"\r\n",
					"    # # call the write_to_storage function, passing in the account, path and data variables\r\n",
					"    # path = create_adls_path(account_name, container_name, relative_path)\r\n",
					"    # write_to_storage(account_name, container_name, relative_path, data)\r\n",
					"\r\n",
					"    # print(f'File {source} written to storage')\r\n",
					"    # print(\"Renaming file...\")\r\n",
					"\r\n",
					"    # # rename the file to a sensible name using the mssparkutils mv function\r\n",
					"    # relative_path_new = f'data_validation/outputs/test_results_records/{folder}/{source}/{source}.csv'\r\n",
					"    # new_path = create_adls_path(account_name, container_name, relative_path_new)\r\n",
					"    # rename_csv_files(old_path=path, new_path=new_path)\r\n",
					"\r\n",
					"    # print(f'File renamed - new file path: {new_path}')\r\n",
					"\r\n",
					"    # print(\"Deleting _SUCCESS file\")\r\n",
					"\r\n",
					"    # remove_success_files(old_path=path, new_path=new_path)"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# print(mount_path)\r\n",
					"# print(test_file)\r\n",
					"# mssparkutils.fs.ls(mount_path)"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# mssparkutils.fs.help()"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# %%pyspark\r\n",
					"# df = spark.sql(\"SELECT * FROM `odw_curated_db`.`vw_mipins_fact_absence_all`\")\r\n",
					"# df = df.toPandas()\r\n",
					"# df.head(10)\r\n",
					"# df.info()"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#### Set the exit value of the notebook  \r\n",
					"\r\n",
					"This can be anything - dictionary, list, single value. \r\n",
					"\r\n",
					"We could pass in a list of global variables for example and then make use of those in a pipeline."
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# mssparkutils.notebook.exit(test_results_dict)"
				],
				"execution_count": null
			}
		]
	}
}