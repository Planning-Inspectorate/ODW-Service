{
	"name": "vw_hr_measures",
	"properties": {
		"folder": {
			"name": "odw-curated/saphr"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw34",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "8ee89b9c-d551-470a-83bd-f25a435719f3"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw34",
				"name": "pinssynspodw34",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw34",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#### The purpose of this notebook is to read data from Harmoised layer and build a view & table for Power BI use.\n",
					"\n",
					"**Author** &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   **Created Date** &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; **Description**  \n",
					"Prathap Adicherla &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;01-April-2025 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Measures for HR Covered in here :\n",
					"Enables HR reporting on headcount, diversity, leave liability, and workforce costs with standardized dimensions\n",
					"\n",
					"\n",
					"\n",
					";"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"from odw.core.util.util import Util\n",
					"from pyspark.sql.functions import udf, col, lit, when, coalesce, concat, sum, avg, max, min, count, countDistinct, date_format, to_date, datediff, months_between, year, month,  hour, minute, second, expr, asc, desc\n",
					"from pyspark.sql.types import DateType, TimestampType, StringType, IntegerType, FloatType, DoubleType, BooleanType, StructType, StructField, ArrayType, MapType\n",
					"from pyspark.sql.window import Window\n",
					"from pyspark.sql.functions import row_number, rank, dense_rank, lag, lead, ntile\n",
					"from pyspark.sql import SQLContext\n",
					"from pyspark.sql import DataFrame\n",
					"from pyspark.sql import functions as F\n",
					"from pyspark.sql.avro.functions import from_avro, to_avro\n",
					"from pyspark.sql.streaming import DataStreamReader, DataStreamWriter\n",
					"from pyspark.sql.utils import AnalysisException\n",
					"from pyspark.sql.catalog import Catalog\n",
					"from pyspark.sql.column import Column\n",
					"from pyspark.sql.group import GroupedData\n",
					"from pyspark.sql.pandas.functions import pandas_udf\n",
					"\n",
					"from datetime import datetime, timedelta\n",
					"import pandas as pd\n",
					"import numpy as np"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"from odw.core.util.logging_util import LoggingUtil"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### The view vw_hr_measures is designed to provide a comprehensive dataset related to employee measures, integrating historical HR data with current employee statuses :\n",
					"\n",
					"##### Overview\n",
					"##### Purpose: To aggregate and analyze employee data, including starters, leavers, and current employees, by combining various historical and dimensional datasets."
				]
			},
			{
				"cell_type": "code",
				"source": [
					"import json\n",
					"\n",
					"# Initialize result dictionary\n",
					"result = {\n",
					"    \"status\": \"success\",\n",
					"    \"record_count\": 0,\n",
					"    \"error_message\": None\n",
					"}\n",
					"\n",
					"try:\n",
					"    LoggingUtil().log_info(\"Starting HR Measures setup\")\n",
					"    \n",
					"    # Get storage account \n",
					"    storage_account = Util.get_storage_account()\n",
					"    LoggingUtil().log_info(f\"Using storage account: {storage_account}\")\n",
					"    \n",
					"    # Fix the path\n",
					"    storage_account = storage_account.rstrip('/')\n",
					"    delta_table_path = f\"abfss://odw-curated@{storage_account}/saphr/pbi_hr_measures\"\n",
					"    LoggingUtil().log_info(f\"Delta table will be created at: {delta_table_path}\")\n",
					"    \n",
					"    # Create/refresh view\n",
					"    LoggingUtil().log_info(\"Creating view odw_curated_db.vw_hr_measures\")\n",
					"    spark.sql(\"\"\"\n",
					"    CREATE OR REPLACE VIEW odw_curated_db.vw_hr_measures AS\n",
					"    \n",
					"    WITH BaseData AS (\n",
					"        SELECT DISTINCT\n",
					"            hist_sap.PersNo,\n",
					"            hist_sap.Report_MonthEnd_Date,\n",
					"            hist_sap.OrgStartDate,\n",
					"            hist_sap.FTE2,\n",
					"            hist_sap.CostCtr,\n",
					"            hist_sap.PA,\n",
					"            hist_sap.PSubarea,\n",
					"            hist_sap.Orgunit,\n",
					"            hist_sap.PSgroup,\n",
					"            hist_sap.WorkC,\n",
					"            hist_sap.WorkContract,\n",
					"            hist_sap.GenderKey,\n",
					"            hist_sap.Birthdate,\n",
					"            hist_sap.Wkhrs,\n",
					"            hist_sap.leave_entitlement_hrs,\n",
					"            hist_sap.leave_taken_hrs,\n",
					"            hist_sap.leave_remaining_hours,\n",
					"            hist_sap.leave_remaining_prorata_hours,\n",
					"            hist_sap.Annualsalary,\n",
					"            hist_sap.Position1,\n",
					"            hist_sap.FixTermEndDate,\n",
					"            hist_sap.ContractType,\n",
					"            hist_sap.PArea,\n",
					"            cc.CostCentre AS dim_cost_centre_key,\n",
					"            pa.dim_personnel_area_key,\n",
					"            psa.dim_personnel_subarea_key,\n",
					"            org.dim_organisation_key,\n",
					"            pg.Grade,\n",
					"            wc.dim_work_contract_key,\n",
					"            gender.dim_gender_key,\n",
					"            dt.dim_date_key,\n",
					"            dt.date AS report_date,\n",
					"            start_dt.dim_date_key AS dim_started_date_key,\n",
					"            Leavers.Leaving,\n",
					"            Leavers.ReasonforAction,\n",
					"            leavingdt.dim_date_key AS dim_leaving_date_key,\n",
					"            leavingdt.date AS leaving_date,\n",
					"            cc.Directorate\n",
					"\n",
					"        FROM odw_harmonised_db.hist_sap_hr AS hist_sap\n",
					"        LEFT JOIN ( \n",
					"            SELECT \n",
					"              CostCentre,\n",
					"              CostCentreDesc AS Area,\n",
					"              Branch AS Department,\n",
					"              Directorate\n",
					"            FROM\n",
					"              odw_standardised_db.sap_finance_dim_costcentre  \n",
					"            WHERE current_record='Y'\n",
					"        ) cc ON CASE WHEN hist_sap.CostCtr = '' THEN '-1' ELSE hist_sap.CostCtr END = cc.CostCentre\n",
					"        LEFT JOIN odw_curated_db.vw_dim_HR_personnel_area AS pa ON hist_sap.PA = pa.PersonnelAreaCode\n",
					"        LEFT JOIN odw_curated_db.vw_dim_HR_Personnel_SubArea AS psa ON hist_sap.PSubarea = psa.PersonnelSubAreaCode\n",
					"        LEFT JOIN odw_curated_db.vw_dim_HR_organisation_unit AS org \n",
					"            ON COALESCE(NULLIF(hist_sap.Orgunit, ''), '-1') = org.OrganisationUnitCode\n",
					"LEFT JOIN odw_curated_db.pbi_dim_HR_Grade AS pg ON \n",
					"    COALESCE(NULLIF(NULLIF(TRIM(hist_sap.PSgroup), ''), 'NULL'), '-1') = pg.Grade\n",
					"        LEFT JOIN odw_curated_db.vw_dim_HR_work_contract AS wc ON hist_sap.WorkC = wc.WorkContractCode\n",
					"            AND hist_sap.WorkContract = wc.WorkContract\n",
					"        LEFT JOIN odw_curated_db.vw_dim_HR_gender AS gender ON CASE WHEN hist_sap.GenderKey = '' THEN 'Unknown' ELSE hist_sap.GenderKey END = gender.gender\n",
					"        LEFT JOIN odw_harmonised_db.live_dim_date AS dt ON hist_sap.Report_MonthEnd_Date = dt.date\n",
					"        LEFT JOIN odw_harmonised_db.live_dim_date AS start_dt ON hist_sap.OrgStartDate = start_dt.date\n",
					"        LEFT JOIN odw_harmonised_db.load_SAP_HR_Leavers AS Leavers ON hist_sap.PersNo = Leavers.PersNo\n",
					"            AND hist_sap.OrgStartDate = Leavers.OrgStartDate\n",
					"            AND hist_sap.Report_MonthEnd_Date = CASE \n",
					"                WHEN DATE_FORMAT(Leavers.OrgStartDate, 'yyyyMM') = DATE_FORMAT(Leavers.Leaving, 'yyyyMM') THEN LAST_DAY(Leavers.Leaving)\n",
					"                ELSE LAST_DAY(ADD_MONTHS(Leavers.Leaving, -1))\n",
					"            END\n",
					"        LEFT JOIN odw_harmonised_db.live_dim_date AS leavingdt ON Leavers.Leaving = leavingdt.date\n",
					"    ),\n",
					"\n",
					"    LatestEmployeeInfo AS (\n",
					"        SELECT DISTINCT\n",
					"            q.PersNo,\n",
					"            q.FixTermEndDate AS Fix_Term_End_Date,\n",
					"            q.ContractType AS Contract_Type\n",
					"        FROM\n",
					"            (SELECT \n",
					"                RANK() OVER (PARTITION BY PersNo ORDER BY Report_MonthEnd_Date DESC) AS rnk, \n",
					"                PersNo, \n",
					"                Report_MonthEnd_Date, \n",
					"                FixTermEndDate,\n",
					"                ContractType\n",
					"            FROM odw_harmonised_db.hist_sap_hr) q\n",
					"        WHERE rnk = 1\n",
					"    ),\n",
					"\n",
					"    MainData AS (\n",
					"        SELECT DISTINCT \n",
					"            CONCAT(RIGHT(PersNo, 6), '-', DATE_FORMAT(Report_MonthEnd_Date, 'yyyyMMdd')) AS PersonReportMonthEndKey,\n",
					"            PersNo AS PersonKey,\n",
					"            FTE2 AS FTE,\n",
					"            COALESCE(dim_cost_centre_key, '-1') AS dim_cost_centre_key,\n",
					"            dim_personnel_area_key,\n",
					"            dim_personnel_subarea_key,\n",
					"            COALESCE(dim_organisation_key, -1) AS dim_organisation_key,\n",
					"COALESCE(Grade, '-1') AS Grade,\n",
					"\n",
					"            dim_work_contract_key,\n",
					"            dim_gender_key,\n",
					"            dim_date_key,\n",
					"            CASE \n",
					"                WHEN LAST_DAY(OrgStartDate) = Report_MonthEnd_Date THEN 'Starter'\n",
					"                WHEN Leaving IS NOT NULL THEN 'Leaver'\n",
					"                ELSE NULL \n",
					"            END AS ReportFlag,\n",
					"            dim_started_date_key,\n",
					"            dim_leaving_date_key,\n",
					"            CASE \n",
					"                WHEN Leaving IS NOT NULL THEN ReasonforAction\n",
					"                ELSE NULL\n",
					"            END AS ReasonForAction,\n",
					"            PArea,\n",
					"            COALESCE(Wkhrs, 0) AS WorkingHours,\n",
					"            ROUND(CASE \n",
					"                WHEN Leaving IS NOT NULL THEN \n",
					"                    MONTHS_BETWEEN(leaving_date, OrgStartDate) / 12.0\n",
					"                ELSE \n",
					"                    MONTHS_BETWEEN(report_date, OrgStartDate) / 12.0\n",
					"            END, 3) AS LengthOfService,\n",
					"            ROUND(CASE \n",
					"                WHEN Report_MonthEnd_Date >= '2024-02-29' THEN \n",
					"                    CASE \n",
					"                        WHEN Birthdate LIKE '%/%' THEN \n",
					"                            MONTHS_BETWEEN(report_date, \n",
					"                                CASE \n",
					"                                    WHEN LENGTH(Birthdate) >= 10 THEN TO_DATE(Birthdate, 'dd/MM/yyyy')\n",
					"                                    ELSE NULL\n",
					"                                END\n",
					"                            ) / 12.0\n",
					"                        ELSE \n",
					"                            MONTHS_BETWEEN(report_date, Birthdate) / 12.0\n",
					"                    END\n",
					"                ELSE \n",
					"                    MONTHS_BETWEEN(report_date, Birthdate) / 12.0\n",
					"            END, 3) AS Age,\n",
					"            COALESCE(leave_entitlement_hrs, 0) AS LeaveEntitlementHours,\n",
					"            COALESCE(leave_taken_hrs, 0) AS LeaveTakenHours,\n",
					"            COALESCE(leave_remaining_hours, 0) AS LeaveRemainingHours,\n",
					"            COALESCE(leave_remaining_prorata_hours, 0) AS LeaveRemainingProrataHours,\n",
					"            COALESCE(CAST(Annualsalary AS DECIMAL(18,2)), 0) AS AnnualSalary,\n",
					"            Position1,\n",
					"            FixTermEndDate AS Fix_Term_End_Date,\n",
					"            ContractType AS Contract_Type,\n",
					"            Directorate\n",
					"        FROM BaseData\n",
					"    ),\n",
					"\n",
					"    -- Only include leavers that DON'T overlap with MainData keys\n",
					"    StartersNotInHist AS (\n",
					"        SELECT DISTINCT \n",
					"            CONCAT(RIGHT(a.PersNo, 6), '-', DATE_FORMAT(LAST_DAY(ADD_MONTHS(COALESCE(leavingdt.date, a.Leaving), -1)), 'yyyyMMdd')) AS PersonReportMonthEndKey,\n",
					"            a.PersNo AS PersonKey,\n",
					"            NULL AS FTE,\n",
					"            '-1' AS dim_cost_centre_key,\n",
					"            COALESCE(pa.dim_personnel_area_key, -1) AS dim_personnel_area_key,\n",
					"            COALESCE(psa.dim_personnel_subarea_key, -1) AS dim_personnel_subarea_key,\n",
					"            COALESCE(org.dim_organisation_key, -1) AS dim_organisation_key,\n",
					"            '-1' AS Grade,\n",
					"            COALESCE(wc.dim_work_contract_key, -1) AS dim_work_contract_key,\n",
					"            1 AS dim_gender_key,\n",
					"            COALESCE(report_dt.dim_date_key, \n",
					"                CAST(DATE_FORMAT(LAST_DAY(ADD_MONTHS(COALESCE(leavingdt.date, a.Leaving), -1)), 'yyyyMMdd') AS INT)) AS dim_date_key,\n",
					"            'Starter' AS ReportFlag,\n",
					"            COALESCE(start_dt.dim_date_key, \n",
					"                CAST(DATE_FORMAT(a.OrgStartDate, 'yyyyMMdd') AS INT)) AS dim_started_date_key,\n",
					"            COALESCE(leavingdt.dim_date_key,\n",
					"                CAST(DATE_FORMAT(a.Leaving, 'yyyyMMdd') AS INT)) AS dim_leaving_date_key,\n",
					"            CASE \n",
					"                WHEN a.Leaving IS NOT NULL THEN a.ReasonforAction\n",
					"                ELSE NULL\n",
					"            END AS ReasonForAction,\n",
					"            'PI' AS PArea,\n",
					"            0 AS WorkingHours,\n",
					"            NULL AS LengthOfService,\n",
					"            NULL AS Age,\n",
					"            0 AS LeaveEntitlementHours,\n",
					"            0 AS LeaveTakenHours,\n",
					"            0 AS LeaveRemainingHours,\n",
					"            0 AS LeaveRemainingProrataHours,\n",
					"            0 AS AnnualSalary,\n",
					"            a.Position1,\n",
					"            COALESCE(fted.Fix_Term_End_Date, '') AS Fix_Term_End_Date,\n",
					"            COALESCE(fted.Contract_Type, '') AS Contract_Type,\n",
					"            NULL AS Directorate\n",
					"        FROM odw_harmonised_db.load_SAP_HR_Leavers a\n",
					"        LEFT JOIN odw_curated_db.vw_dim_HR_personnel_area AS pa ON a.PA = pa.PersonnelAreaCode\n",
					"        LEFT JOIN odw_curated_db.vw_dim_HR_Personnel_SubArea AS psa ON a.PSubarea = psa.PersonnelSubAreaCode\n",
					"        LEFT JOIN odw_curated_db.vw_dim_HR_organisation_unit AS org \n",
					"            ON COALESCE(NULLIF(a.Orgunit, ''), '-1') = org.OrganisationUnitCode\n",
					"        LEFT JOIN odw_curated_db.vw_dim_HR_work_contract AS wc \n",
					"            ON a.WorkC = wc.WorkContractCode \n",
					"            AND a.WorkContract = wc.WorkContract\n",
					"        LEFT JOIN odw_harmonised_db.live_dim_date AS start_dt ON a.OrgStartDate = start_dt.date\n",
					"        LEFT JOIN odw_harmonised_db.live_dim_date AS leavingdt ON a.Leaving = leavingdt.date\n",
					"        LEFT JOIN odw_harmonised_db.live_dim_date AS report_dt \n",
					"            ON LAST_DAY(ADD_MONTHS(COALESCE(leavingdt.date, a.Leaving), -1)) = report_dt.date\n",
					"        LEFT JOIN LatestEmployeeInfo AS fted ON a.PersNo = fted.PersNo\n",
					"        WHERE NOT EXISTS (\n",
					"            SELECT 1 \n",
					"            FROM odw_harmonised_db.hist_sap_hr b \n",
					"            WHERE a.PersNo = b.PersNo \n",
					"            AND a.OrgStartDate = b.OrgStartDate\n",
					"        )\n",
					"        -- FIXED: Don't exclude records that overlap with MainData - keep them separate\n",
					"    ),\n",
					"\n",
					"    LeaversData AS (\n",
					"        SELECT DISTINCT \n",
					"            CONCAT(RIGHT(a.PersNo, 6), '-', DATE_FORMAT(LAST_DAY(ADD_MONTHS(COALESCE(leavingdt.date, a.Leaving), -1)), 'yyyyMMdd')) AS PersonReportMonthEndKey,\n",
					"            a.PersNo AS PersonKey,\n",
					"            NULL AS FTE,\n",
					"            '-1' AS dim_cost_centre_key,\n",
					"            COALESCE(pa.dim_personnel_area_key, -1) AS dim_personnel_area_key,\n",
					"            COALESCE(psa.dim_personnel_subarea_key, -1) AS dim_personnel_subarea_key,\n",
					"            COALESCE(org.dim_organisation_key, -1) AS dim_organisation_key,\n",
					"            '-1' AS Grade,\n",
					"            COALESCE(wc.dim_work_contract_key, -1) AS dim_work_contract_key,\n",
					"            1 AS dim_gender_key,\n",
					"            COALESCE(report_dt.dim_date_key, \n",
					"                CAST(DATE_FORMAT(LAST_DAY(ADD_MONTHS(COALESCE(leavingdt.date, a.Leaving), -1)), 'yyyyMMdd') AS INT)) AS dim_date_key,\n",
					"            'Leaver' AS ReportFlag,\n",
					"            COALESCE(start_dt.dim_date_key, \n",
					"                CAST(DATE_FORMAT(a.OrgStartDate, 'yyyyMMdd') AS INT)) AS dim_started_date_key,\n",
					"            COALESCE(leavingdt.dim_date_key,\n",
					"                CAST(DATE_FORMAT(a.Leaving, 'yyyyMMdd') AS INT)) AS dim_leaving_date_key,\n",
					"            CASE \n",
					"                WHEN a.Leaving IS NOT NULL THEN a.ReasonforAction\n",
					"                ELSE NULL\n",
					"            END AS ReasonForAction,\n",
					"            'PI' AS PArea,\n",
					"            0 AS WorkingHours,\n",
					"            ROUND(DATEDIFF(COALESCE(leavingdt.date, a.Leaving), a.OrgStartDate)/365.0, 3) AS LengthOfService,\n",
					"            NULL AS Age,\n",
					"            0 AS LeaveEntitlementHours,\n",
					"            0 AS LeaveTakenHours,\n",
					"            0 AS LeaveRemainingHours,\n",
					"            0 AS LeaveRemainingProrataHours,\n",
					"            0 AS AnnualSalary,\n",
					"            a.Position1,\n",
					"            COALESCE(fted.Fix_Term_End_Date, '') AS Fix_Term_End_Date,\n",
					"            COALESCE(fted.Contract_Type, '') AS Contract_Type,\n",
					"            NULL AS Directorate\n",
					"        FROM odw_harmonised_db.load_SAP_HR_Leavers a\n",
					"        LEFT JOIN odw_curated_db.vw_dim_HR_personnel_area AS pa ON a.PA = pa.PersonnelAreaCode\n",
					"        LEFT JOIN odw_curated_db.vw_dim_HR_Personnel_SubArea AS psa ON a.PSubarea = psa.PersonnelSubAreaCode\n",
					"        LEFT JOIN odw_curated_db.vw_dim_HR_organisation_unit AS org \n",
					"            ON COALESCE(NULLIF(a.Orgunit, ''), '-1') = org.OrganisationUnitCode\n",
					"        LEFT JOIN odw_curated_db.vw_dim_HR_work_contract AS wc \n",
					"            ON a.WorkC = wc.WorkContractCode \n",
					"            AND a.WorkContract = wc.WorkContract\n",
					"        LEFT JOIN odw_harmonised_db.live_dim_date AS start_dt ON a.OrgStartDate = start_dt.date\n",
					"        LEFT JOIN odw_harmonised_db.live_dim_date AS leavingdt ON a.Leaving = leavingdt.date\n",
					"        LEFT JOIN odw_harmonised_db.live_dim_date AS report_dt \n",
					"            ON LAST_DAY(ADD_MONTHS(COALESCE(leavingdt.date, a.Leaving), -1)) = report_dt.date\n",
					"        LEFT JOIN LatestEmployeeInfo AS fted ON a.PersNo = fted.PersNo\n",
					"        WHERE NOT EXISTS (\n",
					"            SELECT 1 \n",
					"            FROM odw_harmonised_db.hist_sap_hr b \n",
					"            WHERE a.PersNo = b.PersNo \n",
					"            AND a.OrgStartDate = b.OrgStartDate\n",
					"        )\n",
					"        \n",
					"    ),\n",
					"\n",
					"    CombinedRawData AS (\n",
					"        SELECT * FROM MainData \n",
					"        UNION ALL\n",
					"        SELECT * FROM StartersNotInHist \n",
					"        UNION ALL\n",
					"        SELECT * FROM LeaversData\n",
					"    ),\n",
					"\n",
					"    \n",
					"    DeduplicatedData AS (\n",
					"        SELECT *,\n",
					"            ROW_NUMBER() OVER (\n",
					"                PARTITION BY \n",
					"                    PersonReportMonthEndKey,\n",
					"                    COALESCE(ReportFlag, 'NULL'),\n",
					"                    PersonKey  -- Add PersonKey to partition to keep different people separate\n",
					"                ORDER BY \n",
					"                    COALESCE(dim_date_key, 0) DESC,  -- Use most recent data\n",
					"                    CASE \n",
					"                        WHEN ReportFlag IS NULL THEN 1  -- MainData gets slight priority\n",
					"                        ELSE 2\n",
					"                    END\n",
					"            ) as rn\n",
					"        FROM CombinedRawData\n",
					"    )\n",
					"\n",
					"    SELECT \n",
					"        PersonReportMonthEndKey,\n",
					"        PersonKey,\n",
					"        FTE,\n",
					"        dim_cost_centre_key,\n",
					"        dim_personnel_area_key,\n",
					"        dim_personnel_subarea_key,\n",
					"        dim_organisation_key,\n",
					"        Grade,\n",
					"        dim_work_contract_key,\n",
					"        dim_gender_key,\n",
					"        dim_date_key,\n",
					"        ReportFlag,\n",
					"        dim_started_date_key,\n",
					"        dim_leaving_date_key,\n",
					"        ReasonForAction,\n",
					"        PArea,\n",
					"        WorkingHours,\n",
					"        LengthOfService,\n",
					"        Age,\n",
					"        LeaveEntitlementHours,\n",
					"        LeaveTakenHours,\n",
					"        LeaveRemainingHours,\n",
					"        LeaveRemainingProrataHours,\n",
					"        AnnualSalary,\n",
					"        Position1,\n",
					"        Fix_Term_End_Date,\n",
					"        Contract_Type,\n",
					"        Directorate,\n",
					"        CASE \n",
					"            WHEN LengthOfService < 1 THEN 1\n",
					"            WHEN LengthOfService >= 1 AND LengthOfService < 2 THEN 2\n",
					"            WHEN LengthOfService >= 2 AND LengthOfService < 5 THEN 3\n",
					"            WHEN LengthOfService >= 5 AND LengthOfService < 10 THEN 4\n",
					"            WHEN LengthOfService >= 10 AND LengthOfService < 20 THEN 5\n",
					"            WHEN LengthOfService >= 20 THEN 6\n",
					"        END AS LOS_SortKey,\n",
					"        CASE \n",
					"            WHEN Age >= 16 AND Age < 20 THEN '16-19'\n",
					"            WHEN Age >= 20 AND Age < 30 THEN '20-29'\n",
					"            WHEN Age >= 30 AND Age < 40 THEN '30-39'\n",
					"            WHEN Age >= 40 AND Age < 50 THEN '40-49'\n",
					"            WHEN Age >= 50 AND Age < 60 THEN '50-59'\n",
					"            WHEN Age >= 60 AND Age < 65 THEN '60-64'\n",
					"            WHEN Age >= 65 THEN '65 & Over'\n",
					"        END AS Age_Group_Civil_Service,\n",
					"        ROUND(CASE WHEN 37 = 0 THEN 0 ELSE (CASE WHEN 52 = 0 THEN 0 ELSE AnnualSalary / 52 END) / 37 END, 3) AS Hourly_Rate,\n",
					"        CASE \n",
					"            WHEN ReasonForAction IN ('Resignation', 'Retirement, Voluntary', 'Transfer to OGD', \n",
					"                                  'Voluntary Exit', 'End Contingent Worker', 'Loan out to OGD', \n",
					"                                  'Non Employee') THEN 'Voluntary'\n",
					"            WHEN ReasonForAction IN ('Death in Service', 'Dismissal, Capability', 'Dismissal, Conduct',\n",
					"                                    'Dismissal, Other', 'End of Loan', 'End of Temporary Contract',\n",
					"                                    'Non-Employee Termination', 'Retirement, Ill Health',\n",
					"                                    'Some other substantial reason', 'Unsatisfactory Probation') THEN 'Involuntary'\n",
					"            WHEN ReasonForAction IS NULL THEN NULL\n",
					"            ELSE 'Unknown'\n",
					"        END AS ReasonforAction_Voluntary_Involuntary,\n",
					"        ROUND(CASE \n",
					"            WHEN AnnualSalary IS NULL OR LeaveRemainingProrataHours IS NULL THEN NULL\n",
					"            WHEN 52 = 0 OR 37 = 0 THEN 0\n",
					"            ELSE (AnnualSalary / 52 / 37) * LeaveRemainingProrataHours\n",
					"        END, 3) AS Leave_Remaining_Pro_rata_Cost,\n",
					"        CASE \n",
					"            WHEN Age >= 16 AND Age < 25 THEN '16-24'\n",
					"            WHEN Age >= 25 AND Age < 30 THEN '25-29'\n",
					"            WHEN Age >= 30 AND Age < 35 THEN '30-34'\n",
					"            WHEN Age >= 35 AND Age < 40 THEN '35-39'\n",
					"            WHEN Age >= 40 AND Age < 45 THEN '40-44'\n",
					"            WHEN Age >= 45 AND Age < 50 THEN '45-49'\n",
					"            WHEN Age >= 50 AND Age < 55 THEN '50-54'\n",
					"            WHEN Age >= 55 AND Age < 60 THEN '55-59'\n",
					"            WHEN Age >= 60 AND Age < 65 THEN '60-64'\n",
					"            WHEN Age >= 65 THEN '65+'\n",
					"            ELSE NULL\n",
					"        END AS Age_Group_MHCLG,\n",
					"        ROUND(CASE\n",
					"            WHEN 7.4 = 0 THEN 0\n",
					"            ELSE LeaveEntitlementHours / 7.4\n",
					"        END, 3) AS LeaveEntitlementDays,\n",
					"        CASE\n",
					"            WHEN FTE = 1 THEN 'Full-Time'\n",
					"            ELSE 'Part-Time'\n",
					"        END AS PartTimeFullTime,\n",
					"        CASE \n",
					"            WHEN SUBSTRING(Directorate, 1, 5) = 'Wales' THEN 'Wales'\n",
					"            ELSE 'England'\n",
					"        END AS Country\n",
					"    FROM DeduplicatedData\n",
					"    WHERE rn = 1\n",
					"    \"\"\")\n",
					"    LoggingUtil().log_info(\"Successfully created view odw_curated_db.vw_hr_measures\")\n",
					"    \n",
					"    # Count records in view\n",
					"    hr_measures_count = spark.sql(\"SELECT COUNT(*) as count FROM odw_curated_db.vw_hr_measures\").collect()[0]['count']\n",
					"    LoggingUtil().log_info(f\"View contains {hr_measures_count} HR measures records\")\n",
					"    \n",
					"    # Drop the table if it exists\n",
					"    LoggingUtil().log_info(\"Dropping table odw_curated_db.pbi_hr_measures if it exists\")\n",
					"    spark.sql(\"\"\"\n",
					"    DROP TABLE IF EXISTS odw_curated_db.pbi_hr_measures\n",
					"    \"\"\")\n",
					"    LoggingUtil().log_info(\"Table dropped or did not exist\")\n",
					"    \n",
					"    # Create table from view with specified location\n",
					"    LoggingUtil().log_info(\"Creating table odw_curated_db.pbi_hr_measures from view with specified location\")\n",
					"    spark.sql(f\"\"\"\n",
					"    CREATE OR REPLACE TABLE odw_curated_db.pbi_hr_measures\n",
					"    USING delta\n",
					"    LOCATION '{delta_table_path}'\n",
					"    AS SELECT * FROM odw_curated_db.vw_hr_measures\n",
					"    \"\"\")\n",
					"    \n",
					"    # Count records in table - this is our final record count\n",
					"    table_count = spark.sql(\"SELECT COUNT(*) as count FROM odw_curated_db.pbi_hr_measures\").collect()[0]['count']\n",
					"    result[\"record_count\"] = table_count\n",
					"    LoggingUtil().log_info(f\"Created table with {table_count} records at location: {delta_table_path}\")\n",
					"    \n",
					"    LoggingUtil().log_info(\"HR Measures setup completed successfully\")\n",
					"\n",
					"except Exception as e:\n",
					"    # Capture error information\n",
					"    error_msg = f\"Error in HR Measures setup: {str(e)}\"\n",
					"    logError(error_msg)\n",
					"    logException(e)\n",
					"    \n",
					"    # Try to get current record count even in case of error\n",
					"    try:\n",
					"        error_count = spark.sql(\"SELECT COUNT(*) as count FROM odw_curated_db.pbi_hr_measures\").collect()[0]['count']\n",
					"        result[\"record_count\"] = error_count\n",
					"    except:\n",
					"        result[\"record_count\"] = 0\n",
					"    \n",
					"    # Update result for error case\n",
					"    result[\"status\"] = \"failed\"\n",
					"    result[\"error_message\"] = error_msg[:300]  # Truncate to 300 characters\n",
					"    \n",
					"    # Re-raise the exception to ensure the notebook fails properly\n",
					"    raise e\n",
					"\n",
					"finally:\n",
					"    # Always flush logs regardless of success or failure\n",
					"    LoggingUtil().log_info(\"Flushing logs\")\n",
					"    LoggingUtil().flush_logging()\n",
					"    \n",
					"    # Output the result as JSON for ADF to capture\n",
					"    mssparkutils.notebook.exit(json.dumps(result))"
				],
				"execution_count": null
			}
		]
	}
}