{
	"name": "sap-hr-views-saphr",
	"properties": {
		"folder": {
			"name": "odw-harmonised/SAP-HR"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodwpr",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "62e5dc47-8d6e-4d17-9868-cdffa2cc4641"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/a82fd28d-5989-4e06-a0bb-1a5d859f9e0c/resourceGroups/pins-rg-data-odw-prod-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-prod-uks/bigDataPools/pinssynspodwpr",
				"name": "pinssynspodwpr",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-prod-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodwpr",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"tags": [
						"parameters"
					]
				},
				"source": [
					"expected_from=''"
				],
				"execution_count": 42
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"**The expected_from parameter above is the month which we want to ingest. For example, if we want data from January 2023, we can query this data from standardised by setting the expected_from as the start of next month (February)**"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"if expected_from != '':\n",
					"    spark.sql(f\"SET DATE_VAR = '{expected_from}'\")\n",
					"else:\n",
					"    spark.sql(f\"SET DATE_VAR = (SELECT MAX(expected_from) FROM odw_standardised_db.hr_saphr)\")"
				],
				"execution_count": 43
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Creates a view odw_standardised_db.vw_leavers_temp \n",
					"#### Creates the view with a column RN (Row Number) to be able to select non-duplicates. This is a temporary view and will be deleted after being utilised in the harmonised layer"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql   \n",
					"\n",
					"CREATE OR REPLACE VIEW odw_standardised_db.vw_saphr\n",
					"\n",
					"AS\n",
					"\n",
					"SELECT \n",
					"    CASE \n",
					"        WHEN LENGTH(Pers_No) = 6 AND SUBSTR(Pers_No,1,1) = 5\n",
					"        THEN CONCAT('00',Pers_No)\n",
					"        WHEN LENGTH(Pers_No) = 6 AND SUBSTR(Pers_No,1,1) = 4\n",
					"        THEN CONCAT('50',Pers_No)        \n",
					"        ELSE Pers_No\n",
					"    END as Pers_No,\n",
					"    First_name,\n",
					"    Last_name,\n",
					"    Employee_No,\n",
					"    CoCd,\n",
					"    Company_Code,\n",
					"    PA,\n",
					"    Personnel_Area,\n",
					"    PSubarea,\n",
					"    Personnel_Subarea,\n",
					"    Org_Unit,\n",
					"    Organizational_Unit,\n",
					"    Organizational_key1,\n",
					"    Organizational_key2,\n",
					"    WorkC,\n",
					"    Work_Contract,\n",
					"    CT,\n",
					"    Contract_Type,\n",
					"    PS_Group,\n",
					"    Pay_Band_Description,\n",
					"    FTE,\n",
					"    Wk_hrs,\n",
					"    Indicator_Part_Time_Employee,\n",
					"    S,\n",
					"    Employment_Status,\n",
					"    Gender_Key,\n",
					"    to_timestamp(TRA_Start_Date) AS TRA_Start_Date,\n",
					"    to_timestamp(TRA_End_Date) AS TRA_End_Date,\n",
					"    TRA_Status,\n",
					"    TRA_Grade,\n",
					"    Prev_PersNo,\n",
					"    ActR,\n",
					"    Reason_for_Action,\n",
					"    Position,\n",
					"    Position_1,\n",
					"    Cost_Ctr,\n",
					"    Cost_Centre,\n",
					"    to_timestamp(Civil_Service_Start) AS Civil_Service_Start,\n",
					"    to_timestamp(Date_to_Current_Job) AS Date_to_Current_Job,\n",
					"    to_timestamp(Seniority_Date) AS Seniority_Date,\n",
					"    to_timestamp(Date_to_Subst_Grade) AS Date_to_Subst_Grade,\n",
					"    Pers_No_1,\n",
					"    Name_of_Manager_OM,\n",
					"    Manager_Position,\n",
					"    Manager_Position_Text,\n",
					"    Counter_Sign_Manager,\n",
					"    Loc,\n",
					"    Location,\n",
					"    to_timestamp(Org_Start_Date) AS Org_Start_Date,\n",
					"    to_timestamp(Fix_Term_End_Date) AS Fix_Term_End_Date,\n",
					"    to_timestamp(Loan_Start_Date) AS Loan_Start_Date,\n",
					"    to_timestamp(Loan_End_Date) AS Loan_End_Date,\n",
					"    EEGrp,\n",
					"    Employee_Group,\n",
					"    Annual_salary,\n",
					"    Curr,\n",
					"    NI_number,\n",
					"    Birth_date,\n",
					"    Age_of_employee,\n",
					"    EO,\n",
					"    Ethnic_origin,\n",
					"    NID,\n",
					"    Rel,\n",
					"    Religious_Denomination_Key,\n",
					"    SxO,\n",
					"    Wage_Type,\n",
					"    Employee_Subgroup,\n",
					"    LOA_Abs_Type,\n",
					"    LOA_Absence_Type_Text,\n",
					"    Scheme_reference,\n",
					"    Pension_Scheme_Name,\n",
					"    Disability_Code,\n",
					"    Disability_Text,\n",
					"    Disability_Code_Description,\n",
					"    PArea,\n",
					"    Payroll_Area,\n",
					"    Assignment_Number,\n",
					"    FTE_2,\n",
					"    ingested_datetime,\n",
					"    expected_from,\n",
					"    expected_to\n",
					"\n",
					"FROM odw_standardised_db.hr_saphr\n",
					"WHERE expected_from = ${DATE_VAR}"
				],
				"execution_count": null
			}
		]
	}
}