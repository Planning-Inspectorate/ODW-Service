{
	"name": "py_sb_horizon_harmonised_appeal_s78",
	"properties": {
		"folder": {
			"name": "odw-harmonised"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw34",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "97a07ba5-189f-4411-8fdf-024c0dd7144d"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": true,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw34",
				"name": "pinssynspodw34",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw34",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### This notebook is for the creation `final_harmonised_table` that should combine service_bus table with horizon tables.\r\n",
					"##### As of now 5/12/2024 this notebook only includes service bus table as for this the first phase of processing `appeal_s78`. As soon as we are processing horizon tables this notebook should change accordingly to include the horizon data."
				]
			},
			{
				"cell_type": "code",
				"source": [
					"from pyspark.sql.types import IntegerType, ArrayType, StructType, StructField\r\n",
					"from pyspark.sql import Row\r\n",
					"from pyspark.sql.functions import *\r\n",
					"from datetime import date,datetime"
				],
				"execution_count": 18
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Initialise Logging decorator"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"%run utils/py_logging_decorator"
				],
				"execution_count": 19
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Initialise Application Insight Logging functions"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"%run utils/py_utils_common_logging_output"
				],
				"execution_count": 20
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### will include horizon data in here \r\n",
					"\r\n",
					"service_bus_table = \"odw_harmonised_db.sb_appeal_s78\"\r\n",
					"\r\n",
					"spark_table_final = \"odw_harmonised_db.appeal_s78\"\r\n",
					"\r\n",
					"primary_key = 'caseReference'\r\n",
					"incremental_key = 'AppealS78ID'\r\n",
					"\r\n",
					"start_exec_time = str(datetime.now())\r\n",
					"insert_count = 0\r\n",
					"update_count = 0\r\n",
					"delete_count = 0"
				],
				"execution_count": 21
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"try:\r\n",
					"    # Get data out of the service bus with additional fields needed for Horizon data\r\n",
					"    service_bus_data = spark.sql(f\"\"\"\r\n",
					"                        SELECT DISTINCT\r\n",
					"                            CAST(NULL AS Long) as AppealS78ID\r\n",
					"                            ,caseReference as {primary_key}\r\n",
					"                            ,caseId\r\n",
					"                            ,submissionId\r\n",
					"                            ,caseStatus\r\n",
					"                            ,caseType\r\n",
					"                            ,caseProcedure\r\n",
					"                            ,lpaCode\r\n",
					"                            ,caseOfficerId\r\n",
					"                            ,inspectorId\r\n",
					"                            ,allocationLevel\r\n",
					"                            ,allocationBand\r\n",
					"                            ,caseSpecialisms\r\n",
					"                            ,caseSubmittedDate\r\n",
					"                            ,caseCreatedDate\r\n",
					"                            ,caseUpdatedDate\r\n",
					"                            ,caseValidDate\r\n",
					"                            ,caseValidationDate\r\n",
					"                            ,caseValidationOutcome\r\n",
					"                            ,caseValidationInvalidDetails\r\n",
					"                            ,caseValidationIncompleteDetails\r\n",
					"                            ,caseExtensionDate\r\n",
					"                            ,caseStartedDate\r\n",
					"                            ,casePublishedDate\r\n",
					"                            ,linkedCaseStatus\r\n",
					"                            ,leadCaseReference\r\n",
					"                            ,lpaQuestionnaireDueDate\r\n",
					"                            ,lpaQuestionnaireSubmittedDate\r\n",
					"                            ,lpaQuestionnaireCreatedDate\r\n",
					"                            ,lpaQuestionnairePublishedDate\r\n",
					"                            ,lpaQuestionnaireValidationOutcome\r\n",
					"                            ,lpaQuestionnaireValidationOutcomeDate\r\n",
					"                            ,lpaQuestionnaireValidationDetails\r\n",
					"                            ,lpaStatement\r\n",
					"                            ,caseWithdrawnDate\r\n",
					"                            ,caseTransferredDate\r\n",
					"                            ,transferredCaseClosedDate\r\n",
					"                            ,caseDecisionOutcomeDate\r\n",
					"                            ,caseDecisionPublishedDate\r\n",
					"                            ,caseDecisionOutcome\r\n",
					"                            ,caseCompletedDate\r\n",
					"                            ,enforcementNotice\r\n",
					"                            ,applicationReference\r\n",
					"                            ,applicationDate\r\n",
					"                            ,applicationDecision\r\n",
					"                            ,applicationDecisionDate\r\n",
					"                            ,caseSubmissionDueDate\r\n",
					"                            ,siteAddressLine1\r\n",
					"                            ,siteAddressLine2\r\n",
					"                            ,siteAddressTown\r\n",
					"                            ,siteAddressCounty\r\n",
					"                            ,siteAddressPostcode\r\n",
					"                            ,siteAccessDetails\r\n",
					"                            ,siteSafetyDetails\r\n",
					"                            ,siteAreaSquareMetres\r\n",
					"                            ,floorSpaceSquareMetres\r\n",
					"                            ,isCorrectAppealType\r\n",
					"                            ,isGreenBelt\r\n",
					"                            ,inConservationArea\r\n",
					"                            ,ownsAllLand\r\n",
					"                            ,ownsSomeLand\r\n",
					"                            ,knowsOtherOwners\r\n",
					"                            ,knowsAllOwners\r\n",
					"                            ,advertisedAppeal\r\n",
					"                            ,notificationMethod\r\n",
					"                            ,ownersInformed\r\n",
					"                            ,originalDevelopmentDescription\r\n",
					"                            ,changedDevelopmentDescription\r\n",
					"                            ,newConditionDetails\r\n",
					"                            ,nearbyCaseReferences\r\n",
					"                            ,neighbouringSiteAddresses\r\n",
					"                            ,affectedListedBuildingNumbers\r\n",
					"                            ,changedListedBuildingNumbers\r\n",
					"                            ,appellantCostsAppliedFor\r\n",
					"                            ,lpaCostsAppliedFor\r\n",
					"                            ,agriculturalHolding\r\n",
					"                            ,tenantAgriculturalHolding\r\n",
					"                            ,otherTenantsAgriculturalHolding\r\n",
					"                            ,informedTenantsAgriculturalHolding\r\n",
					"                            ,appellantProcedurePreference\r\n",
					"                            ,appellantProcedurePreferenceDetails\r\n",
					"                            ,appellantProcedurePreferenceDuration\r\n",
					"                            ,appellantProcedurePreferenceWitnessCount\r\n",
					"                            ,statusPlanningObligation\r\n",
					"                            ,affectsScheduledMonument\r\n",
					"                            ,hasProtectedSpecies\r\n",
					"                            ,isAonbNationalLandscape\r\n",
					"                            ,designatedSitesNames\r\n",
					"                            ,isGypsyOrTravellerSite\r\n",
					"                            ,isPublicRightOfWay\r\n",
					"                            ,eiaEnvironmentalImpactSchedule\r\n",
					"                            ,eiaDevelopmentDescription\r\n",
					"                            ,eiaSensitiveAreaDetails\r\n",
					"                            ,eiaColumnTwoThreshold\r\n",
					"                            ,eiaScreeningOpinion\r\n",
					"                            ,eiaRequiresEnvironmentalStatement\r\n",
					"                            ,eiaCompletedEnvironmentalStatement\r\n",
					"                            ,consultedBodiesDetails\r\n",
					"                            ,hasStatutoryConsultees\r\n",
					"                            ,hasInfrastructureLevy\r\n",
					"                            ,isInfrastructureLevyFormallyAdopted\r\n",
					"                            ,infrastructureLevyAdoptedDate\r\n",
					"                            ,infrastructureLevyExpectedDate\r\n",
					"                            ,lpaProcedurePreference\r\n",
					"                            ,lpaProcedurePreferenceDetails\r\n",
					"                            ,lpaProcedurePreferenceDuration\r\n",
					"                            ,caseworkReason\r\n",
					"                            ,developmentType\r\n",
					"                            ,importantInformation\r\n",
					"                            ,jurisdiction\r\n",
					"                            ,redeterminedIndicator\r\n",
					"                            ,dateCostsReportDespatched\r\n",
					"                            ,dateNotRecoveredOrDerecovered\r\n",
					"                            ,dateRecovered\r\n",
					"                            ,originalCaseDecisionDate\r\n",
					"                            ,targetDate\r\n",
					"                            ,appellantCommentsSubmittedDate\r\n",
					"                            ,appellantStatementSubmittedDate\r\n",
					"                            ,appellantProofsSubmittedDate\r\n",
					"                            ,finalCommentsDueDate\r\n",
					"                            ,interestedPartyRepsDueDate\r\n",
					"                            ,lpaCommentsSubmittedDate\r\n",
					"                            ,lpaProofsSubmittedDate\r\n",
					"                            ,lpaStatementSubmittedDate\r\n",
					"                            ,proofsOfEvidenceDueDate\r\n",
					"                            ,siteNoticesSentDate\r\n",
					"                            ,statementDueDate\r\n",
					"                            ,reasonForNeighbourVisits\r\n",
					"                            ,numberOfResidencesNetChange\r\n",
					"                            ,siteGridReferenceEasting\r\n",
					"                            ,siteGridReferenceNorthing\r\n",
					"                            ,siteViewableFromRoad\r\n",
					"                            ,siteWithinSSSI\r\n",
					"                            ,typeOfPlanningApplication\r\n",
					"                            ,preserveGrantLoan\r\n",
					"                            ,consultHistoricEngland\r\n",
					"                            ,Migrated\r\n",
					"                            ,ODTSourceSystem\r\n",
					"                            ,IngestionDate\r\n",
					"                            ,NULLIF(ValidTo, '') AS ValidTo\r\n",
					"                            ,'' as RowID\r\n",
					"                            ,IsActive\r\n",
					"                        FROM \r\n",
					"                            {service_bus_table}\r\n",
					"                        \"\"\")\r\n",
					"\r\n",
					"except Exception as e:\r\n",
					"        logError(f\"Error in source Service Bus SQL query {service_bus_table}:\\n{e}\")\r\n",
					"        error_message = app_insight_logger.format_error_message(e, max_length=300)"
				],
				"execution_count": 22
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"###### In this section below we should process the horizon data"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Get data out of Horizon and matching the SB schema (with additional fields and ensure data types match)"
				],
				"execution_count": 23
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"###### End of horizon section"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"###### In here we should handle merging service bus with horizon, and handle any array columns found."
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"results = service_bus_data"
				],
				"execution_count": 24
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Prepare data for intermediate appeal_s78 processing"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"try:\r\n",
					"    \r\n",
					"    results.write.format(\"delta\").mode(\"Overwrite\").option(\"overwriteSchema\", \"true\").partitionBy(\"IsActive\").saveAsTable(f\"{spark_table_final}\")\r\n",
					"\r\n",
					"except Exception as e:\r\n",
					"        logError(f\"Error in ingesting delta table {spark_table_final}:\\n{e}\")\r\n",
					"        error_message = app_insight_logger.format_error_message(e, max_length=300)"
				],
				"execution_count": 25
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"\r\n",
					"Now need to sort internal ids, IsActive flags, and valid_to dates"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"spark.sql(f\"\"\"\r\n",
					"    CREATE OR REPLACE TEMPORARY VIEW vw_appeal_s78_calculations_base\r\n",
					"        AS\r\n",
					"        SELECT  \r\n",
					"            row_number() OVER(PARTITION BY {primary_key} ORDER BY IngestionDate DESC) AS ReverseOrderProcessed\r\n",
					"            ,row_number() OVER(ORDER BY IngestionDate asc, {primary_key} asc) AS {incremental_key}\r\n",
					"            ,{primary_key}\r\n",
					"            ,IngestionDate\r\n",
					"            ,ValidTo\r\n",
					"            ,'0' AS Migrated\r\n",
					"            ,CASE row_number() OVER(PARTITION BY {primary_key} ORDER BY IngestionDate DESC)\r\n",
					"                WHEN 1 THEN\r\n",
					"                    'Y'\r\n",
					"                ELSE\r\n",
					"                    'N'\r\n",
					"            END AS IsActive                \r\n",
					"        FROM\r\n",
					"            {spark_table_final}\r\n",
					"    \"\"\")\r\n",
					""
				],
				"execution_count": 26
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df_calcs = spark.sql(f\"\"\"\r\n",
					"                        SELECT\r\n",
					"                            CurrentRow.{incremental_key}\r\n",
					"                            ,CurrentRow.{primary_key} \r\n",
					"                            ,CurrentRow.IngestionDate\r\n",
					"                            ,COALESCE(NULLIF(CurrentRow.ValidTo,''), NextRow.IngestionDate) AS ValidTo\r\n",
					"                            ,CASE\r\n",
					"                                WHEN raw.{primary_key} IS NOT NULL THEN \r\n",
					"                                    \"1\"\r\n",
					"                                ELSE \r\n",
					"                                    \"0\"\r\n",
					"                            END AS Migrated\r\n",
					"                            ,CurrentRow.IsActive\r\n",
					"                        FROM\r\n",
					"                            vw_appeal_s78_calculations_base AS CurrentRow\r\n",
					"                            LEFT OUTER JOIN vw_appeal_s78_calculations_base AS NextRow\r\n",
					"                                ON CurrentRow.{primary_key} = NextRow.{primary_key}\r\n",
					"                                AND CurrentRow.ReverseOrderProcessed - 1 = NextRow.ReverseOrderProcessed\r\n",
					"                            LEFT OUTER JOIN (SELECT DISTINCT {primary_key} FROM  odw_harmonised_db.sb_appeal_s78) AS Raw\r\n",
					"                                ON CurrentRow.{primary_key} = Raw.{primary_key} \r\n",
					"                            ORDER BY currentRow.ReverseOrderProcessed\r\n",
					"                    \"\"\")"
				],
				"execution_count": 27
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df_calcs = df_calcs.withColumnRenamed(primary_key, f\"temp_{primary_key}\").withColumnRenamed(\"IngestionDate\", \"temp_IngestionDate\")"
				],
				"execution_count": 28
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"try:\r\n",
					"    results = spark.sql(f\"\"\"\r\n",
					"                        SELECT DISTINCT \r\n",
					"                            AppealS78ID\r\n",
					"                            ,{primary_key}\r\n",
					"                            ,caseId\r\n",
					"                            ,submissionId\r\n",
					"                            ,caseStatus\r\n",
					"                            ,caseType\r\n",
					"                            ,caseProcedure\r\n",
					"                            ,lpaCode\r\n",
					"                            ,caseOfficerId\r\n",
					"                            ,inspectorId\r\n",
					"                            ,allocationLevel\r\n",
					"                            ,allocationBand\r\n",
					"                            ,caseSpecialisms\r\n",
					"                            ,caseSubmittedDate\r\n",
					"                            ,caseCreatedDate\r\n",
					"                            ,caseUpdatedDate\r\n",
					"                            ,caseValidDate\r\n",
					"                            ,caseValidationDate\r\n",
					"                            ,caseValidationOutcome\r\n",
					"                            ,caseValidationInvalidDetails\r\n",
					"                            ,caseValidationIncompleteDetails\r\n",
					"                            ,caseExtensionDate\r\n",
					"                            ,caseStartedDate\r\n",
					"                            ,casePublishedDate\r\n",
					"                            ,linkedCaseStatus\r\n",
					"                            ,leadCaseReference\r\n",
					"                            ,lpaQuestionnaireDueDate\r\n",
					"                            ,lpaQuestionnaireSubmittedDate\r\n",
					"                            ,lpaQuestionnaireCreatedDate\r\n",
					"                            ,lpaQuestionnairePublishedDate\r\n",
					"                            ,lpaQuestionnaireValidationOutcome\r\n",
					"                            ,lpaQuestionnaireValidationOutcomeDate\r\n",
					"                            ,lpaQuestionnaireValidationDetails\r\n",
					"                            ,lpaStatement\r\n",
					"                            ,caseWithdrawnDate\r\n",
					"                            ,caseTransferredDate\r\n",
					"                            ,transferredCaseClosedDate\r\n",
					"                            ,caseDecisionOutcomeDate\r\n",
					"                            ,caseDecisionPublishedDate\r\n",
					"                            ,caseDecisionOutcome\r\n",
					"                            ,caseCompletedDate\r\n",
					"                            ,enforcementNotice\r\n",
					"                            ,applicationReference\r\n",
					"                            ,applicationDate\r\n",
					"                            ,applicationDecision\r\n",
					"                            ,applicationDecisionDate\r\n",
					"                            ,caseSubmissionDueDate\r\n",
					"                            ,siteAddressLine1\r\n",
					"                            ,siteAddressLine2\r\n",
					"                            ,siteAddressTown\r\n",
					"                            ,siteAddressCounty\r\n",
					"                            ,siteAddressPostcode\r\n",
					"                            ,siteAccessDetails\r\n",
					"                            ,siteSafetyDetails\r\n",
					"                            ,siteAreaSquareMetres\r\n",
					"                            ,floorSpaceSquareMetres\r\n",
					"                            ,isCorrectAppealType\r\n",
					"                            ,isGreenBelt\r\n",
					"                            ,inConservationArea\r\n",
					"                            ,ownsAllLand\r\n",
					"                            ,ownsSomeLand\r\n",
					"                            ,knowsOtherOwners\r\n",
					"                            ,knowsAllOwners\r\n",
					"                            ,advertisedAppeal\r\n",
					"                            ,notificationMethod\r\n",
					"                            ,ownersInformed\r\n",
					"                            ,originalDevelopmentDescription\r\n",
					"                            ,changedDevelopmentDescription\r\n",
					"                            ,newConditionDetails\r\n",
					"                            ,nearbyCaseReferences\r\n",
					"                            ,neighbouringSiteAddresses\r\n",
					"                            ,affectedListedBuildingNumbers\r\n",
					"                            ,changedListedBuildingNumbers\r\n",
					"                            ,appellantCostsAppliedFor\r\n",
					"                            ,lpaCostsAppliedFor\r\n",
					"                            ,agriculturalHolding\r\n",
					"                            ,tenantAgriculturalHolding\r\n",
					"                            ,otherTenantsAgriculturalHolding\r\n",
					"                            ,informedTenantsAgriculturalHolding\r\n",
					"                            ,appellantProcedurePreference\r\n",
					"                            ,appellantProcedurePreferenceDetails\r\n",
					"                            ,appellantProcedurePreferenceDuration\r\n",
					"                            ,appellantProcedurePreferenceWitnessCount\r\n",
					"                            ,statusPlanningObligation\r\n",
					"                            ,affectsScheduledMonument\r\n",
					"                            ,hasProtectedSpecies\r\n",
					"                            ,isAonbNationalLandscape\r\n",
					"                            ,designatedSitesNames\r\n",
					"                            ,isGypsyOrTravellerSite\r\n",
					"                            ,isPublicRightOfWay\r\n",
					"                            ,eiaEnvironmentalImpactSchedule\r\n",
					"                            ,eiaDevelopmentDescription\r\n",
					"                            ,eiaSensitiveAreaDetails\r\n",
					"                            ,eiaColumnTwoThreshold\r\n",
					"                            ,eiaScreeningOpinion\r\n",
					"                            ,eiaRequiresEnvironmentalStatement\r\n",
					"                            ,eiaCompletedEnvironmentalStatement\r\n",
					"                            ,consultedBodiesDetails\r\n",
					"                            ,hasStatutoryConsultees\r\n",
					"                            ,hasInfrastructureLevy\r\n",
					"                            ,isInfrastructureLevyFormallyAdopted\r\n",
					"                            ,infrastructureLevyAdoptedDate\r\n",
					"                            ,infrastructureLevyExpectedDate\r\n",
					"                            ,lpaProcedurePreference\r\n",
					"                            ,lpaProcedurePreferenceDetails\r\n",
					"                            ,lpaProcedurePreferenceDuration\r\n",
					"                            ,caseworkReason\r\n",
					"                            ,developmentType\r\n",
					"                            ,importantInformation\r\n",
					"                            ,jurisdiction\r\n",
					"                            ,redeterminedIndicator\r\n",
					"                            ,dateCostsReportDespatched\r\n",
					"                            ,dateNotRecoveredOrDerecovered\r\n",
					"                            ,dateRecovered\r\n",
					"                            ,originalCaseDecisionDate\r\n",
					"                            ,targetDate\r\n",
					"                            ,appellantCommentsSubmittedDate\r\n",
					"                            ,appellantStatementSubmittedDate\r\n",
					"                            ,appellantProofsSubmittedDate\r\n",
					"                            ,finalCommentsDueDate\r\n",
					"                            ,interestedPartyRepsDueDate\r\n",
					"                            ,lpaCommentsSubmittedDate\r\n",
					"                            ,lpaProofsSubmittedDate\r\n",
					"                            ,lpaStatementSubmittedDate\r\n",
					"                            ,proofsOfEvidenceDueDate\r\n",
					"                            ,siteNoticesSentDate\r\n",
					"                            ,statementDueDate\r\n",
					"                            ,reasonForNeighbourVisits\r\n",
					"                            ,numberOfResidencesNetChange\r\n",
					"                            ,siteGridReferenceEasting\r\n",
					"                            ,siteGridReferenceNorthing\r\n",
					"                            ,siteViewableFromRoad\r\n",
					"                            ,siteWithinSSSI\r\n",
					"                            ,typeOfPlanningApplication\r\n",
					"                            ,preserveGrantLoan\r\n",
					"                            ,consultHistoricEngland\r\n",
					"                            ,Migrated\r\n",
					"                            ,ODTSourceSystem\r\n",
					"                            ,IngestionDate\r\n",
					"                            ,ValidTo\r\n",
					"                            ,MD5(CONCAT(\r\n",
					"                                IFNULL(CAST(AppealS78ID as String), '.')\r\n",
					"                                ,IFNULL(CAST(caseReference as String), '.')\r\n",
					"                                ,IFNULL(CAST(submissionId as String), '.')\r\n",
					"                                ,IFNULL(CAST(caseStatus as String), '.')\r\n",
					"                                ,IFNULL(CAST(caseType as String), '.')\r\n",
					"                                ,IFNULL(CAST(caseProcedure as String), '.')\r\n",
					"                                ,IFNULL(CAST(lpaCode as String), '.')\r\n",
					"                                ,IFNULL(CAST(caseOfficerId as String), '.')\r\n",
					"                                ,IFNULL(CAST(inspectorId as String), '.')\r\n",
					"                                ,IFNULL(CAST(allocationLevel as String), '.')\r\n",
					"                                ,IFNULL(CAST(allocationBand as String), '.')\r\n",
					"                                ,IFNULL(CAST(caseSpecialisms as String), '.')\r\n",
					"                                ,IFNULL(CAST(caseSubmittedDate as String), '.')\r\n",
					"                                ,IFNULL(CAST(caseCreatedDate as String), '.')\r\n",
					"                                ,IFNULL(CAST(caseUpdatedDate as String), '.')\r\n",
					"                                ,IFNULL(CAST(caseValidDate as String), '.')\r\n",
					"                                ,IFNULL(CAST(caseValidationDate as String), '.')\r\n",
					"                                ,IFNULL(CAST(caseValidationOutcome as String), '.')\r\n",
					"                                ,IFNULL(CAST(caseValidationInvalidDetails as String), '.')\r\n",
					"                                ,IFNULL(CAST(caseValidationIncompleteDetails as String), '.')\r\n",
					"                                ,IFNULL(CAST(caseExtensionDate as String), '.')\r\n",
					"                                ,IFNULL(CAST(caseStartedDate as String), '.')\r\n",
					"                                ,IFNULL(CAST(casePublishedDate as String), '.')\r\n",
					"                                ,IFNULL(CAST(linkedCaseStatus as String), '.')\r\n",
					"                                ,IFNULL(CAST(leadCaseReference as String), '.')\r\n",
					"                                ,IFNULL(CAST(lpaQuestionnaireDueDate as String), '.')\r\n",
					"                                ,IFNULL(CAST(lpaQuestionnaireSubmittedDate as String), '.')\r\n",
					"                                ,IFNULL(CAST(lpaQuestionnaireCreatedDate as String), '.')\r\n",
					"                                ,IFNULL(CAST(lpaQuestionnairePublishedDate as String), '.')\r\n",
					"                                ,IFNULL(CAST(lpaQuestionnaireValidationOutcome as String), '.')\r\n",
					"                                ,IFNULL(CAST(lpaQuestionnaireValidationOutcomeDate as String), '.')\r\n",
					"                                ,IFNULL(CAST(lpaQuestionnaireValidationDetails as String), '.')\r\n",
					"                                ,IFNULL(CAST(lpaStatement as String), '.')\r\n",
					"                                ,IFNULL(CAST(caseWithdrawnDate as String), '.')\r\n",
					"                                ,IFNULL(CAST(caseTransferredDate as String), '.')\r\n",
					"                                ,IFNULL(CAST(transferredCaseClosedDate as String), '.')\r\n",
					"                                ,IFNULL(CAST(caseDecisionOutcomeDate as String), '.')\r\n",
					"                                ,IFNULL(CAST(caseDecisionPublishedDate as String), '.')\r\n",
					"                                ,IFNULL(CAST(caseDecisionOutcome as String), '.')\r\n",
					"                                ,IFNULL(CAST(caseCompletedDate as String), '.')\r\n",
					"                                ,IFNULL(CAST(enforcementNotice as String), '.')\r\n",
					"                                ,IFNULL(CAST(applicationReference as String), '.')\r\n",
					"                                ,IFNULL(CAST(applicationDate as String), '.')\r\n",
					"                                ,IFNULL(CAST(applicationDecision as String), '.')\r\n",
					"                                ,IFNULL(CAST(applicationDecisionDate as String), '.')\r\n",
					"                                ,IFNULL(CAST(caseSubmissionDueDate as String), '.')\r\n",
					"                                ,IFNULL(CAST(siteAddressLine1 as String), '.')\r\n",
					"                                ,IFNULL(CAST(siteAddressLine2 as String), '.')\r\n",
					"                                ,IFNULL(CAST(siteAddressTown as String), '.')\r\n",
					"                                ,IFNULL(CAST(siteAddressCounty as String), '.')\r\n",
					"                                ,IFNULL(CAST(siteAddressPostcode as String), '.')\r\n",
					"                                ,IFNULL(CAST(siteAccessDetails as String), '.')\r\n",
					"                                ,IFNULL(CAST(siteSafetyDetails as String), '.')\r\n",
					"                                ,IFNULL(CAST(siteAreaSquareMetres as String), '.')\r\n",
					"                                ,IFNULL(CAST(floorSpaceSquareMetres as String), '.')\r\n",
					"                                ,IFNULL(CAST(isCorrectAppealType as String), '.')\r\n",
					"                                ,IFNULL(CAST(isGreenBelt as String), '.')\r\n",
					"                                ,IFNULL(CAST(inConservationArea as String), '.')\r\n",
					"                                ,IFNULL(CAST(ownsAllLand as String), '.')\r\n",
					"                                ,IFNULL(CAST(ownsSomeLand as String), '.')\r\n",
					"                                ,IFNULL(CAST(knowsOtherOwners as String), '.')\r\n",
					"                                ,IFNULL(CAST(knowsAllOwners as String), '.')\r\n",
					"                                ,IFNULL(CAST(advertisedAppeal as String), '.')\r\n",
					"                                ,IFNULL(CAST(notificationMethod as String), '.')\r\n",
					"                                ,IFNULL(CAST(ownersInformed as String), '.')\r\n",
					"                                ,IFNULL(CAST(originalDevelopmentDescription as String), '.')\r\n",
					"                                ,IFNULL(CAST(changedDevelopmentDescription as String), '.')\r\n",
					"                                ,IFNULL(CAST(newConditionDetails as String), '.')\r\n",
					"                                ,IFNULL(CAST(nearbyCaseReferences as String), '.')\r\n",
					"                                ,IFNULL(CAST(neighbouringSiteAddresses as String), '.')\r\n",
					"                                ,IFNULL(CAST(affectedListedBuildingNumbers as String), '.')\r\n",
					"                                ,IFNULL(CAST(changedListedBuildingNumbers as String), '.')\r\n",
					"                                ,IFNULL(CAST(appellantCostsAppliedFor as String), '.')\r\n",
					"                                ,IFNULL(CAST(lpaCostsAppliedFor as String), '.')\r\n",
					"                                ,IFNULL(CAST(agriculturalHolding as String), '.')\r\n",
					"                                ,IFNULL(CAST(tenantAgriculturalHolding as String), '.')\r\n",
					"                                ,IFNULL(CAST(otherTenantsAgriculturalHolding as String), '.')\r\n",
					"                                ,IFNULL(CAST(informedTenantsAgriculturalHolding as String), '.')\r\n",
					"                                ,IFNULL(CAST(appellantProcedurePreference as String), '.')\r\n",
					"                                ,IFNULL(CAST(appellantProcedurePreferenceDetails as String), '.')\r\n",
					"                                ,IFNULL(CAST(appellantProcedurePreferenceDuration as String),'.')\r\n",
					"                                ,IFNULL(CAST(appellantProcedurePreferenceWitnessCount as String),'.')\r\n",
					"                                ,IFNULL(CAST(statusPlanningObligation as String), '.')\r\n",
					"                                ,IFNULL(CAST(affectsScheduledMonument as String), '.')\r\n",
					"                                ,IFNULL(CAST(hasProtectedSpecies as String), '.')\r\n",
					"                                ,IFNULL(CAST(isAonbNationalLandscape as String), '.')\r\n",
					"                                ,IFNULL(CAST(designatedSitesNames as String), '.')\r\n",
					"                                ,IFNULL(CAST(isGypsyOrTravellerSite as String), '.')\r\n",
					"                                ,IFNULL(CAST(isPublicRightOfWay as String), '.')\r\n",
					"                                ,IFNULL(CAST(eiaEnvironmentalImpactSchedule as String), '.')\r\n",
					"                                ,IFNULL(CAST(eiaDevelopmentDescription as String), '.')\r\n",
					"                                ,IFNULL(CAST(eiaSensitiveAreaDetails as String), '.')\r\n",
					"                                ,IFNULL(CAST(eiaColumnTwoThreshold as String), '.')\r\n",
					"                                ,IFNULL(CAST(eiaScreeningOpinion as String), '.')\r\n",
					"                                ,IFNULL(CAST(eiaRequiresEnvironmentalStatement as String), '.')\r\n",
					"                                ,IFNULL(CAST(eiaCompletedEnvironmentalStatement as String), '.')\r\n",
					"                                ,IFNULL(CAST(consultedBodiesDetails as String), '.')\r\n",
					"                                ,IFNULL(CAST(hasStatutoryConsultees as String), '.')\r\n",
					"                                ,IFNULL(CAST(hasInfrastructureLevy as String), '.')\r\n",
					"                                ,IFNULL(CAST(isInfrastructureLevyFormallyAdopted as String), '.')\r\n",
					"                                ,IFNULL(CAST(infrastructureLevyAdoptedDate as String), '.')\r\n",
					"                                ,IFNULL(CAST(infrastructureLevyExpectedDate as String), '.')\r\n",
					"                                ,IFNULL(CAST(lpaProcedurePreference as String), '.')\r\n",
					"                                ,IFNULL(CAST(lpaProcedurePreferenceDetails as String), '.')\r\n",
					"                                ,IFNULL(CAST(lpaProcedurePreferenceDuration as String), '.')\r\n",
					"                                ,IFNULL(CAST(caseworkReason as String), '.')\r\n",
					"                                ,IFNULL(CAST(developmentType as String), '.')\r\n",
					"                                ,IFNULL(CAST(importantInformation as String), '.')\r\n",
					"                                ,IFNULL(CAST(jurisdiction as String), '.')\r\n",
					"                                ,IFNULL(CAST(redeterminedIndicator as String), '.')\r\n",
					"                                ,IFNULL(CAST(dateCostsReportDespatched as String), '.')\r\n",
					"                                ,IFNULL(CAST(dateNotRecoveredOrDerecovered as String), '.')\r\n",
					"                                ,IFNULL(CAST(dateRecovered as String), '.')\r\n",
					"                                ,IFNULL(CAST(originalCaseDecisionDate as String), '.')\r\n",
					"                                ,IFNULL(CAST(targetDate as String), '.')\r\n",
					"                                ,IFNULL(CAST(appellantCommentsSubmittedDate as String), '.')\r\n",
					"                                ,IFNULL(CAST(appellantStatementSubmittedDate as String), '.')\r\n",
					"                                ,IFNULL(CAST(appellantProofsSubmittedDate as String), '.')\r\n",
					"                                ,IFNULL(CAST(finalCommentsDueDate as String), '.')\r\n",
					"                                ,IFNULL(CAST(interestedPartyRepsDueDate as String), '.')\r\n",
					"                                ,IFNULL(CAST(lpaCommentsSubmittedDate as String), '.')\r\n",
					"                                ,IFNULL(CAST(lpaProofsSubmittedDate as String), '.')\r\n",
					"                                ,IFNULL(CAST(lpaStatementSubmittedDate as String), '.')\r\n",
					"                                ,IFNULL(CAST(proofsOfEvidenceDueDate as String), '.')\r\n",
					"                                ,IFNULL(CAST(siteNoticesSentDate as String), '.')\r\n",
					"                                ,IFNULL(CAST(statementDueDate as String), '.')\r\n",
					"                                ,IFNULL(CAST(reasonForNeighbourVisits as String), '.')\r\n",
					"                                ,IFNULL(CAST(numberOfResidencesNetChange as String), '.')\r\n",
					"                                ,IFNULL(CAST(siteGridReferenceEasting as String), '.')\r\n",
					"                                ,IFNULL(CAST(siteGridReferenceNorthing as String), '.')\r\n",
					"                                ,IFNULL(CAST(siteViewableFromRoad as String), '.')\r\n",
					"                                ,IFNULL(CAST(siteWithinSSSI as String), '.')\r\n",
					"                                ,IFNULL(CAST(typeOfPlanningApplication as String), '.')\r\n",
					"                                ,IFNULL(CAST(preserveGrantLoan as String), '.')\r\n",
					"                                ,IFNULL(CAST(consultHistoricEngland as String), '.')\r\n",
					"                                ,IFNULL(CAST(Migrated as String), '.')\r\n",
					"                                ,IFNULL(CAST(ODTSourceSystem as String), '.')\r\n",
					"                                ,IFNULL(CAST(IngestionDate as String), '.')\r\n",
					"                                ,IFNULL(CAST(ValidTo as String), '.')\r\n",
					"                                )\r\n",
					"                            ) AS RowID\r\n",
					"                            ,IsActive\r\n",
					"                        FROM \r\n",
					"                            {spark_table_final}\r\n",
					"                    \"\"\")\r\n",
					"except Exception as e:\r\n",
					"        logError(f\"Error in preparing  results dataframe for {spark_table_final}:\\n{e}\")\r\n",
					"        error_message = app_insight_logger.format_error_message(e, max_length=300)"
				],
				"execution_count": 29
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"columns = results.columns\r\n",
					"\r\n",
					"results = results.drop(\"AppealS78ID\", \"ValidTo\", \"Migrated\", \"IsActive\")"
				],
				"execution_count": 30
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"final_df = results.join(df_calcs, (df_calcs[f\"temp_{primary_key}\"] == results[primary_key]) & (df_calcs[\"temp_IngestionDate\"] == results[\"IngestionDate\"])).select(columns).distinct()\r\n",
					"final_df = final_df.drop(primary_key).drop_duplicates()"
				],
				"execution_count": 31
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Ingest final data set to delta table appeal_s78"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"try:\r\n",
					"\r\n",
					"    insert_count = final_df.count()\r\n",
					"    \r\n",
					"    final_df.write.format(\"delta\").mode(\"Overwrite\").option(\"overwriteSchema\", \"true\").partitionBy(\"IsActive\").saveAsTable(f\"{spark_table_final}\")\r\n",
					"\r\n",
					"    end_exec_time = str(datetime.now())\r\n",
					"    app_insight_logger.add_table_result(                    \r\n",
					"                            delta_table_name = spark_table_final,\r\n",
					"                            insert_count = insert_count, \r\n",
					"                            update_count = update_count, \r\n",
					"                            delete_count = delete_count, \r\n",
					"                            table_result = \"success\",\r\n",
					"                            start_exec_time = start_exec_time, \r\n",
					"                            end_exec_time = end_exec_time,\r\n",
					"                            total_exec_time = \"\",\r\n",
					"                            error_message = \"\"\r\n",
					"                            )\r\n",
					"except Exception as e:\r\n",
					"        logError(f\"Error in ingesting delta table in the final step {spark_table_final}:\\n{e}\")\r\n",
					"        error_message = app_insight_logger.format_error_message(e, max_length=300)\r\n",
					"        \r\n",
					"        end_exec_time = str(datetime.now())\r\n",
					"        app_insight_logger.add_table_result(\r\n",
					"                    delta_table_name = spark_table_final,\r\n",
					"                    insert_count = insert_count, \r\n",
					"                    update_count = update_count, \r\n",
					"                    delete_count = delete_count, \r\n",
					"                    table_result = \"failed\",\r\n",
					"                    start_exec_time = start_exec_time, \r\n",
					"                    end_exec_time = end_exec_time,\r\n",
					"                    total_exec_time = \"\",\r\n",
					"                    error_message = error_message\r\n",
					"                    )"
				],
				"execution_count": 32
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Produce Json formatted output"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"# Exit with the JSON result\r\n",
					"mssparkutils.notebook.exit(app_insight_logger.generate_processing_results())"
				],
				"execution_count": 33
			}
		]
	}
}