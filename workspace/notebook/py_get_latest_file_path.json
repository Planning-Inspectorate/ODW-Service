{
	"name": "py_get_latest_file_path",
	"properties": {
		"folder": {
			"name": "utils"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "8e5206cb-e51d-4126-a43c-b3815a00e146"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw",
				"name": "pinssynspodw",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"def get_latest_file_path(definition):\n",
					"    import calendar\n",
					"    from datetime import datetime, timedelta, date\n",
					"\n",
					"    source_container_path = \"abfss://odw-raw@\" + storage_account\n",
					"    if definition[\"Source_Frequency_Folder\"] == \"\":\n",
					"        source_folder = definition['Source_Folder'] + \"/\"\n",
					"    else:\n",
					"        source_folder = definition['Source_Folder'] + \"/\" + definition[\"Source_Frequency_Folder\"] + \"/\"\n",
					"\n",
					"    date_folders = mssparkutils.fs.ls(source_container_path + source_folder)\n",
					"    date_folders = sorted(date_folders, key=lambda x: x.name, reverse=True)\n",
					"\n",
					"    file_found = False\n",
					"\n",
					"    for datex in date_folders:\n",
					"        \n",
					"        date_string = datex.name\n",
					"        ### handle YYYY-MM-DD dates\n",
					"        if len(date_string) == 10:\n",
					"            folder_date = datetime.strptime(date_string, \"%Y-%m-%d\")\n",
					"        ### handle YYYY-MM dates\n",
					"        elif len(date_string) == 7:\n",
					"            folder_date = datetime.strptime(date_string, \"%Y-%m\")\n",
					"            folder_date = date(folder_date.year, folder_date.month,\n",
					"                                calendar.monthrange(folder_date.year, folder_date.month)[-1]) + timedelta(days=1)\n",
					"            folder_date = datetime.combine(folder_date, datetime.min.time())\n",
					"        else:\n",
					"            raise ValueError(\"Date format in raw folder is incorrect, should be YYYY-MM-DD or YYYY-MM\")\n",
					"        \n",
					"        source_folder_with_date = mssparkutils.fs.ls(source_container_path + source_folder + date_string)\n",
					"        for file in source_folder_with_date:\n",
					"            ### isolate the correct file\n",
					"            filename = file.name\n",
					"            if definition['Source_Filename_Start'] in filename:\n",
					"                return file\n",
					""
				],
				"execution_count": null
			}
		]
	}
}