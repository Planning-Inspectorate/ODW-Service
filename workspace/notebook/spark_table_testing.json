{
	"name": "spark_table_testing",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "9e2510d6-521d-4654-8715-09f20c6d8388"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw",
				"name": "pinssynspodw",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"from pyspark.sql.types import IntegerType, ArrayType, StructType, StructField\r\n",
					"from pyspark.sql import Row\r\n",
					"from pyspark.sql.functions import *"
				],
				"execution_count": 40
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"service_bus_table = \"odw_standardised_db.spark_table_sb\"\r\n",
					"horizon_table = \"odw_standardised_db.spark_table_horizon\"\r\n",
					"spark_table_final = \"odw_standardised_db.spark_table_final\""
				],
				"execution_count": 57
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"service_bus_schema = StructType([\r\n",
					"    StructField(\"caseId\", IntegerType(), nullable=False),\r\n",
					"    StructField(\"attachmentIds\", ArrayType(IntegerType()), nullable=True)\r\n",
					"])"
				],
				"execution_count": 58
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"service_bus_data = [\r\n",
					"    Row(caseId=1, attachmentIds=[101, 102, 103]),\r\n",
					"    Row(caseId=2, attachmentIds=[201, 202]),\r\n",
					"    Row(caseId=3, attachmentIds=[301])\r\n",
					"]"
				],
				"execution_count": 59
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"spark.sql(f\"drop table if exists {service_bus_table}\")\r\n",
					"spark.sql(f\"drop table if exists {horizon_table}\")\r\n",
					"spark.sql(f\"drop table if exists {spark_table_final}\")"
				],
				"execution_count": 60
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"service_bus_df = spark.createDataFrame(service_bus_data, schema=service_bus_schema)\r\n",
					"spark_df.write.saveAsTable(f\"{service_bus_table}\")"
				],
				"execution_count": 61
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"horizon_schema = StructType([\r\n",
					"    StructField(\"caseId\", IntegerType(), nullable=False),\r\n",
					"    StructField(\"attachmentId\", IntegerType(), nullable=False)\r\n",
					"])"
				],
				"execution_count": 62
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"horizon_data = [\r\n",
					"    Row(caseId=1, attachmentId=1010),\r\n",
					"    Row(caseId=1, attachmentId=1020),\r\n",
					"    Row(caseId=1, attachmentId=1030),\r\n",
					"    Row(caseId=2, attachmentId=2010),\r\n",
					"    Row(caseId=2, attachmentId=2020),\r\n",
					"    Row(caseId=3, attachmentId=3010)\r\n",
					"]"
				],
				"execution_count": 63
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"horizon_df = spark.createDataFrame(horizon_data, schema=horizon_schema)\r\n",
					"spark_df.write.saveAsTable(f\"{horizon_table}\")"
				],
				"execution_count": 64
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"service_bus_df = spark.sql(f\"select * from {service_bus_table}\")\r\n",
					"display(service_bus_df)"
				],
				"execution_count": 65
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"horizon_df = spark.sql(f\"select * from {horizon_table}\")\r\n",
					"display(horizon_df)"
				],
				"execution_count": 66
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"horizon_df_explode = horizon_df.select(\"caseId\", explode(\"attachmentIds\").alias(\"attachmentIds\"))\r\n",
					"display(horizon_df_explode)"
				],
				"execution_count": 68
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"service_bus_df_explode = service_bus_df.select(\"caseId\", explode(\"attachmentIds\").alias(\"attachmentIds\"))\r\n",
					"display(service_bus_df_explode)"
				],
				"execution_count": 69
			}
		]
	}
}