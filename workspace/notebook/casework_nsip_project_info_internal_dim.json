{
	"name": "casework_nsip_project_info_internal_dim",
	"properties": {
		"folder": {
			"name": "odw-harmonised/Casework"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "3ca55b6e-4758-4661-b564-8d951967d67e"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw",
				"name": "pinssynspodw",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": true
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Check for new, updated or deleted data\n",
					"- This script checks for new, updated or deleted data by checking the source data (horizon tables) against the target (odw_harmonised_db.casework tables)\n",
					"- **New Data:** where an main Reference in the source does not exist in the target, then NewData flag is set to 'Y'\n",
					"- **Updated data:** Comparison occurs on Reference Fields in source and in target where the row hash is different i.e. there is a change in one of the columns. NewData flag is set to 'Y'\n",
					"- **Deleted data:** where an Reference info in the target exists but the same identifyers don't exist in the source. DeletedData flag is set to 'Y'\n",
					"\n",
					"## View casework_nsip_project_info_internal_dim is created"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"-- Build casework_nsip_project_info_internal_dim table\r\n",
					"-- Gets modified or deleted from source rows\r\n",
					"\r\n",
					"CREATE OR REPLACE TEMPORARY VIEW casework_nsip_project_info_internal_dim_new\r\n",
					"\r\n",
					"     AS\r\n",
					"\r\n",
					"-- gets data that matches of SourceID and flags that it is modified based on a row (md5) hash. Flags as \"NewData\"\r\n",
					"-- gets data that is in the target but not in source. Flags as \"DeletedData\"\r\n",
					"\r\n",
					"SELECT \r\n",
					"    CASE\r\n",
					"        WHEN T1.casereference IS NULL\r\n",
					"        THEN T3.NSIPProjectInfoInternalID\r\n",
					"        ELSE NULL\r\n",
					"    END as NSIPProjectInfoInternalID,\r\n",
					"    T1.casecreatedate AS CaseCreatedDate,\r\n",
					"    T1.projectname AS  ProjectName,\r\n",
					"    T1.projectstatus AS ProjectStatus,\r\n",
					"    T1.examtimetablepublishstatus AS ExamTimetablePublishStatus,\r\n",
					"    T1.sector AS Sector,\r\n",
					"    T1.projecttype AS ProjectType,\r\n",
					"    T1.stage AS Stage,\r\n",
					"    T1.casereference AS CaseReference,\r\n",
					"    T1.projectLocation AS ProjectLocation,\r\n",
					"    T1.projectemailaddress AS ProjectEmailAddress,\r\n",
					"    T1.twitteraccountname AS TwitterAccountName,\r\n",
					"    T1.region AS Region,\r\n",
					"    T1.easting AS Easting,\r\n",
					"    T1.northing AS Northing,\r\n",
					"    T1.transboundary AS Transboundary,\r\n",
					"    T1.welshlanguage AS WelshLanguage,\r\n",
					"    T1.exasize AS ExASize,\r\n",
					"    T1.mapzoomlevel AS MapZoomLevel,\r\n",
					"    T1.projectdescription AS ProjectDescription,\r\n",
					"    T1.sos AS SoS,\r\n",
					"    T1.tene AS TenE,\r\n",
					"    T1.dateprojectappearsonwebsite AS DateProjectAppearsOnWebsite,\r\n",
					"    T1.dateofdcoacceptance AS DateOfDCOAcceptance,\r\n",
					"    T1.anticipateddateofsubmission AS AnticipatedDateOfSubmission,\r\n",
					"    T1.dateofdcosubmission AS DateOfDCOSubmission,\r\n",
					"    T1.dateofrepresentationperiodopen AS DateOfRepresentationPeriodOpen,\r\n",
					"    T1.dateofrelevantrepresentationclose AS DateOfRelevantRepresentationClose,\r\n",
					"    T1.daterrepappearonwebsite AS DateRRepAppearOnWebsite,\r\n",
					"    T1.confirmedstartofexamination AS ConfirmedStartOfExamination,\r\n",
					"    T1.datetimeexaminationends AS DateTimeExaminationEnds,\r\n",
					"    T1.stage4extensiontoexamclosedate AS Stage4ExtensionToExamCloseDate,\r\n",
					"    T1.stage5extensiontorecommendationdeadline AS Stage5ExtensionToRecommendationDeadline,\r\n",
					"    T1.dateofrecommendations AS DateOfRecommendations,\r\n",
					"    T1.confirmeddateofdecision AS ConfirmedDateOfDecision,\r\n",
					"    T1.stage5extensiontodecisiondeadline AS Stage5ExtensionToDecisionDeadline,\r\n",
					"    T1.dateprojectwithdrawn AS DateProjectWithdrawn,\r\n",
					"    T1.section46notification AS Section46Notification,\r\n",
					"    T1.datepinsfirstnotifiedofproject AS DatePINSFirstNotifiedOfProject,\r\n",
					"    T1.screeningopinionsought AS ScreeningOpinionSought,\r\n",
					"    T1.screeningopinionissued AS ScreeningOpinionIssued,\r\n",
					"    T1.scopingopinionsought AS ScopingOpinionSought,\r\n",
					"    T1.scopingopinionissued AS ScopingOpinionIssued,\r\n",
					"    T1.deadlineforacceptancedecision AS DeadlineForAcceptanceDecision,\r\n",
					"    T1.datesection58noticereceived AS DateSection58NoticeReceived,\r\n",
					"    T1.preliminarymeetingstartdate AS PreliminaryMeetingStartDate,\r\n",
					"    T2.deadlineforcloseofexamination AS DeadlineForCloseOfExamination,\r\n",
					"    T1.deadlineforsubmissionofrecommendation AS DeadlineForSubmissionOfRecommendation,\r\n",
					"    T1.deadlinefordecision AS DeadlineForDecision,\r\n",
					"    T1.jrperiodenddate AS JRPeriodEndDate,\r\n",
					"    T1.extensiontodaterelevantrepresentationsclose AS ExtensionToDateRelevantRepresentationsClose,\r\n",
					"    T1.summary AS Summary,\r\n",
					"    T1.promotername AS PromoterName,\r\n",
					"    T1.applicantfirstname AS ApplicantFirstName,\r\n",
					"    T1.applicantlastname AS ApplicantLastName,\r\n",
					"    T1.addressline1 AS AddressLine1,\r\n",
					"    T1.addressline2 AS AddressLine2,\r\n",
					"    T1.addresstown AS AddressTown,\r\n",
					"    T1.addresscounty AS AddressCounty,\r\n",
					"    T1.postcode AS PostCode,\r\n",
					"    T1.applicantemailaddress AS ApplicantEmailAddress,\r\n",
					"    T1.applicantwebaddress AS ApplicantWebAddress,\r\n",
					"    T1.applicantphonenumber AS ApplicantPhoneNumber,\r\n",
					"    T1.applicantdescriptionofproject AS ApplicantDescriptionOfProject,\r\n",
					"\r\n",
					"    T2.SourceSystemID,\r\n",
					"    CURRENT_TIMESTAMP AS IngestionDate,\r\n",
					"    NULL AS ValidTo,\r\n",
					"    md5(concat(IFNULL(T1.casecreatedate,'.'), IFNULL(T1.projectname,'.'), IFNULL(T1.projectstatus,'.'),IFNULL(T1.examtimetablepublishstatus,'.'),IFNULL(T1.sector,'.'),IFNULL(T1.projecttype,'.'),IFNULL(T1.stage,'.'),IFNULL(T1.casereference,'.'),IFNULL(T1.projectLocation,'.'),IFNULL(T1.projectemailaddress,'.'),IFNULL(T1.twitteraccountname,'.'),IFNULL(T1.region,'.'),IFNULL(T1.importantinformation,'.'),IFNULL(T1.easting,'.'),IFNULL(T1.northing,'.'),IFNULL(T1.transboundary,'.'),IFNULL(T1.welshlanguage,'.'),IFNULL(T1.exasize,'.'),IFNULL(T1.mapzoomlevel,'.'),IFNULL(T1.projectdescription,'.'),IFNULL(T1.sos,'.'),IFNULL(T1.tene,'.'),IFNULL(T1.dateprojectappearsonwebsite,'.'),IFNULL(T1.dateofdcoacceptance,'.'),IFNULL(T1.anticipateddateofsubmission,'.'),IFNULL(T1.dateofdcosubmission,'.'),IFNULL(T1.dateofrepresentationperiodopen,'.'),IFNULL(T1.dateofrelevantrepresentationclose,'.'),IFNULL(T1.daterrepappearonwebsite,'.'),IFNULL(T1.confirmedstartofexamination,'.'),IFNULL(T1.datetimeexaminationends,'.'),IFNULL(T1.stage4extensiontoexamclosedate,'.'),IFNULL(T1.stage5extensiontorecommendationdeadline,'.'),IFNULL(T1.dateofrecommendations,'.'),IFNULL(T1.confirmeddateofdecision,'.'),IFNULL(T1.stage5extensiontodecisiondeadline,'.'),IFNULL(T1.dateprojectwithdrawn,'.'),IFNULL(T1.section46notification,'.'),IFNULL(T1.datepinsfirstnotifiedofproject,'.'),IFNULL(T1.screeningopinionsought,'.'),IFNULL(T1.screeningopinionissued,'.'),IFNULL(T1.scopingopinionsought,'.'),IFNULL(T1.scopingopinionissued,'.'),IFNULL(T1.deadlineforacceptancedecision,'.'),IFNULL(T1.datesection58noticereceived,'.'),IFNULL(T1.deadlineforcloseofexamination,'.'),IFNULL(T1.preliminarymeetingstartdate,'.'),IFNULL(T1.deadlineforsubmissionofrecommendation,'.'),IFNULL(T1.deadlinefordecision,'.'),IFNULL(T1.jrperiodenddate,'.'),IFNULL(T1.extensiontodaterelevantrepresentationsclose,'.'),IFNULL(T1.summary,'.'),IFNULL(T1.promotername,'.'),IFNULL(T1.applicantfirstname,'.'),IFNULL(T1.applicantlastname,'.'),IFNULL(T1.addressline1,'.'),IFNULL(T1.addressline2,'.'),IFNULL(T1.addresstown,'.'),IFNULL(T1.addresscounty,'.'),IFNULL(T1.postcode,'.'),IFNULL(T1.applicantemailaddress,'.'),IFNULL(T1.applicantwebaddress,'.'),IFNULL(T1.applicantphonenumber,'.'),IFNULL(T1.applicantdescriptionofproject,'.'))) as RowID, -- this hash should contain all the defining fields, so needs to be done\r\n",
					"    'Y' as IsActive,\r\n",
					"    CASE\r\n",
					"        WHEN T1.casereference = T3.AppealRefNumber AND  md5(concat(IFNULL(T1.casecreatedate,'.'), IFNULL(T1.projectname,'.'), IFNULL(T1.projectstatus,'.'),IFNULL(T1.examtimetablepublishstatus,'.'),IFNULL(T1.sector,'.'),IFNULL(T1.projecttype,'.'),IFNULL(T1.stage,'.'),IFNULL(T1.casereference,'.'),IFNULL(T1.projectLocation,'.'),IFNULL(T1.projectemailaddress,'.'),IFNULL(T1.twitteraccountname,'.'),IFNULL(T1.region,'.'),IFNULL(T1.importantinformation,'.'),IFNULL(T1.easting,'.'),IFNULL(T1.northing,'.'),IFNULL(T1.transboundary,'.'),IFNULL(T1.welshlanguage,'.'),IFNULL(T1.exasize,'.'),IFNULL(T1.mapzoomlevel,'.'),IFNULL(T1.projectdescription,'.'),IFNULL(T1.sos,'.'),IFNULL(T1.tene,'.'),IFNULL(T1.dateprojectappearsonwebsite,'.'),IFNULL(T1.dateofdcoacceptance,'.'),IFNULL(T1.anticipateddateofsubmission,'.'),IFNULL(T1.dateofdcosubmission,'.'),IFNULL(T1.dateofrepresentationperiodopen,'.'),IFNULL(T1.dateofrelevantrepresentationclose,'.'),IFNULL(T1.daterrepappearonwebsite,'.'),IFNULL(T1.confirmedstartofexamination,'.'),IFNULL(T1.datetimeexaminationends,'.'),IFNULL(T1.stage4extensiontoexamclosedate,'.'),IFNULL(T1.stage5extensiontorecommendationdeadline,'.'),IFNULL(T1.dateofrecommendations,'.'),IFNULL(T1.confirmeddateofdecision,'.'),IFNULL(T1.stage5extensiontodecisiondeadline,'.'),IFNULL(T1.dateprojectwithdrawn,'.'),IFNULL(T1.section46notification,'.'),IFNULL(T1.datepinsfirstnotifiedofproject,'.'),IFNULL(T1.screeningopinionsought,'.'),IFNULL(T1.screeningopinionissued,'.'),IFNULL(T1.scopingopinionsought,'.'),IFNULL(T1.scopingopinionissued,'.'),IFNULL(T1.deadlineforacceptancedecision,'.'),IFNULL(T1.datesection58noticereceived,'.'),IFNULL(T1.deadlineforcloseofexamination,'.'),IFNULL(T1.preliminarymeetingstartdate,'.'),IFNULL(T1.deadlineforsubmissionofrecommendation,'.'),IFNULL(T1.deadlinefordecision,'.'),IFNULL(T1.jrperiodenddate,'.'),IFNULL(T1.extensiontodaterelevantrepresentationsclose,'.'),IFNULL(T1.summary,'.'),IFNULL(T1.promotername,'.'),IFNULL(T1.applicantfirstname,'.'),IFNULL(T1.applicantlastname,'.'),IFNULL(T1.addressline1,'.'),IFNULL(T1.addressline2,'.'),IFNULL(T1.addresstown,'.'),IFNULL(T1.addresscounty,'.'),IFNULL(T1.postcode,'.'),IFNULL(T1.applicantemailaddress,'.'),IFNULL(T1.applicantwebaddress,'.'),IFNULL(T1.applicantphonenumber,'.'),IFNULL(T1.applicantdescriptionofproject,'.'))) <> T3.RowID   -- same employee, changed data\r\n",
					"        THEN 'Y'\r\n",
					"        WHEN T3.AppealRefNumber IS NULL -- new AppealRef\r\n",
					"        THEN 'Y'\r\n",
					"        ELSE 'N'\r\n",
					"    END as NewData,\r\n",
					"    CASE\r\n",
					"        WHEN T1.casereference IS NULL\r\n",
					"        THEN 'Y'\r\n",
					"        ELSE 'N'\r\n",
					"    END AS  DeletedData, \r\n",
					"    T3.IsActive as HistoricIsActive\r\n",
					"\r\n",
					"FROM odw_standardised_db.horizon_additional_fields T1\r\n",
					"LEFT JOIN odw_harmonised_db.main_sourcesystem_fact T2 ON \"Casework\" = T2.Description AND T2.IsActive = 'Y'\r\n",
					"FULL JOIN odw_harmonised_db.casework_nsip_project_info_internal_dim T3 ON T1.casereference = T3.AppealRefNumber AND T3.IsActive = 'Y'\r\n",
					"WHERE\r\n",
					"    (\r\n",
					"        -- flags new data        \r\n",
					"        (   CASE\r\n",
					"                WHEN T1.casereference = T3.AppealRefNumber AND md5(concat(IFNULL(T1.casecreatedate,'.'), IFNULL(T1.projectname,'.'), IFNULL(T1.projectstatus,'.'),IFNULL(T1.examtimetablepublishstatus,'.'),IFNULL(T1.sector,'.'),IFNULL(T1.projecttype,'.'),IFNULL(T1.stage,'.'),IFNULL(T1.casereference,'.'),IFNULL(T1.projectLocation,'.'),IFNULL(T1.projectemailaddress,'.'),IFNULL(T1.twitteraccountname,'.'),IFNULL(T1.region,'.'),IFNULL(T1.importantinformation,'.'),IFNULL(T1.easting,'.'),IFNULL(T1.northing,'.'),IFNULL(T1.transboundary,'.'),IFNULL(T1.welshlanguage,'.'),IFNULL(T1.exasize,'.'),IFNULL(T1.mapzoomlevel,'.'),IFNULL(T1.projectdescription,'.'),IFNULL(T1.sos,'.'),IFNULL(T1.tene,'.'),IFNULL(T1.dateprojectappearsonwebsite,'.'),IFNULL(T1.dateofdcoacceptance,'.'),IFNULL(T1.anticipateddateofsubmission,'.'),IFNULL(T1.dateofdcosubmission,'.'),IFNULL(T1.dateofrepresentationperiodopen,'.'),IFNULL(T1.dateofrelevantrepresentationclose,'.'),IFNULL(T1.daterrepappearonwebsite,'.'),IFNULL(T1.confirmedstartofexamination,'.'),IFNULL(T1.datetimeexaminationends,'.'),IFNULL(T1.stage4extensiontoexamclosedate,'.'),IFNULL(T1.stage5extensiontorecommendationdeadline,'.'),IFNULL(T1.dateofrecommendations,'.'),IFNULL(T1.confirmeddateofdecision,'.'),IFNULL(T1.stage5extensiontodecisiondeadline,'.'),IFNULL(T1.dateprojectwithdrawn,'.'),IFNULL(T1.section46notification,'.'),IFNULL(T1.datepinsfirstnotifiedofproject,'.'),IFNULL(T1.screeningopinionsought,'.'),IFNULL(T1.screeningopinionissued,'.'),IFNULL(T1.scopingopinionsought,'.'),IFNULL(T1.scopingopinionissued,'.'),IFNULL(T1.deadlineforacceptancedecision,'.'),IFNULL(T1.datesection58noticereceived,'.'),IFNULL(T1.deadlineforcloseofexamination,'.'),IFNULL(T1.preliminarymeetingstartdate,'.'),IFNULL(T1.deadlineforsubmissionofrecommendation,'.'),IFNULL(T1.deadlinefordecision,'.'),IFNULL(T1.jrperiodenddate,'.'),IFNULL(T1.extensiontodaterelevantrepresentationsclose,'.'),IFNULL(T1.summary,'.'),IFNULL(T1.promotername,'.'),IFNULL(T1.applicantfirstname,'.'),IFNULL(T1.applicantlastname,'.'),IFNULL(T1.addressline1,'.'),IFNULL(T1.addressline2,'.'),IFNULL(T1.addresstown,'.'),IFNULL(T1.addresscounty,'.'),IFNULL(T1.postcode,'.'),IFNULL(T1.applicantemailaddress,'.'),IFNULL(T1.applicantwebaddress,'.'),IFNULL(T1.applicantphonenumber,'.'),IFNULL(T1.applicantdescriptionofproject,'.'))) <> T3.RowID  -- same employee, changed data\r\n",
					"                THEN 'Y'\r\n",
					"                WHEN T3.AppealRefNumber IS NULL -- new PositionCode\r\n",
					"                THEN 'Y'\r\n",
					"            ELSE 'N'\r\n",
					"            END  = 'Y' ) OR\r\n",
					"        \r\n",
					"        -- flags deleted data\r\n",
					"        (   CASE\r\n",
					"                WHEN T1.casereference IS NULL\r\n",
					"                THEN 'Y'\r\n",
					"                ELSE 'N'\r\n",
					"            END = 'Y' )\r\n",
					"    );\r\n",
					""
				],
				"execution_count": 3
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Run tests to check integrity of data by numbers\r\n",
					"- This script checks for the total number of current codes in the harmonised table, and compare against the numbers for new data to be added and data to be set as inactive.\r\n",
					"- **Changes tracking:** where it checks the data against active records in harmonised and compares with records to add and records to be set as inactive.\r\n",
					"- **Changes tolerance levels:** if the total amount to be added and deleted surpasses the tolerance limit, it will interrupt the process of loading the data"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# from pyspark.sql import SparkSession\r\n",
					"# spark = SparkSession.builder.getOrCreate()\r\n",
					"\r\n",
					"# Source_Number = spark.sql(\"SELECT COUNT(*) AS Source_Number FROM pins_casework_all_appeals_grouped\")\r\n",
					"# Current_Number = spark.sql(\"SELECT COUNT (DISTINCT RowID) AS Current_Number FROM odw_harmonised_db.casework_nsip_project_info_internal_dim where IsActive = 'Y' \")\r\n",
					"# New_Data_Number = spark.sql(\"SELECT COUNT (DISTINCT RowID) AS New_Data_Number FROM casework_nsip_project_info_internal_dim WHERE NewData = 'Y'\")\r\n",
					"# Deleted_Data_Number = spark.sql(\"SELECT COUNT (DISTINCT RowID) AS Deleted_Data_Number FROM casework_nsip_project_info_internal_dim WHERE DeletedData = 'Y'\")\r\n",
					"\r\n",
					"# Source_Number_Pandas = Source_Number.toPandas()\r\n",
					"# Current_Number_Pandas =  Current_Number.toPandas()\r\n",
					"# New_Data_Number_Pandas = New_Data_Number.toPandas()\r\n",
					"# Deleted_Data_Number_Pandas = Deleted_Data_Number.toPandas()\r\n",
					"\r\n",
					"# # checking if new total number of registers matches the previously loaded, plus New ones, minus Deleted ones\r\n",
					"# print(\"SET 1:\")\r\n",
					"# Total_Number = Source_Number_Pandas['Source_Number'].tolist() \r\n",
					"# Current_Loaded_Number = Current_Number_Pandas['Current_Number'].tolist() \r\n",
					"# New_Data_Number = New_Data_Number_Pandas['New_Data_Number'].tolist() \r\n",
					"# Deleted_Data_Number = Deleted_Data_Number_Pandas['Deleted_Data_Number'].tolist() \r\n",
					"\r\n",
					"# if Total_Number[0] != (Current_Loaded_Number[0] + New_Data_Number[0] - Deleted_Data_Number[0]):\r\n",
					"#     raise RuntimeError(\"Loading Number do not match\")\r\n",
					"# else:\r\n",
					"#     print(\"Loading number matches with existing codes plus new, minus deleted!\")\r\n",
					"\r\n",
					"# if New_Data_Number[0] > 1000:\r\n",
					"#     raise RuntimeError(\"ALERT: Too many new codes\")\r\n",
					"# else:\r\n",
					"#     print(\"New data under tolerance levels\")\r\n",
					"\r\n",
					"# if Deleted_Data_Number[0] > 500:\r\n",
					"#     raise RuntimeError(\"ALERT: Too many deleted codes\")\r\n",
					"# else:\r\n",
					"#     print(\"Unused codes under tolerance levels\")"
				],
				"execution_count": 4
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Run tests to check integrity of data by comparison of codes\r\n",
					"- This script checks for the total list of current codes in the harmonised table, and compare against the list for new data to be added and data to be set as inactive.\r\n",
					"- **Changes tracking:** where it checks the data against active records in harmonised and compares with records to add and records to be set as inactive."
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# from pyspark.sql import SparkSession\r\n",
					"# spark = SparkSession.builder.getOrCreate()\r\n",
					"\r\n",
					"# Current_Records = spark.sql(\"SELECT DISTINCT RowID AS Current_Records FROM odw_harmonised_db.casework_nsip_project_info_internal_dim where IsActive = 'Y' \")\r\n",
					"# New_Data_Records = spark.sql(\"SELECT DISTINCT RowID AS New_Data_Records FROM casework_nsip_project_info_internal_dim WHERE NewData = 'Y'\")\r\n",
					"# Deleted_Data_Records = spark.sql(\"SELECT DISTINCT RowID AS Deleted_Data_Records FROM casework_nsip_project_info_internal_dim WHERE DeletedData = 'Y'\")\r\n",
					"\r\n",
					"# Current_Records_Pandas =  Current_Records.toPandas()\r\n",
					"# New_Data_Records_Pandas = New_Data_Records.toPandas()\r\n",
					"# Deleted_Data_Records_Pandas = Deleted_Data_Records.toPandas()\r\n",
					"\r\n",
					"# # checking if a deleted records are correcly flagged, not existing in the new data, but existing inpreviously loaded\r\n",
					"# print(\"TEST 2:\")\r\n",
					"\r\n",
					"# Current_Records = Current_Records_Pandas['Current_Records'].tolist() \r\n",
					"# Deleted_Records = Deleted_Data_Records_Pandas['Deleted_Data_Records'].tolist()\r\n",
					"# New_Records = New_Data_Records_Pandas['New_Data_Records'].tolist()\r\n",
					"\r\n",
					"# print(Current_Records)\r\n",
					"# print(Deleted_Records)\r\n",
					"# print(New_Records)\r\n",
					"\r\n",
					"# for i in Deleted_Records:\r\n",
					"#     if i in Current_Records: \r\n",
					"#         print(i + \" to be deleted is in the current records\")\r\n",
					"#     else:\r\n",
					"#         raise RuntimeError(\"Records to Delete do not match\")\r\n",
					"\r\n",
					"# for j in New_Records:\r\n",
					"#     if j not in Current_Records: \r\n",
					"#         print(j + \" to be added is not in the current records\")\r\n",
					"#     else:\r\n",
					"#         raise RuntimeError(\"Records to Add do not match\")"
				],
				"execution_count": 5
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Dataset is created that contains changed data and corresponding target data\n",
					"- This script combines data that has been updated, Deleted or is new, with corresponding target data\n",
					"- View **casework_all_appeals_new** is unioned to the target data filter to only those rows where changes have been detected\n",
					"## View casework_nsip_project_info_internal_dim_changed_rows is created"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"-- Create new and updated dataset\r\n",
					"\r\n",
					"CREATE OR REPLACE TEMPORARY VIEW casework_nsip_project_info_internal_dim_changed_rows\r\n",
					"\r\n",
					"    AS\r\n",
					"\r\n",
					"-- gets updated, deleted and new rows \r\n",
					"SELECT \r\n",
					"    NSIPProjectInfoInternalID,\r\n",
					"    CaseReference,\r\n",
					"    CaseReference,\r\n",
					"    StandardPriority,\r\n",
					"    ImportantInformation,\r\n",
					"    SourceSystemID,\r\n",
					"    IngestionDate,\r\n",
					"    ValidTo,\r\n",
					"    RowID,\r\n",
					"    IsActive\r\n",
					"\r\n",
					"From casework_nsip_project_info_internal_dim_new WHERE HistoricIsActive = 'Y' or HistoricIsActive IS NULL\r\n",
					"\r\n",
					"    UNION ALL\r\n",
					"\r\n",
					"-- gets original versions of updated rows so we can update EndDate and set IsActive flag to 'N'\r\n",
					"SELECT\r\n",
					"    NSIPProjectInfoInternalID,\r\n",
					"    CaseReference,\r\n",
					"    CaseReference,\r\n",
					"    StandardPriority,\r\n",
					"    ImportantInformation,\r\n",
					"    SourceSystemID,\r\n",
					"    IngestionDate,\r\n",
					"    ValidTo,\r\n",
					"    RowID,\r\n",
					"    IsActive\r\n",
					"    \r\n",
					"FROM odw_harmonised_db.casework_nsip_project_info_internal_dim\r\n",
					"WHERE CaseReference IN (SELECT CaseReference FROM casework_nsip_project_info_internal_dim_new WHERE NSIPProjectInfoInternalID IS NULL) AND IsActive = 'Y'; "
				],
				"execution_count": 6
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# View casework_nsip_project_info_internal_dim_changed_rows is used in a merge (Upsert) statement into the target table\n",
					"- **WHEN MATCHED** ON the surrogate Key (i.e. AllAppealsID), EndDate is set to today -1 day and the IsActive flag is set to 'N'\n",
					"- **WHEN NOT MATCHED** ON the surrogate Key, insert rows\n",
					"## Table odw_harmonised_db.casework_nsip_project_info_internal_dim is updated"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"-- merge into dim table\r\n",
					"\r\n",
					"MERGE INTO odw_harmonised_db.casework_nsip_project_info_internal_dim AS Target\r\n",
					"USING casework_nsip_project_info_internal_dim_changed_rows AS Source\r\n",
					"\r\n",
					"ON Source.NSIPProjectInfoInternalID = Target.NSIPProjectInfoInternalID\r\n",
					"\r\n",
					"-- For Updates existing rows\r\n",
					"\r\n",
					"WHEN MATCHED\r\n",
					"    THEN \r\n",
					"    UPDATE SET\r\n",
					"    Target.ValidTo = date_sub(current_timestamp,1),\r\n",
					"    Target.IsActive = 'N'\r\n",
					"\r\n",
					"-- Insert completely new rows\r\n",
					"WHEN NOT MATCHED \r\n",
					"    THEN INSERT * ;  \r\n",
					""
				],
				"execution_count": 7
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Fix the IDs\n",
					"- No auto-increment feature is available in delta tables, therefore we need to create new IDs for the inserted rows\n",
					"- This is done by select the target data and using INSERT OVERWRITE to re-insert the data is a new Row Number\n",
					"## Table odw_harmonised_db.casework_nsip_project_info_internal_dim is updated"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"-- Insert new casework_nsip_project_info_internal_dim\r\n",
					"\r\n",
					"INSERT OVERWRITE odw_harmonised_db.casework_nsip_project_info_internal_dim\r\n",
					"\r\n",
					"SELECT \r\n",
					"    ROW_NUMBER() OVER (ORDER BY CaseReference NULLS LAST) AS NSIPProjectInfoInternalID,\r\n",
					"    CaseReference,\r\n",
					"    CaseReference,\r\n",
					"    StandardPriority,\r\n",
					"    ImportantInformation,\r\n",
					"    SourceSystemID,\r\n",
					"    IngestionDate,\r\n",
					"    ValidTo,\r\n",
					"    RowID,\r\n",
					"    IsActive\r\n",
					"FROM odw_harmonised_db.casework_nsip_project_info_internal_dim;\r\n",
					""
				],
				"execution_count": 8
			}
		]
	}
}