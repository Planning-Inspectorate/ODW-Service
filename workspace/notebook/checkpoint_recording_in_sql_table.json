{
	"name": "checkpoint_recording_in_sql_table",
	"properties": {
		"folder": {
			"name": "utils"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "6e2c11a5-232a-42b5-a4a4-a36095ae87b4"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw",
				"name": "pinssynspodw",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# def get_secret(secret_name):\r\n",
					"#     key_vault_name = os.environ[\"KEY_VAULT_NAME\"]\r\n",
					"#     kv_uri = f\"https://{key_vault_name}.vault.azure.net\"\r\n",
					"#     credential = DefaultAzureCredential()\r\n",
					"#     client = SecretClient(vault_url=kv_uri, credential=credential)\r\n",
					"#     secret = client.get_secret(secret_name)\r\n",
					"#     return secret.value"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.sql import SparkSession\r\n",
					"from datetime import datetime\r\n",
					"import pandas as pd\r\n",
					"\r\n",
					"# Initialize Spark session\r\n",
					"spark = SparkSession.builder.getOrCreate()\r\n",
					"\r\n",
					"# Database connection details\r\n",
					"# jdbc_url = \"jdbc:sqlserver://<your-server-name>.database.windows.net:1433;database=<your-database-name>\"\r\n",
					"# db_properties = {\r\n",
					"#     \"user\": \"<your-username>\",\r\n",
					"#     \"password\": \"<your-password>\",\r\n",
					"#     \"driver\": \"com.microsoft.sqlserver.jdbc.SQLServerDriver\"\r\n",
					"# }\r\n",
					"jdbc_url = \"\"\r\n",
					"\r\n",
					"# Function to save checkpoint\r\n",
					"def save_checkpoint(pipeline_name, activity_name, status):\r\n",
					"    checkpoint_data = [{\r\n",
					"        \"PipelineName\": pipeline_name,\r\n",
					"        \"ActivityName\": activity_name,\r\n",
					"        \"Status\": status,\r\n",
					"        \"LastUpdated\": datetime.utcnow()\r\n",
					"    }]\r\n",
					"    \r\n",
					"    # Convert checkpoint data to DataFrame\r\n",
					"    checkpoint_df = pd.DataFrame(checkpoint_data)\r\n",
					"    spark_df = spark.createDataFrame(checkpoint_df)\r\n",
					"    \r\n",
					"    # Write the checkpoint data to the SQL table\r\n",
					"    spark_df.write.jdbc(url=jdbc_url, table=\"PipelineCheckpoints\", mode=\"append\", properties=db_properties)\r\n",
					"    print(f\"Checkpoint saved for {pipeline_name}-{activity_name} with status {status}\")\r\n",
					"\r\n",
					"# Function to load the latest checkpoint\r\n",
					"def load_latest_checkpoint(pipeline_name):\r\n",
					"    query = f\"(SELECT TOP 1 * FROM PipelineCheckpoints WHERE PipelineName = '{pipeline_name}' ORDER BY LastUpdated DESC) AS latest_checkpoint\"\r\n",
					"    checkpoint_df = spark.read.jdbc(url=jdbc_url, table=query, properties=db_properties)\r\n",
					"    \r\n",
					"    if checkpoint_df.count() > 0:\r\n",
					"        checkpoint_data = checkpoint_df.collect()[0].asDict()\r\n",
					"        print(f\"Loaded checkpoint: {checkpoint_data}\")\r\n",
					"        return checkpoint_data\r\n",
					"    else:\r\n",
					"        print(\"No checkpoints found.\")\r\n",
					"        return None\r\n",
					"\r\n",
					"# Example usage\r\n",
					"pipeline_name = \"ExamplePipeline\"\r\n",
					"activity_name = \"ExampleActivity\"\r\n",
					"status = \"Succeeded\"\r\n",
					"\r\n",
					"# Save a checkpoint\r\n",
					"save_checkpoint(pipeline_name, activity_name, status)\r\n",
					"\r\n",
					"# Load the latest checkpoint\r\n",
					"checkpoint_data = load_latest_checkpoint(pipeline_name)\r\n",
					""
				],
				"execution_count": 12
			}
		]
	}
}