{
	"name": "checkpoint_recording_in_sql_table",
	"properties": {
		"folder": {
			"name": "utils"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "97ff64e9-4fff-42dd-acbd-a52173a31760"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw",
				"name": "pinssynspodw",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"spark.sql(f\"drop table if exists default.PipelineCheckpoints;\")"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"CREATE TABLE \r\n",
					"    PipelineCheckpoints (\r\n",
					"    PipelineName VARCHAR(8000),\r\n",
					"    ActivityName VARCHAR(8000),\r\n",
					"    Status VARCHAR(8000),\r\n",
					"    LastUpdated timestamp\r\n",
					");\r\n",
					""
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# def get_secret(secret_name):\r\n",
					"#     key_vault_name = os.environ[\"KEY_VAULT_NAME\"]\r\n",
					"#     kv_uri = f\"https://{key_vault_name}.vault.azure.net\"\r\n",
					"#     credential = DefaultAzureCredential()\r\n",
					"#     client = SecretClient(vault_url=kv_uri, credential=credential)\r\n",
					"#     secret = client.get_secret(secret_name)\r\n",
					"#     return secret.value"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Import necessary libraries\r\n",
					"import pyodbc\r\n",
					"import datetime\r\n",
					"\r\n",
					"# Function to save checkpoint\r\n",
					"def save_checkpoint(pipeline_name, activity_name, status):\r\n",
					"    server = '<your-server-name>.database.windows.net'\r\n",
					"    database = '<your-database-name>'\r\n",
					"    username = '<your-username>'\r\n",
					"    password = '<your-password>'\r\n",
					"    \r\n",
					"    conn_str = f'Driver={{ODBC Driver 17 for SQL Server}};Server={server};Database={database};Uid={username};Pwd={password};Encrypt=yes;TrustServerCertificate=no;Connection Timeout=30;'\r\n",
					"    conn = pyodbc.connect(conn_str)\r\n",
					"    \r\n",
					"    cursor = conn.cursor()\r\n",
					"    \r\n",
					"    # SQL command to insert or update checkpoint\r\n",
					"    sql = \"\"\"\r\n",
					"    MERGE INTO PipelineCheckpoints AS target \r\n",
					"    USING (SELECT ? AS PipelineName, ? AS ActivityName, ? AS Status, ? AS LastUpdated) AS source \r\n",
					"    ON (target.PipelineName = source.PipelineName AND target.ActivityName = source.ActivityName) \r\n",
					"    WHEN MATCHED THEN \r\n",
					"        UPDATE SET Status = source.Status, LastUpdated = source.LastUpdated \r\n",
					"    WHEN NOT MATCHED THEN \r\n",
					"        INSERT (PipelineName, ActivityName, Status, LastUpdated) \r\n",
					"        VALUES (source.PipelineName, source.ActivityName, source.Status, source.LastUpdated);\r\n",
					"    \"\"\"\r\n",
					"    \r\n",
					"    # Execute the SQL command\r\n",
					"    cursor.execute(sql, (pipeline_name, activity_name, status, datetime.datetime.utcnow()))\r\n",
					"    conn.commit()\r\n",
					"    cursor.close()\r\n",
					"    conn.close()\r\n",
					"    \r\n",
					"    return f\"Checkpoint for {pipeline_name}-{activity_name} saved with status {status}.\"\r\n",
					"\r\n",
					"# Example usage\r\n",
					"save_checkpoint('Pipeline1', 'Activity1', 'Succeeded')\r\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import os\r\n",
					"import pyodbc\r\n",
					"import json\r\n",
					"\r\n",
					"def load_checkpoint(req):\r\n",
					"    pipeline_name = req.get('pipelineName')\r\n",
					"    if not pipeline_name:\r\n",
					"        return \"Please pass pipelineName\", 400\r\n",
					"\r\n",
					"    server = os.environ['pins-synw-odw-dev-uks.sql.azuresynapse.net']\r\n",
					"    database = os.environ['master']\r\n",
					"    username = os.environ['paul.dragan@planninginspectorate.gov.uk']\r\n",
					"    password = os.environ['Mallard414!.']\r\n",
					"    \r\n",
					"    conn_str = f'Driver={{ODBC Driver 17 for SQL Server}};Server=tcp:{server},1433;Database={database};Uid={username};Pwd={password};Encrypt=yes;TrustServerCertificate=no;Connection Timeout=30;'\r\n",
					"    conn = pyodbc.connect(conn_str)\r\n",
					"    \r\n",
					"    cursor = conn.cursor()\r\n",
					"    sql = \"SELECT ActivityName, Status FROM PipelineCheckpoints WHERE PipelineName = ?\"\r\n",
					"    cursor.execute(sql, (pipeline_name,))\r\n",
					"    rows = cursor.fetchall()\r\n",
					"    cursor.close()\r\n",
					"    conn.close()\r\n",
					"    \r\n",
					"    checkpoints = {row.ActivityName: row.Status for row in rows}\r\n",
					"    return json.dumps(checkpoints), 200\r\n",
					"\r\n",
					"# Example request payload\r\n",
					"req_payload = {\r\n",
					"    'pipelineName': 'pln_service_bus_nsip_document'\r\n",
					"}\r\n",
					"print(load_checkpoint(req_payload))\r\n",
					""
				],
				"execution_count": null
			}
		]
	}
}