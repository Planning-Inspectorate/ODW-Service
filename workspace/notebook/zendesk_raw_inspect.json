{
	"name": "zendesk_raw_inspect",
	"properties": {
		"description": "To inspect the contents of the raw data extracted from the API.",
		"folder": {
			"name": "archive/odw-raw"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "464b5578-c679-4e25-a536-4f5268819cb9"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw",
				"name": "pinssynspodw",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 32,
				"automaticScaleJobs": true
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Notebook to inspect Zendesk data in RAW extracted from the API"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"%%time\r\n",
					"import pandas as pd\r\n",
					"import pprint\r\n",
					"import json\r\n",
					"from notebookutils import mssparkutils"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Define variables"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"storage_acc_name = spark.sparkContext.environment.get('dataLakeAccountName', 'get')\r\n",
					"source = \"abfss://odw-raw@{}.dfs.core.windows.net/ZenDesk/api_data/\".format(storage_acc_name)\r\n",
					"mountPoint = \"/api_data\"\r\n",
					"linkedService = {\"linkedService\":\"ls_storage\"} # amend value in this dict accordingly\r\n",
					"jobId = mssparkutils.env.getJobId()\r\n",
					"filename = \"api-test-created.json\"\r\n",
					"file = r\"/synfs/{}{}/{}\".format(jobId, mountPoint, filename)"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Mount data lake storage"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%run /utils/py_mount_storage"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"mount_storage(path=source, mount_point=mountPoint)\r\n",
					"print(\"Storage mounted\")"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Open the file and read its contents\r\n",
					"**ALWAYS ENCODE!!**"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%%time\r\n",
					"\r\n",
					"with open(file, 'r', encoding='utf-8-sig') as datafile:\r\n",
					"    data = json.loads(datafile.read())\r\n",
					"  \r\n",
					"# we expect the file to contain a list of json objects, 1 \"ticket\" object per page of data, 100 tickets per page (apart from the last page which is <= 100 tickets)\r\n",
					"# the length of the list should give us the number of pages returned by the API\r\n",
					"\r\n",
					"print(\"Number of pages: \" + str(len(data)))"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Create a master list of all tickets and the values we want  \r\n",
					"for each of the json \"ticket\" objects we need the value which is a list of ticket properties  \r\n",
					"add the properties we want to a master list  "
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%%time\r\n",
					"\r\n",
					"ticketsList = []\r\n",
					"for page in data:\r\n",
					"    for k, v in page.items():\r\n",
					"        if k == 'tickets':\r\n",
					"            for ticket in v:\r\n",
					"                id = ticket['id']\r\n",
					"                created_at = ticket['created_at']\r\n",
					"                updated_at = ticket['updated_at']\r\n",
					"                ticketsList.append((id, created_at, updated_at))\r\n",
					"\r\n",
					"print(\"Ticket list created\")"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Create a DataFrame of the data we want to look at from the master list"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%%time\r\n",
					"\r\n",
					"df_cols = ['id', 'created_at', 'updated_at']\r\n",
					"df = pd.DataFrame(ticketsList, columns=df_cols)\r\n",
					"df = df.sort_values(by=['updated_at'], ascending=False)\r\n",
					"df.head(5)"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Check the length of the master list matches the unique values from the DataFrame"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%%time\r\n",
					"\r\n",
					"print(\"Tickets in list: \" + str(len(ticketsList)))\r\n",
					"print(\"Unique number of ticket ids: \" + str(df['id'].nunique()))"
				],
				"execution_count": null
			}
		]
	}
}