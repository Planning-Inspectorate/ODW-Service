{
	"name": "py_sb_horizon_harmonised_nsip_s51_advice",
	"properties": {
		"folder": {
			"name": "odw-harmonised"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw34",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "f6d4ff71-ba9f-4068-89e2-9811957d7aeb"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": true,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw34",
				"name": "pinssynspodw34",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw34",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#### The purpose of this pyspark notebook is to read service bus data from owb_standarsied_db.sb_appeal_document Delta table and other source tables to owb_harmonised_db.appeal_event Delta table based on existing MiPINS business logic.\n",
					"\n",
					"**Description**  \n",
					"The purpose of this pyspark notebook is to read service bus data from owb_standarsied_db.sb_appeal_document Delta table and other source tables to owb_harmonised_db.appeal_event Delta table based on existing MiPINS business logic.\n",
					"\n",
					"**Spark Cluster Configuration** -> Apache Spark Version- 3.4, Python Version \t\t- 3.10, Delta Lake Version \t- 2.4"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Import required libraries"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"from pyspark.sql.types import IntegerType, ArrayType, StructType, StructField\n",
					"from pyspark.sql import Row\n",
					"from pyspark.sql.functions import *\n",
					"from datetime import date,datetime"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Initialise Logging decorator"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%run utils/py_logging_decorator"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Initialise Application Insight Logging functions"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"%run utils/py_utils_common_logging_output"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"service_bus_table = \"odw_harmonised_db.sb_s51_advice\"\n",
					"horizon_table = \"odw_standardised_db.horizon_nsip_advice\"\n",
					"spark_table_final = \"odw_harmonised_db.nsip_s51_advice\"\n",
					"horizon_primary_key = \"advicenodeid\"\n",
					"servicebus_primary_key = \"adviceId\"\n",
					"\n",
					"start_exec_time = str(datetime.now())\n",
					"insert_count = 0\n",
					"update_count = 0\n",
					"delete_count = 0"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"servicebus_df = spark.table(service_bus_table)\n",
					"horizon_df = spark.table(horizon_table)\n",
					"horizon_latest_df = spark.sql(f\"select * from {horizon_table} where ingested_datetime = (select max(ingested_datetime) from {horizon_table})\")\n",
					"horizon_deleted = horizon_df.join(horizon_latest_df, on=horizon_primary_key, how=\"left_anti\").select(horizon_primary_key).distinct()\n",
					"harmonised_df = spark.table(spark_table_final)"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"try:\n",
					"    # Get data out of the service bus with additional fields needed for Horizon data\n",
					"    service_bus_data = spark.sql(\"\"\"\n",
					"                        SELECT DISTINCT\n",
					"                            NSIPAdviceID\n",
					"                            ,adviceId\n",
					"                            ,adviceReference\n",
					"                            ,caseId\n",
					"                            ,caseReference\n",
					"                            ,title\n",
					"                            ,titleWelsh\n",
					"                            ,from\n",
					"                            ,agent\n",
					"                            ,method\n",
					"                            ,enquiryDate\n",
					"                            ,enquiryDetails\n",
					"                            ,enquiryDetailsWelsh\n",
					"                            ,adviceGivenBy\n",
					"                            ,adviceDate\n",
					"                            ,adviceDetails\n",
					"                            ,adviceDetailsWelsh\n",
					"                            ,status\n",
					"                            ,redactionStatus\n",
					"                            ,attachmentIds\n",
					"\n",
					"                            -- Start Horizon columns\n",
					"                            ,'Yes' as Section51Advice\n",
					"                            ,CAST(NULL AS String) as EnquirerFirstName\n",
					"                            ,CAST(NULL AS String) as EnquirerLastName\n",
					"                            ,CAST(NULL AS String) as AdviceLastModified\n",
					"                            ,CAST(NULL AS String) as AttachmentCount\n",
					"                            ,CAST(NULL AS String) as AttachmentsLastModified\n",
					"                            ,CAST(NULL AS String) as LastPublishedDate\n",
					"                            ,CAST(NULL AS String) as WelshLanguage\n",
					"                            ,CAST(NULL AS String) as CaseWorkType\n",
					"                            ,CAST(NULL AS String) as AttachmentModifyDate\n",
					"                            -- End Horizon columns\n",
					"                            \n",
					"                            ,Migrated\n",
					"                            ,ODTSourceSystem\n",
					"                            ,SourceSystemID\n",
					"                            ,IngestionDate \n",
					"                            ,NULLIF(ValidTo, '') AS ValidTo\n",
					"                            ,'' as RowID\n",
					"                            ,IsActive\n",
					"                        FROM \n",
					"                            odw_harmonised_db.sb_s51_advice\n",
					"                        \"\"\")\n",
					"except Exception as e:\n",
					"        logError(f\"Error in source Service Bus SQL query odw_harmonised_db.sb_s51_advice :\\n{e}\")\n",
					"        error_message = app_insight_logger.format_error_message(e, max_length=300)\n",
					"\n",
					"        end_exec_time = str(datetime.now())\n",
					"        app_insight_logger.add_table_result(\n",
					"                    delta_table_name = spark_table_final,\n",
					"                    insert_count = insert_count, \n",
					"                    update_count = update_count, \n",
					"                    delete_count = delete_count, \n",
					"                    table_result = \"failed\",\n",
					"                    start_exec_time = start_exec_time, \n",
					"                    end_exec_time = end_exec_time,\n",
					"                    total_exec_time = \"\",\n",
					"                    error_message = error_message\n",
					"                    )\n",
					"        \n",
					"        # Exit with the JSON result\n",
					"        mssparkutils.notebook.exit(app_insight_logger.generate_processing_results())"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"try:\n",
					"    # Get data out of Horizon and matching the SB schema (with additional fields and ensure data types match)\n",
					"    horizon_data = spark.sql(f\"\"\"\n",
					"                    SELECT DISTINCT \n",
					"                            CAST(NULL AS Long) as NSIPAdviceID\n",
					"                            ,Cast(advicenodeid as integer) as adviceId\n",
					"                            ,adviceReference\n",
					"                            ,Cast(casenodeid as integer) as caseId\n",
					"                            ,caseReference\n",
					"                            ,title\n",
					"                            ,CAST(NULL AS String) as titleWelsh\n",
					"                            ,concat(enquirerfirstname,' ',enquirerlastname)  as from\n",
					"                            ,enquirerOrganisation as agent\n",
					"                            ,enqirymethod as method\n",
					"                            ,enquiryDate\n",
					"                            ,enquiry as enquiryDetails\n",
					"                            ,CAST(NULL AS String) as enquiryDetailsWelsh\n",
					"                            ,adviceFrom as adviceGivenBy\n",
					"                            ,adviceDate\n",
					"                            ,advice as adviceDetails\n",
					"                            ,CAST(NULL AS String) as adviceDetailsWelsh\n",
					"                            ,adviceStatus as status\n",
					"                            ,null as redactionStatus\n",
					"                            ,attachmentdataID as attachmentIds\n",
					"                            \n",
					"                            -- Start Horizon Fields Not in SB\n",
					"                            ,Section51Advice\n",
					"                            ,EnquirerFirstName\n",
					"                            ,EnquirerLastName\n",
					"                            ,AdviceLastModified\n",
					"                            ,AttachmentCount\n",
					"                            ,AttachmentsLastModified\n",
					"                            ,LastPublishedDate\n",
					"                            ,WelshLanguage\n",
					"                            ,CaseWorkType\n",
					"                            ,AttachmentModifyDate\n",
					"                            -- END Horizon Fields Not in SB\n",
					"\n",
					"                            ,\"0\" as Migrated\n",
					"                            ,\"Horizon\" as ODTSourceSystem\n",
					"                            ,NULL AS SourceSystemID\n",
					"                            , to_timestamp(expected_from)  AS IngestionDate\n",
					"                            ,CAST(null as string) as ValidTo -- to avoid any null descrepancies\n",
					"                            ,'' as RowID\n",
					"                            ,'Y' as IsActive\n",
					"    FROM\n",
					"        {horizon_table} AS Horizon\n",
					"    WHERE\n",
					"        ingested_datetime = ( SELECT MAX(ingested_datetime) FROM {horizon_table} )\n",
					"    \"\"\")\n",
					"\n",
					"except Exception as e:\n",
					"        logError(f\"Error in source Horizon SQL query {horizon_table}:\\n{e}\")\n",
					"        error_message = app_insight_logger.format_error_message(e, max_length=300)\n",
					"\n",
					"        end_exec_time = str(datetime.now())\n",
					"        app_insight_logger.add_table_result(\n",
					"                    delta_table_name = spark_table_final,\n",
					"                    insert_count = insert_count, \n",
					"                    update_count = update_count, \n",
					"                    delete_count = delete_count, \n",
					"                    table_result = \"failed\",\n",
					"                    start_exec_time = start_exec_time, \n",
					"                    end_exec_time = end_exec_time,\n",
					"                    total_exec_time = \"\",\n",
					"                    error_message = error_message\n",
					"                    )\n",
					"        \n",
					"        # Exit with the JSON result\n",
					"        mssparkutils.notebook.exit(app_insight_logger.generate_processing_results())"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#Establish aggregated view of attachmentIds\n",
					"horizon_attachement=horizon_data.groupBy('adviceid').agg(array_sort(array_distinct(collect_list(col('attachmentIds')))).alias(\"attachmentIds\")).orderBy(\"adviceid\")\n",
					"horizon_data = horizon_data.drop(\"attachmentIds\")\n",
					"horizon_data = horizon_data.join(horizon_attachement, on=\"adviceid\", how=\"inner\")\n",
					"# sort columns into same order as service bus\n",
					"horizon_data = horizon_data.select(service_bus_data.columns)"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"results = service_bus_data.union(horizon_data)"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Prepare data for intermediate nsip_s51_advice processing"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"try:\n",
					"    logInfo(f\"Writing {spark_table_final}\")\n",
					"    results.write.format(\"delta\").mode(\"Overwrite\").option(\"overwriteSchema\", \"true\").partitionBy(\"IsActive\").saveAsTable(f\"{spark_table_final}\")\n",
					"    logInfo(f\"Written {spark_table_final}\")\n",
					"\n",
					"except Exception as e:\n",
					"        logError(f\"Error in ingesting delta table {spark_table_final}:\\n{e}\")\n",
					"        error_message = app_insight_logger.format_error_message(e, max_length=300)\n",
					"\n",
					"        end_exec_time = str(datetime.now())\n",
					"        app_insight_logger.add_table_result(\n",
					"                    delta_table_name = spark_table_final,\n",
					"                    insert_count = insert_count, \n",
					"                    update_count = update_count, \n",
					"                    delete_count = delete_count, \n",
					"                    table_result = \"failed\",\n",
					"                    start_exec_time = start_exec_time, \n",
					"                    end_exec_time = end_exec_time,\n",
					"                    total_exec_time = \"\",\n",
					"                    error_message = error_message\n",
					"                    )\n",
					"        \n",
					"        # Exit with the JSON result\n",
					"        mssparkutils.notebook.exit(app_insight_logger.generate_processing_results())"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"\n",
					"Now need to sort internal ids, IsActive flags, and valid_to dates"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"CREATE OR REPLACE TEMPORARY VIEW vw_nsip_s51_advice_calculations_base\n",
					"AS\n",
					"SELECT  \n",
					"    row_number() OVER(PARTITION BY adviceid ORDER BY IngestionDate DESC) AS ReverseOrderProcessed\n",
					"    ,row_number() OVER(ORDER BY IngestionDate asc, adviceid asc) AS NSIPAdviceID\n",
					"    ,adviceid\n",
					"    ,IngestionDate\n",
					"    ,ValidTo\n",
					"    ,'0' AS Migrated\n",
					"    ,CASE row_number() OVER(PARTITION BY adviceid ORDER BY IngestionDate DESC)\n",
					"        WHEN 1 THEN\n",
					"            'Y'\n",
					"        ELSE\n",
					"            'N'\n",
					"    END AS IsActive                \n",
					"FROM\n",
					"    odw_harmonised_db.nsip_s51_advice"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df_calcs = spark.sql(\"\"\"\n",
					"                        SELECT\n",
					"                            CurrentRow.NSIPAdviceID\n",
					"                            ,CurrentRow.adviceid \n",
					"                            ,CurrentRow.IngestionDate\n",
					"                            ,COALESCE(NULLIF(CurrentRow.ValidTo,''), NextRow.IngestionDate) AS ValidTo\n",
					"                            ,CASE\n",
					"                                WHEN raw.adviceid IS NOT NULL THEN \n",
					"                                    \"1\"\n",
					"                                ELSE \n",
					"                                    \"0\"\n",
					"                            END AS Migrated\n",
					"                            ,CurrentRow.IsActive\n",
					"                        FROM\n",
					"                            vw_nsip_s51_advice_calculations_base AS CurrentRow\n",
					"                            LEFT OUTER JOIN vw_nsip_s51_advice_calculations_base AS NextRow\n",
					"                                ON CurrentRow.adviceid = NextRow.adviceid\n",
					"                                AND CurrentRow.ReverseOrderProcessed - 1 = NextRow.ReverseOrderProcessed\n",
					"                            LEFT OUTER JOIN (SELECT DISTINCT adviceid FROM  odw_harmonised_db.sb_s51_advice) AS Raw\n",
					"                                ON CurrentRow.adviceid = Raw.adviceid \n",
					"                            ORDER BY currentRow.ReverseOrderProcessed\n",
					"                    \"\"\")"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df_calcs =df_calcs.withColumnRenamed(\"adviceid\", \"temp_adviceid\").withColumnRenamed(\"IngestionDate\", \"temp_IngestionDate\")\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"results = spark.sql(f\"\"\"\n",
					"                    SELECT DISTINCT NSIPAdviceID\n",
					"                        ,adviceId\n",
					"                        ,adviceReference\n",
					"                        ,caseId\n",
					"                        ,caseReference\n",
					"                        ,title\n",
					"                        ,titleWelsh\n",
					"                        ,from\n",
					"                        ,agent\n",
					"                        ,method\n",
					"                        ,enquiryDate\n",
					"                        ,enquiryDetails\n",
					"                        ,enquiryDetailsWelsh\n",
					"                        ,adviceGivenBy \n",
					"                        ,adviceDate\n",
					"                        ,adviceDetails\n",
					"                        ,adviceDetailsWelsh\n",
					"                        ,status\n",
					"                        ,redactionStatus\n",
					"                        ,attachmentIds\n",
					"\n",
					"                        --Start Horizon only fields\n",
					"                        ,Section51Advice\n",
					"                        ,EnquirerFirstName\n",
					"                        ,EnquirerLastName\n",
					"                        ,AdviceLastModified\n",
					"                        ,AttachmentCount\n",
					"                        ,AttachmentsLastModified\n",
					"                        ,LastPublishedDate\n",
					"                        ,WelshLanguage\n",
					"                        ,CaseWorkType\n",
					"                        --End Horizon only fields\n",
					"\n",
					"                        ,Migrated\n",
					"                        ,ODTSourceSystem\n",
					"                        ,IngestionDate\n",
					"                        ,ValidTo\n",
					"                        ,MD5(CONCAT(\n",
					"                                    IFNULL(CAST(NSIPAdviceID AS bigint), '.')\n",
					"                                    ,IFNULL(CAST(adviceId AS integer), '.')\n",
					"                                    ,IFNULL(CAST(adviceReference AS String), '.')\n",
					"                                    ,IFNULL(CAST(caseId AS integer), '.')\n",
					"                                    ,IFNULL(CAST(caseReference AS String), '.')\n",
					"                                    ,IFNULL(CAST(title AS String), '.')\n",
					"                                    ,IFNULL(CAST(titleWelsh AS String), '.')\n",
					"                                    ,IFNULL(CAST(from AS String), '.')\n",
					"                                    ,IFNULL(CAST(agent AS String), '.')\n",
					"                                    ,IFNULL(CAST(method AS String), '.')\n",
					"                                    ,IFNULL(CAST(enquiryDate AS String), '.')\n",
					"                                    ,IFNULL(CAST(enquiryDetails AS String), '.')\n",
					"                                    ,IFNULL(CAST(enquiryDetailsWelsh AS String), '.')\n",
					"                                    ,IFNULL(CAST(adviceGivenBy AS String), '.')\n",
					"                                    ,IFNULL(CAST(adviceDate AS String), '.')\n",
					"                                    ,IFNULL(CAST(adviceDetails AS String), '.')\n",
					"                                    ,IFNULL(CAST(adviceDetailsWelsh AS String), '.')\n",
					"                                    ,IFNULL(CAST(status AS String), '.')\n",
					"                                    ,IFNULL(CAST(redactionStatus AS String), '.')\n",
					"                                    ,IFNULL(CAST(attachmentIds AS String), '.')\n",
					"\n",
					"                                    ,IFNULL(CAST(Section51Advice AS String), '.')\n",
					"                                    ,IFNULL(CAST(EnquirerFirstName AS String), '.')\n",
					"                                    ,IFNULL(CAST(EnquirerLastName AS String), '.')\n",
					"                                    ,IFNULL(CAST(AdviceLastModified AS String), '.')\n",
					"                                    ,IFNULL(CAST(AttachmentCount AS String), '.')\n",
					"                                    ,IFNULL(CAST(AttachmentsLastModified AS String), '.')\n",
					"                                    ,IFNULL(CAST(LastPublishedDate AS String), '.')\n",
					"                                    ,IFNULL(CAST(WelshLanguage AS String), '.')\n",
					"                                    ,IFNULL(CAST(CaseWorkType AS String), '.')\n",
					"\n",
					"                                    ,IFNULL(CAST(Migrated AS String), '.')\n",
					"                                    ,IFNULL(CAST(ODTSourceSystem AS String), '.')\n",
					"                                    ,IFNULL(CAST(IngestionDate AS String), '.')\n",
					"                                    ,IFNULL(CAST(ValidTo AS String), '.')\n",
					"                            )\n",
					"                        ) AS RowID\n",
					"                        ,IsActive\n",
					"    FROM \n",
					"        {spark_table_final}\"\"\")\n",
					"    "
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"columns = results.columns\n",
					"results = results.drop(\"NSIPAdviceID\", \"ValidTo\", \"Migrated\", \"IsActive\")"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"logInfo(f\"Merging to {spark_table_final}\")\n",
					"final_df = results.join(df_calcs, (df_calcs[\"temp_adviceid\"] == results[\"adviceid\"]) & (df_calcs[\"temp_IngestionDate\"] == results[\"IngestionDate\"])).select(columns)\n",
					"logInfo(f\"Dropping duplicates from {spark_table_final}\")\n",
					"final_df = final_df.drop_duplicates()"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Remove deleted Horizon data and clean up flags"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"# Get deleted primary keys into a list\n",
					"deleted_ids = [row[0] for row in horizon_deleted.collect()]\n",
					"\n",
					"# Set IsActive to N if the primary key has been deleted from Horizon\n",
					"hrm_updated = final_df.withColumn(\n",
					"    \"IsActive\", when(col(\"adviceId\").isin(deleted_ids), \"N\").otherwise(col(\"IsActive\"))\n",
					")\n",
					"\n",
					"# Set ValidTo to null if IsActive = Y\n",
					"hrm_updated = hrm_updated.withColumn(\n",
					"    \"ValidTo\", when(col(\"IsActive\") == \"Y\", None).otherwise(col(\"ValidTo\"))\n",
					")\n",
					"\n",
					"# Set ValidTo if IsActive = N to the IngestionDate + 1 day\n",
					"hrm_final = hrm_updated.withColumn(\n",
					"    \"ValidTo\", when((col(\"ValidTo\").isNull()) & (col(\"IsActive\") == \"N\"), date_add(col(\"IngestionDate\"), 1).cast(\"timestamp\")).otherwise(col(\"ValidTo\"))\n",
					")\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Ingest final data set to delta table nsip_s51_advice"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"try:\n",
					"    \n",
					"    insert_count = final_df.count()\n",
					"    logInfo(f\"Writing to final {spark_table_final}\")\n",
					"    hrm_final.write.format(\"delta\").mode(\"Overwrite\").option(\"overwriteSchema\", \"true\").partitionBy(\"IsActive\").saveAsTable(f\"{spark_table_final}\")\n",
					"    \n",
					"    end_exec_time = str(datetime.now())\n",
					"    logInfo(f\"Written to final {spark_table_final}\")\n",
					"    \n",
					"    app_insight_logger.add_table_result(                    \n",
					"                            delta_table_name = spark_table_final,\n",
					"                            insert_count = insert_count, \n",
					"                            update_count = update_count, \n",
					"                            delete_count = delete_count, \n",
					"                            table_result = \"success\",\n",
					"                            start_exec_time = start_exec_time, \n",
					"                            end_exec_time = end_exec_time,\n",
					"                            total_exec_time = \"\",\n",
					"                            error_message = \"\"\n",
					"                            )\n",
					"except Exception as e:\n",
					"        logError(f\"Error in ingesting delta table in the final step {spark_table_final}:\\n{e}\")\n",
					"        error_message = app_insight_logger.format_error_message(e, max_length=300)\n",
					"        \n",
					"        end_exec_time = str(datetime.now())\n",
					"        app_insight_logger.add_table_result(\n",
					"                    delta_table_name = spark_table_final,\n",
					"                    insert_count = insert_count, \n",
					"                    update_count = update_count, \n",
					"                    delete_count = delete_count, \n",
					"                    table_result = \"failed\",\n",
					"                    start_exec_time = start_exec_time, \n",
					"                    end_exec_time = end_exec_time,\n",
					"                    total_exec_time = \"\",\n",
					"                    error_message = error_message\n",
					"                    )\n",
					"        \n",
					"        # Exit with the JSON result\n",
					"        mssparkutils.notebook.exit(app_insight_logger.generate_processing_results())"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Produce Json formatted output"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"# Exit with the JSON result\n",
					"mssparkutils.notebook.exit(app_insight_logger.generate_processing_results())"
				],
				"execution_count": null
			}
		]
	}
}