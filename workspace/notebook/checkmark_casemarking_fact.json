{
	"name": "checkmark_casemarking_fact",
	"properties": {
		"folder": {
			"name": "archive/odw-harmonised/Checkmark"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw34",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "7aa8720c-4fd2-4c58-9950-14868a5a8677"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw34",
				"name": "pinssynspodw34",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw34",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Check for new, updated or deleted data\r\n",
					"- This script checks for new, updated or deleted data by checking the source data (sap hr) against the target (odw_harmonised_db.checkmark_casemarking_fact)\r\n",
					"- **New Data:** where a Pers_No in the source does not exist as an EmployeeNumber in the target. NewData flag is set to 'Y'\r\n",
					"- **Updated data:** Comparison occurs on Pers_No in source and EmployeeNumber in target where the row hash is different i.e. there is a change in one of the columns. NewData flag is set to 'Y'\r\n",
					"- **Deleted data:** where an EmployeeNumber in the target exists but the same Pers_No doesn't exist in the source. DeletedData flag is set to 'Y'\r\n",
					"\r\n",
					"## View checkmark_casemarking_fact_new is created"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql  \r\n",
					"\r\n",
					"-- Gets modified or deleted from source rows\r\n",
					"\r\n",
					"CREATE OR REPLACE TEMPORARY VIEW checkmark_casemarking_fact_new \r\n",
					"\r\n",
					"    AS\r\n",
					"\r\n",
					"-- gets data that matches of CaseReference and flags that it is modified based on a row (md5) hash. Flags as \"NewData\"\r\n",
					"-- gets data that is in the target but not in source. Flags as \"DeletedData\"\r\n",
					"\r\n",
					"SELECT\r\n",
					"    CASE\r\n",
					"        WHEN T1.CaseReference IS NULL\r\n",
					"        THEN T5.CasemarkingFactID\r\n",
					"        ELSE NULL\r\n",
					"    END                             AS CasemarkingFactID, -- surrogate \r\n",
					"    T1.CasemarkingDimID             AS CasemarkingDimID,\r\n",
					"    T1.InvalidNullity               AS InvalidNullityReferenceID,\r\n",
					"    T1.StructureReasoningDetail     AS StructureReasoningReferenceID,\r\n",
					"    T1.Complexity                   AS ComplexityReferenceID,\r\n",
					"    T1.PresentationAccuracyDetail   AS PresentationAccuracyReferenceID,\r\n",
					"    T1.Outcome                      AS OutcomeReferenceID,\r\n",
					"    T1.GroundAIITLevel              AS GroundsReferenceID,\r\n",
					"    T1.ConditionsDetail             AS ConditionsReferenceID,\r\n",
					"    T1.CoverageDetail               AS CoverageReferenceID ,\r\n",
					"    T1.CaseReference                AS CaseReference, \r\n",
					"    T2.SourceSystemID               AS SourceSystemID,\r\n",
					"    to_timestamp(T1.IngestionDate)  AS IngestionDate,\r\n",
					"    NULL                            AS ValidTo,\r\n",
					"    md5(\r\n",
					"        concat(\r\n",
					"            IFNULL(T1.CasemarkingDimID,'.'), \r\n",
					"            IFNULL(T1.CaseReference,'.'), \r\n",
					"            IFNULL(T1.InvalidNullity ,'.'),\r\n",
					"            IFNULL(T1.StructureReasoningDetail,'.'),\r\n",
					"            IFNULL(T1.Complexity,'.'),\r\n",
					"            IFNULL(T1.PresentationAccuracyDetail,'.'),\r\n",
					"            IFNULL(T1.Outcome,'.'),\r\n",
					"            IFNULL(T1.GroundAIITLevel,'.'),\r\n",
					"            IFNULL(T1.ConditionsDetail,'.'),\r\n",
					"            IFNULL(T1.CoverageDetail,'.')\r\n",
					"        )\r\n",
					"    )                               AS RowID,\r\n",
					"    'Y'                             AS IsActive,\r\n",
					"    T1.IsActive                     AS HistoricIsActive\r\n",
					"\r\n",
					"FROM odw_harmonised_db.checkmark_casemarking_dim T1\r\n",
					"LEFT JOIN odw_harmonised_db.main_sourcesystem_fact T2 \r\n",
					"    ON \"SAP HR\" = T2.Description \r\n",
					"        AND T2.IsActive = 'Y'\r\n",
					"FULL JOIN odw_harmonised_db.checkmark_casemarking_fact T5 \r\n",
					"    ON T1.CaseReference = T5.CaseReference \r\n",
					"        AND T1.IsActive = 'Y'\r\n",
					"LEFT JOIN odw_harmonised_db.checkmark_invalid_nullity_reference_dim TINV \r\n",
					"    ON TINV.InvalidNullityReferenceID = T5.InvalidNullityReferenceID \r\n",
					"        AND T5.IsActive = 'Y'\r\n",
					"LEFT JOIN odw_harmonised_db.checkmark_structure_reasoning_detail_reference_dim TSRRD \r\n",
					"    ON TSRRD.StructureReasoningDetailReferenceID = T5.StructureReasoningReferenceID \r\n",
					"        AND T5.IsActive = 'Y'\r\n",
					"LEFT JOIN odw_harmonised_db.checkmark_complexity_reference_dim TCOMP \r\n",
					"    ON TCOMP.ComplexityReferenceID = T5.ComplexityReferenceID \r\n",
					"        AND T5.IsActive = 'Y'\r\n",
					"LEFT JOIN odw_harmonised_db.checkmark_presentation_accuracy_detail_reference_dim TPADR \r\n",
					"    ON TPADR.PresentationAccuracyDetailReferenceID = T5.PresentationAccuracyReferenceID \r\n",
					"        AND T5.IsActive = 'Y'\r\n",
					"LEFT JOIN odw_harmonised_db.checkmark_outcome_reference_dim TOR \r\n",
					"    ON TOR.OutcomeReferenceID = T5.OutcomeReferenceID \r\n",
					"        AND T5.IsActive = 'Y'\r\n",
					"LEFT JOIN odw_harmonised_db.checkmark_grounds_reference_dim TGR \r\n",
					"    ON TGR.GroundsReferenceID = T5.GroundsReferenceID \r\n",
					"        AND T5.IsActive = 'Y'\r\n",
					"LEFT JOIN odw_harmonised_db.checkmark_conditions_reference_dim TCON \r\n",
					"    ON TCON.ConditionsReferenceID = T5.ConditionsReferenceID \r\n",
					"        AND T5.IsActive = 'Y'\r\n",
					"LEFT JOIN odw_harmonised_db.checkmark_coverage_reference_dim TCOV \r\n",
					"    ON TCOV.CoverageReferenceID = T5.CoverageReferenceID \r\n",
					"        AND T5.IsActive = 'Y'\r\n",
					"\r\n",
					"WHERE\r\n",
					"    -- flags new data        \r\n",
					"    (CASE\r\n",
					"        WHEN T1.CaseReference = T5.CaseReference \r\n",
					"            AND md5(\r\n",
					"                concat(\r\n",
					"                    IFNULL(T1.CasemarkingDimID,'.'), \r\n",
					"            IFNULL(T1.CaseReference,'.'), \r\n",
					"            IFNULL(T1.InvalidNullity ,'.'),\r\n",
					"            IFNULL(T1.StructureReasoningDetail,'.'),\r\n",
					"            IFNULL(T1.Complexity,'.'),\r\n",
					"            IFNULL(T1.PresentationAccuracyDetail,'.'),\r\n",
					"            IFNULL(T1.Outcome,'.'),\r\n",
					"            IFNULL(T1.GroundAIITLevel,'.'),\r\n",
					"            IFNULL(T1.ConditionsDetail,'.'),\r\n",
					"            IFNULL(T1.CoverageDetail,'.'))) <> T5.RowID    -- same employee, changed data\r\n",
					"        THEN 'Y'\r\n",
					"        WHEN T5.CaseReference IS NULL -- new employee\r\n",
					"        THEN 'Y'\r\n",
					"        ELSE 'N'\r\n",
					"    END  = 'Y' )\r\n",
					"    AND T1.CaseReference IS NOT NULL\r\n",
					"    AND T1.IngestionDate = (SELECT MAX(IngestionDate) FROM odw_harmonised_db.checkmark_casemarking_dim)\r\n",
					";"
				],
				"execution_count": 8
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Dataset is created that contains changed data and corresponding target data\r\n",
					"- This script combines data that has been updated, Deleted or is new, with corresponding target data\r\n",
					"- View **checkmark_casemarking_fact_new** is unioned to the target data filter to only those rows where changes have been detected\r\n",
					"## View checkmark_casemarking_fact_changed_rows is created"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"\r\n",
					"-- Create new and updated dataset\r\n",
					"\r\n",
					"CREATE OR REPLACE TEMPORARY VIEW checkmark_casemarking_fact_changed_rows\r\n",
					"\r\n",
					"    AS\r\n",
					"\r\n",
					"-- gets updated, deleted and new rows \r\n",
					"\r\n",
					"Select \r\n",
					"    CasemarkingFactID, -- surrogate \r\n",
					"    CasemarkingDimID,\r\n",
					"    InvalidNullityReferenceID,\r\n",
					"    StructureReasoningReferenceID,\r\n",
					"    ComplexityReferenceID,\r\n",
					"    PresentationAccuracyReferenceID,\r\n",
					"    OutcomeReferenceID,\r\n",
					"    GroundsReferenceID,\r\n",
					"    ConditionsReferenceID,\r\n",
					"    CoverageReferenceID ,\r\n",
					"    CaseReference, -- source system id\r\n",
					"    SourceSystemID,\r\n",
					"    IngestionDate,\r\n",
					"    ValidTo,\r\n",
					"    RowID,\r\n",
					"    IsActive\r\n",
					"From checkmark_casemarking_fact_new WHERE HistoricIsActive = 'Y' or HistoricIsActive IS NULL\r\n",
					"\r\n",
					"    UNION ALL\r\n",
					"\r\n",
					"-- gets original versions of updated rows so we can update EndDate and set IsActive flag to 'N'\r\n",
					"\r\n",
					"SELECT\r\n",
					"    CasemarkingFactID,\r\n",
					"    CasemarkingDimID,\r\n",
					"    InvalidNullityReferenceID,\r\n",
					"    StructureReasoningReferenceID,\r\n",
					"    ComplexityReferenceID,\r\n",
					"    PresentationAccuracyReferenceID,\r\n",
					"    OutcomeReferenceID,\r\n",
					"    GroundsReferenceID,\r\n",
					"    ConditionsReferenceID,\r\n",
					"    CoverageReferenceID ,\r\n",
					"    CaseReference, \r\n",
					"    SourceSystemID,\r\n",
					"    IngestionDate,\r\n",
					"    ValidTo,\r\n",
					"    RowID,\r\n",
					"    IsActive\r\n",
					"FROM odw_harmonised_db.checkmark_casemarking_fact\r\n",
					"WHERE CaseReference IN (SELECT CaseReference FROM checkmark_casemarking_fact_new WHERE CasemarkingFactID IS NULL) AND IsActive = 'Y';\r\n",
					""
				],
				"execution_count": 9
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"\n",
					"CREATE OR REPLACE TEMPORARY VIEW Loading_month\n",
					"\n",
					"    AS\n",
					"\n",
					"SELECT DISTINCT\n",
					"    IngestionDate AS IngestionDate,\n",
					"    to_timestamp(date_sub(IngestionDate,1)) AS ClosingDate,\n",
					"    'Y' AS IsActive\n",
					"\n",
					"FROM checkmark_casemarking_fact_new;\n",
					"\n",
					"CREATE OR REPLACE TEMPORARY VIEW checkmark_casemarking_fact_changed_rows_final\n",
					"\n",
					"    AS\n",
					"\n",
					"SELECT \n",
					"    CasemarkingFactID,\n",
					"    CasemarkingDimID,\n",
					"    InvalidNullityReferenceID,\n",
					"    StructureReasoningReferenceID,\n",
					"    ComplexityReferenceID,\n",
					"    PresentationAccuracyReferenceID,\n",
					"    OutcomeReferenceID,\n",
					"    GroundsReferenceID,\n",
					"    ConditionsReferenceID,\n",
					"    CoverageReferenceID ,\n",
					"    CaseReference, \n",
					"    T1.SourceSystemID,\n",
					"    T1.IngestionDate,\n",
					"    T1.ValidTo,\n",
					"    T1.RowID,\n",
					"    T1.IsActive,\n",
					"    T2.ClosingDate\n",
					"FROM checkmark_casemarking_fact_changed_rows T1\n",
					"FULL JOIN Loading_month T2 ON T1.IsActive = T2.IsActive"
				],
				"execution_count": 10
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# View checkmark_casemarking_fact_changed_rows is used in a merge (Upsert) statement into the target table\r\n",
					"- **WHEN MATCHED** ON the Business Key (i.e. Pers_No from SAP HR), EndDate is set to today -1 day and the IsActive flag is set to 'N'\r\n",
					"- **WHEN NOT MATCHED** ON the business key, insert rows\r\n",
					"## Table checkmark_casemarking_fact.employee_dim is updated"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"-- merge into fact table\r\n",
					"\r\n",
					"MERGE INTO odw_harmonised_db.checkmark_casemarking_fact AS Target\r\n",
					"USING checkmark_casemarking_fact_changed_rows_final AS Source\r\n",
					"\r\n",
					"ON Source.CasemarkingFactID = Target.CasemarkingFactID\r\n",
					"\r\n",
					"-- For Updates existing rows\r\n",
					"\r\n",
					"WHEN MATCHED\r\n",
					"    THEN \r\n",
					"    UPDATE SET\r\n",
					"    Target.ValidTo = to_timestamp(ClosingDate),\r\n",
					"    Target.IsActive = 'N'\r\n",
					"\r\n",
					"-- Insert completely new rows\r\n",
					"WHEN NOT MATCHED \r\n",
					"    THEN INSERT (CasemarkingFactID,\r\n",
					"        CasemarkingDimID,\r\n",
					"        InvalidNullityReferenceID,\r\n",
					"        StructureReasoningReferenceID,\r\n",
					"        ComplexityReferenceID,\r\n",
					"        PresentationAccuracyReferenceID,\r\n",
					"        OutcomeReferenceID,\r\n",
					"        GroundsReferenceID,\r\n",
					"        ConditionsReferenceID,\r\n",
					"        CoverageReferenceID ,\r\n",
					"        CaseReference,\r\n",
					"        SourceSystemID,\r\n",
					"        IngestionDate,\r\n",
					"        ValidTo,\r\n",
					"        RowID,\r\n",
					"        IsActive)  \r\n",
					"        VALUES (Source.CasemarkingFactID,\r\n",
					"        Source.CasemarkingDimID,\r\n",
					"        Source.InvalidNullityReferenceID,\r\n",
					"        Source.StructureReasoningReferenceID,\r\n",
					"        Source.ComplexityReferenceID,\r\n",
					"        Source.PresentationAccuracyReferenceID,\r\n",
					"        Source.OutcomeReferenceID,\r\n",
					"        Source.GroundsReferenceID,\r\n",
					"        Source.ConditionsReferenceID,\r\n",
					"        Source.CoverageReferenceID ,\r\n",
					"        Source.CaseReference,\r\n",
					"        Source.SourceSystemID, \r\n",
					"        Source.IngestionDate, \r\n",
					"        Source.ValidTo, \r\n",
					"        Source.RowID, \r\n",
					"        Source.IsActive) \r\n",
					";\r\n",
					""
				],
				"execution_count": 11
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Fix the IDs\r\n",
					"- No auto-increment feature is available in delta tables, therefore we need to create new IDs for the inserted rows\r\n",
					"- This is done by select the target data and using INSERT OVERWRITE to re-insert the data is a new Row Number\r\n",
					"## Table odw_harmonised.checkmark_casemarking_fact is updated"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"-- Insert new CasemarkingFactID\r\n",
					"\r\n",
					"INSERT OVERWRITE odw_harmonised_db.checkmark_casemarking_fact\r\n",
					"\r\n",
					"SELECT \r\n",
					"    ROW_NUMBER() OVER (ORDER BY CasemarkingFactID NULLS LAST) AS CasemarkingFactID, -- surrogate key\r\n",
					"    CasemarkingDimID,\r\n",
					"    InvalidNullityReferenceID,\r\n",
					"    StructureReasoningReferenceID,\r\n",
					"    ComplexityReferenceID,\r\n",
					"    PresentationAccuracyReferenceID,\r\n",
					"    OutcomeReferenceID,\r\n",
					"    GroundsReferenceID,\r\n",
					"    ConditionsReferenceID,\r\n",
					"    CoverageReferenceID ,\r\n",
					"    CaseReference, -- source system id\r\n",
					"    SourceSystemID,\r\n",
					"    IngestionDate,\r\n",
					"    ValidTo,\r\n",
					"    RowID,\r\n",
					"    IsActive\r\n",
					"FROM odw_harmonised_db.checkmark_casemarking_fact;"
				],
				"execution_count": 12
			}
		]
	}
}