{
	"name": "py_1_raw_to_standardised_hr_main",
	"properties": {
		"folder": {
			"name": "1-odw-raw-to-standardised/Fileshare/SAP_HR"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "97bdf494-2075-41c7-8d5d-c72580f2c6ea"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": true,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw",
				"name": "pinssynspodw",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.2",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"%run \"1-odw-raw-to-standardised/Fileshare/SAP_HR/py_1_raw_to_standardised_hr_functions\""
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"storage_acc = mssparkutils.notebook.run('/utils/py_utils_get_storage_account') # ends in / \r\n",
					"linked_service = \"ls_storage\"\r\n",
					"db_name = \"odw_standardised_db\"\r\n",
					"\r\n",
					"raw_container = \"abfss://temp-sap-hr-data@\" + storage_acc\r\n",
					"raw_source_folder = \"\"\r\n",
					"raw_name = \"Addresses - 20221107_chris_changes.xlsx\"\r\n",
					"\r\n",
					"delta_lake_table_name = \"addresses\"\r\n",
					"standardised_container = 'abfss://odw-standardised@' + storage_acc\r\n",
					"standardised_source_folder = \"HR/\" + delta_lake_table_name + \"/\"\r\n",
					"standardised_name = raw_name.split(\".xlsx\")[0] + '.snappy.parquet'\r\n",
					"\r\n",
					"\r\n",
					"sheet_name = 0\r\n",
					"header_row = 0"
				],
				"execution_count": 87
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import pandas as pd\r\n",
					"from notebookutils import mssparkutils\r\n",
					"jobId = mssparkutils.env.getJobId()\r\n",
					"mssparkutils.fs.unmount(\"/temp_raw\") \r\n",
					"mssparkutils.fs.mount( \r\n",
					"raw_container + raw_source_folder, \r\n",
					"\"/temp_raw\", \r\n",
					"{\"linkedService\":\"ls_storage\"} \r\n",
					")   \r\n",
					"df = pd.read_excel(f\"/synfs/{jobId}/temp_raw/{raw_name}\", dtype=str)\r\n",
					"df2nostr = pd.read_excel(f\"/synfs/{jobId}/temp_raw/{raw_name}\")\r\n",
					"mssparkutils.fs.unmount(\"/temp_raw\") "
				],
				"execution_count": 88
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# test = pd.DataFrame({'col1': [1, 2], 'col2': [3, 4]})\r\n",
					"# test['col1'][0]"
				],
				"execution_count": 52
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df.dtypes"
				],
				"execution_count": 44
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df2nostr.info()"
				],
				"execution_count": 82
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.sql.types import StructType\r\n",
					"import json\r\n",
					"schmjson = spark.read.text(\"abfss://odw-config@pinsstodwdevuks9h80mb.dfs.core.windows.net/standardised_table_definitions/addresses.JSON\", wholetext=True).first().value\r\n",
					"schema = StructType.fromJson(json.loads(schmjson))"
				],
				"execution_count": 89
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"for field in json.loads(schmjson)['fields']:\r\n",
					"    print(field['name'])"
				],
				"execution_count": 58
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.sql import SparkSession\r\n",
					"spark = SparkSession.builder.getOrCreate()\r\n",
					"from datetime import datetime\r\n",
					"# df['process_datetime'] = datetime.now() \r\n",
					"# df['expected_from']= datetime.now() \r\n",
					"# df['expected_to'] = datetime.now() \r\n",
					"sparkDF=spark.createDataFrame(df)\r\n",
					"from pyspark.sql.functions import lit\r\n",
					"sparkDF = sparkDF.withColumn(\"ingested_datetime\",lit(datetime.now()))\r\n",
					"sparkDF = sparkDF.withColumn(\"expected_from\",lit(datetime.now()))\r\n",
					"sparkDF = sparkDF.withColumn(\"expected_to\",lit(datetime.now()))"
				],
				"execution_count": 90
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"sparkDF.printSchema()"
				],
				"execution_count": 28
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import re\r\n",
					"cols_orig = sparkDF.schema.names\r\n",
					"cols=[re.sub(\"( |\\#|\\# |\\.|\\(|\\)|\\/)\",\"_\",i) for i in cols_orig] # replace chars with _\r\n",
					"cols=[re.sub(\"([\\_]{2,})\",\"_\",i) for i in cols] #replace consecutive _ with one _\r\n",
					"cols=[re.sub(\"(\\_)$\",\"\",i) for i in cols] #remove trailing _\r\n",
					"cols = [item.replace(',','').lower() for item in cols]\r\n",
					"for colix in range(len(cols_orig)):\r\n",
					"    sparkDF = sparkDF.withColumnRenamed(cols_orig[colix], cols[colix])"
				],
				"execution_count": 91
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import re\r\n",
					"cols_orig2 = [\"Region (State, Province, Count)\"]\r\n",
					"cols2=[re.sub(\"( |\\#|\\# |\\.|\\(|\\)|\\/)\",\"_\",i) for i in cols_orig2] # replace chars with _\r\n",
					"cols2=[re.sub(\"([\\_]{2,})\",\"_\",i) for i in cols2] #replace consecutive _ with one _\r\n",
					"cols2=[re.sub(\"(\\_)$\",\"\",i) for i in cols2] #remove trailing _\r\n",
					"cols2 = [item.replace(',','').lower() for item in cols2]\r\n",
					"cols2"
				],
				"execution_count": 5
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"type(sparkDF.head()['ingested_datetime'])"
				],
				"execution_count": 32
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.sql.functions import col\r\n",
					"from pyspark.sql.types import StringType,BooleanType,DateType,TimestampType,IntegerType\r\n",
					"mapping = {\r\n",
					"    'string': StringType(),\r\n",
					"    'timestamp': TimestampType(),\r\n",
					"    'integer': IntegerType()\r\n",
					"}\r\n",
					"\r\n",
					"for field in json.loads(schmjson)['fields']:\r\n",
					"    sparkDF = sparkDF.withColumn(field['name'], col(field['name']).cast(mapping[field['type']]))\r\n",
					"colheaders = []\r\n",
					"for field in json.loads(schmjson)['fields']:\r\n",
					"    colheaders.append(field['name'])\r\n",
					"sparkDF = sparkDF.select(colheaders)\r\n",
					"# sparkDF = df.withColumn(\"age\",col(\"age\").cast(StringType())) \\\r\n",
					"#     .withColumn(\"isGraduated\",col(\"isGraduated\").cast(BooleanType())) \\\r\n",
					"#     .withColumn(\"jobStartDate\",col(\"jobStartDate\").cast(DateType()))\r\n",
					"# df2.printSchema()"
				],
				"execution_count": 92
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					""
				],
				"execution_count": 93
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"sparkDF2 = spark.createDataFrame(sparkDF.rdd, schema=schema)"
				],
				"execution_count": 94
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"sparkDF.rdd.first()"
				],
				"execution_count": 69
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# .distinct().select(\"\").show()\r\n",
					"sparkDF.dropDuplicates([\"ingested_datetime\"]).head()"
				],
				"execution_count": 39
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"sparkDF2.show()"
				],
				"execution_count": 95
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"sparkDF2.head()"
				],
				"execution_count": 63
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"sparkDF.write.option(\"mergeSchema\", \"false\").format('delta').save(standardised_container+standardised_source_folder+standardised_name)"
				],
				"execution_count": 48
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"target_loc = standardised_container+standardised_source_folder+standardised_name\r\n",
					"spark.sql(f\"CREATE TABLE odw_standardised_db.personal_characteristics USING DELTA LOCATION '{target_loc}'\")"
				],
				"execution_count": 49
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"spark.sql(\"select * from odw_standardised_db.personal_characteristics\")"
				],
				"execution_count": 50
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"validate_parameters(storage_acc, raw_container, raw_source_folder, raw_name, standardised_container, standardised_source_folder, standardised_name, linked_service, sheet_name=0, header_row=0)\r\n",
					"ingest_excel_to_parquet(storage_acc, raw_container, raw_source_folder, raw_name, standardised_container, standardised_source_folder, standardised_name, linked_service)\r\n",
					"enable_delta_on_parquet(standardised_container, standardised_source_folder)\r\n",
					"lakedb_table_sparksql(db_name,delta_lake_table_name,standardised_container, standardised_source_folder)\r\n",
					""
				],
				"execution_count": 19
			}
		]
	}
}