{
	"name": "py_convert_json_to_csv",
	"properties": {
		"folder": {
			"name": "utils"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "56g",
			"driverCores": 8,
			"executorMemory": "56g",
			"executorCores": 8,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "1fe877a3-f4be-45b8-9fad-213fb6915c36"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw",
				"name": "pinssynspodw",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from notebookutils import mssparkutils\r\n",
					"### mount the data lake storage in Synapse to the Synapse File Mount API\r\n",
					"jobId = mssparkutils.env.getJobId()\r\n",
					"storage_acc_name = spark.sparkContext.environment.get('dataLakeAccountName', 'get')\r\n",
					"mssparkutils.fs.unmount(\"/ims_items\") \r\n",
					"mssparkutils.fs.mount( \r\n",
					"\"abfss://odw-raw@\"+storage_acc_name+\".dfs.core.windows.net/IMS/API-Data/\",\r\n",
					"\"/ims_items\", \r\n",
					"{\"linkedService\":\"ls_storage\"} \r\n",
					")   "
				],
				"execution_count": 3
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import json\r\n",
					"import pandas as pd\r\n",
					"import csv\r\n",
					"with open(f\"/synfs/{jobId}/ims_items/IMS_ropa.json\", \"r\",encoding='utf-8') as inputfile:\r\n",
					"    ims_dict = json.load(inputfile)\r\n",
					"    # print(ims_dict)\r\n",
					"    # print(ims_dict[\"data\"])\r\n",
					"    for items in ims_dict[\"data\"]:\r\n",
					"        df = items['attributes']\r\n",
					"        # print(df)\r\n",
					"        with open(f\"/synfs/{jobId}/ims_items/IMS_ropa.csv\", 'w', encoding='UTF8') as f:\r\n",
					"            writer = csv.writer(f)\r\n",
					"\r\n",
					"            # write the header\r\n",
					"            writer.writerow(items['attributes'].keys())\r\n",
					"\r\n",
					"            # write the data\r\n",
					"            writer.writerow(items['attributes'].values())\r\n",
					"\r\n",
					"# df.to_csv('IMS_ropa.csv', encoding='utf-8', index=False)\r\n",
					"with open(f\"/synfs/{jobId}/ims_items/IMS_ropa.csv\", \"r\",encoding='utf-8') as outputfile:\r\n",
					"    ims_csv = csv.load(outputfile)\r\n",
					"    print(ims_csv)\r\n",
					""
				],
				"execution_count": 18
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import json\r\n",
					"import pandas as pd\r\n",
					"import csv\r\n",
					"with open(f\"/synfs/{jobId}/ims_items/IMS_ropa.json\", \"r\",encoding='utf-8') as inputfile:\r\n",
					"    ims_dict = json.load(inputfile)\r\n",
					"    # print(ims_dict)\r\n",
					"    # print(ims_dict[\"data\"])\r\n",
					"    for items in ims_dict[\"data\"]:\r\n",
					"        df = items['attributes']\r\n",
					"        # print(df)\r\n",
					"        fieldnames = ['name', 'date_entered', 'date_modified', 'modified_user_id', 'modified_by_name', 'created_by', 'created_by_name', 'description', 'deleted', 'created_by_link', 'modified_user_link', 'assigned_user_id', 'assigned_user_name', 'assigned_user_link', 'SecurityGroups', 'ims_ropa_number', 'type', 'status', 'priority', 'resolution', 'work_log', 'organisation_areas_c', 'data_controllers_c', 'joint_controller_c', 'categories_of_personal_data_c', 'categories_of_recipients_c', 'security_measures_c', 'third_country_names_c', 'third_country_safeguards_c', 'legitimate_interest_c', 'automated_decision_making_c', 'data_source_c', 'records_of_consent_c', 'location_of_data_c', 'dpia_required_c', 'dpia_status_c', 'retention_policy_c', 'retention_policy_applied_c', 'data_breach_record_c', 'retention_not_adhered_c', 'privacy_notice_c', 'categories_of_individuals_c', 'ropa_num_container_c', 'help', 'retention_schedule', 'business_function', 'dpo', 'data_breach_occurred_c', 'last_current_and_accurate_da_c', 'gdpr_lawful_basis_c', 'gdpr_special_category_conditio', 'dpa_2018_sch1_condition_c', 'rights_of_the_data_subject_c', 'business_function_unstructured', 'bdc_entity_temp_c', 'cat_of_individuals_temp_c', 'ims_ropa_ims_integration_1', 'ims_ropa_documents_1', 'estimated_number_of_operator_c', 'user_id_c', 'user_id1_c', 'gdpr_lawful_basis_ms_c', 'gdpr_special_cat_condition_m_c', 'rights_of_data_subject_table_c', 'dpa_2018_sch1_condition_ms_c', 'information_expert_c', 'information_owner_c']\r\n",
					"        rows= items['attributes']\r\n",
					"        \r\n",
					"        with open(f\"/synfs/{jobId}/ims_items/IMS_ropa.csv\", 'w', encoding='UTF8',newline='') as f:\r\n",
					"            writer = csv.DictWriter(f, fieldnames=fieldnames)\r\n",
					"            writer.writeheader()\r\n",
					"            # writer.writerows(rows)\r\n",
					"\r\n",
					"# df.to_csv('IMS_ropa.csv', encoding='utf-8', index=False)\r\n",
					"\r\n",
					""
				],
				"execution_count": 36
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# with open(f\"/synfs/{jobId}/ims_items/IMS_ropa.csv\", \"r\",encoding='utf-8') as outputfile:\r\n",
					"#     ims_csv = csv.reader(outputfile)\r\n",
					"#     for row in ims_csv:\r\n",
					"#         # print(row)"
				],
				"execution_count": 37
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"data = pd.read_csv(f\"/synfs/{jobId}/ims_items/IMS_ropa.csv\")\r\n",
					"print(data)"
				],
				"execution_count": 38
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import json\r\n",
					"import pandas as pd\r\n",
					"import csv\r\n",
					"with open(f\"/synfs/{jobId}/ims_items/IMS_ropa.json\", \"r\",encoding='utf-8') as inputfile:\r\n",
					"    ims_dict = json.load(inputfile)\r\n",
					"    for items in ims_dict[\"data\"]:\r\n",
					"        dict = items['attributes']"
				],
				"execution_count": null
			}
		]
	}
}