{
	"name": "py_utils_log_main_pipeline_logs",
	"properties": {
		"folder": {
			"name": "utils/main"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "1f43c497-3363-4b74-9f3a-68b843a93bd8"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw",
				"name": "pinssynspodw",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"from pyspark.sql import SparkSession\n",
					"from notebookutils import mssparkutils\n",
					"from pyspark.sql.functions import lit, row_number\n",
					"from pyspark.sql import DataFrame\n",
					"from pyspark.sql.functions import *\n",
					"from pyspark.sql.window import Window\n",
					"from pyspark.sql.types import IntegerType\n",
					"\n",
					"\n",
					"import subprocess\n",
					"subprocess.run([\"pip\", \"install\", \"--quiet\", \"tenacity\"])\n",
					"from tenacity import retry, wait_fixed, wait_exponential, stop_after_attempt, RetryCallState\n",
					"\n",
					"spark: SparkSession = SparkSession.builder.getOrCreate()"
				],
				"execution_count": 57
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"spark: SparkSession = SparkSession.builder.getOrCreate()\n",
					"\n",
					"storage_account: str = mssparkutils.notebook.run('/utils/py_utils_get_storage_account')\n",
					"source_path: str = f\"abfss://odw-config@{storage_account}main_pipeline_logs/\"\n",
					"\n",
					"table_name = 'logging.pipeline_logs'"
				],
				"execution_count": 58
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def read_logs_from_storage() -> DataFrame:\n",
					"    try: \n",
					"        existing_table = spark.table(table_name)\n",
					"\n",
					"        df: DataFrame = spark.read.json(source_path, schema=existing_table.schema)\n",
					"        print(f\"Found {df.count()} new logs.\")\n",
					"\n",
					"    except Exception as e:\n",
					"        print('Logs not found at ', source_path, e)\n",
					"        mssparkutils.notebook.exit('')\n",
					"\n",
					"    return df\n",
					"\n",
					"def get_max_log_id():\n",
					"    max_log_df = spark.sql(f\"SELECT COALESCE(MAX(LogId), 0) AS Max_LogID FROM {table_name}\")\n",
					"    max_log_id = max_log_df.collect()[0]['Max_LogID']\n",
					"    return max_log_id"
				],
				"execution_count": 59
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def before_sleep(retry_state: RetryCallState):\n",
					"    print(f\"Retrying after {retry_state.next_action.sleep} seconds...\")"
				],
				"execution_count": 60
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"@retry(wait=wait_fixed(3), stop=stop_after_attempt(5), reraise=True)\n",
					"def delete_logs_from_storage():\n",
					"    mssparkutils.fs.rm(source_path, True)"
				],
				"execution_count": 66
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#Create function to retry in the event of a read or parallel writes. We don't want a one off clash causing the pipeline to fail.\n",
					"@retry(wait=wait_exponential(multiplier=2, min=3, max=10), stop=stop_after_attempt(10), before_sleep=before_sleep,reraise=True)\n",
					"def save_to_delta_with_retry(df):\n",
					"    df.write.mode(\"append\").format(\"delta\").saveAsTable(table_name)\n",
					"    print(f\"Data saved successfully to {table_name}\")"
				],
				"execution_count": 62
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"# Read the logs from storage\n",
					"logs_df: DataFrame = read_logs_from_storage()\n",
					"logs_df = logs_df.orderBy('StartTime')\n",
					"\n",
					"# Set the Log ID\n",
					"w: Window = Window.orderBy(lit(1))\n",
					"logs_df: DataFrame = logs_df.withColumn('LogId', (get_max_log_id() + row_number().over(w)).cast(IntegerType()))"
				],
				"execution_count": 63
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"save_to_delta_with_retry(logs_df)\n",
					"delete_logs_from_storage()"
				],
				"execution_count": 64
			}
		]
	}
}