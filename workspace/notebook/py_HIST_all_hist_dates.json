{
	"name": "py_HIST_all_hist_dates",
	"properties": {
		"folder": {
			"name": "archive/odw-harmonised/SAP-HR/HIST"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw34",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "ac458239-5573-48f8-ab54-cc0599c913dc"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw34",
				"name": "pinssynspodw34",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw34",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 32,
				"automaticScaleJobs": true
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"from pyspark.sql import SparkSession\r\n",
					"spark = SparkSession.builder.getOrCreate()\r\n",
					"report_dates_df = spark.sql(\"select distinct cast(report_monthend_date as DATE) as report_dates from odw_standardised_db.sap_hr_historic order by report_dates asc\").toPandas()"
				],
				"execution_count": 38
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"report_dates_df"
				],
				"execution_count": 48
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					}
				},
				"source": [
					"%%sql   \r\n",
					"\r\n",
					"CREATE OR REPLACE VIEW odw_standardised_db.vw_addresses\r\n",
					"\r\n",
					"AS\r\n",
					"\r\n",
					"SELECT \r\n",
					"    CASE \r\n",
					"        WHEN LENGTH(Staff_Number) = 6 AND SUBSTR(Staff_Number,1,1) = 5\r\n",
					"        THEN CONCAT('00',Staff_Number)\r\n",
					"        WHEN LENGTH(Staff_Number) = 6 AND SUBSTR(Staff_Number,1,1) = 4\r\n",
					"        THEN CONCAT('50',Staff_Number)        \r\n",
					"        ELSE Staff_Number\r\n",
					"    END as Staff_Number,\r\n",
					"    Street_and_House_Number,\r\n",
					"    `2nd_Address_Line`,\r\n",
					"    City,\r\n",
					"    District,\r\n",
					"    Postal_Code,\r\n",
					"    Region_State_Province_Count,\r\n",
					"    to_timestamp(Start_Date) AS Start_Date,\r\n",
					"    to_timestamp(End_Date) AS End_Date,\r\n",
					"    Charting_Officer,\r\n",
					"    Charting_Officer_for_Inspector,\r\n",
					"    Subs_PS_Group,\r\n",
					"    Tel_No,\r\n",
					"    Personal_Mobile,\r\n",
					"    Work_Mobile,\r\n",
					"    to_timestamp(Chngd_on) AS Chngd_on,\r\n",
					"    ingested_datetime,\r\n",
					"    expected_from,\r\n",
					"    expected_to\r\n",
					"\r\n",
					"FROM odw_standardised_db.hr_addresses T1\r\n",
					"INNER JOIN (SELECT MAX(expected_from) AS Max_expectedfrom FROM odw_standardised_db.hr_addresses) MEF ON T1.expected_from = MEF.Max_expectedfrom"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					}
				},
				"source": [
					"%%sql   \r\n",
					"\r\n",
					"CREATE OR REPLACE VIEW odw_standardised_db.vw_email\r\n",
					"\r\n",
					"AS\r\n",
					"\r\n",
					"SELECT \r\n",
					"    CASE \r\n",
					"        WHEN LENGTH(Staff_Number) = 6 AND SUBSTR(Staff_Number,1,1) = 5\r\n",
					"        THEN CONCAT('00',Staff_Number)\r\n",
					"        WHEN LENGTH(Staff_Number) = 6 AND SUBSTR(Staff_Number,1,1) = 4\r\n",
					"        THEN CONCAT('50',Staff_Number)        \r\n",
					"        ELSE Staff_Number\r\n",
					"    END as Staff_Number,\r\n",
					"    first_name,\r\n",
					"    last_name,\r\n",
					"    email_address,\r\n",
					"    text_line_manager,\r\n",
					"    lm_e_mail,\r\n",
					"    ingested_datetime,\r\n",
					"    expected_from,\r\n",
					"    expected_to\r\n",
					"\r\n",
					"FROM odw_standardised_db.hr_email T1\r\n",
					"INNER JOIN (SELECT MAX(expected_from) AS Max_expectedfrom FROM odw_standardised_db.hr_email) MEF ON T1.expected_from = MEF.Max_expectedfrom"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import mssparkutils\r\n",
					"for date in report_dates_df['report_dates']:\r\n",
					"    # spark.sql(f\"set report_date = {date}\")\r\n",
					"    spark.sql(f''' \r\n",
					"    CREATE OR REPLACE VIEW odw_standardised_db.vw_saphr_historic\r\n",
					"\r\n",
					"    AS\r\n",
					"\r\n",
					"    SELECT DISTINCT\r\n",
					"        CASE \r\n",
					"            WHEN LENGTH(T1.Pers_No) = 6 AND SUBSTR(T1.Pers_No,1,1) = 5\r\n",
					"            THEN CONCAT('00',T1.Pers_No)\r\n",
					"            WHEN LENGTH(T1.Pers_No) = 6 AND SUBSTR(T1.Pers_No,1,1) = 4\r\n",
					"            THEN CONCAT('50',T1.Pers_No)        \r\n",
					"            ELSE T1.Pers_No\r\n",
					"        END as Pers_No,\r\n",
					"        First_name,\r\n",
					"        Last_name,\r\n",
					"        Employee_No,\r\n",
					"        CoCd,\r\n",
					"        Company_Code,\r\n",
					"        PA,\r\n",
					"        Personnel_Area,\r\n",
					"        PSubarea,\r\n",
					"        Personnel_Subarea,\r\n",
					"        Org_Unit,\r\n",
					"        Organizational_Unit,\r\n",
					"        Organizational_key,\r\n",
					"        Organizational_key1,\r\n",
					"        WorkC,\r\n",
					"        Work_Contract,\r\n",
					"        CT,\r\n",
					"        Contract_Type,\r\n",
					"        PS_Group,\r\n",
					"        Pay_Band_Description,\r\n",
					"        FTE,\r\n",
					"        Wk_hrs,\r\n",
					"        Indicator_Part_Time_Employee,\r\n",
					"        S,\r\n",
					"        Employment_Status,\r\n",
					"        Gender_Key,\r\n",
					"        TRA_Start_Date,\r\n",
					"        TRA_End_Date,\r\n",
					"        TRA_Status,\r\n",
					"        TRA_Grade,\r\n",
					"        Prev_PersNo,\r\n",
					"        ActR,\r\n",
					"        Reason_for_Action,\r\n",
					"        Position,\r\n",
					"        Position1,\r\n",
					"        Cost_Ctr,\r\n",
					"        Cost_Centre,\r\n",
					"        to_timestamp(Civil_Service_Start) AS Civil_Service_Start,\r\n",
					"        to_timestamp(Date_to_Current_Job) AS Date_to_Current_Job,\r\n",
					"        to_timestamp(Seniority_Date) AS Seniority_Date,\r\n",
					"        to_timestamp(Date_to_Subst_Grade) AS Date_to_Subst_Grade,\r\n",
					"        Pers_No_1,\r\n",
					"        Name_of_Manager_OM,\r\n",
					"        Manager_Position,\r\n",
					"        Manager_Position_Text,\r\n",
					"        Counter_Sign_Manager,\r\n",
					"        Loc,\r\n",
					"        Location,\r\n",
					"        to_timestamp(Org_Start_Date) AS Org_Start_Date,\r\n",
					"        to_timestamp(Fix_Term_End_Date) AS Fix_Term_End_Date,\r\n",
					"        to_timestamp(Loan_Start_Date) AS Loan_Start_Date,\r\n",
					"        to_timestamp(Loan_End_Date) AS Loan_End_Date,\r\n",
					"        EEGrp,\r\n",
					"        Employee_Group,\r\n",
					"        Annual_salary,\r\n",
					"        Curr,\r\n",
					"        NI_number,\r\n",
					"        Birth_date,\r\n",
					"        Age_of_employee,\r\n",
					"        EO,\r\n",
					"        Ethnic_origin,\r\n",
					"        NID,\r\n",
					"        Rel,\r\n",
					"        Religious_Denomination_Key,\r\n",
					"        SxO,\r\n",
					"        Wage_Type,\r\n",
					"        Employee_Subgroup,\r\n",
					"        LOA_Abs_Type,\r\n",
					"        LOA_Absence_Type_Text,\r\n",
					"        Scheme_reference,\r\n",
					"        Pension_Scheme_Name,\r\n",
					"        Disability_Code,\r\n",
					"        Disability_Text,\r\n",
					"        Disability_Code_Description,\r\n",
					"        PArea,\r\n",
					"        Payroll_Area,\r\n",
					"        Assignment_Number,\r\n",
					"        FTE_2,\r\n",
					"        ingested_datetime,\r\n",
					"        expected_from,\r\n",
					"        expected_to,\r\n",
					"        report_monthend_date\r\n",
					"\r\n",
					"    FROM odw_standardised_db.sap_hr_historic T1\r\n",
					"    \r\n",
					"    INNER JOIN (    SELECT MAX(expected_from) AS Max_expectedfrom FROM odw_standardised_db.sap_hr_historic) MEF ON T1.expected_from = MEF.Max_expectedfrom\r\n",
					"    WHERE cast(report_monthend_date as DATE) = \\'{date}\\'\r\n",
					"    ''')\r\n",
					"    mssparkutils.notebook.run(\"odw-harmonised/SAP-HR/HIST/HIST_sap_hr_master\")"
				],
				"execution_count": 46
			}
		]
	}
}