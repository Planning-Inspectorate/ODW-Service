{
	"name": "zendesk_raw_to_standerdised",
	"properties": {
		"folder": {
			"name": "odw-raw"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "402f0c90-a43e-4418-8b94-377cbcfcc613"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw",
				"name": "pinssynspodw",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"from collections.abc import Mapping\r\n",
					"from itertools import chain\r\n",
					"from operator import add\r\n",
					"\r\n",
					"\r\n",
					"_FLAG_FIRST = object()\r\n",
					"\r\n",
					"#flatteb dict function\r\n",
					"def flattenDict(d, join=add, lift=lambda x:(x,)):\r\n",
					"    results = []\r\n",
					"    def visit(subdict, results, partialKey):\r\n",
					"        for k,v in subdict.items():\r\n",
					"            newKey = lift(k) if partialKey==_FLAG_FIRST else join(partialKey,lift(k))\r\n",
					"            if isinstance(v,Mapping):\r\n",
					"                visit(v, results, newKey)\r\n",
					"            else:\r\n",
					"                results.append((newKey,v))\r\n",
					"    visit(d, results, _FLAG_FIRST)\r\n",
					"    return results"
				],
				"execution_count": 53
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from notebookutils import mssparkutils\r\n",
					"### mount the data lake storage in Synapse to the Synapse File Mount API\r\n",
					"jobId = mssparkutils.env.getJobId()\r\n",
					"mssparkutils.fs.unmount(\"/zendesk_folder\") \r\n",
					"mssparkutils.fs.mount( \r\n",
					"'abfss://odw-raw@pinsstodwdevuks9h80mb.dfs.core.windows.net/JsonTest/', \r\n",
					"\"/zendesk_folder\", \r\n",
					"{\"linkedService\":\"ls_storage\"} \r\n",
					")   "
				],
				"execution_count": 54
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pprint import pprint as pp\r\n",
					"\r\n",
					"with open(f\"/synfs/{jobId}/zendesk_folder/output_0.json\", 'r') as zendesk_raw:\r\n",
					"\r\n",
					"        import json\r\n",
					"        \r\n",
					"        zendesk_dict = json.load(zendesk_raw)\r\n",
					"#flat dict statment for zendesk_dict flattening \r\n",
					"FlatDict = dict( flattenDict(zendesk_dict, join=lambda a,b:a+'_'+b, lift=lambda x:x) )"
				],
				"execution_count": 55
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# pp(dict( flattenDict(zendesk_dict, join=lambda a,b:a+'_'+b, lift=lambda x:x) ))"
				],
				"execution_count": 56
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"CommentsDict = zendesk_dict['comments']\r\n",
					"#AnyOf\r\n",
					"CustomFieldsDict = zendesk_dict['custom_fields']\r\n",
					"FieldsDict = zendesk_dict['fields']\r\n",
					"try:\r\n",
					"    CollaboratorPhotoDict= zendesk_dict['collaborator']['photo']\r\n",
					"except TypeError:\r\n",
					"    print('collaborator_photo field is null/is a string)')\r\n",
					"\r\n",
					"try:\r\n",
					"    SubmitterPhotoDict= zendesk_dict['submitter']['photo']\r\n",
					"except TypeError:\r\n",
					"    print('submitter_photo field is null/is a string)')\r\n",
					"\r\n",
					"try:\r\n",
					"    RequesterPhotoDict= zendesk_dict['requester']['photo']\r\n",
					"except TypeError:\r\n",
					"    print('requester_photo field is null/is a string)')\r\n",
					"\r\n",
					"try:\r\n",
					"    AssigneePhotoDict= zendesk_dict['assignee']['photo']\r\n",
					"except TypeError:\r\n",
					"    print('assignee_photo field is null/is a string)')\r\n",
					"\r\n",
					"OrganizationDict = zendesk_dict['organization']\r\n",
					"AssigneeDict= zendesk_dict['assignee']\r\n",
					"FlatAssigneeDict = dict( flattenDict(AssigneeDict, join=lambda a,b:a+'_'+b, lift=lambda x:x) )\r\n",
					""
				],
				"execution_count": 57
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#convert dictionaries into data frames \r\n",
					"import pandas as pd\r\n",
					"\r\n",
					"dfCommentsDict = pd.DataFrame.from_records(CommentsDict)\r\n",
					"dfCustomFieldsDict =pd.DataFrame.from_records(CustomFieldsDict)\r\n",
					"dfFieldsDict = pd.DataFrame.from_records(FieldsDict)\r\n",
					"try:\r\n",
					"    dfCollaboratorPhotoDict = pd.DataFrame.from_records(CollaboratorPhotoDict)\r\n",
					"except NameError:\r\n",
					"    print('no collaborator dict')\r\n",
					"\r\n",
					"try:\r\n",
					"    dfSubmitterPhotoDict = pd.DataFrame.from_records(SubmitterPhotoDict)\r\n",
					"except NameError:\r\n",
					"    print('no submitter dict')\r\n",
					"except TypeError:\r\n",
					"    print('no submitter dict')\r\n",
					"\r\n",
					"\r\n",
					"try:\r\n",
					"    dfRequesterPhotoDict = pd.DataFrame.from_records(RequesterPhotoDict)\r\n",
					"except NameError:\r\n",
					"    print('no requester dict')\r\n",
					"except TypeError:\r\n",
					"    print('no requester dict')\r\n",
					"\r\n",
					"try:\r\n",
					"    dfAssigneePhotoDict = pd.DataFrame.from_records(AssigneePhotoDict)\r\n",
					"except NameError:\r\n",
					"    print('no assignee dict')\r\n",
					"except TypeError:\r\n",
					"    print('no assignee dict')\r\n",
					"\r\n",
					"\r\n",
					"try:\r\n",
					"    dfOrganizationDict = pd.DataFrame.from_records(OrganizationDict)\r\n",
					"except TypeError:\r\n",
					"    print('no organization column data in file')\r\n",
					"\r\n",
					"dfFlatAssigneeDict = pd.DataFrame.from_records(FlatAssigneeDict)\r\n",
					"\r\n",
					"if 'comments' in FlatDict:\r\n",
					"    del FlatDict['comments']\r\n",
					"else:\r\n",
					"    print('no column')\r\n",
					"if 'custom_fields' in FlatDict:\r\n",
					"    del FlatDict['custom_fields']\r\n",
					"else:\r\n",
					"    print('no column')\r\n",
					"if 'fields' in FlatDict:\r\n",
					"    del FlatDict['fields']\r\n",
					"else:\r\n",
					"    print('no column')\r\n",
					"if 'photo' in FlatDict['collaborator']:\r\n",
					"    del FlatDict['collaborator']['photo']\r\n",
					"else:\r\n",
					"    print('no column')\r\n",
					"# if 'photo' in FlatDict['submitter']:\r\n",
					"#     del FlatDict['submitter']['photo']\r\n",
					"# else:\r\n",
					"#     print('no column')\r\n",
					"# if 'photo' in FlatDict['requester']:\r\n",
					"#     del FlatDict['requester']['photo']\r\n",
					"# else:\r\n",
					"#     print('no column')\r\n",
					"# if 'organization' in FlatDict:\r\n",
					"#     del FlatDict['organization']\r\n",
					"# else:\r\n",
					"#     print('no column')\r\n",
					"if 'assignee' in FlatDict:\r\n",
					"    del FlatDict['assignee']\r\n",
					"else:\r\n",
					"    print('no column')\r\n",
					"\r\n",
					"\r\n",
					""
				],
				"execution_count": 58
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"dfFlatDict = pd.DataFrame({ key:pd.Series(value) for key, value in FlatDict.items() })\r\n",
					"keysList = list(dfFlatDict.keys())\r\n",
					"print(keysList)"
				],
				"execution_count": 59
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"isinstance(1,int)"
				],
				"execution_count": 60
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					""
				],
				"execution_count": null
			}
		]
	}
}