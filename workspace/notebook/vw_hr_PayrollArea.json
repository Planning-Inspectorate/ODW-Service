{
	"name": "vw_hr_PayrollArea",
	"properties": {
		"folder": {
			"name": "odw-curated/curatedviews"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "6a10a1c4-3987-4be0-8df7-569ec5114d02"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw",
				"name": "pinssynspodw",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#### The purpose of this notebook is to read data from Harmoised layer and build a view & table for Power BI use.\n",
					"\n",
					"**Author** &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   **Created Date** &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; **Description**  \n",
					"Prathap Adicherla &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;01-April-2025 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Pay Roll Area  details Covered in here;"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"%run utils/py_logging_decorator"
				],
				"execution_count": 5
			},
			{
				"cell_type": "code",
				"source": [
					"try:\n",
					"    logInfo(\"Starting Payroll Area dimension setup\")\n",
					"    \n",
					"    # Get storage account \n",
					"    storage_account = mssparkutils.notebook.run('/utils/py_utils_get_storage_account')\n",
					"    logInfo(f\"Using storage account: {storage_account}\")\n",
					"    \n",
					"    # Fix the path\n",
					"    storage_account = storage_account.rstrip('/')\n",
					"    delta_table_path = f\"abfss://odw-curated@{storage_account}/saphr/pbi_PayrollArea\"\n",
					"    logInfo(f\"Delta table will be created at: {delta_table_path}\")\n",
					"    \n",
					"    # Create/refresh view\n",
					"    logInfo(\"Creating view odw_curated_db.vw_dim_HR_PayrollArea\")\n",
					"    spark.sql(\"\"\"\n",
					"    CREATE OR REPLACE VIEW odw_curated_db.vw_dim_HR_PayrollArea AS\n",
					"    SELECT \n",
					"        RANK() OVER(ORDER BY PArea) AS dim_payroll_area_key,\n",
					"        PArea AS PayrollAreaCode,\n",
					"        PayrollArea\n",
					"    FROM (\n",
					"        SELECT DISTINCT PArea, PayrollArea\n",
					"        FROM odw_harmonised_db.hist_SAP_HR\n",
					"        UNION\n",
					"        SELECT '-1', 'Unknown'\n",
					"    ) a\n",
					"    \"\"\")\n",
					"    logInfo(\"Successfully created view odw_curated_db.vw_dim_HR_PayrollArea\")\n",
					"    \n",
					"\n",
					"    \n",
					"    # Drop the table if it exists\n",
					"    logInfo(\"Dropping table odw_curated_db.pbi_dim_HR_PayrollArea if it exists\")\n",
					"    spark.sql(\"\"\"\n",
					"    DROP TABLE IF EXISTS odw_curated_db.pbi_dim_HR_PayrollArea\n",
					"    \"\"\")\n",
					"    logInfo(\"Table dropped or did not exist\")\n",
					"    \n",
					"    # Create table from view with specified location\n",
					"    logInfo(\"Creating table odw_curated_db.pbi_dim_HR_PayrollArea from view with specified location\")\n",
					"    spark.sql(f\"\"\"\n",
					"    CREATE OR REPLACE TABLE odw_curated_db.pbi_dim_HR_PayrollArea\n",
					"    USING delta\n",
					"    LOCATION '{delta_table_path}'\n",
					"    AS SELECT * FROM odw_curated_db.vw_dim_HR_PayrollArea\n",
					"    \"\"\")\n",
					"    \n",
					"    logInfo(\"Payroll Area dimension setup completed successfully\")\n",
					"\n",
					"except Exception as e:\n",
					"    logError(f\"Error in Payroll Area dimension setup: {str(e)}\")\n",
					"    logException(e)\n",
					"    raise e\n",
					"finally:\n",
					"    logInfo(\"Flushing logs\")\n",
					"    flushLogging()"
				],
				"execution_count": 6
			}
		]
	}
}