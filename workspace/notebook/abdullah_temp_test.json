{
	"name": "abdullah_temp_test",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "cb88e4e3-0c1e-4064-970a-004ea0cc89af"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw",
				"name": "pinssynspodw",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"%run  \"0-odw-source-to-raw/Fileshare/SAP_HR/py_0_source_to_raw_hr_functions\""
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"jsonschema = \"\"\"{\"fields\": [{\"metadata\": {},\"name\": \"Date\",\"nullable\": false,\"type\": \"timestamp\"}, {\"metadata\": {},\"name\": \"Text\",\"nullable\":false,\"type\": \"string\"}]}\"\"\"\r\n",
					"target_container = \"abfss://odw-standardised@\" + spark.sparkContext.environment.get('dataLakeAccountName', 'get') + \".dfs.core.windows.net/\"\r\n",
					"table_name = \"abdullah_test\"\r\n",
					"target_folder = \"config/\" + table_name"
				],
				"execution_count": 59
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"create_table_from_schema(jsonschema, \"odw_config_db\", table_name, target_container, target_folder)"
				],
				"execution_count": 60
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"-- select * from odw_config_db.abdullah_test\r\n",
					"insert into odw_config_db.abdullah_test VALUES (CAST('2022-10-10' AS TIMESTAMP), 'Hello World')"
				],
				"execution_count": 61
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"SELECT * FROM odw_config_db.abdullah_test"
				],
				"execution_count": 11
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# test new column\r\n",
					"from pyspark.sql.types import StructType, TimestampType\r\n",
					"import json\r\n",
					"from pyspark.sql import SparkSession\r\n",
					"from pyspark.sql.functions import to_timestamp\r\n",
					"# df_original = spark.read\r\n",
					"jsonschema_new_column = \"\"\"{\"fields\": [{\"metadata\": {},\"name\": \"Date\",\"nullable\": true,\"type\": \"timestamp\"}, {\"metadata\": {},\"name\": \"Text\",\"nullable\":false,\"type\": \"string\"}, {\"metadata\": {},\"name\": \"PleaseWork\",\"nullable\":false,\"type\": \"string\"}]}\"\"\"\r\n",
					"schema = StructType.fromJson(json.loads(jsonschema_new_column))\r\n",
					"spark = SparkSession.builder.getOrCreate()\r\n",
					"spark.conf.set(\"spark.databricks.delta.schema.autoMerge.enabled\", \"true\")\r\n",
					"# df_original = spark.table(\"odw_config_db.abdullah_test\")\r\n",
					"#to_timestamp('2016-12-31 00:12:00') (datetime(2023,3,1),\"hello\",\"world\")\r\n",
					"from datetime import datetime\r\n",
					"df = spark.createDataFrame([], schema)\r\n",
					"# df.unionByName(df_original, allowMissingColumns=True)\r\n",
					"df.write.option(\"mergeSchema\", \"true\").mode(\"append\").format('delta').saveAsTable('odw_config_db.abdullah_test')"
				],
				"execution_count": 65
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"len(df.columns)"
				],
				"execution_count": 19
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"spark.read.format(\"delta\").load(\"odw_config_db.abdullah_test\").show()"
				],
				"execution_count": 13
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df_original = spark.table(\"odw_config_db.abdullah_test\")\r\n",
					"df_original.show()"
				],
				"execution_count": 14
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql \r\n",
					"DESCRIBE odw_config_db.abdullah_test"
				],
				"execution_count": 66
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df_original = spark.table('odw_config_db.abdullah_test')\r\n",
					"df_original"
				],
				"execution_count": 76
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"SELECT * FROM odw_config_db.abdullah_test"
				],
				"execution_count": 73
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"-- select * from odw_config_db.abdullah_test\r\n",
					"insert into odw_config_db.abdullah_test(Date,Text,PleaseWork) VALUES (CAST('2022-10-10' AS TIMESTAMP), 'Hello World', \"My name is...\");\r\n",
					"insert into odw_config_db.abdullah_test(Date,Text,PleaseWork) VALUES (NULL, 'Hello World', \"My name is...\")"
				],
				"execution_count": 70
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"-- select * from odw_config_db.abdullah_test\r\n",
					"insert into odw_config_db.abdullah_test(Date,Text,PleaseWork) VALUES (CAST('2022-10-10' AS TIMESTAMP), NULL, \"My name is...\");"
				],
				"execution_count": 72
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"jsonschema_new_column = \"\"\"{\"fields\": [{\"metadata\": {},\"name\": \"Date\",\"nullable\": false,\"type\": \"timestamp\"}, {\"metadata\": {},\"name\": \"Text\",\"nullable\":true,\"type\": \"string\"}, {\"metadata\": {},\"name\": \"PleaseWork\",\"nullable\":false,\"type\": \"string\"}]}\"\"\"\r\n",
					"new_fields = json.loads(jsonschema_new_column)['fields']\r\n",
					"old_fields = json.loads(jsonschema)['fields']\r\n",
					"new_fields = [field for field in new_fields if field not in old_fields]\r\n",
					"# dont care about old new_fields\r\n",
					"change_column_type = []\r\n",
					"new_column = []\r\n",
					"change_nullability = []\r\n",
					"for new_field in new_fields:\r\n",
					"    for old_field in old_fields:\r\n",
					"        if new_field['name'] == old_field['name']:\r\n",
					"            \r\n",
					"    if field['name']"
				],
				"execution_count": 34
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.sql.types import TimestampType, DateType\r\n",
					"TimestampType().jsonValue()\r\n",
					"DateType().jsonValue()"
				],
				"execution_count": 38
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"json_for_df = spark.read.format('delta').table('odw_config_db.abdullah_test').schema.jsonValue()\r\n",
					"string_from_json = json.dumps(json_for_df)\r\n",
					"string_from_json"
				],
				"execution_count": 64
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# test change column type \r\n",
					"jsonschema_new_type = \"\"\"{\"fields\": [{\"metadata\": {},\"name\": \"Date\",\"nullable\": false,\"type\": \"timestamp\"}, {\"metadata\": {},\"name\": \"Text\",\"nullable\":false,\"type\": \"string\"}, {\"metadata\": {},\"name\": \"PleaseWork\",\"nullable\":false,\"type\": \"string\"}]}\"\"\"\r\n",
					"schema = StructType.fromJson(json.loads(jsonschema_new_column))\r\n",
					"spark = SparkSession.builder.getOrCreate()\r\n",
					"spark.conf.set(\"spark.databricks.delta.schema.autoMerge.enabled\", \"true\")\r\n",
					"# df_original = spark.table(\"odw_config_db.abdullah_test\")\r\n",
					"#to_timestamp('2016-12-31 00:12:00') (datetime(2023,3,1),\"hello\",\"world\")\r\n",
					"from datetime import datetime\r\n",
					"df = spark.createDataFrame([], schema)\r\n",
					"# df.unionByName(df_original, allowMissingColumns=True)\r\n",
					"df.write.option(\"mergeSchema\", \"true\").mode(\"append\").format('delta').saveAsTable('odw_config_db.abdullah_test')"
				],
				"execution_count": 43
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# test drop column"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# make column nullable"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# make column non nullable"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%run \"utils/py_logging_decorator\""
				],
				"execution_count": 5
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"@logging_to_appins\r\n",
					"def delete_table(db_name, table_name):\r\n",
					"    import logging\r\n",
					"    logger = logging.getLogger(__name__)\r\n",
					"    from pyspark.sql import SparkSession\r\n",
					"    from notebookutils import mssparkutils\r\n",
					"    spark = SparkSession.builder.getOrCreate()\r\n",
					"    if spark._jsparkSession.catalog().tableExists(db_name, table_name):\r\n",
					"        table_details = spark.sql(f\"DESCRIBE DETAIL {db_name}.{table_name}\").toPandas()\r\n",
					"        if len(table_details) > 1:\r\n",
					"            raise RuntimeError(\"too many locations associated with the table!\")\r\n",
					"        else:\r\n",
					"            loc = table_details['location'][0]\r\n",
					"            mssparkutils.fs.rm(loc, True)\r\n",
					"            spark.sql(f\"DROP TABLE IF EXISTS {db_name}.{table_name}\")\r\n",
					"    else:\r\n",
					"        logger.info(\"Table does not exist\")"
				],
				"execution_count": 6
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"db_name=\"odw_config_db\"\r\n",
					"table_name=\"abdullah_test\""
				],
				"execution_count": 7
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"delete_table(db_name,table_name)"
				],
				"execution_count": 54
			}
		]
	}
}