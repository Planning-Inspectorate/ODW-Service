{
	"name": "entraid",
	"properties": {
		"folder": {
			"name": "odw-harmonised/EntraID"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw34",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "e22b865e-8788-4ccf-b40c-b9bd81999ff1"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": true,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw34",
				"name": "pinssynspodw34",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw34",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 32,
				"automaticScaleJobs": true
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%run utils/py_logging_decorator"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Initialize Application Insight Logging functions"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"%run utils/py_utils_common_logging_output"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from datetime import datetime\n",
					"from notebookutils import mssparkutils\n",
					"\n",
					"# Define variables\n",
					"target_table = \"odw_harmonised_db.entraid\"\n",
					"\n",
					"# Initialize tracking variables\n",
					"start_exec_time = str(datetime.now())\n",
					"insert_count = 0\n",
					"update_count = 0\n",
					"delete_count = 0"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Check for new, updated or deleted data\n",
					"- This script checks for new, updated or deleted data by checking the source data (horizon tables) against the target (odw_harmonised_db.casework tables)\n",
					"- **New Data:** where an main Reference in the source does not exist in the target, then NewData flag is set to 'Y'\n",
					"- **Updated data:** Comparison occurs on Reference Fields in source and in target where the row hash is different i.e. there is a change in one of the columns. NewData flag is set to 'Y'\n",
					"- **Deleted data:** where an Reference info in the target exists but the same identifyers don't exist in the source. DeletedData flag is set to 'Y'\n",
					"\n",
					"## View entraid_new is created"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"-- Build entraid_new table\n",
					"-- Gets modified or deleted from source rows\n",
					"\n",
					"CREATE OR REPLACE TEMPORARY VIEW entraid_new \n",
					"\n",
					"     AS\n",
					"\n",
					"-- gets data that matches of SourceID and flags that it is modified based on a row (md5) hash. Flags as \"NewData\"\n",
					"-- gets data that is in the target but not in source. Flags as \"DeletedData\"\n",
					"\n",
					"SELECT DISTINCT\n",
					"    CASE\n",
					"        WHEN T1.id IS NULL\n",
					"        THEN T2.EmployeeEntraId\n",
					"        ELSE NULL\n",
					"    END                             AS EmployeeEntraId,\n",
					"    T1.id                           AS id,\n",
					"    T1.employeeId                   AS employeeId,\n",
					"    T1.givenName                    AS givenName,\n",
					"    T1.surname                      AS surname,\n",
					"    T1.userPrincipalName            AS userPrincipalName,\n",
					"    \"0\"                             AS Migrated,\n",
					"    \"EntraID\"                       AS ODTSourceSystem,\n",
					"    T3.SourceSystemID               AS SourceSystemID,\n",
					"    to_timestamp(T1.expected_from)  AS IngestionDate,\n",
					"    NULL                            AS ValidTo,\n",
					"    md5(\n",
					"        concat(\n",
					"            IFNULL(T1.id,'.'),\n",
					"            IFNULL(T1.employeeId,'.'),\n",
					"            IFNULL(T1.givenName,'.'),\n",
					"            IFNULL(T1.surname,'.'),\n",
					"            IFNULL(T1.userPrincipalName,'.')\n",
					"        ))                          AS RowID, -- this hash should contain all the defining fields\n",
					"    'Y'                             AS IsActive,\n",
					"    T2.IsActive                     AS HistoricIsActive\n",
					"\n",
					"FROM odw_standardised_db.entraid T1\n",
					"LEFT JOIN odw_harmonised_db.main_sourcesystem_fact T3 ON \"SAP HR\" = T3.Description AND T3.IsActive = 'Y'\n",
					"FULL JOIN odw_harmonised_db.entraid T2 ON T1.id = T2.id AND T2.IsActive = 'Y'\n",
					"WHERE\n",
					"    -- flags new data        \n",
					"    (CASE\n",
					"        WHEN T1.id = T2.id AND md5(\n",
					"            concat(\n",
					"                IFNULL(T1.id,'.'),\n",
					"                IFNULL(T1.employeeId,'.'),\n",
					"                IFNULL(T1.givenName,'.'),\n",
					"                IFNULL(T1.surname,'.'),\n",
					"                IFNULL(T1.userPrincipalName,'.')\n",
					"            )) <> T2.RowID  -- same row, changed data\n",
					"        THEN 'Y'\n",
					"        WHEN T2.id IS NULL -- new employeeId\n",
					"        THEN 'Y'\n",
					"    ELSE 'N'\n",
					"    END  = 'Y')\n",
					"    AND T1.id IS NOT NULL\n",
					"    AND T1.expected_from = (SELECT MAX(expected_from) FROM odw_standardised_db.entraid)\n",
					";"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"\n",
					"SELECT * from entraid_new"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Dataset is created that contains changed data and corresponding target data\n",
					"- This script combines data that has been updated, Deleted or is new, with corresponding target data\n",
					"- View **entraid_new** is unioned to the target data filter to only those rows where changes have been detected\n",
					"## View entraid_changed_rows is created"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"-- Create new and updated dataset\n",
					"\n",
					"CREATE OR REPLACE TEMPORARY VIEW entraid_changed_rows\n",
					"\n",
					"    AS\n",
					"\n",
					"-- gets updated, deleted and new rows \n",
					"Select \n",
					"    EmployeeEntraId,\n",
					"    id,\n",
					"    employeeId,\n",
					"    givenName,\n",
					"    surname,\n",
					"    userPrincipalName,\n",
					"    Migrated,\n",
					"    ODTSourceSystem,\n",
					"    SourceSystemID,\n",
					"    IngestionDate,\n",
					"    ValidTo,\n",
					"    RowID,\n",
					"    IsActive\n",
					"\n",
					"From entraid_new WHERE HistoricIsActive = 'Y' or HistoricIsActive IS NULL\n",
					"\n",
					"    UNION ALL\n",
					"\n",
					"-- gets original versions of updated rows so we can update EndDate and set IsActive flag to 'N'\n",
					"SELECT\n",
					"    EmployeeEntraId,\n",
					"    id,\n",
					"    employeeId,\n",
					"    givenName,\n",
					"    surname,\n",
					"    userPrincipalName,\n",
					"    Migrated,\n",
					"    ODTSourceSystem,\n",
					"    SourceSystemID,\n",
					"    IngestionDate,\n",
					"    ValidTo,\n",
					"    RowID,\n",
					"    IsActive\n",
					"    \n",
					"FROM odw_harmonised_db.entraid\n",
					"WHERE id IN (SELECT id FROM entraid_new WHERE id IS NULL) AND IsActive = 'Y'; "
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"\n",
					"CREATE OR REPLACE TEMPORARY VIEW Loading_month\n",
					"\n",
					"    AS\n",
					"\n",
					"SELECT DISTINCT\n",
					"    IngestionDate AS IngestionDate,\n",
					"    to_timestamp(date_sub(IngestionDate,1)) AS ClosingDate,\n",
					"    'Y' AS IsActive\n",
					"\n",
					"FROM entraid_new;\n",
					"\n",
					"CREATE OR REPLACE TEMPORARY VIEW entraid_changed_rows_final\n",
					"\n",
					"    AS\n",
					"\n",
					"SELECT \n",
					"    EmployeeEntraId,\n",
					"    id,\n",
					"    employeeId,\n",
					"    givenName,\n",
					"    surname,\n",
					"    userPrincipalName,\n",
					"    Migrated,\n",
					"    ODTSourceSystem,\n",
					"    T1.SourceSystemID,\n",
					"    T1.IngestionDate,\n",
					"    T1.ValidTo,\n",
					"    T1.RowID,\n",
					"    T1.IsActive,\n",
					"    T2.ClosingDate\n",
					"FROM entraid_changed_rows T1\n",
					"FULL JOIN Loading_month T2 ON T1.IsActive = T2.IsActive"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# View entraid_changed_rows is used in a merge (Upsert) statement into the target table\n",
					"- **WHEN MATCHED** ON the surrogate Key (i.e. EmployeeEntraId), EndDate is set to today -1 day and the IsActive flag is set to 'N'\n",
					"- **WHEN NOT MATCHED** ON the surrogate Key, insert rows\n",
					"## Table odw_harmonised_db.entraid is updated"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"\n",
					"-- merge into dim table\n",
					"MERGE INTO odw_harmonised_db.entraid AS Target\n",
					"USING entraid_changed_rows_final AS Source\n",
					"\n",
					"ON Source.id = Target.id AND Target.IsActive = 'Y'\n",
					"\n",
					"-- For Updates existing rows\n",
					"\n",
					"WHEN MATCHED\n",
					"    THEN \n",
					"    UPDATE SET\n",
					"    Target.ValidTo = to_timestamp(ClosingDate),\n",
					"    Target.IsActive = 'N'\n",
					"\n",
					"-- Insert completely new rows\n",
					"\n",
					"WHEN NOT MATCHED \n",
					"    THEN INSERT (\n",
					"        EmployeeEntraId,\n",
					"        id,\n",
					"        employeeId,\n",
					"        givenName,\n",
					"        surname,\n",
					"        userPrincipalName,\n",
					"        Migrated,\n",
					"        ODTSourceSystem,\n",
					"        SourceSystemID,\n",
					"        IngestionDate,\n",
					"        ValidTo,\n",
					"        RowID,\n",
					"        IsActive)\n",
					"    VALUES (\n",
					"        Source.EmployeeEntraId,\n",
					"        Source.id,\n",
					"        Source.employeeId,\n",
					"        Source.givenName,\n",
					"        Source.surname,\n",
					"        Source.userPrincipalName,\n",
					"        Source.Migrated,\n",
					"        Source.ODTSourceSystem,\n",
					"        Source.SourceSystemID,\n",
					"        Source.IngestionDate,\n",
					"        Source.ValidTo,\n",
					"        Source.RowID,\n",
					"        Source.IsActive)\n",
					"     ;   "
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Fix the IDs\n",
					"- No auto-increment feature is available in delta tables, therefore we need to create new IDs for the inserted rows\n",
					"- This is done by select the target data and using INSERT OVERWRITE to re-insert the data is a new Row Number\n",
					"## Table odw_harmonised_db.entraid is updated"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"-- Insert new entraid\n",
					"\n",
					"INSERT OVERWRITE odw_harmonised_db.entraid\n",
					"\n",
					"SELECT \n",
					"    ROW_NUMBER() OVER (ORDER BY EmployeeEntraId NULLS LAST) AS EmployeeEntraId,\n",
					"    employeeId,    \n",
					"    id,\n",
					"    givenName,\n",
					"    surname,\n",
					"    userPrincipalName,\n",
					"    Migrated,\n",
					"    ODTSourceSystem,\n",
					"    SourceSystemID,\n",
					"    IngestionDate,\n",
					"    ValidTo,\n",
					"    RowID,\n",
					"    IsActive    \n",
					"FROM odw_harmonised_db.entraid;"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"try:\n",
					"    # Get record counts for logging\n",
					"    final_count_df = spark.sql(\"SELECT COUNT(*) as count FROM odw_harmonised_db.entraid\")\n",
					"    insert_count = final_count_df.collect()[0]['count']\n",
					"    \n",
					"    end_exec_time = str(datetime.now())\n",
					"    logInfo(f\"Successfully processed {target_table} with {insert_count} total records\")\n",
					"    \n",
					"    # Add successful result to logger\n",
					"    app_insight_logger.add_table_result(\n",
					"        delta_table_name=target_table,\n",
					"        insert_count=insert_count,\n",
					"        update_count=update_count,\n",
					"        delete_count=delete_count,\n",
					"        table_result=\"success\",\n",
					"        start_exec_time=start_exec_time,\n",
					"        end_exec_time=end_exec_time\n",
					"    )\n",
					"    \n",
					"except Exception as e:\n",
					"    # Handle errors with proper logging\n",
					"    logError(f\"Error processing {target_table}: {e}\")\n",
					"    error_message = app_insight_processor.format_error_message(e, max_length=800)\n",
					"    \n",
					"    end_exec_time = str(datetime.now())\n",
					"    app_insight_logger.add_table_result(\n",
					"        delta_table_name=target_table,\n",
					"        insert_count=insert_count,\n",
					"        update_count=update_count,\n",
					"        delete_count=delete_count,\n",
					"        table_result=\"failed\",\n",
					"        start_exec_time=start_exec_time,\n",
					"        end_exec_time=end_exec_time,\n",
					"        error_message=error_message\n",
					"    )\n",
					"    \n",
					"    # Exit with the JSON result\n",
					"    mssparkutils.notebook.exit(app_insight_logger.generate_processing_results())"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Generate and exit with final logging results\n",
					"mssparkutils.notebook.exit(app_insight_logger.generate_processing_results())"
				],
				"execution_count": null
			}
		]
	}
}