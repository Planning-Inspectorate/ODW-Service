{
	"name": "appeals_has",
	"properties": {
		"folder": {
			"name": "odw-curated"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "294e6ef5-a4f4-4054-8378-fb2b4279863e"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw",
				"name": "pinssynspodw",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"\n",
					"CREATE OR REPLACE VIEW odw_curated_db.vw_appeal_has\n",
					"\n",
					"AS\n",
					"\n",
					"SELECT DISTINCT \n",
					"CAST(AH.caseId AS INT)                      AS caseId,\n",
					"AH.caseReference                            AS caseReference,\n",
					"AH.caseStatus                               AS caseStatus,\n",
					"AH.caseType                                 AS caseType,\n",
					"AH.caseProcedure                            AS caseProcedure,\n",
					"AH.lpaCode                                  AS lpaCode,\n",
					"AH.caseOfficerId                            AS caseOfficerId,\n",
					"AH.inspectorId                              AS inspectorId,\n",
					"AH.allocationLevel                          AS allocationLevel,\n",
					"CAST(AH.allocationBand AS NUMERIC)          AS allocationBand,\n",
					"AH.caseSpecialisms                          AS caseSpecialisms,\n",
					"AH.caseSubmittedDate                        AS caseSubmittedDate,\n",
					"AH.caseCreatedDate                          AS caseCreatedDate,\n",
					"AH.caseUpdatedDate                          AS caseUpdatedDate,\n",
					"AH.caseValidDate                            AS caseValidDate,\n",
					"AH.caseValidationDate                       AS caseValidationDate,\n",
					"AH.caseValidationOutcome                    AS caseValidationOutcome,\n",
					"AH.caseValidationInvalidDetails             AS caseValidationInvalidDetails,\n",
					"AH.caseValidationIncompleteDetails          AS caseValidationIncompleteDetails,\n",
					"AH.caseExtensionDate                        AS caseExtensionDate,\n",
					"AH.caseStartedDate                          AS caseStartedDate,\n",
					"AH.casePublishedDate                        AS casePublishedDate,\n",
					"AH.linkedCaseStatus                         AS linkedCaseStatus,\n",
					"AH.leadCaseReference                        AS leadCaseReference,\n",
					"AH.lpaQuestionnaireDueDate                  AS lpaQuestionnaireDueDate,\n",
					"AH.lpaQuestionnaireSubmittedDate            AS lpaQuestionnaireSubmittedDate,\n",
					"AH.lpaQuestionnaireCreatedDate              AS lpaQuestionnaireCreatedDate,\n",
					"AH.lpaQuestionnairePublishedDate            AS lpaQuestionnairePublishedDate,\n",
					"AH.lpaQuestionnaireValidationOutcome        AS lpaQuestionnaireValidationOutcome,\n",
					"AH.lpaQuestionnaireValidationOutcomeDate    AS lpaQuestionnaireValidationOutcomeDate,\n",
					"AH.lpaQuestionnaireValidationDetails        AS lpaQuestionnaireValidationDetails,\n",
					"AH.lpaStatement                             AS lpaStatement,\n",
					"AH.caseWithdrawnDate                        AS caseWithdrawnDate,\n",
					"AH.caseTransferredDate                      AS caseTransferredDate,\n",
					"AH.transferredCaseClosedDate                           AS caseClosedDate,\n",
					"AH.caseDecisionOutcomeDate                  AS caseDecisionOutcomeDate,\n",
					"AH.caseDecisionPublishedDate                AS caseDecisionPublishedDate,\n",
					"AH.caseDecisionOutcome                      AS caseDecisionOutcome,\n",
					"AH.caseCompletedDate                        AS caseCompletedDate,\n",
					"CAST(AH.enforcementNotice AS BOOLEAN)       AS enforcementNotice,\n",
					"AH.applicationReference                     AS applicationReference,\n",
					"AH.applicationDate                          AS applicationDate,\n",
					"AH.applicationDecision                      AS applicationDecision,\n",
					"AH.applicationDecisionDate                  AS applicationDecisionDate,\n",
					"AH.caseSubmissionDueDate                    AS caseSubmissionDueDate,\n",
					"AH.siteAddressLine1                         AS siteAddressLine1,\n",
					"AH.siteAddressLine2                         AS siteAddressLine2,\n",
					"AH.siteAddressTown                          AS siteAddressTown,\n",
					"AH.siteAddressCounty                        AS siteAddressCounty,\n",
					"AH.siteAddressPostcode                      AS siteAddressPostcode,\n",
					"AH.siteAccessDetails                        AS siteAccessDetails,\n",
					"AH.siteSafetyDetails                        AS siteSafetyDetails,\n",
					"AH.siteAreaSquareMetres                     AS siteAreaSquareMetres,\n",
					"AH.floorSpaceSquareMetres                   AS floorSpaceSquareMetres,\n",
					"CAST(AH.isCorrectAppealType AS BOOLEAN)     AS isCorrectAppealType,\n",
					"CAST(AH.isGreenBelt AS BOOLEAN)             AS isGreenBelt,\n",
					"CAST(AH.inConservationArea AS BOOLEAN)      AS inConservationArea,\n",
					"CAST(AH.ownsAllLand AS BOOLEAN)             AS ownsAllLand,\n",
					"CAST(AH.ownsSomeLand AS BOOLEAN)            AS ownsSomeLand,\n",
					"AH.knowsOtherOwners                         AS knowsOtherOwners,\n",
					"AH.knowsAllOwners                           AS knowsAllOwners,\n",
					"CAST(AH.advertisedAppeal AS BOOLEAN)        AS advertisedAppeal,\n",
					"AH.notificationMethod                       AS notificationMethod,\n",
					"CAST(AH.ownersInformed AS BOOLEAN)          AS ownersInformed,\n",
					"AH.originalDevelopmentDescription           AS originalDevelopmentDescription,\n",
					"CAST(AH.changedDevelopmentDescription AS BOOLEAN) AS changedDevelopmentDescription,\n",
					"AH.newConditionDetails                      AS newConditionDetails,\n",
					"AH.nearbyCaseReferences                     AS nearbyCaseReferences,\n",
					"AH.neighbouringSiteAddresses                AS neighbouringSiteAddresses,\n",
					"AH.affectedListedBuildingNumbers            AS affectedListedBuildingNumbers,\n",
					"CAST(AH.appellantCostsAppliedFor AS BOOLEAN) AS appellantCostsAppliedFor,\n",
					"CAST(AH.lpaCostsAppliedFor AS BOOLEAN)       AS lpaCostsAppliedFor\n",
					"\n",
					"FROM odw_harmonised_db.sb_appeal_has AS AH\n",
					"WHERE AH.IsActive = 'Y'"
				],
				"execution_count": 4
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.sql import SparkSession\n",
					"spark = SparkSession.builder.getOrCreate()\n",
					"view_df = spark.sql(\"SELECT * FROM odw_curated_db.vw_appeal_has\")\n",
					"view_df.write.mode(\"overwrite\").saveAsTable(\"odw_curated_db.appeal_has\")"
				],
				"execution_count": 7
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# spark.sql(f\"drop table if exists odw_curated_db.appeal_has;\")"
				],
				"execution_count": 6
			}
		]
	}
}