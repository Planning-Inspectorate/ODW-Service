{
	"name": "Inspector_address",
	"properties": {
		"folder": {
			"name": "odw-harmonised"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "eec5d65e-50e0-4ff7-840d-753d0ce5646d"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw",
				"name": "pinssynspodw",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Entity Name : Inspector Address \n",
					"### Author: Prathap A\n",
					"### Date: 25/02/2025\n",
					"\n",
					"#### version : 0001"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Intialisations"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"from pyspark.sql.functions import udf, col, lit, when, coalesce, concat, sum, avg, max, min, count, countDistinct, date_format, to_date, datediff, months_between, year, month,  hour, minute, second, expr, asc, desc\n",
					"from pyspark.sql.types import DateType, TimestampType, StringType, IntegerType, FloatType, DoubleType, BooleanType, StructType, StructField, ArrayType, MapType\n",
					"from pyspark.sql.window import Window\n",
					"from pyspark.sql.functions import row_number, rank, dense_rank, lag, lead, ntile\n",
					"from pyspark.sql import SQLContext\n",
					"from pyspark.sql import DataFrame\n",
					"from pyspark.sql import functions as F\n",
					"from pyspark.sql.avro.functions import from_avro, to_avro\n",
					"from pyspark.sql.streaming import DataStreamReader, DataStreamWriter\n",
					"from pyspark.sql.utils import AnalysisException\n",
					"from pyspark.sql.catalog import Catalog\n",
					"from pyspark.sql.column import Column\n",
					"from pyspark.sql.group import GroupedData\n",
					"from pyspark.sql.pandas.functions import pandas_udf\n",
					"\n",
					"from datetime import datetime, timedelta\n",
					"import pandas as pd\n",
					"import numpy as np"
				],
				"execution_count": 1
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Create table inspector_address"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"spark.sql(\"\"\"\n",
					"CREATE TABLE IF NOT EXISTS odw_harmonised_db.inspector_address (\n",
					"    StaffNumber                 STRING,\n",
					"    StreetandHouseNumber        STRING,\n",
					"    2ndAddressLine              STRING,\n",
					"    City                        STRING,\n",
					"    District                    STRING,\n",
					"    PostalCode                  STRING,\n",
					"    RegionStateProvinceCount    STRING,\n",
					"    StartDate                   DATE,\n",
					"    EndDate                     DATE,   \n",
					"    ChartingOfficer             STRING,\n",
					"    ChartingOfficerforInspector STRING,\n",
					"    SubsPSgroup                 STRING,\n",
					"    TelNo                       STRING,\n",
					"    PersonalMobile              STRING,\n",
					"    WorkMobile                  STRING,\n",
					"    Chngdon                     STRING,\n",
					"    ValHashKey                  STRING\n",
					")\n",
					"USING DELTA\n",
					"\"\"\")"
				],
				"execution_count": 172
			},
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"\n",
					"delete from odw_harmonised_db.inspector_address;\n",
					"\n",
					"-- Insert new data into the table\n",
					"INSERT INTO odw_harmonised_db.inspector_address\n",
					"(\n",
					"    StaffNumber,\n",
					"    StreetandHouseNumber,\n",
					"    2ndAddressLine,\n",
					"    City,\n",
					"    District,\n",
					"    PostalCode,\n",
					"    RegionStateProvinceCount,\n",
					"    StartDate,\n",
					"    EndDate,\n",
					"    ChartingOfficer,\n",
					"    ChartingOfficerforInspector,\n",
					"    SubsPSgroup,\n",
					"    TelNo,\n",
					"    PersonalMobile,\n",
					"    WorkMobile,\n",
					"    Chngdon,\n",
					"    ValHashKey\n",
					")\n",
					"SELECT \n",
					"    StaffNumber,\n",
					"    StreetandHouseNumber,\n",
					"    2ndAddressLine,\n",
					"    City,\n",
					"    District,\n",
					"    PostalCode,\n",
					"    RegionStateProvinceCount,\n",
					"    -- Parse StartDate in 'dd/MM/yyyy' format\n",
					"    CASE \n",
					"        WHEN StartDate IS NOT NULL AND TRIM(StartDate) != '' \n",
					"        THEN to_date(REGEXP_REPLACE(TRIM(StartDate), '[^0-9/]', ''), 'dd/MM/yyyy')\n",
					"        ELSE NULL\n",
					"    END AS StartDate,\n",
					"    -- Parse EndDate in 'dd/MM/yyyy' format and handle '31/12/9999'\n",
					"    CASE \n",
					"        WHEN EndDate IS NOT NULL AND TRIM(StartDate) != '' \n",
					"        THEN to_date(REGEXP_REPLACE(TRIM(EndDate), '[^0-9/]', ''), 'dd/MM/yyyy')\n",
					"        ELSE NULL\n",
					"    END AS EndDate,\n",
					"    -- Parse EndDate in 'dd/MM/yyyy' format and handle '31/12/9999' EndDate,\n",
					"    ChartingOfficer,\n",
					"    ChartingOfficerforInspector,\n",
					"    SubsPSgroup,\n",
					"    TelNo,\n",
					"    PersonalMobile,\n",
					"    WorkMobile,\n",
					"    Chngdon,\n",
					"    NULL AS ValHashKey  -- Ensure this is acceptable for your use case\n",
					"FROM odw_standardised_db.inspector_addresses_monthly;"
				],
				"execution_count": 173
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# HashKey build"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"\n",
					"UPDATE odw_harmonised_db.inspector_address\n",
					"SET ValHashKey = md5(\n",
					"    concat_ws('|',\n",
					"        StaffNumber,\n",
					"        StreetandHouseNumber,\n",
					"        2ndAddressLine,\n",
					"        City,\n",
					"        District,\n",
					"        PostalCode,\n",
					"        RegionStateProvinceCount,\n",
					"        StartDate,\n",
					"        EndDate,\n",
					"        ChartingOfficer,\n",
					"        ChartingOfficerforInspector,\n",
					"        --SubSSPgroup,\n",
					"        TelNo,\n",
					"        PersonalMobile,\n",
					"        WorkMobile,\n",
					"        Chngdon\n",
					"    )\n",
					")"
				],
				"execution_count": 174
			}
		]
	}
}