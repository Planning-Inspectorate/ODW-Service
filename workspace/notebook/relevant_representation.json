{
	"name": "relevant_representation",
	"properties": {
		"description": "Creation of the Relevant Representation Curated layer for use by ODT",
		"folder": {
			"name": "odw-curated"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "6c3c3bf9-824d-4b40-aa93-20a7d11d7953"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw",
				"name": "pinssynspodw",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Checking the Environment\n",
					"#### If dev or test, limiting the number of output rows and anonymisation of the sensitive fields is required."
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from notebookutils import mssparkutils\n",
					"storage_account=mssparkutils.notebook.run('/utils/py_utils_get_storage_account')\n",
					"\n",
					"is_dev = 'dev' in storage_account\n",
					"is_test = 'test' in storage_account\n",
					"\n",
					"# limiting the number of output to 20 rows for dev environment\n",
					"max_limit = 20 if is_dev else 100000000\n",
					"\n",
					"spark.sql(f\"SET MAX_LIMIT = {max_limit}\")"
				],
				"execution_count": 5
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## View odw_curated_db.vw_relevant_representation is created"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "sparksql"
					},
					"jupyter": {
						"outputs_hidden": true
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"\r\n",
					"CREATE OR REPLACE VIEW odw_curated_db.vw_relevant_representation\r\n",
					"AS\r\n",
					"\r\n",
					"SELECT DISTINCT\r\n",
					"\r\n",
					"RR.RelevantRepID                                                       AS representationId,\r\n",
					"RR.CaseReference + RR.RelevantRepID                                    AS referenceId,\r\n",
					"''                                                                     AS examinationLibraryRef,\r\n",
					"RR.CaseReference                                                       AS caseReference,\r\n",
					"RR.CaseNodeID                                                          AS caseId,\r\n",
					"RR.RelevantRepStatus                                                   AS Status,\r\n",
					"RR.RepresentationOriginal                                              AS originalRepresentation,\r\n",
					"CASE \r\n",
					"    WHEN RR.RepresentationRedacted IS NULL\r\n",
					"    THEN '0'\r\n",
					"    ELSE '1'\r\n",
					"END                                                                    AS redacted,\r\n",
					"RR.RepresentationRedacted                                              AS redactedRepresentation,\r\n",
					"RR.RedactedBy                                                          AS redactedBy,\r\n",
					"RR.Notes                                                               AS redactedNotes,\r\n",
					"RR.RelRepOnBehalfOf                                                    AS representationFrom,\r\n",
					"CASE \r\n",
					"    WHEN SU.serviceUserType = 'RepresentationContact'\r\n",
					"    THEN RR.ContactID\r\n",
					"    ELSE ''\r\n",
					"END                                                                    AS representedId,\r\n",
					"CASE \r\n",
					"    WHEN SU.serviceUserType = 'Agent'\r\n",
					"    THEN RR.ContactID\r\n",
					"    ELSE ''\r\n",
					"END                                                                    AS representativeId,\r\n",
					"RR.RelRepOrganisation                                                  AS representationType,\r\n",
					"RR.DateReceived                                                        AS dateReceived,\r\n",
					"RR.AttachmentID                                                        AS attachmentIds\r\n",
					"\r\n",
					"\r\n",
					"FROM odw_harmonised_db.casework_nsip_relevant_representation_dim       AS RR\r\n",
					"JOIN odw_curated_db.nsip_service_user                                  AS SU\r\n",
					"    ON SU.ID = RR.ContactID\r\n",
					"\r\n",
					"WHERE RR.ISActive = 'Y'\r\n",
					"\r\n",
					"--RR.CaseReference = 'TR020002'\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					""
				],
				"execution_count": 6
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Table odw_curated_db.nsip_service_user is created"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.sql import SparkSession\r\n",
					"spark = SparkSession.builder.getOrCreate()\r\n",
					"view_df = spark.sql('SELECT * FROM odw_curated_db.vw_relevant_representation')\r\n",
					"view_df.write.mode(\"overwrite\").saveAsTable('odw_curated_db.relevant_representation')"
				],
				"execution_count": 7
			}
		]
	}
}