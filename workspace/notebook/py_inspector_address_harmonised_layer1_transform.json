{
	"name": "py_inspector_address_harmonised_layer1_transform",
	"properties": {
		"folder": {
			"name": "odw-harmonised"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinsodwspark",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "66f0d4b5-019b-4ec5-8c6c-2bea1fb21012"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-odw-data-dev-rg/providers/Microsoft.Synapse/workspaces/pins-odw-data-dev-syn-ws/bigDataPools/pinsodwspark",
				"name": "pinsodwspark",
				"type": "Spark",
				"endpoint": "https://pins-odw-data-dev-syn-ws.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinsodwspark",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.1",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"drop table if exists odw_workspace_db.inspector_address_layer1_harmonised;\r\n",
					"create table odw_workspace_db.inspector_address_layer1_harmonised as \r\n",
					"SELECT\t\r\n",
					"      Staff_Number as PINS_Join_staff_number\r\n",
					"      ,Postal_Code inspector_postcode\r\n",
					"      ,Start_Date date_in\r\n",
					"      ,End_Date date_out\r\n",
					"      ,Charting_Officer_for_Inspector\r\n",
					"\t  ,concat(Street_and_House_Number, ' ',2nd_Address_Line,' ',City,' ',District,' ' ,Postal_Code,' ',Region) Inspector_Address\r\n",
					"\t  ,Telephone_no Telephone_no\r\n",
					"      ,Work_Mobile Work_Mobile,\r\n",
					"      PDAC_ETL_Date\r\n",
					" FROM odw_standardised_db.inspector_address \r\n",
					" where PDAC_ETL_Date > (select LastRun from odw_config_db.pipeline_runs where sourceName ='inspector_address' )\t\r\n",
					" "
				],
				"execution_count": 18
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					}
				},
				"source": [
					"%%sql\r\n",
					"merge into odw_config_db.pipeline_runs target\r\n",
					"using (select 'inspector_address' as source_name , max(PDAC_ETL_Date ) as max_PDAC_ETL_Date from odw_workspace_db.sap_hr_layer1_harmonised ) updates\r\n",
					"on target.sourceName=updates.source_name\r\n",
					"WHEN MATCHED THEN\r\n",
					"  UPDATE SET target.LastRun = updates.max_PDAC_ETL_Date\r\n",
					"WHEN NOT MATCHED\r\n",
					"  THEN INSERT (sourceName,LastRun) VALUES (source_name, max_PDAC_ETL_Date)"
				],
				"execution_count": null
			}
		]
	}
}