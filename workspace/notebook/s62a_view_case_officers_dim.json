{
	"name": "s62a_view_case_officers_dim",
	"properties": {
		"folder": {
			"name": "archive/odw-harmonised/s62a_casework"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw34",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "742c3133-561d-401a-b0a7-d3f4becf1411"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": true,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw34",
				"name": "pinssynspodw34",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw34",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 32,
				"automaticScaleJobs": true
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%run utils/py_logging_decorator"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Initialize Application Insight Logging functions"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"%run utils/py_utils_common_logging_output"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from datetime import datetime\n",
					"from notebookutils import mssparkutils\n",
					"\n",
					"# Define variables\n",
					"target_table = \"odw_harmonised_db.s62a_view_case_officers_dim\"\n",
					"\n",
					"# Initialize tracking variables\n",
					"start_exec_time = str(datetime.now())\n",
					"insert_count = 0\n",
					"update_count = 0\n",
					"delete_count = 0"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"# Initialize Application Insights logger\n",
					"app_insight_logger = ProcessingLogger()"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"The below cell is creating the table if it does not exist"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Process s62a_view_case_officers_dim data with App Insights logging\n",
					"try:\n",
"    logInfo('Starting s62a_view_case_officers_dim processing')\n",
					"    \n",
					"    db_name: str = 'odw_harmonised_db'\n",
					"    table_name: str = 's62a_view_case_officers_dim'\n",
					"    \n",
					"    def test_table_exists(db_name: str, table_name: str) -> bool:\n",
					"        spark.sql(f\"USE {db_name}\")\n",
					"        tables_df = spark.sql(\"SHOW TABLES\")\n",
					"        table_names = [row['tableName'] for row in tables_df.collect()]\n",
					"        return table_name in table_names\n",
					"    \n",
					"    if test_table_exists(db_name, table_name):\n",
"        logInfo(f'Table {db_name}.{table_name} exists in harmonised, updating the harmonised layer')\n",
					"    else:\n",
"        logInfo(f'Table {db_name}.{table_name} does not exist, creating table first.')\n",
					"        mssparkutils.notebook.run('/py_odw_harmonised_table_creation',300,{'specific_table': table_name } )\n",
"        logInfo(f'Table {db_name}.{table_name} created')\n",
					"        \n",
					"except Exception as e:\n",
"    logError(f'Error in table existence check: {str(e)}')\n",
					"    raise"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Check for new, updated or deleted data\n",
					"- This script checks for new, updated or deleted data by checking the source data (horizon tables) against the target (odw_harmonised_db.casework tables)\n",
					"- **New Data:** where an main Reference in the source does not exist in the target, then NewData flag is set to 'Y'\n",
					"- **Updated data:** Comparison occurs on Reference Fields in source and in target where the row hash is different i.e. there is a change in one of the columns. NewData flag is set to 'Y'\n",
					"- **Deleted data:** where an Reference info in the target exists but the same identifyers don't exist in the source. DeletedData flag is set to 'Y'\n",
					"\n",
					"## View s62a_view_case_officers_dim_new is created"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"-- Build s62a_view_case_officers_dim_new table\r\n",
					"-- Gets modified or deleted from source rows\r\n",
					"\r\n",
					"CREATE OR REPLACE TEMPORARY VIEW s62a_view_case_officers_dim_new \r\n",
					"\r\n",
					"     AS\r\n",
					"\r\n",
					"-- gets data that matches of SourceID and flags that it is modified based on a row (md5) hash. Flags as \"NewData\"\r\n",
					"-- gets data that is in the target but not in source. Flags as \"DeletedData\"\r\n",
					"\r\n",
					"SELECT DISTINCT\r\n",
					"    CASE\r\n",
					"        WHEN T1.CaseDataID IS NULL\r\n",
					"        THEN T2.S62AViewCaseOfficersId\r\n",
					"        ELSE NULL\r\n",
					"    END                             AS S62AViewCaseOfficersId,\r\n",
					"    T1.CaseDataID                   AS CaseDataID,\r\n",
					"    T1.CaseLeader                   AS CaseLeader,\r\n",
					"    T1.CaseAdministrator            AS CaseAdministrator,\r\n",
					"    T1.LegalOfficer                 AS LegalOfficer,\r\n",
					"    T1.EIAOfficer                   AS EIAOfficer,\r\n",
					"    T1.CaseOfficer                  AS CaseOfficer,\r\n",
					"    T1.AppointedPerson              AS AppointedPerson,\r\n",
					"    \"0\"                             AS Migrated,\r\n",
					"    \"Casework\"                      AS ODTSourceSystem,\r\n",
					"    T3.SourceSystemID               AS SourceSystemID,\r\n",
					"    to_timestamp(T1.expected_from)  AS IngestionDate,\r\n",
					"    NULL                            AS ValidTo,\r\n",
					"    md5(\r\n",
					"        concat(\r\n",
					"            IFNULL(T1.CaseDataID,'.'),\r\n",
					"            IFNULL(T1.CaseLeader,'.'),\r\n",
					"            IFNULL(T1.CaseAdministrator,'.'),\r\n",
					"            IFNULL(T1.LegalOfficer,'.'),\r\n",
					"            IFNULL(T1.EIAOfficer,'.'),\r\n",
					"            IFNULL(T1.CaseOfficer,'.'),\r\n",
					"            IFNULL(T1.AppointedPerson,'.')\r\n",
					"        ))                          AS RowID, -- this hash should contain all the defining fields\r\n",
					"    'Y'                             AS IsActive,\r\n",
					"    T2.IsActive                     AS HistoricIsActive\r\n",
					"\r\n",
					"FROM odw_standardised_db.horizon_s62a_view_case_officers T1\r\n",
					"LEFT JOIN odw_harmonised_db.main_sourcesystem_fact T3 ON \"Casework\" = T3.Description AND T3.IsActive = 'Y'\r\n",
					"FULL JOIN odw_harmonised_db.s62a_view_case_officers_dim T2 ON T1.CaseDataID = T2.CaseDataID AND T2.IsActive = 'Y'\r\n",
					"WHERE\r\n",
					"    -- flags new data        \r\n",
					"    (CASE\r\n",
					"        WHEN T1.CaseDataID = T2.CaseDataID AND md5(\r\n",
					"            concat(\r\n",
					"                IFNULL(T1.CaseDataID,'.'),\r\n",
					"                IFNULL(T1.CaseLeader,'.'),\r\n",
					"                IFNULL(T1.CaseAdministrator,'.'),\r\n",
					"                IFNULL(T1.LegalOfficer,'.'),\r\n",
					"                IFNULL(T1.EIAOfficer,'.'),\r\n",
					"                IFNULL(T1.CaseOfficer,'.'),\r\n",
					"                IFNULL(T1.AppointedPerson,'.')\r\n",
					"            )) <> T2.RowID  -- same row, changed data\r\n",
					"        THEN 'Y'\r\n",
					"        WHEN T2.CaseDataID IS NULL -- new data\r\n",
					"        THEN 'Y'\r\n",
					"    ELSE 'N'\r\n",
					"    END  = 'Y')\r\n",
					"    AND T1.CaseDataID IS NOT NULL\r\n",
					"    AND T1.expected_from = (SELECT MAX(expected_from) FROM odw_standardised_db.horizon_s62a_view_case_officers)\r\n",
					";"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Dataset is created that contains changed data and corresponding target data\n",
					"- This script combines data that has been updated, Deleted or is new, with corresponding target data\n",
					"- View **s62a_view_case_officers_dim_new** is unioned to the target data filter to only those rows where changes have been detected\n",
					"## View s62a_view_case_officers_dim_changed_rows is created"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"-- Create new and updated dataset\r\n",
					"\r\n",
					"CREATE OR REPLACE TEMPORARY VIEW s62a_view_case_officers_dim_changed_rows\r\n",
					"\r\n",
					"    AS\r\n",
					"\r\n",
					"-- gets updated, deleted and new rows \r\n",
					"Select \r\n",
					"    S62AViewCaseOfficersId,\r\n",
					"    CaseDataID,\r\n",
					"    CaseLeader,\r\n",
					"    CaseAdministrator,\r\n",
					"    LegalOfficer,\r\n",
					"    EIAOfficer,\r\n",
					"    CaseOfficer,\r\n",
					"    AppointedPerson,\r\n",
					"    Migrated,\r\n",
					"    ODTSourceSystem,\r\n",
					"    SourceSystemID,\r\n",
					"    IngestionDate,\r\n",
					"    ValidTo,\r\n",
					"    RowID,\r\n",
					"    IsActive\r\n",
					"\r\n",
					"From s62a_view_case_officers_dim_new WHERE HistoricIsActive = 'Y' or HistoricIsActive IS NULL\r\n",
					"\r\n",
					"    UNION ALL\r\n",
					"\r\n",
					"-- gets original versions of updated rows so we can update EndDate and set IsActive flag to 'N'\r\n",
					"SELECT\r\n",
					"    S62AViewCaseOfficersId,\r\n",
					"    CaseDataID,\r\n",
					"    CaseLeader,\r\n",
					"    CaseAdministrator,\r\n",
					"    LegalOfficer,\r\n",
					"    EIAOfficer,\r\n",
					"    CaseOfficer,\r\n",
					"    AppointedPerson,\r\n",
					"    Migrated,\r\n",
					"    ODTSourceSystem,\r\n",
					"    SourceSystemID,\r\n",
					"    IngestionDate,\r\n",
					"    ValidTo,\r\n",
					"    RowID,\r\n",
					"    IsActive\r\n",
					"    \r\n",
					"FROM odw_harmonised_db.s62a_view_case_officers_dim\r\n",
					"WHERE CaseDataID IN (SELECT CaseDataID FROM s62a_view_case_officers_dim_new WHERE CaseDataID IS NULL) AND IsActive = 'Y'; "
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"\n",
					"CREATE OR REPLACE TEMPORARY VIEW Loading_month\n",
					"\n",
					"    AS\n",
					"\n",
					"SELECT DISTINCT\n",
					"    IngestionDate AS IngestionDate,\n",
					"    to_timestamp(date_sub(IngestionDate,1)) AS ClosingDate,\n",
					"    'Y' AS IsActive\n",
					"\n",
					"FROM s62a_view_case_officers_dim_new;\n",
					"\n",
					"CREATE OR REPLACE TEMPORARY VIEW s62a_view_case_officers_dim_changed_rows_final\n",
					"\n",
					"    AS\n",
					"\n",
					"SELECT \n",
					"    S62AViewCaseOfficersId,\n",
					"    CaseDataID,\n",
					"    CaseLeader,\n",
					"    CaseAdministrator,\n",
					"    LegalOfficer,\n",
					"    EIAOfficer,\n",
					"    CaseOfficer,\n",
					"    AppointedPerson,\n",
					"    Migrated,\n",
					"    ODTSourceSystem,\n",
					"    T1.SourceSystemID,\n",
					"    T1.IngestionDate,\n",
					"    T1.ValidTo,\n",
					"    T1.RowID,\n",
					"    T1.IsActive,\n",
					"    T2.ClosingDate\n",
					"FROM s62a_view_case_officers_dim_changed_rows T1\n",
					"FULL JOIN Loading_month T2 ON T1.IsActive = T2.IsActive"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# View s62a_view_case_officers_dim_changed_rows is used in a merge (Upsert) statement into the target table\n",
					"- **WHEN MATCHED** ON the surrogate Key (i.e. Employees62a_view_case_officers_dim), EndDate is set to today -1 day and the IsActive flag is set to 'N'\n",
					"- **WHEN NOT MATCHED** ON the surrogate Key, insert rows\n",
					"## Table odw_harmonised_db.s62a_view_case_officers_dim is updated"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"\r\n",
					"-- merge into dim table\r\n",
					"MERGE INTO odw_harmonised_db.s62a_view_case_officers_dim AS Target\r\n",
					"USING s62a_view_case_officers_dim_changed_rows_final AS Source\r\n",
					"\r\n",
					"ON Source.CaseDataID = Target.CaseDataID AND Target.IsActive = 'Y'\r\n",
					"\r\n",
					"-- For Updates existing rows\r\n",
					"\r\n",
					"WHEN MATCHED\r\n",
					"    THEN \r\n",
					"    UPDATE SET\r\n",
					"    Target.ValidTo = to_timestamp(ClosingDate),\r\n",
					"    Target.IsActive = 'N'\r\n",
					"\r\n",
					"-- Insert completely new rows\r\n",
					"\r\n",
					"WHEN NOT MATCHED \r\n",
					"    THEN INSERT (\r\n",
					"        S62AViewCaseOfficersId,\r\n",
					"        CaseDataID,\r\n",
					"        CaseLeader,\r\n",
					"        CaseAdministrator,\r\n",
					"        LegalOfficer,\r\n",
					"        EIAOfficer,\r\n",
					"        CaseOfficer,\r\n",
					"        AppointedPerson,\r\n",
					"        Migrated,\r\n",
					"        ODTSourceSystem,\r\n",
					"        SourceSystemID,\r\n",
					"        IngestionDate,\r\n",
					"        ValidTo,\r\n",
					"        RowID,\r\n",
					"        IsActive)\r\n",
					"    VALUES (\r\n",
					"        Source.S62AViewCaseOfficersId,\r\n",
					"        Source.CaseDataID,\r\n",
					"        Source.CaseLeader,\r\n",
					"        Source.CaseAdministrator,\r\n",
					"        Source.LegalOfficer,\r\n",
					"        Source.EIAOfficer,\r\n",
					"        Source.CaseOfficer,\r\n",
					"        Source.AppointedPerson,\r\n",
					"        Source.Migrated,\r\n",
					"        Source.ODTSourceSystem,\r\n",
					"        Source.SourceSystemID,\r\n",
					"        Source.IngestionDate,\r\n",
					"        Source.ValidTo,\r\n",
					"        Source.RowID,\r\n",
					"        Source.IsActive)\r\n",
					"     ;   "
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Fix the IDs\n",
					"- No auto-increment feature is available in delta tables, therefore we need to create new IDs for the inserted rows\n",
					"- This is done by select the target data and using INSERT OVERWRITE to re-insert the data is a new Row Number\n",
					"## Table odw_harmonised_db.s62a_view_case_officers_dim is updated"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"-- Insert new s62a_view_case_officers_dim\r\n",
					"\r\n",
					"INSERT OVERWRITE odw_harmonised_db.s62a_view_case_officers_dim\r\n",
					"\r\n",
					"SELECT \r\n",
					"    ROW_NUMBER() OVER (ORDER BY S62AViewCaseOfficersId NULLS LAST) AS S62AViewCaseOfficersId,\r\n",
					"    CaseDataID,\r\n",
					"    CaseLeader,\r\n",
					"    CaseAdministrator,\r\n",
					"    LegalOfficer,\r\n",
					"    EIAOfficer,\r\n",
					"    CaseOfficer,\r\n",
					"    AppointedPerson,\r\n",
					"    Migrated,\r\n",
					"    ODTSourceSystem,\r\n",
					"    SourceSystemID,\r\n",
					"    IngestionDate,\r\n",
					"    ValidTo,\r\n",
					"    RowID,\r\n",
					"    IsActive\r\n",
					"    \r\n",
					"FROM odw_harmonised_db.s62a_view_case_officers_dim;\r\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Processing summary cell"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Count records processed and log results\n",
					"try:\n",
					"    # Get row counts for logging\n",
					"    changed_rows_df = spark.sql(\"SELECT COUNT(*) as count FROM s62a_view_case_officers_dim_changed_rows_final\")\n",
					"    changed_count = changed_rows_df.collect()[0]['count']\n",
					"    \n",
					"    final_table_df = spark.sql(\"SELECT COUNT(*) as count FROM odw_harmonised_db.s62a_view_case_officers_dim WHERE IsActive = 'Y'\")\n",
					"    final_count = final_table_df.collect()[0]['count']\n",
					"    \n",
"    logInfo(f's62a_view_case_officers_dim processing completed successfully. Processed {changed_count} changed rows. Final active record count: {final_count}')\n",
					"    \n",
					"    # Calculate execution duration\n",
					"    end_exec_time = str(datetime.now())\n",
					"    execution_duration = (datetime.strptime(end_exec_time[:19], '%Y-%m-%d %H:%M:%S') - \n",
					"                         datetime.strptime(start_exec_time[:19], '%Y-%m-%d %H:%M:%S')).total_seconds()\n",
					"    \n",
					"    # Log successful processing with App Insights structure\n",
					"    app_insight_logger.add_table_result(\n",
					"        delta_table_name=target_table,\n",
					"        insert_count=changed_count,\n",
					"        update_count=0,  # Combined with insert in this process\n",
					"        delete_count=0,  # Handled via IsActive flag\n",
					"        table_result=\"success\",\n",
					"        start_exec_time=start_exec_time,\n",
					"        end_exec_time=end_exec_time,\n",
					"        total_exec_time=execution_duration,\n",
					"        error_message=\"\"\n",
					"    )
					"        \n",
					"except Exception as processing_error:\n",
					"    error_message = f'Error processing s62a_view_case_officers_dim data: {str(processing_error)}'\n",
"    logError(error_message)\n",
					"    \n",
					"    # Calculate execution duration for error case\n",
					"    end_exec_time = str(datetime.now())\n",
					"    execution_duration = (datetime.strptime(end_exec_time[:19], '%Y-%m-%d %H:%M:%S') - \n",
					"                         datetime.strptime(start_exec_time[:19], '%Y-%m-%d %H:%M:%S')).total_seconds()\n",
					"    \n",
					"    app_insight_logger.add_table_result(\n",
					"        delta_table_name=target_table,\n",
					"        insert_count=0,\n",
					"        update_count=0,\n",
					"        delete_count=0,\n",
					"        table_result=\"failed\",\n",
					"        start_exec_time=start_exec_time,\n",
					"        end_exec_time=end_exec_time,\n",
					"        total_exec_time=execution_duration,\n",
					"        error_message=error_message\n",
					"    )
					"    raise\n",
					"\n",
					"# Generate and return processing results for notebook exit\n",
					"processing_results = app_insight_logger.generate_processing_results()\n",
					"mssparkutils.notebook.exit(processing_results)"
				],
				"execution_count": null
			}
		]
	}
}
