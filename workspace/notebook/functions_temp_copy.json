{
	"name": "functions_temp_copy",
	"properties": {
		"folder": {
			"name": "4-odw-harmonised-to-curated"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodwpr",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "ce12708a-56c8-42a1-9179-78da46192dfa"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": true,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodwpr",
				"name": "pinssynspodwpr",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodwpr",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def create_table_from_schema(jsonschema:str, db_name:str, table_name:str, target_container:str, target_folder:str, change_data_feed=False):\r\n",
					"    '''\r\n",
					"    Function to create a table from a schema definition. Schema merge is disabled.\r\n",
					"    \r\n",
					"    Args:\r\n",
					"    jsonschema (str) : json representation of the dataframe schema\r\n",
					"    db_name (str) : name of the database the table will be created within\r\n",
					"    table_name (str) : name of the table the parquet will be associated with\r\n",
					"    target_container (str) : storage container within which the parquet will be located\r\n",
					"    target_folder (str) : folder within which the filelog and parquet file will be located\r\n",
					"    \r\n",
					"    Returns:\r\n",
					"        Nothing\r\n",
					"\r\n",
					"    Actions:\r\n",
					"        Creates a table if the table doesn't already exist in a target location \r\n",
					"        \r\n",
					"    Exceptions:\r\n",
					"        NameError(f\"{db_name} doesn't exist\") - generated if the desired database doesn't exist already\r\n",
					"        ValueError(\"The table is represented by multiple parquet files- please investigate!\")\r\n",
					"        ValueError(f\"Table already exists but the location provided doesn't match the existing parquet location for the table!, {table_deets}, {target_loc}\")\r\n",
					"    '''\r\n",
					"    ### type checks\r\n",
					"\r\n",
					"    ### imports\r\n",
					"    from pyspark.sql.types import StructType\r\n",
					"    from pyspark.sql import SparkSession\r\n",
					"    import json\r\n",
					"    from delta import DeltaTable\r\n",
					"    import logging\r\n",
					"    logger = logging.getLogger(__name__)\r\n",
					"    spark = SparkSession.builder.getOrCreate()\r\n",
					"\r\n",
					"    ### define target location\r\n",
					"    target_loc = target_container + target_folder\r\n",
					"    \r\n",
					"    ### use json to create dataframe\r\n",
					"    schema = StructType.fromJson(json.loads(jsonschema))\r\n",
					"    df = spark.createDataFrame([], schema)\r\n",
					"\r\n",
					"    ### table checks\r\n",
					"    if any([dbs.name == db_name for dbs in spark.catalog.listDatabases()]):\r\n",
					"        if any([table.name == table_name for table in spark.catalog.listTables(db_name)]):\r\n",
					"            table_details = spark.sql(f\"DESCRIBE DETAIL {db_name}.{table_name}\").toPandas()\r\n",
					"            if len(table_details) > 1:\r\n",
					"                raise ValueError(\"S2R-SAPHR: The table is represented by multiple parquet files- please investigate!\")\r\n",
					"            else:\r\n",
					"                if table_details['location'][0].rstrip(\"/\") == target_loc.rstrip(\"/\"):\r\n",
					"                    logger.info(f\"S2R-SAPHR: Table already exists with correct location\")\r\n",
					"                else:\r\n",
					"                    table_deets = table_details['location'][0]\r\n",
					"        \r\n",
					"                    raise ValueError(f\"S2R-SAPHR: Table already exists but the location provided doesn't match the existing parquet location for the table!, {table_deets}, {target_loc}\")\r\n",
					"        else:\r\n",
					"            ### create spark sql table from parquet\r\n",
					"            if any([dbs.name == db_name for dbs in spark.catalog.listDatabases()]):\r\n",
					"            ### write df to parquet location\r\n",
					"                if not (DeltaTable.isDeltaTable(spark,target_loc)):\r\n",
					"                    df.write.option(\"mergeSchema\", \"false\").format('delta').save(target_loc)# no overwrite on table creation\r\n",
					"                    \r\n",
					"                if not any([table.name == table_name for table in spark.catalog.listTables(db_name)]):\r\n",
					"                    spark.sql(\"CREATE TABLE {0}.{1} USING DELTA LOCATION '{2}'\".format(db_name,table_name,target_loc))\r\n",
					"                    if change_data_feed == True:\r\n",
					"                        spark.sql(\"ALTER TABLE {0}.{1} SET TBLPROPERTIES (delta.enableChangeDataFeed = true)\".format(db_name,table_name))\r\n",
					"    else:\r\n",
					"        raise NameError(f\"{db_name} doesn't exist\")"
				],
				"execution_count": 3
			}
		]
	}
}