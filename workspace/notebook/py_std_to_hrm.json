{
	"name": "py_std_to_hrm",
	"properties": {
		"folder": {
			"name": "odw-harmonised"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "fea845c3-3fbe-4405-b58c-fb403e702cb9"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw",
				"name": "pinssynspodw",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"tags": [
						"parameters"
					]
				},
				"source": [
					"entity_name = 'nsip-s51-advice'"
				],
				"execution_count": 183
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.sql import SparkSession\n",
					"from notebookutils import mssparkutils\n",
					"import json\n",
					"from datetime import datetime, date\n",
					"import pandas as pd\n",
					"from IPython.display import display\n",
					"\n",
					"spark = SparkSession.builder.getOrCreate()\n",
					"\n",
					"storage_account=mssparkutils.notebook.run('/utils/py_utils_get_storage_account')\n",
					"\n",
					"path_to_orchestration_file = \"abfss://odw-config@\"+storage_account+\"orchestration/orchestration.json\"\n",
					"df = spark.read.option(\"multiline\",\"true\").json(path_to_orchestration_file)\n",
					"definitions = json.loads(df.toJSON().first())['definitions']\n",
					"\n",
					"definition = next((d for d in definitions if entity_name == d['Source_Filename_Start']), None)\n",
					"\n",
					"if not definition:\n",
					"    mssparkutils.notebook.exit(f\"Definition not found for {entity_name}\")"
				],
				"execution_count": 184
			},
			{
				"cell_type": "code",
				"source": [
					"std_db = 'odw_standardised_db'\n",
					"hrm_db = 'odw_harmonised_db'\n",
					"\n",
					"std_table = definition['Standardised_Table_Name']\n",
					"hrm_table = definition['Harmonised_Table_Name']\n",
					"hrm_incremental_key = definition['Harmonised_Incremental_Key']\n",
					"entity_primary_key = definition['Entity_Primary_Key']\n",
					"\n",
					"mapping = definition['Std_To_Hrm_Mapping']"
				],
				"execution_count": 185
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Get the latest ingested data in Standardised"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"latest_ingestion = spark.sql(f\"SELECT * FROM {std_db}.{std_table} WHERE expected_from = (SELECT MAX(expected_from) FROM {std_db}.{std_table}) ORDER BY message_enqueued_time_utc\")\n",
					"\n",
					"# remove the column ingested_datetime and then removing duplicates\n",
					"latest_ingestion = latest_ingestion.toPandas()\n",
					"latest_ingestion = latest_ingestion.drop(columns=['ingested_datetime']).drop_duplicates()\n",
					"\n",
					"create_df = latest_ingestion[latest_ingestion['message_type'] == 'Create']\n",
					"update_df = latest_ingestion[latest_ingestion['message_type'] == 'Update']\n",
					"delete_df = latest_ingestion[latest_ingestion['message_type'] == 'Delete']\n",
					"\n",
					"target_df = spark.sql(f\"SELECT * FROM {hrm_db}.{hrm_table}\").toPandas()"
				],
				"execution_count": 186
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Utility functions"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import hashlib\n",
					"\n",
					"def calculate_md5(row):\n",
					"    row_str = ''.join(map(str, row))\n",
					"    md5_hash = hashlib.md5(row_str.encode()).hexdigest()\n",
					"    return md5_hash\n",
					"\n",
					"def apply_mapping(df):\n",
					"    target_df = pd.DataFrame()\n",
					"    for target_col, source_col in mapping.items():\n",
					"        target_df['IngestionDate'] = df['expected_from']\n",
					"        target_df['MessageEnqueue'] = df['message_enqueued_time_utc']\n",
					"        if source_col in df.columns:\n",
					"            if 'Date' in target_col:\n",
					"                target_df[target_col] = pd.to_datetime(df[source_col])\n",
					"            else:\n",
					"                target_df[target_col] = df[source_col]\n",
					"        else:\n",
					"            target_df[target_col] = source_col\n",
					"\n",
					"    target_df['RowID'] = target_df.apply(calculate_md5, axis=1)\n",
					"\n",
					"    source_system_df = spark.sql(f\"SELECT * FROM {hrm_db}.main_sourcesystem_fact WHERE Description = 'Casework' AND IsActive = 'Y'\")\n",
					"    target_df['SourceSystemID'] = source_system_df.toPandas().at[0, 'SourceSystemID']\n",
					"\n",
					"    target_df['Migrated'] = '1'\n",
					"    target_df['ODTSourceSystem'] = 'ODT'\n",
					"    target_df['ValidTo'] = None\n",
					"    target_df['IsActive'] = 'Y'\n",
					"    target_df[hrm_incremental_key] = ''\n",
					"\n",
					"    return target_df\n",
					"\n",
					"def insert_rows_in_df(source_df, target_df, incremental_key):\n",
					"    # appending the incremental key\n",
					"    max_id = int(target_df[incremental_key].astype(int).max())\n",
					"    for index, rows in source_df.iterrows():\n",
					"        max_id += 1\n",
					"        source_df.loc[index, incremental_key] = str(max_id)\n",
					"        \n",
					"    return pd.concat([target_df, source_df], ignore_index=True)"
				],
				"execution_count": 187
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Handling new rows"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"source_df = apply_mapping(create_df).drop_duplicates()\n",
					"target_df = insert_rows_in_df(source_df, target_df, hrm_incremental_key)"
				],
				"execution_count": 188
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Handling updated rows"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"source_df = apply_mapping(update_df)\n",
					"source_df = source_df.drop_duplicates().sort_values(by='MessageEnqueue')\n",
					"row_closing_time = datetime.now()\n",
					"\n",
					"for index, row in source_df.iterrows():\n",
					"    row_closing_time = row['MessageEnqueue']\n",
					"    mask = (target_df['IsActive'] == 'Y') & (target_df[entity_primary_key] == row[entity_primary_key])\n",
					"    target_df.loc[mask, 'IsActive'] = 'N'\n",
					"    target_df.loc[mask, 'ValidTo'] = datetime.strptime(row['MessageEnqueue'], \"%Y-%m-%dT%H:%M:%S.%f%z\")\n",
					"    target_df = insert_rows_in_df(pd.DataFrame([row]), target_df, hrm_incremental_key)\n",
					"\n",
					"target_df.drop(columns=['MessageEnqueue'], inplace=True)"
				],
				"execution_count": 189
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Handling deleted rows"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"source_df = apply_mapping(delete_df)\n",
					"mask = (target_df['IsActive'] == 'Y') & target_df[entity_primary_key].isin(source_df[entity_primary_key])\n",
					"target_df.loc[mask, 'IsActive'] = 'N'\n",
					"target_df.loc[mask, 'ValidTo'] = datetime.now()"
				],
				"execution_count": 190
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Writing the dataframe to the harmonised table"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# display(target_df)\n",
					"df_to_update = spark.createDataFrame(target_df)\n",
					"df_to_update.write.format(\"delta\").mode(\"overwrite\").saveAsTable(f\"{hrm_db}.{hrm_table}\")"
				],
				"execution_count": 191
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"\n",
					"-- delete from odw_harmonised_db.casework_nsip_advice_dim where casereference = 'TR0310022';\n",
					"select * from odw_harmonised_db.casework_nsip_advice_dim where casereference = 'TR0310022'"
				],
				"execution_count": 192
			}
		]
	}
}