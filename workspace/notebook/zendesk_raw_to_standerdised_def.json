{
	"name": "zendesk_raw_to_standerdised_def",
	"properties": {
		"folder": {
			"name": "odw-raw"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "71eb64d7-7dfd-4c89-a347-c5d77a5a3abc"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw",
				"name": "pinssynspodw",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"from collections.abc import Mapping\r\n",
					"from itertools import chain\r\n",
					"from operator import add\r\n",
					"#ignore FutureWarning messages \r\n",
					"import warnings\r\n",
					"warnings.filterwarnings(\"ignore\", message=\"iteritems is deprecated\")\r\n",
					"from notebookutils import mssparkutils\r\n",
					"from pprint import pprint as pp\r\n",
					"from genson import SchemaBuilder"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"_FLAG_FIRST = object()\r\n",
					"\r\n",
					"def flattenDict(d, join=add, lift=lambda x:(x,)):\r\n",
					"    '''\r\n",
					"    Description: This fucntion role is to flatten a dictionary \r\n",
					"    Parameters:\r\n",
					"    Outputs:\r\n",
					"    Returns:\r\n",
					"    '''\r\n",
					"    results = []\r\n",
					"    def visit(subdict, results, partialKey):\r\n",
					"        for k,v in subdict.items():\r\n",
					"            newKey = lift(k) if partialKey==_FLAG_FIRST else join(partialKey,lift(k))\r\n",
					"            if isinstance(v,Mapping):\r\n",
					"                visit(v, results, newKey)\r\n",
					"            else:\r\n",
					"                results.append((newKey,v))\r\n",
					"    visit(d, results, _FLAG_FIRST)\r\n",
					"    return results"
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def mount_from_datalake():\r\n",
					"    '''\r\n",
					"    Description:Mounting a file path from the datalake\r\n",
					"    Parameters:\r\n",
					"    Outputs:\r\n",
					"    Returns:\r\n",
					"\r\n",
					"    '''\r\n",
					"        jobId = mssparkutils.env.getJobId()\r\n",
					"        mssparkutils.fs.unmount(\"/zendesk_folder\") \r\n",
					"        mssparkutils.fs.mount( \r\n",
					"        'abfss://odw-raw@pinsstodwdevuks9h80mb.dfs.core.windows.net/JsonTest/', \r\n",
					"        \"/zendesk_folder\", \r\n",
					"        {\"linkedService\":\"ls_storage\"} \r\n",
					"        )\r\n",
					"mount_from_datalake()"
				],
				"execution_count": 3
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def write_to_single_file():\r\n",
					"\r\n",
					"    with open(\"export-2023-03-15-1051-10932060-13758561992081e5c3.json\", \"r\", encoding=\"utf-8\") as zendesk_json_raw:\r\n",
					"\r\n",
					"    print(zendesk_json_raw)\r\n",
					"\r\n",
					"    zendesk_json_decoded = zendesk_json_raw.read()\r\n",
					"\r\n",
					"    zendesk_json_array = zendesk_json_decoded.split(\"\\n\")\r\n",
					"\r\n",
					"    item_number = 0\r\n",
					"\r\n",
					"    for zendesk_json_item in zendesk_json_array:\r\n",
					"\r\n",
					"        if zendesk_json_item != \"\":\r\n",
					"\r\n",
					"            zendesk_json_dict = json.loads(zendesk_json_item)\r\n",
					"\r\n",
					"            with open(f\"./all_zendesk_items/output_{item_number}.json\", \"w\", encoding=\"utf-8\") as write_single_zendesk_json:\r\n",
					"\r\n",
					"                json.dump(zendesk_json_dict, write_single_zendesk_json)\r\n",
					"\r\n",
					"            item_number += 1\r\n",
					"write_to_single_file()"
				],
				"execution_count": 4
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"builder = SchemaBuilder()\r\n",
					"\r\n",
					"builder.add_schema({\"type\": \"object\", \"properties\": {}})\r\n",
					"\r\n",
					"for i in range(2918):\r\n",
					"\r\n",
					"    with open(f\"./all_zendesk_items/output_{i}.json\", \"r\") as big_json:\r\n",
					"\r\n",
					"        import json\r\n",
					"        \r\n",
					"        loaded_json = json.load(big_json)\r\n",
					"\r\n",
					"        builder.add_object(loaded_json )\r\n",
					"\r\n",
					"with open(\"output_schema.json\", \"w\") as output_json:\r\n",
					"\r\n",
					"    json.dump(builder.to_schema(), output_json)\r\n",
					"\r\n",
					"def read_zendesk():\r\n",
					"\r\n",
					"###change this to be one of the files in ./all+\r\n",
					"\r\n",
					"    with open('./all_zendesk_items/output_0.json', 'r') as zendesk_raw:\r\n",
					"\r\n",
					"        import json\r\n",
					"\r\n",
					"        zendesk_dict = json.load(zendesk_raw)\r\n",
					"\r\n",
					"    return zendesk_dict\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					"def read_schema():\r\n",
					"\r\n",
					"    with open('output_schema.json', 'r') as schema:\r\n",
					"\r\n",
					"        import json\r\n",
					"\r\n",
					"        schema_dict = json.load(schema)\r\n",
					"\r\n",
					"    return schema_dict\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					"def apply_schema_check(zendesk_dict, schema_dict):\r\n",
					"\r\n",
					"    import json\r\n",
					"    import jsonschema\r\n",
					"    from jsonschema import validate\r\n",
					"    try:\r\n",
					"        validate(instance=zendesk_dict, schema=schema_dict)\r\n",
					"    except jsonschema.exceptions.ValidationError as err:\r\n",
					"        print(False)\r\n",
					"    print(True)\r\n",
					"\r\n",
					"\r\n",
					"def split_zendesk():\r\n",
					"\r\n",
					"    return None\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					"zendesk_dict = read_zendesk()\r\n",
					"\r\n",
					"schema_dict = read_schema()\r\n",
					"\r\n",
					"apply_schema_check(zendesk_dict, schema_dict)"
				],
				"execution_count": 5
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					""
				],
				"execution_count": 6
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					""
				],
				"execution_count": 7
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"\r\n",
					""
				],
				"execution_count": 8
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					""
				],
				"execution_count": 9
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					""
				],
				"execution_count": 10
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					""
				],
				"execution_count": 11
			}
		]
	}
}