{
	"name": "py_logging_decorator",
	"properties": {
		"folder": {
			"name": "archive/utils"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw34",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "c0937580-c01f-440b-8d6b-46fa9ccbce7c"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": true,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw34",
				"name": "pinssynspodw34",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw34",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%run py_retry_logic"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"#https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-opentelemetry-exporter/samples/logs/sample_log.py\n",
					"import logging\n",
					"import functools\n",
					"import uuid\n",
					"from pyspark.sql import SparkSession\n",
					"from notebookutils import mssparkutils\n",
					"from opentelemetry.sdk._logs import LoggerProvider, LoggingHandler\n",
					"from opentelemetry._logs import get_logger_provider, set_logger_provider\n",
					"from opentelemetry.sdk._logs.export import BatchLogRecordProcessor\n",
					"from azure.monitor.opentelemetry.exporter import AzureMonitorLogExporter\n",
					"from multiprocessing import Process\n",
					"\n",
					"logger = logging.getLogger()\n",
					"for h in list(logger.handlers):\n",
					"    if isinstance(h, LoggingHandler):\n",
					"        logger.removeHandler(h)\n",
					"\n",
					"logger_provider = LoggerProvider()\n",
					"LOGGING_INITIALISED = globals().get(\"LOGGING_INITIALISED\", False)\n",
					"MAX_WORKER_POOLS = 5\n",
					"if \"CURRENT_WORKER_POOLS_COUNT\" not in globals():\n",
					"    # Prevent overwriting the variable\n",
					"    CURRENT_WORKER_POOLS_COUNT = 0\n",
					"\n",
					"pipelinejobid = (\n",
					"    mssparkutils.runtime.context['pipelinejobid']\n",
					"    if mssparkutils.runtime.context.get('isForPipeline', False)\n",
					"    else uuid.uuid4()\n",
					")\n",
					"\n",
					"def logInfo(msg: str): logger.info(f\"{pipelinejobid} : {msg}\")\n",
					"def logError(msg: str): logger.error(f\"{pipelinejobid} : {msg}\")\n",
					"def logException(ex: Exception): logger.exception(f\"{pipelinejobid} : {ex}\")\n",
					"\n",
					"@retry(wait=wait_exponential(multiplier=1, min=2, max=10), stop=stop_after_delay(20), reraise=True, before_sleep=before_sleep)\n",
					"def setupLogging(force=False):\n",
					"    global LOGGING_INITIALISED\n",
					"\n",
					"    if LOGGING_INITIALISED and not force:\n",
					"        logInfo(\"Logging already initialized.\")\n",
					"        return\n",
					"\n",
					"    try:\n",
					"        key = mssparkutils.credentials.getSecretWithLS(\"ls_kv\", \"application-insights-connection-string\")\n",
					"        conn_string = key.split(\";\")[0]\n",
					"    except Exception as e:\n",
					"        print(\"Failed to get connection string:\", e)\n",
					"        return\n",
					"\n",
					"    set_logger_provider(logger_provider)\n",
					"    exporter = AzureMonitorLogExporter.from_connection_string(conn_string)\n",
					"    logger_provider.add_log_record_processor(\n",
					"        BatchLogRecordProcessor(exporter, schedule_delay_millis=5000)\n",
					"    )\n",
					"\n",
					"    if not any(isinstance(h, LoggingHandler) for h in logger.handlers):\n",
					"        logger.addHandler(LoggingHandler())\n",
					"\n",
					"    if not any(isinstance(h, logging.StreamHandler) for h in logger.handlers):\n",
					"        logger.addHandler(logging.StreamHandler())\n",
					"\n",
					"    logger.setLevel(logging.INFO)\n",
					"    LOGGING_INITIALISED = True\n",
					"    logInfo(\"Logging initialized.\")\n",
					"\n",
					"def flushLogging(timeout: int = 60):\n",
					"    global MAX_WORKER_POOLS\n",
					"    global CURRENT_WORKER_POOLS_COUNT\n",
					"    def flushLoggingInner():\n",
					"        print(\"Flushing logs\")\n",
					"        try:\n",
					"            logger_provider.force_flush()\n",
					"        except Exception as e:\n",
					"            print(f\"Flush failed: {e}\")\n",
					"    if CURRENT_WORKER_POOLS_COUNT < MAX_WORKER_POOLS:\n",
					"        CURRENT_WORKER_POOLS_COUNT += 1\n",
					"        t = Process(target=flushLoggingInner, daemon=True)\n",
					"        t.start()\n",
					"        t.join(timeout)\n",
					"        if t.is_alive():\n",
					"            print(f\"Logging flush timed out in py_logging_decorator. Waited {timeout} seconds. Killing the running thread\")\n",
					"            t.terminate()\n",
					"        CURRENT_WORKER_POOLS_COUNT -= 1\n",
					"    else:\n",
					"        print(\"Could not start logging export in py_logging_decorator - max number of flush threads has been reached\")\n",
					"\n",
					"def shutdownLogging():\n",
					"    try:\n",
					"        logger_provider.shutdown()\n",
					"    except Exception as e:\n",
					"        print(f\"Shutdown failed: {e}\")\n",
					"\n",
					"def logging_to_appins(func):\n",
					"    @functools.wraps(func)\n",
					"    def wrapper(*args, **kwargs):\n",
					"        args_repr = [repr(a) for a in args]\n",
					"        kwargs_repr = [f\"{k}={v!r}\" for k, v in kwargs.items()]\n",
					"        logInfo(f\"Function {func.__name__} called with args: {', '.join(args_repr + kwargs_repr)}\")\n",
					"        try:\n",
					"            return func(*args, **kwargs)\n",
					"        except mssparkutils.handlers.notebookHandler.NotebookExit as e:\n",
					"            logInfo(f\"Notebook exited: {e}\")\n",
					"            mssparkutils.notebook.exit(e)\n",
					"        except Exception as e:\n",
					"            logException(e)\n",
					"            raise\n",
					"    return wrapper\n",
					"\n",
					"if not LOGGING_INITIALISED:\n",
					"    setupLogging()\n",
					"    flushLogging()"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"if False:\n",
					"    @logging_to_appins\n",
					"    def testException():\n",
					"        raise Exception(\"Test Exception\")\n",
					"\n",
					"    try:\n",
					"        logInfo(\"Running testException\")\n",
					"        testException()\n",
					"    except Exception as e:\n",
					"        logError(\"Caught error\")\n",
					"        flushLogging()"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"if False:\n",
					"    @logging_to_appins\n",
					"    def test():\n",
					"        raise ValueError('BANANA')\n",
					"\n",
					"    try:\n",
					"        logInfo(\"Running test\")\n",
					"        test()\n",
					"    except Exception:\n",
					"        logError(\"Caught error\")\n",
					"        flushLogging()"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"if False:\n",
					"    @logging_to_appins\n",
					"    def test2():\n",
					"        raise ValueError('CARROT')\n",
					"\n",
					"    try:\n",
					"        logInfo(\"Running test2\")\n",
					"        test2()\n",
					"    except Exception:\n",
					"        logError(\"Caught error\")\n",
					"        flushLogging()"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"if False:\n",
					"    @logging_to_appins\n",
					"    def test3():\n",
					"        raise ValueError('CAULIFLOWER')\n",
					"\n",
					"    try:\n",
					"        logInfo(\"Running test3\")\n",
					"        test3()\n",
					"    except Exception:\n",
					"        logError(\"Caught error\")\n",
					"        flushLogging()"
				],
				"execution_count": null
			}
		]
	}
}