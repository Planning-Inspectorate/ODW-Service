{
	"name": "py_logging_decorator",
	"properties": {
		"folder": {
			"name": "utils"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "52f68a40-937c-4924-a061-dcac173813a1"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": true,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw",
				"name": "pinssynspodw",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%pip install opencensus-ext-azure"
				],
				"execution_count": 5
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%run py_retry_logic"
				],
				"execution_count": 6
			},
			{
				"cell_type": "code",
				"source": [
					"import logging\r\n",
					"from opencensus.ext.azure.log_exporter import AzureLogHandler\r\n",
					"\r\n",
					"@retry(wait=wait_exponential(multiplier=1, min=5, max=20), stop=stop_after_delay(30) | stop_after_attempt(5), reraise=True, before_sleep=before_sleep)\r\n",
					"def setupLogging():\r\n",
					"    logger = logging.getLogger()\r\n",
					"    logger.setLevel(logging.INFO)\r\n",
					"    if True in [type(handle) == AzureLogHandler for handle in logger.handlers]:\r\n",
					"        pass\r\n",
					"    else:\r\n",
					"        key = mssparkutils.credentials.getSecretWithLS(\"ls_kv\", \"application-insights-connection-string\")\r\n",
					"        logger.addHandler(AzureLogHandler(connection_string=key.split(\";\")[0]))\r\n",
					"\r\n",
					"def logging_to_appins(func):\r\n",
					"    import functools\r\n",
					"    from notebookutils import mssparkutils\r\n",
					"    from pyspark.sql import SparkSession\r\n",
					"    spark = SparkSession.builder.getOrCreate()\r\n",
					"\r\n",
					"    @functools.wraps(func)\r\n",
					"    def wrapper(*args, **kwargs):\r\n",
					"        from notebookutils import mssparkutils\r\n",
					"            \r\n",
					"        args_repr = [repr(a) for a in args]\r\n",
					"        kwargs_repr = [f\"{k}={v!r}\" for k, v in kwargs.items()]\r\n",
					"        signature = \", \".join(args_repr + kwargs_repr)\r\n",
					"        logger.info(f\"function {func.__name__} called with args {signature}\")\r\n",
					"        try:\r\n",
					"            result = func(*args, **kwargs)\r\n",
					"            return result\r\n",
					"        except mssparkutils.handlers.notebookHandler.NotebookExit as e:\r\n",
					"            logger.info(f\"Notebook exited with value {e}\")\r\n",
					"            mssparkutils.notebook.exit(e)\r\n",
					"        except Exception as e:\r\n",
					"            print(\"Logging Exception\")\r\n",
					"            logger.exception(e)\r\n",
					"            raise e\r\n",
					"    return wrapper\r\n",
					"\r\n",
					"    setupLogging()"
				],
				"execution_count": 7
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#@logging_to_appins\n",
					"def test():\n",
					"    raise ValueError('BANANA')\n",
					"\n",
					"#change to debug\n",
					"if False:\n",
					"    try:\n",
					"        #this should appear in the logs because it's got a decorator on it\n",
					"        logger.info(\"Running test\")\n",
					"        test()\n",
					"    except:\n",
					"        logger.error(\"Caught error\")\n",
					""
				],
				"execution_count": 8
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def test2():\n",
					"    raise ValueError('CARROT')\n",
					"\n",
					"#change to debug\n",
					"if False:\n",
					"    try:\n",
					"        #this shouldn't appear in the logs because it's not got a decorator on it\n",
					"        logger.info(\"Running test2\")\n",
					"        test2()\n",
					"    except:\n",
					"        logger.error(\"Caught error\")\n",
					""
				],
				"execution_count": 9
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"@logging_to_appins\n",
					"def test3():\n",
					"    raise ValueError('CAULIFLOWER')\n",
					"\n",
					"#change to debug\n",
					"if False:\n",
					"    try:\n",
					"        #this should appear in the logs because it's got a decorator on it\n",
					"        logger.info(\"Running test3\")\n",
					"        test3()\n",
					"    except:\n",
					"        logger.error(\"Caught error\")"
				],
				"execution_count": 10
			}
		]
	}
}