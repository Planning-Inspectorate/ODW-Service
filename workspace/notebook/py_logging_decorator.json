{
	"name": "py_logging_decorator",
	"properties": {
		"folder": {
			"name": "utils"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw34",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "5285cb4f-e72d-402d-8301-e0a413b68d63"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": true,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw34",
				"name": "pinssynspodw34",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw34",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%run py_retry_logic"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import logging\n",
					"logger = logging.getLogger()\n",
					"display(logger.handlers)"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"#https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-opentelemetry-exporter/samples/logs/sample_log.py\n",
					"import functools\n",
					"from notebookutils import mssparkutils\n",
					"from pyspark.sql import SparkSession\n",
					"import logging\n",
					"\n",
					"from opentelemetry._logs import (\n",
					"    get_logger_provider,\n",
					"    set_logger_provider,\n",
					")\n",
					"from opentelemetry.sdk._logs import (\n",
					"    LoggerProvider,\n",
					"    LoggingHandler,\n",
					")\n",
					"from opentelemetry.sdk._logs.export import BatchLogRecordProcessor\n",
					"from azure.monitor.opentelemetry.exporter import AzureMonitorLogExporter\n",
					"from opentelemetry import trace\n",
					"\n",
					"import uuid\n",
					"\n",
					"logger = logging.getLogger()\n",
					"logger_provider = LoggerProvider()\n",
					"\n",
					"if mssparkutils.runtime.context['isForPipeline'] == True:\n",
					"    pipelinejobid = mssparkutils.runtime.context['pipelinejobid']\n",
					"    logger.info(f\"Log ID is {pipelinejobid}\")\n",
					"else:\n",
					"    #just so we can track calls between one run\n",
					"    pipelinejobid = uuid.uuid4()\n",
					"    logger.info(f\"Log ID is randomly generated {pipelinejobid}\")\n",
					"\n",
					"\n",
					"#generic logging functions which can be expanded to include extra information in every log message\n",
					"def logInfo(message:str):\n",
					"    logger.info(f\"{pipelinejobid} : {message}\")\n",
					"\n",
					"def logError(message:str):\n",
					"    logger.error(f\"{pipelinejobid} : {message}\")\n",
					"\n",
					"def logException(exception:Exception):\n",
					"    logger.exception(f\"{pipelinejobid} : {exception}\")\n",
					"\n",
					"\n",
					"@retry(wait=wait_exponential(multiplier=1, min=5, max=20), stop=stop_after_delay(30) | stop_after_attempt(5), reraise=True, before_sleep=before_sleep)\n",
					"def setupLogging():\n",
					"    \n",
					"    if True in [type(handle) == LoggingHandler for handle in logger.handlers]:\n",
					"        logInfo(\"Logging is already setup\")\n",
					"        pass\n",
					"    else:\n",
					"        key = mssparkutils.credentials.getSecretWithLS(\"ls_kv\", \"application-insights-connection-string\")\n",
					"        \n",
					"        set_logger_provider(logger_provider)\n",
					"        exporter = AzureMonitorLogExporter.from_connection_string(key.split(\";\")[0])\n",
					"        get_logger_provider().add_log_record_processor(BatchLogRecordProcessor(exporter, schedule_delay_millis=60000))\n",
					"        handler = LoggingHandler()\n",
					"        logger.addHandler(handler)\n",
					"        \n",
					"    logger.setLevel(logging.INFO)\n",
					"\n",
					"def flushLogging():\n",
					"    logger_provider.force_flush()\n",
					"\n",
					"def logging_to_appins(func):\n",
					"\n",
					"    spark = SparkSession.builder.getOrCreate()\n",
					"\n",
					"    @functools.wraps(func)\n",
					"    def wrapper(*args, **kwargs):\n",
					"        from notebookutils import mssparkutils\n",
					"            \n",
					"        args_repr = [repr(a) for a in args]\n",
					"        kwargs_repr = [f\"{k}={v!r}\" for k, v in kwargs.items()]\n",
					"        signature = \", \".join(args_repr + kwargs_repr)\n",
					"        logInfo(f\"function {func.__name__} called with args {signature}\")\n",
					"        try:\n",
					"            result = func(*args, **kwargs)\n",
					"            return result\n",
					"        except mssparkutils.handlers.notebookHandler.NotebookExit as e:\n",
					"            logInfo(f\"Notebook exited with value {e}\")\n",
					"            mssparkutils.notebook.exit(e)\n",
					"        except Exception as e:\n",
					"            print(\"Logging Exception\")\n",
					"            logException(e)\n",
					"            raise e\n",
					"    return wrapper\n",
					"\n",
					"setupLogging()\n",
					"logInfo(\"Logging ready\")\n",
					"flushLogging()"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"@logging_to_appins\n",
					"def testException():\n",
					"    try:\n",
					"        #this should appear in the logs because it's got a decorator on it\n",
					"        raise Exception(\"Test Exception\")\n",
					"    except Exception as e:\n",
					"        logException(e)\n",
					"\n",
					"\n",
					"if False:\n",
					"    testException()"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"@logging_to_appins\n",
					"def test():\n",
					"    raise ValueError('BANANA')\n",
					"\n",
					"#change to debug\n",
					"if False:\n",
					"    try:\n",
					"        #this should appear in the logs because it's got a decorator on it\n",
					"        logInfo(\"Running test\")\n",
					"        test()\n",
					"    except:\n",
					"        logError(\"Caught error\")\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def test2():\n",
					"    raise ValueError('CARROT')\n",
					"\n",
					"logger = logging.getLogger()\n",
					"if False:\n",
					"    try:\n",
					"        #this shouldn't appear in the logs because it's not got a decorator on it\n",
					"        logInfo(\"Running test2\")\n",
					"        test2()\n",
					"    except:\n",
					"        logError(\"Caught error\")\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"@logging_to_appins\n",
					"def test3():\n",
					"    raise ValueError('CAULIFLOWER')\n",
					"\n",
					"#change to debug\n",
					"if False:\n",
					"    try:\n",
					"        #this should appear in the logs because it's got a decorator on it\n",
					"        logInfo(\"Running test3\")\n",
					"        test3()\n",
					"    except:\n",
					"        logError(\"Caught error\")"
				],
				"execution_count": null
			}
		]
	}
}