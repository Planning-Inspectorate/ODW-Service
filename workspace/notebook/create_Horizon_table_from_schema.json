{
	"name": "create_Horizon_table_from_schema",
	"properties": {
		"folder": {
			"name": "utils"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw34",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "bfa5473c-5367-41d4-a9d9-80fa985780ab"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": true,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw34",
				"name": "pinssynspodw34",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw34",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 32,
				"automaticScaleJobs": true
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%run utils/py_logging_decorator"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import pprint\n",
					"from pyspark.sql.types import *\n",
					"import json\n",
					"from pyspark.sql import DataFrame\n",
					"from notebookutils import mssparkutils\n",
					"import pyspark.sql.utils\n",
					"from pyspark.sql.types import StructType, StructField, StringType, IntegerType, DoubleType, BooleanType, DateType, TimestampType\n",
					"import re"
				],
				"execution_count": 2
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#### Example of creating a table from a json schema in the data-model repo"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"tags": [
						"parameters"
					]
				},
				"source": [
					"db_name: str = ''\n",
					"entity_name: str = ''\n",
					"is_horizon_schema: bool = True"
				],
				"execution_count": 3
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"storage_account: str = mssparkutils.notebook.run('/utils/py_utils_get_storage_account')\n",
					"path_to_orchestration_file: str = \"abfss://odw-config@\"+storage_account+\"orchestration/orchestration.json\""
				],
				"execution_count": 4
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### Get Table Name from Orchestration File Based on Entity Name"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"def get_table_info(entity_name: str, storage_account: str, path_to_orchestration_file: str) -> tuple:\n",
					"    \"\"\"\n",
					"    Retrieves the standardized table name and definition for a given Horizon entity from an orchestration file.\n",
					"    \n",
					"    Args:\n",
					"    entity_name (str): The name of the entity to look up.\n",
					"    storage_account (str): The storage account (not used in this function, consider removing if unnecessary).\n",
					"    path_to_orchestration_file (str): The path to the JSON orchestration file.\n",
					"    \n",
					"    Returns:\n",
					"    tuple: A tuple containing (Standardised_Table_Name, Standardised_Table_Definition) if found, (None, None) otherwise.\n",
					"    \"\"\"\n",
					"    spark: SparkSession = SparkSession.builder.getOrCreate()  # Get or create SparkSession\n",
					"    \n",
					"    df: DataFrame = spark.read.option(\"multiline\", \"true\").json(path_to_orchestration_file)\n",
					"    definitions: list = json.loads(df.toJSON().first())['definitions']\n",
					"\n",
					"    definition: dict = next((d for d in definitions if entity_name == d['Source_Filename_Start'] and d.get('Source_Folder') == \"Horizon\"), None)\n",
					"   \n",
					"    if definition:\n",
					"        table_name = definition.get('Standardised_Table_Name')\n",
					"        table_definition = definition.get('Standardised_Table_Definition')\n",
					"        return (table_name, table_definition)\n",
					"    else:\n",
					"        return (None, None)  # Entity not found or missing required fields\n",
					""
				],
				"execution_count": 5
			},
			{
				"cell_type": "code",
				"source": [
					"table_name, table_definition = get_table_info(entity_name, storage_account, path_to_orchestration_file)\n",
					"table_definition: str = \"abfss://odw-config@\"+storage_account+table_definition"
				],
				"execution_count": 6
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Check if Table Exists in Database"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"@logging_to_appins\n",
					"def test_table_exists(db_name: str, table_name: str) -> bool:\n",
					"    \"\"\"\n",
					"    Check if a table exists in the specified database.\n",
					"\n",
					"    Args:\n",
					"    db_name (str): The name of the database to check.\n",
					"    table_name (str): The name of the table to look for.\n",
					"\n",
					"    Returns:\n",
					"    bool: True if the table exists, False otherwise.\n",
					"    \"\"\"\n",
					"    spark.sql(f\"USE {db_name}\")\n",
					"    tables_df: DataFrame = spark.sql(\"SHOW TABLES\")\n",
					"    table_names: list = [row['tableName'] for row in tables_df.collect()]\n",
					"    return table_name in table_names\n",
					""
				],
				"execution_count": 7
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Check if the specified table already exists in the database\n",
					"if test_table_exists(db_name, table_name):\n",
					"    # If the table exists: Log an informational message indicating the table's existence\n",
					"    logInfo(f\"{db_name}.{table_name} Table already exists, exiting\")\n",
					"    \n",
					"    # Exit the notebook execution\n",
					"    # This prevents any further code from running if the table already exists\n",
					"    mssparkutils.notebook.exit('')\n",
					"else:\n",
					"    # If the table does not exist: Log an informational message indicating the table's absence\n",
					"    logInfo(f\"{db_name}.{table_name} Table does not exist\")\n",
					"\n",
					"# Execution continues here only if the table does not exist\n",
					""
				],
				"execution_count": 8
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					" ### Build Spark Schema and Table from JSON definition"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"def create_spark_schema(table_definition, table_name):\n",
					"    # Read the JSON file as text\n",
					"    raw_content = spark.read.text(table_definition).collect()\n",
					"\n",
					"    # Get the content as a string and remove leading/trailing whitespace\n",
					"    json_str = raw_content[0][0].strip()\n",
					"\n",
					"    # Try to parse the JSON\n",
					"    try:\n",
					"        json_content = json.loads(json_str)\n",
					"    except json.JSONDecodeError:\n",
					"        # If parsing fails, try to clean up the JSON string\n",
					"        json_str = re.sub(r\"(\\w+):\", r'\"\\1\":', json_str)  # Add quotes to keys\n",
					"        json_str = json_str.replace(\"'\", '\"')  # Replace single quotes with double quotes\n",
					"        json_content = json.loads(json_str)\n",
					"\n",
					"    # Create Spark schema from the JSON structure\n",
					"    fields = []\n",
					"    for field in json_content['fields']:\n",
					"        field_name = field['name']\n",
					"        field_type = field['type']\n",
					"        nullable = field['nullable']\n",
					"        \n",
					"        if field_type == 'string':\n",
					"            spark_type = StringType()\n",
					"        elif field_type == 'timestamp':\n",
					"            spark_type = TimestampType()\n",
					"        elif field_type == 'boolean':\n",
					"            spark_type = BooleanType()\n",
					"        else:\n",
					"            spark_type = StringType()  # Default to StringType if unknown\n",
					"        \n",
					"        fields.append(StructField(field_name, spark_type, nullable))\n",
					"\n",
					"    spark_schema = StructType(fields)\n",
					"    \n",
					"    # Create table using the schema\n",
					"    spark.createDataFrame([], schema=spark_schema).createOrReplaceTempView(table_name)\n",
					"    \n",
					"    return spark_schema"
				],
				"execution_count": 11
			},
			{
				"cell_type": "code",
				"source": [
					"# Usage\n",
					"spark_dataframe = create_spark_schema(table_definition, table_name)"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### Define Delta Table with Given Spark Schema"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"@logging_to_appins\n",
					"def create_spark_table(db_name: str, table_name: str, schema: StructType) -> None:\n",
					"    # Create an empty DataFrame with the given schema\n",
					"    empty_df = spark.createDataFrame([], schema=schema)\n",
					"    \n",
					"    # Write the empty DataFrame as a Delta table\n",
					"    empty_df.write.format(\"delta\").saveAsTable(f\"{db_name}.{table_name}\")\n",
					"    \n",
					"    logInfo(f\"{db_name}.{table_name} Table created\")\n",
					"\n",
					"# Usage\n",
					"try:\n",
					"    create_spark_table(db_name, table_name, spark_dataframe)  # spark_dataframe is actually the StructType schema\n",
					"except pyspark.sql.utils.AnalysisException as e:\n",
					"    table_loc = f\"abfss://{db_name}@{storage_account}Horizon/{table_name}\"\n",
					"    logError(f\"Unable to create table because the location ({table_loc}) is not empty. Emptying the location and retrying\")\n",
					"    mssparkutils.fs.rm(table_loc, True)\n",
					"    create_spark_table(db_name, table_name, spark_dataframe)  # spark_dataframe is actually the StructType schema\n",
					""
				],
				"execution_count": 12
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Check if the table exists in the specified database\n",
					"tableExists: bool = test_table_exists(db_name, table_name)\n",
					"\n",
					"# Log the result of the table existence check\n",
					"# This provides information about whether the table exists or not\n",
					"logInfo(f\"{db_name}.{table_name} exists = {tableExists}\")\n",
					""
				],
				"execution_count": 13
			}
		]
	}
}