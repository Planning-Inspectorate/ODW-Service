{
	"name": "create_Horizon_table_from_schema",
	"properties": {
		"folder": {
			"name": "utils"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "cefe1842-6bd4-42c4-84cb-4da4d8b66e15"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": true,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw",
				"name": "pinssynspodw",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%run utils/py_logging_decorator"
				],
				"execution_count": 117
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import pprint\n",
					"from pyspark.sql.types import *\n",
					"import json\n",
					"from pyspark.sql.functions import col\n",
					"from pyspark.sql import DataFrame\n",
					"from notebookutils import mssparkutils\n",
					"import pyspark.sql.utils\n",
					"from pyspark.sql.functions import lit, regexp_replace"
				],
				"execution_count": 118
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#### Example of creating a table from a json schema in the data-model repo"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"tags": [
						"parameters"
					]
				},
				"source": [
					"db_name: str = 'odw_standardised_db'\n",
					"entity_name: str = 'HorizonAppealsEvent_Test'\n",
					"is_horizon_schema: bool = True"
				],
				"execution_count": 119
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"storage_account: str = mssparkutils.notebook.run('/utils/py_utils_get_storage_account')\n",
					"path_to_orchestration_file: str = \"abfss://odw-config@\"+storage_account+\"orchestration/orchestration.json\"\n",
					"# path_to_orchestration_file: str = \"abfss://odw-config@\"+storage_account+\"orchestration.json\"\n",
					"print(storage_account)"
				],
				"execution_count": 120
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def get_table_name(entity_name: str, storage_account: str, path_to_orchestration_file: str) -> str:\r\n",
					" \r\n",
					"        spark: SparkSession = SparkSession.builder.getOrCreate()  # Get or create SparkSession\r\n",
					"\r\n",
					"        df: DataFrame = spark.read.option(\"multiline\", \"true\").json(path_to_orchestration_file)\r\n",
					"        definitions: list = json.loads(df.toJSON().first())['definitions']\r\n",
					"\r\n",
					"        definition: dict = next((d for d in definitions if entity_name == d['Source_Filename_Start']), None)\r\n",
					"       \r\n",
					"        if definition:\r\n",
					"            if 'Standardised_Table_Name' in definition.keys():\r\n",
					"                return definition['Standardised_Table_Name']\r\n",
					"            else:\r\n",
					"                return None  # Table name not found for this entity\r\n",
					"        else:\r\n",
					"            return None  # Entity not found\r\n",
					"            table_name: str = get_table_name(entity_name,storage_account,path_to_orchestration_file)\r\n",
					""
				],
				"execution_count": 121
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"@logging_to_appins\n",
					"def test_table_exists(db_name: str, table_name: str) -> bool:\n",
					"    spark.sql(f\"USE {db_name}\")\n",
					"    tables_df: DataFrame = spark.sql(\"SHOW TABLES\")\n",
					"    table_names: list = [row['tableName'] for row in tables_df.collect()]\n",
					"    return table_name in table_names"
				],
				"execution_count": 123
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"if test_table_exists(db_name, table_name):\n",
					"    logInfo(f\"{db_name}.{table_name} Table already exists, exiting\")\n",
					"    mssparkutils.notebook.exit('')\n",
					"else:\n",
					"    logInfo(f\"{db_name}.{table_name} Table does not already exist\")"
				],
				"execution_count": 124
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.sql.types import StructType, StructField, StringType, IntegerType, DoubleType, BooleanType, DateType, TimestampType\r\n",
					"import requests\r\n",
					"import json\r\n",
					"\r\n",
					"def create_schema_from_url(url, table_name):\r\n",
					"    # Fetch JSON schema from URL\r\n",
					"    response = requests.get(url)\r\n",
					"    json_schema = json.loads(response.text)\r\n",
					"    \r\n",
					"    # Map JSON types to Spark types\r\n",
					"    type_mapping = {\r\n",
					"        \"string\": StringType(),\r\n",
					"        \"integer\": IntegerType(),\r\n",
					"        \"number\": DoubleType(),\r\n",
					"        \"double\": DoubleType(),\r\n",
					"        \"boolean\": BooleanType(),\r\n",
					"        \"date\": DateType(),\r\n",
					"        \"timestamp\": TimestampType()\r\n",
					"    }\r\n",
					"    \r\n",
					"    # Create Spark StructType schema\r\n",
					"    fields = []\r\n",
					"    for field in json_schema[\"fields\"]:\r\n",
					"        name = field[\"name\"]\r\n",
					"        json_type = field[\"type\"]\r\n",
					"        nullable = field.get(\"nullable\", True)\r\n",
					"        spark_type = type_mapping.get(json_type.lower(), StringType())\r\n",
					"        fields.append(StructField(name, spark_type, nullable))\r\n",
					"    \r\n",
					"    spark_schema = StructType(fields)\r\n",
					"    \r\n",
					"    # Create table using the schema\r\n",
					"    spark.createDataFrame([], schema=spark_schema).createOrReplaceTempView(table_name)\r\n",
					"    \r\n",
					"    return spark_schema"
				],
				"execution_count": 125
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Usage\r\n",
					"url = f\"https://raw.githubusercontent.com/Planning-Inspectorate/odw-config/refs/heads/Feat_ODW_CreateHorizonTable_Test_odw_config_branch/data-lake/standardised_table_definitions/Horizon/{entity_name}.json\"\r\n",
					"spark_dataframe = create_schema_from_url(url, table_name)\r\n",
					"print(spark_dataframe)"
				],
				"execution_count": 126
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"@logging_to_appins\r\n",
					"def create_spark_table(db_name: str, table_name: str, schema: StructType) -> None:\r\n",
					"    # Create an empty DataFrame with the given schema\r\n",
					"    empty_df = spark.createDataFrame([], schema=schema)\r\n",
					"    \r\n",
					"    # Write the empty DataFrame as a Delta table\r\n",
					"    empty_df.write.format(\"delta\").saveAsTable(f\"{db_name}.{table_name}\")\r\n",
					"    \r\n",
					"    logInfo(f\"{db_name}.{table_name} Table created\")\r\n",
					"\r\n",
					"# Usage\r\n",
					"try:\r\n",
					"    create_spark_table(db_name, table_name, spark_dataframe)  # spark_dataframe is actually the StructType schema\r\n",
					"except pyspark.sql.utils.AnalysisException as e:\r\n",
					"    table_loc = f\"abfss://{db_name}@{storage_account}{table_name}\"\r\n",
					"    logError(f\"Unable to create table because the location ({table_loc}) is not empty. Emptying the location and retrying\")\r\n",
					"    mssparkutils.fs.rm(table_loc, True)\r\n",
					"    create_spark_table(db_name, table_name, spark_dataframe)  # spark_dataframe is actually the StructType schema\r\n",
					""
				],
				"execution_count": 127
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"tableExists:bool = test_table_exists(db_name, table_name)\n",
					"logInfo(f\"{db_name}.{table_name} exists = {tableExists}\")"
				],
				"execution_count": 128
			}
		]
	}
}