{
	"name": "py_hr_monthly_raw_to_std",
	"properties": {
		"folder": {
			"name": "archive"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodwpr",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "ea0987fe-c180-40d4-bfae-a1cc7b0b38e5"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/a82fd28d-5989-4e06-a0bb-1a5d859f9e0c/resourceGroups/pins-rg-data-odw-prod-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-prod-uks/bigDataPools/pinssynspodwpr",
				"name": "pinssynspodwpr",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodwpr",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"from pyspark.sql import SparkSession\n",
					"from notebookutils import mssparkutils\n",
					"import json\n",
					"import calendar\n",
					"from datetime import datetime, timedelta, date\n",
					"import pandas as pd\n",
					"\n",
					"spark = SparkSession.builder.getOrCreate()\n",
					"\n",
					"storage_account=mssparkutils.notebook.run('/utils/py_utils_get_storage_account')\n",
					"\n",
					"raw_container = \"abfss://odw-raw@\" + storage_account\n",
					"config_container = \"abfss://odw-config@\" + storage_account\n",
					"standardised_container = \"abfss://odw-standardised@\" + storage_account"
				],
				"execution_count": 38
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%run \"1-odw-raw-to-standardised/Fileshare/SAP_HR/py_1_raw_to_standardised_hr_functions\""
				],
				"execution_count": 39
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"tags": [
						"parameters"
					]
				},
				"source": [
					"specific_folder=''"
				],
				"execution_count": 40
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"history_files_source_path = f\"{raw_container}Fileshare/SAP_HR/HR/zSAP_HR history files/\"\n",
					"new_files_source_path = f\"{raw_container}Fileshare/SAP_HR/HR/Monthly/\"\n",
					"\n",
					"target_files_keys = ['absence', 'address', 'email', 'leaver', 'leave', 'pc', 'saphr', 'specialism']\n",
					"# folders_to_ingest = ['2021-03', '2021-04', '2021-05']\n",
					"\n",
					"# read orchestration data\n",
					"path_to_orchestration_file = \"abfss://odw-config@\"+storage_account+\"orchestration/orchestration.json\"\n",
					"df = spark.read.option(\"multiline\",\"true\").json(path_to_orchestration_file)\n",
					"definitions = json.loads(df.toJSON().first())['definitions']\n",
					"process_name = \"py_hr_monthly_raw_to_std\"\n",
					"\n",
					"folders_and_files = mssparkutils.fs.ls(history_files_source_path)\n",
					"root_saphr_files = [f for f in folders_and_files if f.isFile]\n",
					"\n",
					"if specific_folder == '':\n",
					"    for file in root_saphr_files:\n",
					"        definition = next((d for d in definitions if d['Source_ID'] == 2), None)\n",
					"        expected_from = datetime.strptime(file.name[6:-5], \"%Y%m%d\")\n",
					"\n",
					"        if definition:\n",
					"            expected_from = date(expected_from.year, expected_from.month, calendar.monthrange(expected_from.year, expected_from.month)[1]) + timedelta(days=1)\n",
					"            expected_from = datetime.combine(expected_from, datetime.min.time())\n",
					"            expected_to = expected_from + timedelta(days=definition['Expected_Within_Weekdays']) \n",
					"            ingest_adhoc(storage_account, definition, history_files_source_path, file.name, process_name, expected_from, expected_to)\n",
					"\n",
					"\n",
					"folders = [f for f in folders_and_files if f.isDir]\n",
					"new_folders_and_files = mssparkutils.fs.ls(new_files_source_path)\n",
					"new_folders = [f for f in new_folders_and_files if f.isDir]\n",
					"folders = folders + new_folders\n",
					"\n",
					"if specific_folder != '':\n",
					"    folders = [f for f in folders if f.name == specific_folder]\n",
					"\n",
					"for folder in folders:\n",
					"    files = mssparkutils.fs.ls(folder.path)\n",
					"    files = [f for f in files if f.isFile and f.name.lower().endswith('.xlsx')]\n",
					"    for file in files:\n",
					"        for key in target_files_keys:\n",
					"            if key in file.name.lower():\n",
					"                definition = next((d for d in definitions if key in d['Source_Filename_Start'].lower()), None)\n",
					"\n",
					"                if definition:\n",
					"                    expected_from = datetime.strptime(folder.name, \"%Y-%m\")\n",
					"                    expected_from = date(expected_from.year, expected_from.month, calendar.monthrange(expected_from.year, expected_from.month)[1]) + timedelta(days=1)\n",
					"                    expected_from = datetime.combine(expected_from, datetime.min.time())\n",
					"                    expected_to = expected_from + timedelta(days=definition['Expected_Within_Weekdays']) \n",
					"                    ingest_adhoc(storage_account, definition, folder.path, file.name, process_name, expected_from, expected_to)\n",
					"                    break\n",
					"\n",
					"\n",
					"if specific_folder != '':\n",
					"    mssparkutils.notebook.exit('')"
				],
				"execution_count": 41
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# execute main source system fact"
				],
				"execution_count": 42
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%run /2-odw-standardised-to-harmonised/py_odw_harmonised_table_creation {\"specific_table\": \"main_sourcesystem_fact\"}"
				],
				"execution_count": 43
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"%run /odw-harmonised/main_sourcesystem_fact"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#pension rates"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%run /1-odw-raw-to-standardised/Scheduling/outstanding_files_add_entry {\"jsonId\": 81,\"year\": 2023,\"month\": 3,\"day\": 22}"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%run /1-odw-raw-to-standardised/Scheduling/py_1_initial_run_raw_to_standardised_scheduling {\"source_id\": 81}"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# work schedule rules"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%run /1-odw-raw-to-standardised/Scheduling/outstanding_files_add_entry {\"jsonId\": 83,\"year\": 2023,\"month\": 4,\"day\": 1}"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%run /1-odw-raw-to-standardised/Scheduling/py_1_initial_run_raw_to_standardised_scheduling {\"source_id\": 83}"
				],
				"execution_count": null
			}
		]
	}
}