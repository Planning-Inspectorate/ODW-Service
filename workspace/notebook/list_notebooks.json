{
	"name": "list_notebooks",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "976c520a-89d4-4648-8672-266d3f781a14"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw",
				"name": "pinssynspodw",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# pip install azure-identity azure-mgmt-synapse"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# pip install azure-identity azure-synapse"
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"\n",
					"import pandas as pd\n",
					"print(pd.__version__)\n",
					""
				],
				"execution_count": 7
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"pip install requests msal"
				],
				"execution_count": 3
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"Obtaining Azure AD App's Secret"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from notebookutils import mssparkutils\n",
					"\n",
					"akv_name = \"pinskvsynwodwdevuks\"\n",
					"secret_name = \"SVC-ODW-REPORTING\"\n",
					"kv_linked_service = \"ls_kv\"\n",
					"secret = mssparkutils.credentials.getSecret(akv_name, secret_name, kv_linked_service)"
				],
				"execution_count": 4
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"Creating a confidential client app and obtaining the access token from it"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"\n",
					"import requests\n",
					"from msal import ConfidentialClientApplication\n",
					"\n",
					"# Azure AD application details\n",
					"client_id = \"f27d572e-49ec-4bd6-bbe7-de04ae34497f\"\n",
					"tenant_id = \"5878df98-6f88-48ab-9322-998ce557088d\"\n",
					"client_secret = secret\n",
					"\n",
					"\n",
					"# Endpoint and scope\n",
					"workspace_name = 'pins-synw-odw-dev-uks'\n",
					"authority = f'https://login.microsoftonline.com/{tenant_id}'\n",
					"scope = ['https://dev.azuresynapse.net/.default']\n",
					"base_url = f'https://{workspace_name}.dev.azuresynapse.net'\n",
					"api_version = '2020-12-01'\n",
					"\n",
					"# Create a ConfidentialClientApplication\n",
					"app = ConfidentialClientApplication(\n",
					"    client_id,\n",
					"    authority=authority,\n",
					"    client_credential=client_secret\n",
					")\n",
					"\n",
					"# Acquire a token\n",
					"token_response = app.acquire_token_for_client(scopes=scope)\n",
					"access_token = token_response.get('access_token')\n",
					"\n",
					"if not access_token:\n",
					"    raise Exception('Failed to acquire access token')"
				],
				"execution_count": 5
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def fetch_all_notebooks():\n",
					"    notebooks = []\n",
					"\n",
					"\n",
					"    base_url = \"https://pins-synw-odw-dev-uks.dev.azuresynapse.net\"\n",
					"    api_version = \"2020-12-01\"\n",
					"\n",
					"    url = f'{base_url}/notebooks?api-version={api_version}'\n",
					"\n",
					"    # Set the headers with the access token\n",
					"    headers = {\n",
					"        'Authorization': f'Bearer {access_token}'\n",
					"    }\n",
					"    \n",
					"    while url:\n",
					"        response = requests.get(url, headers=headers)\n",
					"        if response.status_code == 200:\n",
					"            data = response.json()\n",
					"            notebooks.extend(data['value'])  # Add current page of notebooks\n",
					"            url = data.get('nextLink')  # Get the next page URL, if any\n",
					"        else:\n",
					"            print(f\"Failed to list notebooks: {response.status_code}\")\n",
					"            print(response.text)\n",
					"            break\n",
					"\n",
					"    return notebooks\n",
					""
				],
				"execution_count": 12
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import pprint\n",
					"\n",
					"SPARK_POOL = 'pinssynspodwpr'\n",
					"\n",
					"all_notebooks = fetch_all_notebooks()\n",
					"notebooks_with_no_spark_pool = []\n",
					"notebooks_with_target_spark_pool = []\n",
					"\n",
					"for notebook in all_notebooks:\n",
					"    if notebook['properties']['bigDataPool'] is None:\n",
					"        notebooks_with_no_spark_pool.append(notebook['name'])\n",
					"    elif notebook['properties']['bigDataPool']['referenceName'] == SPARK_POOL:\n",
					"        notebooks_with_target_spark_pool.append(notebook['name'])\n",
					"\n",
					"\n",
					"pprint.pprint(notebooks_with_target_spark_pool)"
				],
				"execution_count": 16
			}
		]
	}
}