{
	"name": "py_get_months_array_bw_dates",
	"properties": {
		"folder": {
			"name": "utils"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "c9b32ee8-d9af-45fd-9602-d8fcc83833c1"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw",
				"name": "pinssynspodw",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.sql import SparkSession\n",
					"from datetime import datetime\n",
					"from notebookutils import mssparkutils\n",
					"from dateutil.relativedelta import relativedelta\n",
					"\n",
					"spark = SparkSession.builder.getOrCreate()\n",
					"\n",
					"def get_month_end_dates(start_date, end_date):\n",
					"    month_end_dates = []\n",
					"\n",
					"    current_date = start_date.replace(day=1)  # Start with the first day of the start month\n",
					"    while current_date <= end_date:\n",
					"        next_month = current_date + relativedelta(months=1)\n",
					"        month_end_date = next_month - relativedelta(days=1)\n",
					"        month_end_dates.append(datetime.strftime(month_end_date, \"%Y-%m-%dT%H:%M:%S.%f\"))\n",
					"        current_date = next_month\n",
					"\n",
					"    return month_end_dates"
				],
				"execution_count": 4
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"tags": [
						"parameters"
					]
				},
				"source": [
					"start_month=1\n",
					"start_year=2023\n",
					"end_month=5\n",
					"end_year=2023"
				],
				"execution_count": 5
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"start_date = datetime(year=start_year, month=start_month, day=1)\n",
					"end_date = datetime(year=end_year, month=end_month, day=1)\n",
					"dates = get_month_end_dates(start_date, end_date)\n",
					"\n",
					"mssparkutils.notebook.exit(dates)"
				],
				"execution_count": 6
			}
		]
	}
}