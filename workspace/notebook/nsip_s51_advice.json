{
	"name": "nsip_s51_advice",
	"properties": {
		"description": "This is the S51 advice curated table for ODT consumption",
		"folder": {
			"name": "odw-curated"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "ad090444-d5e3-41f7-96d1-118195656337"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw",
				"name": "pinssynspodw",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Checking the Environment\n",
					"#### If dev or test, limiting the number of output rows and anonymisation of the sensitive fields is required."
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# from notebookutils import mssparkutils\n",
					"# storage_account=mssparkutils.notebook.run('/utils/py_utils_get_storage_account')\n",
					"\n",
					"# is_dev_or_test_env = 'dev' in storage_account or 'test' in storage_account\n",
					"# max_limit = 20 if is_dev_or_test_env else 100000000\n",
					"\n",
					"# spark.sql(f\"SET MAX_LIMIT = {max_limit}\")"
				],
				"execution_count": 27
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## View odw_curated_db.vw_nsip_data is created"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"\n",
					"---TEST TEST TEST----\n",
					"\n",
					"CREATE OR REPLACE VIEW odw_curated_db.vw_nsip_s51_advice\n",
					"\n",
					"    AS\n",
					"\n",
					"SELECT DISTINCT\n",
					"\n",
					"    AD.NSIPAdviceID\t\t\t\t\t\t\t\t\t\t    AS adviceId,\n",
					"    AD.AdviceNodeID                                         AS caseId,\n",
					"    AD.AdviceReference\t\t\t\t\t\t\t\t\t    AS adviceReference,\n",
					"    AD.CaseReference\t\t\t\t\t\t\t\t\t    AS caseReference,\n",
					"    AD.AdviceTitle\t\t\t\t\t\t\t\t\t        AS title,\n",
					"    trim(AD.Enquirer)                                       AS from,\n",
					"    AD.EnquirerOrganisation                                 AS agent,\n",
					"    AD.EnquiryMethod                                        AS method,\n",
					"    AD.EnquiryDate                                          AS enquiryDate,\n",
					"    AD.Enquiry                                              AS enquiryDetails,\n",
					"    AD.AdviceFrom                                           AS adviceGivenBy,\n",
					"    AD.AdviceStatus                                         AS adviceDate,\n",
					"    SUBSTRING(AD.Advice, 1, 7999)                           AS adviceDetails1,\n",
					"    SUBSTRING(AD.Advice, 8000, 15999)                       AS adviceDetails2,\n",
					"    SUBSTRING(AD.Advice, 16000, 23999)                      AS adviceDetails3,\n",
					"    AD.AdviceStatus                                         AS status,\n",
					"    \"unredacted\"                                            AS redactionStatus,\n",
					"    AD.AttachmentID                                         AS attachmentIds\n",
					"\n",
					"FROM odw_harmonised_db.casework_nsip_advice_dim \t        AS AD\n",
					"\t\n",
					"-- LIMIT ${MAX_LIMIT}"
				],
				"execution_count": 28
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Table odw_curated_db.nsip_data is created"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"\n",
					"---TEST TEST TEST----\n",
					"\n",
					"CREATE OR REPLACE TABLE odw_curated_db.nsip_s51_advice\n",
					"\n",
					"USING delta\n",
					"\n",
					"AS\n",
					"\n",
					"SELECT \t\t\t\t\t\t\t\t\n",
					"    \t\t\t\t\t\t\n",
					"*\n",
					"    \n",
					"FROM odw_curated_db.vw_nsip_s51_advice"
				],
				"execution_count": 29
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Install anonymisation library i.e Faker"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# %%pyspark\n",
					"# pip install Faker"
				],
				"execution_count": 30
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Anonymisation of sensitive fields"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# if is_dev_or_test_env:\n",
					"\n",
					"#     import pandas as pd\n",
					"#     import uuid\n",
					"    \n",
					"#     df = spark.sql(\"select * from odw_curated_db.nsip_data\").toPandas()\n",
					"\n",
					"#     if(len(df) > 0):\n",
					"        \n",
					"#         df['OperationsLeadID'] = [str(uuid.uuid4()) for _ in range(len(df))]\n",
					"#         df['OperationsManagerID'] = [str(uuid.uuid4()) for _ in range(len(df))]\n",
					"#         df['CaseManagerID'] = [str(uuid.uuid4()) for _ in range(len(df))]\n",
					"#         df['NSIPAdministrationOfficerID'] = [str(uuid.uuid4()) for _ in range(len(df))]\n",
					"#         df['LeadInspectorID'] = [str(uuid.uuid4()) for _ in range(len(df))]\n",
					"#         df['InspectorID'] = [str(uuid.uuid4()) for _ in range(len(df))]\n",
					"#         df['EnvironmentalServicesOfficerID'] = [str(uuid.uuid4()) for _ in range(len(df))]\n",
					"#         df['LegalOfficerID'] = [str(uuid.uuid4()) for _ in range(len(df))]\n",
					"\n",
					"        \n",
					"#         df = spark.createDataFrame(df)\n",
					"\n",
					"#         table_loc = \"abfss://odw-curated@\"+storage_account+'nsip_data'\n",
					"#         df.write.format(\"delta\").mode(\"overwrite\").save(table_loc)  "
				],
				"execution_count": 31
			}
		]
	}
}