{
	"name": "pins_inspectors",
	"properties": {
		"folder": {
			"name": "odw-harmonised"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "47f63211-cf28-4702-9fdb-4d54e2bceaa2"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": true,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw",
				"name": "pinssynspodw",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%run utils/py_logging_decorator"
				],
				"execution_count": 1
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"The below cell is creating the table if it does not exist"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from notebookutils import mssparkutils\n",
					"\n",
					"db_name: str = 'odw_harmonised_db'\n",
					"table_name: str = 'pins_inspectors'\n",
					"\n",
					"@logging_to_appins\n",
					"def test_table_exists(db_name: str, table_name: str) -> bool:\n",
					"    spark.sql(f\"USE {db_name}\")\n",
					"    tables_df: DataFrame = spark.sql(\"SHOW TABLES\")\n",
					"    table_names: list = [row['tableName'] for row in tables_df.collect()]\n",
					"    return table_name in table_names\n",
					"\n",
					"if test_table_exists(db_name, table_name):\n",
					"    logInfo(\"Table exists in harmonised, updating the harmonised layer\")\n",
					"else:\n",
					"    logInfo(\"Table doesn't exist, creating table first and then updating the harmonised layer.\")\n",
					"    mssparkutils.notebook.run(\"/py_odw_harmonised_table_creation\",300,{'specific_table': table_name } )\n",
					""
				],
				"execution_count": 2
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Check for new, updated or deleted data\n",
					"- This script checks for new, updated or deleted data by checking the source data (horizon tables) against the target (odw_harmonised_db.pins_inspectors tables)\n",
					"- **New Data:** where an main Reference in the source does not exist in the target, then NewData flag is set to 'Y'\n",
					"- **Updated data:** Comparison occurs on Reference Fields in source and in target where the row hash is different i.e. there is a change in one of the columns. NewData flag is set to 'Y'\n",
					"- **Deleted data:** where an Reference info in the target exists but the same identifyers don't exist in the source. DeletedData flag is set to 'Y'\n",
					"\n",
					"## View pins_inspectors is created"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"-- Build pins_inspectors_new table\r\n",
					"-- Gets modified or deleted from source rows\r\n",
					"\r\n",
					"CREATE OR REPLACE TEMPORARY VIEW pins_inspectors_new \r\n",
					"\r\n",
					"     AS\r\n",
					"\r\n",
					"-- gets data that matches of SourceID and flags that it is modified based on a row (md5) hash. Flags as \"NewData\"\r\n",
					"-- gets data that is in the target but not in source. Flags as \"DeletedData\"\r\n",
					"\r\n",
					"SELECT DISTINCT\r\n",
					"    CASE\r\n",
					"        WHEN T1.horizonId IS NULL\r\n",
					"        THEN T2.InspectorsId\r\n",
					"        ELSE NULL\r\n",
					"    END                             AS InspectorsId,\r\n",
					"    T1.horizonId                    AS horizonId,\r\n",
					"    T1.firstName                    AS firstName,\r\n",
					"    T1.lastName                     AS lastName,\r\n",
					"    T1.postName                     AS postName,\r\n",
					"    T1.organisationName             AS organisationName,\r\n",
					"    T1.title                        AS title,\r\n",
					"    T1.salutation                   AS salutation,\r\n",
					"    T1.qualifications               AS qualifications,\r\n",
					"    T1.email                        AS email,\r\n",
					"    \"0\"                             AS Migrated,\r\n",
					"    \"Horizon\"                       AS ODTSourceSystem,\r\n",
					"    to_timestamp(T1.expected_from)  AS IngestionDate,\r\n",
					"    NULL                            AS ValidTo,\r\n",
					"    md5(\r\n",
					"        concat(\r\n",
					"            IFNULL(T1.horizonId,'.'),\r\n",
					"            IFNULL(T1.firstName,'.'),\r\n",
					"            IFNULL(T1.lastName,'.'),\r\n",
					"            IFNULL(T1.postName,'.'),\r\n",
					"            IFNULL(T1.organisationName,'.'),\r\n",
					"            IFNULL(T1.title,'.'),\r\n",
					"            IFNULL(T1.salutation,'.'),\r\n",
					"            IFNULL(T1.qualifications,'.'),\r\n",
					"            IFNULL(T1.email,'.')\r\n",
					"        ))                          AS RowID, -- this hash should contain all the defining fields\r\n",
					"    'Y'                             AS IsActive,\r\n",
					"    T2.IsActive                     AS HistoricIsActive\r\n",
					"\r\n",
					"FROM odw_standardised_db.pins_inspectors T1\r\n",
					"FULL JOIN odw_harmonised_db.pins_inspectors T2 ON T1.horizonId = T2.horizonId AND T2.IsActive = 'Y'\r\n",
					"WHERE\r\n",
					"    -- flags new data        \r\n",
					"    (CASE\r\n",
					"        WHEN T1.horizonId = T2.horizonId AND md5(\r\n",
					"            concat(\r\n",
					"                IFNULL(T1.horizonId,'.'),\r\n",
					"                IFNULL(T1.firstName,'.'),\r\n",
					"                IFNULL(T1.lastName,'.'),\r\n",
					"                IFNULL(T1.postName,'.'),\r\n",
					"                IFNULL(T1.organisationName,'.'),\r\n",
					"                IFNULL(T1.title,'.'),\r\n",
					"                IFNULL(T1.salutation,'.'),\r\n",
					"                IFNULL(T1.qualifications,'.'),\r\n",
					"                IFNULL(T1.email,'.')\r\n",
					"            )) <> T2.RowID  -- same row, changed data\r\n",
					"        THEN 'Y'\r\n",
					"        WHEN T2.horizonId IS NULL -- new data\r\n",
					"        THEN 'Y'\r\n",
					"    ELSE 'N'\r\n",
					"    END  = 'Y')\r\n",
					"    AND T1.horizonId IS NOT NULL\r\n",
					"    AND T1.expected_from = (SELECT MAX(expected_from) FROM odw_standardised_db.pins_inspectors)\r\n",
					";"
				],
				"execution_count": 3
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Dataset is created that contains changed data and corresponding target data\n",
					"- This script combines data that has been updated, Deleted or is new, with corresponding target data\n",
					"- View **pins_inspectors_new** is unioned to the target data filter to only those rows where changes have been detected\n",
					"## View pins_inspectors_changed_rows is created"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"-- Create new and updated dataset\r\n",
					"\r\n",
					"CREATE OR REPLACE TEMPORARY VIEW pins_inspectors_changed_rows\r\n",
					"    AS\r\n",
					"-- gets updated, deleted and new rows \r\n",
					"Select \r\n",
					"    InspectorsId,\r\n",
					"    horizonId,\r\n",
					"    firstName,\r\n",
					"    lastName,\r\n",
					"    postName,\r\n",
					"    organisationName,\r\n",
					"    title,\r\n",
					"    salutation,\r\n",
					"    qualifications,\r\n",
					"    email,    \r\n",
					"    Migrated,\r\n",
					"    ODTSourceSystem,\r\n",
					"    IngestionDate,\r\n",
					"    ValidTo,\r\n",
					"    RowID,\r\n",
					"    IsActive\r\n",
					"\r\n",
					"From pins_inspectors_new WHERE HistoricIsActive = 'Y' or HistoricIsActive IS NULL\r\n",
					"\r\n",
					"    UNION ALL\r\n",
					"\r\n",
					"-- gets original versions of updated rows so we can update EndDate and set IsActive flag to 'N'\r\n",
					"SELECT\r\n",
					"    InspectorsId,\r\n",
					"    horizonId,\r\n",
					"    firstName,\r\n",
					"    lastName,\r\n",
					"    postName,\r\n",
					"    organisationName,\r\n",
					"    title,\r\n",
					"    salutation,\r\n",
					"    qualifications,\r\n",
					"    email,\r\n",
					"    Migrated,\r\n",
					"    ODTSourceSystem,\r\n",
					"    IngestionDate,\r\n",
					"    ValidTo,\r\n",
					"    RowID,\r\n",
					"    IsActive\r\n",
					"    \r\n",
					"FROM odw_harmonised_db.pins_inspectors\r\n",
					"WHERE horizonId IN (SELECT horizonId FROM pins_inspectors_new WHERE horizonId IS NULL) AND IsActive = 'Y'; "
				],
				"execution_count": 4
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"\n",
					"CREATE OR REPLACE TEMPORARY VIEW Loading_month\n",
					"\n",
					"    AS\n",
					"\n",
					"SELECT DISTINCT\n",
					"    IngestionDate AS IngestionDate,\n",
					"    to_timestamp(date_sub(IngestionDate,1)) AS ClosingDate,\n",
					"    'Y' AS IsActive\n",
					"\n",
					"FROM pins_inspectors_new;\n",
					"\n",
					"CREATE OR REPLACE TEMPORARY VIEW pins_inspectors_changed_rows_final\n",
					"    AS\n",
					"SELECT \n",
					"    InspectorsId,\n",
					"    horizonId,\n",
					"    firstName,\n",
					"    lastName,\n",
					"    postName,\n",
					"    organisationName,\n",
					"    title,\n",
					"    salutation,\n",
					"    qualifications,\n",
					"    email,    \n",
					"    T1.Migrated,\n",
					"    T1.ODTSourceSystem,\n",
					"    T1.IngestionDate,\n",
					"    T1.ValidTo,\n",
					"    T1.RowID,\n",
					"    T1.IsActive,\n",
					"    T2.ClosingDate\n",
					"FROM pins_inspectors_changed_rows T1\n",
					"FULL JOIN Loading_month T2 ON T1.IsActive = T2.IsActive"
				],
				"execution_count": 5
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# View pins_inspectors_changed_rows is used in a merge (Upsert) statement into the target table\n",
					"- **WHEN MATCHED** ON the surrogate Key, EndDate is set to today -1 day and the IsActive flag is set to 'N'\n",
					"- **WHEN NOT MATCHED** ON the surrogate Key, insert rows\n",
					"## Table odw_harmonised_db.pins_inspectors is updated"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"\r\n",
					"-- merge into dim table\r\n",
					"MERGE INTO odw_harmonised_db.pins_inspectors AS Target\r\n",
					"USING pins_inspectors_changed_rows_final AS Source\r\n",
					"\r\n",
					"ON Source.postName = Target.postName AND Target.IsActive = 'Y'\r\n",
					"\r\n",
					"-- For Updates existing rows\r\n",
					"\r\n",
					"WHEN MATCHED\r\n",
					"    THEN \r\n",
					"    UPDATE SET\r\n",
					"    Target.ValidTo = to_timestamp(ClosingDate),\r\n",
					"    Target.IsActive = 'N'\r\n",
					"\r\n",
					"-- Insert completely new rows\r\n",
					"\r\n",
					"WHEN NOT MATCHED \r\n",
					"    THEN INSERT (\r\n",
					"        InspectorsId,\r\n",
					"        horizonId,\r\n",
					"        firstName,\r\n",
					"        lastName,\r\n",
					"        postName,\r\n",
					"        organisationName,\r\n",
					"        title,\r\n",
					"        salutation,\r\n",
					"        qualifications,\r\n",
					"        email,        \r\n",
					"        Migrated,\r\n",
					"        ODTSourceSystem,\r\n",
					"        IngestionDate,\r\n",
					"        ValidTo,\r\n",
					"        RowID,\r\n",
					"        IsActive)\r\n",
					"    VALUES (\r\n",
					"        Source.InspectorsId,\r\n",
					"        Source.horizonId,\r\n",
					"        Source.firstName,\r\n",
					"        Source.lastName,\r\n",
					"        Source.postName,\r\n",
					"        Source.organisationName,\r\n",
					"        Source.title,\r\n",
					"        Source.salutation,\r\n",
					"        Source.qualifications,\r\n",
					"        Source.email,        \r\n",
					"        Source.Migrated,\r\n",
					"        Source.ODTSourceSystem,\r\n",
					"        Source.IngestionDate,\r\n",
					"        Source.ValidTo,\r\n",
					"        Source.RowID,\r\n",
					"        Source.IsActive)\r\n",
					"     ;   "
				],
				"execution_count": 6
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Fix the IDs\n",
					"- No auto-increment feature is available in delta tables, therefore we need to create new IDs for the inserted rows\n",
					"- This is done by select the target data and using INSERT OVERWRITE to re-insert the data is a new Row Number\n",
					"## Table odw_harmonised_db.pins_inspectors is updated"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"-- Insert new pins_inspectors\r\n",
					"\r\n",
					"INSERT OVERWRITE odw_harmonised_db.pins_inspectors\r\n",
					"\r\n",
					"SELECT \r\n",
					"    ROW_NUMBER() OVER (ORDER BY InspectorsId NULLS LAST) AS InspectorsId,\r\n",
					"    horizonId,\r\n",
					"    firstName,\r\n",
					"    lastName,\r\n",
					"    postName,\r\n",
					"    organisationName,\r\n",
					"    title,\r\n",
					"    salutation,\r\n",
					"    qualifications,\r\n",
					"    email,    \r\n",
					"    Migrated,\r\n",
					"    ODTSourceSystem,\r\n",
					"    \"LPA\" as SourceSystemID,\r\n",
					"    IngestionDate,\r\n",
					"    ValidTo,\r\n",
					"    RowID,\r\n",
					"    IsActive\r\n",
					"    \r\n",
					"FROM odw_harmonised_db.pins_inspectors;\r\n",
					""
				],
				"execution_count": 9
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"logInfo(f\"{db_name}.{table_name} populated\")"
				],
				"execution_count": 10
			}
		]
	}
}