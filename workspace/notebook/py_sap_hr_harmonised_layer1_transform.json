{
	"name": "py_sap_hr_harmonised_layer1_transform",
	"properties": {
		"folder": {
			"name": "archive"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodwpr",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "fb552b78-e13f-4507-8d0e-83deb210f865"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/a82fd28d-5989-4e06-a0bb-1a5d859f9e0c/resourceGroups/pins-rg-data-odw-prod-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-prod-uks/bigDataPools/pinssynspodwpr",
				"name": "pinssynspodwpr",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-prod-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodwpr",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net",
					"authHeader": null
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"extraHeader": null
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"drop table if exists odw_workspace_db.sap_hr_layer1_harmonised;\r\n",
					"create table odw_workspace_db.sap_hr_layer1_harmonised as \r\n",
					"SELECT\r\n",
					"        SHR.Pers_No\r\n",
					"        ,case LEFT( SHR.Pers_No, 2)\r\n",
					"\t\twhen '50' then case char_length(SHR.Pers_No) \r\n",
					"\t\t\twhen 6 then  SHR.Pers_No\r\n",
					"\t\t\telse substring(cast( SHR.Pers_No as varchar(50)), 3, char_length(cast( SHR.Pers_No as varchar(50))))\r\n",
					"\t\t\t\tend\r\n",
					"\t\t\telse  SHR.Pers_No\r\n",
					"\t\t\t\t\tend as PINS_Join_staff_number\r\n",
					"        ,case when SHR.PS_group = 'BAND 1' and SHR.Contract_Type = 'Fixed Term Contract' then 'FTC-B1'\r\n",
					"\t\t  when SHR.PS_group = 'BAND 2' and SHR.Contract_Type = 'Fixed Term Contract' then 'FTC-B2'\r\n",
					"\t\t  when SHR.PS_group = 'BAND 3' and SHR.Contract_Type = 'Fixed Term Contract' then 'FTC-B3'\r\n",
					"\t\t  when SHR.PS_group = 'BAND 1' and SHR.Contract_Type <> 'Fixed Term Contract' then 'B1'\r\n",
					"\t\t  when SHR.PS_group = 'BAND 2' and SHR.Contract_Type <> 'Fixed Term Contract' then 'B2'\r\n",
					"\t\t  when SHR.PS_group = 'BAND 3' and SHR.Contract_Type <> 'Fixed Term Contract' then 'B3'\r\n",
					"\t\t  else SHR.PS_group end as PINS_join_grade\r\n",
					"        ,Pers_No as pins_staff_number\r\n",
					"\t\t,First_name  given_names\r\n",
					"        ,Last_name family_name\r\n",
					"        ,Employment_Status active_status\r\n",
					"\t\t,ROUND(SHR.FTE,2) FTE\r\n",
					"\t\t,case \r\n",
					"              when SHR.Position1 = 'Inspector Manager' then 1 \r\n",
					"             else 0 end as is_sgl\r\n",
					"\t\t,SHR.Work_Contract\r\n",
					"\t\t,case SHR.Work_Contract\r\n",
					"\t        when 'Non-Sal. Inspec' then 'Non-Salaried Inspector'\r\n",
					"\t        else SHR.Organizational_Unit\r\n",
					"\t    end as resource_code\r\n",
					"\t\t,case left(SHR.PS_group, 3)\r\n",
					"\t\twhen 'FTC' then 'FTC'\r\n",
					"\t\twhen 'NSI' then 'NSI'\r\n",
					"\t\telse 'Salaried'\t\t\r\n",
					"\t    end as emp_type ,\r\n",
					"\t\tPDAC_ETL_Date         \t\r\n",
					"\tFROM odw_standardised_db.sap_hr as SHR\r\n",
					"\twhere PDAC_ETL_Date > (select LastRun from odw_config_db.pipeline_runs where sourceName ='sap_hr' )\t;"
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					}
				},
				"source": [
					"%%sql\r\n",
					"merge into odw_config_db.pipeline_runs target\r\n",
					"using (select 'sap_hr' as source_name , max(PDAC_ETL_Date ) as max_PDAC_ETL_Date from odw_workspace_db.sap_hr_layer1_harmonised ) updates\r\n",
					"on target.sourceName=updates.source_name\r\n",
					"WHEN MATCHED THEN\r\n",
					"  UPDATE SET target.LastRun = updates.max_PDAC_ETL_Date\r\n",
					"WHEN NOT MATCHED\r\n",
					"  THEN INSERT (sourceName,LastRun) VALUES (source_name, max_PDAC_ETL_Date)"
				]
			}
		]
	}
}