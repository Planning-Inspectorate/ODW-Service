{
	"name": "nsip_data",
	"properties": {
		"description": "please refer to the NSIP Entity Message Topic Requirements  documentation",
		"folder": {
			"name": "odw-curated"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw34",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "c6838672-38a0-4e60-86bf-337d2d048d28"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw34",
				"name": "pinssynspodw34",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw34",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#### The purpose of this pyspark notebook is to ingest service bus data  into single external table, odw_curated_db.nsip_project.\r\n",
					"\r\n",
					"**Description**  \r\n",
					"The functionality of this notebook is to ingest data into odw_curated_db.nsip_project external table reading from odw_harmonised_db.nsip_project delta table.The addtitional functionality has been added to log the audit information to Application Insight by creating a Json dump at notebook exit.\r\n",
					"\r\n",
					"**Spark Cluster Configuration** -> Apache Spark Version- 3.4, Python Version \t\t- 3.10, Delta Lake Version \t- 2.4"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%run utils/py_logging_decorator"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Initialise Application Insight Logging functions"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"%run utils/py_utils_common_logging_output"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.sql.functions import *\r\n",
					"from pyspark.sql.types import *\r\n",
					"from pyspark.sql import DataFrame\r\n",
					"import json"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"db_name: str = \"odw_curated_db\"\r\n",
					"entity_name: str = \"nsip-project\"\r\n",
					"table_name: str = \"odw_curated_db.nsip_project\"\r\n",
					"\r\n",
					"start_exec_time = str(datetime.now())\r\n",
					"insert_count = 0\r\n",
					"update_count = 0\r\n",
					"delete_count = 0"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Create DataFrame of required data"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"try:\r\n",
					"\tdf = spark.sql(\"\"\"\r\n",
					"\t\tSELECT\r\n",
					"\t\t\tCAST(Project.caseId AS INT) as caseId\r\n",
					"\t\t\t,Project.caseReference\r\n",
					"\t\t\t,Project.projectName\r\n",
					"\t\t\t,Project.projectNameWelsh\r\n",
					"\t\t\t,Project.projectDescription\r\n",
					"\t\t\t,Project.projectDescriptionWelsh\r\n",
					"\t\t\t,Project.decision\r\n",
					"\t\t\t,LOWER(project.publishStatus) AS publishStatus\r\n",
					"\t\t\t,Project.sector\r\n",
					"\t\t\t,CASE\r\n",
					"\t\t\t\tWHEN Project.ProjectType = 'WW01 - Waste Water treatment Plants' THEN\r\n",
					"\t\t\t\t\t'WW01 - Waste Water Treatment Plants'\r\n",
					"\t\t\t\tELSE \r\n",
					"\t\t\t\t\tProject.ProjectType\r\n",
					"\t\t\tEND AS projectType\r\n",
					"\t\t\t,LOWER(\tCASE \r\n",
					"\t\t\t\t\t\tWHEN Project.ODTSourceSystem = 'ODT' THEN \r\n",
					"\t\t\t\t\t\t\t'back-office-applications' \r\n",
					"\t\t\t\t\t\tELSE \r\n",
					"\t\t\t\t\t\t\tProject.ODTSourceSystem \r\n",
					"\t\t\t\t\tEND) AS sourceSystem\r\n",
					"\t\t\t,LOWER(REPLACE(REPLACE(Project.Stage,'-', '_'),' ', '_')) AS stage\r\n",
					"\t\t\t,Project.projectLocation\r\n",
					"\t\t\t,Project.projectLocationWelsh\r\n",
					"\t\t\t,Project.projectEmailAddress\r\n",
					"\t\t\t,Project.regions\r\n",
					"\t\t\t,Project.transboundary\r\n",
					"\t\t\t,CAST(project.Easting AS INT) AS easting\r\n",
					"\t\t\t,CAST(project.Northing AS INT) AS northing\r\n",
					"\t\t\t,Project.WelshLanguage AS welshLanguage\r\n",
					"\t\t\t,Project.mapZoomLevel\r\n",
					"\t\t\t,Project.SecretaryOfState AS secretaryOfState\r\n",
					"\t\t\t-- Pre-application dates\r\n",
					"\t\t\t,Project.datePINSFirstNotifiedOfProject\r\n",
					"\t\t\t,Project.dateProjectAppearsOnWebsite\t\r\n",
					"\t\t\t,Project.anticipatedSubmissionDateNonSpecific\r\n",
					"\t\t\t,Project.anticipatedDateOfSubmission\r\n",
					"\t\t\t,Project.screeningOpinionSought\t\r\n",
					"\t\t\t,Project.screeningOpinionIssued\r\n",
					"\t\t\t,Project.scopingOpinionSought\r\n",
					"\t\t\t,Project.scopingOpinionIssued\r\n",
					"\t\t\t,Project.section46Notification\r\n",
					"\t\t\t-- acceptance dates\r\n",
					"\t\t\t,Project.dateOfDCOSubmission\r\n",
					"\t\t\t,Project.deadlineForAcceptanceDecision\r\n",
					"\t\t\t,Project.dateOfDCOAcceptance\r\n",
					"\t\t\t,Project.dateOfNonAcceptance\r\n",
					"\t\t\t--pre examination dates\r\n",
					"\t\t\t,Project.dateOfRepresentationPeriodOpen\r\n",
					"\t\t\t,Project.dateOfRelevantRepresentationClose\r\n",
					"\t\t\t,Project.extensionToDateRelevantRepresentationsClose\r\n",
					"\t\t\t,Project.dateRRepAppearOnWebsite\r\n",
					"\t\t\t,Project.dateIAPIDue\r\n",
					"\t\t\t,Project.rule6LetterPublishDate\r\n",
					"\t\t\t,Project.preliminaryMeetingStartDate\r\n",
					"\t\t\t,Project.notificationDateForPMAndEventsDirectlyFollowingPM\r\n",
					"\t\t\t,Project.notificationDateForEventsDeveloper\r\n",
					"\t\t\t-- examination dates\r\n",
					"\t\t\t,Project.dateSection58NoticeReceived\r\n",
					"\t\t\t,Project.confirmedStartOfExamination\r\n",
					"\t\t\t,CAST (Project.rule8LetterPublishDate AS DATE) AS rule8LetterPublishDate\r\n",
					"\t\t\t,Project.deadlineForCloseOfExamination\r\n",
					"\t\t\t,Project.dateTimeExaminationEnds\r\n",
					"\t\t\t,Project.stage4ExtensionToExamCloseDate\r\n",
					"\t\t\t--recommendation dates\r\n",
					"\t\t\t,Project.deadlineForSubmissionOfRecommendation\r\n",
					"\t\t\t,Project.dateOfRecommendations\r\n",
					"\t\t\t,Project.stage5ExtensionToRecommendationDeadline\r\n",
					"\t\t\t--decision dates\r\n",
					"\t\t\t,Project.deadlineForDecision\r\n",
					"\t\t\t,Project.confirmedDateOfDecision\r\n",
					"\t\t\t,Project.stage5ExtensionToDecisionDeadline\r\n",
					"\t\t\t--post decision dates\r\n",
					"\t\t\t,Project.jRPeriodEndDate\r\n",
					"\t\t\t--withdrawl dates\r\n",
					"\t\t\t,Project.dateProjectWithdrawn\r\n",
					"\t\t\t-- Additional fields\r\n",
					"\t\t\t,Project.operationsLeadId\r\n",
					"\t\t\t,Project.operationsManagerId\r\n",
					"\t\t\t,Project.caseManagerId\r\n",
					"\t\t\t,Project.nsipOfficerIds\r\n",
					"\t\t\t,Project.nsipAdministrationOfficerIds\r\n",
					"\t\t\t,Project.leadInspectorId\r\n",
					"\t\t\t,Project.inspectorIds\r\n",
					"\t\t\t,Project.environmentalServicesOfficerId\r\n",
					"\t\t\t,Project.legalOfficerId\r\n",
					"\t\t\t,Project.applicantId\r\n",
					"\t\t\t,Project.migrationStatus\r\n",
					"\t\t\t,Project.dateOfReOpenRelevantRepresentationStart\r\n",
					"\t\t\t,Project.dateOfReOpenRelevantRepresentationClose\r\n",
					"\t\t\t,Project.isMaterialChange\r\n",
					"\t\tFROM \r\n",
					"\t\t\todw_harmonised_db.nsip_project AS Project\r\n",
					"\t\tWHERE \r\n",
					"\t\t\tProject.IsActive='Y'\r\n",
					"\t\t\"\"\"\r\n",
					"\t)\r\n",
					"\t\r\n",
					"except Exception as e:\r\n",
					"    logError(f\"Error in SQL query for table odw_harmonised_db.sb_appeal_event_estimate :\\n{e}\")\r\n",
					"    error_message = app_insight_logger.format_error_message(e, max_length=800)\r\n",
					"    end_exec_time = str(datetime.now())\r\n",
					"    app_insight_logger.add_table_result(\r\n",
					"        delta_table_name = table_name,\r\n",
					"        insert_count = insert_count, \r\n",
					"        update_count = update_count, \r\n",
					"        delete_count = delete_count, \r\n",
					"        table_result = \"failed\",\r\n",
					"        start_exec_time = start_exec_time, \r\n",
					"        end_exec_time = end_exec_time,\r\n",
					"        total_exec_time = \"\",\r\n",
					"        error_message = error_message\r\n",
					"    )\r\n",
					"    # Exit with the JSON result\r\n",
					"    mssparkutils.notebook.exit(app_insight_logger.generate_processing_results())    "
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Write DataFrame to table"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"try:\r\n",
					"    logInfo(f\"Writing to {table_name}\")\r\n",
					"    insert_count = df.count()\r\n",
					"\r\n",
					"    df.write.mode(\"overwrite\").format(\"parquet\").saveAsTable(table_name)\r\n",
					"    logInfo(f\"Written to {table_name}\")\r\n",
					"    \r\n",
					"    end_exec_time = str(datetime.now())\r\n",
					"    app_insight_logger.add_table_result(                    \r\n",
					"        delta_table_name = table_name,\r\n",
					"        insert_count = insert_count, \r\n",
					"        update_count = update_count, \r\n",
					"        delete_count = delete_count, \r\n",
					"        table_result = \"success\",\r\n",
					"        start_exec_time = start_exec_time, \r\n",
					"        end_exec_time = end_exec_time,\r\n",
					"        total_exec_time = \"\",\r\n",
					"        error_message = \"\"\r\n",
					"    )\r\n",
					"    \r\n",
					"except Exception as e:\r\n",
					"    logError(f\"Error appending data to the curated layer table :\\n{e}\")\r\n",
					"    error_message = app_insight_logger.format_error_message(e, max_length=800)\r\n",
					"    end_exec_time = str(datetime.now())\r\n",
					"    app_insight_logger.add_table_result(\r\n",
					"        delta_table_name = table_name,\r\n",
					"        insert_count = insert_count, \r\n",
					"        update_count = update_count, \r\n",
					"        delete_count = delete_count, \r\n",
					"        table_result = \"failed\",\r\n",
					"        start_exec_time = start_exec_time, \r\n",
					"        end_exec_time = end_exec_time,\r\n",
					"        total_exec_time = \"\",\r\n",
					"        error_message = error_message\r\n",
					"    )\r\n",
					"    # Exit with the JSON result\r\n",
					"    mssparkutils.notebook.exit(app_insight_logger.generate_processing_results())    "
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Produce Json formatted output"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"# Exit with the JSON result\r\n",
					"mssparkutils.notebook.exit(app_insight_logger.generate_processing_results())"
				],
				"execution_count": null
			}
		]
	}
}