{
	"name": "vw_dim_HR_Grade",
	"properties": {
		"folder": {
			"name": "odw-curated/saphr"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw34",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "3b82d567-87ea-4e6a-9e58-6f3dd7ac142b"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw34",
				"name": "pinssynspodw34",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw34",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#### The purpose of this notebook is to read data from Harmoised layer and build a view & table for Power BI use.\n",
					"\n",
					"**Author** &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   **Created Date** &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; **Description**  \n",
					"Prathap Adicherla &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;01-April-2025 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Grade  details Covered in here;"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"from pyspark.sql.functions import udf, col, lit, when, coalesce, concat, sum, avg, max, min, count, countDistinct, date_format, to_date, datediff, months_between, year, month,  hour, minute, second, expr, asc, desc\n",
					"from pyspark.sql.types import DateType, TimestampType, StringType, IntegerType, FloatType, DoubleType, BooleanType, StructType, StructField, ArrayType, MapType\n",
					"from pyspark.sql.window import Window\n",
					"from pyspark.sql.functions import row_number, rank, dense_rank, lag, lead, ntile\n",
					"from pyspark.sql import SQLContext\n",
					"from pyspark.sql import DataFrame\n",
					"from pyspark.sql import functions as F\n",
					"from pyspark.sql.avro.functions import from_avro, to_avro\n",
					"from pyspark.sql.streaming import DataStreamReader, DataStreamWriter\n",
					"from pyspark.sql.utils import AnalysisException\n",
					"from pyspark.sql.catalog import Catalog\n",
					"from pyspark.sql.column import Column\n",
					"from pyspark.sql.group import GroupedData\n",
					"from pyspark.sql.pandas.functions import pandas_udf\n",
					"\n",
					"from datetime import datetime, timedelta\n",
					"import pandas as pd\n",
					"import numpy as np"
				],
				"execution_count": 5
			},
			{
				"cell_type": "code",
				"source": [
					"%run /utils/py_logging_decorator"
				],
				"execution_count": 6
			},
			{
				"cell_type": "code",
				"source": [
					"try:\n",
					"    logInfo(\"Starting HR Grade dimension setup\")\n",
					"    \n",
					"    # Get storage account \n",
					"    storage_account = mssparkutils.notebook.run('/utils/py_utils_get_storage_account')\n",
					"    logInfo(f\"Using storage account: {storage_account}\")\n",
					"    \n",
					"    # Fix the path\n",
					"    storage_account = storage_account.rstrip('/')\n",
					"    delta_table_path = f\"abfss://odw-curated@{storage_account}/saphr/pbi_dim_HR_Grade\"\n",
					"    logInfo(f\"Delta table will be created at: {delta_table_path}\")\n",
					"    \n",
					"    # Create/refresh view\n",
					"    logInfo(\"Creating view odw_curated_db.vw_dim_HR_Grade\")\n",
					"    spark.sql(\"\"\"\n",
					"    CREATE OR REPLACE VIEW odw_curated_db.vw_dim_HR_Grade AS\n",
					"    SELECT DISTINCT\n",
					"        RANK() OVER(ORDER BY a.Grade) AS dim_grade_key,\n",
					"        a.Grade,\n",
					"        a.GradeDescription,\n",
					"        a.Inspector_Support,\n",
					"        a.GradeGroup,\n",
					"        CASE a.Grade \n",
					"            WHEN 'AA' THEN 1\n",
					"            WHEN 'AO' THEN 3\n",
					"            WHEN 'APP AO' THEN 2\n",
					"            WHEN 'APP EO' THEN 5\n",
					"            WHEN 'EO' THEN 4\n",
					"            WHEN 'HEO' THEN 6\n",
					"            WHEN 'SEO' THEN 7\n",
					"            WHEN 'G7' THEN 8\n",
					"            WHEN 'G6' THEN 9\n",
					"            WHEN 'GM' THEN 10\n",
					"            WHEN 'SCSPB1' THEN 11\n",
					"            WHEN 'SCSPB2' THEN 12\n",
					"            ELSE 99\n",
					"        END AS SortKey\n",
					"    FROM (\n",
					"        SELECT DISTINCT\n",
					"            CASE COALESCE(PSgroup, 'Unknown')\n",
					"                WHEN '' THEN '-1'\n",
					"                WHEN 'Unknown' THEN '-1'\n",
					"                WHEN 'Not Payroll Relevant' THEN '-1'\n",
					"                ELSE PSgroup\n",
					"            END AS Grade,\n",
					"            CASE PSgroup\n",
					"                WHEN 'APO' THEN 'Appeal Planning Officer'\n",
					"                WHEN 'AA' THEN 'Administrative Assistant'\n",
					"                WHEN 'AO' THEN 'Administrative Officer'\n",
					"                WHEN 'APP AO' THEN 'Appeals Administrative Assistant'\n",
					"                WHEN 'APP EO' THEN 'Appeals Executive Officer'\n",
					"                WHEN 'APP HEO' THEN 'Appeals Higher Executive Officer'\n",
					"                WHEN 'BAND 1' THEN 'Band 1 Inspector'\n",
					"                WHEN 'BAND 2' THEN 'Band 2 Inspector'\n",
					"                WHEN 'BAND 3' THEN 'Band 3 Inspector'\n",
					"                WHEN 'EO' THEN 'Executive Officer'\n",
					"                WHEN 'G6' THEN 'Grade 6'\n",
					"                WHEN 'G7' THEN 'Grade 7'\n",
					"                WHEN 'GM' THEN 'Group Manager'\n",
					"                WHEN 'HEO' THEN 'Higher Executive Officer'\n",
					"                WHEN 'SEO' THEN 'Senior Executive Officer'\n",
					"                WHEN 'PL' THEN 'Professional Lead'\n",
					"                WHEN 'SCSPB1' THEN 'Director'\n",
					"                WHEN 'SCSPB2' THEN 'Chief Executive'\n",
					"                ELSE 'Unknown'\n",
					"            END AS GradeDescription,\n",
					"            CASE\n",
					"                WHEN PSgroup LIKE 'BAND%' THEN 'Inspector'\n",
					"                WHEN PSgroup = 'APO' THEN 'Inspector'\n",
					"                ELSE 'Other Profession'\n",
					"            END AS Inspector_Support,\n",
					"            CASE PSgroup\n",
					"                WHEN 'AA' THEN 'AA'\n",
					"                WHEN 'APO' THEN 'APO'\n",
					"                WHEN 'AO' THEN 'AO'\n",
					"                WHEN 'APP AO' THEN 'AO'\n",
					"                WHEN 'APP EO' THEN 'EO'\n",
					"                WHEN 'APP HEO' THEN 'HEO'\n",
					"                WHEN 'BAND 1' THEN 'BAND 1'\n",
					"                WHEN 'BAND 2' THEN 'BAND 2'\n",
					"                WHEN 'BAND 3' THEN 'BAND 3'\n",
					"                WHEN 'EO' THEN 'EO'\n",
					"                WHEN 'G6' THEN 'G6'\n",
					"                WHEN 'G7' THEN 'G7'\n",
					"                WHEN 'GM' THEN 'G6'\n",
					"                WHEN 'HEO' THEN 'HEO'\n",
					"                WHEN 'SEO' THEN 'SEO'\n",
					"                WHEN 'PL' THEN 'PL'\n",
					"                WHEN 'SCSPB1' THEN 'G5+'\n",
					"                WHEN 'SCSPB2' THEN 'G5+'\n",
					"                ELSE 'Unknown'\n",
					"            END AS GradeGroup\n",
					"        FROM odw_harmonised_db.hist_SAP_HR\n",
					"    ) a\n",
					"    \"\"\")\n",
					"    logInfo(\"Successfully created view odw_curated_db.vw_dim_HR_Grade\")\n",
					"    \n",
					"    # Count records in view\n",
					"    grade_count = spark.sql(\"SELECT COUNT(*) as count FROM odw_curated_db.vw_dim_HR_Grade\").collect()[0]['count']\n",
					"    logInfo(f\"View contains {grade_count} distinct grade records\")\n",
					"    \n",
					"    # Drop existing table if it exists\n",
					"    logInfo(\"Dropping table odw_curated_db.pbi_dim_HR_Grade if it exists\")\n",
					"    spark.sql(\"\"\"\n",
					"    DROP TABLE IF EXISTS odw_curated_db.pbi_dim_HR_Grade\n",
					"    \"\"\")\n",
					"    logInfo(\"Table dropped or did not exist\")\n",
					"    \n",
					"    # Create table from view\n",
					"    logInfo(\"Creating table odw_curated_db.pbi_dim_HR_Grade from view with specified location\")\n",
					"    spark.sql(f\"\"\"\n",
					"    CREATE OR REPLACE TABLE odw_curated_db.pbi_dim_HR_Grade\n",
					"    USING delta\n",
					"    LOCATION '{delta_table_path}'\n",
					"    AS SELECT * FROM odw_curated_db.vw_dim_HR_Grade\n",
					"    \"\"\")\n",
					"    \n",
					"    # Count records in table\n",
					"    table_count = spark.sql(\"SELECT COUNT(*) as count FROM odw_curated_db.pbi_dim_HR_Grade\").collect()[0]['count']\n",
					"    logInfo(f\"Created table with {table_count} records at location: {delta_table_path}\")\n",
					"    \n",
					"    logInfo(\"HR Grade dimension setup completed successfully\")\n",
					"\n",
					"except Exception as e:\n",
					"    logError(f\"Error in HR Grade dimension setup: {str(e)}\")\n",
					"    logException(e)\n",
					"    raise e\n",
					"finally:\n",
					"    logInfo(\"Flushing logs\")\n",
					"    flushLogging()"
				],
				"execution_count": 7
			}
		]
	}
}