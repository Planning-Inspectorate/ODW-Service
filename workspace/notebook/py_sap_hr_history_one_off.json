{
	"name": "py_sap_hr_history_one_off",
	"properties": {
		"folder": {
			"name": "odw-harmonised/saphr"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw34",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "ab3a1dcf-80ab-4f06-98bf-f2a2d5c76e59"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw34",
				"name": "pinssynspodw34",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw34",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#### The purpose of this notebook is to read data from Harmoised layer and build a table for Curated Layer.\n",
					"\n",
					"**Author** &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   **Created Date** &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; **Description**  \n",
					"Prathap Adicherla &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;25-02-2025 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; This Notebook is designed to facilitate Enriches data with HR attributes."
				]
			},
			{
				"cell_type": "code",
				"source": [
					"from pyspark.sql.functions import udf,col,lit,when,coalesce,concat,sum,avg,max,min,count,countDistinct,date_format,to_date,datediff,months_between,year,month,hour,minute,second,expr,asc,desc\n",
					"from pyspark.sql.types import DateType,TimestampType,StringType,IntegerType,FloatType,DoubleType,BooleanType,StructType,StructField,ArrayType,MapType\n",
					"from pyspark.sql.window import Window\n",
					"from pyspark.sql.functions import row_number,rank,dense_rank,lag,lead,ntile\n",
					"from pyspark.sql import SQLContext\n",
					"from pyspark.sql import DataFrame\n",
					"from pyspark.sql import functions as F\n",
					"from pyspark.sql.avro.functions import from_avro, to_avro\n",
					"from pyspark.sql.streaming import DataStreamReader, DataStreamWriter\n",
					"from pyspark.sql.utils import AnalysisException\n",
					"from pyspark.sql.catalog import Catalog\n",
					"from pyspark.sql.column import Column\n",
					"from pyspark.sql.group import GroupedData\n",
					"from pyspark.sql.pandas.functions import pandas_udf\n",
					"from datetime import datetime, timedelta\n",
					"import pandas as pd\n",
					"import numpy as np"
				],
				"execution_count": 29
			},
			{
				"cell_type": "code",
				"source": [
					"%run utils/py_logging_decorator"
				],
				"execution_count": 30
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# One off load"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"try:\n",
					"    logInfo(\"Starting SAP HR historical data load\")\n",
					"    spark.conf.set(\"spark.sql.legacy.timeParserPolicy\", \"LEGACY\")\n",
					"    # First get count of records to be loaded\n",
					"    source_count = spark.sql(\"\"\"\n",
					"    SELECT COUNT(*) as count \n",
					"    FROM odw_standardised_db.sap_hr_hist_mig\n",
					"    \"\"\").collect()[0]['count']\n",
					"    \n",
					"    logInfo(f\"Found {source_count} records in source table\")\n",
					"    \n",
					"    # Clear historical data\n",
					"    logInfo(\"Clearing existing data from hist_SAP_HR\")\n",
					"    spark.sql(\"DELETE FROM odw_harmonised_db.hist_SAP_HR\")\n",
					"    \n",
					"    # Insert data with type conversions\n",
					"    logInfo(\"Loading transformed data into hist_SAP_HR\")\n",
					"    spark.sql(\"\"\"\n",
					"    INSERT INTO odw_harmonised_db.hist_SAP_HR\n",
					"    SELECT\n",
					"        CASE \n",
					"    WHEN LENGTH(PersNo) < 8 AND PersNo NOT LIKE '0%' \n",
					"    THEN LPAD(PersNo, 8, '0') \n",
					"    ELSE PersNo \n",
					"  END AS PersNo ,\n",
					"        Firstname,\n",
					"        Lastname,\n",
					"CASE \n",
					"    WHEN EmployeeNo IS NULL THEN NULL\n",
					"    \n",
					"    ELSE TRIM(EmployeeNo)\n",
					"END AS EmployeeNo,\n",
					"\n",
					"        CoCd,\n",
					"        CompanyCode,\n",
					"        PA,\n",
					"        PersonnelArea,\n",
					"        PSubarea,\n",
					"        PersonnelSubarea,\n",
					"        Orgunit,\n",
					"        OrganizationalUnit,\n",
					"        Organizationalkey,\n",
					"        OrganizationalKey1,\n",
					"        WorkC,\n",
					"        WorkContract,\n",
					"      case WHEN LENGTH(CT) < 2 AND CT NOT LIKE '0%' \n",
					"    THEN LPAD(CT, 2, '0') \n",
					"    ELSE CT \n",
					"  END AS CT,\n",
					"        ContractType,\n",
					"        PSgroup,\n",
					"        PayBandDescription,\n",
					"CASE \n",
					"    WHEN TRIM(FTE) = '' OR TRIM(FTE) = 'NULL' THEN NULL \n",
					"    ELSE FORMAT_NUMBER(TRY_CAST(FTE AS FLOAT), 2)\n",
					"END AS FTE,\n",
					"CASE \n",
					"            WHEN TRIM(Wkhrs) = '' OR TRIM(Wkhrs) = 'NULL' THEN NULL \n",
					"            ELSE CAST(ROUND(TRY_CAST(Wkhrs AS FLOAT), 4) AS DECIMAL(18,4))\n",
					"        END AS Wkhrs,\n",
					"        CASE \n",
					"            WHEN TRIM(IndicatorPartTimeEmployee) = '' OR TRIM(IndicatorPartTimeEmployee) = 'NULL' THEN NULL \n",
					"            ELSE IndicatorPartTimeEmployee \n",
					"        END AS IndicatorPartTimeEmployee,\n",
					"        S,\n",
					"        EmploymentStatus,\n",
					"        GenderKey,\n",
					"        TRAStartDate,\n",
					"        TRAEndDate,\n",
					"        TRAStatus,\n",
					"        TRAGrade,\n",
					"        PrevPersNo,\n",
					"       case WHEN LENGTH(ActR) < 2 AND ActR NOT LIKE '0%' \n",
					"    THEN LPAD(ActR, 2, '0') \n",
					"    ELSE ActR \n",
					"    END AS ActR,\n",
					"        ReasonforAction,\n",
					"        Position,\n",
					"        Position1,\n",
					"        CostCtr,\n",
					"        CostCentre,\n",
					"    CASE \n",
					"        WHEN CivilServiceStart IS NULL OR TRIM(CivilServiceStart) = '' OR TRIM(CivilServiceStart) = 'NULL' \n",
					"            THEN NULL\n",
					"       \n",
					"        WHEN CivilServiceStart RLIKE '^[0-9]{4}-[0-9]{1,2}-[0-9]{1,2}$'\n",
					"            THEN to_date(CivilServiceStart, 'yyyy-MM-dd')\n",
					"        \n",
					"        ELSE try_cast(to_date(CivilServiceStart, 'dd/MM/yyyy') AS DATE)\n",
					"    END AS CivilServiceStart,\n",
					"\n",
					"\n",
					"    CASE \n",
					"        WHEN DatetoCurrentJob IS NULL OR TRIM(DatetoCurrentJob) = '' OR TRIM(DatetoCurrentJob) = 'NULL' \n",
					"            THEN NULL\n",
					"       \n",
					"        WHEN DatetoCurrentJob RLIKE '^[0-9]{4}-[0-9]{1,2}-[0-9]{1,2}$'\n",
					"            THEN to_date(DatetoCurrentJob, 'yyyy-MM-dd')\n",
					"        \n",
					"        ELSE try_cast(to_date(DatetoCurrentJob, 'dd/MM/yyyy') AS DATE)\n",
					"    END AS DatetoCurrentJob ,\n",
					"\n",
					"\n",
					"    CASE \n",
					"        WHEN SeniorityDate IS NULL OR TRIM(SeniorityDate) = '' OR TRIM(SeniorityDate) = 'NULL' \n",
					"            THEN NULL\n",
					"       \n",
					"        WHEN SeniorityDate RLIKE '^[0-9]{4}-[0-9]{1,2}-[0-9]{1,2}$'\n",
					"            THEN to_date(SeniorityDate, 'yyyy-MM-dd')\n",
					"        \n",
					"        ELSE try_cast(to_date(SeniorityDate, 'dd/MM/yyyy') AS DATE)\n",
					"    END AS SeniorityDate,\n",
					"\n",
					"\n",
					"     CASE \n",
					"            WHEN TRIM(DatetoSubsitGrade) = '' OR TRIM(DatetoSubsitGrade) = 'NULL' THEN NULL \n",
					"            ELSE TRY_CAST(to_timestamp(DatetoSubsitGrade, 'dd/MM/yyyy') AS DATE) \n",
					"        END AS DatetoSubsitGrade,\n",
					"        CASE \n",
					"    WHEN LENGTH(PersNo1) < 8 AND PersNo1 NOT LIKE '0%' \n",
					"    THEN LPAD(PersNo1, 8, '0') \n",
					"    ELSE PersNo1 END AS PersNo1,\n",
					"        NameofManagerOM,\n",
					"        ManagerPosition,\n",
					"        ManagerPositionText,\n",
					"        CounterSignManager,\n",
					"        CASE \n",
					"    WHEN LENGTH(Loc) < 3 AND PersNo NOT LIKE '0%' \n",
					"    THEN LPAD(Loc, 3, '0') \n",
					"    ELSE Loc \n",
					"  END AS Loc,\n",
					"        Location,\n",
					"CASE \n",
					"    WHEN OrgStartDate IS NULL OR TRIM(OrgStartDate) = '' OR TRIM(OrgStartDate) = 'NULL' \n",
					"        THEN NULL\n",
					"    -- For dd/MM/yyyy format (your actual data format)\n",
					"    WHEN OrgStartDate LIKE '%/%'\n",
					"        THEN TO_DATE(OrgStartDate, 'dd/MM/yyyy')\n",
					"    -- Fallback for other formats (if any exist)\n",
					"    ELSE TRY_CAST(OrgStartDate AS DATE)\n",
					"END AS OrgStartDate ,\n",
					"        CASE\n",
					"        WHEN FixTermEndDate IS NULL THEN NULL\n",
					"        ELSE DATE_FORMAT(TO_DATE(FixTermEndDate, 'dd/MM/yyyy'), 'yyyy-MM-dd')\n",
					"    END AS FixTermEndDate ,\n",
					"CASE \n",
					"        WHEN LoanStartDate IS NULL THEN NULL\n",
					"        ELSE DATE_FORMAT(TO_DATE(LoanStartDate, 'dd/MM/yyyy'), 'yyyy-MM-dd') \n",
					"    END AS LoanStartDate,\n",
					"    CASE \n",
					"        WHEN LoanEndDate IS NULL THEN NULL\n",
					"        ELSE DATE_FORMAT(TO_DATE(LoanEndDate, 'dd/MM/yyyy'), 'yyyy-MM-dd') \n",
					"    END AS LoanEndDate,\n",
					"        EEGrp,\n",
					"        EmployeeGroup,\n",
					"         Annualsalary,\n",
					"        Curr,\n",
					"         NInumber,\n",
					"        CASE \n",
					"        WHEN Birthdate IS NULL THEN NULL\n",
					"        ELSE DATE_FORMAT(TO_DATE(Birthdate, 'dd/MM/yyyy'), 'yyyy-MM-dd') \n",
					"    END AS Birthdate,\n",
					"       case when Ageofemployee ='NULL' then '' else Ageofemployee end as  Ageofemployee,\n",
					"        EO,\n",
					"        Ethnicorigin,\n",
					"        NID,\n",
					"        Rel,\n",
					"        ReligiousDenominationKey,\n",
					"        SxO,\n",
					"        WageType,\n",
					"        EmployeeSubgroup,\n",
					"        LOAAbsType,\n",
					"        LOAAbsenceTypeText,\n",
					"        Schemereference,\n",
					"        PensionSchemeName,\n",
					"        DisabilityCode,\n",
					"        case when DisabilityText = NULL then '' else DisabilityText end as DisabilityText,\n",
					"        DisabilityCodeDescription,\n",
					"        PArea,\n",
					"        PayrollArea,\n",
					"         case when AssignmentNumber ='NULL' then '' else AssignmentNumber end as AssignmentNumber,\n",
					"CASE \n",
					"    WHEN TRIM(FTE2) = '' OR TRIM(FTE2) = 'NULL' THEN NULL \n",
					"    ELSE FORMAT_NUMBER(TRY_CAST(FTE2 AS FLOAT), 3)\n",
					"END AS FTE2,\n",
					"        CASE \n",
					"            WHEN TRIM(Report_MonthEnd_Date) = '' OR TRIM(Report_MonthEnd_Date) = 'NULL' THEN NULL \n",
					"            ELSE TRY_CAST(to_timestamp(Report_MonthEnd_Date, \"dd/MM/yyyy\") AS DATE) \n",
					"        END AS Report_MonthEnd_Date,\n",
					"        CURRENT_DATE() AS PDAC_ETL_Date,\n",
					"        'saphr' AS SourceSystemID,\n",
					"        CURRENT_DATE() AS IngestionDate,\n",
					"        CURRENT_TIMESTAMP() AS ValidTo,\n",
					"        NULL AS RowID,\n",
					"        'Y' AS IsActive,\n",
					"CASE \n",
					"    WHEN TRIM(leave_entitlement_hrs) = '' OR TRIM(leave_entitlement_hrs) = 'NULL' THEN NULL \n",
					"    ELSE CAST(ROUND(TRY_CAST(leave_entitlement_hrs AS FLOAT), 4) AS DECIMAL(18,4))\n",
					"END AS leave_entitlement_hrs,\n",
					"\n",
					"CASE \n",
					"    WHEN TRIM(leave_taken_hrs) = '' OR TRIM(leave_taken_hrs) = 'NULL' THEN NULL \n",
					"    ELSE CAST(ROUND(TRY_CAST(leave_taken_hrs AS FLOAT), 4) AS DECIMAL(18,4))\n",
					"END AS leave_taken_hrs,\n",
					"\n",
					"CASE \n",
					"    WHEN TRIM(leave_remaining_hours) = '' OR TRIM(leave_remaining_hours) = 'NULL' THEN NULL \n",
					"    ELSE CAST(ROUND(TRY_CAST(leave_remaining_hours AS FLOAT), 4) AS DECIMAL(18,4))\n",
					"END AS leave_remaining_hours,\n",
					"\n",
					"CASE \n",
					"    WHEN TRIM(leave_remaining_prorata_hours) = '' OR TRIM(leave_remaining_prorata_hours) = 'NULL' THEN NULL \n",
					"    ELSE CAST(ROUND(TRY_CAST(leave_remaining_prorata_hours AS FLOAT), 4) AS DECIMAL(18,4))\n",
					"END AS leave_remaining_prorata_hours\n",
					"    FROM \n",
					"        odw_standardised_db.sap_hr_hist_mig\n",
					"    \"\"\")\n",
					"    \n",
					"    # Verify the load was successful\n",
					"    loaded_count = spark.sql(\"\"\"\n",
					"    SELECT COUNT(*) as count \n",
					"    FROM odw_harmonised_db.hist_SAP_HR\n",
					"    WHERE IngestionDate = current_date()\n",
					"    \"\"\").collect()[0]['count']\n",
					"    \n",
					"    logInfo(f\"Successfully loaded {loaded_count} records\")\n",
					"    \n",
					"    if loaded_count != source_count:\n",
					"        logWarning(f\"Count mismatch: Source had {source_count} records, loaded {loaded_count} records\")\n",
					"    else:\n",
					"        logInfo(\"Record counts match between source and target\")\n",
					"    \n",
					"    logInfo(\"SAP HR historical data load completed successfully\")\n",
					"\n",
					"except Exception as e:\n",
					"    # Log the exception in detail\n",
					"    logError(f\"Error during SAP HR historical data load: {str(e)}\")\n",
					"    logException(e)\n",
					"    \n",
					"    # Re-raise the exception to ensure the notebook fails properly\n",
					"    raise e\n",
					"finally:\n",
					"    # Always flush logs regardless of success or failure\n",
					"    logInfo(\"Flushing logs\")\n",
					"    flushLogging()"
				],
				"execution_count": 31
			},
			{
				"cell_type": "code",
				"source": [
					""
				],
				"execution_count": null
			}
		]
	}
}