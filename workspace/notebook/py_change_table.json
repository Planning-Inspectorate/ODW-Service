{
	"name": "py_change_table",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "131a1c92-2df5-4efe-b9fd-1a0f96e823d3"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw",
				"name": "pinssynspodw",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%run /utils/py_logging_decorator"
				],
				"execution_count": 25
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"tags": [
						"parameters"
					]
				},
				"source": [
					"db_name=\"odw_harmonised_db\"\r\n",
					"table_name=\"casework_case_info_dim\""
				],
				"execution_count": 26
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"@logging_to_appins\r\n",
					"def new_schema_cast_columns(old_schema:dict, new_schema:str, db_name:str, table_name:str):\r\n",
					"    '''\r\n",
					"    '''\r\n",
					"    import logging \r\n",
					"    logger = logging.getLogger(__name__)\r\n",
					"    \r\n",
					"    from pyspark.sql import SparkSession\r\n",
					"    spark = SparkSession.builder.getOrCreate()\r\n",
					"    spark.conf.set(\"spark.databricks.delta.schema.autoMerge.enabled\", \"true\")\r\n",
					"\r\n",
					"    import json\r\n",
					"    new_fields = json.loads(new_schema)['fields']\r\n",
					"    old_fields = old_schema['fields']\r\n",
					"\r\n",
					"    column_type_changed = {}\r\n",
					"    for new_field in new_fields:\r\n",
					"        for old_field in old_fields:\r\n",
					"            if old_field['name'] == new_field['name'] and old_field['type'] != new_field['type']:\r\n",
					"                column_type_changed.update(dict({old_field['name']: new_field['type']}))\r\n",
					"    if column_type_changed != {}:\r\n",
					"        logger.info(\"detected column type changes, attempting to cast\")\r\n",
					"        from pyspark.sql.functions import col\r\n",
					"        # load to dataframe, change types\r\n",
					"        df = spark.read.format('delta').table(f'{db_name}.{table_name}')\r\n",
					"        for column in column_type_changed:\r\n",
					"            df = df.withColumn(column,col(column).cast(types_to_change[column]))\r\n",
					"        \r\n",
					"        # save df with new types overwriting the schema\r\n",
					"        df.write.format(\"delta\").mode(\"overwrite\").option(\"overwriteSchema\",True).saveAsTable(f'{db_name}.{table_name}')\r\n",
					"    else:\r\n",
					"        logger.info(\"no columns have changed type\")\r\n",
					"\r\n",
					"@logging_to_appins\r\n",
					"def apply_new_schema(db_name: str, table_name: str):\r\n",
					"    '''\r\n",
					"    Description:\r\n",
					"        - uses a database and table name to detect any new json schema that has been uploaded and changes column types and adds new columns as appropriate\r\n",
					"        - does not remove columns (doesn't matter)\r\n",
					"        - can't change column names \r\n",
					"\r\n",
					"    Arguments:\r\n",
					"        - db_name, one of odw_config_db, odw_standardised_db, odw_harmonised_db or odw_curated_db\r\n",
					"\r\n",
					"    Actions:\r\n",
					"        - Changes column types according to new schema, and adds new columns according to new schema\r\n",
					"    \r\n",
					"    Returns:\r\n",
					"        - Nothing\r\n",
					"\r\n",
					"    Exceptions:\r\n",
					"\r\n",
					"    '''\r\n",
					"    # import modules\r\n",
					"    from pyspark.sql import SparkSession\r\n",
					"    from notebookutils import mssparkutils\r\n",
					"    from pyspark.sql.types import StructType\r\n",
					"    import json\r\n",
					"    import logging \r\n",
					"    from delta.tables import DeltaTable\r\n",
					"\r\n",
					"    # initialising logging and spark session\r\n",
					"    logger = logging.getLogger(__name__)\r\n",
					"    spark = SparkSession.builder.getOrCreate()\r\n",
					"    spark.conf.set(\"spark.databricks.delta.schema.autoMerge.enabled\", \"true\")\r\n",
					"\r\n",
					"    # accessing environment variables for storage container\r\n",
					"    storage_acc_name = spark.sparkContext.environment.get('dataLakeAccountName', 'get')\r\n",
					"    storage_account= storage_acc_name + \".dfs.core.windows.net\"\r\n",
					"    config_storage_container = 'abfss://odw-config@' + storage_account + '/'\r\n",
					"    \r\n",
					"    # standardised db schema locations are in the orchestration.json file\r\n",
					"    if db_name.lower() == 'odw_standardised_db':\r\n",
					"        orchestration_json = spark.read.text(\"abfss://odw-config@\"+storage_acc_name+\".dfs.core.windows.net/orchestration/orchestration.json\", wholetext=True).first().value\r\n",
					"        json_config_dict = json.loads(orchestration_json)\r\n",
					"        try:\r\n",
					"            schema_location = \"abfss://odw-config@\"+storage_acc_name+\".dfs.core.windows.net/\" + next(config['Standardised_Table_Definition'] for config in json_config_dict['definitions'] if config['Standardised_Table_Name'] == table_name)\r\n",
					"            schema = spark.read.text(schema_location, wholetext=True).first().value\r\n",
					"        except StopIteration:\r\n",
					"            logger.info(\"Table Schema not found where expected\")\r\n",
					"            raise RuntimeError(\"Table Schema not found where expected\")\r\n",
					"\r\n",
					"    # harmonised schema locations are in the config container in similarly named folders\r\n",
					"    elif db_name.lower() == 'odw_harmonised_db' or db_name.lower() == 'odw_curated_db':\r\n",
					"        db_name_folder_mapping = dict({'odw_harmonised_db':'harmonised', 'odw_curated_db':'curated'})\r\n",
					"        folder = db_name_folder_mapping[db_name.lower()]\r\n",
					"        try:\r\n",
					"            schema_location = next(file.path for file in mssparkutils.fs.ls(\"abfss://odw-config@\"+storage_acc_name+\".dfs.core.windows.net/\"+ folder +\"_table_definitions/\") if file.name.lower().split('.json')[0] == table_name)\r\n",
					"            schema = spark.read.text(schema_location, wholetext=True).first().value\r\n",
					"        except StopIteration:\r\n",
					"            logger.info(\"Table Schema not found where expected\")\r\n",
					"            raise RuntimeError(\"Table Schema not found where expected\")\r\n",
					"\r\n",
					"    # config db schemas are located in the config account but in unique locations\r\n",
					"    elif db_name.lower() == 'odw_config_db':\r\n",
					"        if table_name.lower() == 'datalabs_log':\r\n",
					"            schema = \"abfss://odw-config@\"+storage_acc_name+\".dfs.core.windows.net/raw_logs/datalabs_log_json/fileshare_log_schema.json\"\r\n",
					"        elif table_name.lower() == 'raw_to_std_outstanding_files':\r\n",
					"            schema = \"abfss://odw-config@\"+storage_acc_name+\".dfs.core.windows.net/orchestration/scheduling_outstanding_files_table.json\"\r\n",
					"        else:\r\n",
					"            raise RuntimeError(\"No Schema Found\")\r\n",
					"\r\n",
					"    # check the table to see if there are any changes in the schema at all\r\n",
					"    current_json_str = spark.read.format('delta').table(f'{db_name}.{table_name}').schema.jsonValue()    \r\n",
					"    # print('\\n',json.loads(schema)['fields'],'\\n',current_json_str['fields'])\r\n",
					"    current_table_schma = json.dumps(current_json_str, sort_keys=True)\r\n",
					"    latest_json_schema = json.dumps(json.loads(schema), sort_keys=True)\r\n",
					"    print(current_table_schma,latest_json_schema)\r\n",
					"    if json.loads(schema)['fields'] == current_json_str['fields']:\r\n",
					"        logger.info(\"no changes in schema\")\r\n",
					"    else:\r\n",
					"        # get the last stable table version in case we need to rollback\r\n",
					"        from delta.tables import DeltaTable\r\n",
					"        table_location = spark.sql(f\"DESCRIBE DETAIL {db_name}.{table_name}\").toPandas()['location'][0]\r\n",
					"        delta_table = DeltaTable.forPath(spark, table_location)\r\n",
					"        fullHistoryDF = delta_table.history()\r\n",
					"        last_stable_version = fullHistoryDF.select(\"version\").first()['version']\r\n",
					"        try:\r\n",
					"            # attempt to cast existing columns with new column type\r\n",
					"            logger.info(\"casting columns\")\r\n",
					"            new_schema_cast_columns(current_json_str, schema, db_name, table_name)\r\n",
					"        except Exception as e:\r\n",
					"            # if casting fails, raise error and restore to last stable version in case any transactions have happened\r\n",
					"            logger.info(\"casting columns failed\")\r\n",
					"            delta_table.restoreToVersion(last_stable_version)\r\n",
					"            raise e\r\n",
					"\r\n",
					"        \r\n",
					"        # if successful, add new columns from new schema schema \r\n",
					"        try:\r\n",
					"            logger.info(\"adding new columns\")\r\n",
					"            new_struct = StructType.fromJson(json.loads(schema))\r\n",
					"            spark = SparkSession.builder.getOrCreate()\r\n",
					"            spark.conf.set(\"spark.databricks.delta.schema.autoMerge.enabled\", \"true\")\r\n",
					"            df = spark.createDataFrame([], new_struct)\r\n",
					"            df.write.option(\"mergeSchema\", \"true\").mode(\"append\").format('delta').saveAsTable(f'{db_name}.{table_name}')\r\n",
					"        except Exception as e:\r\n",
					"            # if adding new columns, raise error and restore to last stable version in case any transactions have happened\r\n",
					"            delta_table.restoreToVersion(last_stable_version)\r\n",
					"            logger.info(\"Failed to apply new schema, have rolled backed changes\")\r\n",
					"            raise e\r\n",
					"\r\n",
					""
				],
				"execution_count": 27
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"apply_new_schema(db_name,table_name)"
				],
				"execution_count": 28
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"spark.sql(f\"DESCRIBE HISTORY {db_name}.{table_name}\").toPandas()"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					""
				],
				"execution_count": null
			}
		]
	}
}