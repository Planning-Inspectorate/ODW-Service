{
	"name": "py_retry_logic",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "tempsparkpool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "99e34ad3-1dc4-4cf9-9efc-91566a843c7a"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/tempsparkpool",
				"name": "tempsparkpool",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/tempsparkpool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Example of using the tenacity library for retry logic\r\n",
					"url: https://tenacity.readthedocs.io/en/latest/"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"import subprocess\r\n",
					"subprocess.run([\"pip\", \"install\", \"--quiet\", \"tenacity\"])\r\n",
					"from tenacity import retry, wait_random_exponential, wait_exponential_jitter, RetryCallState, wait_exponential, stop_after_delay, stop_after_attempt"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Example with a randomly generated number and exponential backoff\r\n",
					"\r\n",
					"Wait time is random between 0 and 2^x where x = retry attempt"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def before_sleep(retry_state: RetryCallState):\r\n",
					"    print(f\"Retrying after {retry_state.next_action.sleep} seconds...\")\r\n",
					"\r\n",
					"# Retry with exponential backoff and jitter, and a custom wait time print\r\n",
					"@retry(wait=wait_random_exponential(multiplier=1, max=60), before_sleep=before_sleep)\r\n",
					"def wait_exponential_jitter():\r\n",
					"    # Simulate a 50% chance of failure\r\n",
					"    if random.random() < 0.5:\r\n",
					"        print(\"Random failure, raising exception.\")\r\n",
					"        raise Exception(\"Simulated random failure\")\r\n",
					"    else:\r\n",
					"        print(\"Operation succeeded!\")\r\n",
					"        return \"Success\"\r\n",
					"\r\n",
					"#change to debug\r\n",
					"if False:\r\n",
					"    # Test the retry logic\r\n",
					"    try:\r\n",
					"        wait_exponential_jitter()\r\n",
					"    except Exception as e:\r\n",
					"        print(f\"Operation failed after retries: {e}\")"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Example of mounting a storage path with the following configuration\r\n",
					"\r\n",
					"Exponential backoff (increasing wait time, not random)   \r\n",
					"Min wait time: 5 secs  \r\n",
					"Max wait time: 20 secs  \r\n",
					"Stop retrying after: 30 secs OR 5 attempts   \r\n",
					"Reraise the original error (storage mount error) rather than raising a retry error  \r\n",
					"Call the before_sleep function to print the number of secs before the next retry  \r\n",
					"\r\n",
					"Lots of options to configure this in the documentation"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# test with invalid folder path\r\n",
					"#folder_path = \"Horizon/2099-09-24\"\r\n",
					"#path = f\"abfss://odw-raw@pinsstodwdevuks9h80mb.dfs.core.windows.net/{folder_path}\"\r\n",
					"#print(f\"Attempting to mount storage at path: {path}\")\r\n",
					"#mssparkutils.fs.unmount(\"/temp_raw\") \r\n",
					"\r\n",
					"def before_sleep(retry_state: RetryCallState):\r\n",
					"    print(f\"Retrying after {retry_state.next_action.sleep} seconds...\")\r\n",
					"\r\n",
					"@retry(wait=wait_exponential(multiplier=1, min=5, max=20), stop=stop_after_delay(30) | stop_after_attempt(5), reraise=True, before_sleep=before_sleep)\r\n",
					"def mount_storage():\r\n",
					"    mssparkutils.fs.mount( \r\n",
					"    path, \r\n",
					"    \"/temp_raw\", \r\n",
					"    {\"linkedService\":\"ls_storage\"} \r\n",
					"    )   \r\n",
					"\r\n",
					"#change to debug\r\n",
					"if False:\r\n",
					"    try:\r\n",
					"        mount_storage()\r\n",
					"        print(\"Mounting storage succeeded\")\r\n",
					"    except Exception as e:\r\n",
					"        print(\"Mounting storage failed\")\r\n",
					"        print(e)"
				],
				"execution_count": null
			}
		]
	}
}