{
	"name": "py_fact_absence_all",
	"properties": {
		"folder": {
			"name": "odw-harmonised"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "8002fd07-6f92-4412-98ad-b422a803f792"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw",
				"name": "pinssynspodw",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Entity Name : fact_absence_all\n",
					"### Author: Prathap A\n",
					"### Date: 01/03/2025\n",
					"\n",
					"#### version : 0001"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Intialisations"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"from pyspark.sql.functions import udf, col, lit, when, coalesce, concat, sum, avg, max, min, count, countDistinct, date_format, to_date, datediff, months_between, year, month,  hour, minute, second, expr, asc, desc\n",
					"from pyspark.sql.types import DateType, TimestampType, StringType, IntegerType, FloatType, DoubleType, BooleanType, StructType, StructField, ArrayType, MapType\n",
					"from pyspark.sql.window import Window\n",
					"from pyspark.sql.functions import row_number, rank, dense_rank, lag, lead, ntile\n",
					"from pyspark.sql import SQLContext\n",
					"from pyspark.sql import DataFrame\n",
					"from pyspark.sql import functions as F\n",
					"from pyspark.sql.avro.functions import from_avro, to_avro\n",
					"from pyspark.sql.streaming import DataStreamReader, DataStreamWriter\n",
					"from pyspark.sql.utils import AnalysisException\n",
					"from pyspark.sql.catalog import Catalog\n",
					"from pyspark.sql.column import Column\n",
					"from pyspark.sql.group import GroupedData\n",
					"from pyspark.sql.pandas.functions import pandas_udf\n",
					"\n",
					"from datetime import datetime, timedelta\n",
					"import pandas as pd\n",
					"import numpy as np"
				],
				"execution_count": 2
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Load Data Into sap_hr_fact_absence_all"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### Back up"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"-- Truncate temporary and final tables\n",
					"DELETE FROM odw_harmonised_db.sap_hr_fact_absence_all_temp;\n",
					"DELETE FROM odw_harmonised_db.sap_hr_fact_absence_all;\n",
					"\n",
					"-- Step 1: Generate a sequence of numbers using a temporary view\n",
					"CREATE OR REPLACE TEMPORARY VIEW Numbers AS\n",
					"SELECT sequence_id AS n\n",
					"FROM (\n",
					"    SELECT posexplode(split(space(1000), ' ')) AS (sequence_id, value)\n",
					");\n",
					"\n",
					"-- Step 2: Expand absence records into individual days\n",
					"WITH AbsenceDays AS (\n",
					"    SELECT\n",
					"        StaffNumber,\n",
					"        WorkScheduleRule,\n",
					"        AbsType,\n",
					"        SicknessGroup,\n",
					"        AttendanceorAbsenceType,\n",
					"        StartDate,\n",
					"        EndDate,\n",
					"        Days,\n",
					"        Hrs,\n",
					"        Caldays AS cal_days,\n",
					"        DATEADD(DAY, n.n, StartDate) AS abs_date\n",
					"    FROM\n",
					"        odw_harmonised_db.sap_hr_absence_all\n",
					"    CROSS JOIN\n",
					"        Numbers n\n",
					"    WHERE\n",
					"        n.n <= DATEDIFF(DAY, StartDate, EndDate)\n",
					"        AND AttendanceorAbsenceType = 'Sickness'\n",
					"),\n",
					"-- Step 3: Calculate working hours and leave details\n",
					"ProcessedAbsence AS (\n",
					"    SELECT\n",
					"        ad.abs_date,\n",
					"        ad.StaffNumber,\n",
					"        ad.WorkScheduleRule,\n",
					"        ad.AbsType,\n",
					"        ad.SicknessGroup,\n",
					"        ad.AttendanceorAbsenceType,\n",
					"        ad.Days,\n",
					"        ad.Hrs,\n",
					"        ad.cal_days,\n",
					"        EXTRACT(DOW FROM ad.abs_date) AS dow,\n",
					"        ws.Mo,\n",
					"        ws.Tu,\n",
					"        ws.We,\n",
					"        ws.Th,\n",
					"        ws.Fr\n",
					"    FROM\n",
					"        AbsenceDays ad\n",
					"    LEFT JOIN\n",
					"        odw_standardised_db.work_schedules ws ON ad.WorkScheduleRule = ws.WorkScheduleRule\n",
					"    WHERE\n",
					"        EXTRACT(DOW FROM ad.abs_date) BETWEEN 2 AND 6\n",
					"),\n",
					"-- Step 4: Calculate absence hours and leave\n",
					"FinalAbsence AS (\n",
					"    SELECT\n",
					"        abs_date AS absence_date,\n",
					"        CASE\n",
					"            WHEN Days BETWEEN 0.01 AND 0.99 THEN\n",
					"                CASE dow\n",
					"                    WHEN 2 THEN Mo * Days\n",
					"                    WHEN 3 THEN Tu * Days\n",
					"                    WHEN 4 THEN We * Days\n",
					"                    WHEN 5 THEN Th * Days\n",
					"                    WHEN 6 THEN Fr * Days\n",
					"                    ELSE 0\n",
					"                END\n",
					"            ELSE\n",
					"                CASE dow\n",
					"                    WHEN 2 THEN Mo\n",
					"                    WHEN 3 THEN Tu\n",
					"                    WHEN 4 THEN We\n",
					"                    WHEN 5 THEN Th\n",
					"                    WHEN 6 THEN Fr\n",
					"                    ELSE 0\n",
					"                END\n",
					"        END AS absence_hours,\n",
					"        CASE LEFT(CAST(StaffNumber AS VARCHAR(10)), 1)\n",
					"            WHEN '4' THEN '50' + CAST(StaffNumber AS VARCHAR(10))\n",
					"            WHEN '5' THEN '00' + CAST(StaffNumber AS VARCHAR(10))\n",
					"            WHEN '6' THEN '60' + CAST(StaffNumber AS VARCHAR(10))\n",
					"            ELSE CAST(StaffNumber AS VARCHAR(10))\n",
					"        END AS staffnumber,\n",
					"        WorkScheduleRule,\n",
					"        AbsType,\n",
					"        SicknessGroup,\n",
					"        AttendanceorAbsenceType,\n",
					"        ROUND(CASE\n",
					"            WHEN (AbsType = 'CB01' AND Days = 0) THEN 1\n",
					"            WHEN (AbsType = 'MT01' AND Days = 0) THEN 1\n",
					"            WHEN (AttendanceorAbsenceType = 'Spec u/p-up to 3mths' AND Days = 0) THEN 1\n",
					"            WHEN cal_days = 0 THEN \n",
					"                CASE dow\n",
					"                    WHEN 2 THEN Hrs / Mo\n",
					"                    WHEN 3 THEN Hrs / Tu\n",
					"                    WHEN 4 THEN Hrs / We\n",
					"                    WHEN 5 THEN Hrs / Th\n",
					"                    WHEN 6 THEN Hrs / Fr\n",
					"                    ELSE 1\n",
					"                END\n",
					"            ELSE 1 \n",
					"        END, 2) AS Leave\n",
					"    FROM\n",
					"        ProcessedAbsence\n",
					")\n",
					"-- Step 5: Insert into temporary table\n",
					"INSERT INTO odw_harmonised_db.sap_hr_fact_absence_all_temp (\n",
					"    absencedate,\n",
					"    absencehours,\n",
					"    staffnumber,\n",
					"    WorkScheduleRule,\n",
					"    AbsType,\n",
					"    SicknessGroup,\n",
					"    AttendanceorAbsenceType,\n",
					"    Leave,\n",
					"    PSGroup,\n",
					"    PersonnelArea,\n",
					"    PersonnelSubarea,\n",
					"    SourceSystemID,\n",
					"    IngestionDate,\n",
					"    ValidTo,\n",
					"    RowID,\n",
					"    IsActive\n",
					")\n",
					"SELECT\n",
					"    absence_date AS absencedate,\n",
					"    absence_hours AS absencehours,\n",
					"    staffnumber,\n",
					"    WorkScheduleRule,\n",
					"    AbsType,\n",
					"    SicknessGroup,\n",
					"    AttendanceorAbsenceType,\n",
					"    ROUND(Leave, 2) AS Leave,\n",
					"    h.PSGroup,\n",
					"    h.PersonnelArea,\n",
					"    h.PersonnelSubarea,\n",
					"    'saphr' AS SourceSystemID,\n",
					"    CURRENT_DATE() AS IngestionDate,\n",
					"    CURRENT_TIMESTAMP() AS ValidTo,\n",
					"    NULL AS RowID,\n",
					"    'Y' AS IsActive\n",
					"FROM\n",
					"    FinalAbsence f\n",
					"LEFT JOIN\n",
					"    odw_harmonised_db.load_sap_hr_monthly h ON f.staffnumber = h.PersNo;\n",
					"\n",
					"-- Step 6: Remove duplicates and insert into final table\n",
					"WITH Duplicate_CTE AS (\n",
					"    SELECT\n",
					"        *,\n",
					"        ROW_NUMBER() OVER (PARTITION BY absencedate, staffnumber ORDER BY\n",
					"            CASE WHEN AttendanceorAbsenceType = 'NA Time (Inspectors)' THEN 0 ELSE 1 END DESC) AS Rno\n",
					"    FROM\n",
					"        odw_harmonised_db.sap_hr_fact_absence_all_temp\n",
					")\n",
					"INSERT INTO odw_harmonised_db.sap_hr_fact_absence_all (\n",
					"    absencedate,\n",
					"    absencehours,\n",
					"    staffnumber,\n",
					"    WorkScheduleRule,\n",
					"    AbsType,\n",
					"    SicknessGroup,\n",
					"    AttendanceorAbsenceType,\n",
					"    Leave,\n",
					"    PSGroup,\n",
					"    PersonnelArea,\n",
					"    PersonnelSubarea,\n",
					"    SourceSystemID,\n",
					"    IngestionDate,\n",
					"    ValidTo,\n",
					"    RowID,\n",
					"    IsActive\n",
					")\n",
					"SELECT\n",
					"    absencedate,\n",
					"    absencehours,\n",
					"    CAST(staffnumber AS INT),\n",
					"    WorkScheduleRule,\n",
					"    AbsType,\n",
					"    SicknessGroup,\n",
					"    AttendanceorAbsenceType,\n",
					"    Leave,\n",
					"    h.PSGroup,\n",
					"    h.PersonnelArea,\n",
					"    h.PersonnelSubarea,\n",
					"    'saphr' AS SourceSystemID,\n",
					"    CURRENT_DATE() AS IngestionDate,\n",
					"    CURRENT_TIMESTAMP() AS ValidTo,\n",
					"    NULL AS RowID,\n",
					"    'Y' AS IsActive\n",
					"FROM\n",
					"    Duplicate_CTE d\n",
					"LEFT JOIN\n",
					"    odw_harmonised_db.load_sap_hr_monthly h ON d.staffnumber = h.PersNo\n",
					"WHERE\n",
					"    d.Rno = 1;\n",
					"\n",
					"-- Step 7: Delete rows for invalid staff numbers\n",
					"DELETE FROM odw_harmonised_db.sap_hr_fact_absence_all\n",
					"WHERE staffnumber IN ('50410587', '50422294');"
				],
				"execution_count": 10
			},
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"\n",
					"UPDATE odw_harmonised_db.sap_hr_fact_absence_all\n",
					"SET RowID = md5(\n",
					"    concat_ws('|',\n",
					"    absencedate,\n",
					"    absencehours,\n",
					"    staffnumber,\n",
					"    WorkScheduleRule,\n",
					"    AbsType,\n",
					"    SicknessGroup,\n",
					"    AttendanceorAbsenceType,\n",
					"    Leave,\n",
					"    PSGroup,\n",
					"    PersonnelArea,\n",
					"    PersonnelSubarea\n",
					" \n",
					"\n",
					"    )\n",
					")"
				],
				"execution_count": 11
			},
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"\n",
					"UPDATE odw_harmonised_db.sap_hr_fact_absence_all_temp\n",
					"SET RowID = md5(\n",
					"    concat_ws('|',\n",
					"    absencedate,\n",
					"    absencehours,\n",
					"    staffnumber,\n",
					"    WorkScheduleRule,\n",
					"    AbsType,\n",
					"    SicknessGroup,\n",
					"    AttendanceorAbsenceType,\n",
					"    Leave,\n",
					"    PSGroup,\n",
					"    PersonnelArea,\n",
					"    PersonnelSubarea\n",
					" \n",
					"\n",
					"    )\n",
					")"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					" # Validation checks"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Validation 2 "
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"\n",
					"-- Step 1: Clear temporary and final tables\n",
					"DELETE FROM odw_harmonised_db.sap_hr_fact_Absence_All_TEMP;\n",
					"DELETE FROM odw_harmonised_db.sap_hr_fact_Absence_All;\n",
					"\n",
					"-- Step 2: Create a date dimension table to handle date expansion\n",
					"-- Using Spark SQL compatible syntax with explode()\n",
					"CREATE TABLE IF NOT EXISTS odw_harmonised_db.date_dimension AS\n",
					"WITH date_sequence AS (\n",
					"    SELECT explode(sequence(\n",
					"        CAST('2000-01-01' AS DATE), -- Use a start date well before any absences\n",
					"        CAST('2030-12-31' AS DATE), -- Use an end date well after any absences\n",
					"        INTERVAL 1 DAY\n",
					"    )) AS date_value\n",
					")\n",
					"SELECT \n",
					"    date_value, \n",
					"    dayofweek(date_value) AS day_of_week\n",
					"FROM date_sequence\n",
					"WHERE dayofweek(date_value) BETWEEN 2 AND 6; -- Only include weekdays (Monday to Friday)\n",
					"\n",
					"-- Step 3: Expand absence records into individual days using a join with date_dimension\n",
					"INSERT INTO odw_harmonised_db.fact_Absence_All_TEMP (\n",
					"    absence_date,\n",
					"    absence_hours,\n",
					"    staffnumber,\n",
					"    WorkScheduleRule,\n",
					"    AbsType,\n",
					"    SicknessGroup,\n",
					"    AttendanceorAbsenceType,\n",
					"    Leave,\n",
					"    PSGroup,\n",
					"    PersonnelArea,\n",
					"    PersonnelSubarea\n",
					")\n",
					"SELECT DISTINCT\n",
					"    d.date_value AS absence_date,\n",
					"    CASE\n",
					"        WHEN (aa.Days BETWEEN 0.01 AND 0.99) THEN \n",
					"            CASE d.day_of_week\n",
					"                WHEN 2 THEN (ws.Mo) * (aa.Days)\n",
					"                WHEN 3 THEN (ws.Tu) * (aa.Days)\n",
					"                WHEN 4 THEN (ws.We) * (aa.Days)\n",
					"                WHEN 5 THEN (ws.Th) * (aa.Days)\n",
					"                WHEN 6 THEN (ws.Fr) * (aa.Days)\n",
					"                ELSE 0 \n",
					"            END\n",
					"        ELSE \n",
					"            CASE d.day_of_week\n",
					"                WHEN 2 THEN ws.Mo\n",
					"                WHEN 3 THEN ws.Tu\n",
					"                WHEN 4 THEN ws.We\n",
					"                WHEN 5 THEN ws.Th\n",
					"                WHEN 6 THEN ws.Fr\n",
					"                ELSE 0 \n",
					"            END \n",
					"    END AS absence_hours,\n",
					"    CASE LEFT(CAST(aa.StaffNumber AS STRING), 1)\n",
					"        WHEN '4' THEN '50' + CAST(aa.StaffNumber AS STRING)\n",
					"        WHEN '5' THEN '00' + CAST(aa.StaffNumber AS STRING)\n",
					"        WHEN '6' THEN '60' + CAST(aa.StaffNumber AS STRING)\n",
					"        ELSE CAST(aa.StaffNumber AS STRING)\n",
					"    END AS staffnumber,\n",
					"    aa.WorkScheduleRule,\n",
					"    aa.AbsType,\n",
					"    aa.SicknessGroup,\n",
					"    aa.AttendanceorAbsenceType,\n",
					"    ROUND(CASE\n",
					"        WHEN (aa.AbsType = 'CB01' AND aa.Days = 0) THEN 1\n",
					"        WHEN (aa.AbsType = 'MT01' AND aa.Days = 0) THEN 1\n",
					"        WHEN (aa.AttendanceorAbsenceType = 'Spec u/p-up to 3mths' AND aa.Days = 0) THEN 1\n",
					"        WHEN aa.Caldays = 0 THEN aa.Hrs / aa.HrsDay\n",
					"        ELSE 1 \n",
					"    END, 2) AS Leave,\n",
					"    NULL AS PSGroup,\n",
					"    NULL AS PersonnelArea,\n",
					"    NULL AS PersonnelSubarea\n",
					"FROM \n",
					"    odw_harmonised_db.Absence_All aa\n",
					"JOIN \n",
					"    odw_harmonised_db.date_dimension d\n",
					"    ON d.date_value BETWEEN aa.StartDate AND aa.EndDate\n",
					"LEFT JOIN \n",
					"    odw_standardised_db.work_schedules ws\n",
					"    ON aa.WorkScheduleRule = ws.WorkScheduleRule\n",
					"WHERE \n",
					"    -- Calculate working hours directly within the query\n",
					"    CASE d.day_of_week\n",
					"        WHEN 2 THEN ws.Mo\n",
					"        WHEN 3 THEN ws.Tu\n",
					"        WHEN 4 THEN ws.We\n",
					"        WHEN 5 THEN ws.Th\n",
					"        WHEN 6 THEN ws.Fr\n",
					"        ELSE 0\n",
					"    END > 0;\n",
					"\n",
					"-- Step 4: Remove duplicates and insert into final table\n",
					"WITH Duplicate_CTE AS (\n",
					"    SELECT \n",
					"        *,\n",
					"        ROW_NUMBER() OVER(\n",
					"            PARTITION BY absence_date, staffnumber \n",
					"            ORDER BY CASE WHEN AttendanceorAbsenceType = 'NA Time (Inspectors)' THEN 0 ELSE 1 END DESC\n",
					"        ) AS Rno\n",
					"    FROM \n",
					"        odw_harmonised_db.fact_Absence_All_TEMP\n",
					")\n",
					"INSERT INTO odw_harmonised_db.fact_Absence_All (\n",
					"    absence_date,\n",
					"    absence_hours,\n",
					"    staffnumber,\n",
					"    WorkScheduleRule,\n",
					"    AbsType,\n",
					"    SicknessGroup,\n",
					"    AttendanceorAbsenceType,\n",
					"    Leave,\n",
					"    PSGroup,\n",
					"    PersonnelArea,\n",
					"    PersonnelSubarea\n",
					")\n",
					"SELECT \n",
					"    absence_date,\n",
					"    absence_hours,\n",
					"    staffnumber,\n",
					"    WorkScheduleRule,\n",
					"    AbsType,\n",
					"    SicknessGroup,\n",
					"    AttendanceorAbsenceType,\n",
					"    Leave,\n",
					"    NULL AS PSGroup,\n",
					"    NULL AS PersonnelArea,\n",
					"    NULL AS PersonnelSubarea\n",
					"FROM \n",
					"    Duplicate_CTE\n",
					"WHERE \n",
					"    Rno = 1;\n",
					"\n",
					"-- Step 5: Delete rows for staff numbers that do not exist in SAP_HR data history\n",
					"DELETE FROM odw_harmonised_db.fact_Absence_All\n",
					"WHERE staffnumber IN ('50410587', '50422294');\n",
					"\n",
					"-- Step 6: Update Group/Area/Subarea columns for current data\n",
					"MERGE INTO odw_harmonised_db.fact_Absence_All a\n",
					"USING (\n",
					"    SELECT \n",
					"        PersNo,\n",
					"        PSGroup,\n",
					"        PersonnelArea,\n",
					"        PersonnelSubarea,\n",
					"        Report_MonthEnd_Date \n",
					"    FROM \n",
					"        odw_harmonised_db.load_sap_hr_monthly\n",
					") h\n",
					"ON a.staffnumber = h.PersNo\n",
					"   AND a.absence_date >= DATE_ADD(DATE_ADD(h.Report_MonthEnd_Date, 1), -30) -- Approximate one month\n",
					"WHEN MATCHED THEN\n",
					"UPDATE SET\n",
					"    PSGroup = h.PSGroup,\n",
					"    PersonnelArea = h.PersonnelArea,\n",
					"    PersonnelSubarea = h.PersonnelSubarea;\n",
					"\n",
					"-- Step 7: Update Group/Area/Subarea columns for historical data\n",
					"MERGE INTO odw_harmonised_db.fact_Absence_All a\n",
					"USING (\n",
					"    SELECT \n",
					"        PersNo,\n",
					"        PSGroup,\n",
					"        PersonnelArea,\n",
					"        PersonnelSubarea,\n",
					"        DATE_ADD(DATE_ADD(Report_MonthEnd_Date, 1), -30) AS Report_MonStart_Date,\n",
					"        Report_MonthEnd_Date \n",
					"    FROM \n",
					"        odw_harmonised_db.Hist_SAP_HR\n",
					"    WHERE \n",
					"        Report_MonthEnd_Date < (SELECT MAX(Report_MonthEnd_Date) FROM odw_harmonised_db.Hist_SAP_HR)\n",
					") p\n",
					"ON a.staffnumber = p.PersNo\n",
					"   AND a.absence_date BETWEEN p.Report_MonStart_Date AND p.Report_MonthEnd_Date\n",
					"WHEN MATCHED THEN\n",
					"UPDATE SET\n",
					"    PSGroup = p.PSGroup,\n",
					"    PersonnelArea = p.PersonnelArea,\n",
					"    PersonnelSubarea = p.PersonnelSubarea;"
				],
				"execution_count": 12
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Validation 3"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"\n",
					"%%sql\n",
					"\n",
					"-- Step 1: Clear temporary and final tables\n",
					"DELETE FROM odw_harmonised_db.sap_hr_fact_Absence_All_TEMP;\n",
					"DELETE FROM odw_harmonised_db.sap_hr_fact_Absence_All;\n",
					"\n",
					"-- Step 2: Create a date dimension table to handle date expansion\n",
					"-- Using Spark SQL compatible syntax with explode()\n",
					"CREATE TABLE IF NOT EXISTS odw_harmonised_db.date_dimension AS\n",
					"WITH date_sequence AS (\n",
					"    SELECT explode(sequence(\n",
					"        CAST('2000-01-01' AS DATE), -- Use a start date well before any absences\n",
					"        CAST('2030-12-31' AS DATE), -- Use an end date well after any absences\n",
					"        INTERVAL 1 DAY\n",
					"    )) AS date_value\n",
					")\n",
					"SELECT \n",
					"    date_value, \n",
					"    dayofweek(date_value) AS day_of_week\n",
					"FROM date_sequence\n",
					"WHERE dayofweek(date_value) BETWEEN 2 AND 6; -- Only include weekdays (Monday to Friday)\n",
					"\n",
					"-- Step 3: Expand absence records into individual days using a join with date_dimension\n",
					"INSERT INTO odw_harmonised_db.sap_hr_fact_Absence_All_TEMP (\n",
					"    absencedate,\n",
					"    absencehours,\n",
					"    staffnumber,\n",
					"    WorkScheduleRule,\n",
					"    AbsType,\n",
					"    SicknessGroup,\n",
					"    AttendanceorAbsenceType,\n",
					"    Leave,\n",
					"    PSGroup,\n",
					"    PersonnelArea,\n",
					"    PersonnelSubarea,    \n",
					"    SourceSystemID,\n",
					"    IngestionDate,\n",
					"    ValidTo,\n",
					"    RowID,\n",
					"    IsActive\n",
					")\n",
					"SELECT DISTINCT\n",
					"    d.date_value AS absencedate,\n",
					"    CASE\n",
					"        WHEN (aa.Days BETWEEN 0.01 AND 0.99) THEN \n",
					"            CASE d.day_of_week\n",
					"                WHEN 2 THEN (ws.Mo) * (aa.Days)\n",
					"                WHEN 3 THEN (ws.Tu) * (aa.Days)\n",
					"                WHEN 4 THEN (ws.We) * (aa.Days)\n",
					"                WHEN 5 THEN (ws.Th) * (aa.Days)\n",
					"                WHEN 6 THEN (ws.Fr) * (aa.Days)\n",
					"                ELSE 0 \n",
					"            END\n",
					"        ELSE \n",
					"            CASE d.day_of_week\n",
					"                WHEN 2 THEN ws.Mo\n",
					"                WHEN 3 THEN ws.Tu\n",
					"                WHEN 4 THEN ws.We\n",
					"                WHEN 5 THEN ws.Th\n",
					"                WHEN 6 THEN ws.Fr\n",
					"                ELSE 0 \n",
					"            END \n",
					"    END AS absencehours,\n",
					"    CASE LEFT(CAST(aa.StaffNumber AS STRING), 1)\n",
					"        WHEN '4' THEN '50' + CAST(aa.StaffNumber AS STRING)\n",
					"        WHEN '5' THEN '00' + CAST(aa.StaffNumber AS STRING)\n",
					"        WHEN '6' THEN '60' + CAST(aa.StaffNumber AS STRING)\n",
					"        ELSE CAST(aa.StaffNumber AS STRING)\n",
					"    END AS staffnumber,\n",
					"    aa.WorkScheduleRule,\n",
					"    aa.AbsType,\n",
					"    aa.SicknessGroup,\n",
					"    aa.AttendanceorAbsenceType,\n",
					"    ROUND(CASE\n",
					"        WHEN (aa.AbsType = 'CB01' AND aa.Days = 0) THEN 1\n",
					"        WHEN (aa.AbsType = 'MT01' AND aa.Days = 0) THEN 1\n",
					"        WHEN (aa.AttendanceorAbsenceType = 'Spec u/p-up to 3mths' AND aa.Days = 0) THEN 1\n",
					"        WHEN aa.Caldays = 0 THEN aa.Hrs / aa.HrsDay\n",
					"        ELSE 1 \n",
					"    END, 2) AS Leave,\n",
					"    NULL AS PSGroup,\n",
					"    NULL AS PersonnelArea,\n",
					"    NULL AS PersonnelSubarea,\n",
					"    aa.SourceSystemID,\n",
					"    aa.IngestionDate,\n",
					"    aa.ValidTo,\n",
					"    aa.RowID,\n",
					"    aa.IsActive\n",
					"FROM \n",
					"    odw_harmonised_db.sap_hr_absence_All aa\n",
					"JOIN \n",
					"    odw_harmonised_db.date_dimension d\n",
					"    ON d.date_value BETWEEN aa.StartDate AND aa.EndDate\n",
					"LEFT JOIN \n",
					"    odw_standardised_db.work_schedules ws\n",
					"    ON aa.WorkScheduleRule = ws.WorkScheduleRule\n",
					"WHERE \n",
					"    -- Calculate working hours directly within the query\n",
					"    CASE d.day_of_week\n",
					"        WHEN 2 THEN ws.Mo\n",
					"        WHEN 3 THEN ws.Tu\n",
					"        WHEN 4 THEN ws.We\n",
					"        WHEN 5 THEN ws.Th\n",
					"        WHEN 6 THEN ws.Fr\n",
					"        ELSE 0\n",
					"    END > 0;\n",
					"\n",
					"-- Step 4: Remove duplicates and insert into final table\n",
					"WITH Duplicate_CTE AS (\n",
					"    SELECT \n",
					"        *,\n",
					"        ROW_NUMBER() OVER(\n",
					"            PARTITION BY absencedate, staffnumber \n",
					"            ORDER BY CASE WHEN AttendanceorAbsenceType = 'NA Time (Inspectors)' THEN 0 ELSE 1 END DESC\n",
					"        ) AS Rno\n",
					"    FROM \n",
					"        odw_harmonised_db.sap_hr_fact_Absence_All_TEMP\n",
					")\n",
					"INSERT INTO odw_harmonised_db.sap_hr_fact_Absence_All (\n",
					"    absencedate,\n",
					"    absencehours,\n",
					"    staffnumber,\n",
					"    WorkScheduleRule,\n",
					"    AbsType,\n",
					"    SicknessGroup,\n",
					"    AttendanceorAbsenceType,\n",
					"    Leave,\n",
					"    PSGroup,\n",
					"    PersonnelArea,\n",
					"    PersonnelSubarea,\n",
					"    SourceSystemID,\n",
					"    IngestionDate,\n",
					"    ValidTo,\n",
					"    RowID,\n",
					"    IsActive\n",
					")\n",
					"SELECT \n",
					"    absencedate,\n",
					"    absencehours,\n",
					"    staffnumber,\n",
					"    WorkScheduleRule,\n",
					"    AbsType,\n",
					"    SicknessGroup,\n",
					"    AttendanceorAbsenceType,\n",
					"    Leave,\n",
					"    NULL AS PSGroup,\n",
					"    NULL AS PersonnelArea,\n",
					"    NULL AS PersonnelSubarea,\n",
					"    SourceSystemID,\n",
					"    IngestionDate,\n",
					"    ValidTo,\n",
					"    RowID,\n",
					"    IsActive\n",
					"FROM \n",
					"    Duplicate_CTE\n",
					"WHERE \n",
					"    Rno = 1;\n",
					"\n",
					"-- Step 5: Delete rows for staff numbers that do not exist in SAP_HR data history\n",
					"DELETE FROM odw_harmonised_db.sap_hr_fact_Absence_All\n",
					"WHERE staffnumber IN ('50410587', '50422294');\n",
					"\n",
					"-- Step 6: Update Group/Area/Subarea columns for current data\n",
					"MERGE INTO odw_harmonised_db.sap_hr_fact_Absence_All a\n",
					"USING (\n",
					"    SELECT \n",
					"        PersNo,\n",
					"        PSGroup,\n",
					"        PersonnelArea,\n",
					"        PersonnelSubarea,\n",
					"        Report_MonthEnd_Date \n",
					"    FROM \n",
					"        odw_harmonised_db.load_sap_hr_monthly\n",
					") h\n",
					"ON a.staffnumber = h.PersNo\n",
					"   AND a.absencedate >= DATE_ADD(DATE_ADD(h.Report_MonthEnd_Date, 1), -30) -- Approximate one month\n",
					"WHEN MATCHED THEN\n",
					"UPDATE SET\n",
					"    PSGroup = h.PSGroup,\n",
					"    PersonnelArea = h.PersonnelArea,\n",
					"    PersonnelSubarea = h.PersonnelSubarea;\n",
					"\n",
					"-- Step 7: Update Group/Area/Subarea columns for historical data\n",
					"MERGE INTO odw_harmonised_db.sap_hr_fact_absence_All a\n",
					"USING (\n",
					"    SELECT \n",
					"        PersNo,\n",
					"        PSGroup,\n",
					"        PersonnelArea,\n",
					"        PersonnelSubarea,\n",
					"        DATE_ADD(DATE_ADD(Report_MonthEnd_Date, 1), -30) AS Report_MonStart_Date,\n",
					"        Report_MonthEnd_Date \n",
					"    FROM \n",
					"        odw_harmonised_db.Hist_SAP_HR\n",
					"    WHERE \n",
					"        Report_MonthEnd_Date < (SELECT MAX(Report_MonthEnd_Date) FROM odw_harmonised_db.Hist_SAP_HR)\n",
					") p\n",
					"ON a.staffnumber = p.PersNo\n",
					"   AND a.absencedate BETWEEN p.Report_MonStart_Date AND p.Report_MonthEnd_Date\n",
					"WHEN MATCHED THEN\n",
					"UPDATE SET\n",
					"    PSGroup = p.PSGroup,\n",
					"    PersonnelArea = p.PersonnelArea,\n",
					"    PersonnelSubarea = p.PersonnelSubarea;"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"\n",
					"UPDATE odw_harmonised_db.sap_hr_fact_absence_all\n",
					"SET RowID = md5(\n",
					"    concat_ws('|',\n",
					"    absencedate,\n",
					"    absencehours,\n",
					"    staffnumber,\n",
					"    WorkScheduleRule,\n",
					"    AbsType,\n",
					"    SicknessGroup,\n",
					"    AttendanceorAbsenceType,\n",
					"    Leave,\n",
					"    PSGroup,\n",
					"    PersonnelArea,\n",
					"    PersonnelSubarea\n",
					" \n",
					"\n",
					"    )\n",
					")"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Orgininal"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"\n",
					"-- Step 1: Clear temporary and final tables\n",
					"DELETE FROM odw_harmonised_db.sap_hr_fact_Absence_All_TEMP;\n",
					"DELETE FROM odw_harmonised_db.sap_hr_fact_Absence_All;\n",
					"\n",
					"-- Step 2: Create a date dimension table to handle date expansion\n",
					"-- Using Spark SQL compatible syntax with explode()\n",
					"CREATE TABLE IF NOT EXISTS odw_harmonised_db.date_dimension AS\n",
					"WITH date_sequence AS (\n",
					"    SELECT explode(sequence(\n",
					"        CAST('2000-01-01' AS DATE), -- Use a start date well before any absences\n",
					"        CAST('2030-12-31' AS DATE), -- Use an end date well after any absences\n",
					"        INTERVAL 1 DAY\n",
					"    )) AS date_value\n",
					")\n",
					"SELECT \n",
					"    date_value, \n",
					"    dayofweek(date_value) AS day_of_week\n",
					"FROM date_sequence\n",
					"WHERE dayofweek(date_value) BETWEEN 2 AND 6; -- Only include weekdays (Monday to Friday)\n",
					"\n",
					"-- Step 3: Expand absence records into individual days using a join with date_dimension\n",
					"INSERT INTO odw_harmonised_db.sap_hr_fact_Absence_All_TEMP (\n",
					"    absencedate,\n",
					"    absencehours,\n",
					"    staffnumber,\n",
					"    WorkScheduleRule,\n",
					"    AbsType,\n",
					"    SicknessGroup,\n",
					"    AttendanceorAbsenceType,\n",
					"    Leave,\n",
					"    PSGroup,\n",
					"    PersonnelArea,\n",
					"    PersonnelSubarea,    \n",
					"    SourceSystemID,\n",
					"    IngestionDate,\n",
					"    ValidTo,\n",
					"    RowID,\n",
					"    IsActive\n",
					")\n",
					"SELECT DISTINCT\n",
					"    d.date_value AS absencedate,\n",
					"    CASE\n",
					"        WHEN (aa.Days BETWEEN 0.01 AND 0.99) THEN \n",
					"            CASE d.day_of_week\n",
					"                WHEN 2 THEN (ws.Mo) * (aa.Days)\n",
					"                WHEN 3 THEN (ws.Tu) * (aa.Days)\n",
					"                WHEN 4 THEN (ws.We) * (aa.Days)\n",
					"                WHEN 5 THEN (ws.Th) * (aa.Days)\n",
					"                WHEN 6 THEN (ws.Fr) * (aa.Days)\n",
					"                ELSE 0 \n",
					"            END\n",
					"        ELSE \n",
					"            CASE d.day_of_week\n",
					"                WHEN 2 THEN ws.Mo\n",
					"                WHEN 3 THEN ws.Tu\n",
					"                WHEN 4 THEN ws.We\n",
					"                WHEN 5 THEN ws.Th\n",
					"                WHEN 6 THEN ws.Fr\n",
					"                ELSE 0 \n",
					"            END \n",
					"    END AS absencehours,\n",
					"    CASE LEFT(CAST(aa.StaffNumber AS STRING), 1)\n",
					"        WHEN '4' THEN '50' + CAST(aa.StaffNumber AS STRING)\n",
					"        WHEN '5' THEN '00' + CAST(aa.StaffNumber AS STRING)\n",
					"        WHEN '6' THEN '60' + CAST(aa.StaffNumber AS STRING)\n",
					"        ELSE CAST(aa.StaffNumber AS STRING)\n",
					"    END AS staffnumber,\n",
					"    aa.WorkScheduleRule,\n",
					"    aa.AbsType,\n",
					"    aa.SicknessGroup,\n",
					"    aa.AttendanceorAbsenceType,\n",
					"    ROUND(CASE\n",
					"        WHEN (aa.AbsType = 'CB01' AND aa.Days = 0) THEN 1\n",
					"        WHEN (aa.AbsType = 'MT01' AND aa.Days = 0) THEN 1\n",
					"        WHEN (aa.AttendanceorAbsenceType = 'Spec u/p-up to 3mths' AND aa.Days = 0) THEN 1\n",
					"        WHEN aa.Caldays = 0 THEN aa.Hrs / aa.HrsDay\n",
					"        ELSE 1 \n",
					"    END, 2) AS Leave,\n",
					"    NULL AS PSGroup,\n",
					"    NULL AS PersonnelArea,\n",
					"    NULL AS PersonnelSubarea,\n",
					"    aa.SourceSystemID,\n",
					"    aa.IngestionDate,\n",
					"    aa.ValidTo,\n",
					"    aa.RowID,\n",
					"    aa.IsActive\n",
					"FROM \n",
					"    odw_harmonised_db.sap_hr_absence_All aa\n",
					"JOIN \n",
					"    odw_harmonised_db.date_dimension d\n",
					"    ON d.date_value BETWEEN aa.StartDate AND aa.EndDate\n",
					"LEFT JOIN \n",
					"    odw_standardised_db.work_schedules ws\n",
					"    ON aa.WorkScheduleRule = ws.WorkScheduleRule\n",
					"WHERE \n",
					"    -- Calculate working hours directly within the query\n",
					"    CASE d.day_of_week\n",
					"        WHEN 2 THEN ws.Mo\n",
					"        WHEN 3 THEN ws.Tu\n",
					"        WHEN 4 THEN ws.We\n",
					"        WHEN 5 THEN ws.Th\n",
					"        WHEN 6 THEN ws.Fr\n",
					"        ELSE 0\n",
					"    END > 0;\n",
					"\n",
					"-- Step 4: Remove duplicates and insert into final table\n",
					"WITH Duplicate_CTE AS (\n",
					"    SELECT \n",
					"        *,\n",
					"        ROW_NUMBER() OVER(\n",
					"            PARTITION BY absencedate, staffnumber \n",
					"            ORDER BY CASE WHEN AttendanceorAbsenceType = 'NA Time (Inspectors)' THEN 0 ELSE 1 END DESC\n",
					"        ) AS Rno\n",
					"    FROM \n",
					"        odw_harmonised_db.sap_hr_fact_Absence_All_TEMP\n",
					")\n",
					"INSERT INTO odw_harmonised_db.sap_hr_fact_Absence_All (\n",
					"    absencedate,\n",
					"    absencehours,\n",
					"    staffnumber,\n",
					"    WorkScheduleRule,\n",
					"    AbsType,\n",
					"    SicknessGroup,\n",
					"    AttendanceorAbsenceType,\n",
					"    Leave,\n",
					"    PSGroup,\n",
					"    PersonnelArea,\n",
					"    PersonnelSubarea,\n",
					"    SourceSystemID,\n",
					"    IngestionDate,\n",
					"    ValidTo,\n",
					"    RowID,\n",
					"    IsActive\n",
					")\n",
					"SELECT \n",
					"    absencedate,\n",
					"    absencehours,\n",
					"    staffnumber,\n",
					"    WorkScheduleRule,\n",
					"    AbsType,\n",
					"    SicknessGroup,\n",
					"    AttendanceorAbsenceType,\n",
					"    Leave,\n",
					"    NULL AS PSGroup,\n",
					"    NULL AS PersonnelArea,\n",
					"    NULL AS PersonnelSubarea,\n",
					"    SourceSystemID,\n",
					"    IngestionDate,\n",
					"    ValidTo,\n",
					"    RowID,\n",
					"    IsActive\n",
					"FROM \n",
					"    Duplicate_CTE\n",
					"WHERE \n",
					"    Rno = 1;\n",
					"\n",
					"-- Step 5: Delete rows for staff numbers that do not exist in SAP_HR data history\n",
					"DELETE FROM odw_harmonised_db.sap_hr_fact_Absence_All\n",
					"WHERE staffnumber IN ('50410587', '50422294');\n",
					"\n",
					"-- Step 6: Create a staging table with best HR data matches\n",
					"CREATE OR REPLACE TEMPORARY VIEW hr_data_staging AS\n",
					"SELECT \n",
					"    a.staffnumber,\n",
					"    a.absencedate,\n",
					"    -- For each absence record, find the most recent HR data\n",
					"    FIRST_VALUE(h.PSGroup) OVER (\n",
					"        PARTITION BY a.staffnumber, a.absencedate\n",
					"        ORDER BY \n",
					"            -- First prioritize records where the absence date falls within the reporting period\n",
					"            CASE WHEN a.absencedate BETWEEN DATE_ADD(DATE_ADD(h.Report_MonthEnd_Date, 1), -30) AND h.Report_MonthEnd_Date THEN 0 ELSE 1 END,\n",
					"            -- Then get the most recent HR record\n",
					"            h.Report_MonthEnd_Date DESC\n",
					"    ) AS PSGroup,\n",
					"    FIRST_VALUE(h.PersonnelArea) OVER (\n",
					"        PARTITION BY a.staffnumber, a.absencedate\n",
					"        ORDER BY \n",
					"            CASE WHEN a.absencedate BETWEEN DATE_ADD(DATE_ADD(h.Report_MonthEnd_Date, 1), -30) AND h.Report_MonthEnd_Date THEN 0 ELSE 1 END,\n",
					"            h.Report_MonthEnd_Date DESC\n",
					"    ) AS PersonnelArea,\n",
					"    FIRST_VALUE(h.PersonnelSubarea) OVER (\n",
					"        PARTITION BY a.staffnumber, a.absencedate\n",
					"        ORDER BY \n",
					"            CASE WHEN a.absencedate BETWEEN DATE_ADD(DATE_ADD(h.Report_MonthEnd_Date, 1), -30) AND h.Report_MonthEnd_Date THEN 0 ELSE 1 END,\n",
					"            h.Report_MonthEnd_Date DESC\n",
					"    ) AS PersonnelSubarea\n",
					"FROM \n",
					"    odw_harmonised_db.sap_hr_fact_Absence_All a\n",
					"JOIN \n",
					"    odw_harmonised_db.Hist_SAP_HR h\n",
					"ON \n",
					"    a.staffnumber = h.PersNo;\n",
					"\n",
					"-- Step 7: Deduplicate the staging data to ensure one row per staffnumber/absencedate\n",
					"CREATE OR REPLACE TEMPORARY VIEW hr_data_final AS\n",
					"SELECT \n",
					"    staffnumber,\n",
					"    absencedate,\n",
					"    PSGroup,\n",
					"    PersonnelArea,\n",
					"    PersonnelSubarea\n",
					"FROM (\n",
					"    SELECT \n",
					"        *,\n",
					"        ROW_NUMBER() OVER (PARTITION BY staffnumber, absencedate ORDER BY absencedate) AS rn\n",
					"    FROM \n",
					"        hr_data_staging\n",
					") t\n",
					"WHERE \n",
					"    rn = 1;\n",
					"\n",
					"-- Step 8: Use MERGE to update the target table\n",
					"MERGE INTO odw_harmonised_db.sap_hr_fact_Absence_All a\n",
					"USING hr_data_final s\n",
					"ON a.staffnumber = s.staffnumber AND a.absencedate = s.absencedate\n",
					"WHEN MATCHED THEN\n",
					"UPDATE SET\n",
					"    PSGroup = s.PSGroup,\n",
					"    PersonnelArea = s.PersonnelArea,\n",
					"    PersonnelSubarea = s.PersonnelSubarea;"
				],
				"execution_count": 21
			}
		]
	}
}