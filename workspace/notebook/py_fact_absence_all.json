{
	"name": "py_fact_absence_all",
	"properties": {
		"folder": {
			"name": "odw-harmonised"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodw",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "6a371226-2a8b-44f1-bd8f-f1bcc577474f"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodw",
				"name": "pinssynspodw",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodw",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Entity Name : fact_absence_all\n",
					"### Author: Prathap A\n",
					"### Date: 01/03/2025\n",
					"\n",
					"#### version : 0001"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Intialisations"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"from pyspark.sql.functions import udf, col, lit, when, coalesce, concat, sum, avg, max, min, count, countDistinct, date_format, to_date, datediff, months_between, year, month,  hour, minute, second, expr, asc, desc\n",
					"from pyspark.sql.types import DateType, TimestampType, StringType, IntegerType, FloatType, DoubleType, BooleanType, StructType, StructField, ArrayType, MapType\n",
					"from pyspark.sql.window import Window\n",
					"from pyspark.sql.functions import row_number, rank, dense_rank, lag, lead, ntile\n",
					"from pyspark.sql import SQLContext\n",
					"from pyspark.sql import DataFrame\n",
					"from pyspark.sql import functions as F\n",
					"from pyspark.sql.avro.functions import from_avro, to_avro\n",
					"from pyspark.sql.streaming import DataStreamReader, DataStreamWriter\n",
					"from pyspark.sql.utils import AnalysisException\n",
					"from pyspark.sql.catalog import Catalog\n",
					"from pyspark.sql.column import Column\n",
					"from pyspark.sql.group import GroupedData\n",
					"from pyspark.sql.pandas.functions import pandas_udf\n",
					"\n",
					"from datetime import datetime, timedelta\n",
					"import pandas as pd\n",
					"import numpy as np"
				],
				"execution_count": 77
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Required Function \n",
					""
				]
			},
			{
				"cell_type": "code",
				"source": [
					"from pyspark.sql import SparkSession\n",
					"from pyspark.sql.functions import col, expr, dayofweek\n",
					"\n",
					"# Create Spark session\n",
					"spark = SparkSession.builder.appName(\"WorkingHours\").getOrCreate()\n",
					"\n",
					"def get_working_hours2(sched, date):\n",
					"    # Read the work schedules table from the Lakehouse\n",
					"    work_schedules_df = spark.sql(\"SELECT * FROM odw_standardised_db.work_schedules\")\n",
					"\n",
					"    # Prepare a DataFrame with the day of the week\n",
					"    dow_df = spark.createDataFrame([(date,)], [\"date\"])\n",
					"    dow_df = dow_df.withColumn(\"dow\", dayofweek(col(\"date\")))\n",
					"\n",
					"    # Get the day of the week value\n",
					"    dow_value = dow_df.first()[\"dow\"]\n",
					"\n",
					"    # Filter the DataFrame based on the Schedule Rule and select working hours\n",
					"    result_df = work_schedules_df.filter(col(\"WorkScheduleRule\") == sched).select(\n",
					"        expr(f\"\"\"\n",
					"            CASE\n",
					"                WHEN {dow_value} = 1 THEN Mo  -- Sunday\n",
					"                WHEN {dow_value} = 2 THEN Tu  -- Monday\n",
					"                WHEN {dow_value} = 3 THEN We  -- Tuesday\n",
					"                WHEN {dow_value} = 4 THEN Th  -- Wednesday\n",
					"                WHEN {dow_value} = 5 THEN Fr  -- Thursday\n",
					"                -- Excluding Saturday since there is no 'Sa' column\n",
					"                ELSE 0\n",
					"            END AS working_hours\n",
					"        \"\"\")\n",
					"    )\n",
					"\n",
					"    # Collect the result\n",
					"    result = result_df.first()\n",
					"\n",
					"    return result.working_hours if result else 0\n",
					"\n",
					"# Example usage\n",
					"#sched = 'M0T305W610T610F305'  # Example schedule\n",
					"#date = '2023-02-25'  # Example date\n",
					"#working_hours = get_working_hours2(sched, date)\n",
					"#print(f'Working hours for schedule {sched} on {date}: {working_hours}')"
				],
				"execution_count": 82
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Load Data Into sap_hr_fact_absence_all"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"-- Truncate temporary and final tables\n",
					"DELETE FROM odw_harmonised_db.sap_hr_fact_absence_all_temp;\n",
					"DELETE FROM odw_harmonised_db.sap_hr_fact_absence_all;\n",
					"\n",
					"-- Step 1: Generate a sequence of numbers using a temporary view\n",
					"CREATE OR REPLACE TEMPORARY VIEW Numbers AS\n",
					"SELECT sequence_id AS n\n",
					"FROM (\n",
					"    SELECT posexplode(split(space(1000), ' ')) AS (sequence_id, value)\n",
					");\n",
					"\n",
					"-- Step 2: Expand absence records into individual days\n",
					"WITH AbsenceDays AS (\n",
					"    SELECT\n",
					"        StaffNumber,\n",
					"        WorkScheduleRule,\n",
					"        AbsType,\n",
					"        SicknessGroup,\n",
					"        AttendanceorAbsenceType,\n",
					"        StartDate,\n",
					"        EndDate,\n",
					"        Days,\n",
					"        Hrs,\n",
					"        Caldays AS cal_days,\n",
					"        DATEADD(DAY, n.n, StartDate) AS abs_date\n",
					"    FROM\n",
					"        odw_harmonised_db.sap_hr_absence_all\n",
					"    CROSS JOIN\n",
					"        Numbers n\n",
					"    WHERE\n",
					"        n.n <= DATEDIFF(DAY, StartDate, EndDate)\n",
					"        AND AttendanceorAbsenceType = 'Sickness'\n",
					"),\n",
					"-- Step 3: Calculate working hours and leave details\n",
					"ProcessedAbsence AS (\n",
					"    SELECT\n",
					"        ad.abs_date,\n",
					"        ad.StaffNumber,\n",
					"        ad.WorkScheduleRule,\n",
					"        ad.AbsType,\n",
					"        ad.SicknessGroup,\n",
					"        ad.AttendanceorAbsenceType,\n",
					"        ad.Days,\n",
					"        ad.Hrs,\n",
					"        ad.cal_days,\n",
					"        EXTRACT(DOW FROM ad.abs_date) AS dow,\n",
					"        ws.Mo,\n",
					"        ws.Tu,\n",
					"        ws.We,\n",
					"        ws.Th,\n",
					"        ws.Fr\n",
					"    FROM\n",
					"        AbsenceDays ad\n",
					"    LEFT JOIN\n",
					"        odw_standardised_db.work_schedules ws ON ad.WorkScheduleRule = ws.WorkScheduleRule\n",
					"    WHERE\n",
					"        EXTRACT(DOW FROM ad.abs_date) BETWEEN 2 AND 6\n",
					"),\n",
					"-- Step 4: Calculate absence hours and leave\n",
					"FinalAbsence AS (\n",
					"    SELECT\n",
					"        abs_date AS absence_date,\n",
					"        CASE\n",
					"            WHEN Days BETWEEN 0.01 AND 0.99 THEN\n",
					"                CASE dow\n",
					"                    WHEN 2 THEN Mo * Days\n",
					"                    WHEN 3 THEN Tu * Days\n",
					"                    WHEN 4 THEN We * Days\n",
					"                    WHEN 5 THEN Th * Days\n",
					"                    WHEN 6 THEN Fr * Days\n",
					"                    ELSE 0\n",
					"                END\n",
					"            ELSE\n",
					"                CASE dow\n",
					"                    WHEN 2 THEN Mo\n",
					"                    WHEN 3 THEN Tu\n",
					"                    WHEN 4 THEN We\n",
					"                    WHEN 5 THEN Th\n",
					"                    WHEN 6 THEN Fr\n",
					"                    ELSE 0\n",
					"                END\n",
					"        END AS absence_hours,\n",
					"        CASE LEFT(CAST(StaffNumber AS VARCHAR(10)), 1)\n",
					"            WHEN '4' THEN '50' + CAST(StaffNumber AS VARCHAR(10))\n",
					"            WHEN '5' THEN '00' + CAST(StaffNumber AS VARCHAR(10))\n",
					"            WHEN '6' THEN '60' + CAST(StaffNumber AS VARCHAR(10))\n",
					"            ELSE CAST(StaffNumber AS VARCHAR(10))\n",
					"        END AS staffnumber,\n",
					"        WorkScheduleRule,\n",
					"        AbsType,\n",
					"        SicknessGroup,\n",
					"        AttendanceorAbsenceType,\n",
					"        ROUND(CASE\n",
					"            WHEN (AbsType = 'CB01' AND Days = 0) THEN 1\n",
					"            WHEN (AbsType = 'MT01' AND Days = 0) THEN 1\n",
					"            WHEN (AttendanceorAbsenceType = 'Spec u/p-up to 3mths' AND Days = 0) THEN 1\n",
					"            WHEN cal_days = 0 THEN \n",
					"                CASE dow\n",
					"                    WHEN 2 THEN Hrs / Mo\n",
					"                    WHEN 3 THEN Hrs / Tu\n",
					"                    WHEN 4 THEN Hrs / We\n",
					"                    WHEN 5 THEN Hrs / Th\n",
					"                    WHEN 6 THEN Hrs / Fr\n",
					"                    ELSE 1\n",
					"                END\n",
					"            ELSE 1 \n",
					"        END, 2) AS Leave\n",
					"    FROM\n",
					"        ProcessedAbsence\n",
					")\n",
					"-- Step 5: Insert into temporary table\n",
					"INSERT INTO odw_harmonised_db.sap_hr_fact_absence_all_temp (\n",
					"    absencedate,\n",
					"    absencehours,\n",
					"    staffnumber,\n",
					"    WorkScheduleRule,\n",
					"    AbsType,\n",
					"    SicknessGroup,\n",
					"    AttendanceorAbsenceType,\n",
					"    Leave,\n",
					"    PSGroup,\n",
					"    PersonnelArea,\n",
					"    PersonnelSubarea,\n",
					"    SourceSystemID,\n",
					"    IngestionDate,\n",
					"    ValidTo,\n",
					"    RowID,\n",
					"    IsActive\n",
					")\n",
					"SELECT\n",
					"    absence_date AS absencedate,\n",
					"    absence_hours AS absencehours,\n",
					"    staffnumber,\n",
					"    WorkScheduleRule,\n",
					"    AbsType,\n",
					"    SicknessGroup,\n",
					"    AttendanceorAbsenceType,\n",
					"    ROUND(Leave, 2) AS Leave,\n",
					"    h.PSGroup,\n",
					"    h.PersonnelArea,\n",
					"    h.PersonnelSubarea,\n",
					"    'saphr' AS SourceSystemID,\n",
					"    CURRENT_DATE() AS IngestionDate,\n",
					"    CURRENT_TIMESTAMP() AS ValidTo,\n",
					"    NULL AS RowID,\n",
					"    'Y' AS IsActive\n",
					"FROM\n",
					"    FinalAbsence f\n",
					"LEFT JOIN\n",
					"    odw_harmonised_db.load_sap_hr_monthly h ON f.staffnumber = h.PersNo;\n",
					"\n",
					"-- Step 6: Remove duplicates and insert into final table\n",
					"WITH Duplicate_CTE AS (\n",
					"    SELECT\n",
					"        *,\n",
					"        ROW_NUMBER() OVER (PARTITION BY absencedate, staffnumber ORDER BY\n",
					"            CASE WHEN AttendanceorAbsenceType = 'NA Time (Inspectors)' THEN 0 ELSE 1 END DESC) AS Rno\n",
					"    FROM\n",
					"        odw_harmonised_db.sap_hr_fact_absence_all_temp\n",
					")\n",
					"INSERT INTO odw_harmonised_db.sap_hr_fact_absence_all (\n",
					"    absencedate,\n",
					"    absencehours,\n",
					"    staffnumber,\n",
					"    WorkScheduleRule,\n",
					"    AbsType,\n",
					"    SicknessGroup,\n",
					"    AttendanceorAbsenceType,\n",
					"    Leave,\n",
					"    PSGroup,\n",
					"    PersonnelArea,\n",
					"    PersonnelSubarea,\n",
					"    SourceSystemID,\n",
					"    IngestionDate,\n",
					"    ValidTo,\n",
					"    RowID,\n",
					"    IsActive\n",
					")\n",
					"SELECT\n",
					"    absencedate,\n",
					"    absencehours,\n",
					"    CAST(staffnumber AS INT),\n",
					"    WorkScheduleRule,\n",
					"    AbsType,\n",
					"    SicknessGroup,\n",
					"    AttendanceorAbsenceType,\n",
					"    Leave,\n",
					"    h.PSGroup,\n",
					"    h.PersonnelArea,\n",
					"    h.PersonnelSubarea,\n",
					"    'saphr' AS SourceSystemID,\n",
					"    CURRENT_DATE() AS IngestionDate,\n",
					"    CURRENT_TIMESTAMP() AS ValidTo,\n",
					"    NULL AS RowID,\n",
					"    'Y' AS IsActive\n",
					"FROM\n",
					"    Duplicate_CTE d\n",
					"LEFT JOIN\n",
					"    odw_harmonised_db.load_sap_hr_monthly h ON d.staffnumber = h.PersNo\n",
					"WHERE\n",
					"    d.Rno = 1;\n",
					"\n",
					"-- Step 7: Delete rows for invalid staff numbers\n",
					"DELETE FROM odw_harmonised_db.sap_hr_fact_absence_all\n",
					"WHERE staffnumber IN ('50410587', '50422294');"
				],
				"execution_count": 22
			},
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"\n",
					"UPDATE odw_harmonised_db.sap_hr_fact_absence_all\n",
					"SET RowID = md5(\n",
					"    concat_ws('|',\n",
					"    absencedate,\n",
					"    absencehours,\n",
					"    staffnumber,\n",
					"    WorkScheduleRule,\n",
					"    AbsType,\n",
					"    SicknessGroup,\n",
					"    AttendanceorAbsenceType,\n",
					"    Leave,\n",
					"    PSGroup,\n",
					"    PersonnelArea,\n",
					"    PersonnelSubarea\n",
					" \n",
					"\n",
					"    )\n",
					")"
				],
				"execution_count": 24
			},
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"\n",
					"UPDATE odw_harmonised_db.sap_hr_fact_absence_all_temp\n",
					"SET RowID = md5(\n",
					"    concat_ws('|',\n",
					"    absencedate,\n",
					"    absencehours,\n",
					"    staffnumber,\n",
					"    WorkScheduleRule,\n",
					"    AbsType,\n",
					"    SicknessGroup,\n",
					"    AttendanceorAbsenceType,\n",
					"    Leave,\n",
					"    PSGroup,\n",
					"    PersonnelArea,\n",
					"    PersonnelSubarea\n",
					" \n",
					"\n",
					"    )\n",
					")"
				],
				"execution_count": 25
			},
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"\n",
					"select * from odw_harmonised_db.sap_hr_fact_absence_all limit 5"
				],
				"execution_count": 1
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					" # Validation checks"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"\n",
					"-- Step 1: Truncate temporary and final tables\n",
					"DELETE FROM odw_harmonised_db.fact_Absence_All_TEMP;\n",
					"DELETE FROM odw_harmonised_db.fact_Absence_All;\n",
					"\n",
					"-- Step 2: Expand absence records into individual days and calculate working hours\n",
					"WITH AbsenceDays AS (\n",
					"    SELECT\n",
					"        aa.StaffNumber AS staffnumber, -- Rename to match the expected column name\n",
					"        aa.WorkScheduleRule,\n",
					"        aa.AbsType,\n",
					"        aa.SicknessGroup,\n",
					"        aa.AttendanceorAbsenceType,\n",
					"        aa.StartDate AS abs_date,\n",
					"        aa.EndDate,\n",
					"        aa.Days,\n",
					"        aa.Hrs,\n",
					"        aa.Caldays,\n",
					"        aa.HrsDay,\n",
					"        ws.Mo,\n",
					"        ws.Tu,\n",
					"        ws.We,\n",
					"        ws.Th,\n",
					"        ws.Fr\n",
					"    FROM\n",
					"        odw_harmonised_db.Absence_All aa\n",
					"    LEFT JOIN\n",
					"        odw_standardised_db.work_schedules ws ON aa.WorkScheduleRule = ws.WorkScheduleRule\n",
					"),\n",
					"ProcessedAbsence AS (\n",
					"    SELECT\n",
					"        ad.staffnumber, -- Use the renamed column\n",
					"        ad.WorkScheduleRule,\n",
					"        ad.AbsType,\n",
					"        ad.SicknessGroup,\n",
					"        ad.AttendanceorAbsenceType,\n",
					"        ad.abs_date,\n",
					"        ad.Days,\n",
					"        ad.Hrs,\n",
					"        ad.Caldays,\n",
					"        ad.HrsDay,\n",
					"        CASE dayofweek(ad.abs_date) -- Use dayofweek instead of DATEPART\n",
					"            WHEN 2 THEN ad.Mo -- Monday\n",
					"            WHEN 3 THEN ad.Tu -- Tuesday\n",
					"            WHEN 4 THEN ad.We -- Wednesday\n",
					"            WHEN 5 THEN ad.Th -- Thursday\n",
					"            WHEN 6 THEN ad.Fr -- Friday\n",
					"            ELSE 0\n",
					"        END AS leave_hrs\n",
					"    FROM\n",
					"        AbsenceDays ad\n",
					"    WHERE\n",
					"        dayofweek(ad.abs_date) BETWEEN 2 AND 6 -- Use dayofweek instead of DATEPART\n",
					")\n",
					"-- Step 3: Insert into temporary table\n",
					"INSERT INTO odw_harmonised_db.fact_Absence_All_TEMP (\n",
					"    absence_date,\n",
					"    absence_hours,\n",
					"    staffnumber, -- Use the correct column name\n",
					"    WorkScheduleRule,\n",
					"    AbsType,\n",
					"    SicknessGroup,\n",
					"    AttendanceorAbsenceType,\n",
					"    Leave,\n",
					"    PSGroup, -- Add missing column\n",
					"    PersonnelArea, -- Add missing column\n",
					"    PersonnelSubarea -- Add missing column\n",
					")\n",
					"SELECT\n",
					"    pa.abs_date AS absence_date,\n",
					"    CASE\n",
					"        WHEN pa.Days BETWEEN 0.01 AND 0.99 THEN pa.leave_hrs * pa.Days\n",
					"        ELSE pa.leave_hrs\n",
					"    END AS absence_hours,\n",
					"    CASE LEFT(CAST(pa.staffnumber AS STRING), 1) -- Use the correct column name\n",
					"        WHEN '4' THEN '50' + CAST(pa.staffnumber AS STRING)\n",
					"        WHEN '5' THEN '00' + CAST(pa.staffnumber AS STRING)\n",
					"        WHEN '6' THEN '60' + CAST(pa.staffnumber AS STRING)\n",
					"        ELSE CAST(pa.staffnumber AS STRING)\n",
					"    END AS staffnumber, -- Use the correct column name\n",
					"    pa.WorkScheduleRule,\n",
					"    pa.AbsType,\n",
					"    pa.SicknessGroup,\n",
					"    pa.AttendanceorAbsenceType,\n",
					"    ROUND(CASE\n",
					"        WHEN (pa.AbsType = 'CB01' AND pa.Days = 0) THEN 1\n",
					"        WHEN (pa.AbsType = 'MT01' AND pa.Days = 0) THEN 1\n",
					"        WHEN (pa.AttendanceorAbsenceType = 'Spec u/p-up to 3mths' AND pa.Days = 0) THEN 1\n",
					"        WHEN pa.Caldays = 0 THEN pa.Hrs / pa.HrsDay\n",
					"        ELSE 1\n",
					"    END, 2) AS Leave,\n",
					"    NULL AS PSGroup, -- Add NULL placeholder for PSGroup\n",
					"    NULL AS PersonnelArea, -- Add NULL placeholder for PersonnelArea\n",
					"    NULL AS PersonnelSubarea -- Add NULL placeholder for PersonnelSubarea\n",
					"FROM\n",
					"    ProcessedAbsence pa\n",
					"WHERE\n",
					"    pa.leave_hrs > 0;\n",
					"\n",
					"-- Step 4: Remove duplicates and insert into final table\n",
					"WITH Duplicate_CTE AS (\n",
					"    SELECT\n",
					"        *,\n",
					"        ROW_NUMBER() OVER (PARTITION BY absence_date, staffnumber ORDER BY -- Use the correct column name\n",
					"            CASE WHEN AttendanceorAbsenceType = 'NA Time (Inspectors)' THEN 0 ELSE 1 END DESC) AS Rno\n",
					"    FROM\n",
					"        odw_harmonised_db.fact_Absence_All_TEMP\n",
					")\n",
					"INSERT INTO odw_harmonised_db.fact_Absence_All (\n",
					"    absence_date,\n",
					"    absence_hours,\n",
					"    staffnumber, -- Use the correct column name\n",
					"    WorkScheduleRule,\n",
					"    AbsType,\n",
					"    SicknessGroup,\n",
					"    AttendanceorAbsenceType,\n",
					"    Leave,\n",
					"    PSGroup, -- Add missing column\n",
					"    PersonnelArea, -- Add missing column\n",
					"    PersonnelSubarea -- Add missing column\n",
					")\n",
					"SELECT\n",
					"    absence_date,\n",
					"    absence_hours,\n",
					"    staffnumber, -- Use the correct column name\n",
					"    WorkScheduleRule,\n",
					"    AbsType,\n",
					"    SicknessGroup,\n",
					"    AttendanceorAbsenceType,\n",
					"    Leave,\n",
					"    h.PSGroup, -- Add missing column\n",
					"    h.PersonnelArea, -- Add missing column\n",
					"    h.PersonnelSubarea -- Add missing column\n",
					"FROM\n",
					"    Duplicate_CTE d\n",
					"LEFT JOIN\n",
					"    odw_harmonised_db.load_sap_hr_monthly h ON d.staffnumber = h.PersNo -- Use the correct column name\n",
					"WHERE\n",
					"    d.Rno = 1;\n",
					"\n",
					"-- Step 5: Delete rows for invalid staff numbers\n",
					"DELETE FROM odw_harmonised_db.fact_Absence_All\n",
					"WHERE staffnumber IN ('50410587', '50422294'); -- Use the correct column name\n",
					"\n",
					"-- Step 6: Update Group/Area/Subarea columns\n",
					"MERGE INTO odw_harmonised_db.fact_Absence_All a\n",
					"USING (\n",
					"    SELECT\n",
					"        PersNo,\n",
					"        PSGroup,\n",
					"        PersonnelArea,\n",
					"        PersonnelSubarea,\n",
					"        Report_MonthEnd_Date\n",
					"    FROM\n",
					"        odw_harmonised_db.load_sap_hr_monthly\n",
					") h\n",
					"ON a.staffnumber = h.PersNo\n",
					"AND a.absence_date >= DATE_ADD(DATE_ADD(h.Report_MonthEnd_Date, 1), -30) -- Subtract 30 days (approx. 1 month)\n",
					"WHEN MATCHED THEN\n",
					"UPDATE SET\n",
					"    PSGroup = h.PSGroup,\n",
					"    PersonnelArea = h.PersonnelArea,\n",
					"    PersonnelSubarea = h.PersonnelSubarea;\n",
					"\n",
					"-- Step 7: Update Group/Area/Subarea columns for historical data\n",
					"MERGE INTO odw_harmonised_db.fact_Absence_All a\n",
					"USING (\n",
					"    SELECT\n",
					"        PersNo,\n",
					"        PSGroup,\n",
					"        PersonnelArea,\n",
					"        PersonnelSubarea,\n",
					"        DATE_ADD(DATE_ADD(Report_MonthEnd_Date, 1), -30) AS Report_MonStart_Date, -- Subtract 30 days (approx. 1 month)\n",
					"        Report_MonthEnd_Date\n",
					"    FROM\n",
					"        odw_harmonised_db.Hist_SAP_HR\n",
					"    WHERE\n",
					"        Report_MonthEnd_Date < (SELECT MAX(Report_MonthEnd_Date) FROM odw_harmonised_db.Hist_SAP_HR)\n",
					") p\n",
					"ON a.staffnumber = p.PersNo\n",
					"AND a.absence_date BETWEEN p.Report_MonStart_Date AND p.Report_MonthEnd_Date\n",
					"WHEN MATCHED THEN\n",
					"UPDATE SET\n",
					"    PSGroup = p.PSGroup,\n",
					"    PersonnelArea = p.PersonnelArea,\n",
					"    PersonnelSubarea = p.PersonnelSubarea;"
				],
				"execution_count": 26
			},
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"\n",
					"select * from odw_harmonised_db.load_sap_hr_monthly"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"\n",
					"select * from odw_standardised_db.work_schedules"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"\n",
					"-- Step 1: Truncate temporary and final tables\n",
					"DELETE FROM odw_harmonised_db.fact_Absence_All_TEMP;\n",
					"DELETE FROM odw_harmonised_db.fact_Absence_All;\n",
					"\n",
					"-- Step 2: Generate a sequence of numbers for date expansion\n",
					"CREATE OR REPLACE TEMPORARY VIEW Numbers AS\n",
					"SELECT sequence_id AS n\n",
					"FROM (\n",
					"    SELECT posexplode(split(space(1000), ' ')) AS (sequence_id, value)\n",
					");\n",
					"\n",
					"-- Step 3: Expand absence records into individual days and calculate working hours\n",
					"WITH AbsenceDays AS (\n",
					"    SELECT\n",
					"        aa.StaffNumber AS staffnumber,\n",
					"        aa.WorkScheduleRule,\n",
					"        aa.AbsType,\n",
					"        aa.SicknessGroup,\n",
					"        aa.AttendanceorAbsenceType,\n",
					"        aa.StartDate AS abs_date,\n",
					"        aa.EndDate,\n",
					"        aa.Days,\n",
					"        aa.Hrs,\n",
					"        aa.Caldays,\n",
					"        aa.HrsDay,\n",
					"        ws.Mo,\n",
					"        ws.Tu,\n",
					"        ws.We,\n",
					"        ws.Th,\n",
					"        ws.Fr\n",
					"    FROM\n",
					"        odw_harmonised_db.Absence_All aa\n",
					"    LEFT JOIN\n",
					"        odw_standardised_db.work_schedules ws ON aa.WorkScheduleRule = ws.WorkScheduleRule\n",
					"    CROSS JOIN\n",
					"        Numbers n\n",
					"    WHERE\n",
					"        n.n <= DATEDIFF(aa.StartDate, aa.EndDate)\n",
					"),\n",
					"ProcessedAbsence AS (\n",
					"    SELECT\n",
					"        ad.staffnumber,\n",
					"        ad.WorkScheduleRule,\n",
					"        ad.AbsType,\n",
					"        ad.SicknessGroup,\n",
					"        ad.AttendanceorAbsenceType,\n",
					"        DATE_ADD(ad.abs_date, n.n) AS abs_date,\n",
					"        ad.Days,\n",
					"        ad.Hrs,\n",
					"        ad.Caldays,\n",
					"        ad.HrsDay,\n",
					"        CASE dayofweek(DATE_ADD(ad.abs_date, n.n))\n",
					"            WHEN 2 THEN ad.Mo -- Monday\n",
					"            WHEN 3 THEN ad.Tu -- Tuesday\n",
					"            WHEN 4 THEN ad.We -- Wednesday\n",
					"            WHEN 5 THEN ad.Th -- Thursday\n",
					"            WHEN 6 THEN ad.Fr -- Friday\n",
					"            ELSE 0\n",
					"        END AS leave_hrs\n",
					"    FROM\n",
					"        AbsenceDays ad\n",
					"    CROSS JOIN\n",
					"        Numbers n\n",
					"    WHERE\n",
					"        DATE_ADD(ad.abs_date, n.n) <= ad.EndDate\n",
					"        AND dayofweek(DATE_ADD(ad.abs_date, n.n)) BETWEEN 2 AND 6\n",
					")\n",
					"-- Step 4: Insert into temporary table\n",
					"INSERT INTO odw_harmonised_db.fact_Absence_All_TEMP (\n",
					"    absence_date,\n",
					"    absence_hours,\n",
					"    staffnumber,\n",
					"    WorkScheduleRule,\n",
					"    AbsType,\n",
					"    SicknessGroup,\n",
					"    AttendanceorAbsenceType,\n",
					"    Leave,\n",
					"    PSGroup,\n",
					"    PersonnelArea,\n",
					"    PersonnelSubarea\n",
					")\n",
					"SELECT\n",
					"    pa.abs_date AS absence_date,\n",
					"    CASE\n",
					"        WHEN pa.Days BETWEEN 0.01 AND 0.99 THEN pa.leave_hrs * pa.Days\n",
					"        ELSE pa.leave_hrs\n",
					"    END AS absence_hours,\n",
					"    CASE LEFT(CAST(pa.staffnumber AS STRING), 1)\n",
					"        WHEN '4' THEN '50' + CAST(pa.staffnumber AS STRING)\n",
					"        WHEN '5' THEN '00' + CAST(pa.staffnumber AS STRING)\n",
					"        WHEN '6' THEN '60' + CAST(pa.staffnumber AS STRING)\n",
					"        ELSE CAST(pa.staffnumber AS STRING)\n",
					"    END AS staffnumber,\n",
					"    pa.WorkScheduleRule,\n",
					"    pa.AbsType,\n",
					"    pa.SicknessGroup,\n",
					"    pa.AttendanceorAbsenceType,\n",
					"    ROUND(CASE\n",
					"        WHEN (pa.AbsType = 'CB01' AND pa.Days = 0) THEN 1\n",
					"        WHEN (pa.AbsType = 'MT01' AND pa.Days = 0) THEN 1\n",
					"        WHEN (pa.AttendanceorAbsenceType = 'Spec u/p-up to 3mths' AND pa.Days = 0) THEN 1\n",
					"        WHEN pa.Caldays = 0 THEN pa.Hrs / pa.HrsDay\n",
					"        ELSE 1\n",
					"    END, 2) AS Leave,\n",
					"    NULL AS PSGroup,\n",
					"    NULL AS PersonnelArea,\n",
					"    NULL AS PersonnelSubarea\n",
					"FROM\n",
					"    ProcessedAbsence pa\n",
					"WHERE\n",
					"    pa.leave_hrs > 0;\n",
					"\n",
					"-- Step 5: Remove duplicates and insert into final table\n",
					"WITH Duplicate_CTE AS (\n",
					"    SELECT\n",
					"        *,\n",
					"        ROW_NUMBER() OVER (PARTITION BY absence_date, staffnumber ORDER BY\n",
					"            CASE WHEN AttendanceorAbsenceType = 'NA Time (Inspectors)' THEN 0 ELSE 1 END DESC) AS Rno\n",
					"    FROM\n",
					"        odw_harmonised_db.fact_Absence_All_TEMP\n",
					")\n",
					"INSERT INTO odw_harmonised_db.fact_Absence_All (\n",
					"    absence_date,\n",
					"    absence_hours,\n",
					"    staffnumber,\n",
					"    WorkScheduleRule,\n",
					"    AbsType,\n",
					"    SicknessGroup,\n",
					"    AttendanceorAbsenceType,\n",
					"    Leave,\n",
					"    PSGroup,\n",
					"    PersonnelArea,\n",
					"    PersonnelSubarea\n",
					")\n",
					"SELECT\n",
					"    absence_date,\n",
					"    absence_hours,\n",
					"    staffnumber,\n",
					"    WorkScheduleRule,\n",
					"    AbsType,\n",
					"    SicknessGroup,\n",
					"    AttendanceorAbsenceType,\n",
					"    Leave,\n",
					"    h.PSGroup,\n",
					"    h.PersonnelArea,\n",
					"    h.PersonnelSubarea\n",
					"FROM\n",
					"    Duplicate_CTE d\n",
					"LEFT JOIN\n",
					"    odw_harmonised_db.load_sap_hr_monthly h ON d.staffnumber = h.PersNo\n",
					"WHERE\n",
					"    d.Rno = 1;\n",
					"\n",
					"-- Step 6: Delete rows for invalid staff numbers\n",
					"DELETE FROM odw_harmonised_db.fact_Absence_All\n",
					"WHERE staffnumber IN ('50410587', '50422294');\n",
					"\n",
					"-- Step 7: Update Group/Area/Subarea columns\n",
					"MERGE INTO odw_harmonised_db.fact_Absence_All a\n",
					"USING (\n",
					"    SELECT\n",
					"        PersNo,\n",
					"        PSGroup,\n",
					"        PersonnelArea,\n",
					"        PersonnelSubarea,\n",
					"        Report_MonthEnd_Date\n",
					"    FROM\n",
					"        odw_harmonised_db.load_sap_hr_monthly\n",
					") h\n",
					"ON a.staffnumber = h.PersNo\n",
					"AND a.absence_date >= DATE_ADD(DATE_ADD(h.Report_MonthEnd_Date, 1), -30) -- Subtract 30 days (approx. 1 month)\n",
					"WHEN MATCHED THEN\n",
					"UPDATE SET\n",
					"    PSGroup = h.PSGroup,\n",
					"    PersonnelArea = h.PersonnelArea,\n",
					"    PersonnelSubarea = h.PersonnelSubarea;\n",
					"\n",
					"-- Step 8: Update Group/Area/Subarea columns for historical data\n",
					"MERGE INTO odw_harmonised_db.fact_Absence_All a\n",
					"USING (\n",
					"    SELECT\n",
					"        PersNo,\n",
					"        PSGroup,\n",
					"        PersonnelArea,\n",
					"        PersonnelSubarea,\n",
					"        DATE_ADD(DATE_ADD(Report_MonthEnd_Date, 1), -30) AS Report_MonStart_Date, -- Subtract 30 days (approx. 1 month)\n",
					"        Report_MonthEnd_Date\n",
					"    FROM\n",
					"        odw_harmonised_db.Hist_SAP_HR\n",
					"    WHERE\n",
					"        Report_MonthEnd_Date < (SELECT MAX(Report_MonthEnd_Date) FROM odw_harmonised_db.Hist_SAP_HR)\n",
					") p\n",
					"ON a.staffnumber = p.PersNo\n",
					"AND a.absence_date BETWEEN p.Report_MonStart_Date AND p.Report_MonthEnd_Date\n",
					"WHEN MATCHED THEN\n",
					"UPDATE SET\n",
					"    PSGroup = p.PSGroup,\n",
					"    PersonnelArea = p.PersonnelArea,\n",
					"    PersonnelSubarea = p.PersonnelSubarea;"
				],
				"execution_count": 27
			}
		]
	}
}