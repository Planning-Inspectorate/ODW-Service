{
	"name": "delta_back_odw",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pinssynspodwpr",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "ba2f7f2a-9c0d-4a53-abeb-208c651e5fc3"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ff442a29-fc06-4a13-8e3e-65fd5da513b3/resourceGroups/pins-rg-data-odw-dev-uks/providers/Microsoft.Synapse/workspaces/pins-synw-odw-dev-uks/bigDataPools/pinssynspodwpr",
				"name": "pinssynspodwpr",
				"type": "Spark",
				"endpoint": "https://pins-synw-odw-dev-uks.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pinssynspodwpr",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"import pprint\n",
					"from pyspark.sql.types import *\n",
					"import json\n",
					"import re\n",
					"from pyspark.sql.functions import col, explode"
				],
				"execution_count": 22
			},
			{
				"cell_type": "code",
				"source": [
					"storage_account_path=re.search('url=https://(.+?);', mssparkutils.credentials.getFullConnectionString('ls_backup_source')).group(1)\n",
					"container = 'odw-standardised'\n",
					"full_storage_path = f'abfss://{container}@{storage_account_path}'\n",
					"full_storage_path"
				],
				"execution_count": 23
			},
			{
				"cell_type": "code",
				"source": [
					"storage_account_backup_path=re.search('url=https://(.+?);', mssparkutils.credentials.getFullConnectionString('ls_backup_destination')).group(1)"
				],
				"execution_count": 24
			},
			{
				"cell_type": "code",
				"source": [
					"storage_account_backup_path"
				],
				"execution_count": 48
			},
			{
				"cell_type": "code",
				"source": [
					"storage_account: str = mssparkutils.notebook.run('/utils/py_utils_get_storage_account')\n",
					"metadata_path: str = \"abfss://odw-config@\"+storage_account+\"existing-tables-metadata.json\"\n",
					"df  = spark.read.json(metadata_path, multiLine=True)"
				],
				"execution_count": 25
			},
			{
				"cell_type": "code",
				"source": [
					"all_file_path_list = []\n",
					"for i in mssparkutils.fs.ls(full_storage_path):\n",
					"    all_file_path_list.append(str(i).split(\"=\")[1].split(\",\")[0])\n",
					"all_file_path_list = [ x for x in all_file_path_list if \"test\" not in x ]"
				],
				"execution_count": 26
			},
			{
				"cell_type": "code",
				"source": [
					"# Explode each metadata category separately (as they are nested lists)\n",
					"standardised_df = df.select(explode(col(\"standardised_metadata\")).alias(\"metadata\"))\n",
					"harmonised_df = df.select(explode(col(\"harmonised_metadata\")).alias(\"metadata\"))\n",
					"curated_df = df.select(explode(col(\"curated_metadata\")).alias(\"metadata\"))\n",
					"logging_df = df.select(explode(col(\"logging_metadata\")).alias(\"metadata\"))\n",
					"config_df = df.select(explode(col(\"config_metadata\")).alias(\"metadata\"))\n",
					"\n",
					"# Select the relevant fields\n",
					"df_exploded = standardised_df.union(harmonised_df).union(curated_df).union(logging_df).union(config_df).selectExpr(\"metadata.*\")"
				],
				"execution_count": 27
			},
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": false
				},
				"source": [
					"ls_delta = df_exploded.filter(col(\"table_format\") == 'delta').filter(col(\"database_name\")==\"odw_standardised_db\").select(\"table_location\").collect()\n",
					""
				],
				"execution_count": 31
			},
			{
				"cell_type": "code",
				"source": [
					"delta_file_list = []\n",
					"for i in ls_delta:\n",
					"    delta_file_list.append(str(i).split(\"=\")[1].split(\")\")[0])"
				],
				"execution_count": 29
			},
			{
				"cell_type": "code",
				"source": [
					"def list_all_files(base_path, relative_path=\"\"):\n",
					"    files = []\n",
					"    full_path = base_path + \"/\" + relative_path if relative_path else base_path\n",
					"    items = mssparkutils.fs.ls(full_path)\n",
					"    \n",
					"    for item in items:\n",
					"        item_path = f\"{relative_path}/{item.name}\".rstrip(\"/\")\n",
					"        if item.isDir:\n",
					"            files.extend(list_all_files(base_path, item_path))\n",
					"        else:\n",
					"            files.append(item_path)\n",
					"    return set(files)"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"for i in delta_file_list[:1]:\n",
					"    pcontainer_name = i.split(\"@\")[0].split(\"//\")[1]\n",
					"    base_path = i.split(\"'\")[1]\n",
					"    base_path_lst = list_all_files(i.split(\"'\")[1])\n",
					"    backup_path_lst = list_all_files(i.split(\"'\")[1].replace(storage_account_path,storage_account_backup_path)).replace(container_name,\"delta-backup-container\")\n",
					"    delta_files = base_path_lst-backup_path_lst\n",
					"    print(len(delta_files))\n",
					"    for file in delta_files:\n",
					"        mssparkutils.fs.cp(base_path+file,backup_path+file)"
				],
				"execution_count": 59
			},
			{
				"cell_type": "code",
				"source": [
					"delta_file_list = []\n",
					"for i in ls_delta:\n",
					"    delta_file_list.append(str(i).split(\"=\")[1].split(\")\")[0])"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"non_delta_file_list = set(all_file_path_list)-set(delta_file_list)"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"non_delta_file_dict = {\n",
					"    \"backup_storage_name\":storage_account_backup_path.split(\".\")[0],\n",
					"    \"non_delta_file_list\":list(non_delta_file_list)\n",
					"}"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"non_delta_file_dict = {'backup_storage_name': 'pinsstodwdevukwdvzrjm', 'non_delta_file_list': ['abfss://odw-standardised@pinsstodwdevuks9h80mb.dfs.core.windows.net/listed_building_10_05_2025']}"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"mssparkutils.notebook.exit(non_delta_file_dict)"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"#mssparkutils.notebook.exit(list(non_delta_file_list))"
				],
				"execution_count": null
			}
		]
	}
}