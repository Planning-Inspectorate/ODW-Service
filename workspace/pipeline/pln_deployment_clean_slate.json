{
	"name": "pln_deployment_clean_slate",
	"properties": {
		"activities": [
			{
				"name": "Delete All Tables",
				"description": "Delete All Tables",
				"type": "ForEach",
				"dependsOn": [
					{
						"activity": "Set HR Tables Array",
						"dependencyConditions": [
							"Failed"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@variables('hr_tables')",
						"type": "Expression"
					},
					"batchCount": 10,
					"activities": [
						{
							"name": "Delete Table",
							"type": "SynapseNotebook",
							"dependsOn": [],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"notebook": {
									"referenceName": "py_delete_table",
									"type": "NotebookReference"
								},
								"parameters": {
									"db_name": {
										"value": {
											"value": "@split(item(), '.')[0]",
											"type": "Expression"
										},
										"type": "string"
									},
									"table_name": {
										"value": {
											"value": "@split(item(), '.')[1]",
											"type": "Expression"
										},
										"type": "string"
									}
								},
								"snapshot": true,
								"conf": {
									"spark.dynamicAllocation.enabled": null,
									"spark.dynamicAllocation.minExecutors": null,
									"spark.dynamicAllocation.maxExecutors": null
								},
								"numExecutors": null
							}
						}
					]
				}
			},
			{
				"name": "Delete All Views",
				"description": "Delete All Views",
				"type": "ForEach",
				"dependsOn": [
					{
						"activity": "Set HR Views Array",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@variables('hr_views')",
						"type": "Expression"
					},
					"batchCount": 10,
					"activities": [
						{
							"name": "Delete View",
							"type": "SynapseNotebook",
							"dependsOn": [],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"notebook": {
									"referenceName": "py_delete_view",
									"type": "NotebookReference"
								},
								"parameters": {
									"db_name": {
										"value": {
											"value": "@split(item(), '.')[0]",
											"type": "Expression"
										},
										"type": "string"
									},
									"table_name": {
										"value": {
											"value": "@split(item(), '.')[1]",
											"type": "Expression"
										},
										"type": "string"
									}
								},
								"snapshot": true,
								"conf": {
									"spark.dynamicAllocation.enabled": null,
									"spark.dynamicAllocation.minExecutors": null,
									"spark.dynamicAllocation.maxExecutors": null
								},
								"numExecutors": null
							}
						}
					]
				}
			},
			{
				"name": "Set HR Views Array",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "Set HR Tables Array",
						"dependencyConditions": [
							"Failed"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"variableName": "hr_views",
					"value": [
						"odw_standardised_db.vw_absences",
						"odw_standardised_db.vw_absences_old",
						"odw_standardised_db.vw_addresses",
						"odw_standardised_db.vw_email",
						"odw_standardised_db.vw_leavers",
						"odw_standardised_db.vw_leave",
						"odw_standardised_db.hr_protected_characteristics",
						"odw_standardised_db.vw_saphr",
						"odw_standardised_db.vw_saphr_historic",
						"odw_standardised_db.vw_work_schedule_rule"
					]
				}
			},
			{
				"name": "Set HR Tables Array",
				"description": "",
				"type": "SetVariable",
				"dependsOn": [],
				"userProperties": [],
				"typeProperties": {
					"variableName": "hr_tables",
					"value": [
						"odw_standardised_db.hr_addresses",
						"odw_standardised_db.hr_saphr",
						"odw_standardised_db.hr_email",
						"odw_standardised_db.hr_specialisms",
						"odw_standardised_db.hr_leave",
						"odw_standardised_db.hr_leavers",
						"odw_standardised_db.hr_protected_characteristics",
						"odw_standardised_db.hr_work_schedule_rule",
						"odw_standardised_db.hr_absences",
						"odw_harmonised_db.hr_absence_dim",
						"odw_harmonised_db.hr_contract_dim",
						"odw_harmonised_db.hr_costcenter_dim",
						"odw_harmonised_db.hr_disability_dim",
						"odw_harmonised_db.hr_diversity_dim",
						"odw_harmonised_db.hr_employee_dim",
						"odw_harmonised_db.hr_employee_fact",
						"odw_harmonised_db.hr_employee_hr_hierarchy_dim",
						"odw_harmonised_db.hr_employee_leavers_dim",
						"odw_harmonised_db.hr_employeegroup_dim",
						"odw_harmonised_db.hr_leave_entitlement_dim",
						"odw_harmonised_db.hr_organisation_unit_dim",
						"odw_harmonised_db.hr_payband_dim",
						"odw_harmonised_db.hr_payroll_area_dim",
						"odw_harmonised_db.hr_personnel_area_dim",
						"odw_harmonised_db.hr_personnel_sub_area_dim",
						"odw_harmonised_db.hr_pins_location_dim",
						"odw_harmonised_db.hr_position_dim",
						"odw_harmonised_db.hr_record_fact",
						"odw_harmonised_db.hr_religion_dim",
						"odw_harmonised_db.hr_secure_info_fact",
						"odw_harmonised_db.hr_specialism_dim",
						"odw_harmonised_db.hr_sxo_dim",
						"odw_harmonised_db.hr_work_schedule_dim",
						"odw_standardised_db.sap_hr_historic",
						"odw_curated_db.employee",
						"odw_harmonised_db.main_sourcesystem_fact",
						"odw_standardised_db.bis_pension_ernic_rates"
					]
				}
			},
			{
				"name": "Create Standardised",
				"type": "ForEach",
				"dependsOn": [
					{
						"activity": "Set HR Tables Array",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@variables('hr_tables')",
						"type": "Expression"
					},
					"batchCount": 10,
					"activities": [
						{
							"name": "If is_standardised",
							"type": "IfCondition",
							"dependsOn": [],
							"userProperties": [],
							"typeProperties": {
								"expression": {
									"value": "@startswith(item(), 'odw_standardised_db')",
									"type": "Expression"
								},
								"ifTrueActivities": [
									{
										"name": "Add Outstanding Entry",
										"description": "Adds Entry in odw_config_db.raw_to_std_outstanding_files table",
										"type": "SynapseNotebook",
										"dependsOn": [
											{
												"activity": "Get Orchestration Entry",
												"dependencyConditions": [
													"Succeeded"
												]
											}
										],
										"policy": {
											"timeout": "0.12:00:00",
											"retry": 0,
											"retryIntervalInSeconds": 30,
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"notebook": {
												"referenceName": "outstanding_files_add_entry",
												"type": "NotebookReference"
											},
											"parameters": {
												"jsonId": {
													"value": {
														"value": "@json(activity('Get Orchestration Entry').output.status.Output.result.exitValue)['Source_ID']",
														"type": "Expression"
													},
													"type": "int"
												},
												"year": {
													"value": {
														"value": "@json(activity('Get Orchestration Entry').output.status.Output.result.exitValue)['ingestion_year']",
														"type": "Expression"
													},
													"type": "int"
												},
												"month": {
													"value": {
														"value": "@json(activity('Get Orchestration Entry').output.status.Output.result.exitValue)['ingestion_month']",
														"type": "Expression"
													},
													"type": "int"
												},
												"day": {
													"value": {
														"value": "@json(activity('Get Orchestration Entry').output.status.Output.result.exitValue)['ingestion_day']",
														"type": "Expression"
													},
													"type": "int"
												},
												"hour": {
													"value": "0",
													"type": "int"
												},
												"minute": {
													"value": "0",
													"type": "int"
												},
												"second": {
													"value": "0",
													"type": "int"
												}
											},
											"snapshot": true,
											"conf": {
												"spark.dynamicAllocation.enabled": null,
												"spark.dynamicAllocation.minExecutors": null,
												"spark.dynamicAllocation.maxExecutors": null
											},
											"numExecutors": null
										}
									},
									{
										"name": "Get Orchestration Entry",
										"type": "SynapseNotebook",
										"dependsOn": [],
										"policy": {
											"timeout": "0.12:00:00",
											"retry": 0,
											"retryIntervalInSeconds": 30,
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"notebook": {
												"referenceName": "get_orchestration_entry",
												"type": "NotebookReference"
											},
											"parameters": {
												"table_name": {
													"value": {
														"value": "@split(item(), '.')[1]",
														"type": "Expression"
													},
													"type": "string"
												}
											},
											"snapshot": true,
											"conf": {
												"spark.dynamicAllocation.enabled": null,
												"spark.dynamicAllocation.minExecutors": null,
												"spark.dynamicAllocation.maxExecutors": null
											},
											"numExecutors": null
										}
									},
									{
										"name": "Create and Ingest",
										"description": "Creates standardised table and ingests data",
										"type": "SynapseNotebook",
										"dependsOn": [
											{
												"activity": "Add Outstanding Entry",
												"dependencyConditions": [
													"Succeeded"
												]
											}
										],
										"policy": {
											"timeout": "0.12:00:00",
											"retry": 0,
											"retryIntervalInSeconds": 30,
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"notebook": {
												"referenceName": "py_1_initial_run_raw_to_standardised_scheduling",
												"type": "NotebookReference"
											},
											"parameters": {
												"source_id": {
													"value": {
														"value": "@json(activity('Get Orchestration Entry').output.status.Output.result.exitValue)['Source_ID']",
														"type": "Expression"
													},
													"type": "int"
												}
											},
											"snapshot": true,
											"conf": {
												"spark.dynamicAllocation.enabled": null,
												"spark.dynamicAllocation.minExecutors": null,
												"spark.dynamicAllocation.maxExecutors": null
											},
											"numExecutors": null
										}
									}
								]
							}
						}
					]
				}
			}
		],
		"variables": {
			"hr_views": {
				"type": "Array"
			},
			"hr_tables": {
				"type": "Array"
			}
		},
		"folder": {
			"name": "post-deployment"
		},
		"annotations": []
	}
}