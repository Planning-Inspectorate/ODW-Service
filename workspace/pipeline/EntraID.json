{
	"name": "EntraID",
	"properties": {
		"activities": [
			{
				"name": "Src to Raw",
				"type": "ExecutePipeline",
				"dependsOn": [],
				"policy": {
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "0_Raw_EntraID",
						"type": "PipelineReference"
					},
					"waitOnCompletion": true
				}
			},
			{
				"name": "Raw to Std",
				"type": "SynapseNotebook",
				"dependsOn": [
					{
						"activity": "Src to Raw",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "Set_start_time",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "1:00:00",
					"retry": 3,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"notebook": {
						"referenceName": "py_raw_to_std",
						"type": "NotebookReference"
					},
					"parameters": {
						"source_folder": {
							"value": "entraid",
							"type": "string"
						},
						"specific_file": {
							"value": "entraid",
							"type": "string"
						},
						"isMultiLine": {
							"value": "True",
							"type": "bool"
						},
						"dataAttribute": {
							"value": "value",
							"type": "string"
						},
						"delete_existing_table": {
							"value": "False",
							"type": "bool"
						}
					},
					"snapshot": true,
					"conf": {
						"spark.dynamicAllocation.enabled": null,
						"spark.dynamicAllocation.minExecutors": null,
						"spark.dynamicAllocation.maxExecutors": null
					},
					"numExecutors": null
				}
			},
			{
				"name": "Std to Hrm",
				"description": "Ingests data from standardised to harmonised ",
				"type": "SynapseNotebook",
				"dependsOn": [
					{
						"activity": "If Raw to Std Faild",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.1:00:00",
					"retry": 3,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"notebook": {
						"referenceName": "entraid",
						"type": "NotebookReference"
					},
					"snapshot": true,
					"conf": {
						"spark.dynamicAllocation.enabled": null,
						"spark.dynamicAllocation.minExecutors": null,
						"spark.dynamicAllocation.maxExecutors": null
					},
					"numExecutors": null
				}
			},
			{
				"name": "Set_start_time",
				"type": "SetVariable",
				"dependsOn": [],
				"policy": {
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"variableName": "start time",
					"value": {
						"value": "@utcNow()",
						"type": "Expression"
					}
				}
			},
			{
				"name": "set_json variable",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "Raw to Std",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"variableName": "raw_json",
					"value": {
						"value": "@json(activity('Raw to Std').output.status.output.result.exitValue).table_details",
						"type": "Expression"
					}
				}
			},
			{
				"name": "ForEachTable",
				"type": "ForEach",
				"dependsOn": [
					{
						"activity": "set_json variable",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@variables('raw_json')",
						"type": "Expression"
					},
					"activities": [
						{
							"name": "Switch_table_status",
							"type": "Switch",
							"dependsOn": [],
							"userProperties": [],
							"typeProperties": {
								"on": {
									"value": "@item().table_result",
									"type": "Expression"
								},
								"cases": [
									{
										"value": "success",
										"activities": [
											{
												"name": "Record completed EntaID",
												"type": "ExecutePipeline",
												"dependsOn": [],
												"policy": {
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "pln_log_to_appins",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"Stage": "Completion",
														"PipelineName": {
															"value": "@pipeline().Pipeline",
															"type": "Expression"
														},
														"PipelineRunID": {
															"value": "@pipeline().RunId",
															"type": "Expression"
														},
														"StartTime": {
															"value": "@item().start_exec_time",
															"type": "Expression"
														},
														"EndTime": {
															"value": "@item().end_exec_time",
															"type": "Expression"
														},
														"Inserts": {
															"value": "@item().insert_count",
															"type": "Expression"
														},
														"StatusMessage": {
															"value": "@concat('pln_aie_document_data loaded for table: ',item().delta_table_name)",
															"type": "Expression"
														},
														"PipelineTriggerID": {
															"value": "@pipeline().TriggerId",
															"type": "Expression"
														},
														"PipelineTriggerName": {
															"value": "@pipeline().TriggerName",
															"type": "Expression"
														},
														"PipelineTriggerType": {
															"value": "@pipeline().TriggerType",
															"type": "Expression"
														},
														"PipelineTriggeredbyPipelineName": {
															"value": "@pipeline()?.TriggeredByPipelineName",
															"type": "Expression"
														},
														"PipelineTriggeredbyPipelineRunID": {
															"value": "@pipeline()?.TriggeredByPipelineRunId",
															"type": "Expression"
														},
														"DurationSeconds": {
															"value": "@item().total_exec_time",
															"type": "Expression"
														},
														"StatusCode": "200",
														"AppInsIKey": {
															"value": "@pipeline().parameters.apps_insights_ikey",
															"type": "Expression"
														}
													}
												}
											}
										]
									},
									{
										"value": "failed",
										"activities": [
											{
												"name": "Record failed EntraID",
												"type": "ExecutePipeline",
												"dependsOn": [],
												"policy": {
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "pln_log_to_appins",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"Stage": "Fail",
														"PipelineName": {
															"value": "@pipeline().Pipeline",
															"type": "Expression"
														},
														"PipelineRunID": {
															"value": "@pipeline().RunId",
															"type": "Expression"
														},
														"StartTime": {
															"value": "@item().start_exec_time",
															"type": "Expression"
														},
														"EndTime": {
															"value": "@item().end_exec_time",
															"type": "Expression"
														},
														"Inserts": {
															"value": "@item().insert_count",
															"type": "Expression"
														},
														"ErrorMessage": {
															"value": "@concat(item().error_message,' for loading file : ',item().csv_file_name)",
															"type": "Expression"
														},
														"StatusMessage": {
															"value": "@concat('Raw to Std failed:',item().csv_file_name)",
															"type": "Expression"
														},
														"PipelineTriggerID": {
															"value": "@pipeline().TriggerId",
															"type": "Expression"
														},
														"PipelineTriggerName": {
															"value": "@pipeline().TriggerName",
															"type": "Expression"
														},
														"PipelineTriggerType": {
															"value": "@pipeline().TriggerType",
															"type": "Expression"
														},
														"PipelineTriggeredbyPipelineName": {
															"value": "@pipeline()?.TriggeredByPipelineName",
															"type": "Expression"
														},
														"PipelineTriggeredbyPipelineRunID": {
															"value": "@pipeline()?.TriggeredByPipelineRunId",
															"type": "Expression"
														},
														"ActivityType": "Pipeline",
														"DurationSeconds": {
															"value": "@item().total_exec_time",
															"type": "Expression"
														},
														"StatusCode": "400",
														"AppInsIKey": {
															"value": "@pipeline().parameters.apps_insights_ikey",
															"type": "Expression"
														}
													}
												}
											},
											{
												"name": "Set Error Flag",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "Record failed EntraID",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "error_flag",
													"value": {
														"value": "@item().table_result",
														"type": "Expression"
													}
												}
											}
										]
									}
								],
								"defaultActivities": [
									{
										"name": "Dummy",
										"type": "Wait",
										"dependsOn": [],
										"userProperties": [],
										"typeProperties": {
											"waitTimeInSeconds": 1
										}
									}
								]
							}
						}
					]
				}
			},
			{
				"name": "If Raw to Std Faild",
				"type": "IfCondition",
				"dependsOn": [
					{
						"activity": "ForEachTable",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@equals(toLower(trim(variables('error_flag'))), 'failed')",
						"type": "Expression"
					},
					"ifFalseActivities": [
						{
							"name": "Wait1",
							"type": "Wait",
							"dependsOn": [],
							"userProperties": [],
							"typeProperties": {
								"waitTimeInSeconds": 1
							}
						}
					],
					"ifTrueActivities": [
						{
							"name": "Fail EntraID_load",
							"type": "Fail",
							"dependsOn": [],
							"userProperties": [],
							"typeProperties": {
								"message": {
									"value": "Standardised Notebook failed. One of the csv file couldn't be loaded successfully. Please App Insight Log for further details",
									"type": "Expression"
								},
								"errorCode": "99"
							}
						}
					]
				}
			},
			{
				"name": "record count Std to Hrm",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "Std to Hrm",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"variableName": "recordCount",
					"value": {
						"value": "@activity('Std to Hrm').output.status.output.result.exitValue",
						"type": "Expression"
					}
				}
			},
			{
				"name": "error message Std to Hrm",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "record count Std to Hrm",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"variableName": "error_message",
					"value": {
						"value": "@activity('Std to Hrm').output.status.output.result.exitValue",
						"type": "Expression"
					}
				}
			},
			{
				"name": "Record completed EntraID Std to Hrm",
				"type": "ExecutePipeline",
				"dependsOn": [
					{
						"activity": "error message Std to Hrm",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "pln_log_to_appins",
						"type": "PipelineReference"
					},
					"waitOnCompletion": true,
					"parameters": {
						"Stage": "Completion",
						"PipelineName": {
							"value": "@pipeline().Pipeline",
							"type": "Expression"
						},
						"PipelineRunID": {
							"value": "@pipeline().RunId",
							"type": "Expression"
						},
						"StartTime": {
							"value": "@variables('start time')",
							"type": "Expression"
						},
						"EndTime": {
							"value": "@utcNow()",
							"type": "Expression"
						},
						"Inserts": {
							"value": "@variables('recordCount')",
							"type": "Expression"
						},
						"StatusMessage": "EntraID loaded",
						"PipelineTriggerID": {
							"value": "@pipeline().TriggerId",
							"type": "Expression"
						},
						"PipelineTriggerName": {
							"value": "@pipeline().TriggerName",
							"type": "Expression"
						},
						"PipelineTriggerType": {
							"value": "@pipeline().TriggerType",
							"type": "Expression"
						},
						"PipelineTriggeredbyPipelineName": {
							"value": "@pipeline()?.TriggeredByPipelineName",
							"type": "Expression"
						},
						"PipelineTriggeredbyPipelineRunID": {
							"value": "@pipeline()?.TriggeredByPipelineRunId",
							"type": "Expression"
						},
						"ActivityType": "Pipeline",
						"DurationSeconds": {
							"value": "@div(sub(ticks(utcNow()), ticks(variables('start time'))), 10000000)",
							"type": "Expression"
						},
						"StatusCode": "200",
						"AppInsIKey": {
							"value": "@pipeline().parameters.apps_insights_ikey",
							"type": "Expression"
						}
					}
				}
			},
			{
				"name": "EntraID Std to Hrm failed",
				"type": "ExecutePipeline",
				"dependsOn": [
					{
						"activity": "error message Std to Hrm",
						"dependencyConditions": [
							"Failed"
						]
					}
				],
				"policy": {
					"secureInput": true
				},
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "pln_utl_Send_Teams_Message",
						"type": "PipelineReference"
					},
					"waitOnCompletion": true,
					"parameters": {
						"dataFactorySubscription": {
							"value": "@pipeline().parameters.subscription_id",
							"type": "Expression"
						},
						"dataFactoryResourceGroup": {
							"value": "@pipeline().parameters.resource_group",
							"type": "Expression"
						},
						"pipelineRunId": {
							"value": "@pipeline().RunId",
							"type": "Expression"
						},
						"teamsWebhookUrl": {
							"value": "@pipeline().parameters.webhook_url",
							"type": "Expression"
						},
						"activityName": {
							"value": "@pipeline().Pipeline",
							"type": "Expression"
						},
						"activityMessage": "EntrID failed",
						"activityDuration": {
							"value": "@concat(string(div(div(sub(ticks(formatDateTime(utcNow(),'yyyy-MM-dd HH:mm:sss')),ticks(formatDateTime(pipeline().parameters.start_time,'yyyy-MM-dd HH:mm:sss'))),600000000),60)),'H:', \nstring(mod(div(sub(ticks(formatDateTime(utcNow(),'yyyy-MM-dd HH:mm:sss')),ticks(formatDateTime(pipeline().parameters.start_time,'yyyy-MM-dd HH:mm:sss'))),600000000),60)),'M:00s')",
							"type": "Expression"
						},
						"activityStatus": "Failed",
						"Colour": {
							"value": "@pipeline().parameters.failed_colour",
							"type": "Expression"
						},
						"Image": {
							"value": "@pipeline().parameters.failed_image",
							"type": "Expression"
						},
						"Message_title": "EntraID Std to Hrm failed",
						"Message_subtitle": "EntraID Std to Hrm failed"
					}
				}
			},
			{
				"name": "Record completed Std to Hrm Std Hrm data",
				"type": "ExecutePipeline",
				"dependsOn": [
					{
						"activity": "error message Std to Hrm",
						"dependencyConditions": [
							"Failed"
						]
					}
				],
				"policy": {
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "pln_log_to_appins",
						"type": "PipelineReference"
					},
					"waitOnCompletion": true,
					"parameters": {
						"Stage": {
							"value": "Fail",
							"type": "Expression"
						},
						"PipelineName": {
							"value": "@pipeline().Pipeline",
							"type": "Expression"
						},
						"PipelineRunID": {
							"value": "@pipeline().RunId",
							"type": "Expression"
						},
						"StartTime": {
							"value": "@json(activity('Std to Hrm').output.status.output.result.exitValue).table_details.start_exec_time",
							"type": "Expression"
						},
						"EndTime": {
							"value": "@json(activity('Std to Hrm').output.status.output.result.exitValue).table_details.end_exec_time",
							"type": "Expression"
						},
						"Inserts": {
							"value": "@variables('recordCount')",
							"type": "Expression"
						},
						"ErrorMessage": {
							"value": "@variables('error_message')",
							"type": "Expression"
						},
						"StatusMessage": "EntraID  Std to Hrm Layer loaded",
						"PipelineTriggerID": {
							"value": "@pipeline().TriggerId",
							"type": "Expression"
						},
						"PipelineTriggerName": {
							"value": "@pipeline().TriggerName",
							"type": "Expression"
						},
						"PipelineTriggerType": {
							"value": "@pipeline().TriggerType",
							"type": "Expression"
						},
						"PipelineTriggeredbyPipelineName": {
							"value": "@pipeline()?.TriggeredByPipelineName",
							"type": "Expression"
						},
						"PipelineTriggeredbyPipelineRunID": {
							"value": "@pipeline()?.TriggeredByPipelineRunId",
							"type": "Expression"
						},
						"ActivityType": "Pipeline",
						"DurationSeconds": {
							"value": "@json(activity('Std to Hrm').output.status.output.result.exitValue).table_details.total_exec_time",
							"type": "Expression"
						},
						"StatusCode": "400",
						"AppInsIKey": {
							"value": "@pipeline().parameters.apps_insights_ikey",
							"type": "Expression"
						}
					}
				}
			}
		],
		"parameters": {
			"apps_insights_ikey": {
				"type": "string"
			},
			"subscription_id": {
				"type": "string"
			},
			"resource_group": {
				"type": "string"
			},
			"webhook_url": {
				"type": "string"
			},
			"start_time": {
				"type": "string"
			},
			"warning_colour": {
				"type": "string"
			},
			"failed_colour": {
				"type": "string"
			},
			"failed_image": {
				"type": "string"
			}
		},
		"variables": {
			"recordCount": {
				"type": "String"
			},
			"error_message": {
				"type": "String"
			},
			"start time": {
				"type": "String"
			},
			"error_flag": {
				"type": "String"
			},
			"raw_json_update": {
				"type": "Array"
			},
			"raw_json": {
				"type": "String"
			}
		},
		"folder": {
			"name": "EntraID"
		},
		"annotations": []
	}
}