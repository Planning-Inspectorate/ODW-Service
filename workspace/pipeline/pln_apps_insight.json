{
	"name": "pln_apps_insight",
	"properties": {
		"activities": [
			{
				"name": "Copy data1",
				"type": "Copy",
				"dependsOn": [],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [
					{
						"name": "Destination",
						"value": "logging/pipeline_logs/"
					}
				],
				"typeProperties": {
					"source": {
						"type": "RestSource",
						"httpRequestTimeout": "00:01:40",
						"requestInterval": "00.00:00:00.010",
						"requestMethod": "POST",
						"requestBody": "{\n\"query\": \"customEvents\n| where name == \"ODW_Master_Pipeline_Logs\" and tostring(customDimensions.Stage) == \"Fail\"\n| project\n    timestamp, \n    Stage = tostring(customDimensions.Stage),\n    PipelineName = tostring(customDimensions.PipelineName),\n    PipelineRunID = tostring(customDimensions.PipelineRunID),\n    StatusMessage = tostring(customDimensions.StatusMessage),\n    StatusCode = tostring(customDimensions.StatusCode),\n    ErrorMessage = tostring(customDimensions.ErrorMessage),\n    StartTime = tostring(customDimensions.StartTime),\n    EndTime = tostring(customDimensions.EndTime),\n    PipelineTriggerType = tostring(customDimensions.PipelineTriggerType),\n    PipelineTriggeredbyPipelineName = tostring(customDimensions.PipelineTriggeredbyPipelineName),\n    PipelineTriggeredbyPipelineRunID = tostring(customDimensions.PipelineTriggeredbyPipelineRunID),\n    PipelineExecutionTimeInSec = tostring(customDimensions.PipelineExecutionTimeInSec),\n    ActivityType = tostring(customDimensions.ActivityType),\n    Inserts = tostring(customDimensions.Inserts),\n    Updates = tostring(customDimensions.Updates),\n    Deletes = tostring(customDimensions.Deletes),\n    PipelineTriggerID = tostring(customDimensions.PipelineTriggerID),\n    PipelineTriggerName = tostring(customDimensions.PipelineTriggerName),\n    DurationSeconds = tostring(customDimensions.DurationSeconds)\n| order by timestamp desc\"\n}",
						"additionalHeaders": {
							"Content-Type": "application/json"
						},
						"paginationRules": {
							"supportRFC5988": "true"
						}
					},
					"sink": {
						"type": "ParquetSink",
						"storeSettings": {
							"type": "AzureBlobFSWriteSettings"
						},
						"formatSettings": {
							"type": "ParquetWriteSettings"
						}
					},
					"enableStaging": false
				},
				"inputs": [
					{
						"referenceName": "ds_rest_app_insight",
						"type": "DatasetReference"
					}
				],
				"outputs": [
					{
						"referenceName": "Parquet1",
						"type": "DatasetReference"
					}
				]
			}
		],
		"annotations": []
	}
}