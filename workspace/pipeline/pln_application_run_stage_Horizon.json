{
	"name": "pln_application_run_stage_Horizon",
	"properties": {
		"description": "Used to execute specific parts of pipelines for applications. In order to execute, you need to set the following variables:\n\n- Stage. Set to one of the following {Src to Raw, Raw to Std, Std to Hrm, Hrm to Cur}\n- Pipeline. Set to the pipeline that you are wanting to run a specific stage for. For example, pln_service_bus_nsip_subscription.\n\nThe rest of the required variables will be set programmatically.\n\nNote: Variables are case sensitive. ",
		"activities": [
			{
				"name": "Set properties needed for execution",
				"description": "We need to know which parts of the pipeline to run. Based on the configuration we will set variables accordingly",
				"type": "Switch",
				"dependsOn": [
					{
						"activity": "Set source folder",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"on": {
						"value": "@variables('Pipeline')",
						"type": "Expression"
					},
					"cases": [
						{
							"value": "pln_horizon_nsip_s51_advice",
							"activities": [
								{
									"name": "Set specific_file 1",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "specific_file",
										"value": "NSIPAdvice"
									}
								}
							]
						},
						{
							"value": "pln_horizon_nsip_exam_timetable",
							"activities": [
								{
									"name": "Set specific_file 2",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "specific_file",
										"value": "ExaminationTimetable"
									}
								}
							]
						},
						{
							"value": "pln_application_run_stage_Horizon",
							"activities": [
								{
									"name": "Set specific_file 3",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "specific_file",
										"value": "NSIPData"
									}
								}
							]
						},
						{
							"value": "pln_nsip_relevant_reps_main",
							"activities": [
								{
									"name": "Set specific_file 4",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "specific_file",
										"value": "NSIPReleventRepresentation"
									}
								}
							]
						},
						{
							"value": "pln_horizon_nsip_project",
							"activities": [
								{
									"name": "Set specific_file 5",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "specific_file",
										"value": "NSIPData"
									}
								}
							]
						}
					],
					"defaultActivities": [
						{
							"name": "No associate pipeline",
							"description": "Set to error to ensure that nothing happens",
							"type": "SetVariable",
							"dependsOn": [],
							"policy": {
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"variableName": "Pipeline",
								"value": "error"
							}
						}
					]
				}
			},
			{
				"name": "Run raw to standard",
				"type": "IfCondition",
				"dependsOn": [
					{
						"activity": "Load Horizon NSIP advice",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "Load Horizon Exam Timetable",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "application - Src to Raw",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "relevant reps - Source to main",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "nsip_project - Src to Raw",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@equals(variables('Stage'), 'Raw to Std')",
						"type": "Expression"
					},
					"ifTrueActivities": [
						{
							"name": "Raw to std",
							"type": "SynapseNotebook",
							"dependsOn": [],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"notebook": {
									"referenceName": "py_raw_to_std",
									"type": "NotebookReference"
								},
								"parameters": {
									"source_folder": {
										"value": {
											"value": "@variables('source_folder')",
											"type": "Expression"
										},
										"type": "string"
									},
									"specific_file": {
										"value": {
											"value": "@variables('specific_file')",
											"type": "Expression"
										},
										"type": "string"
									}
								},
								"snapshot": true,
								"conf": {
									"spark.dynamicAllocation.enabled": null,
									"spark.dynamicAllocation.minExecutors": null,
									"spark.dynamicAllocation.maxExecutors": null
								},
								"numExecutors": null
							}
						}
					]
				}
			},
			{
				"name": "Load Horizon NSIP advice",
				"type": "IfCondition",
				"dependsOn": [
					{
						"activity": "Set properties needed for execution",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@and(equals(variables('Pipeline'), 'pln_horizon_nsip_s51_advice'), equals(variables('Stage'), 'Src to Raw'))",
						"type": "Expression"
					},
					"ifTrueActivities": [
						{
							"name": "Execute Pipeline1",
							"type": "ExecutePipeline",
							"dependsOn": [],
							"policy": {
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"pipeline": {
									"referenceName": "0_Raw_Horizon_NSIP_Advice",
									"type": "PipelineReference"
								},
								"waitOnCompletion": true
							}
						}
					]
				}
			},
			{
				"name": "Horizon NSP std to Harm",
				"type": "IfCondition",
				"dependsOn": [
					{
						"activity": "Run raw to standard",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@and(equals(variables('Pipeline'),'pln_horizon_nsip_s51_advice'),equals(variables('Stage'), 'Std to Hrm'))",
						"type": "Expression"
					},
					"ifTrueActivities": [
						{
							"name": "Hrz NSP Std to Hrm",
							"type": "SynapseNotebook",
							"dependsOn": [],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"notebook": {
									"referenceName": "casework_nsip_advice_dim_legacy",
									"type": "NotebookReference"
								},
								"snapshot": true,
								"conf": {
									"spark.dynamicAllocation.enabled": null,
									"spark.dynamicAllocation.minExecutors": null,
									"spark.dynamicAllocation.maxExecutors": null
								},
								"numExecutors": null
							}
						}
					]
				}
			},
			{
				"name": "nsip_s51_advice - harm to cur",
				"type": "IfCondition",
				"dependsOn": [
					{
						"activity": "Horizon NSP std to Harm",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@and(equals(variables('Stage'), 'Hrm to Cur'), equals(variables('Pipeline'), 'pln_horizon_nsip_s51_advice'))",
						"type": "Expression"
					},
					"ifTrueActivities": [
						{
							"name": "nsip_s51_advice",
							"type": "SynapseNotebook",
							"dependsOn": [],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"notebook": {
									"referenceName": "nsip_s51_advice",
									"type": "NotebookReference"
								},
								"snapshot": true,
								"conf": {
									"spark.dynamicAllocation.enabled": null,
									"spark.dynamicAllocation.minExecutors": null,
									"spark.dynamicAllocation.maxExecutors": null
								},
								"numExecutors": null
							}
						}
					]
				}
			},
			{
				"name": "Load Horizon Exam Timetable",
				"type": "IfCondition",
				"dependsOn": [
					{
						"activity": "Set properties needed for execution",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@and(equals(variables('Pipeline'), 'pln_horizon_nsip_exam_timetable'), equals(variables('Stage'), 'Src to Raw'))",
						"type": "Expression"
					},
					"ifTrueActivities": [
						{
							"name": "Execute Pipeline2",
							"type": "ExecutePipeline",
							"dependsOn": [],
							"policy": {
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"pipeline": {
									"referenceName": "0_Raw_Horizon_NSIP_Exam_Timetable",
									"type": "PipelineReference"
								},
								"waitOnCompletion": true
							}
						}
					]
				}
			},
			{
				"name": "Exam Timetable - std to Harm",
				"type": "IfCondition",
				"dependsOn": [
					{
						"activity": "Run raw to standard",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@and(equals(variables('Pipeline'),'pln_horizon_nsip_exam_timetable'),equals(variables('Stage'), 'Std to Hrm'))",
						"type": "Expression"
					},
					"ifTrueActivities": [
						{
							"name": "std to hrm",
							"type": "SynapseNotebook",
							"dependsOn": [],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"notebook": {
									"referenceName": "casework_nsip_examination_timetable_dim_legacy",
									"type": "NotebookReference"
								},
								"snapshot": true,
								"conf": {
									"spark.dynamicAllocation.enabled": null,
									"spark.dynamicAllocation.minExecutors": null,
									"spark.dynamicAllocation.maxExecutors": null
								},
								"numExecutors": null
							}
						}
					]
				}
			},
			{
				"name": "Exam - Hrm to Cur",
				"type": "IfCondition",
				"dependsOn": [
					{
						"activity": "Exam Timetable - std to Harm",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@and(equals(variables('Stage'), 'Hrm to Cur'), equals(variables('Pipeline'), 'pln_horizon_nsip_exam_timetable'))",
						"type": "Expression"
					},
					"ifTrueActivities": [
						{
							"name": "hrm to cur",
							"type": "SynapseNotebook",
							"dependsOn": [],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"notebook": {
									"referenceName": "examination_timetable",
									"type": "NotebookReference"
								},
								"snapshot": true,
								"conf": {
									"spark.dynamicAllocation.enabled": null,
									"spark.dynamicAllocation.minExecutors": null,
									"spark.dynamicAllocation.maxExecutors": null
								},
								"numExecutors": null
							}
						}
					]
				}
			},
			{
				"name": "Set source folder",
				"type": "SetVariable",
				"dependsOn": [],
				"policy": {
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"variableName": "source_folder",
					"value": "Horizon"
				}
			},
			{
				"name": "application - Src to Raw",
				"type": "IfCondition",
				"dependsOn": [
					{
						"activity": "Set properties needed for execution",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@and(equals(variables('Pipeline'), 'pln_application_run_stage_Horizon'), equals(variables('Stage'), 'Src to Raw'))",
						"type": "Expression"
					},
					"ifTrueActivities": [
						{
							"name": "Execute Pipeline3",
							"type": "ExecutePipeline",
							"dependsOn": [],
							"policy": {
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"pipeline": {
									"referenceName": "0_Raw_Horizon_NSIP_Data",
									"type": "PipelineReference"
								},
								"waitOnCompletion": true
							}
						}
					]
				}
			},
			{
				"name": "application - std to hrm",
				"type": "IfCondition",
				"dependsOn": [
					{
						"activity": "Run raw to standard",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@and(equals(variables('Pipeline'),'pln_application_run_stage_Horizon'),equals(variables('Stage'), 'Std to Hrm'))",
						"type": "Expression"
					},
					"ifTrueActivities": [
						{
							"name": "casework_nsip_data_dim_legacy",
							"type": "SynapseNotebook",
							"dependsOn": [],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"notebook": {
									"referenceName": "casework_nsip_data_dim_legacy",
									"type": "NotebookReference"
								},
								"snapshot": true,
								"conf": {
									"spark.dynamicAllocation.enabled": null,
									"spark.dynamicAllocation.minExecutors": null,
									"spark.dynamicAllocation.maxExecutors": null
								},
								"numExecutors": null
							}
						}
					]
				}
			},
			{
				"name": "application - hrm to cur",
				"type": "IfCondition",
				"dependsOn": [
					{
						"activity": "application - std to hrm",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@and(equals(variables('Stage'), 'Hrm to Cur'), equals(variables('Pipeline'), 'pln_application_run_stage_Horizon'))",
						"type": "Expression"
					},
					"ifTrueActivities": [
						{
							"name": "nsip_data",
							"type": "SynapseNotebook",
							"dependsOn": [],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"notebook": {
									"referenceName": "nsip_data",
									"type": "NotebookReference"
								},
								"snapshot": true,
								"conf": {
									"spark.dynamicAllocation.enabled": null,
									"spark.dynamicAllocation.minExecutors": null,
									"spark.dynamicAllocation.maxExecutors": null
								},
								"numExecutors": null
							}
						}
					]
				}
			},
			{
				"name": "relevant reps - Source to main",
				"type": "IfCondition",
				"dependsOn": [
					{
						"activity": "Set properties needed for execution",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@and(equals(variables('Pipeline'), 'pln_nsip_relevant_reps_main'), equals(variables('Stage'), 'Src to Raw'))",
						"type": "Expression"
					},
					"ifTrueActivities": [
						{
							"name": "0_Raw_Horizon_NSIP_Relevant_Reps",
							"type": "ExecutePipeline",
							"dependsOn": [],
							"policy": {
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"pipeline": {
									"referenceName": "0_Raw_Horizon_NSIP_Relevant_Reps",
									"type": "PipelineReference"
								},
								"waitOnCompletion": true
							}
						}
					]
				}
			},
			{
				"name": "Relevant reps - std to hrm",
				"type": "IfCondition",
				"dependsOn": [
					{
						"activity": "Run raw to standard",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@and(equals(variables('Pipeline'),'pln_nsip_relevant_reps_main'),equals(variables('Stage'), 'Std to Hrm'))",
						"type": "Expression"
					},
					"ifTrueActivities": [
						{
							"name": "casework_nsip_relevant_representation_dim",
							"type": "SynapseNotebook",
							"dependsOn": [],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"notebook": {
									"referenceName": "casework_nsip_relevant_representation_dim",
									"type": "NotebookReference"
								},
								"snapshot": true,
								"conf": {
									"spark.dynamicAllocation.enabled": null,
									"spark.dynamicAllocation.minExecutors": null,
									"spark.dynamicAllocation.maxExecutors": null
								},
								"numExecutors": null
							}
						}
					]
				}
			},
			{
				"name": "Relevant reps - hrm to cur",
				"type": "IfCondition",
				"dependsOn": [
					{
						"activity": "Relevant reps - std to hrm",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@and(equals(variables('Stage'), 'Hrm to Cur'), equals(variables('Pipeline'), 'pln_nsip_relevant_reps_main'))",
						"type": "Expression"
					},
					"ifTrueActivities": [
						{
							"name": "relevant_representation",
							"type": "SynapseNotebook",
							"dependsOn": [],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"notebook": {
									"referenceName": "nsip_representation",
									"type": "NotebookReference"
								},
								"snapshot": true,
								"conf": {
									"spark.dynamicAllocation.enabled": null,
									"spark.dynamicAllocation.minExecutors": null,
									"spark.dynamicAllocation.maxExecutors": null
								},
								"numExecutors": null
							}
						},
						{
							"name": "nsip_data 3",
							"type": "SynapseNotebook",
							"dependsOn": [
								{
									"activity": "relevant_representation",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"notebook": {
									"referenceName": "nsip_data",
									"type": "NotebookReference"
								},
								"snapshot": true,
								"conf": {
									"spark.dynamicAllocation.enabled": null,
									"spark.dynamicAllocation.minExecutors": null,
									"spark.dynamicAllocation.maxExecutors": null
								},
								"numExecutors": null
							}
						}
					]
				}
			},
			{
				"name": "nsip_project - Src to Raw",
				"type": "IfCondition",
				"dependsOn": [
					{
						"activity": "Set properties needed for execution",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@and(equals(variables('Pipeline'), 'pln_horizon_nsip_project'), equals(variables('Stage'), 'Src to Raw'))",
						"type": "Expression"
					},
					"ifTrueActivities": [
						{
							"name": "0_raw_Horizon_nip_data",
							"type": "ExecutePipeline",
							"dependsOn": [],
							"policy": {
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"pipeline": {
									"referenceName": "0_Raw_Horizon_NSIP_Data",
									"type": "PipelineReference"
								},
								"waitOnCompletion": true
							}
						}
					]
				}
			},
			{
				"name": "nsip project - std to hrm",
				"type": "IfCondition",
				"dependsOn": [
					{
						"activity": "Run raw to standard",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@and(equals(variables('Pipeline'),'pln_horizon_nsip_project'),equals(variables('Stage'), 'Std to Hrm'))",
						"type": "Expression"
					},
					"ifTrueActivities": [
						{
							"name": "casework_nsip_data_dim_legacy 2",
							"type": "SynapseNotebook",
							"dependsOn": [],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"notebook": {
									"referenceName": "casework_nsip_data_dim_legacy",
									"type": "NotebookReference"
								},
								"snapshot": true,
								"conf": {
									"spark.dynamicAllocation.enabled": null,
									"spark.dynamicAllocation.minExecutors": null,
									"spark.dynamicAllocation.maxExecutors": null
								},
								"numExecutors": null
							}
						}
					]
				}
			},
			{
				"name": "nsip project - hrm to cur",
				"type": "IfCondition",
				"dependsOn": [
					{
						"activity": "nsip project - std to hrm",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@and(equals(variables('Stage'), 'Hrm to Cur'), equals(variables('Pipeline'), 'pln_horizon_nsip_project'))",
						"type": "Expression"
					},
					"ifTrueActivities": [
						{
							"name": "nsip_data 2",
							"type": "SynapseNotebook",
							"dependsOn": [],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"notebook": {
									"referenceName": "nsip_data",
									"type": "NotebookReference"
								},
								"snapshot": true,
								"conf": {
									"spark.dynamicAllocation.enabled": null,
									"spark.dynamicAllocation.minExecutors": null,
									"spark.dynamicAllocation.maxExecutors": null
								},
								"numExecutors": null
							}
						}
					]
				}
			}
		],
		"variables": {
			"Stage": {
				"type": "String",
				"defaultValue": "Hrm to Cur"
			},
			"Pipeline": {
				"type": "String",
				"defaultValue": "pln_nsip_relevant_reps_main"
			},
			"entity_name": {
				"type": "String"
			},
			"source_folder": {
				"type": "String"
			},
			"source_frequency_folder": {
				"type": "String"
			},
			"specific_file": {
				"type": "String"
			}
		},
		"folder": {
			"name": "archive/utils/application"
		},
		"annotations": []
	}
}