{
	"name": "0_Horizon_Data_Transfer_Raw",
	"properties": {
		"description": "Connecting to the specialism view in horizon to move the data into the ODW RAW layer",
		"activities": [
			{
				"name": "HZN_Data_Copy_AllAppeals",
				"description": "This pipeline is copying case data from Horizon and storing it in the ODW Raw layer in Parquet format",
				"type": "Copy",
				"dependsOn": [],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [
					{
						"name": "Source",
						"value": "dbo.Horizon_vw_BIS_AllAppeals"
					},
					{
						"name": "Destination",
						"value": "odw-raw/Horizon/BISData"
					}
				],
				"typeProperties": {
					"source": {
						"type": "SqlServerSource",
						"queryTimeout": "02:00:00",
						"isolationLevel": "ReadCommitted",
						"partitionOption": "None"
					},
					"sink": {
						"type": "DelimitedTextSink",
						"storeSettings": {
							"type": "AzureBlobFSWriteSettings"
						},
						"formatSettings": {
							"type": "DelimitedTextWriteSettings",
							"quoteAllText": true,
							"fileExtension": ".txt"
						}
					},
					"enableStaging": false,
					"translator": {
						"type": "TabularTranslator",
						"typeConversion": true,
						"typeConversionSettings": {
							"allowDataTruncation": true,
							"treatBooleanAsNumber": false
						}
					}
				},
				"inputs": [
					{
						"referenceName": "HorizonData_BIS_AllAppeals",
						"type": "DatasetReference"
					}
				],
				"outputs": [
					{
						"referenceName": "HZN_ViewData",
						"type": "DatasetReference",
						"parameters": {
							"FileName": "AllAppeals.csv"
						}
					}
				]
			},
			{
				"name": "HZN_Data_Copy_AppealsAdditionalData",
				"description": "This is connecting to the Horizon AppealsAdditionalData view and loading the data into the RAW ODW Layer as Parquet",
				"type": "Copy",
				"dependsOn": [
					{
						"activity": "HZN_Data_Copy_AllAppeals",
						"dependencyConditions": [
							"Completed"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "SqlServerSource",
						"queryTimeout": "02:00:00",
						"isolationLevel": "ReadCommitted",
						"partitionOption": "None"
					},
					"sink": {
						"type": "DelimitedTextSink",
						"storeSettings": {
							"type": "AzureBlobFSWriteSettings"
						},
						"formatSettings": {
							"type": "DelimitedTextWriteSettings",
							"quoteAllText": true,
							"fileExtension": ".txt"
						}
					},
					"enableStaging": false,
					"translator": {
						"type": "TabularTranslator",
						"mappings": [
							{
								"source": {
									"name": "AppealRefNumber",
									"type": "String",
									"physicalType": "varchar"
								},
								"sink": {
									"name": "AppealRefNumber",
									"type": "String",
									"physicalType": "UTF8"
								}
							},
							{
								"source": {
									"name": "LastModified",
									"type": "DateTime",
									"physicalType": "datetime"
								},
								"sink": {
									"name": "LastModified",
									"type": "DateTime",
									"physicalType": "INT_96"
								}
							},
							{
								"source": {
									"name": "DecisionDate",
									"type": "DateTime",
									"physicalType": "datetime"
								},
								"sink": {
									"name": "DecisionDate",
									"type": "DateTime",
									"physicalType": "INT_96"
								}
							},
							{
								"source": {
									"name": "DecisionSubmitDate",
									"type": "DateTime",
									"physicalType": "datetime"
								},
								"sink": {
									"name": "DecisionSubmitDate",
									"type": "DateTime",
									"physicalType": "INT_96"
								}
							},
							{
								"source": {
									"name": "BespokeIndicator",
									"type": "String",
									"physicalType": "nvarchar"
								},
								"sink": {
									"name": "BespokeIndicator",
									"type": "String",
									"physicalType": "UTF8"
								}
							},
							{
								"source": {
									"name": "BespokeTargetDate",
									"type": "DateTime",
									"physicalType": "datetime"
								},
								"sink": {
									"name": "BespokeTargetDate",
									"type": "DateTime",
									"physicalType": "INT_96"
								}
							},
							{
								"source": {
									"name": "ProcessingState",
									"type": "String",
									"physicalType": "nvarchar"
								},
								"sink": {
									"name": "ProcessingState",
									"type": "String",
									"physicalType": "UTF8"
								}
							},
							{
								"source": {
									"name": "LinkStatus",
									"type": "String",
									"physicalType": "nvarchar"
								},
								"sink": {
									"name": "LinkStatus",
									"type": "String",
									"physicalType": "UTF8"
								}
							},
							{
								"source": {
									"name": "CaseClosedDate",
									"type": "DateTime",
									"physicalType": "datetime"
								},
								"sink": {
									"name": "CaseClosedDate",
									"type": "DateTime",
									"physicalType": "INT_96"
								}
							},
							{
								"source": {
									"name": "Appellant",
									"type": "String",
									"physicalType": "nvarchar"
								},
								"sink": {
									"name": "Appellant",
									"type": "String",
									"physicalType": "UTF8"
								}
							},
							{
								"source": {
									"name": "PCSAppealWithdrawnDate",
									"type": "DateTime",
									"physicalType": "datetime"
								},
								"sink": {
									"name": "PCSAppealWithdrawnDate",
									"type": "DateTime",
									"physicalType": "INT_96"
								}
							},
							{
								"source": {
									"name": "NumberOfResidences",
									"type": "Int32",
									"physicalType": "int"
								},
								"sink": {
									"name": "NumberOfResidences",
									"type": "Int32",
									"physicalType": "INT_32"
								}
							},
							{
								"source": {
									"name": "AppealsDocumentsComplete",
									"type": "DateTime",
									"physicalType": "datetime"
								},
								"sink": {
									"name": "AppealsDocumentsComplete",
									"type": "DateTime",
									"physicalType": "INT_96"
								}
							},
							{
								"source": {
									"name": "QuestionnaireReceived",
									"type": "DateTime",
									"physicalType": "datetime"
								},
								"sink": {
									"name": "QuestionnaireReceived",
									"type": "DateTime",
									"physicalType": "INT_96"
								}
							},
							{
								"source": {
									"name": "LPAConditionsReceived",
									"type": "DateTime",
									"physicalType": "datetime"
								},
								"sink": {
									"name": "LPAConditionsReceived",
									"type": "DateTime",
									"physicalType": "INT_96"
								}
							},
							{
								"source": {
									"name": "LPAConditionsForwarded",
									"type": "DateTime",
									"physicalType": "datetime"
								},
								"sink": {
									"name": "LPAConditionsForwarded",
									"type": "DateTime",
									"physicalType": "INT_96"
								}
							},
							{
								"source": {
									"name": "StatementsDue",
									"type": "DateTime",
									"physicalType": "datetime"
								},
								"sink": {
									"name": "StatementsDue",
									"type": "DateTime",
									"physicalType": "INT_96"
								}
							},
							{
								"source": {
									"name": "LPAStatementSubmitted",
									"type": "DateTime",
									"physicalType": "datetime"
								},
								"sink": {
									"name": "LPAStatementSubmitted",
									"type": "DateTime",
									"physicalType": "INT_96"
								}
							},
							{
								"source": {
									"name": "LPAStatementForwarded",
									"type": "DateTime",
									"physicalType": "datetime"
								},
								"sink": {
									"name": "LPAStatementForwarded",
									"type": "DateTime",
									"physicalType": "INT_96"
								}
							},
							{
								"source": {
									"name": "AppellantStatementSubmitted",
									"type": "DateTime",
									"physicalType": "datetime"
								},
								"sink": {
									"name": "AppellantStatementSubmitted",
									"type": "DateTime",
									"physicalType": "INT_96"
								}
							},
							{
								"source": {
									"name": "AppellantStatementForwarded",
									"type": "DateTime",
									"physicalType": "datetime"
								},
								"sink": {
									"name": "AppellantStatementForwarded",
									"type": "DateTime",
									"physicalType": "INT_96"
								}
							},
							{
								"source": {
									"name": "FinalCommentsDue",
									"type": "DateTime",
									"physicalType": "datetime"
								},
								"sink": {
									"name": "FinalCommentsDue",
									"type": "DateTime",
									"physicalType": "INT_96"
								}
							},
							{
								"source": {
									"name": "LPACommentsSubmitted",
									"type": "DateTime",
									"physicalType": "datetime"
								},
								"sink": {
									"name": "LPACommentsSubmitted",
									"type": "DateTime",
									"physicalType": "INT_96"
								}
							},
							{
								"source": {
									"name": "LPACommentsForwarded",
									"type": "DateTime",
									"physicalType": "datetime"
								},
								"sink": {
									"name": "LPACommentsForwarded",
									"type": "DateTime",
									"physicalType": "INT_96"
								}
							},
							{
								"source": {
									"name": "StatementOfCommonGroundDue",
									"type": "DateTime",
									"physicalType": "datetime"
								},
								"sink": {
									"name": "StatementOfCommonGroundDue",
									"type": "DateTime",
									"physicalType": "INT_96"
								}
							},
							{
								"source": {
									"name": "StatementOfCommonGroundReceived",
									"type": "DateTime",
									"physicalType": "datetime"
								},
								"sink": {
									"name": "StatementOfCommonGroundReceived",
									"type": "DateTime",
									"physicalType": "INT_96"
								}
							},
							{
								"source": {
									"name": "AppellantCommentsSubmitted",
									"type": "DateTime",
									"physicalType": "datetime"
								},
								"sink": {
									"name": "AppellantCommentsSubmitted",
									"type": "DateTime",
									"physicalType": "INT_96"
								}
							},
							{
								"source": {
									"name": "AppellantCommentsForwarded",
									"type": "DateTime",
									"physicalType": "datetime"
								},
								"sink": {
									"name": "AppellantCommentsForwarded",
									"type": "DateTime",
									"physicalType": "INT_96"
								}
							},
							{
								"source": {
									"name": "ThirdPartyRepsDue",
									"type": "DateTime",
									"physicalType": "datetime"
								},
								"sink": {
									"name": "ThirdPartyRepsDue",
									"type": "DateTime",
									"physicalType": "INT_96"
								}
							},
							{
								"source": {
									"name": "ThirdPartyRepsForwarded",
									"type": "DateTime",
									"physicalType": "datetime"
								},
								"sink": {
									"name": "ThirdPartyRepsForwarded",
									"type": "DateTime",
									"physicalType": "INT_96"
								}
							},
							{
								"source": {
									"name": "SiteNoticeSent",
									"type": "DateTime",
									"physicalType": "datetime"
								},
								"sink": {
									"name": "SiteNoticeSent",
									"type": "DateTime",
									"physicalType": "INT_96"
								}
							},
							{
								"source": {
									"name": "ProofsDue",
									"type": "DateTime",
									"physicalType": "datetime"
								},
								"sink": {
									"name": "ProofsDue",
									"type": "DateTime",
									"physicalType": "INT_96"
								}
							},
							{
								"source": {
									"name": "LPAProofsSubmitted",
									"type": "DateTime",
									"physicalType": "datetime"
								},
								"sink": {
									"name": "LPAProofsSubmitted",
									"type": "DateTime",
									"physicalType": "INT_96"
								}
							},
							{
								"source": {
									"name": "LPAProofsForwarded",
									"type": "DateTime",
									"physicalType": "datetime"
								},
								"sink": {
									"name": "LPAProofsForwarded",
									"type": "DateTime",
									"physicalType": "INT_96"
								}
							},
							{
								"source": {
									"name": "AppellantsProofsSubmitted",
									"type": "DateTime",
									"physicalType": "datetime"
								},
								"sink": {
									"name": "AppellantsProofsSubmitted",
									"type": "DateTime",
									"physicalType": "INT_96"
								}
							},
							{
								"source": {
									"name": "AppellantsProofsForwarded",
									"type": "DateTime",
									"physicalType": "datetime"
								},
								"sink": {
									"name": "AppellantsProofsForwarded",
									"type": "DateTime",
									"physicalType": "INT_96"
								}
							},
							{
								"source": {
									"name": "AreaOfSiteInHectares",
									"type": "String",
									"physicalType": "nvarchar"
								},
								"sink": {
									"name": "AreaOfSiteInHectares",
									"type": "String",
									"physicalType": "UTF8"
								}
							},
							{
								"source": {
									"name": "DateOfDecisionIfIssued",
									"type": "DateTime",
									"physicalType": "datetime"
								},
								"sink": {
									"name": "DateOfDecisionIfIssued",
									"type": "DateTime",
									"physicalType": "INT_96"
								}
							},
							{
								"source": {
									"name": "TypeOfApplication",
									"type": "String",
									"physicalType": "nvarchar"
								},
								"sink": {
									"name": "TypeOfApplication",
									"type": "String",
									"physicalType": "UTF8"
								}
							},
							{
								"source": {
									"name": "AppealSourceIndicator",
									"type": "String",
									"physicalType": "nvarchar"
								},
								"sink": {
									"name": "AppealSourceIndicator",
									"type": "String",
									"physicalType": "UTF8"
								}
							},
							{
								"source": {
									"name": "DevelopmentOrAllegation",
									"type": "String",
									"physicalType": "varchar"
								},
								"sink": {
									"name": "DevelopmentOrAllegation",
									"type": "String",
									"physicalType": "UTF8"
								}
							},
							{
								"source": {
									"name": "SiteAddress1",
									"type": "String",
									"physicalType": "nvarchar"
								},
								"sink": {
									"name": "SiteAddress1",
									"type": "String",
									"physicalType": "UTF8"
								}
							},
							{
								"source": {
									"name": "SiteAddress2",
									"type": "String",
									"physicalType": "nvarchar"
								},
								"sink": {
									"name": "SiteAddress2",
									"type": "String",
									"physicalType": "UTF8"
								}
							},
							{
								"source": {
									"name": "SiteTown",
									"type": "String",
									"physicalType": "nvarchar"
								},
								"sink": {
									"name": "SiteTown",
									"type": "String",
									"physicalType": "UTF8"
								}
							},
							{
								"source": {
									"name": "SiteCounty",
									"type": "String",
									"physicalType": "nvarchar"
								},
								"sink": {
									"name": "SiteCounty",
									"type": "String",
									"physicalType": "UTF8"
								}
							},
							{
								"source": {
									"name": "SiteCountry",
									"type": "String",
									"physicalType": "nvarchar"
								},
								"sink": {
									"name": "SiteCountry",
									"type": "String",
									"physicalType": "UTF8"
								}
							},
							{
								"source": {
									"name": "SitePostCode",
									"type": "String",
									"physicalType": "nvarchar"
								},
								"sink": {
									"name": "SitePostCode",
									"type": "String",
									"physicalType": "UTF8"
								}
							},
							{
								"source": {
									"name": "AbeyanceEndDate",
									"type": "DateTime",
									"physicalType": "datetime"
								},
								"sink": {
									"name": "AbeyanceEndDate",
									"type": "DateTime",
									"physicalType": "INT_96"
								}
							},
							{
								"source": {
									"name": "AmountDue",
									"type": "String",
									"physicalType": "nvarchar"
								},
								"sink": {
									"name": "AmountDue",
									"type": "String",
									"physicalType": "UTF8"
								}
							},
							{
								"source": {
									"name": "Name",
									"type": "String",
									"physicalType": "varchar"
								},
								"sink": {
									"name": "Name",
									"type": "String",
									"physicalType": "UTF8"
								}
							},
							{
								"source": {
									"name": "SiteGreenBelt",
									"type": "String",
									"physicalType": "nvarchar"
								},
								"sink": {
									"name": "SiteGreenBelt",
									"type": "String",
									"physicalType": "UTF8"
								}
							},
							{
								"source": {
									"name": "LPAApplicationReference",
									"type": "String",
									"physicalType": "nvarchar"
								},
								"sink": {
									"name": "LPAApplicationReference",
									"type": "String",
									"physicalType": "UTF8"
								}
							},
							{
								"source": {
									"name": "LPAApplicationDate",
									"type": "DateTime",
									"physicalType": "datetime"
								},
								"sink": {
									"name": "LPAApplicationDate",
									"type": "DateTime",
									"physicalType": "INT_96"
								}
							},
							{
								"source": {
									"name": "DateNotRecoveredorDeRecovered",
									"type": "DateTime",
									"physicalType": "datetime"
								},
								"sink": {
									"name": "DateNotRecoveredorDeRecovered",
									"type": "DateTime",
									"physicalType": "INT_96"
								}
							},
							{
								"source": {
									"name": "DateRecovered",
									"type": "DateTime",
									"physicalType": "datetime"
								},
								"sink": {
									"name": "DateRecovered",
									"type": "DateTime",
									"physicalType": "INT_96"
								}
							},
							{
								"source": {
									"name": "CallInDate",
									"type": "DateTime",
									"physicalType": "datetime"
								},
								"sink": {
									"name": "CallInDate",
									"type": "DateTime",
									"physicalType": "INT_96"
								}
							},
							{
								"source": {
									"name": "EnglandWalesIndicator",
									"type": "String",
									"physicalType": "nvarchar"
								},
								"sink": {
									"name": "EnglandWalesIndicator",
									"type": "String",
									"physicalType": "UTF8"
								}
							}
						],
						"typeConversion": true,
						"typeConversionSettings": {
							"allowDataTruncation": true,
							"treatBooleanAsNumber": false
						}
					}
				},
				"inputs": [
					{
						"referenceName": "BIS_HZN_AppealsAddtionalData",
						"type": "DatasetReference"
					}
				],
				"outputs": [
					{
						"referenceName": "HZN_ViewData",
						"type": "DatasetReference",
						"parameters": {
							"FileName": "AppealsAdditionalData.csv"
						}
					}
				]
			},
			{
				"name": "HZN_Data_Copy_AddAdditionalData",
				"description": "This is connecting to the Horizon AddAdditionalData view and loading the data into the RAW ODW Layer as Parquet",
				"type": "Copy",
				"dependsOn": [
					{
						"activity": "HZN_Data_Copy_AppealsAdditionalData",
						"dependencyConditions": [
							"Completed"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "SqlServerSource",
						"queryTimeout": "02:00:00",
						"isolationLevel": "ReadCommitted",
						"partitionOption": "None"
					},
					"sink": {
						"type": "DelimitedTextSink",
						"storeSettings": {
							"type": "AzureBlobFSWriteSettings"
						},
						"formatSettings": {
							"type": "DelimitedTextWriteSettings",
							"quoteAllText": true,
							"fileExtension": ".txt"
						}
					},
					"enableStaging": false,
					"translator": {
						"type": "TabularTranslator",
						"mappings": [
							{
								"source": {
									"name": "AppealRefNumber",
									"type": "String",
									"physicalType": "varchar"
								},
								"sink": {
									"name": "AppealRefNumber",
									"type": "String",
									"physicalType": "UTF8"
								}
							},
							{
								"source": {
									"name": "CaseProcess",
									"type": "String",
									"physicalType": "nvarchar"
								},
								"sink": {
									"name": "CaseProcess",
									"type": "String",
									"physicalType": "UTF8"
								}
							},
							{
								"source": {
									"name": "CaseworkMarker",
									"type": "String",
									"physicalType": "nvarchar"
								},
								"sink": {
									"name": "CaseworkMarker",
									"type": "String",
									"physicalType": "UTF8"
								}
							},
							{
								"source": {
									"name": "CostsAppliedForIndicator",
									"type": "String",
									"physicalType": "nvarchar"
								},
								"sink": {
									"name": "CostsAppliedForIndicator",
									"type": "String",
									"physicalType": "UTF8"
								}
							},
							{
								"source": {
									"name": "Level",
									"type": "String",
									"physicalType": "nvarchar"
								},
								"sink": {
									"name": "Level",
									"type": "String",
									"physicalType": "UTF8"
								}
							},
							{
								"source": {
									"name": "ProcedureAppellant",
									"type": "String",
									"physicalType": "nvarchar"
								},
								"sink": {
									"name": "ProcedureAppellant",
									"type": "String",
									"physicalType": "UTF8"
								}
							},
							{
								"source": {
									"name": "ProcedureLPA",
									"type": "String",
									"physicalType": "nvarchar"
								},
								"sink": {
									"name": "ProcedureLPA",
									"type": "String",
									"physicalType": "UTF8"
								}
							},
							{
								"source": {
									"name": "ProcedureDeterminedDate",
									"type": "DateTime",
									"physicalType": "datetime"
								},
								"sink": {
									"name": "ProcedureDeterminedDate",
									"type": "DateTime",
									"physicalType": "INT_96"
								}
							},
							{
								"source": {
									"name": "TargetDate",
									"type": "DateTime",
									"physicalType": "datetime"
								},
								"sink": {
									"name": "TargetDate",
									"type": "DateTime",
									"physicalType": "INT_96"
								}
							},
							{
								"source": {
									"name": "AgriculturalHolding",
									"type": "String",
									"physicalType": "nvarchar"
								},
								"sink": {
									"name": "AgriculturalHolding",
									"type": "String",
									"physicalType": "UTF8"
								}
							},
							{
								"source": {
									"name": "DevelopmentAffectSettingOfListedBuilding",
									"type": "String",
									"physicalType": "nvarchar"
								},
								"sink": {
									"name": "DevelopmentAffectSettingOfListedBuilding",
									"type": "String",
									"physicalType": "UTF8"
								}
							},
							{
								"source": {
									"name": "FloorSpaceInSquareMetres",
									"type": "Int32",
									"physicalType": "int"
								},
								"sink": {
									"name": "FloorSpaceInSquareMetres",
									"type": "Int32",
									"physicalType": "INT_32"
								}
							},
							{
								"source": {
									"name": "SiteGridReferenceEasting",
									"type": "String",
									"physicalType": "nvarchar"
								},
								"sink": {
									"name": "SiteGridReferenceEasting",
									"type": "String",
									"physicalType": "UTF8"
								}
							},
							{
								"source": {
									"name": "SiteGridReferenceNorthing",
									"type": "String",
									"physicalType": "nvarchar"
								},
								"sink": {
									"name": "SiteGridReferenceNorthing",
									"type": "String",
									"physicalType": "UTF8"
								}
							},
							{
								"source": {
									"name": "HistoricBuildingGrantMade",
									"type": "String",
									"physicalType": "nvarchar"
								},
								"sink": {
									"name": "HistoricBuildingGrantMade",
									"type": "String",
									"physicalType": "UTF8"
								}
							},
							{
								"source": {
									"name": "InCARelatesToCA",
									"type": "String",
									"physicalType": "nvarchar"
								},
								"sink": {
									"name": "InCARelatesToCA",
									"type": "String",
									"physicalType": "UTF8"
								}
							},
							{
								"source": {
									"name": "InspectorNeedToEnterSite",
									"type": "String",
									"physicalType": "nvarchar"
								},
								"sink": {
									"name": "InspectorNeedToEnterSite",
									"type": "String",
									"physicalType": "UTF8"
								}
							},
							{
								"source": {
									"name": "IsFloodingAnIssue",
									"type": "String",
									"physicalType": "nvarchar"
								},
								"sink": {
									"name": "IsFloodingAnIssue",
									"type": "String",
									"physicalType": "UTF8"
								}
							},
							{
								"source": {
									"name": "IsTheSiteWithinAnAONB",
									"type": "String",
									"physicalType": "nvarchar"
								},
								"sink": {
									"name": "IsTheSiteWithinAnAONB",
									"type": "String",
									"physicalType": "UTF8"
								}
							},
							{
								"source": {
									"name": "SiteWithinSSSI",
									"type": "String",
									"physicalType": "nvarchar"
								},
								"sink": {
									"name": "SiteWithinSSSI",
									"type": "String",
									"physicalType": "UTF8"
								}
							}
						],
						"typeConversion": true,
						"typeConversionSettings": {
							"allowDataTruncation": true,
							"treatBooleanAsNumber": false
						}
					}
				},
				"inputs": [
					{
						"referenceName": "BIS_AddAdditionalData",
						"type": "DatasetReference"
					}
				],
				"outputs": [
					{
						"referenceName": "HZN_ViewData",
						"type": "DatasetReference",
						"parameters": {
							"FileName": "AddAdditionalData.csv"
						}
					}
				]
			},
			{
				"name": "HZN_Data_Copy_AdvertDetails",
				"description": "This is connecting to the Horizon AdvertDetails view and loading the data into the RAW ODW Layer as Parquet",
				"type": "Copy",
				"dependsOn": [
					{
						"activity": "HZN_Data_Copy_AddAdditionalData",
						"dependencyConditions": [
							"Completed"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "SqlServerSource",
						"queryTimeout": "02:00:00",
						"isolationLevel": "ReadCommitted",
						"partitionOption": "None"
					},
					"sink": {
						"type": "DelimitedTextSink",
						"storeSettings": {
							"type": "AzureBlobFSWriteSettings"
						},
						"formatSettings": {
							"type": "DelimitedTextWriteSettings",
							"quoteAllText": true,
							"fileExtension": ".txt"
						}
					},
					"enableStaging": false,
					"translator": {
						"type": "TabularTranslator",
						"mappings": [
							{
								"source": {
									"name": "AppealRefNumber",
									"type": "String",
									"physicalType": "varchar"
								},
								"sink": {
									"name": "AppealRefNumber",
									"type": "String",
									"physicalType": "UTF8"
								}
							},
							{
								"source": {
									"name": "LastModified",
									"type": "DateTime",
									"physicalType": "datetime"
								},
								"sink": {
									"name": "LastModified",
									"type": "DateTime",
									"physicalType": "INT_96"
								}
							},
							{
								"source": {
									"name": "SignCategory",
									"type": "String",
									"physicalType": "nvarchar"
								},
								"sink": {
									"name": "SignCategory",
									"type": "String",
									"physicalType": "UTF8"
								}
							},
							{
								"source": {
									"name": "ReasonPublicSafety",
									"type": "String",
									"physicalType": "nvarchar"
								},
								"sink": {
									"name": "ReasonPublicSafety",
									"type": "String",
									"physicalType": "UTF8"
								}
							},
							{
								"source": {
									"name": "ReasonAmenity",
									"type": "String",
									"physicalType": "nvarchar"
								},
								"sink": {
									"name": "ReasonAmenity",
									"type": "String",
									"physicalType": "UTF8"
								}
							},
							{
								"source": {
									"name": "OutcomePublicSafety",
									"type": "String",
									"physicalType": "nvarchar"
								},
								"sink": {
									"name": "OutcomePublicSafety",
									"type": "String",
									"physicalType": "UTF8"
								}
							},
							{
								"source": {
									"name": "OutcomeAmenity",
									"type": "String",
									"physicalType": "nvarchar"
								},
								"sink": {
									"name": "OutcomeAmenity",
									"type": "String",
									"physicalType": "UTF8"
								}
							},
							{
								"source": {
									"name": "SignDescription",
									"type": "String",
									"physicalType": "nvarchar"
								},
								"sink": {
									"name": "SignDescription",
									"type": "String",
									"physicalType": "UTF8"
								}
							}
						],
						"typeConversion": true,
						"typeConversionSettings": {
							"allowDataTruncation": true,
							"treatBooleanAsNumber": false
						}
					}
				},
				"inputs": [
					{
						"referenceName": "Hzn_AdvertDetails",
						"type": "DatasetReference"
					}
				],
				"outputs": [
					{
						"referenceName": "HZN_ViewData",
						"type": "DatasetReference",
						"parameters": {
							"FileName": "AdvertDetails.csv"
						}
					}
				]
			},
			{
				"name": "HZN_Data_Copy_LPAResponsibility",
				"description": "This is connecting to the Horizon LPAResponsibility view and loading the data into the RAW ODW Layer as Parquet",
				"type": "Copy",
				"dependsOn": [
					{
						"activity": "HZN_Data_Copy_AdvertDetails",
						"dependencyConditions": [
							"Completed"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "SqlServerSource",
						"queryTimeout": "02:00:00",
						"isolationLevel": "ReadCommitted",
						"partitionOption": "None"
					},
					"sink": {
						"type": "DelimitedTextSink",
						"storeSettings": {
							"type": "AzureBlobFSWriteSettings"
						},
						"formatSettings": {
							"type": "DelimitedTextWriteSettings",
							"quoteAllText": true,
							"fileExtension": ".txt"
						}
					},
					"enableStaging": false,
					"translator": {
						"type": "TabularTranslator",
						"mappings": [
							{
								"source": {
									"name": "LPACode",
									"type": "String",
									"physicalType": "nvarchar"
								},
								"sink": {
									"name": "LPACode",
									"type": "String",
									"physicalType": "UTF8"
								}
							},
							{
								"source": {
									"name": "LPAName",
									"type": "String",
									"physicalType": "nvarchar"
								},
								"sink": {
									"name": "LPAName",
									"type": "String",
									"physicalType": "UTF8"
								}
							},
							{
								"source": {
									"name": "AppealType",
									"type": "String",
									"physicalType": "varchar"
								},
								"sink": {
									"name": "AppealType",
									"type": "String",
									"physicalType": "UTF8"
								}
							},
							{
								"source": {
									"name": "Login",
									"type": "String",
									"physicalType": "nvarchar"
								},
								"sink": {
									"name": "Login",
									"type": "String",
									"physicalType": "UTF8"
								}
							},
							{
								"source": {
									"name": "EmployeeId",
									"type": "Int32",
									"physicalType": "int"
								},
								"sink": {
									"name": "EmployeeId",
									"type": "Int32",
									"physicalType": "INT_32"
								}
							},
							{
								"source": {
									"name": "CaseOfficerName",
									"type": "String",
									"physicalType": "nvarchar"
								},
								"sink": {
									"name": "CaseOfficerName",
									"type": "String",
									"physicalType": "UTF8"
								}
							},
							{
								"source": {
									"name": "Workflow",
									"type": "Int32",
									"physicalType": "int"
								},
								"sink": {
									"name": "Workflow",
									"type": "Int32",
									"physicalType": "INT_32"
								}
							}
						],
						"typeConversion": true,
						"typeConversionSettings": {
							"allowDataTruncation": true,
							"treatBooleanAsNumber": false
						}
					}
				},
				"inputs": [
					{
						"referenceName": "HZN_LPARResponsability",
						"type": "DatasetReference"
					}
				],
				"outputs": [
					{
						"referenceName": "HZN_ViewData",
						"type": "DatasetReference",
						"parameters": {
							"FileName": "LPAResponsibility.csv"
						}
					}
				]
			},
			{
				"name": "HZN_Data_Copy_DecisionIssues",
				"description": "This is connecting to the Horizon DecisionIssues view and loading the data into the RAW ODW Layer as Parquet",
				"type": "Copy",
				"dependsOn": [
					{
						"activity": "HZN_Data_Copy_LPAResponsibility",
						"dependencyConditions": [
							"Completed"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "SqlServerSource",
						"queryTimeout": "02:00:00",
						"isolationLevel": "ReadCommitted",
						"partitionOption": "None"
					},
					"sink": {
						"type": "DelimitedTextSink",
						"storeSettings": {
							"type": "AzureBlobFSWriteSettings"
						},
						"formatSettings": {
							"type": "DelimitedTextWriteSettings",
							"quoteAllText": true,
							"fileExtension": ".txt"
						}
					},
					"enableStaging": false,
					"translator": {
						"type": "TabularTranslator",
						"mappings": [
							{
								"source": {
									"name": "AppealRefNumber",
									"type": "String",
									"physicalType": "varchar"
								},
								"sink": {
									"name": "AppealRefNumber",
									"type": "String",
									"physicalType": "UTF8"
								}
							},
							{
								"source": {
									"name": "LastModified",
									"type": "DateTime",
									"physicalType": "datetime"
								},
								"sink": {
									"name": "LastModified",
									"type": "DateTime",
									"physicalType": "INT_96"
								}
							},
							{
								"source": {
									"name": "DecisionIssue",
									"type": "String",
									"physicalType": "nvarchar"
								},
								"sink": {
									"name": "DecisionIssue",
									"type": "String",
									"physicalType": "UTF8"
								}
							}
						],
						"typeConversion": true,
						"typeConversionSettings": {
							"allowDataTruncation": true,
							"treatBooleanAsNumber": false
						}
					}
				},
				"inputs": [
					{
						"referenceName": "HZN_BIS_DecisionIssues",
						"type": "DatasetReference"
					}
				],
				"outputs": [
					{
						"referenceName": "HZN_ViewData",
						"type": "DatasetReference",
						"parameters": {
							"FileName": "DecisionIssues.csv"
						}
					}
				]
			},
			{
				"name": "HZN_Data_Copy_EnforcementGroundsForAppeal",
				"description": "This is connecting to the Horizon EnforcementGroundsForAppeal view and loading the data into the RAW ODW Layer as Parquet",
				"type": "Copy",
				"dependsOn": [
					{
						"activity": "HZN_Data_Copy_DecisionIssues",
						"dependencyConditions": [
							"Completed"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "SqlServerSource",
						"queryTimeout": "02:00:00",
						"isolationLevel": "ReadCommitted",
						"partitionOption": "None"
					},
					"sink": {
						"type": "DelimitedTextSink",
						"storeSettings": {
							"type": "AzureBlobFSWriteSettings"
						},
						"formatSettings": {
							"type": "DelimitedTextWriteSettings",
							"quoteAllText": true,
							"fileExtension": ".txt"
						}
					},
					"enableStaging": false,
					"translator": {
						"type": "TabularTranslator",
						"mappings": [
							{
								"source": {
									"name": "AppealRefNumber",
									"type": "String",
									"physicalType": "varchar"
								},
								"sink": {
									"name": "AppealRefNumber",
									"type": "String",
									"physicalType": "UTF8"
								}
							},
							{
								"source": {
									"name": "LastModified",
									"type": "DateTime",
									"physicalType": "datetime"
								},
								"sink": {
									"name": "LastModified",
									"type": "DateTime",
									"physicalType": "INT_96"
								}
							},
							{
								"source": {
									"name": "GroundForAppeal",
									"type": "String",
									"physicalType": "nvarchar"
								},
								"sink": {
									"name": "GroundForAppeal",
									"type": "String",
									"physicalType": "UTF8"
								}
							},
							{
								"source": {
									"name": "GroundLetter",
									"type": "String",
									"physicalType": "nvarchar"
								},
								"sink": {
									"name": "GroundLetter",
									"type": "String",
									"physicalType": "UTF8"
								}
							},
							{
								"source": {
									"name": "GroundforAppealStartDate",
									"type": "DateTime",
									"physicalType": "datetime"
								},
								"sink": {
									"name": "GroundforAppealStartDate",
									"type": "DateTime",
									"physicalType": "INT_96"
								}
							}
						],
						"typeConversion": true,
						"typeConversionSettings": {
							"allowDataTruncation": true,
							"treatBooleanAsNumber": false
						}
					}
				},
				"inputs": [
					{
						"referenceName": "HZN_EnforcementGroundsForAppeal",
						"type": "DatasetReference"
					}
				],
				"outputs": [
					{
						"referenceName": "HZN_ViewData",
						"type": "DatasetReference",
						"parameters": {
							"FileName": "EnforcementGroundsForAppeal.csv"
						}
					}
				]
			},
			{
				"name": "All_Appeals_Data_Copy_Failure",
				"description": "The copy activity from Horizon has failed",
				"type": "Fail",
				"dependsOn": [
					{
						"activity": "HZN_Data_Copy_AllAppeals",
						"dependencyConditions": [
							"Failed"
						]
					}
				],
				"userProperties": [
					{
						"name": "Michael Cross",
						"value": "michael.cross@planninginspectorate.gov.uk"
					}
				],
				"typeProperties": {
					"message": "All Appeals copy to Raw has failed",
					"errorCode": "HZN_Data_Copy_AllAppeals"
				}
			},
			{
				"name": "AppealsAdditionalData_Data_Copy_Failure",
				"description": "The copy activity from Horizon has failed",
				"type": "Fail",
				"dependsOn": [
					{
						"activity": "HZN_Data_Copy_AppealsAdditionalData",
						"dependencyConditions": [
							"Failed"
						]
					}
				],
				"userProperties": [
					{
						"name": "Michael Cross",
						"value": "michael.cross@planninginspectorate.gov.uk"
					}
				],
				"typeProperties": {
					"message": "AppealsAdditionalData copy to Raw has failed",
					"errorCode": "HZN_Data_Copy_AppealsAdditionalData"
				}
			},
			{
				"name": "AddAdditional_Data_Copy_Failure",
				"description": "The copy activity from Horizon has failed",
				"type": "Fail",
				"dependsOn": [
					{
						"activity": "HZN_Data_Copy_AddAdditionalData",
						"dependencyConditions": [
							"Failed"
						]
					}
				],
				"userProperties": [
					{
						"name": "Michael Cross",
						"value": "michael.cross@planninginspectorate.gov.uk"
					}
				],
				"typeProperties": {
					"message": "AddAdditionalData copy to Raw has failed",
					"errorCode": "HZN_Copy_Data_AddAdditionalData"
				}
			},
			{
				"name": "AdvertDetails_Data_Copy_Failure",
				"description": "The copy activity from Horizon has failed",
				"type": "Fail",
				"dependsOn": [
					{
						"activity": "HZN_Data_Copy_AdvertDetails",
						"dependencyConditions": [
							"Failed"
						]
					}
				],
				"userProperties": [
					{
						"name": "Michael Cross",
						"value": "michael.cross@planninginspectorate.gov.uk"
					}
				],
				"typeProperties": {
					"message": "AdvertDetails copy activity to raw has failed",
					"errorCode": "HZN_Data_Copy_AdvertDetails"
				}
			},
			{
				"name": "LPAResponsibility_Data_Copy_Failure",
				"description": "The copy activity from Horizon has failed",
				"type": "Fail",
				"dependsOn": [
					{
						"activity": "HZN_Data_Copy_LPAResponsibility",
						"dependencyConditions": [
							"Failed"
						]
					}
				],
				"userProperties": [
					{
						"name": "Michael Cross",
						"value": "michael.cross@planninginspectorate.gov.uk"
					}
				],
				"typeProperties": {
					"message": "LPAResponsibility copy activity to raw has failed",
					"errorCode": "HZN_Data_Copy_LPAResponsibility"
				}
			},
			{
				"name": "DecisionIssues_Data_Copy_Failure",
				"description": "The copy activity from Horizon has failed",
				"type": "Fail",
				"dependsOn": [
					{
						"activity": "HZN_Data_Copy_DecisionIssues",
						"dependencyConditions": [
							"Failed"
						]
					}
				],
				"userProperties": [
					{
						"name": "Michael Cross",
						"value": "michael.cross@planninginspectorate.gov.uk"
					}
				],
				"typeProperties": {
					"message": "DecisionIssues copy activity to raw has failed",
					"errorCode": "HZN_Data_Copy_DecisionIssues"
				}
			},
			{
				"name": "EnforcementGroundsForAppeal_Data_Copy_Failure",
				"description": "The copy activity from Horizon has failed",
				"type": "Fail",
				"dependsOn": [
					{
						"activity": "HZN_Data_Copy_EnforcementGroundsForAppeal",
						"dependencyConditions": [
							"Failed"
						]
					}
				],
				"userProperties": [
					{
						"name": "Michael Cross",
						"value": "michael.cross@planninginspectorate.gov.uk"
					}
				],
				"typeProperties": {
					"message": "EnforcementGroundsForAppeal copy activity to raw has failed",
					"errorCode": "HZN_Data_Copy_EnforcementGroundsForAppeal"
				}
			},
			{
				"name": "HZN_Data_Copy_SpecialCircumstance",
				"description": "This is connecting to the Horizon SpecialCircumstance view and loading the data into the RAW ODW Layer as Parquet",
				"type": "Copy",
				"dependsOn": [
					{
						"activity": "HZN_Data_Copy_EnforcementGroundsForAppeal",
						"dependencyConditions": [
							"Completed"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "SqlServerSource",
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"sink": {
						"type": "DelimitedTextSink",
						"storeSettings": {
							"type": "AzureBlobFSWriteSettings"
						},
						"formatSettings": {
							"type": "DelimitedTextWriteSettings",
							"quoteAllText": true,
							"fileExtension": ".txt"
						}
					},
					"enableStaging": false,
					"translator": {
						"type": "TabularTranslator",
						"mappings": [
							{
								"source": {
									"name": "AppealRefNumber",
									"type": "String",
									"physicalType": "varchar"
								},
								"sink": {
									"name": "AppealRefNumber",
									"type": "String",
									"physicalType": "UTF8"
								}
							},
							{
								"source": {
									"name": "LastModified",
									"type": "DateTime",
									"physicalType": "datetime"
								},
								"sink": {
									"name": "LastModified",
									"type": "DateTime",
									"physicalType": "INT_96"
								}
							},
							{
								"source": {
									"name": "SpecialCircumstance",
									"type": "String",
									"physicalType": "nvarchar"
								},
								"sink": {
									"name": "SpecialCircumstance",
									"type": "String",
									"physicalType": "UTF8"
								}
							}
						],
						"typeConversion": true,
						"typeConversionSettings": {
							"allowDataTruncation": true,
							"treatBooleanAsNumber": false
						}
					}
				},
				"inputs": [
					{
						"referenceName": "HZNSpecialCircumstance",
						"type": "DatasetReference"
					}
				],
				"outputs": [
					{
						"referenceName": "HZN_ViewData",
						"type": "DatasetReference",
						"parameters": {
							"FileName": "SpecialCircumstance.csv"
						}
					}
				]
			},
			{
				"name": "SpecialCircumstance_Data_Copy_Failure",
				"description": "SpecialCircumstance has failed to copy from Horizon to RAW",
				"type": "Fail",
				"dependsOn": [
					{
						"activity": "HZN_Data_Copy_SpecialCircumstance",
						"dependencyConditions": [
							"Failed"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"message": "SpecialCircumstance copy activity to raw has failed",
					"errorCode": "HZN_Data_Copy_SpecialCircumstance"
				}
			},
			{
				"name": "HZN_Data_Copy_Specialism",
				"description": "This is connecting to the Horizon Specialismview and loading the data into the RAW ODW Layer as Parquet",
				"type": "Copy",
				"dependsOn": [
					{
						"activity": "HZN_Data_Copy_SpecialCircumstance",
						"dependencyConditions": [
							"Completed"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "SqlServerSource",
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"sink": {
						"type": "DelimitedTextSink",
						"storeSettings": {
							"type": "AzureBlobFSWriteSettings"
						},
						"formatSettings": {
							"type": "DelimitedTextWriteSettings",
							"quoteAllText": true,
							"fileExtension": ".txt"
						}
					},
					"enableStaging": false,
					"translator": {
						"type": "TabularTranslator",
						"mappings": [
							{
								"source": {
									"name": "AppealRefNumber",
									"type": "String",
									"physicalType": "varchar"
								},
								"sink": {
									"name": "AppealRefNumber",
									"type": "String",
									"physicalType": "UTF8"
								}
							},
							{
								"source": {
									"name": "LastModified",
									"type": "DateTime",
									"physicalType": "datetime"
								},
								"sink": {
									"name": "LastModified",
									"type": "DateTime",
									"physicalType": "INT_96"
								}
							},
							{
								"source": {
									"name": "Specialism",
									"type": "String",
									"physicalType": "nvarchar"
								},
								"sink": {
									"name": "Specialism",
									"type": "String",
									"physicalType": "UTF8"
								}
							}
						],
						"typeConversion": true,
						"typeConversionSettings": {
							"allowDataTruncation": true,
							"treatBooleanAsNumber": false
						}
					}
				},
				"inputs": [
					{
						"referenceName": "HZNSpecialism",
						"type": "DatasetReference"
					}
				],
				"outputs": [
					{
						"referenceName": "HZN_ViewData",
						"type": "DatasetReference",
						"parameters": {
							"FileName": "Specialism.csv"
						}
					}
				]
			},
			{
				"name": "Specialism_Data_Copy_Failure",
				"description": " Specialism view loading into the RAW ODW Layer as Parquet has failed",
				"type": "Fail",
				"dependsOn": [
					{
						"activity": "HZN_Data_Copy_Specialism",
						"dependencyConditions": [
							"Failed"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"message": "The Horizon Specialism load to RAW has failed",
					"errorCode": "HZN_Data_Copy_Specialism"
				}
			},
			{
				"name": "Logging Failed Activities",
				"type": "SynapseNotebook",
				"dependsOn": [
					{
						"activity": "All_Appeals_Data_Copy_Failure",
						"dependencyConditions": [
							"Completed"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"notebook": {
						"referenceName": "py_fail_activity_logging",
						"type": "NotebookReference"
					},
					"parameters": {
						"output": {
							"value": {
								"value": "@activity('All_Appeals_Data_Copy_Failure').output.message",
								"type": "Expression"
							},
							"type": "string"
						}
					},
					"snapshot": true,
					"conf": {
						"spark.dynamicAllocation.enabled": null,
						"spark.dynamicAllocation.minExecutors": null,
						"spark.dynamicAllocation.maxExecutors": null
					},
					"numExecutors": null
				}
			},
			{
				"name": "Logging Failed Activities-2",
				"type": "SynapseNotebook",
				"dependsOn": [
					{
						"activity": "AppealsAdditionalData_Data_Copy_Failure",
						"dependencyConditions": [
							"Completed"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"notebook": {
						"referenceName": "py_fail_activity_logging",
						"type": "NotebookReference"
					},
					"parameters": {
						"output": {
							"value": {
								"value": "@activity('AppealsAdditionalData_Data_Copy_Failure').output.message",
								"type": "Expression"
							},
							"type": "string"
						}
					},
					"snapshot": true,
					"conf": {
						"spark.dynamicAllocation.enabled": null,
						"spark.dynamicAllocation.minExecutors": null,
						"spark.dynamicAllocation.maxExecutors": null
					},
					"numExecutors": null
				}
			},
			{
				"name": "Logging Failed Activities-3",
				"type": "SynapseNotebook",
				"dependsOn": [
					{
						"activity": "AddAdditional_Data_Copy_Failure",
						"dependencyConditions": [
							"Completed"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"notebook": {
						"referenceName": "py_fail_activity_logging",
						"type": "NotebookReference"
					},
					"parameters": {
						"output": {
							"value": {
								"value": "@activity('AddAdditional_Data_Copy_Failure').output.message",
								"type": "Expression"
							},
							"type": "string"
						}
					},
					"snapshot": true,
					"conf": {
						"spark.dynamicAllocation.enabled": null,
						"spark.dynamicAllocation.minExecutors": null,
						"spark.dynamicAllocation.maxExecutors": null
					},
					"numExecutors": null
				}
			},
			{
				"name": "Logging Failed Activities-4",
				"type": "SynapseNotebook",
				"dependsOn": [
					{
						"activity": "AdvertDetails_Data_Copy_Failure",
						"dependencyConditions": [
							"Completed"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"notebook": {
						"referenceName": "py_fail_activity_logging",
						"type": "NotebookReference"
					},
					"parameters": {
						"output": {
							"value": {
								"value": "@activity('AdvertDetails_Data_Copy_Failure').output.message",
								"type": "Expression"
							},
							"type": "string"
						}
					},
					"snapshot": true,
					"conf": {
						"spark.dynamicAllocation.enabled": null,
						"spark.dynamicAllocation.minExecutors": null,
						"spark.dynamicAllocation.maxExecutors": null
					},
					"numExecutors": null
				}
			},
			{
				"name": "Logging Failed Activities-5",
				"type": "SynapseNotebook",
				"dependsOn": [
					{
						"activity": "LPAResponsibility_Data_Copy_Failure",
						"dependencyConditions": [
							"Completed"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"notebook": {
						"referenceName": "py_fail_activity_logging",
						"type": "NotebookReference"
					},
					"parameters": {
						"output": {
							"value": {
								"value": "@activity('LPAResponsibility_Data_Copy_Failure').output.message",
								"type": "Expression"
							},
							"type": "string"
						}
					},
					"snapshot": true,
					"conf": {
						"spark.dynamicAllocation.enabled": null,
						"spark.dynamicAllocation.minExecutors": null,
						"spark.dynamicAllocation.maxExecutors": null
					},
					"numExecutors": null
				}
			},
			{
				"name": "Logging Failed Activities-6",
				"type": "SynapseNotebook",
				"dependsOn": [
					{
						"activity": "DecisionIssues_Data_Copy_Failure",
						"dependencyConditions": [
							"Completed"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"notebook": {
						"referenceName": "py_fail_activity_logging",
						"type": "NotebookReference"
					},
					"parameters": {
						"output": {
							"value": {
								"value": "@activity('DecisionIssues_Data_Copy_Failure').output.message",
								"type": "Expression"
							},
							"type": "string"
						}
					},
					"snapshot": true,
					"conf": {
						"spark.dynamicAllocation.enabled": null,
						"spark.dynamicAllocation.minExecutors": null,
						"spark.dynamicAllocation.maxExecutors": null
					},
					"numExecutors": null
				}
			},
			{
				"name": "Logging Failed Activities-7",
				"type": "SynapseNotebook",
				"dependsOn": [
					{
						"activity": "EnforcementGroundsForAppeal_Data_Copy_Failure",
						"dependencyConditions": [
							"Completed"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"notebook": {
						"referenceName": "py_fail_activity_logging",
						"type": "NotebookReference"
					},
					"parameters": {
						"output": {
							"value": {
								"value": "@activity('EnforcementGroundsForAppeal_Data_Copy_Failure').output.message",
								"type": "Expression"
							},
							"type": "string"
						}
					},
					"snapshot": true,
					"conf": {
						"spark.dynamicAllocation.enabled": null,
						"spark.dynamicAllocation.minExecutors": null,
						"spark.dynamicAllocation.maxExecutors": null
					},
					"numExecutors": null
				}
			},
			{
				"name": "Logging Failed Activities-8",
				"type": "SynapseNotebook",
				"dependsOn": [
					{
						"activity": "SpecialCircumstance_Data_Copy_Failure",
						"dependencyConditions": [
							"Completed"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"notebook": {
						"referenceName": "py_fail_activity_logging",
						"type": "NotebookReference"
					},
					"parameters": {
						"output": {
							"value": {
								"value": "@activity('SpecialCircumstance_Data_Copy_Failure').output.message",
								"type": "Expression"
							},
							"type": "string"
						}
					},
					"snapshot": true,
					"conf": {
						"spark.dynamicAllocation.enabled": null,
						"spark.dynamicAllocation.minExecutors": null,
						"spark.dynamicAllocation.maxExecutors": null
					},
					"numExecutors": null
				}
			},
			{
				"name": "Logging Failed Activities-9",
				"type": "SynapseNotebook",
				"dependsOn": [
					{
						"activity": "Specialism_Data_Copy_Failure",
						"dependencyConditions": [
							"Completed"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"notebook": {
						"referenceName": "py_fail_activity_logging",
						"type": "NotebookReference"
					},
					"parameters": {
						"output": {
							"value": {
								"value": "@activity('Specialism_Data_Copy_Failure').output.message",
								"type": "Expression"
							},
							"type": "string"
						}
					},
					"snapshot": true,
					"conf": {
						"spark.dynamicAllocation.enabled": null,
						"spark.dynamicAllocation.minExecutors": null,
						"spark.dynamicAllocation.maxExecutors": null
					},
					"numExecutors": null
				}
			},
			{
				"name": "HZN_NSIP_Data_Copy",
				"description": "This is copying data based on an SQL script to gather correct NSIP data from Horizon",
				"type": "Copy",
				"dependsOn": [
					{
						"activity": "HZN_Data_Copy_Specialism",
						"dependencyConditions": [
							"Completed"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [
					{
						"name": "Source",
						"value": "."
					},
					{
						"name": "Destination",
						"value": "odw-raw/@{concat('Horizon', '/', formatDateTime(utcnow(), 'yyyy-MM-dd'))}/@{'NSIPData.csv'}"
					}
				],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderQuery": "WITH \nStringFields(ID, Vernum, ProjectName, ProjectStatus, ExamTimetablePublishStatus, \n\t\t\tSector, ProjectType, Stage, CaseReference, ProjectLocation, ProjectEmailAddress, \n\t\t\tTwitterAccountName, Region, Easting, Northing, Transboundary, WelshLanguage, \n\t\t\tExASize, MapZoomLevel, ProjectDescription, SoS, TenE) AS\n       (SELECT \n\t\t\tId, VerNum, [8], [23], [26], [17], [18], [19], [10], [2], [11], [15], [22], [12], [13], [28], [24], [20], [14], [9], [21], [27]\n       FROM \n\t\t\t(SELECT Id, VerNum, AttrID, ValStr \n\t\t\tFROM LLAttrData \n\t\t\tWHERE \n\t\t\t\tDefID = 12361638 \n\t\t\t\tAND AttrID IN (2, 8, 23, 26, 17, 10, 11, 15, 18, 19, 22, 12, 13, 28, 24, 20, 14, 9, 21, 27)) AS Strings \n\t\t\tPIVOT (MAX(ValStr) FOR AttrID IN ([2], [8], [23], [26], [17], [10], [11], [15], [18], [19], [22], [12], [13], [28], [24], [20], [14], [9], [21], [27])) AS StringsPivot),\n\nDateFields(ID, Vernum, DateProjectAppearsOnWebsite, DateOfDCOAcceptance, AnticipatedDateOfSubmission, \n\t\t\tAnticipatedSubmissionDateNonSpecific, DateOfDCOSubmission, DateOfRepresentationPeriodOpen, \n\t\t\tDateOfRelevantRepresentationClose, DateRRepAppearOnWebsite, ConfirmedStartOfExamination, \n\t\t\tDateTimeExaminationEnds, Stage4ExtensionToExamCloseDate, Stage5ExtensionToRecommendationDeadline, \n\t\t\tDateOfRecommendations, ConfirmedDateOfDecision, Stage5ExtensionToDecisionDeadline,\n\t\t\tDateProjectWithdrawn, Section46Notification, DatePINSFirstNotifiedOfProject, \n\t\t\tScreeningOpinionSought, ScreeningOpinionIssued, ScopingOpinionSought, \n\t\t\tScopingOpinionIssued, DeadlineForAcceptanceDecision, DateSection58NoticeReceived, \n\t\t\tPreliminaryMeetingStartDate, DeadlineForCloseOfExamination,\tDeadlineForSubmissionOfRecommendation, \n\t\t\tDeadlineForDecision, JRPeriodEndDate, ExtensionToDateRelevantRepresentationsClose\n\t\t\t) AS\n       (SELECT \n\t\t\tId,VerNum,[3],[13],[5],[4],[12],[15],[16],[18],[21],[22],[24],[27],[25],[28],[30],[6],[11],[2], [7], [8], [9], [10], [14], [19], [20], [23], [26], [29], [31], [17]\n       FROM \n\t\t\t(SELECT Id, VerNum, AttrID, ValDate \n\t\t\tFROM LLAttrData \n\t\t\tWHERE \n\t\t\t\tDefID = 12361641 \n\t\t\t\tAND AttrID IN (3, 4, 5, 6, 11, 12, 13, 15, 16, 18, 21, 22, 24, 25, 27, 28, 30, 2, 7, 8,9, 10, 14, 19, 20, 23, 26, 29, 31, 17)) AS Dates \n\t\t\tPIVOT (MAX(ValDate) FOR AttrID IN ([3], [4], [5], [6], [11], [12], [13], [15], [16], [18], [21], [22], [24], [25], [27], [28], [30], [2], [7], [8], [9], [10], [14], [19], [20], [23], [26], [29], [31], [17])) AS DatesPivot),\n\nTextFields(ID, Vernum, Summary) AS\n       (SELECT Id,VerNum,[9]\n       FROM \n\t\t\t(SELECT Id, VerNum, AttrID, CAST(ValLong AS VARCHAR(MAX)) AS TextField \n\t\t\tFROM LLAttrData \n\t\t\tWHERE \n\t\t\t\tDefID = 12361638 \n\t\t\t\tAND AttrID IN (9)) AS Texts \n\t\t\tPIVOT (MAX(TextField) FOR AttrID IN ([9])) AS TextsPivot),\n\nStringFields_Applicant(ID, Vernum, PromoterName, ApplicantFirstName, ApplicantLastName, ApplicantEmailAddress, ApplicantWebAddress, ApplicantPhoneNumber, AddressLine1, AddressLine2, AddressTown, AddressCounty, PostCode) AS\n       (SELECT Id, VerNum, [19], [3], [4], [10], [12], [11], [5], [6], [7], [8], [9]\n\t   FROM \n\t\t\t(SELECT Id, VerNum, AttrID, ValStr \n\t\t\tFROM LLAttrData \n\t\t\tWHERE \n\t\t\t\tDefID = 12361642 \n\t\t\t\tAND AttrID IN (19, 3, 4, 10, 12, 18, 11, 5, 6, 7, 8, 9)) AS Strings \n\t\t\tPIVOT (MAX(ValStr) FOR AttrID IN ([19], [3], [4], [10], [12], [18], [11], [5], [6], [7], [8], [9])) AS StringsPivot),\n\nTextFields_Applicant(ID, Vernum, ApplicantDescriptionOfProject) AS\n       (SELECT Id, VerNum, [18]\n       FROM \n\t\t\t(SELECT Id, VerNum, AttrID, CAST(ValLong AS VARCHAR(MAX)) AS TextField \n\t\t\tFROM LLAttrData \n\t\t\tWHERE \n\t\t\t\tDefID = 12361642 \n\t\t\t\tAND AttrID IN (18)) AS Texts \n\t\t\tPIVOT (MAX(TextField) FOR AttrID IN ([18])) AS TextsPivot),\n\nStringFields_Case_Manager(DataId, ContactID, ContactDetails, TypeOfInvolvement) AS\n       (SELECT d.DataId AS DataId, ll1.ValStr AS [ContactID], ll2.ValStr AS [ContactDetails], ll3.ValStr AS [TypeOfInvolvement]\n       FROM DTree d\n\t\t   INNER JOIN llattrdata ll1 ON d.DataId = ll1.Id\n\t\t   INNER JOIN llattrdata ll2 ON d.DataId = ll2.Id\n\t\t   INNER JOIN llattrdata ll3 ON d.DataId = ll3.Id\n       WHERE\n\t\t   ll1.DefId = 95501 AND ll1.AttrId = 20\n\t\t   AND ll2.DefId = 95501 AND ll2.AttrId = 19\n\t\t   AND ll3.DefId = 95501 AND ll3.AttrId = 3 AND ll3.ValStr = 'Case Manager'\n\t\t   AND ll1.ParentKeyId = ll2.ParentKeyId\n\t\t   AND ll1.ParentKeyId = ll3.ParentKeyId),\n\nStringFields_Case_Officer(DataId, ContactID, ContactDetails, TypeOfInvolvement) AS\n       (SELECT d.DataId AS DataId, ll1.ValStr AS [ContactID], ll2.ValStr AS [ContactDetails], ll3.ValStr AS [TypeOfInvolvement]\n       FROM DTree d\n\t\t   INNER JOIN llattrdata ll1 ON d.DataId = ll1.Id\n\t\t   INNER JOIN llattrdata ll2 ON d.DataId = ll2.Id\n\t\t   INNER JOIN llattrdata ll3 ON d.DataId = ll3.Id\n       WHERE\n\t\t   ll1.DefId = 95501 AND ll1.AttrId = 20\n\t\t   AND ll2.DefId = 95501 AND ll2.AttrId = 19\n\t\t   AND ll3.DefId = 95501 AND ll3.AttrId = 3 AND ll3.ValStr = 'Case Officer'\n\t\t   AND ll1.ParentKeyId = ll2.ParentKeyId\n\t\t   AND ll1.ParentKeyId = ll3.ParentKeyId),\n\n\nStringFields_Inspector(DataId, ContactID, ContactDetails, TypeOfInvolvement) AS\n       (SELECT d.DataId AS DataId, ll1.ValStr AS [ContactID], ll2.ValStr AS [ContactDetails], ll3.ValStr AS [TypeOfInvolvement]\n       FROM DTree d\n\t\t   INNER JOIN llattrdata ll1 ON d.DataId = ll1.Id\n\t\t   INNER JOIN llattrdata ll2 ON d.DataId = ll2.Id\n\t\t   INNER JOIN llattrdata ll3 ON d.DataId = ll3.Id\n       WHERE\n\t\t   ll1.DefId = 95501 AND ll1.AttrId = 20\n\t\t   AND ll2.DefId = 95501 AND ll2.AttrId = 19\n\t\t   AND ll3.DefId = 95501 AND ll3.AttrId = 3 AND ll3.ValStr = 'Inspector'\n\t\t   AND ll1.ParentKeyId = ll2.ParentKeyId\n\t\t   AND ll1.ParentKeyId = ll3.ParentKeyId)\n       \nSELECT \n\tnsipcase.CreateDate AS CaseCreatedDate,\n\ts.ProjectName,\n\ts.ProjectStatus,\n\ts.ExamTimetablePublishStatus,\n\ts.Sector,\n\ts.ProjectType,\n\ts.Stage,\n\ts.CaseReference,\n\ts.ProjectLocation,\n\ts.ProjectEmailAddress,\n\ts.TwitterAccountName,\n\ts.Region,\n\ts.Easting,\n\ts.Northing,\n\ts.Transboundary,\n\ts.WelshLanguage,\n\ts.ExASize,\n\ts.MapZoomLevel,\n\ts.ProjectDescription,\n\ts.SoS,\n\ts.TenE,\n\td.DateProjectAppearsOnWebsite,\n\td.DateOfDCOAcceptance,\n\td.AnticipatedDateOfSubmission,\n\td.DateOfDCOSubmission,\n\td.DateOfRepresentationPeriodOpen,\n\td.DateOfRelevantRepresentationClose,\n\td.DateRRepAppearOnWebsite,\n\td.ConfirmedStartOfExamination,\n\td.DateTimeExaminationEnds,\n\td.Stage4ExtensionToExamCloseDate,\n\td.Stage5ExtensionToRecommendationDeadline,\n\td.DateOfRecommendations,\n\td.ConfirmedDateOfDecision,\n\td.Stage5ExtensionToDecisionDeadline,\n\td.DateProjectWithdrawn,\n\td.Section46Notification,\n\td.DatePINSFirstNotifiedOfProject,\n\td.ScreeningOpinionSought,\n\td.ScreeningOpinionIssued,\n\td.ScopingOpinionSought,\n\td.ScopingOpinionIssued,\n\td.DeadlineForAcceptanceDecision,\n\td.DateSection58NoticeReceived,\n\td.PreliminaryMeetingStartDate,\n\td.DeadlineForCloseOfExamination,\n\td.DeadlineForSubmissionOfRecommendation,\n\td.DeadlineForDecision,\n\td.JRPeriodEndDate,\n\td.ExtensionToDateRelevantRepresentationsClose,\n\tt.Summary,\n\tsa.PromoterName,\n\tsa.ApplicantFirstName,\n\tsa.ApplicantLastName,\n\tsa.AddressLine1,\n\tsa.AddressLine2,\n\tsa.AddressTown,\n\tsa.AddressCounty,\n\tsa.PostCode,\n\tsa.ApplicantEmailAddress,\n\tsa.ApplicantWebAddress,\n\tsa.ApplicantPhoneNumber,\n\tta.ApplicantDescriptionOfProject\nFROM \n\tHorizon_CaseReference cr \n\t\tINNER JOIN Horizon_TypeOfCase toc ON cr.CaseTypeId = toc.ID\n\t\tINNER JOIN DTree nsipcase ON cr.CaseNodeId = nsipcase.DataID\n\t\tINNER JOIN StringFields s ON nsipcase.DataID = s.ID\n\t\tINNER JOIN DateFields d ON nsipcase.DataID = d.ID\n\t\tINNER JOIN TextFields t ON nsipcase.DataID = t.ID\n\t\tINNER JOIN StringFields_Applicant sa ON nsipcase.DataID = sa.ID\n\t\tINNER JOIN TextFields_Applicant ta ON nsipcase.DataID = ta.ID\nWHERE\n       toc.CaseworkType = 'NSIP'\n\t   and s.CaseReference = 'EN010118'\nORDER BY\n\ts.CaseReference",
						"queryTimeout": "02:00:00",
						"isolationLevel": "ReadCommitted",
						"partitionOption": "None"
					},
					"sink": {
						"type": "DelimitedTextSink",
						"storeSettings": {
							"type": "AzureBlobFSWriteSettings"
						},
						"formatSettings": {
							"type": "DelimitedTextWriteSettings",
							"quoteAllText": true,
							"fileExtension": ".txt"
						}
					},
					"enableStaging": false,
					"translator": {
						"type": "TabularTranslator",
						"mappings": [
							{
								"source": {
									"name": "CaseCreatedDate",
									"type": "DateTime",
									"physicalType": "datetime"
								},
								"sink": {
									"name": "CaseCreatedDate",
									"type": "String",
									"physicalType": "String"
								}
							},
							{
								"source": {
									"name": "ProjectName",
									"type": "String",
									"physicalType": "nvarchar"
								},
								"sink": {
									"name": "ProjectName",
									"type": "String",
									"physicalType": "String"
								}
							},
							{
								"source": {
									"name": "ProjectStatus",
									"type": "String",
									"physicalType": "nvarchar"
								},
								"sink": {
									"name": "ProjectStatus",
									"type": "String",
									"physicalType": "String"
								}
							},
							{
								"source": {
									"name": "ExamTimetablePublishStatus",
									"type": "String",
									"physicalType": "nvarchar"
								},
								"sink": {
									"name": "ExamTimetablePublishStatus",
									"type": "String",
									"physicalType": "String"
								}
							},
							{
								"source": {
									"name": "Sector",
									"type": "String",
									"physicalType": "nvarchar"
								},
								"sink": {
									"name": "Sector",
									"type": "String",
									"physicalType": "String"
								}
							},
							{
								"source": {
									"name": "ProjectType",
									"type": "String",
									"physicalType": "nvarchar"
								},
								"sink": {
									"name": "ProjectType",
									"type": "String",
									"physicalType": "String"
								}
							},
							{
								"source": {
									"name": "Stage",
									"type": "String",
									"physicalType": "nvarchar"
								},
								"sink": {
									"name": "Stage",
									"type": "String",
									"physicalType": "String"
								}
							},
							{
								"source": {
									"name": "CaseReference",
									"type": "String",
									"physicalType": "nvarchar"
								},
								"sink": {
									"name": "CaseReference",
									"type": "String",
									"physicalType": "String"
								}
							},
							{
								"source": {
									"name": "ProjectLocation",
									"type": "String",
									"physicalType": "nvarchar"
								},
								"sink": {
									"name": "ProjectLocation",
									"type": "String",
									"physicalType": "String"
								}
							},
							{
								"source": {
									"name": "ProjectEmailAddress",
									"type": "String",
									"physicalType": "nvarchar"
								},
								"sink": {
									"name": "ProjectEmailAddress",
									"type": "String",
									"physicalType": "String"
								}
							},
							{
								"source": {
									"name": "TwitterAccountName",
									"type": "String",
									"physicalType": "nvarchar"
								},
								"sink": {
									"name": "TwitterAccountName",
									"type": "String",
									"physicalType": "String"
								}
							},
							{
								"source": {
									"name": "Region",
									"type": "String",
									"physicalType": "nvarchar"
								},
								"sink": {
									"name": "Region",
									"type": "String",
									"physicalType": "String"
								}
							},
							{
								"source": {
									"name": "Easting",
									"type": "String",
									"physicalType": "nvarchar"
								},
								"sink": {
									"name": "Easting",
									"type": "String",
									"physicalType": "String"
								}
							},
							{
								"source": {
									"name": "Northing",
									"type": "String",
									"physicalType": "nvarchar"
								},
								"sink": {
									"name": "Northing",
									"type": "String",
									"physicalType": "String"
								}
							},
							{
								"source": {
									"name": "Transboundary",
									"type": "String",
									"physicalType": "nvarchar"
								},
								"sink": {
									"name": "Transboundary",
									"type": "String",
									"physicalType": "String"
								}
							},
							{
								"source": {
									"name": "WelshLanguage",
									"type": "String",
									"physicalType": "nvarchar"
								},
								"sink": {
									"name": "WelshLanguage",
									"type": "String",
									"physicalType": "String"
								}
							},
							{
								"source": {
									"name": "ExASize",
									"type": "String",
									"physicalType": "nvarchar"
								},
								"sink": {
									"name": "ExASize",
									"type": "String",
									"physicalType": "String"
								}
							},
							{
								"source": {
									"name": "MapZoomLevel",
									"type": "String",
									"physicalType": "nvarchar"
								},
								"sink": {
									"name": "MapZoomLevel",
									"type": "String",
									"physicalType": "String"
								}
							},
							{
								"source": {
									"name": "ProjectDescription",
									"type": "String",
									"physicalType": "nvarchar"
								},
								"sink": {
									"name": "ProjectDescription",
									"type": "String",
									"physicalType": "String"
								}
							},
							{
								"source": {
									"name": "SoS",
									"type": "String",
									"physicalType": "nvarchar"
								},
								"sink": {
									"name": "SoS",
									"type": "String",
									"physicalType": "String"
								}
							},
							{
								"source": {
									"name": "TenE",
									"type": "String",
									"physicalType": "nvarchar"
								},
								"sink": {
									"name": "TenE",
									"type": "String",
									"physicalType": "String"
								}
							},
							{
								"source": {
									"name": "DateProjectAppearsOnWebsite",
									"type": "DateTime",
									"physicalType": "datetime"
								},
								"sink": {
									"name": "DateProjectAppearsOnWebsite",
									"type": "String",
									"physicalType": "String"
								}
							},
							{
								"source": {
									"name": "DateOfDCOAcceptance",
									"type": "DateTime",
									"physicalType": "datetime"
								},
								"sink": {
									"name": "DateOfDCOAcceptance",
									"type": "String",
									"physicalType": "String"
								}
							},
							{
								"source": {
									"name": "AnticipatedDateOfSubmission",
									"type": "DateTime",
									"physicalType": "datetime"
								},
								"sink": {
									"name": "AnticipatedDateOfSubmission",
									"type": "String",
									"physicalType": "String"
								}
							},
							{
								"source": {
									"name": "DateOfDCOSubmission",
									"type": "DateTime",
									"physicalType": "datetime"
								},
								"sink": {
									"name": "DateOfDCOSubmission",
									"type": "String",
									"physicalType": "String"
								}
							},
							{
								"source": {
									"name": "DateOfRepresentationPeriodOpen",
									"type": "DateTime",
									"physicalType": "datetime"
								},
								"sink": {
									"name": "DateOfRepresentationPeriodOpen",
									"type": "String",
									"physicalType": "String"
								}
							},
							{
								"source": {
									"name": "DateOfRelevantRepresentationClose",
									"type": "DateTime",
									"physicalType": "datetime"
								},
								"sink": {
									"name": "DateOfRelevantRepresentationClose",
									"type": "String",
									"physicalType": "String"
								}
							},
							{
								"source": {
									"name": "DateRRepAppearOnWebsite",
									"type": "DateTime",
									"physicalType": "datetime"
								},
								"sink": {
									"name": "DateRRepAppearOnWebsite",
									"type": "String",
									"physicalType": "String"
								}
							},
							{
								"source": {
									"name": "ConfirmedStartOfExamination",
									"type": "DateTime",
									"physicalType": "datetime"
								},
								"sink": {
									"name": "ConfirmedStartOfExamination",
									"type": "String",
									"physicalType": "String"
								}
							},
							{
								"source": {
									"name": "DateTimeExaminationEnds",
									"type": "DateTime",
									"physicalType": "datetime"
								},
								"sink": {
									"name": "DateTimeExaminationEnds",
									"type": "String",
									"physicalType": "String"
								}
							},
							{
								"source": {
									"name": "Stage4ExtensionToExamCloseDate",
									"type": "DateTime",
									"physicalType": "datetime"
								},
								"sink": {
									"name": "Stage4ExtensionToExamCloseDate",
									"type": "String",
									"physicalType": "String"
								}
							},
							{
								"source": {
									"name": "Stage5ExtensionToRecommendationDeadline",
									"type": "DateTime",
									"physicalType": "datetime"
								},
								"sink": {
									"name": "Stage5ExtensionToRecommendationDeadline",
									"type": "String",
									"physicalType": "String"
								}
							},
							{
								"source": {
									"name": "DateOfRecommendations",
									"type": "DateTime",
									"physicalType": "datetime"
								},
								"sink": {
									"name": "DateOfRecommendations",
									"type": "String",
									"physicalType": "String"
								}
							},
							{
								"source": {
									"name": "ConfirmedDateOfDecision",
									"type": "DateTime",
									"physicalType": "datetime"
								},
								"sink": {
									"name": "ConfirmedDateOfDecision",
									"type": "String",
									"physicalType": "String"
								}
							},
							{
								"source": {
									"name": "Stage5ExtensionToDecisionDeadline",
									"type": "DateTime",
									"physicalType": "datetime"
								},
								"sink": {
									"name": "Stage5ExtensionToDecisionDeadline",
									"type": "String",
									"physicalType": "String"
								}
							},
							{
								"source": {
									"name": "DateProjectWithdrawn",
									"type": "DateTime",
									"physicalType": "datetime"
								},
								"sink": {
									"name": "DateProjectWithdrawn",
									"type": "String",
									"physicalType": "String"
								}
							},
							{
								"source": {
									"name": "Section46Notification",
									"type": "DateTime",
									"physicalType": "datetime"
								},
								"sink": {
									"name": "Section46Notification",
									"type": "String",
									"physicalType": "String"
								}
							},
							{
								"source": {
									"name": "DatePINSFirstNotifiedOfProject",
									"type": "DateTime",
									"physicalType": "datetime"
								},
								"sink": {
									"name": "DatePINSFirstNotifiedOfProject",
									"type": "String",
									"physicalType": "String"
								}
							},
							{
								"source": {
									"name": "ScreeningOpinionSought",
									"type": "DateTime",
									"physicalType": "datetime"
								},
								"sink": {
									"name": "ScreeningOpinionSought",
									"type": "String",
									"physicalType": "String"
								}
							},
							{
								"source": {
									"name": "ScreeningOpinionIssued",
									"type": "DateTime",
									"physicalType": "datetime"
								},
								"sink": {
									"name": "ScreeningOpinionIssued",
									"type": "String",
									"physicalType": "String"
								}
							},
							{
								"source": {
									"name": "ScopingOpinionSought",
									"type": "DateTime",
									"physicalType": "datetime"
								},
								"sink": {
									"name": "ScopingOpinionSought",
									"type": "String",
									"physicalType": "String"
								}
							},
							{
								"source": {
									"name": "ScopingOpinionIssued",
									"type": "DateTime",
									"physicalType": "datetime"
								},
								"sink": {
									"name": "ScopingOpinionIssued",
									"type": "String",
									"physicalType": "String"
								}
							},
							{
								"source": {
									"name": "DeadlineForAcceptanceDecision",
									"type": "DateTime",
									"physicalType": "datetime"
								},
								"sink": {
									"name": "DeadlineForAcceptanceDecision",
									"type": "String",
									"physicalType": "String"
								}
							},
							{
								"source": {
									"name": "DateSection58NoticeReceived",
									"type": "DateTime",
									"physicalType": "datetime"
								},
								"sink": {
									"name": "DateSection58NoticeReceived",
									"type": "String",
									"physicalType": "String"
								}
							},
							{
								"source": {
									"name": "PreliminaryMeetingStartDate",
									"type": "DateTime",
									"physicalType": "datetime"
								},
								"sink": {
									"name": "PreliminaryMeetingStartDate",
									"type": "String",
									"physicalType": "String"
								}
							},
							{
								"source": {
									"name": "DeadlineForCloseOfExamination",
									"type": "DateTime",
									"physicalType": "datetime"
								},
								"sink": {
									"name": "DeadlineForCloseOfExamination",
									"type": "String",
									"physicalType": "String"
								}
							},
							{
								"source": {
									"name": "DeadlineForSubmissionOfRecommendation",
									"type": "DateTime",
									"physicalType": "datetime"
								},
								"sink": {
									"name": "DeadlineForSubmissionOfRecommendation",
									"type": "String",
									"physicalType": "String"
								}
							},
							{
								"source": {
									"name": "DeadlineForDecision",
									"type": "DateTime",
									"physicalType": "datetime"
								},
								"sink": {
									"name": "DeadlineForDecision",
									"type": "String",
									"physicalType": "String"
								}
							},
							{
								"source": {
									"name": "JRPeriodEndDate",
									"type": "DateTime",
									"physicalType": "datetime"
								},
								"sink": {
									"name": "JRPeriodEndDate",
									"type": "String",
									"physicalType": "String"
								}
							},
							{
								"source": {
									"name": "ExtensionToDateRelevantRepresentationsClose",
									"type": "DateTime",
									"physicalType": "datetime"
								},
								"sink": {
									"name": "ExtensionToDateRelevantRepresentationsClose",
									"type": "String",
									"physicalType": "String"
								}
							},
							{
								"source": {
									"name": "Summary",
									"type": "String",
									"physicalType": "varchar"
								},
								"sink": {
									"name": "Summary",
									"type": "String",
									"physicalType": "String"
								}
							},
							{
								"source": {
									"name": "PromoterName",
									"type": "String",
									"physicalType": "nvarchar"
								},
								"sink": {
									"name": "PromoterName",
									"type": "String",
									"physicalType": "String"
								}
							},
							{
								"source": {
									"name": "ApplicantFirstName",
									"type": "String",
									"physicalType": "nvarchar"
								},
								"sink": {
									"name": "ApplicantFirstName",
									"type": "String",
									"physicalType": "String"
								}
							},
							{
								"source": {
									"name": "ApplicantLastName",
									"type": "String",
									"physicalType": "nvarchar"
								},
								"sink": {
									"name": "ApplicantLastName",
									"type": "String",
									"physicalType": "String"
								}
							},
							{
								"source": {
									"name": "AddressLine1",
									"type": "String",
									"physicalType": "nvarchar"
								},
								"sink": {
									"name": "AddressLine1",
									"type": "String",
									"physicalType": "String"
								}
							},
							{
								"source": {
									"name": "AddressLine2",
									"type": "String",
									"physicalType": "nvarchar"
								},
								"sink": {
									"name": "AddressLine2",
									"type": "String",
									"physicalType": "String"
								}
							},
							{
								"source": {
									"name": "AddressTown",
									"type": "String",
									"physicalType": "nvarchar"
								},
								"sink": {
									"name": "AddressTown",
									"type": "String",
									"physicalType": "String"
								}
							},
							{
								"source": {
									"name": "AddressCounty",
									"type": "String",
									"physicalType": "nvarchar"
								},
								"sink": {
									"name": "AddressCounty",
									"type": "String",
									"physicalType": "String"
								}
							},
							{
								"source": {
									"name": "PostCode",
									"type": "String",
									"physicalType": "nvarchar"
								},
								"sink": {
									"name": "PostCode",
									"type": "String",
									"physicalType": "String"
								}
							},
							{
								"source": {
									"name": "ApplicantEmailAddress",
									"type": "String",
									"physicalType": "nvarchar"
								},
								"sink": {
									"name": "ApplicantEmailAddress",
									"type": "String",
									"physicalType": "String"
								}
							},
							{
								"source": {
									"name": "ApplicantWebAddress",
									"type": "String",
									"physicalType": "nvarchar"
								},
								"sink": {
									"name": "ApplicantWebAddress",
									"type": "String",
									"physicalType": "String"
								}
							},
							{
								"source": {
									"name": "ApplicantPhoneNumber",
									"type": "String",
									"physicalType": "nvarchar"
								},
								"sink": {
									"name": "ApplicantPhoneNumber",
									"type": "String",
									"physicalType": "String"
								}
							},
							{
								"source": {
									"name": "ApplicantDescriptionOfProject",
									"type": "String",
									"physicalType": "varchar"
								},
								"sink": {
									"name": "ApplicantDescriptionOfProject",
									"type": "String",
									"physicalType": "String"
								}
							}
						],
						"typeConversion": true,
						"typeConversionSettings": {
							"allowDataTruncation": true,
							"treatBooleanAsNumber": false
						}
					}
				},
				"inputs": [
					{
						"referenceName": "HZN_NSIP_Query",
						"type": "DatasetReference"
					}
				],
				"outputs": [
					{
						"referenceName": "NSIP_Data",
						"type": "DatasetReference",
						"parameters": {
							"FileName": "NSIPData.csv"
						}
					}
				]
			},
			{
				"name": "NSIP_Data_Copy_Failure",
				"description": "NSIP data loading into the RAW ODW Layer as csv has failed",
				"type": "Fail",
				"dependsOn": [
					{
						"activity": "HZN_NSIP_Data_Copy",
						"dependencyConditions": [
							"Failed"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"message": "The Horizon NSIP load to RAW has failed",
					"errorCode": "HZN_Data_Copy_NSIP"
				}
			},
			{
				"name": "Logging Failed Activities-10",
				"type": "SynapseNotebook",
				"dependsOn": [
					{
						"activity": "NSIP_Data_Copy_Failure",
						"dependencyConditions": [
							"Completed"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"notebook": {
						"referenceName": "py_fail_activity_logging",
						"type": "NotebookReference"
					},
					"parameters": {
						"output": {
							"value": {
								"value": "@activity('NSIP_Data_Copy_Failure').output.message",
								"type": "Expression"
							},
							"type": "string"
						}
					},
					"snapshot": true,
					"conf": {
						"spark.dynamicAllocation.enabled": null,
						"spark.dynamicAllocation.minExecutors": null,
						"spark.dynamicAllocation.maxExecutors": null
					},
					"numExecutors": null
				}
			},
			{
				"name": "HZN_Right_of_Way",
				"description": "Copy the rights of way data data from horizon into Raw",
				"type": "Copy",
				"dependsOn": [
					{
						"activity": "HZN_NSIP_Data_Copy",
						"dependencyConditions": [
							"Completed"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [
					{
						"name": "Source",
						"value": "load.row_case_info"
					},
					{
						"name": "Destination",
						"value": "odw-raw/@{concat('Horizon', '/', formatDateTime(utcnow(), 'yyyy-MM-dd'))}/@{'HZNRightOfWay.csv'}"
					}
				],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"queryTimeout": "02:00:00",
						"isolationLevel": "ReadCommitted",
						"partitionOption": "None"
					},
					"sink": {
						"type": "DelimitedTextSink",
						"storeSettings": {
							"type": "AzureBlobFSWriteSettings"
						},
						"formatSettings": {
							"type": "DelimitedTextWriteSettings",
							"quoteAllText": true,
							"fileExtension": ".txt"
						}
					},
					"enableStaging": false,
					"translator": {
						"type": "TabularTranslator",
						"mappings": [
							{
								"source": {
									"name": "Record_Status",
									"type": "String",
									"physicalType": "varchar"
								},
								"sink": {
									"name": "Record_Status",
									"type": "String",
									"physicalType": "String"
								}
							},
							{
								"source": {
									"name": "Group",
									"type": "String",
									"physicalType": "varchar"
								},
								"sink": {
									"name": "Group",
									"type": "String",
									"physicalType": "String"
								}
							},
							{
								"source": {
									"name": "Jurisdiction",
									"type": "String",
									"physicalType": "varchar"
								},
								"sink": {
									"name": "Jurisdiction",
									"type": "String",
									"physicalType": "String"
								}
							},
							{
								"source": {
									"name": "FPS_Number",
									"type": "String",
									"physicalType": "varchar"
								},
								"sink": {
									"name": "FPS_Number",
									"type": "String",
									"physicalType": "String"
								}
							},
							{
								"source": {
									"name": "FPS_1",
									"type": "String",
									"physicalType": "varchar"
								},
								"sink": {
									"name": "FPS_1",
									"type": "String",
									"physicalType": "String"
								}
							},
							{
								"source": {
									"name": "FPS_2",
									"type": "String",
									"physicalType": "varchar"
								},
								"sink": {
									"name": "FPS_2",
									"type": "String",
									"physicalType": "String"
								}
							},
							{
								"source": {
									"name": "FPS_3",
									"type": "String",
									"physicalType": "varchar"
								},
								"sink": {
									"name": "FPS_3",
									"type": "String",
									"physicalType": "String"
								}
							},
							{
								"source": {
									"name": "FPS_4",
									"type": "String",
									"physicalType": "varchar"
								},
								"sink": {
									"name": "FPS_4",
									"type": "String",
									"physicalType": "String"
								}
							},
							{
								"source": {
									"name": "Lead_FPS_Number",
									"type": "String",
									"physicalType": "varchar"
								},
								"sink": {
									"name": "Lead_FPS_Number",
									"type": "String",
									"physicalType": "String"
								}
							},
							{
								"source": {
									"name": "Migration",
									"type": "String",
									"physicalType": "varchar"
								},
								"sink": {
									"name": "Migration",
									"type": "String",
									"physicalType": "String"
								}
							},
							{
								"source": {
									"name": "Act",
									"type": "String",
									"physicalType": "varchar"
								},
								"sink": {
									"name": "Act",
									"type": "String",
									"physicalType": "String"
								}
							},
							{
								"source": {
									"name": "Section",
									"type": "String",
									"physicalType": "varchar"
								},
								"sink": {
									"name": "Section",
									"type": "String",
									"physicalType": "String"
								}
							},
							{
								"source": {
									"name": "DataEase OMA",
									"type": "String",
									"physicalType": "varchar"
								},
								"sink": {
									"name": "DataEase OMA",
									"type": "String",
									"physicalType": "String"
								}
							},
							{
								"source": {
									"name": "Order_Making_Authority",
									"type": "String",
									"physicalType": "varchar"
								},
								"sink": {
									"name": "Order_Making_Authority",
									"type": "String",
									"physicalType": "String"
								}
							},
							{
								"source": {
									"name": "Title_Of_Order",
									"type": "String",
									"physicalType": "varchar"
								},
								"sink": {
									"name": "Title_Of_Order",
									"type": "String",
									"physicalType": "String"
								}
							},
							{
								"source": {
									"name": "OMA_Reference",
									"type": "String",
									"physicalType": "varchar"
								},
								"sink": {
									"name": "OMA_Reference",
									"type": "String",
									"physicalType": "String"
								}
							},
							{
								"source": {
									"name": "OMA_Contact",
									"type": "String",
									"physicalType": "varchar"
								},
								"sink": {
									"name": "OMA_Contact",
									"type": "String",
									"physicalType": "String"
								}
							},
							{
								"source": {
									"name": "OMA_Telephone",
									"type": "String",
									"physicalType": "varchar"
								},
								"sink": {
									"name": "OMA_Telephone",
									"type": "String",
									"physicalType": "String"
								}
							},
							{
								"source": {
									"name": "OMA_Form_Of_Address",
									"type": "String",
									"physicalType": "varchar"
								},
								"sink": {
									"name": "OMA_Form_Of_Address",
									"type": "String",
									"physicalType": "String"
								}
							},
							{
								"source": {
									"name": "DataEase_Objectors",
									"type": "String",
									"physicalType": "varchar"
								},
								"sink": {
									"name": "DataEase_Objectors",
									"type": "String",
									"physicalType": "String"
								}
							},
							{
								"source": {
									"name": "Number_Of_Objectors",
									"type": "String",
									"physicalType": "varchar"
								},
								"sink": {
									"name": "Number_Of_Objectors",
									"type": "String",
									"physicalType": "String"
								}
							},
							{
								"source": {
									"name": "Concurrent_Orders",
									"type": "String",
									"physicalType": "varchar"
								},
								"sink": {
									"name": "Concurrent_Orders",
									"type": "String",
									"physicalType": "String"
								}
							},
							{
								"source": {
									"name": "Receipt_Of_Orders",
									"type": "DateTime",
									"physicalType": "datetime"
								},
								"sink": {
									"name": "Receipt_Of_Orders",
									"type": "String",
									"physicalType": "String"
								}
							},
							{
								"source": {
									"name": "Documentation_Complete",
									"type": "DateTime",
									"physicalType": "datetime"
								},
								"sink": {
									"name": "Documentation_Complete",
									"type": "String",
									"physicalType": "String"
								}
							},
							{
								"source": {
									"name": "Allocation_Level",
									"type": "String",
									"physicalType": "varchar"
								},
								"sink": {
									"name": "Allocation_Level",
									"type": "String",
									"physicalType": "String"
								}
							},
							{
								"source": {
									"name": "Fee_Rate",
									"type": "String",
									"physicalType": "varchar"
								},
								"sink": {
									"name": "Fee_Rate",
									"type": "String",
									"physicalType": "String"
								}
							},
							{
								"source": {
									"name": "Date_Order_Validated",
									"type": "DateTime",
									"physicalType": "datetime"
								},
								"sink": {
									"name": "Date_Order_Validated",
									"type": "String",
									"physicalType": "String"
								}
							},
							{
								"source": {
									"name": "Order_Rejected_Or_Returned",
									"type": "String",
									"physicalType": "varchar"
								},
								"sink": {
									"name": "Order_Rejected_Or_Returned",
									"type": "String",
									"physicalType": "String"
								}
							},
							{
								"source": {
									"name": "Date_Orders_Withdrawn",
									"type": "DateTime",
									"physicalType": "datetime"
								},
								"sink": {
									"name": "Date_Orders_Withdrawn",
									"type": "String",
									"physicalType": "String"
								}
							},
							{
								"source": {
									"name": "Date_Of_Recovery_By_SOS",
									"type": "DateTime",
									"physicalType": "datetime"
								},
								"sink": {
									"name": "Date_Of_Recovery_By_SOS",
									"type": "String",
									"physicalType": "String"
								}
							},
							{
								"source": {
									"name": "Date_Procedure_Confirmed",
									"type": "DateTime",
									"physicalType": "datetime"
								},
								"sink": {
									"name": "Date_Procedure_Confirmed",
									"type": "String",
									"physicalType": "String"
								}
							},
							{
								"source": {
									"name": "Procedure",
									"type": "String",
									"physicalType": "varchar"
								},
								"sink": {
									"name": "Procedure",
									"type": "String",
									"physicalType": "String"
								}
							},
							{
								"source": {
									"name": "Date_Inquiry_Requested",
									"type": "DateTime",
									"physicalType": "datetime"
								},
								"sink": {
									"name": "Date_Inquiry_Requested",
									"type": "String",
									"physicalType": "String"
								}
							},
							{
								"source": {
									"name": "Local_Inquiry_Date",
									"type": "DateTime",
									"physicalType": "datetime"
								},
								"sink": {
									"name": "Local_Inquiry_Date",
									"type": "String",
									"physicalType": "String"
								}
							},
							{
								"source": {
									"name": "Estimated_Duration",
									"type": "String",
									"physicalType": "varchar"
								},
								"sink": {
									"name": "Estimated_Duration",
									"type": "String",
									"physicalType": "String"
								}
							},
							{
								"source": {
									"name": "Inquiry_Venue",
									"type": "String",
									"physicalType": "varchar"
								},
								"sink": {
									"name": "Inquiry_Venue",
									"type": "String",
									"physicalType": "String"
								}
							},
							{
								"source": {
									"name": "Sent_For_Allocation",
									"type": "DateTime",
									"physicalType": "datetime"
								},
								"sink": {
									"name": "Sent_For_Allocation",
									"type": "String",
									"physicalType": "String"
								}
							},
							{
								"source": {
									"name": "Inspectors_Name",
									"type": "String",
									"physicalType": "varchar"
								},
								"sink": {
									"name": "Inspectors_Name",
									"type": "String",
									"physicalType": "String"
								}
							},
							{
								"source": {
									"name": "Inquiry_Observed_By",
									"type": "String",
									"physicalType": "varchar"
								},
								"sink": {
									"name": "Inquiry_Observed_By",
									"type": "String",
									"physicalType": "String"
								}
							},
							{
								"source": {
									"name": "InquirySV_Cancelled",
									"type": "String",
									"physicalType": "varchar"
								},
								"sink": {
									"name": "InquirySV_Cancelled",
									"type": "String",
									"physicalType": "String"
								}
							},
							{
								"source": {
									"name": "Site_Visit_Date",
									"type": "DateTime",
									"physicalType": "datetime"
								},
								"sink": {
									"name": "Site_Visit_Date",
									"type": "String",
									"physicalType": "String"
								}
							},
							{
								"source": {
									"name": "ASV_USV",
									"type": "String",
									"physicalType": "varchar"
								},
								"sink": {
									"name": "ASV_USV",
									"type": "String",
									"physicalType": "String"
								}
							},
							{
								"source": {
									"name": "Number_Of_Claims",
									"type": "String",
									"physicalType": "varchar"
								},
								"sink": {
									"name": "Number_Of_Claims",
									"type": "String",
									"physicalType": "String"
								}
							},
							{
								"source": {
									"name": "£ Committed",
									"type": "String",
									"physicalType": "varchar"
								},
								"sink": {
									"name": "£ Committed",
									"type": "String",
									"physicalType": "String"
								}
							},
							{
								"source": {
									"name": "Committed Left",
									"type": "String",
									"physicalType": "varchar"
								},
								"sink": {
									"name": "Committed Left",
									"type": "String",
									"physicalType": "String"
								}
							},
							{
								"source": {
									"name": "Actual_Duration",
									"type": "String",
									"physicalType": "varchar"
								},
								"sink": {
									"name": "Actual_Duration",
									"type": "String",
									"physicalType": "String"
								}
							},
							{
								"source": {
									"name": "Sitting_Days_Claimed",
									"type": "String",
									"physicalType": "varchar"
								},
								"sink": {
									"name": "Sitting_Days_Claimed",
									"type": "String",
									"physicalType": "String"
								}
							},
							{
								"source": {
									"name": "Preparation_Time",
									"type": "String",
									"physicalType": "varchar"
								},
								"sink": {
									"name": "Preparation_Time",
									"type": "String",
									"physicalType": "String"
								}
							},
							{
								"source": {
									"name": "Reporting_Time",
									"type": "String",
									"physicalType": "varchar"
								},
								"sink": {
									"name": "Reporting_Time",
									"type": "String",
									"physicalType": "String"
								}
							},
							{
								"source": {
									"name": "Cost_Of_Claims",
									"type": "String",
									"physicalType": "varchar"
								},
								"sink": {
									"name": "Cost_Of_Claims",
									"type": "String",
									"physicalType": "String"
								}
							},
							{
								"source": {
									"name": "Date_File_To_Inspector",
									"type": "DateTime",
									"physicalType": "datetime"
								},
								"sink": {
									"name": "Date_File_To_Inspector",
									"type": "String",
									"physicalType": "String"
								}
							},
							{
								"source": {
									"name": "Receipt_Of_DecisionReport",
									"type": "DateTime",
									"physicalType": "datetime"
								},
								"sink": {
									"name": "Receipt_Of_DecisionReport",
									"type": "String",
									"physicalType": "String"
								}
							},
							{
								"source": {
									"name": "Date_Sent_To_Reader",
									"type": "DateTime",
									"physicalType": "datetime"
								},
								"sink": {
									"name": "Date_Sent_To_Reader",
									"type": "String",
									"physicalType": "String"
								}
							},
							{
								"source": {
									"name": "Readers_Name",
									"type": "String",
									"physicalType": "varchar"
								},
								"sink": {
									"name": "Readers_Name",
									"type": "String",
									"physicalType": "String"
								}
							},
							{
								"source": {
									"name": "Date_Returned_From_Reader",
									"type": "DateTime",
									"physicalType": "datetime"
								},
								"sink": {
									"name": "Date_Returned_From_Reader",
									"type": "String",
									"physicalType": "String"
								}
							},
							{
								"source": {
									"name": "Date_DecisionReport_Despatched",
									"type": "DateTime",
									"physicalType": "datetime"
								},
								"sink": {
									"name": "Date_DecisionReport_Despatched",
									"type": "String",
									"physicalType": "String"
								}
							},
							{
								"source": {
									"name": "Decision_Recommendation",
									"type": "String",
									"physicalType": "varchar"
								},
								"sink": {
									"name": "Decision_Recommendation",
									"type": "String",
									"physicalType": "String"
								}
							},
							{
								"source": {
									"name": "Date_Publication_Procedure_Completed",
									"type": "DateTime",
									"physicalType": "datetime"
								},
								"sink": {
									"name": "Date_Publication_Procedure_Completed",
									"type": "String",
									"physicalType": "String"
								}
							},
							{
								"source": {
									"name": "Date_File_To_PA",
									"type": "DateTime",
									"physicalType": "datetime"
								},
								"sink": {
									"name": "Date_File_To_PA",
									"type": "String",
									"physicalType": "String"
								}
							},
							{
								"source": {
									"name": "Associated_File_1",
									"type": "String",
									"physicalType": "varchar"
								},
								"sink": {
									"name": "Associated_File_1",
									"type": "String",
									"physicalType": "String"
								}
							},
							{
								"source": {
									"name": "Associated_File_2",
									"type": "String",
									"physicalType": "varchar"
								},
								"sink": {
									"name": "Associated_File_2",
									"type": "String",
									"physicalType": "String"
								}
							},
							{
								"source": {
									"name": "Date_Costs_Report_Despatched",
									"type": "DateTime",
									"physicalType": "datetime"
								},
								"sink": {
									"name": "Date_Costs_Report_Despatched",
									"type": "String",
									"physicalType": "String"
								}
							},
							{
								"source": {
									"name": "Associated_File_3",
									"type": "String",
									"physicalType": "varchar"
								},
								"sink": {
									"name": "Associated_File_3",
									"type": "String",
									"physicalType": "String"
								}
							},
							{
								"source": {
									"name": "Associated_File_4",
									"type": "String",
									"physicalType": "varchar"
								},
								"sink": {
									"name": "Associated_File_4",
									"type": "String",
									"physicalType": "String"
								}
							},
							{
								"source": {
									"name": "Date_Costs_Order_Originated",
									"type": "DateTime",
									"physicalType": "datetime"
								},
								"sink": {
									"name": "Date_Costs_Order_Originated",
									"type": "String",
									"physicalType": "String"
								}
							},
							{
								"source": {
									"name": "Associated_File_5",
									"type": "String",
									"physicalType": "varchar"
								},
								"sink": {
									"name": "Associated_File_5",
									"type": "String",
									"physicalType": "String"
								}
							},
							{
								"source": {
									"name": "Associated_File_6",
									"type": "String",
									"physicalType": "varchar"
								},
								"sink": {
									"name": "Associated_File_6",
									"type": "String",
									"physicalType": "String"
								}
							},
							{
								"source": {
									"name": "Associated_File_7",
									"type": "String",
									"physicalType": "varchar"
								},
								"sink": {
									"name": "Associated_File_7",
									"type": "String",
									"physicalType": "String"
								}
							},
							{
								"source": {
									"name": "Associated_File_8",
									"type": "String",
									"physicalType": "varchar"
								},
								"sink": {
									"name": "Associated_File_8",
									"type": "String",
									"physicalType": "String"
								}
							},
							{
								"source": {
									"name": "Associated_File_9",
									"type": "String",
									"physicalType": "varchar"
								},
								"sink": {
									"name": "Associated_File_9",
									"type": "String",
									"physicalType": "String"
								}
							},
							{
								"source": {
									"name": "Notes",
									"type": "String",
									"physicalType": "varchar"
								},
								"sink": {
									"name": "Notes",
									"type": "String",
									"physicalType": "String"
								}
							},
							{
								"source": {
									"name": "OMA Stance",
									"type": "String",
									"physicalType": "varchar"
								},
								"sink": {
									"name": "OMA Stance",
									"type": "String",
									"physicalType": "String"
								}
							},
							{
								"source": {
									"name": "Last Sitting Day",
									"type": "DateTime",
									"physicalType": "datetime"
								},
								"sink": {
									"name": "Last Sitting Day",
									"type": "String",
									"physicalType": "String"
								}
							},
							{
								"source": {
									"name": "Recharged to Defra",
									"type": "String",
									"physicalType": "varchar"
								},
								"sink": {
									"name": "Recharged to Defra",
									"type": "String",
									"physicalType": "String"
								}
							},
							{
								"source": {
									"name": "Name of Applicant",
									"type": "String",
									"physicalType": "varchar"
								},
								"sink": {
									"name": "Name of Applicant",
									"type": "String",
									"physicalType": "String"
								}
							},
							{
								"source": {
									"name": "Decision clear for despatch",
									"type": "String",
									"physicalType": "varchar"
								},
								"sink": {
									"name": "Decision clear for despatch",
									"type": "String",
									"physicalType": "String"
								}
							},
							{
								"source": {
									"name": "PDAC_ETL_Date",
									"type": "DateTime",
									"physicalType": "datetime"
								},
								"sink": {
									"name": "PDAC_ETL_Date",
									"type": "String",
									"physicalType": "String"
								}
							}
						],
						"typeConversion": true,
						"typeConversionSettings": {
							"allowDataTruncation": true,
							"treatBooleanAsNumber": false
						}
					}
				},
				"inputs": [
					{
						"referenceName": "HZN_Right_Of_Way",
						"type": "DatasetReference"
					}
				],
				"outputs": [
					{
						"referenceName": "HZN_RightOfWay",
						"type": "DatasetReference",
						"parameters": {
							"FileName": "HZNRightOfWay.csv"
						}
					}
				]
			},
			{
				"name": "ROW_Data_Copy_Failure1",
				"description": "ROW data loading into the RAW ODW Layer as csv has failed",
				"type": "Fail",
				"dependsOn": [
					{
						"activity": "HZN_Right_of_Way",
						"dependencyConditions": [
							"Failed"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"message": "The Horizon ROW load to RAW has failed",
					"errorCode": "HZN_Data_Copy_ROW"
				}
			},
			{
				"name": "Logging Failed Activities-11",
				"type": "SynapseNotebook",
				"dependsOn": [
					{
						"activity": "ROW_Data_Copy_Failure1",
						"dependencyConditions": [
							"Completed"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"notebook": {
						"referenceName": "py_fail_activity_logging",
						"type": "NotebookReference"
					},
					"parameters": {
						"output": {
							"value": {
								"value": "@activity('ROW_Data_Copy_Failure1').output.message",
								"type": "Expression"
							},
							"type": "string"
						}
					},
					"snapshot": true,
					"conf": {
						"spark.dynamicAllocation.enabled": null,
						"spark.dynamicAllocation.minExecutors": null,
						"spark.dynamicAllocation.maxExecutors": null
					},
					"numExecutors": null
				}
			},
			{
				"name": "Picasso_Data_Copy",
				"description": "Getting the Picasso system data into ODW Raw",
				"type": "Copy",
				"dependsOn": [],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderQuery": "select\n\tC.[CaseNumber] as case_reference_number\n\t,REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(C.[CaseNumber],'W/', ''), 'D/', ''), 'BC', ''), 'H/', ''), 'Z/', ''), 'EN', ''), 'Y/','') as appeal_reference_number\n\t,C.Application_Description as development_or_allegation\n\t,CL.[Subject] as apellant\n\t,C.[Site_Address] as site_address_line_1\n\t,COALESCE(C.[Site_Postcode], C.[Site_nearestPostcode]) as site_address_postcode\n\t,C.[Application_Reference] as lpa_application_reference\n\t,0 as redetermined\n\t,0 as has_bespoke_target\n\t,'No' as enforcement_linked\n\t,CAST(C.Timeline4_CaseTurnedAwayDate as date) as appeal_turned_away_date\n\t,CAST(C.Timeline4_CaseWithdrawnDate as date) as appeal_withdrawn_date\n\t,CAST(C.Deadline as date) as target_date\n\t,'No' as is_kiosk\n\t,0 as in_measure\n\t,case \n\t\twhen C.Timeline1_ValidationDate is not null and C.Timeline3_DecisionIssuedDate is not null and t.target_days is not null then\n\t\t\tcase\n\t\t\t\twhen datediff(day, C.Timeline1_ValidationDate, C.Timeline3_DecisionIssuedDate ) > t.target_days then 'Fail'\n\t\t\t\telse 'Pass'\n\t\t\tend\n\t\telse 'NA'\n\tend as was_target_hit\n\t,case\n\t\twhen C.Timeline1_ValidationDate is not null and C.Timeline3_DecisionIssuedDate is not null and t.target_days is not null then\n\t\t\tcase\n\t\t\t\twhen datediff(day, C.Timeline1_ValidationDate, C.Timeline3_DecisionIssuedDate) > t.target_days - 28 then 'Fail'\n\t\t\t\telse 'Pass'\n\t\t\tend\n\t\telse 'NA'\n\tend as was_legacy_target_hit\n\t,CASE ISNULL(rc.AppNum, 0) \n\t\tWHEN 0 THEN \n\t\t\tCASE ISNULL(rsp.CaseReference, 0)\n\t\t\t\tWHEN 0 THEN 0\n\t\t\t\tELSE \n\t\t\t\t\tCASE rsp.ReadingStatusValue\n\t\t\t\t\t\tWHEN 'Unread' THEN 0\n\t\t\t\t\t\tELSE 1\n\t\t\t\t\t\tEND\n\t\t\t\tEND\n\t\tELSE \n\t\t\tCASE rc.[Reader Name] \n\t\t\t\tWHEN 'UNREAD' THEN 0 \n\t\t\t\tELSE 1 \n\t\t\t\tEND \n\t\tEND AS is_reading_case\n\t,C.Offices_Floorspace as FloorSpaceInSquareMetres \n\t,CASE C.Preferred_Preference\n\t\t\tWHEN 'Written Representations' THEN 'WR'\n\t\t\tWHEN 'Hearing' THEN 'IH'\n\t\t\tWHEN 'Inquiry' THEN 'LI'\n\t\t\tWHEN 'No Preference' THEN 'Un'\n\t\t\tELSE 'NA'\t\t\n\t\tEND as AppellantProcedure\n\n\t,CAST(C.Timeline1_ValidationDate as date) as AppealsDocumentsComplete\n\t,CASE\n\t\tWHEN C.Timeline4_CaseTurnedAwayDate IS NOT NULL THEN 'TA'\n\t\tWHEN C.Timeline4_CaseWithdrawnDate IS NOT NULL THEN 'WD'\n\t\tWHEN C.Application_CaseDecision = 'Allowed' THEN 'A'\n\t\tWHEN C.Application_CaseDecision = 'Dismissed' THEN 'D'\n\t\tWHEN C.Application_CaseDecision = 'Split Decision' THEN 'S'\n\t\tWHEN C.Application_CaseDecision = 'Invalid' THEN 'In'\n\t\tELSE CASE ISNULL(C.Timeline3_DecisionIssuedDate, '1899-12-31')\n\t\t\t\tWHEN '1899-12-31' THEN NULL\n\t\t\t\tELSE 'U'\n\t\t\tEND\n\tEND AS DecisionCode\n\t,CASE\n\t\tWHEN C.Timeline4_CaseTurnedAwayDate IS NOT NULL THEN 'Turned Away'\n\t\tWHEN C.Timeline4_CaseWithdrawnDate IS NOT NULL THEN 'Appeal Withdrawn'\n\t\tWHEN C.Application_CaseDecision = 'Allowed' THEN 'Allowed'\n\t\tWHEN C.Application_CaseDecision = 'Dismissed' THEN 'Dismissed'\n\t\tWHEN C.Application_CaseDecision = 'Split Decision' THEN 'Split Decision'\n\t\tWHEN C.Application_CaseDecision = 'Invalid' THEN 'Invalid'\n\t\tELSE \n\t\t\tCASE ISNULL(C.Timeline3_DecisionIssuedDate, '1899-12-31')\n\t\t\t\tWHEN '1899-12-31' THEN NULL\n\t\t\t\tELSE ISNULL(C.Application_CaseDecision, 'Unknown')\n\t\t\tEND\n\tEND AS DecisionCodeDesc\n\t,CAST(C.Timeline3_DecisionIssuedDate as date) as appeal_decided_date\n\t,'Picaso' as source_system\n\t,C.[Programming_SiteVisitTime]  as SiteVisitTime\n\t,CAST(C.[Timeline5_StatementOfCommonGroundDue] as date) as [Timeline5_StatementOfCommonGroundDue]\n\t,CAST(C.[Timeline5_StatementOfCommonGroundPublished] as date) as [Timeline5_StatementOfCommonGroundPublished]\n\t,CAST(C.[Timeline5_AppellantStatementPublished] as date) as [Timeline5_AppellantStatementPublished]\n\t,CAST(C.[Timeline5_AppellantStatementDue] as date) as [Timeline5_AppellantStatementDue]\n\t,C.[Ownership_Permission]\n\t,C.Programming_SiteVisitType as event_code\n\t,cast(C.Timeline4_LpaApplDate as date) as lpa_application_date\n\t,cast(C.Timeline4_LpaApplDecisionDate as date) as lpa_decision_date\n\t,l.[ONS Code] as ons_code\n\t,coalesce(C.Site_Address, C.Site_GeneratedSiteAddress) as site_address\n\t,case \n\t\twhen job.[Procedure] = 'ID' then 1\n\t\twhen C.Programming_SiteVisitType = 'NSV' then 1\n\t\twhen C.Programming_SiteVisitType = 'VSV' then 1\n\t\telse 0\n\t\tend as is_virtual_event\n\t,'No' as prior_approval\n\t,cast(C.Timeline3_FinalCommentsDueDate as date) as final_comments_due_date\n\t,'Portal' as appeal_source_indicator\nINTO #Picaso\nFROM ODT.CASEDOC C\n\tLEFT OUTER JOIN ODT.CLIENT CL ON C.InvolvedParty_ID = CL.ID\n\n\t--CaseType default to s78 for NULL rows\n\tleft outer join live.dim_appeal_type as appet\n\t\ton\tISNULL(Application_CaseType, '100-MVP') = appet.appeal_type_code_picaso\n\tleft outer join live.dim_target as t\n\t\ton\tcase appet.appeal_type_code \n\t\t\t\twhen '834-RPC' then 'PA'\n\t\t\t\twhen '840-OCF' then 'PA'\n\t\t\t\twhen '841-PRI' then 'PA'\n\t\t\t\twhen '842-RAP' then 'PA'\n\t\t\t\twhen '845-NDE' then 'PA'\n\t\t\t\twhen '847-DIS' then 'PA'\n\t\t\t\twhen '851-LBC' then 'PA'\n\t\t\t\twhen '844-CON' then 'PA'\n\t\t\t\twhen '851-CAV' then 'CAS'\n\t\t\t\twhen '3566-HAS' then 'HAS'\n\t\t\t\telse appet.appeal_type_code\n\t\tend = t.appeal_type_code\n\t\tand CASE C.Preferred_Preference\n\t\t\tWHEN 'Written Representations' THEN 'WR'\n\t\t\tWHEN 'Hearing' THEN 'IH'\n\t\t\tWHEN 'Inquiry' THEN 'LI'\n\t\t\tWHEN 'No Preference' THEN 'Un'\n\t\t\tELSE 'NA'\t\t\n\t\tEND = t.procedure_code\n\n\tleft outer join load.vw_iss_job job\n\t\ton C.CaseNumber = job.Job\n\n\tleft join load.Reading rc \n\t\tON REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE([CaseNumber],'W/', ''), 'D/', ''), 'BC', ''), 'H/', ''), 'Z/', ''), 'EN', ''), 'Y/','') = rc.AppNum\n\n\tleft join load.reading_sp_list rsp \n\t\ton REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE([CaseNumber],'W/', ''), 'D/', ''), 'BC', ''), 'H/', ''), 'Z/', ''), 'EN', ''), 'Y/','') = rsp.CaseReference\n\n\tleft outer join bis.lpa_codes_with_ons l\n\t\ton C.Application_LPA = l.[LPA Code]\n\n\tleft outer join  ODT.REF_CONFIG CFG3 on C.[Status_ID] = CFG3.ID\n\t\tleft outer join Live.dim_processing_state_combined as ps\n\t\t\ton\tCFG3.[Name] = ps.processing_state_p\n\n\twhere \n\t\tC.[CaseNumber] not like ('%4001600%') -- duplicated case pending decision when horizon was turned off. Replaced by 3271676\n\t\tand\tC.CreationDate > '2019-08-06 08:47:21.000' --anything earlier is a test case\n\t\tand C.MarkedForDelete = 0 \n\t\tand C.CaseNumber NOT LIKE 'EN%' --erroneous case names\n\t\tand C.CaseNumber <> 'General' --erroneous case name\n\t\tand ps.open_or_closed <> 'Open' --MP-2366: exclude Picaso Open cases as they were added to Horizon before Picaso shutdown\n\nselect \n\tad1.appeal_reference_number\n\t,cast(coalesce(C.Timeline1_ValidationDate, c.Timeline1_CaseStartDate, C.CreationDate) as date) as valid_date \n\t,cast(C.CreationDate as date) as received_date\n\t,cast(C.Timeline_SiteVisitDate as date) as event_date\n\t,cast(C.Timeline1_caseStartDate as date) as [start_date]\n\t,cast(C.Timeline3_DecisionIssuedDate as date) as decided_date\n\t,cast(sub.first_submission_date as date) as first_submission_date\n\t,cast(sub.last_submission_date AS date) as last_submission_date\n\n\t/* For closed cases, take DecisionIssuedDate or maximum available other date as end date */\n\t,case ps.open_or_closed \n\t\twhen 'Closed' then\tcoalesce(C.Timeline3_DecisionIssuedDate, (select Max(GimmeSomeDates) from  (values (C.Timeline1_ValidationDate),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(C.Timeline3_DecisionIssuedDate),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(C.Timeline4_caseTurnedAwayDate),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(C.Timeline4_caseWithdrawnDate),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(C.Timeline_SiteVisitDate),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(C.Timeline1_caseStartDate),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(C.CreationDate)) AS DatesDatesDates(GimmeSomeDates)), C.Timeline3_DecisionIssuedDate)\n\t\telse NULL\n\tend as appeal_end_date\n\t,p.[procedure_name]\n\t,lpa.lpa_code\n\t,lpa.lpa_name\n\t,appet.appeal_type\n\t,j.jurisdiction_name as jurisdiction\n\t,dt.development_type_name as development_type\n\t,case len(coalesce(ins2.pins_staff_number, ins.pins_staff_number, null))\n\t\twhen 6 then '00' + cast(ins.pins_staff_number as varchar(8))\n\t\telse cast(coalesce(ins2.pins_staff_number, ins.pins_staff_number, null) as varchar(8))\n\t\tend as inspector_staff_number\n\n\t,case\n\t\twhen coalesce(ps.open_or_closed_p, 'NA') = 'Open' and coalesce(C.Timeline3_DecisionIssuedDate,  '31-Jan-9999') <= getdate() then 'Closed - Incorrect Processing'\n\t\telse coalesce(ps.processing_state, 'No Processing State Associated') \n\tend as processing_state\n\n\t,sl.spec_level_code as specialism_level_code\n\t,pr.region as site_postcode_region\n\t,t.target_source_key\n\t,co.email_address as case_officer_email\n\n\t,case ps.open_or_closed_p\n\t\twhen 'Closed' then 'Closed'\n\t\twhen 'Open' then ops.open_processing_stage_name\n\t\telse 'No State Available'\n\tend as open_processing_stage\n\n\t/****duration measures******/\n\t,isnull(case\n\t\twhen ps.open_or_closed_p = 'Open' and coalesce(C.Timeline3_DecisionIssuedDate,  '31-Jan-9999') = '31-Jan-9999'  then datediff(day, C.Timeline1_ValidationDate, getdate()) / 7.0\n\t\telse null\n\tend,0) as open_valid_to_today_weeks\n\n\t,CASE WHEN isnull(case\n\t\twhen ps.open_or_closed_p = 'Open' and coalesce(C.Timeline3_DecisionIssuedDate,  '31-Jan-9999') = '31-Jan-9999'  then datediff(day, C.Timeline1_ValidationDate, getdate()) / 7.0\n\t\telse null\n\tend,0) <= t.target_weeks THEN 'Within Target'\n\tELSE 'Outside Target'\n\tEND as open_valid_to_today_target_status\n\n\t,isnull(case\n\t\twhen ps.open_or_closed_p = 'Open' and coalesce(C.Timeline3_DecisionIssuedDate,  '31-Jan-9999') = '31-Jan-9999' then datediff(day, C.Timeline_SiteVisitDate, getdate()) / 7.0\n\t\telse null\n\tend,0) as open_sitting_to_today_weeks\n\t\n\t,datediff(day, C.Timeline1_ValidationDate, C.Timeline1_caseStartDate) / 7.0 as valid_to_start_weeks\n\t,datediff(day, C.Timeline1_ValidationDate, C.Timeline_SiteVisitDate) / 7.0 as valid_to_sitting_weeks\n\t,datediff(day, C.Timeline1_caseStartDate, C.Timeline3_DecisionIssuedDate) / 7.0 as start_to_decision_weeks\n\t,datediff(day, C.Timeline1_ValidationDate, C.Timeline3_DecisionIssuedDate) / 7.0 as valid_to_decision_weeks\n\t,datediff(day, C.CreationDate, C.Timeline3_DecisionIssuedDate) / 7.0 as received_to_decision_weeks\n\t,datediff(day, C.Timeline_SiteVisitDate, C.Timeline3_DecisionIssuedDate) / 7.0 as sitting_to_decision_weeks\n\t,datediff(day, C.Timeline1_caseStartDate, C.Timeline_SiteVisitDate) / 7.0 as start_to_sitting_weeks\n\t,datediff(day, C.CreationDate, C.Timeline1_ValidationDate) / 7.0 as received_to_valid_weeks\n\n\t,isnull(case\n\t\twhen ps.open_or_closed_p = 'Open' and coalesce(C.Timeline3_DecisionIssuedDate,  '31-Jan-9999') = '31-Jan-9999' then (datediff(day, C.Timeline_SiteVisitDate, getdate())) / 7.0\n\t\telse null\n\tend,0) as open_weeks_since_sitting\n\n\t,datediff(day, C.Timeline_SiteVisitDate, sub.first_submission_date) / 7.0 as sitting_to_first_submission_weeks\n\t,datediff(day, C.Timeline_SiteVisitDate, sub.last_submission_date) / 7.0 as sitting_to_last_submission_weeks\n\t,datediff(day, sub.last_submission_date, Timeline3_DecisionIssuedDate) / 7.0 as last_submission_to_decision_weeks\n\n\t,live.DATEADDNOWKNOBH(C.Timeline_SiteVisitDate+1,t.inspector_personal_target_working_days) AS inspector_personal_target_date\n\t,case ISNULL(ad1.last_submission_date, '1899-12-31')\n\t\twhen '1899-12-31' then 'ISS Submission Date missing'\n\t\telse\n\t\t\tcase \n\t\t\t\twhen ad1.last_submission_date <= live.DATEADDNOWKNOBH(C.Timeline_SiteVisitDate+1,t.inspector_personal_target_working_days) then 'In Target'\n\t\t\t\telse 'Missed Target'\n\t\t\t end \n\tend as inspector_personal_target_marker\n\n\t --Decision > Submitted > Event > Started > Valid > Received\n\t ,case\n\t\twhen d_s.dim_date_key < d_sd.dim_date_key then 0\n\t\t\telse case\n\t\t\t\twhen d_sd.dim_date_key < d_v.dim_date_key then 0\n\t\t\t\telse case\n\t\t\t\t\twhen d_v.dim_date_key < d_r.dim_date_key then 0\n\t\t\t\t\telse 1\n\t\t\t\t\tend\n\t\t\t\tend\n\t end as date_order_flag\n\n\t,isnull(case\n\t\twhen ps.open_or_closed_p = 'Open' and coalesce(C.Timeline3_DecisionIssuedDate,  '31-Jan-9999') = '31-Jan-9999'  then datediff(day, C.CreationDate, getdate()) / 7.0\n\t\telse null\n\tend,0) as open_received_to_today_weeks\n\n   ,datediff(day, C.CreationDate, C.Timeline3_DecisionIssuedDate) / 7.0 as received_to_end_weeks\n\n   ,isnull(case \n\t\twhen ps.open_or_closed_p = 'Open' and coalesce(C.Timeline3_DecisionIssuedDate,  '31-Jan-9999') = '31-Jan-9999'  then datediff(day,C.Timeline1_caseStartDate,getdate())/7.0\n\t\telse null\n\tend,0) as open_start_to_today_weeks\n\t\n\t,isnull(case \n\t\twhen ps.open_or_closed = 'Open' and coalesce(C.Timeline3_DecisionIssuedDate,  '31-Jan-9999') = '31-Jan-9999'  then datediff(day,sub.last_submission_date,getdate())/7.0\n\t\telse null\n\tend,0) as open_submit_to_today_weeks\n\n\t,case isnull(t.GDT_valid_to_start, 0)\n\t\twhen 0 then 'N/A'\n\t\telse\n\t\t\tcase coalesce(C.Timeline1_ValidationDate, -999)\n\t\t\t\twhen -999 then 'N/A'\n\t\t\t\telse case coalesce(C.Timeline1_caseStartDate,-998)\n\t\t\t\t\t\twhen -998 then case sign(t.GDT_valid_to_start - datediff(day, C.Timeline1_ValidationDate, getDate()) / 7.0)\n\t\t\t\t\t\t\t\t\t\twhen -1 then 'N'\n\t\t\t\t\t\t\t\t\t\telse 'Y'\n\t\t\t\t\t\t\t\t\t\tend\n\t\t\t\t\t\telse case sign(t.GDT_valid_to_start - datediff(day, C.Timeline1_ValidationDate, C.Timeline1_caseStartDate) / 7.0)\n\t\t\t\t\t\t\t\twhen -1 then 'N'\n\t\t\t\t\t\t\t\telse 'Y'\n\t\t\t\t\t\t\t\tend\n\t\t\t\t\t\tend\n\t\t\t\tend \n\t\tend as was_gdt_VtoS_hit\n\n\n\t,case isnull(t.GDT_start_to_event, 0)\n\t\twhen 0 then 'N/A'\n\t\telse\n\t\t\tcase coalesce(C.Timeline1_caseStartDate, -999)\n\t\t\t\twhen -999 then 'N/A'\n\t\t\t\telse \n\t\t\t\t\tcase coalesce(C.Timeline_SiteVisitDate,-997)\n\t\t\t\t\t\twhen -997 then case sign(t.GDT_start_to_event - datediff(day,  C.Timeline1_caseStartDate, getDate()) / 7.0)\n\t\t\t\t\t\t\t\t\t\twhen -1 then 'N'\n\t\t\t\t\t\t\t\t\t\telse 'Y'\n\t\t\t\t\t\t\t\t\t\tend\n\t\t\t\t\t\telse case sign(t.GDT_start_to_event - datediff(day, C.Timeline1_caseStartDate, C.Timeline_SiteVisitDate) / 7.0)\n\t\t\t\t\t\t\t\twhen -1 then 'N'\n\t\t\t\t\t\t\t\telse 'Y'\n\t\t\t\t\t\t\t\tend\n\t\t\t\t\t\tend\n\t\t\tend \n\t\tend as was_gdt_StoE_hit\n\n\t,case isnull(t.GDT_event_to_decision, 0)\n\t\twhen 0 then 'N/A'\n\t\telse \n\t\t\tcase coalesce(C.Timeline_SiteVisitDate, -999)\n\t\t\t\twhen -999 then 'N/A'\n\t\t\t\telse \n\t\t\t\t\tcase coalesce(C.Timeline3_DecisionIssuedDate,-998)\n\t\t\t\t\t\twhen -998 then case sign(t.GDT_event_to_decision - datediff(day,  C.Timeline_SiteVisitDate, getDate()) / 7.0)\n\t\t\t\t\t\t\t\t\t\twhen -1 then 'N'\n\t\t\t\t\t\t\t\t\t\telse 'Y'\n\t\t\t\t\t\t\t\t\t\tend\n\t\t\t\t\t\telse case sign(t.GDT_event_to_decision - datediff(day, C.Timeline_SiteVisitDate, C.Timeline3_DecisionIssuedDate) / 7.0)\n\t\t\t\t\t\t\t\twhen -1 then 'N'\n\t\t\t\t\t\t\t\telse 'Y'\n\t\t\t\t\t\t\t\tend\n\t\t\t\t\t\tend\n\t\t\t\tend \n\t\tend as was_gdt_EtoD_hit\n--------------------------------------------------------------------------------------------------------------------------------------\n\t\t,case charindex('N-', (case ISNULL(t.GDT_valid_to_start, 0)\n\t\t\twhen 0 then 'N/A'\n\t\t\telse\n\t\t\t\tcase coalesce(C.Timeline1_ValidationDate, -999)\n\t\t\t\t\twhen -999 then 'N/A'\n\t\t\t\t\telse case coalesce(C.Timeline1_caseStartDate,-998)\n\t\t\t\t\t\t\twhen -998 then case sign(t.GDT_valid_to_start - datediff(day, C.Timeline1_ValidationDate, getDate()) / 7.0)\n\t\t\t\t\t\t\t\t\t\t\twhen -1 then 'N'\n\t\t\t\t\t\t\t\t\t\t\telse 'Y'\n\t\t\t\t\t\t\t\t\t\t\tend\n\t\t\t\t\t\t\telse case sign(t.GDT_valid_to_start - datediff(day, C.Timeline1_ValidationDate, C.Timeline1_caseStartDate) / 7.0)\n\t\t\t\t\t\t\t\t\twhen -1 then 'N'\n\t\t\t\t\t\t\t\t\telse 'Y'\n\t\t\t\t\t\t\t\t\tend\n\t\t\t\t\t\t\tend\n\t\t\t\t\tend \n\t\t\tend + '-' \n\t\t+ case isnull(t.GDT_start_to_event, 0)\n\t\t\twhen 0 then 'N/A'\n\t\t\telse\n\t\t\t\tcase coalesce(C.Timeline1_caseStartDate, -999)\n\t\t\t\t\twhen -999 then 'N/A'\n\t\t\t\t\telse \n\t\t\t\t\t\tcase coalesce(C.Timeline_SiteVisitDate,-997)\n\t\t\t\t\t\t\twhen -997 then case sign(t.GDT_start_to_event - datediff(day,  C.Timeline1_caseStartDate, getDate()) / 7.0)\n\t\t\t\t\t\t\t\t\t\t\twhen -1 then 'N'\n\t\t\t\t\t\t\t\t\t\t\telse 'Y'\n\t\t\t\t\t\t\t\t\t\t\tend\n\t\t\t\t\t\t\telse case sign(t.GDT_start_to_event - datediff(day, C.Timeline1_caseStartDate, C.Timeline_SiteVisitDate) / 7.0)\n\t\t\t\t\t\t\t\t\twhen -1 then 'N'\n\t\t\t\t\t\t\t\t\telse 'Y'\n\t\t\t\t\t\t\t\t\tend\n\t\t\t\t\t\t\tend\n\t\t\t\tend \n\t\tend + '-' + \n\tcase isnull(t.GDT_event_to_decision, 0)\n\t\twhen 0 then 'N/A'\n\t\telse \n\t\t\tcase coalesce(C.Timeline_SiteVisitDate, -999)\n\t\t\t\twhen -999 then 'N/A'\n\t\t\t\telse \n\t\t\t\t\tcase coalesce(C.Timeline3_DecisionIssuedDate,-998)\n\t\t\t\t\t\twhen -998 then case sign(t.GDT_event_to_decision - datediff(day,  C.Timeline_SiteVisitDate, getDate()) / 7.0)\n\t\t\t\t\t\t\t\t\t\twhen -1 then 'N'\n\t\t\t\t\t\t\t\t\t\telse 'Y'\n\t\t\t\t\t\t\t\t\t\tend\n\t\t\t\t\t\telse case sign(t.GDT_event_to_decision - datediff(day, C.Timeline_SiteVisitDate, C.Timeline3_DecisionIssuedDate) / 7.0)\n\t\t\t\t\t\t\t\twhen -1 then 'N'\n\t\t\t\t\t\t\t\telse 'Y'\n\t\t\t\t\t\t\t\tend\n\t\t\t\t\t\tend\n\t\t\t\tend \n\t\tend + '-'), 1)\n\t\t\twhen 0 then --check for Y\n\t\t\t\tcase charindex('N/A-', (case ISNULL(t.GDT_valid_to_start, 0)\n\t\t\twhen 0 then 'N/A'\n\t\t\telse\n\t\t\t\tcase coalesce(C.Timeline1_ValidationDate, -999)\n\t\t\t\t\twhen -999 then 'N/A'\n\t\t\t\t\telse case coalesce(C.Timeline1_caseStartDate,-998)\n\t\t\t\t\t\t\twhen -998 then case sign(t.GDT_valid_to_start - datediff(day, C.Timeline1_ValidationDate, getDate()) / 7.0)\n\t\t\t\t\t\t\t\t\t\t\twhen -1 then 'N'\n\t\t\t\t\t\t\t\t\t\t\telse 'Y'\n\t\t\t\t\t\t\t\t\t\t\tend\n\t\t\t\t\t\t\telse case sign(t.GDT_valid_to_start - datediff(day, C.Timeline1_ValidationDate, C.Timeline1_caseStartDate) / 7.0)\n\t\t\t\t\t\t\t\t\twhen -1 then 'N'\n\t\t\t\t\t\t\t\t\telse 'Y'\n\t\t\t\t\t\t\t\t\tend\n\t\t\t\t\t\t\tend\n\t\t\t\t\tend \n\t\t\tend + '-' \n\t\t+ case isnull(t.GDT_start_to_event, 0)\n\t\t\twhen 0 then 'N/A'\n\t\t\telse\n\t\t\t\tcase coalesce(C.Timeline1_caseStartDate, -999)\n\t\t\t\t\twhen -999 then 'N/A'\n\t\t\t\t\telse \n\t\t\t\t\t\tcase coalesce(C.Timeline_SiteVisitDate,-997)\n\t\t\t\t\t\t\twhen -997 then case sign(t.GDT_start_to_event - datediff(day,  C.Timeline1_caseStartDate, getDate()) / 7.0)\n\t\t\t\t\t\t\t\t\t\t\twhen -1 then 'N'\n\t\t\t\t\t\t\t\t\t\t\telse 'Y'\n\t\t\t\t\t\t\t\t\t\t\tend\n\t\t\t\t\t\t\telse case sign(t.GDT_start_to_event - datediff(day, C.Timeline1_caseStartDate, C.Timeline_SiteVisitDate) / 7.0)\n\t\t\t\t\t\t\t\t\twhen -1 then 'N'\n\t\t\t\t\t\t\t\t\telse 'Y'\n\t\t\t\t\t\t\t\t\tend\n\t\t\t\t\t\t\tend\n\t\t\t\tend \n\t\tend + '-' + \n\tcase isnull(t.GDT_event_to_decision, 0)\n\t\twhen 0 then 'N/A'\n\t\telse \n\t\t\tcase coalesce(C.Timeline_SiteVisitDate, -999)\n\t\t\t\twhen -999 then 'N/A'\n\t\t\t\telse \n\t\t\t\t\tcase coalesce(C.Timeline3_DecisionIssuedDate,-998)\n\t\t\t\t\t\twhen -998 then case sign(t.GDT_event_to_decision - datediff(day,  C.Timeline_SiteVisitDate, getDate()) / 7.0)\n\t\t\t\t\t\t\t\t\t\twhen -1 then 'N'\n\t\t\t\t\t\t\t\t\t\telse 'Y'\n\t\t\t\t\t\t\t\t\t\tend\n\t\t\t\t\t\telse case sign(t.GDT_event_to_decision - datediff(day, C.Timeline_SiteVisitDate, C.Timeline3_DecisionIssuedDate) / 7.0)\n\t\t\t\t\t\t\t\twhen -1 then 'N'\n\t\t\t\t\t\t\t\telse 'Y'\n\t\t\t\t\t\t\t\tend\n\t\t\t\t\t\tend\n\t\t\t\tend \n\t\tend + '-'), 1)\n\t\t\t\t\twhen 0 then 'Y'\n\t\t\t\t\telse\n\t\t\t\t\t\tcase charindex('Y', (case ISNULL(t.GDT_valid_to_start, 0)\n\t\t\twhen 0 then 'N/A'\n\t\t\telse\n\t\t\t\tcase coalesce(C.Timeline1_ValidationDate, -999)\n\t\t\t\t\twhen -999 then 'N/A'\n\t\t\t\t\telse case coalesce(C.Timeline1_caseStartDate,-998)\n\t\t\t\t\t\t\twhen -998 then case sign(t.GDT_valid_to_start - datediff(day, C.Timeline1_ValidationDate, getDate()) / 7.0)\n\t\t\t\t\t\t\t\t\t\t\twhen -1 then 'N'\n\t\t\t\t\t\t\t\t\t\t\telse 'Y'\n\t\t\t\t\t\t\t\t\t\t\tend\n\t\t\t\t\t\t\telse case sign(t.GDT_valid_to_start - datediff(day, C.Timeline1_ValidationDate, C.Timeline1_caseStartDate) / 7.0)\n\t\t\t\t\t\t\t\t\twhen -1 then 'N'\n\t\t\t\t\t\t\t\t\telse 'Y'\n\t\t\t\t\t\t\t\t\tend\n\t\t\t\t\t\t\tend\n\t\t\t\t\tend \n\t\t\tend + '-' \n\t\t+ case isnull(t.GDT_start_to_event, 0)\n\t\t\twhen 0 then 'N/A'\n\t\t\telse\n\t\t\t\tcase coalesce(C.Timeline1_caseStartDate, -999)\n\t\t\t\t\twhen -999 then 'N/A'\n\t\t\t\t\telse \n\t\t\t\t\t\tcase coalesce(C.Timeline_SiteVisitDate,-997)\n\t\t\t\t\t\t\twhen -997 then case sign(t.GDT_start_to_event - datediff(day,  C.Timeline1_caseStartDate, getDate()) / 7.0)\n\t\t\t\t\t\t\t\t\t\t\twhen -1 then 'N'\n\t\t\t\t\t\t\t\t\t\t\telse 'Y'\n\t\t\t\t\t\t\t\t\t\t\tend\n\t\t\t\t\t\t\telse case sign(t.GDT_start_to_event - datediff(day, C.Timeline1_caseStartDate, C.Timeline_SiteVisitDate) / 7.0)\n\t\t\t\t\t\t\t\t\twhen -1 then 'N'\n\t\t\t\t\t\t\t\t\telse 'Y'\n\t\t\t\t\t\t\t\t\tend\n\t\t\t\t\t\t\tend\n\t\t\t\tend \n\t\tend + '-' + \n\tcase isnull(t.GDT_event_to_decision, 0)\n\t\twhen 0 then 'N/A'\n\t\telse \n\t\t\tcase coalesce(C.Timeline_SiteVisitDate, -999)\n\t\t\t\twhen -999 then 'N/A'\n\t\t\t\telse \n\t\t\t\t\tcase coalesce(C.Timeline3_DecisionIssuedDate,-998)\n\t\t\t\t\t\twhen -998 then case sign(t.GDT_event_to_decision - datediff(day,  C.Timeline_SiteVisitDate, getDate()) / 7.0)\n\t\t\t\t\t\t\t\t\t\twhen -1 then 'N'\n\t\t\t\t\t\t\t\t\t\telse 'Y'\n\t\t\t\t\t\t\t\t\t\tend\n\t\t\t\t\t\telse case sign(t.GDT_event_to_decision - datediff(day, C.Timeline_SiteVisitDate, C.Timeline3_DecisionIssuedDate) / 7.0)\n\t\t\t\t\t\t\t\twhen -1 then 'N'\n\t\t\t\t\t\t\t\telse 'Y'\n\t\t\t\t\t\t\t\tend\n\t\t\t\t\t\tend\n\t\t\t\tend \n\t\tend + '-'), 1)\n\t\t\t\t\t\t\twhen 0 then 'N/A'\n\t\t\t\t\t\t\telse 'Y'\n\t\t\t\t\t\t\tend\n\t\t\t\t\tend\n\t\t\telse 'N'\n\t\t\tend as was_gdt_overall_hit\n\n\t ,datediff(day, C.Timeline1_CaseStartDate, sub.last_submission_date) / 7.0 as start_to_last_submission_weeks\n\t,'Picaso' as source_system\n\t,datediff(day, C.CreationDate, C.Timeline1_CaseStartDate) / 7.0 as received_to_start_weeks\n\t,datediff(day, C.CreationDate, C.Timeline_SiteVisitDate) / 7.0 as received_to_event_weeks\n\t,datediff(day, C.Timeline4_LpaApplDecisionDate, C.CreationDate) / 7.0 as lpa_decision_to_received_weeks\n\t,case when C.Timeline_SiteVisitDate IS NOT NULL then\n\t\tcase when datediff(day, C.Timeline_SiteVisitDate, coalesce(sub.last_submission_date, getdate())) / 7.0 <= 4.0 then 'Pass' \n\t\telse 'Fail' end \n\telse 'NA' end as event_to_submission_target_hit \n\t--,P2.case_reference_number\n\t--,P2.appeal_reference_number\n\t,P2.development_or_allegation\n\t,P2.apellant\n\t,P2.site_address_line_1\n\t,P2.site_address_postcode\n\t,P2.lpa_application_reference\n\t,P2.redetermined\n\t,P2.has_bespoke_target\n\t,P2.enforcement_linked\n\t,P2.appeal_turned_away_date\n\t,P2.appeal_withdrawn_date\n\t,P2.target_date\n\t,P2.is_kiosk\n\t,P2.in_measure\n\t,P2.was_target_hit\n\t,P2.was_legacy_target_hit\n\t,P2.is_reading_case\n\t,P2.FloorSpaceInSquareMetres\n\t,P2.AppellantProcedure\n\t,P2.AppealsDocumentsComplete\n\t,P2.DecisionCode\n\t,P2.DecisionCodeDesc\n\t,P2.appeal_decided_date\n\t,P2.source_system\n\t,P2.SiteVisitTime\n\t,P2.Timeline5_StatementOfCommonGroundDue\n\t,P2.Timeline5_StatementOfCommonGroundPublished\n\t,P2.Timeline5_AppellantStatementPublished\n\t,P2.Timeline5_AppellantStatementDue\n\t,P2.Ownership_Permission\n\t,P2.event_code\n\t,P2.lpa_application_date\n\t,P2.lpa_decision_date\n\t,P2.ons_code\n\t,P2.site_address\n\t,P2.is_virtual_event\n\t,P2.prior_approval\n\t,P2.final_comments_due_date\n\t,P2.appeal_source_indicator\n\nFROM [ODT].vw_CASEDOC C\n\t\n\tleft outer join ODT.USER_PROFILE U4 on C.ResponsibleEmployee_ID = U4.ID\n\n\tleft outer join  ODT.REF_CONFIG CFG3 on C.[Status_ID] = CFG3.ID\n\n\tleft outer join ODT.case_CORESPONSIBLE COR on C.ID = COR.OWNERID\n\n\tleft outer join ODT.REF_ORGOBJECT ROO3 on COR.CORESPONSIBLE_ID = ROO3.ID\n\n\tinner join Live.dim_appeal_combined ad1\n\ton replace(replace(C.[caseNumber],'W/', ''), 'D/', '') = ad1.appeal_reference_number\n\n\tleft outer join Live.dim_date as d_v\n\ton\tcast(C.Timeline1_ValidationDate as date) = d_v.[date]\n\n\tleft outer join Live.dim_date as d_r\n\ton\tcast(C.CreationDate as date) = d_r.date\n\n\tleft outer join Live.dim_date as d_s\n\ton\tcast(C.Timeline_SiteVisitDate as date) = d_s.date\n\n\tleft outer join Live.dim_date as d_sd\n\ton\tcast(C.Timeline1_caseStartDate as date) = d_sd.date\n\n\tleft outer join Live.dim_date as d_dd\n\ton\tcast(C.Timeline3_DecisionIssuedDate as date) = d_dd.date\n\n\tleft outer join Live.dim_date as d_ta\n\ton\tcast(C.Timeline4_caseTurnedAwayDate as date) = d_ta.date\n\n\tleft outer join Live.dim_date as d_wd\n\ton\tcast(C.Timeline4_caseWithdrawnDate as date) = d_wd.date\n\n\tleft outer join Live.dim_date as d_vd\n\ton\tcast(C.Timeline1_ValidationDate as date) = d_vd.date\n\n\tleft outer join live.dim_local_planning_authority as lpa\n\ton\tC.Application_LPA = lpa.lpa_code\n\n\tleft outer join Live.dim_processing_state_combined as ps\n\ton\tCFG3.[Name] = ps.processing_state_p\n\n\tleft outer join Live.dim_open_processing_stage ops\n\t\ton ps.open_processing_stage = ops.open_processing_stage_sub_category\n\n\tleft outer join live.dim_postcode_region as pr\n\ton\tcase\n\t\t\twhen len(ltrim(rtrim(replace(replace(C.Site_Postcode, ' ', ''), '(Nearest)', '')))) < 5 then ltrim(rtrim(replace(replace(C.Site_Postcode, ' ', ''), '(Nearest)', '')))\n\t\t\telse left(replace(C.Site_Postcode, ' ', ''), len(ltrim(rtrim(replace(replace(C.Site_Postcode, ' ', ''), '(Nearest)', '')))) -3)\n\t\tend = pr.outbound_postcode\n\n\tleft outer join Live.dim_spec_level as sl\n\t\ton\tC.Allocations_Grade = sl.spec_level_code\n\n\tleft outer join Live.dim_case_officer as co\n\ton\tU4.FullName = co.case_officer_name\n\t\n\tleft outer join load.BIS_Hzn_Inspector_Cases\n\t\ton ad1.appeal_reference_number = BIS_Hzn_Inspector_Cases.AppealRefNumber\n\n\tleft outer join load.sp_list_inspector_map\n\t\ton BIS_Hzn_Inspector_Cases.ContactID = sp_list_inspector_map.HorizonID\n\n\tleft outer join live.dim_inspector ins2\n\t\ton sp_list_inspector_map.StaffNumber = ins2.pins_staff_number\n\n\tleft outer join (select distinct \n\t\t\t\t\t\trank () over(partition by dim_appeal_key order by timesheet_date desc, first_submission_date desc, input_date desc, timesheet_hours desc) as ranking, \n\t\t\t\t\t\tdim_appeal_key, \n\t\t\t\t\t\tdim_inspector_key\n\t\t\t\t\tfrom live.fact_timesheet_combined\n\t\t\t\t\t) timesheet\n\ton ad1.dim_appeal_key = timesheet.dim_appeal_key\n\tand timesheet.ranking = 1\n\t\n\tleft outer join live.dim_inspector ins\n\ton timesheet.dim_inspector_key = ins.dim_inspector_key\n\tand timesheet.ranking = 1\n\t--on ROO3.[Name] = ins.given_names + ' ' + ins.family_name\n\n\tleft outer join live.dim_appeal_type as appet\n\ton\tISNULL(Application_caseType, '100-MVP') = appet.appeal_type_code_picaso\n\t--Kludge to deal with multiple s78 Picaso Appeal Types\n\tleft outer join live.dim_target as t\n\t\ton\tcase appet.appeal_type_code \n\t\t\t\twhen '834-RPC' then 'PA'\n\t\t\t\twhen '840-OCF' then 'PA'\n\t\t\t\twhen '841-PRI' then 'PA'\n\t\t\t\twhen '842-RAP' then 'PA'\n\t\t\t\twhen '845-NDE' then 'PA'\n\t\t\t\twhen '847-DIS' then 'PA'\n\t\t\t\twhen '851-LBC' then 'PA'\n\t\t\t\twhen '844-CON' then 'PA'\n\t\t\t\twhen '851-CAV' then 'CAS'\n\t\t\t\twhen '3566-HAS' then 'HAS'\n\t\t\t\telse appet.appeal_type_code\n\t\tend = t.appeal_type_code\n\t\tand CASE C.Preferred_Preference\n\t\t\tWHEN 'Written Representations' THEN 'WR'\n\t\t\tWHEN 'Hearing' THEN 'IH'\n\t\t\tWHEN 'Inquiry' THEN 'LI'\n\t\t\tWHEN 'No Preference' THEN 'Un'\n\t\t\tELSE 'NA'\t\t\n\t\tEND = t.procedure_code\n\n\tleft outer join live.dim_procedure as p\n\t\ton case C.Preferred_Preference\n\t\t\twhen 'Written Representations' then 'WR'\n\t\t\twhen 'Hearing' then 'IH'\n\t\t\twhen 'Inquiry' then 'LI'\n\t\t\twhen 'No Preference' then 'Un'\n\t\t\telse 'NA'\t\t\n\t\tend = p.procedure_code\n\t--/MP-1373\n\n--Bodged Jurisdiction = PINS\nleft outer join Live.dim_jurisdiction as j\non\t'0' = j.jurisdiction_code\n\nleft outer join\n\t(select\n\t\t[Job Id]\n\t\t,min([Inspector Submit Date]) as first_submission_date\n\t\t,max([Inspector Submit Date]) as last_submission_date\n\t\t,count(*) as quantity_of_submissions\n\tfrom load.mwr_status\n\tgroup by\n\t\t[Job Id]) as sub\non cast(replace(replace(C.[caseNumber],'W/', ''), 'D/', '') as varchar) = sub.[Job Id]\n\nleft outer join Live.dim_date as last_submit_date\non cast(sub.last_submission_date AS date) = last_submit_date.date\n\n/* Bodge to match only the first listed development_type_name_picaso */\nleft outer join live.dim_development_type as dt\non case charindex(',',C.[Application_PlanningType])\n\t\twhen NULL then NULL\n\t\twhen 0 then C.[Application_PlanningType]\n\t\telse LEFT(C.[Application_PlanningType],charindex(',',C.[Application_PlanningType])-1)\n\tend = dt.development_type_name_picaso\n\nleft outer join Live.dim_date as first_submit_date\non cast(sub.first_submission_date AS date) = first_submit_date.date\n\ninner join #Picaso P2 on REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(C.[CaseNumber],'W/', ''), 'D/', ''), 'BC', ''), 'H/', ''), 'Z/', ''), 'EN', ''), 'Y/','') = P2.appeal_reference_number\n\nIf(OBJECT_ID('tempdb..#Picaso') Is Not Null)\nBegin\n    Drop Table #Picaso\nEnd",
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"sink": {
						"type": "DelimitedTextSink",
						"storeSettings": {
							"type": "AzureBlobFSWriteSettings"
						},
						"formatSettings": {
							"type": "DelimitedTextWriteSettings",
							"quoteAllText": true,
							"fileExtension": ".txt"
						}
					},
					"enableStaging": false,
					"translator": {
						"type": "TabularTranslator",
						"typeConversion": true,
						"typeConversionSettings": {
							"allowDataTruncation": true,
							"treatBooleanAsNumber": false
						}
					}
				},
				"inputs": [
					{
						"referenceName": "Picasso_Data_Query",
						"type": "DatasetReference"
					}
				],
				"outputs": [
					{
						"referenceName": "PicassoData",
						"type": "DatasetReference"
					}
				]
			}
		],
		"folder": {
			"name": "0_Raw_Horizon_Data_Copy"
		},
		"annotations": [],
		"lastPublishTime": "2023-01-19T13:05:28Z"
	},
	"type": "Microsoft.Synapse/workspaces/pipelines"
}