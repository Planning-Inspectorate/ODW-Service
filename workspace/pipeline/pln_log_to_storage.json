{
	"name": "pln_log_to_storage",
	"properties": {
		"activities": [
			{
				"name": "Check Stage",
				"type": "IfCondition",
				"dependsOn": [],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@equals(pipeline().parameters.Stage, 'Completion')",
						"type": "Expression"
					},
					"ifFalseActivities": [
						{
							"name": "Log Stage",
							"type": "Copy",
							"dependsOn": [],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "AzureSqlSource",
									"sqlReaderQuery": {
										"value": "SELECT\n    0 AS LogId\n    ,'@{pipeline().parameters.PipelineName}' AS PipelineName                \n    ,'@{pipeline().parameters.PipelineRunID}' AS PipelineRunID\n    ,'@{pipeline().parameters.StartTime}' AS StartTime\n    ,'@{pipeline().parameters.EndTime}' AS EndTime\n    ,'@{pipeline().parameters.DurationSeconds}' AS DurationSeconds\n    ,'@{pipeline().parameters.Inserts}' AS Inserts\n    ,'@{pipeline().parameters.Updates}' AS Updates\n    ,'@{pipeline().parameters.Deletes}' AS Deletes\n    ,'@{pipeline().parameters.ErrorMessage}' AS ErrorMessage\n    ,'@{pipeline().parameters.StatusMessage}' AS StatusMessage\n    ,'@{pipeline().parameters.PipelineTriggerID}' AS PipelineTriggerID\n    ,'@{pipeline().parameters.PipelineTriggerName}' AS PipelineTriggerName\n    ,'@{pipeline().parameters.PipelineTriggerType}' AS PipelineTriggerType\n    ,'@{pipeline().parameters.PipelineTriggeredbyPipelineName}' AS PipelineTriggeredbyPipelineName\n    ,'@{pipeline().parameters.PipelineTriggeredbyPipelineRunID}' AS PipelineTriggeredbyPipelineRunID\n    ,'@{pipeline().parameters.PipelineExecutionTimeInSec}' AS PipelineExecutionTimeInSec\n    ,'@{pipeline().parameters.ActivityType}' AS ActivityType",
										"type": "Expression"
									},
									"queryTimeout": "02:00:00",
									"partitionOption": "None"
								},
								"sink": {
									"type": "JsonSink",
									"storeSettings": {
										"type": "AzureBlobFSWriteSettings",
										"copyBehavior": "FlattenHierarchy"
									},
									"formatSettings": {
										"type": "JsonWriteSettings"
									}
								},
								"enableStaging": false
							},
							"inputs": [
								{
									"referenceName": "ds_odw_main_pipeline_logging",
									"type": "DatasetReference"
								}
							],
							"outputs": [
								{
									"referenceName": "ds_odw_main_pipeline_logs",
									"type": "DatasetReference"
								}
							]
						}
					],
					"ifTrueActivities": [
						{
							"name": "Log Completion",
							"type": "Copy",
							"dependsOn": [],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "AzureSqlSource",
									"sqlReaderQuery": {
										"value": "SELECT\n    0 AS LogId\n    ,PipelineName                \n    ,PipelineRunID\n    ,StartTime\n    ,current_timestamp() AS EndTime\n    ,cast(current_timestamp()-StartTime AS int) AS DurationSeconds\n    ,'@{pipeline().parameters.Inserts}' AS Inserts\n    ,'@{pipeline().parameters.Updates}' AS Updates\n    ,'@{pipeline().parameters.Deletes}' AS Deletes\n    ,'@{pipeline().parameters.ErrorMessage}' AS ErrorMessage\n    ,CONCAT('Complete: ', '@{pipeline().parameters.StatusMessage}') AS StatusMessage\n    ,'@{pipeline().parameters.PipelineTriggerID}' AS PipelineTriggerID\n    ,'@{pipeline().parameters.PipelineTriggerName}' AS PipelineTriggerName\n    ,'@{pipeline().parameters.PipelineTriggerType}' AS PipelineTriggerType\n    ,'@{pipeline().parameters.PipelineTriggeredbyPipelineName}' AS PipelineTriggeredbyPipelineName\n    ,'@{pipeline().parameters.PipelineTriggeredbyPipelineRunID}' AS PipelineTriggeredbyPipelineRunID\n    ,'@{pipeline().parameters.PipelineExecutionTimeInSec}' AS PipelineExecutionTimeInSec\n    ,'@{pipeline().parameters.ActivityType}' AS ActivityType\n    FROM\n        pipeline_logs\n    WHERE\n        PipelineRunID = '@{pipeline().parameters.PipelineRunID}'\n        AND ActivityType = \"Pipeline\"\n        AND StatusMessage = '@{pipeline().parameters.StatusMessage}'",
										"type": "Expression"
									},
									"queryTimeout": "02:00:00",
									"partitionOption": "None"
								},
								"sink": {
									"type": "JsonSink",
									"storeSettings": {
										"type": "AzureBlobFSWriteSettings",
										"copyBehavior": "FlattenHierarchy"
									},
									"formatSettings": {
										"type": "JsonWriteSettings"
									}
								},
								"enableStaging": false
							},
							"inputs": [
								{
									"referenceName": "ds_odw_main_pipeline_logging",
									"type": "DatasetReference"
								}
							],
							"outputs": [
								{
									"referenceName": "ds_odw_main_pipeline_logs",
									"type": "DatasetReference"
								}
							]
						}
					]
				}
			}
		],
		"parameters": {
			"Stage": {
				"type": "string"
			},
			"PipelineName": {
				"type": "string"
			},
			"PipelineRunID": {
				"type": "string"
			},
			"StartTime": {
				"type": "string"
			},
			"EndTime": {
				"type": "string"
			},
			"Inserts": {
				"type": "int",
				"defaultValue": 0
			},
			"Updates": {
				"type": "int",
				"defaultValue": 0
			},
			"Deletes": {
				"type": "int",
				"defaultValue": 0
			},
			"ErrorMessage": {
				"type": "string"
			},
			"StatusMessage": {
				"type": "string"
			},
			"PipelineTriggerID": {
				"type": "string"
			},
			"PipelineTriggerName": {
				"type": "string"
			},
			"PipelineTriggerType": {
				"type": "string"
			},
			"PipelineTriggeredbyPipelineName": {
				"type": "string"
			},
			"PipelineTriggeredbyPipelineRunID": {
				"type": "string"
			},
			"PipelineExecutionTimeInSec": {
				"type": "string"
			},
			"ActivityType": {
				"type": "string"
			},
			"DurationSeconds": {
				"type": "string"
			}
		},
		"folder": {
			"name": "utils"
		},
		"annotations": []
	}
}