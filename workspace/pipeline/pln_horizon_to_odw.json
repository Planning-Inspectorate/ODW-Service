{
	"name": "pln_horizon_to_odw",
	"properties": {
		"activities": [
			{
				"name": "Record horizon to odw data loading",
				"type": "ExecutePipeline",
				"dependsOn": [],
				"policy": {
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "pln_log_to_appins",
						"type": "PipelineReference"
					},
					"waitOnCompletion": true,
					"parameters": {
						"Stage": "Horizon to ODW Load Started",
						"PipelineName": {
							"value": "@pipeline().Pipeline",
							"type": "Expression"
						},
						"PipelineRunID": {
							"value": "@pipeline().RunId",
							"type": "Expression"
						},
						"StartTime": {
							"value": "@formatDateTime(utcnow(), 'yyyy-MM-ddTHH:mm:ssZ')",
							"type": "Expression"
						},
						"StatusMessage": "Loading horizon to Odw",
						"PipelineTriggerID": {
							"value": "@pipeline().TriggerId",
							"type": "Expression"
						},
						"PipelineTriggerName": {
							"value": "@pipeline().TriggerName",
							"type": "Expression"
						},
						"PipelineTriggerType": {
							"value": "@pipeline().TriggerType",
							"type": "Expression"
						},
						"PipelineTriggeredbyPipelineName": {
							"value": "@pipeline()?.TriggeredByPipelineName",
							"type": "Expression"
						},
						"PipelineTriggeredbyPipelineRunID": {
							"value": "@pipeline()?.TriggeredByPipelineRunId",
							"type": "Expression"
						},
						"ActivityType": "Pipeline",
						"AppInsIKey": {
							"value": "@pipeline().parameters.apps_insights_ikey",
							"type": "Expression"
						}
					}
				}
			},
			{
				"name": "Record completed horizon to odw data lode",
				"type": "ExecutePipeline",
				"dependsOn": [
					{
						"activity": "ForEach_Harmonised_NoteBook",
						"dependencyConditions": [
							"Skipped",
							"Completed"
						]
					}
				],
				"policy": {
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "pln_log_to_appins",
						"type": "PipelineReference"
					},
					"waitOnCompletion": true,
					"parameters": {
						"Stage": {
							"value": "@if(\n    equals(\n        trim(\n            concat(\n                activity('Record horizon to odw data loading')?.Error?.message,\n                activity('Lookup_orchestration_file')?.Error?.message,\n                activity('Filter_Horizon_Table')?.Error?.message,\n                activity('Horizon Raw to Std')?.Error?.message,\n                activity('Filter_Harmonised_NoteBook')?.Error?.message,\n                variables('H_NoteBook_errorMessage')\n            )\n        ),\n        ''\n    ),    \n    'Failed',\n    'Successfully'\n)",
							"type": "Expression"
						},
						"PipelineName": {
							"value": "@pipeline().Pipeline",
							"type": "Expression"
						},
						"PipelineRunID": {
							"value": "@pipeline().RunId",
							"type": "Expression"
						},
						"EndTime": {
							"value": "@utcnow()",
							"type": "Expression"
						},
						"ErrorMessage": {
							"value": "@replace(\n    concat(\n        activity('Record horizon to odw data loading')?.Error?.message, '|',\n        activity('Lookup_orchestration_file')?.Error?.message, '|',\n        activity('Filter_Horizon_Table')?.Error?.message, '|',\n        activity('Horizon Raw to Std')?.Error?.message, '|',\n        activity('Filter_Harmonised_NoteBook')?.Error?.message, '|',\n        variables('H_NoteBook_errorMessage')\n    ),\n    '|',\n    ''\n)\n",
							"type": "Expression"
						},
						"StatusMessage": {
							"value": "@if(\n    equals(\n        trim(\n            concat(\n                coalesce(activity('Record horizon to odw data loading')?.Error?.message, ''),\n                coalesce(activity('Lookup_orchestration_file')?.Error?.message, ''),\n                coalesce(activity('Filter_Horizon_Table')?.Error?.message, ''),\n                coalesce(activity('Horizon Raw to Std')?.Error?.message, ''),\n                coalesce(activity('Filter_Harmonised_NoteBook')?.Error?.message, ''),\n                coalesce(variables('H_NoteBook_errorMessage'), '')\n            )\n        ),\n        ''\n    ),\n    'horizon To Odw Failed',\n    'horizon To Odw load Successfully Completed'\n)\n",
							"type": "Expression"
						},
						"PipelineTriggerID": {
							"value": "@pipeline().TriggerId",
							"type": "Expression"
						},
						"PipelineTriggerName": {
							"value": "@pipeline().TriggerName",
							"type": "Expression"
						},
						"PipelineTriggerType": {
							"value": "@pipeline().TriggerType",
							"type": "Expression"
						},
						"PipelineTriggeredbyPipelineName": {
							"value": "@pipeline()?.TriggeredByPipelineName",
							"type": "Expression"
						},
						"PipelineTriggeredbyPipelineRunID": {
							"value": "@pipeline()?.TriggeredByPipelineRunId",
							"type": "Expression"
						},
						"ActivityType": "Pipeline",
						"AppInsIKey": {
							"value": "@pipeline().parameters.apps_insights_ikey",
							"type": "Expression"
						}
					}
				}
			},
			{
				"name": "Lookup_orchestration_file",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "Record horizon to odw data loading",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "JsonSource",
						"storeSettings": {
							"type": "AzureBlobFSReadSettings",
							"recursive": true,
							"enablePartitionDiscovery": false
						},
						"formatSettings": {
							"type": "JsonReadSettings"
						}
					},
					"dataset": {
						"referenceName": "Is_storage_config",
						"type": "DatasetReference",
						"parameters": {
							"folder": "orchestration",
							"file_name": "orchestration.json"
						}
					},
					"firstRowOnly": false
				}
			},
			{
				"name": "ForEach_horizon_files",
				"type": "ForEach",
				"dependsOn": [
					{
						"activity": "Filter_Horizon_Table",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('Filter_Horizon_Table').output.value",
						"type": "Expression"
					},
					"isSequential": false,
					"batchCount": 10,
					"activities": [
						{
							"name": "Incremental Load",
							"description": "Checks whether the current file requires incremental loading. If true, triggers the incremental load branch; otherwise, proceeds with full load.",
							"type": "IfCondition",
							"dependsOn": [],
							"userProperties": [],
							"typeProperties": {
								"expression": {
									"value": "@equals(item().Incremental, true)\n",
									"type": "Expression"
								},
								"ifFalseActivities": [
									{
										"name": "Copy horizon Files",
										"description": "Copies data from Horizon to odw-raw",
										"type": "Copy",
										"dependsOn": [],
										"policy": {
											"timeout": "0.12:00:00",
											"retry": 0,
											"retryIntervalInSeconds": 30,
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"source": {
												"type": "SqlServerSource",
												"queryTimeout": "02:00:00",
												"isolationLevel": "ReadCommitted",
												"partitionOption": "None"
											},
											"sink": {
												"type": "DelimitedTextSink",
												"storeSettings": {
													"type": "AzureBlobFSWriteSettings"
												},
												"formatSettings": {
													"type": "DelimitedTextWriteSettings",
													"quoteAllText": true,
													"fileExtension": ".txt"
												}
											},
											"enableStaging": false,
											"translator": {
												"type": "TabularTranslator",
												"typeConversion": true,
												"typeConversionSettings": {
													"allowDataTruncation": true,
													"treatBooleanAsNumber": false
												}
											}
										},
										"inputs": [
											{
												"referenceName": "ds_Horizon_Source_table",
												"type": "DatasetReference",
												"parameters": {
													"table_name": {
														"value": "@item().Horizon_Table_Name",
														"type": "Expression"
													}
												}
											}
										],
										"outputs": [
											{
												"referenceName": "ds_Horizon_odw_raw",
												"type": "DatasetReference",
												"parameters": {
													"FileName": {
														"value": "@item().Source_Filename_Format",
														"type": "Expression"
													}
												}
											}
										]
									},
									{
										"name": "Record completed horizon to odw data load",
										"type": "ExecutePipeline",
										"dependsOn": [
											{
												"activity": "Copy horizon Files",
												"dependencyConditions": [
													"Completed"
												]
											}
										],
										"policy": {
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"pipeline": {
												"referenceName": "pln_log_to_appins",
												"type": "PipelineReference"
											},
											"waitOnCompletion": true,
											"parameters": {
												"Stage": {
													"value": "@if(or(equals(activity('Copy horizon Files')?.Error?.Message, ''),equals(activity('Copy horizon Files')?.Error?.Message, null)),'Successfully','Failed')\n",
													"type": "Expression"
												},
												"PipelineName": {
													"value": "@pipeline().Pipeline",
													"type": "Expression"
												},
												"PipelineRunID": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"EndTime": {
													"value": "@utcNow()",
													"type": "Expression"
												},
												"Inserts": {
													"value": "@if(\n    or(\n        equals(activity('Copy horizon Files')?.Error?.Message, ''),\n        equals(activity('Copy horizon Files')?.Error?.Message, null)\n    ),\n    activity('Copy horizon Files').output.rowsCopied,\n    ''\n)\n",
													"type": "Expression"
												},
												"ErrorMessage": {
													"value": "@{if(or(equals(activity('Copy horizon Files')?.Error?.Message, ''), equals(activity('Copy horizon Files')?.Error?.Message, null)), '', activity('Copy horizon Files')?.Error?.Message)}",
													"type": "Expression"
												},
												"StatusMessage": {
													"value": "@concat('Data Copied From ', item().Horizon_Table_Name, ' To ', item().Source_Filename_Format)",
													"type": "Expression"
												},
												"PipelineTriggerID": {
													"value": "@pipeline().TriggerId",
													"type": "Expression"
												},
												"PipelineTriggerName": {
													"value": "@pipeline().TriggerName",
													"type": "Expression"
												},
												"PipelineTriggerType": {
													"value": "@pipeline().TriggerType",
													"type": "Expression"
												},
												"PipelineTriggeredbyPipelineName": {
													"value": "@pipeline()?.TriggeredByPipelineName",
													"type": "Expression"
												},
												"PipelineTriggeredbyPipelineRunID": {
													"value": "@pipeline()?.TriggeredByPipelineRunId",
													"type": "Expression"
												},
												"ActivityType": {
													"value": "Copy Activity",
													"type": "Expression"
												},
												"DurationSeconds": {
													"value": "@activity('Copy horizon Files').output.copyDuration\n",
													"type": "Expression"
												},
												"AppInsIKey": {
													"value": "@pipeline().parameters.apps_insights_ikey",
													"type": "Expression"
												}
											}
										}
									},
									{
										"name": "Send horizon to odw copy  data failed",
										"type": "ExecutePipeline",
										"dependsOn": [
											{
												"activity": "Copy horizon Files errorMessage",
												"dependencyConditions": [
													"Succeeded"
												]
											}
										],
										"policy": {
											"secureInput": true
										},
										"userProperties": [],
										"typeProperties": {
											"pipeline": {
												"referenceName": "pln_utl_Send_Teams_Message",
												"type": "PipelineReference"
											},
											"waitOnCompletion": true,
											"parameters": {
												"dataFactorySubscription": {
													"value": "@pipeline().parameters.subscription_id",
													"type": "Expression"
												},
												"dataFactoryResourceGroup": {
													"value": "@pipeline().parameters.resource_group",
													"type": "Expression"
												},
												"pipelineRunId": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"teamsWebhookUrl": {
													"value": "@pipeline().parameters.webhook_url",
													"type": "Expression"
												},
												"activityName": {
													"value": "@pipeline().Pipeline",
													"type": "Expression"
												},
												"activityMessage": "Copy horizon data failed",
												"activityDuration": {
													"value": "@concat(\n    string(div(div(sub(\n        ticks(formatDateTime(utcNow(), 'yyyy-MM-dd HH:mm:sss')),\n        ticks(formatDateTime(if(equals(pipeline().parameters.start_time, null), utcNow(), pipeline().parameters.start_time), 'yyyy-MM-dd HH:mm:sss'))\n    ), 600000000), 60)), 'H:', \n    string(mod(div(sub(\n        ticks(formatDateTime(utcNow(), 'yyyy-MM-dd HH:mm:sss')),\n        ticks(formatDateTime(if(equals(pipeline().parameters.start_time, null), utcNow(), pipeline().parameters.start_time), 'yyyy-MM-dd HH:mm:sss'))\n    ), 600000000), 60)), 'M:00s'\n)",
													"type": "Expression"
												},
												"activityStatus": "Failed",
												"Colour": {
													"value": "@pipeline().parameters.failed_colour",
													"type": "Expression"
												},
												"Image": {
													"value": "@pipeline().parameters.failed_image",
													"type": "Expression"
												},
												"Message_title": "Copy Data from Horizon to ODW_Raw Failed",
												"Message_subtitle": {
													"value": "@concat('Data Copied From ', item().Horizon_Table_Name, ' To ', item().Source_Filename_Format, ' Failed with the following error:    ',variables('errorMessage'))",
													"type": "Expression"
												}
											}
										}
									},
									{
										"name": "Copy horizon Files errorMessage",
										"description": "",
										"type": "SetVariable",
										"dependsOn": [
											{
												"activity": "Copy horizon Files",
												"dependencyConditions": [
													"Failed"
												]
											}
										],
										"policy": {
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"variableName": "errorMessage",
											"value": {
												"value": "@split(activity('Copy horizon Files')?.Error?.Message, ',')[2]",
												"type": "Expression"
											}
										}
									}
								],
								"ifTrueActivities": [
									{
										"name": "Get_LastIngestDate",
										"type": "Lookup",
										"dependsOn": [],
										"policy": {
											"timeout": "0.12:00:00",
											"retry": 0,
											"retryIntervalInSeconds": 30,
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"source": {
												"type": "AzureSqlSource",
												"sqlReaderQuery": {
													"value": "SELECT LastIngestDate \nFROM dbo.last_ingest_dates \nWHERE TableName = '@{item().Horizon_Table_Name}'\n",
													"type": "Expression"
												},
												"queryTimeout": "02:00:00",
												"partitionOption": "None"
											},
											"dataset": {
												"referenceName": "ds_sql_odw",
												"type": "DatasetReference",
												"parameters": {
													"table_name": "last_ingest_dates",
													"db_name": "odw_standardised_db"
												}
											},
											"firstRowOnly": true
										}
									},
									{
										"name": "Set_LastIngestDate",
										"type": "SetVariable",
										"dependsOn": [
											{
												"activity": "Get_LastIngestDate",
												"dependencyConditions": [
													"Succeeded"
												]
											}
										],
										"policy": {
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"variableName": "LastIngestDate",
											"value": {
												"value": "@coalesce(activity('Get_LastIngestDate').output.firstRow.LastIngestDate, '1900-01-01T00:00:00')\n",
												"type": "Expression"
											}
										}
									},
									{
										"name": "Incremental_Copy",
										"type": "Copy",
										"dependsOn": [
											{
												"activity": "Set_LastIngestDate",
												"dependencyConditions": [
													"Succeeded"
												]
											}
										],
										"policy": {
											"timeout": "0.12:00:00",
											"retry": 0,
											"retryIntervalInSeconds": 30,
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"source": {
												"type": "SqlServerSource",
												"sqlReaderQuery": {
													"value": "@concat(\n  'SELECT * FROM ', \n  item().Horizon_Table_Name, \n  ' WHERE ', \n  item().Incremental_Key, \n  ' > ''', \n  variables('LastIngestDate'), \n  ''''\n)",
													"type": "Expression"
												},
												"queryTimeout": "02:00:00",
												"partitionOption": "None"
											},
											"sink": {
												"type": "DelimitedTextSink",
												"storeSettings": {
													"type": "AzureBlobFSWriteSettings"
												},
												"formatSettings": {
													"type": "DelimitedTextWriteSettings",
													"quoteAllText": true,
													"fileExtension": ".txt"
												}
											},
											"enableStaging": false,
											"translator": {
												"type": "TabularTranslator",
												"typeConversion": true,
												"typeConversionSettings": {
													"allowDataTruncation": true,
													"treatBooleanAsNumber": false
												}
											}
										},
										"inputs": [
											{
												"referenceName": "ds_Horizon_Source_table",
												"type": "DatasetReference",
												"parameters": {
													"table_name": "@item().Horizon_Table_Name"
												}
											}
										],
										"outputs": [
											{
												"referenceName": "ds_Horizon_odw_raw",
												"type": "DatasetReference",
												"parameters": {
													"FileName": "@item().Source_Filename_Format"
												}
											}
										]
									},
									{
										"name": "Update_LastIngestDate",
										"type": "Script",
										"dependsOn": [
											{
												"activity": "Incremental_Copy",
												"dependencyConditions": [
													"Succeeded"
												]
											}
										],
										"policy": {
											"timeout": "0.12:00:00",
											"retry": 0,
											"retryIntervalInSeconds": 30,
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"linkedServiceName": {
											"referenceName": "ls_sql_hzn",
											"type": "LinkedServiceReference"
										},
										"typeProperties": {
											"scripts": [
												{
													"type": "NonQuery",
													"text": {
														"value": "USE odw_standardised_db;\n\nMERGE dbo.last_ingest_dates AS target\nUSING (SELECT '@{item().Horizon_Table_Name}' AS TableName) AS source\nON target.TableName = source.TableName\nWHEN MATCHED THEN\n  UPDATE SET LastIngestDate = GETDATE()\nWHEN NOT MATCHED THEN\n  INSERT (TableName, LastIngestDate)\n  VALUES (source.TableName, GETDATE());\n",
														"type": "Expression"
													}
												}
											],
											"scriptBlockExecutionTimeout": "02:00:00"
										}
									}
								]
							}
						}
					]
				}
			},
			{
				"name": "Filter_Horizon_Table",
				"type": "Filter",
				"dependsOn": [
					{
						"activity": "Lookup_orchestration_file",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('Lookup_orchestration_file').output.value[0].definitions ",
						"type": "Expression"
					},
					"condition": {
						"value": "@and(\n    contains(item(), 'Horizon_Table_Name'),\n    and(\n        not(empty(item().Horizon_Table_Name)),\n        and(\n            equals(item().Source_Folder, 'Horizon'),\n            or(\n                not(contains(item(), 'Load_Enable_status')),\n                equals(item().Load_Enable_status, 'True')\n            )\n        )\n    )\n)",
						"type": "Expression"
					}
				}
			},
			{
				"name": "Horizon Raw to Std",
				"description": "Ingests the raw data into the standardised table",
				"type": "SynapseNotebook",
				"dependsOn": [
					{
						"activity": "ForEach_horizon_files",
						"dependencyConditions": [
							"Completed"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 3,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"notebook": {
						"referenceName": "py_horizon_raw_to_std",
						"type": "NotebookReference"
					},
					"snapshot": true,
					"conf": {
						"spark.dynamicAllocation.enabled": null,
						"spark.dynamicAllocation.minExecutors": null,
						"spark.dynamicAllocation.maxExecutors": null
					},
					"numExecutors": null
				}
			},
			{
				"name": "ForEach_Harmonised_NoteBook",
				"type": "ForEach",
				"dependsOn": [
					{
						"activity": "Filter_Harmonised_NoteBook",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('Filter_Harmonised_NoteBook').output.value",
						"type": "Expression"
					},
					"isSequential": false,
					"batchCount": 5,
					"activities": [
						{
							"name": "Harmonised_NoteBook",
							"description": "Ingests the raw data into the standardised table",
							"type": "SynapseNotebook",
							"dependsOn": [],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 3,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"notebook": {
									"referenceName": {
										"value": "@item().Harmonised_NoteBook",
										"type": "Expression"
									},
									"type": "NotebookReference"
								},
								"snapshot": true,
								"conf": {
									"spark.dynamicAllocation.enabled": null,
									"spark.dynamicAllocation.minExecutors": null,
									"spark.dynamicAllocation.maxExecutors": null
								},
								"numExecutors": null
							}
						},
						{
							"name": "Harmonised_NoteBook errorMessage",
							"description": "",
							"type": "SetVariable",
							"dependsOn": [
								{
									"activity": "Harmonised_NoteBook",
									"dependencyConditions": [
										"Failed"
									]
								}
							],
							"policy": {
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"variableName": "H_NoteBook_errorMessage",
								"value": {
									"value": "@activity('Harmonised_NoteBook')?.Error?.Message",
									"type": "Expression"
								}
							}
						}
					]
				}
			},
			{
				"name": "Filter_Harmonised_NoteBook",
				"type": "Filter",
				"dependsOn": [
					{
						"activity": "Hzn_standardized_s78_tables",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('Lookup_orchestration_file').output.value[0].definitions ",
						"type": "Expression"
					},
					"condition": {
						"value": "@and(\n    contains(item(), 'Harmonised_NoteBook'),\n    and(\n        not(empty(item().Harmonised_NoteBook)),\n        and(\n            equals(item().Source_Folder, 'Horizon'),\n            or(\n                not(contains(item(), 'Load_Enable_status')),\n                equals(item().Load_Enable_status, 'True')\n            )\n        )\n    )\n)",
						"type": "Expression"
					}
				}
			},
			{
				"name": "Send horizon to odw data load failed",
				"type": "ExecutePipeline",
				"dependsOn": [
					{
						"activity": "ForEach_Harmonised_NoteBook",
						"dependencyConditions": [
							"Skipped",
							"Completed"
						]
					}
				],
				"policy": {
					"secureInput": true
				},
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "pln_utl_Send_Teams_Message",
						"type": "PipelineReference"
					},
					"waitOnCompletion": true,
					"parameters": {
						"dataFactorySubscription": {
							"value": "@pipeline().parameters.subscription_id",
							"type": "Expression"
						},
						"dataFactoryResourceGroup": {
							"value": "@pipeline().parameters.resource_group",
							"type": "Expression"
						},
						"pipelineRunId": {
							"value": "@pipeline().RunId",
							"type": "Expression"
						},
						"teamsWebhookUrl": {
							"value": "@pipeline().parameters.webhook_url",
							"type": "Expression"
						},
						"activityName": {
							"value": "@pipeline().Pipeline",
							"type": "Expression"
						},
						"activityMessage": {
							"value": "@if(\n    equals(\n        trim(\n            concat(\n                activity('Record horizon to odw data loading')?.Error?.message,\n                activity('Lookup_orchestration_file')?.Error?.message,\n                activity('Filter_Horizon_Table')?.Error?.message,\n                activity('Horizon Raw to Std')?.Error?.message,\n                activity('Filter_Harmonised_NoteBook')?.Error?.message,\n                variables('H_NoteBook_errorMessage')\n            )\n        ),\n        ''\n    ),\n    'Failed',\n    'Successfully '\n)",
							"type": "Expression"
						},
						"activityDuration": {
							"value": "@concat(\n    string(div(div(sub(\n        ticks(formatDateTime(utcNow(), 'yyyy-MM-dd HH:mm:sss')),\n        ticks(formatDateTime(if(equals(pipeline().parameters.start_time, null), utcNow(), pipeline().parameters.start_time), 'yyyy-MM-dd HH:mm:sss'))\n    ), 600000000), 60)), 'H:', \n    string(mod(div(sub(\n        ticks(formatDateTime(utcNow(), 'yyyy-MM-dd HH:mm:sss')),\n        ticks(formatDateTime(if(equals(pipeline().parameters.start_time, null), utcNow(), pipeline().parameters.start_time), 'yyyy-MM-dd HH:mm:sss'))\n    ), 600000000), 60)), 'M:00s'\n)",
							"type": "Expression"
						},
						"activityStatus": {
							"value": "@if(\n    equals(\n        trim(\n            concat(\n                activity('Record horizon to odw data loading')?.Error?.message,\n                activity('Lookup_orchestration_file')?.Error?.message,\n                activity('Filter_Horizon_Table')?.Error?.message,\n                activity('Horizon Raw to Std')?.Error?.message,\n                activity('Filter_Harmonised_NoteBook')?.Error?.message,\n                variables('H_NoteBook_errorMessage')\n            )\n        ),\n        ''\n    ),\n   'Failed',\n    'Successfully'\n)",
							"type": "Expression"
						},
						"Colour": {
							"value": "@pipeline().parameters.failed_colour",
							"type": "Expression"
						},
						"Image": {
							"value": "@pipeline().parameters.failed_image",
							"type": "Expression"
						},
						"Message_title": {
							"value": "@if(\n    equals(\n        trim(\n            concat(\n                coalesce(activity('Record horizon to odw data loading')?.Error?.message, ''),\n                coalesce(activity('Lookup_orchestration_file')?.Error?.message, ''),\n                coalesce(activity('Filter_Horizon_Table')?.Error?.message, ''),\n                coalesce(activity('Horizon Raw to Std')?.Error?.message, ''),\n                coalesce(activity('Filter_Harmonised_NoteBook')?.Error?.message, ''),\n                coalesce(variables('H_NoteBook_errorMessage'), '')\n            )\n        ),\n        ''\n    ),\n    'horizon To Odw Failed',\n    'horizon To Odw load Successfully Completed'\n)\n",
							"type": "Expression"
						},
						"Message_subtitle": {
							"value": "@if(\n    equals(\n        trim(\n            concat(\n                coalesce(activity('Record horizon to odw data loading')?.Error?.message, ''),\n                coalesce(activity('Lookup_orchestration_file')?.Error?.message, ''),\n                coalesce(activity('Filter_Horizon_Table')?.Error?.message, ''),\n                coalesce(activity('Horizon Raw to Std')?.Error?.message, ''),\n                coalesce(activity('Filter_Harmonised_NoteBook')?.Error?.message, ''),\n                coalesce(variables('H_NoteBook_errorMessage'), '')\n            )\n        ),\n        ''\n    ),\n    'pipeline run Failed',\n    'pipeline run Completed'\n)\n",
							"type": "Expression"
						}
					}
				}
			},
			{
				"name": "If Condition1",
				"type": "IfCondition",
				"dependsOn": [
					{
						"activity": "Record completed horizon to odw data lode",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@if(\n    equals(\n        trim(\n            concat(\n                activity('Record horizon to odw data loading')?.Error?.message,\n                activity('Lookup_orchestration_file')?.Error?.message,\n                activity('Filter_Horizon_Table')?.Error?.message,\n                activity('Horizon Raw to Std')?.Error?.message,\n                activity('Filter_Harmonised_NoteBook')?.Error?.message,\n                variables('H_NoteBook_errorMessage')\n            )\n        ),\n        ''\n    ),\n        true,\n        false\n)\n",
						"type": "Expression"
					},
					"ifTrueActivities": [
						{
							"name": "pln_horizon_to_odw Fail",
							"type": "Fail",
							"dependsOn": [],
							"userProperties": [],
							"typeProperties": {
								"message": "failing the pipeline as previous activities are failed.",
								"errorCode": "400"
							}
						}
					]
				}
			},
			{
				"name": "Hzn_standardized_s78_tables",
				"type": "SynapseNotebook",
				"dependsOn": [
					{
						"activity": "Horizon Raw to Std",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"notebook": {
						"referenceName": "py_hzn_standardized_s78_tables",
						"type": "NotebookReference"
					},
					"snapshot": true,
					"conf": {
						"spark.dynamicAllocation.enabled": null,
						"spark.dynamicAllocation.minExecutors": null,
						"spark.dynamicAllocation.maxExecutors": null
					},
					"numExecutors": null
				}
			}
		],
		"parameters": {
			"webhook_url": {
				"type": "string"
			},
			"subscription_id": {
				"type": "string"
			},
			"resource_group": {
				"type": "string"
			},
			"starting_colour": {
				"type": "string"
			},
			"on_progress_colour": {
				"type": "string"
			},
			"failed_colour": {
				"type": "string"
			},
			"start_time": {
				"type": "string"
			},
			"starting_image": {
				"type": "string"
			},
			"progress_image": {
				"type": "string"
			},
			"warning_image": {
				"type": "string"
			},
			"failed_image": {
				"type": "string"
			},
			"warning_colour": {
				"type": "string"
			},
			"apps_insights_ikey": {
				"type": "string"
			}
		},
		"variables": {
			"start_time": {
				"type": "String"
			},
			"errorMessage": {
				"type": "String"
			},
			"H_NoteBook_errorMessage": {
				"type": "Array"
			},
			"LastIngestDate": {
				"type": "String"
			}
		},
		"folder": {
			"name": "utils/Master"
		},
		"annotations": []
	}
}