{
	"name": "pln_horizon_to_odw_1872",
	"properties": {
		"activities": [
			{
				"name": "Record horizon to odw data loading",
				"type": "ExecutePipeline",
				"state": "Inactive",
				"onInactiveMarkAs": "Succeeded",
				"dependsOn": [],
				"policy": {
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "pln_log_to_appins",
						"type": "PipelineReference"
					},
					"waitOnCompletion": true,
					"parameters": {
						"Stage": "Horizon to ODW Load Started",
						"PipelineName": {
							"value": "@pipeline().Pipeline",
							"type": "Expression"
						},
						"PipelineRunID": {
							"value": "@pipeline().RunId",
							"type": "Expression"
						},
						"StartTime": {
							"value": "@formatDateTime(utcnow(), 'yyyy-MM-ddTHH:mm:ssZ')",
							"type": "Expression"
						},
						"StatusMessage": "Loading horizon to Odw",
						"PipelineTriggerID": {
							"value": "@pipeline().TriggerId",
							"type": "Expression"
						},
						"PipelineTriggerName": {
							"value": "@pipeline().TriggerName",
							"type": "Expression"
						},
						"PipelineTriggerType": {
							"value": "@pipeline().TriggerType",
							"type": "Expression"
						},
						"PipelineTriggeredbyPipelineName": {
							"value": "@pipeline()?.TriggeredByPipelineName",
							"type": "Expression"
						},
						"PipelineTriggeredbyPipelineRunID": {
							"value": "@pipeline()?.TriggeredByPipelineRunId",
							"type": "Expression"
						},
						"ActivityType": "Pipeline",
						"AppInsIKey": {
							"value": "@pipeline().parameters.apps_insights_ikey",
							"type": "Expression"
						}
					}
				}
			},
			{
				"name": "Record completed horizon to odw data lode",
				"type": "ExecutePipeline",
				"state": "Inactive",
				"onInactiveMarkAs": "Succeeded",
				"dependsOn": [
					{
						"activity": "ForEach_Harmonised_NoteBook",
						"dependencyConditions": [
							"Skipped",
							"Completed"
						]
					}
				],
				"policy": {
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "pln_log_to_appins",
						"type": "PipelineReference"
					},
					"waitOnCompletion": true,
					"parameters": {
						"Stage": {
							"value": "@if(\n    equals(\n        trim(\n            concat(\n                activity('Record horizon to odw data loading')?.Error?.message,\n                activity('Lookup_orchestration_file')?.Error?.message,\n                activity('Filter_Horizon_Table')?.Error?.message,\n                activity('Horizon Raw to Std')?.Error?.message,\n                activity('Filter_Harmonised_NoteBook')?.Error?.message,\n                variables('H_NoteBook_errorMessage')\n            )\n        ),\n        ''\n    ),    \n    'Failed',\n    'Successfully'\n)",
							"type": "Expression"
						},
						"PipelineName": {
							"value": "@pipeline().Pipeline",
							"type": "Expression"
						},
						"PipelineRunID": {
							"value": "@pipeline().RunId",
							"type": "Expression"
						},
						"EndTime": {
							"value": "@utcnow()",
							"type": "Expression"
						},
						"ErrorMessage": {
							"value": "@replace(\n    concat(\n        activity('Record horizon to odw data loading')?.Error?.message, '|',\n        activity('Lookup_orchestration_file')?.Error?.message, '|',\n        activity('Filter_Horizon_Table')?.Error?.message, '|',\n        activity('Horizon Raw to Std')?.Error?.message, '|',\n        activity('Filter_Harmonised_NoteBook')?.Error?.message, '|',\n        variables('H_NoteBook_errorMessage')\n    ),\n    '|',\n    ''\n)\n",
							"type": "Expression"
						},
						"StatusMessage": {
							"value": "@if(\n    equals(\n        trim(\n            concat(\n                coalesce(activity('Record horizon to odw data loading')?.Error?.message, ''),\n                coalesce(activity('Lookup_orchestration_file')?.Error?.message, ''),\n                coalesce(activity('Filter_Horizon_Table')?.Error?.message, ''),\n                coalesce(activity('Horizon Raw to Std')?.Error?.message, ''),\n                coalesce(activity('Filter_Harmonised_NoteBook')?.Error?.message, ''),\n                coalesce(variables('H_NoteBook_errorMessage'), '')\n            )\n        ),\n        ''\n    ),\n    'horizon To Odw Failed',\n    'horizon To Odw load Successfully Completed'\n)\n",
							"type": "Expression"
						},
						"PipelineTriggerID": {
							"value": "@pipeline().TriggerId",
							"type": "Expression"
						},
						"PipelineTriggerName": {
							"value": "@pipeline().TriggerName",
							"type": "Expression"
						},
						"PipelineTriggerType": {
							"value": "@pipeline().TriggerType",
							"type": "Expression"
						},
						"PipelineTriggeredbyPipelineName": {
							"value": "@pipeline()?.TriggeredByPipelineName",
							"type": "Expression"
						},
						"PipelineTriggeredbyPipelineRunID": {
							"value": "@pipeline()?.TriggeredByPipelineRunId",
							"type": "Expression"
						},
						"ActivityType": "Pipeline",
						"AppInsIKey": {
							"value": "@pipeline().parameters.apps_insights_ikey",
							"type": "Expression"
						}
					}
				}
			},
			{
				"name": "Lookup_orchestration_file",
				"type": "Lookup",
				"state": "Inactive",
				"onInactiveMarkAs": "Succeeded",
				"dependsOn": [
					{
						"activity": "Record horizon to odw data loading",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "JsonSource",
						"storeSettings": {
							"type": "AzureBlobFSReadSettings",
							"recursive": true,
							"enablePartitionDiscovery": false
						},
						"formatSettings": {
							"type": "JsonReadSettings"
						}
					},
					"dataset": {
						"referenceName": "Is_storage_config",
						"type": "DatasetReference",
						"parameters": {
							"folder": "orchestration",
							"file_name": "orchestration.json"
						}
					},
					"firstRowOnly": false
				}
			},
			{
				"name": "ForEach_horizon_files",
				"type": "ForEach",
				"state": "Inactive",
				"onInactiveMarkAs": "Succeeded",
				"dependsOn": [
					{
						"activity": "Filter_Horizon_Table",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('Filter_Horizon_Table').output.value",
						"type": "Expression"
					},
					"isSequential": false,
					"batchCount": 10,
					"activities": [
						{
							"name": "Copy horizon Files",
							"description": "Copies data from Horizon to odw-raw",
							"type": "Copy",
							"dependsOn": [],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "SqlServerSource",
									"queryTimeout": "02:00:00",
									"isolationLevel": "ReadCommitted",
									"partitionOption": "None"
								},
								"sink": {
									"type": "DelimitedTextSink",
									"storeSettings": {
										"type": "AzureBlobFSWriteSettings"
									},
									"formatSettings": {
										"type": "DelimitedTextWriteSettings",
										"quoteAllText": true,
										"fileExtension": ".txt"
									}
								},
								"enableStaging": false,
								"translator": {
									"type": "TabularTranslator",
									"typeConversion": true,
									"typeConversionSettings": {
										"allowDataTruncation": true,
										"treatBooleanAsNumber": false
									}
								}
							},
							"inputs": [
								{
									"referenceName": "ds_Horizon_Source_table",
									"type": "DatasetReference",
									"parameters": {
										"table_name": {
											"value": "@item().Horizon_Table_Name",
											"type": "Expression"
										}
									}
								}
							],
							"outputs": [
								{
									"referenceName": "ds_Horizon_odw_raw",
									"type": "DatasetReference",
									"parameters": {
										"FileName": {
											"value": "@item().Source_Filename_Format",
											"type": "Expression"
										}
									}
								}
							]
						},
						{
							"name": "Record completed horizon to odw data load",
							"type": "ExecutePipeline",
							"dependsOn": [
								{
									"activity": "Copy horizon Files",
									"dependencyConditions": [
										"Completed"
									]
								}
							],
							"policy": {
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"pipeline": {
									"referenceName": "pln_log_to_appins",
									"type": "PipelineReference"
								},
								"waitOnCompletion": true,
								"parameters": {
									"Stage": {
										"value": "@if(or(equals(activity('Copy horizon Files')?.Error?.Message, ''),equals(activity('Copy horizon Files')?.Error?.Message, null)),'Successfully','Failed')\n",
										"type": "Expression"
									},
									"PipelineName": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"PipelineRunID": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"EndTime": {
										"value": "@utcNow()",
										"type": "Expression"
									},
									"Inserts": {
										"value": "@if(\n    or(\n        equals(activity('Copy horizon Files')?.Error?.Message, ''),\n        equals(activity('Copy horizon Files')?.Error?.Message, null)\n    ),\n    activity('Copy horizon Files').output.rowsCopied,\n    ''\n)\n",
										"type": "Expression"
									},
									"ErrorMessage": {
										"value": "@{if(or(equals(activity('Copy horizon Files')?.Error?.Message, ''), equals(activity('Copy horizon Files')?.Error?.Message, null)), '', activity('Copy horizon Files')?.Error?.Message)}",
										"type": "Expression"
									},
									"StatusMessage": {
										"value": "@concat('Data Copied From ', item().Horizon_Table_Name, ' To ', item().Source_Filename_Format)",
										"type": "Expression"
									},
									"PipelineTriggerID": {
										"value": "@pipeline().TriggerId",
										"type": "Expression"
									},
									"PipelineTriggerName": {
										"value": "@pipeline().TriggerName",
										"type": "Expression"
									},
									"PipelineTriggerType": {
										"value": "@pipeline().TriggerType",
										"type": "Expression"
									},
									"PipelineTriggeredbyPipelineName": {
										"value": "@pipeline()?.TriggeredByPipelineName",
										"type": "Expression"
									},
									"PipelineTriggeredbyPipelineRunID": {
										"value": "@pipeline()?.TriggeredByPipelineRunId",
										"type": "Expression"
									},
									"ActivityType": {
										"value": "Copy Activity",
										"type": "Expression"
									},
									"DurationSeconds": {
										"value": "@activity('Copy horizon Files').output.copyDuration\n",
										"type": "Expression"
									},
									"AppInsIKey": {
										"value": "@pipeline().parameters.apps_insights_ikey",
										"type": "Expression"
									}
								}
							}
						},
						{
							"name": "Send horizon to odw copy  data failed",
							"type": "ExecutePipeline",
							"dependsOn": [
								{
									"activity": "Copy horizon Files errorMessage",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"secureInput": true
							},
							"userProperties": [],
							"typeProperties": {
								"pipeline": {
									"referenceName": "pln_utl_Send_Teams_Message",
									"type": "PipelineReference"
								},
								"waitOnCompletion": true,
								"parameters": {
									"dataFactorySubscription": {
										"value": "@pipeline().parameters.subscription_id",
										"type": "Expression"
									},
									"dataFactoryResourceGroup": {
										"value": "@pipeline().parameters.resource_group",
										"type": "Expression"
									},
									"pipelineRunId": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"teamsWebhookUrl": {
										"value": "@pipeline().parameters.webhook_url",
										"type": "Expression"
									},
									"activityName": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"activityMessage": "Copy horizon data failed",
									"activityDuration": {
										"value": "@concat(\n    string(div(div(sub(\n        ticks(formatDateTime(utcNow(), 'yyyy-MM-dd HH:mm:sss')),\n        ticks(formatDateTime(if(equals(pipeline().parameters.start_time, null), utcNow(), pipeline().parameters.start_time), 'yyyy-MM-dd HH:mm:sss'))\n    ), 600000000), 60)), 'H:', \n    string(mod(div(sub(\n        ticks(formatDateTime(utcNow(), 'yyyy-MM-dd HH:mm:sss')),\n        ticks(formatDateTime(if(equals(pipeline().parameters.start_time, null), utcNow(), pipeline().parameters.start_time), 'yyyy-MM-dd HH:mm:sss'))\n    ), 600000000), 60)), 'M:00s'\n)",
										"type": "Expression"
									},
									"activityStatus": "Failed",
									"Colour": {
										"value": "@pipeline().parameters.failed_colour",
										"type": "Expression"
									},
									"Image": {
										"value": "@pipeline().parameters.failed_image",
										"type": "Expression"
									},
									"Message_title": "Copy Data from Horizon to ODW_Raw Failed",
									"Message_subtitle": {
										"value": "@concat('Data Copied From ', item().Horizon_Table_Name, ' To ', item().Source_Filename_Format, ' Failed with the following error:    ',variables('errorMessage'))",
										"type": "Expression"
									}
								}
							}
						},
						{
							"name": "Copy horizon Files errorMessage",
							"description": "",
							"type": "SetVariable",
							"dependsOn": [
								{
									"activity": "Copy horizon Files",
									"dependencyConditions": [
										"Failed"
									]
								}
							],
							"policy": {
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"variableName": "errorMessage",
								"value": {
									"value": "@split(activity('Copy horizon Files')?.Error?.Message, ',')[2]",
									"type": "Expression"
								}
							}
						}
					]
				}
			},
			{
				"name": "Filter_Horizon_Table",
				"type": "Filter",
				"state": "Inactive",
				"onInactiveMarkAs": "Succeeded",
				"dependsOn": [
					{
						"activity": "Lookup_orchestration_file",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('Lookup_orchestration_file').output.value[0].definitions ",
						"type": "Expression"
					},
					"condition": {
						"value": "@and(\n    contains(item(), 'Horizon_Table_Name'),\n    and(\n        not(empty(item().Horizon_Table_Name)),\n        and(\n            equals(item().Source_Folder, 'Horizon'),\n            or(\n                not(contains(item(), 'Load_Enable_status')),\n                equals(item().Load_Enable_status, 'True')\n            )\n        )\n    )\n)",
						"type": "Expression"
					}
				}
			},
			{
				"name": "Horizon Raw to Std",
				"description": "Ingests the raw data into the standardised table",
				"type": "SynapseNotebook",
				"dependsOn": [
					{
						"activity": "ForEach_horizon_files",
						"dependencyConditions": [
							"Completed"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 3,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"notebook": {
						"referenceName": "py_horizon_raw_to_std_1872",
						"type": "NotebookReference"
					},
					"parameters": {
						"PipelineName": {
							"value": "@pipeline().Pipeline",
							"type": "string"
						},
						"PipelineRunID": {
							"value": "@pipeline().RunId",
							"type": "string"
						},
						"PipelineTriggerID": {
							"value": "@pipeline().TriggerId",
							"type": "string"
						},
						"PipelineTriggerName": {
							"value": "@pipeline().TriggerName",
							"type": "string"
						},
						"PipelineTriggerType": {
							"value": {
								"value": "@pipeline().TriggerType",
								"type": "Expression"
							},
							"type": "string"
						},
						"PipelineTriggeredbyPipelineName": {
							"value": {
								"value": "@pipeline()?.TriggeredByPipelineName",
								"type": "Expression"
							},
							"type": "string"
						},
						"PipelineTriggeredbyPipelineRunID": {
							"value": {
								"value": "@pipeline()?.TriggeredByPipelineRunId",
								"type": "Expression"
							},
							"type": "string"
						},
						"start_exec_time": {
							"value": {
								"value": "@utcNow()",
								"type": "Expression"
							},
							"type": "string"
						}
					},
					"snapshot": true,
					"conf": {
						"spark.dynamicAllocation.enabled": null,
						"spark.dynamicAllocation.minExecutors": null,
						"spark.dynamicAllocation.maxExecutors": null
					},
					"numExecutors": null
				}
			},
			{
				"name": "ForEach_Harmonised_NoteBook",
				"type": "ForEach",
				"state": "Inactive",
				"onInactiveMarkAs": "Succeeded",
				"dependsOn": [
					{
						"activity": "Filter_Harmonised_NoteBook",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('Filter_Harmonised_NoteBook').output.value",
						"type": "Expression"
					},
					"isSequential": false,
					"batchCount": 5,
					"activities": [
						{
							"name": "Harmonised_NoteBook",
							"description": "Ingests the raw data into the standardised table",
							"type": "SynapseNotebook",
							"dependsOn": [],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 3,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"notebook": {
									"referenceName": {
										"value": "@item().Harmonised_NoteBook",
										"type": "Expression"
									},
									"type": "NotebookReference"
								},
								"snapshot": true,
								"conf": {
									"spark.dynamicAllocation.enabled": null,
									"spark.dynamicAllocation.minExecutors": null,
									"spark.dynamicAllocation.maxExecutors": null
								},
								"numExecutors": null
							}
						},
						{
							"name": "Harmonised_NoteBook errorMessage",
							"description": "",
							"type": "SetVariable",
							"dependsOn": [
								{
									"activity": "Harmonised_NoteBook",
									"dependencyConditions": [
										"Failed"
									]
								}
							],
							"policy": {
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"variableName": "H_NoteBook_errorMessage",
								"value": {
									"value": "@activity('Harmonised_NoteBook')?.Error?.Message",
									"type": "Expression"
								}
							}
						}
					]
				}
			},
			{
				"name": "Filter_Harmonised_NoteBook",
				"type": "Filter",
				"state": "Inactive",
				"onInactiveMarkAs": "Succeeded",
				"dependsOn": [
					{
						"activity": "Hzn_standardized_s78_tables",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('Lookup_orchestration_file').output.value[0].definitions ",
						"type": "Expression"
					},
					"condition": {
						"value": "@and(\n    contains(item(), 'Harmonised_NoteBook'),\n    and(\n        not(empty(item().Harmonised_NoteBook)),\n        and(\n            equals(item().Source_Folder, 'Horizon'),\n            or(\n                not(contains(item(), 'Load_Enable_status')),\n                equals(item().Load_Enable_status, 'True')\n            )\n        )\n    )\n)",
						"type": "Expression"
					}
				}
			},
			{
				"name": "Send horizon to odw data load failed",
				"type": "ExecutePipeline",
				"state": "Inactive",
				"onInactiveMarkAs": "Succeeded",
				"dependsOn": [
					{
						"activity": "ForEach_Harmonised_NoteBook",
						"dependencyConditions": [
							"Skipped",
							"Completed"
						]
					}
				],
				"policy": {
					"secureInput": true
				},
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "pln_utl_Send_Teams_Message",
						"type": "PipelineReference"
					},
					"waitOnCompletion": true,
					"parameters": {
						"dataFactorySubscription": {
							"value": "@pipeline().parameters.subscription_id",
							"type": "Expression"
						},
						"dataFactoryResourceGroup": {
							"value": "@pipeline().parameters.resource_group",
							"type": "Expression"
						},
						"pipelineRunId": {
							"value": "@pipeline().RunId",
							"type": "Expression"
						},
						"teamsWebhookUrl": {
							"value": "@pipeline().parameters.webhook_url",
							"type": "Expression"
						},
						"activityName": {
							"value": "@pipeline().Pipeline",
							"type": "Expression"
						},
						"activityMessage": {
							"value": "@if(\n    equals(\n        trim(\n            concat(\n                activity('Record horizon to odw data loading')?.Error?.message,\n                activity('Lookup_orchestration_file')?.Error?.message,\n                activity('Filter_Horizon_Table')?.Error?.message,\n                activity('Horizon Raw to Std')?.Error?.message,\n                activity('Filter_Harmonised_NoteBook')?.Error?.message,\n                variables('H_NoteBook_errorMessage')\n            )\n        ),\n        ''\n    ),\n    'Failed',\n    'Successfully '\n)",
							"type": "Expression"
						},
						"activityDuration": {
							"value": "@concat(\n    string(div(div(sub(\n        ticks(formatDateTime(utcNow(), 'yyyy-MM-dd HH:mm:sss')),\n        ticks(formatDateTime(if(equals(pipeline().parameters.start_time, null), utcNow(), pipeline().parameters.start_time), 'yyyy-MM-dd HH:mm:sss'))\n    ), 600000000), 60)), 'H:', \n    string(mod(div(sub(\n        ticks(formatDateTime(utcNow(), 'yyyy-MM-dd HH:mm:sss')),\n        ticks(formatDateTime(if(equals(pipeline().parameters.start_time, null), utcNow(), pipeline().parameters.start_time), 'yyyy-MM-dd HH:mm:sss'))\n    ), 600000000), 60)), 'M:00s'\n)",
							"type": "Expression"
						},
						"activityStatus": {
							"value": "@if(\n    equals(\n        trim(\n            concat(\n                activity('Record horizon to odw data loading')?.Error?.message,\n                activity('Lookup_orchestration_file')?.Error?.message,\n                activity('Filter_Horizon_Table')?.Error?.message,\n                activity('Horizon Raw to Std')?.Error?.message,\n                activity('Filter_Harmonised_NoteBook')?.Error?.message,\n                variables('H_NoteBook_errorMessage')\n            )\n        ),\n        ''\n    ),\n   'Failed',\n    'Successfully'\n)",
							"type": "Expression"
						},
						"Colour": {
							"value": "@pipeline().parameters.failed_colour",
							"type": "Expression"
						},
						"Image": {
							"value": "@pipeline().parameters.failed_image",
							"type": "Expression"
						},
						"Message_title": {
							"value": "@if(\n    equals(\n        trim(\n            concat(\n                coalesce(activity('Record horizon to odw data loading')?.Error?.message, ''),\n                coalesce(activity('Lookup_orchestration_file')?.Error?.message, ''),\n                coalesce(activity('Filter_Horizon_Table')?.Error?.message, ''),\n                coalesce(activity('Horizon Raw to Std')?.Error?.message, ''),\n                coalesce(activity('Filter_Harmonised_NoteBook')?.Error?.message, ''),\n                coalesce(variables('H_NoteBook_errorMessage'), '')\n            )\n        ),\n        ''\n    ),\n    'horizon To Odw Failed',\n    'horizon To Odw load Successfully Completed'\n)\n",
							"type": "Expression"
						},
						"Message_subtitle": {
							"value": "@if(\n    equals(\n        trim(\n            concat(\n                coalesce(activity('Record horizon to odw data loading')?.Error?.message, ''),\n                coalesce(activity('Lookup_orchestration_file')?.Error?.message, ''),\n                coalesce(activity('Filter_Horizon_Table')?.Error?.message, ''),\n                coalesce(activity('Horizon Raw to Std')?.Error?.message, ''),\n                coalesce(activity('Filter_Harmonised_NoteBook')?.Error?.message, ''),\n                coalesce(variables('H_NoteBook_errorMessage'), '')\n            )\n        ),\n        ''\n    ),\n    'pipeline run Failed',\n    'pipeline run Completed'\n)\n",
							"type": "Expression"
						}
					}
				}
			},
			{
				"name": "If Condition1",
				"type": "IfCondition",
				"state": "Inactive",
				"onInactiveMarkAs": "Succeeded",
				"dependsOn": [
					{
						"activity": "Record completed horizon to odw data lode",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@if(\n    equals(\n        trim(\n            concat(\n                activity('Record horizon to odw data loading')?.Error?.message,\n                activity('Lookup_orchestration_file')?.Error?.message,\n                activity('Filter_Horizon_Table')?.Error?.message,\n                activity('Horizon Raw to Std')?.Error?.message,\n                activity('Filter_Harmonised_NoteBook')?.Error?.message,\n                variables('H_NoteBook_errorMessage')\n            )\n        ),\n        ''\n    ),\n        true,\n        false\n)\n",
						"type": "Expression"
					},
					"ifTrueActivities": [
						{
							"name": "pln_horizon_to_odw Fail",
							"type": "Fail",
							"dependsOn": [],
							"userProperties": [],
							"typeProperties": {
								"message": "failing the pipeline as previous activities are failed.",
								"errorCode": "400"
							}
						}
					]
				}
			},
			{
				"name": "Hzn_standardized_s78_tables",
				"type": "SynapseNotebook",
				"state": "Inactive",
				"onInactiveMarkAs": "Succeeded",
				"dependsOn": [],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"notebook": {
						"referenceName": "py_hzn_standardized_s78_tables",
						"type": "NotebookReference"
					},
					"snapshot": true,
					"conf": {
						"spark.dynamicAllocation.enabled": null,
						"spark.dynamicAllocation.minExecutors": null,
						"spark.dynamicAllocation.maxExecutors": null
					},
					"numExecutors": null
				}
			},
			{
				"name": "set_json variable",
				"type": "SetVariable",
				"state": "Inactive",
				"onInactiveMarkAs": "Succeeded",
				"dependsOn": [
					{
						"activity": "Horizon Raw to Std",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"variableName": "horizon_raw_to_std_output",
					"value": {
						"value": "@json(activity('Horizon Raw to Std').output.status.output.result.exitValue).table_details\n\n",
						"type": "Expression"
					}
				}
			},
			{
				"name": "ForEachTable",
				"type": "ForEach",
				"state": "Inactive",
				"onInactiveMarkAs": "Succeeded",
				"dependsOn": [
					{
						"activity": "set_json variable",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@variables('horizon_raw_to_std_output')",
						"type": "Expression"
					},
					"isSequential": false,
					"activities": [
						{
							"name": "Switch_table_status",
							"type": "Switch",
							"state": "Inactive",
							"onInactiveMarkAs": "Succeeded",
							"dependsOn": [],
							"userProperties": [],
							"typeProperties": {
								"on": {
									"value": "@item().table_result",
									"type": "Expression"
								},
								"cases": [
									{
										"value": "success",
										"activities": [
											{
												"name": "Record completed Sap HR Standardised data",
												"type": "ExecutePipeline",
												"dependsOn": [],
												"policy": {
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "pln_log_to_appins",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"Stage": "Completion",
														"PipelineName": {
															"value": "@pipeline().Pipeline",
															"type": "Expression"
														},
														"PipelineRunID": {
															"value": "@pipeline().RunId",
															"type": "Expression"
														},
														"StartTime": {
															"value": "@item().start_exec_time",
															"type": "Expression"
														},
														"EndTime": {
															"value": "@item().end_exec_time",
															"type": "Expression"
														},
														"Inserts": {
															"value": "@item().record_count",
															"type": "Expression"
														},
														"StatusMessage": {
															"value": "@concat('SAP HR Monthly data loaded for table: ',item().delta_table_name)",
															"type": "Expression"
														},
														"PipelineTriggerID": {
															"value": "@pipeline().TriggerId",
															"type": "Expression"
														},
														"PipelineTriggerName": {
															"value": "@pipeline().TriggerName",
															"type": "Expression"
														},
														"PipelineTriggerType": {
															"value": "@pipeline().TriggerType",
															"type": "Expression"
														},
														"PipelineTriggeredbyPipelineName": {
															"value": "@pipeline()?.TriggeredByPipelineName",
															"type": "Expression"
														},
														"PipelineTriggeredbyPipelineRunID": {
															"value": "@pipeline()?.TriggeredByPipelineRunId",
															"type": "Expression"
														},
														"ActivityType": "Pipeline",
														"DurationSeconds": {
															"value": "@item().total_exec_time",
															"type": "Expression"
														},
														"StatusCode": "200",
														"AppInsIKey": {
															"value": "@pipeline().parameters.apps_insights_ikey",
															"type": "Expression"
														}
													}
												}
											}
										]
									},
									{
										"value": "failed",
										"activities": [
											{
												"name": "Record failed Sap HR Standardised data",
												"type": "ExecutePipeline",
												"dependsOn": [],
												"policy": {
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "pln_log_to_appins",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"Stage": "Fail",
														"PipelineName": {
															"value": "@pipeline().Pipeline",
															"type": "Expression"
														},
														"PipelineRunID": {
															"value": "@pipeline().RunId",
															"type": "Expression"
														},
														"StartTime": {
															"value": "@item().start_exec_time",
															"type": "Expression"
														},
														"EndTime": {
															"value": "@item().end_exec_time",
															"type": "Expression"
														},
														"Inserts": {
															"value": "@item().record_count",
															"type": "Expression"
														},
														"ErrorMessage": {
															"value": "@concat(item().error_message,' for loading file : ',item().csv_file_name)",
															"type": "Expression"
														},
														"StatusMessage": {
															"value": "@concat('raw to standardised failed:',item().csv_file_name)",
															"type": "Expression"
														},
														"PipelineTriggerID": {
															"value": "@pipeline().TriggerId",
															"type": "Expression"
														},
														"PipelineTriggerName": {
															"value": "@pipeline().TriggerName",
															"type": "Expression"
														},
														"PipelineTriggerType": {
															"value": "@pipeline().TriggerType",
															"type": "Expression"
														},
														"PipelineTriggeredbyPipelineName": {
															"value": "@pipeline()?.TriggeredByPipelineName",
															"type": "Expression"
														},
														"PipelineTriggeredbyPipelineRunID": {
															"value": "@pipeline()?.TriggeredByPipelineRunId",
															"type": "Expression"
														},
														"ActivityType": "Pipeline",
														"DurationSeconds": {
															"value": "@item().total_exec_time",
															"type": "Expression"
														},
														"StatusCode": "400",
														"AppInsIKey": {
															"value": "@pipeline().parameters.apps_insights_ikey",
															"type": "Expression"
														}
													}
												}
											},
											{
												"name": "Set Error Flag",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "Record failed Sap HR Standardised data",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "error_flag",
													"value": {
														"value": "@item().table_result",
														"type": "Expression"
													}
												}
											}
										]
									}
								],
								"defaultActivities": [
									{
										"name": "Dummy",
										"type": "Wait",
										"dependsOn": [],
										"userProperties": [],
										"typeProperties": {
											"waitTimeInSeconds": 1
										}
									}
								]
							}
						},
						{
							"name": "Record failed Sap HR Standardised data_copy1",
							"type": "ExecutePipeline",
							"dependsOn": [],
							"policy": {
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"pipeline": {
									"referenceName": "pln_log_to_appins",
									"type": "PipelineReference"
								},
								"waitOnCompletion": true,
								"parameters": {
									"Stage": {
										"value": "@item().table_result",
										"type": "Expression"
									},
									"PipelineName": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"PipelineRunID": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"StartTime": {
										"value": "@item().start_exec_time",
										"type": "Expression"
									},
									"EndTime": {
										"value": "@item().end_exec_time",
										"type": "Expression"
									},
									"Inserts": {
										"value": "@item().record_count",
										"type": "Expression"
									},
									"ErrorMessage": {
										"value": "item().error_message",
										"type": "Expression"
									},
									"StatusMessage": {
										"value": "@concat('Raw to Standardised transformation failed while loading',item().delta_table_name)",
										"type": "Expression"
									},
									"PipelineTriggerID": {
										"value": "@pipeline().TriggerId",
										"type": "Expression"
									},
									"PipelineTriggerName": {
										"value": "@pipeline().TriggerName",
										"type": "Expression"
									},
									"PipelineTriggerType": {
										"value": "@pipeline().TriggerType",
										"type": "Expression"
									},
									"PipelineTriggeredbyPipelineName": {
										"value": "@pipeline()?.TriggeredByPipelineName",
										"type": "Expression"
									},
									"PipelineTriggeredbyPipelineRunID": {
										"value": "@pipeline()?.TriggeredByPipelineRunId",
										"type": "Expression"
									},
									"ActivityType": "Pipeline",
									"DurationSeconds": {
										"value": "@item().total_exec_time",
										"type": "Expression"
									},
									"StatusCode": "400",
									"AppInsIKey": {
										"value": "@pipeline().parameters.apps_insights_ikey",
										"type": "Expression"
									}
								}
							}
						},
						{
							"name": "Set Error Flag_copy1",
							"type": "SetVariable",
							"state": "Inactive",
							"onInactiveMarkAs": "Succeeded",
							"dependsOn": [
								{
									"activity": "Record failed Sap HR Standardised data_copy1",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"variableName": "error_flag",
								"value": {
									"value": "@item().table_result",
									"type": "Expression"
								}
							}
						}
					]
				}
			}
		],
		"parameters": {
			"webhook_url": {
				"type": "string"
			},
			"subscription_id": {
				"type": "string"
			},
			"resource_group": {
				"type": "string"
			},
			"starting_colour": {
				"type": "string"
			},
			"on_progress_colour": {
				"type": "string"
			},
			"failed_colour": {
				"type": "string"
			},
			"start_time": {
				"type": "string"
			},
			"starting_image": {
				"type": "string"
			},
			"progress_image": {
				"type": "string"
			},
			"warning_image": {
				"type": "string"
			},
			"failed_image": {
				"type": "string"
			},
			"warning_colour": {
				"type": "string"
			},
			"apps_insights_ikey": {
				"type": "string"
			}
		},
		"variables": {
			"start_time": {
				"type": "String"
			},
			"errorMessage": {
				"type": "String"
			},
			"H_NoteBook_errorMessage": {
				"type": "Array"
			},
			"horizon_raw_to_std_output": {
				"type": "Array"
			}
		},
		"folder": {
			"name": "utils/Master"
		},
		"annotations": []
	}
}