{
	"name": "pln_horizon_2",
	"properties": {
		"activities": [
			{
				"name": "Get Entraid config",
				"type": "SynapseNotebook",
				"dependsOn": [
					{
						"activity": "Random wait to allow parallelism_copy4_copy2",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"notebook": {
						"referenceName": "py_utils_get_pipeline_config",
						"type": "NotebookReference"
					},
					"parameters": {
						"system_name": {
							"value": "HR",
							"type": "string"
						},
						"Object": {
							"value": "Entraid",
							"type": "string"
						}
					},
					"snapshot": true,
					"sparkPool": {
						"referenceName": "pinssynspodw",
						"type": "BigDataPoolReference"
					},
					"conf": {
						"spark.dynamicAllocation.enabled": true
					}
				}
			},
			{
				"name": "entraid",
				"type": "IfCondition",
				"dependsOn": [
					{
						"activity": "Get Entraid config",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@equals(activity('Get Entraid config').output.status.Output.result.exitValue, '[True]')",
						"type": "Expression"
					},
					"ifFalseActivities": [
						{
							"name": "Record entraid warning",
							"type": "SynapseNotebook",
							"dependsOn": [
								{
									"activity": "Send entraid disabled warning",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"notebook": {
									"referenceName": "py_utils_log_stage",
									"type": "NotebookReference"
								},
								"parameters": {
									"Stage": {
										"value": "Warning",
										"type": "string"
									},
									"PipelineName": {
										"value": {
											"value": "@pipeline().Pipeline",
											"type": "Expression"
										},
										"type": "string"
									},
									"PipelineRunID": {
										"value": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										},
										"type": "string"
									},
									"Inserts": {
										"value": "0",
										"type": "int"
									},
									"Updates": {
										"value": "0",
										"type": "int"
									},
									"Deletes": {
										"value": "0",
										"type": "int"
									},
									"ErrorMessage": {
										"value": "Horizon - Relevant Reps disabled",
										"type": "string"
									},
									"StatusMessage": {
										"value": "Warning",
										"type": "string"
									},
									"PipelineTriggerID": {
										"value": {
											"value": "@pipeline().TriggerId",
											"type": "Expression"
										},
										"type": "string"
									},
									"PipelineTriggerName": {
										"value": {
											"value": "@pipeline().TriggerName",
											"type": "Expression"
										},
										"type": "string"
									},
									"PipelineTriggerType": {
										"value": {
											"value": "@pipeline().TriggerType",
											"type": "Expression"
										},
										"type": "string"
									},
									"PipelineTriggeredbyPipelineName": {
										"value": {
											"value": "@pipeline()?.TriggeredByPipelineName",
											"type": "Expression"
										},
										"type": "string"
									},
									"PipelineTriggeredbyPipelineRunID": {
										"value": {
											"value": "@pipeline()?.TriggeredByPipelineRunId",
											"type": "Expression"
										},
										"type": "string"
									},
									"ActivityType": {
										"value": "Pipeline",
										"type": "string"
									}
								},
								"snapshot": true,
								"sparkPool": {
									"referenceName": "pinssynspodw",
									"type": "BigDataPoolReference"
								},
								"conf": {
									"spark.dynamicAllocation.enabled": true,
									"spark.dynamicAllocation.minExecutors": null,
									"spark.dynamicAllocation.maxExecutors": null
								},
								"numExecutors": null
							}
						},
						{
							"name": "Send entraid disabled warning",
							"type": "ExecutePipeline",
							"dependsOn": [],
							"policy": {
								"secureInput": true
							},
							"userProperties": [],
							"typeProperties": {
								"pipeline": {
									"referenceName": "pln_utl_Send_Teams_Message",
									"type": "PipelineReference"
								},
								"waitOnCompletion": true,
								"parameters": {
									"dataFactorySubscription": {
										"value": "@pipeline().parameters.subscription_id",
										"type": "Expression"
									},
									"dataFactoryResourceGroup": {
										"value": "@pipeline().parameters.resource_group",
										"type": "Expression"
									},
									"pipelineRunId": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"teamsWebhookUrl": {
										"value": "@pipeline().parameters.webhook_url",
										"type": "Expression"
									},
									"activityName": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"activityMessage": "Loading Horizon data",
									"activityDuration": {
										"value": "@concat(string(div(div(sub(ticks(formatDateTime(utcNow(),'yyyy-MM-dd HH:mm:sss')),ticks(formatDateTime(pipeline().parameters.start_time,'yyyy-MM-dd HH:mm:sss'))),600000000),60)),'H:', \nstring(mod(div(sub(ticks(formatDateTime(utcNow(),'yyyy-MM-dd HH:mm:sss')),ticks(formatDateTime(pipeline().parameters.start_time,'yyyy-MM-dd HH:mm:sss'))),600000000),60)),'M:00s')",
										"type": "Expression"
									},
									"activityStatus": "On Progress",
									"Colour": {
										"value": "@pipeline().parameters.warning_colour",
										"type": "Expression"
									},
									"Image": {
										"value": "@pipeline().parameters.warning_image",
										"type": "Expression"
									},
									"Message_title": "ODW - Master pipeline warning",
									"Message_subtitle": "Horizon relevant reps data load disabled"
								}
							}
						}
					],
					"ifTrueActivities": [
						{
							"name": "Horizon EntraID",
							"type": "ExecutePipeline",
							"dependsOn": [
								{
									"activity": "Record loading entraid data",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"pipeline": {
									"referenceName": "EntraID",
									"type": "PipelineReference"
								},
								"waitOnCompletion": true
							}
						},
						{
							"name": "Record completed entraid data",
							"type": "SynapseNotebook",
							"dependsOn": [
								{
									"activity": "Horizon EntraID",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"notebook": {
									"referenceName": "py_utils_log_stage",
									"type": "NotebookReference"
								},
								"parameters": {
									"Stage": {
										"value": "Completion",
										"type": "string"
									},
									"PipelineName": {
										"value": {
											"value": "@pipeline().Pipeline",
											"type": "Expression"
										},
										"type": "string"
									},
									"PipelineRunID": {
										"value": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										},
										"type": "string"
									},
									"Inserts": {
										"value": "0",
										"type": "int"
									},
									"Updates": {
										"value": "0",
										"type": "int"
									},
									"Deletes": {
										"value": "0",
										"type": "int"
									},
									"ErrorMessage": {
										"value": "",
										"type": "string"
									},
									"StatusMessage": {
										"value": "Loading s62a vc",
										"type": "string"
									},
									"PipelineTriggerID": {
										"value": {
											"value": "@pipeline().TriggerId",
											"type": "Expression"
										},
										"type": "string"
									},
									"PipelineTriggerName": {
										"value": {
											"value": "@pipeline().TriggerName",
											"type": "Expression"
										},
										"type": "string"
									},
									"PipelineTriggerType": {
										"value": {
											"value": "@pipeline().TriggerType",
											"type": "Expression"
										},
										"type": "string"
									},
									"PipelineTriggeredbyPipelineName": {
										"value": {
											"value": "@pipeline()?.TriggeredByPipelineName",
											"type": "Expression"
										},
										"type": "string"
									},
									"PipelineTriggeredbyPipelineRunID": {
										"value": {
											"value": "@pipeline()?.TriggeredByPipelineRunId",
											"type": "Expression"
										},
										"type": "string"
									},
									"ActivityType": {
										"value": "Pipeline",
										"type": "string"
									}
								},
								"snapshot": true,
								"sparkPool": {
									"referenceName": "pinssynspodw",
									"type": "BigDataPoolReference"
								},
								"conf": {
									"spark.dynamicAllocation.enabled": true,
									"spark.dynamicAllocation.minExecutors": null,
									"spark.dynamicAllocation.maxExecutors": null
								},
								"numExecutors": null
							}
						},
						{
							"name": "Send HR failed",
							"type": "ExecutePipeline",
							"dependsOn": [
								{
									"activity": "Horizon EntraID",
									"dependencyConditions": [
										"Failed"
									]
								}
							],
							"policy": {
								"secureInput": true
							},
							"userProperties": [],
							"typeProperties": {
								"pipeline": {
									"referenceName": "pln_utl_Send_Teams_Message",
									"type": "PipelineReference"
								},
								"waitOnCompletion": true,
								"parameters": {
									"dataFactorySubscription": {
										"value": "@pipeline().parameters.subscription_id",
										"type": "Expression"
									},
									"dataFactoryResourceGroup": {
										"value": "@pipeline().parameters.resource_group",
										"type": "Expression"
									},
									"pipelineRunId": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"teamsWebhookUrl": {
										"value": "@pipeline().parameters.webhook_url",
										"type": "Expression"
									},
									"activityName": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"activityMessage": "Horizon data failed",
									"activityDuration": {
										"value": "@concat(string(div(div(sub(ticks(formatDateTime(utcNow(),'yyyy-MM-dd HH:mm:sss')),ticks(formatDateTime(pipeline().parameters.start_time,'yyyy-MM-dd HH:mm:sss'))),600000000),60)),'H:', \nstring(mod(div(sub(ticks(formatDateTime(utcNow(),'yyyy-MM-dd HH:mm:sss')),ticks(formatDateTime(pipeline().parameters.start_time,'yyyy-MM-dd HH:mm:sss'))),600000000),60)),'M:00s')",
										"type": "Expression"
									},
									"activityStatus": "Failed",
									"Colour": {
										"value": "@pipeline().parameters.failed_colour",
										"type": "Expression"
									},
									"Image": {
										"value": "@pipeline().parameters.failed_image",
										"type": "Expression"
									},
									"Message_title": "ODW - Horizon data failed",
									"Message_subtitle": "Relevant representation feed failed"
								}
							}
						},
						{
							"name": "Record loading entraid data",
							"type": "ExecutePipeline",
							"dependsOn": [],
							"policy": {
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"pipeline": {
									"referenceName": "pln_log_to_storage",
									"type": "PipelineReference"
								},
								"waitOnCompletion": true,
								"parameters": {
									"Stage": "OnProgress",
									"PipelineName": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"PipelineRunID": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"StartTime": {
										"value": "@formatDateTime(utcnow(), 'yyyy-MM-ddTHH:mm:ssZ')",
										"type": "Expression"
									},
									"StatusMessage": "Loading entraid",
									"PipelineTriggerID": {
										"value": "@pipeline().TriggerId",
										"type": "Expression"
									},
									"PipelineTriggerName": {
										"value": "@pipeline().TriggerName",
										"type": "Expression"
									},
									"PipelineTriggerType": {
										"value": "@pipeline().TriggerType",
										"type": "Expression"
									},
									"PipelineTriggeredbyPipelineName": {
										"value": "@pipeline()?.TriggeredByPipelineName",
										"type": "Expression"
									},
									"PipelineTriggeredbyPipelineRunID": {
										"value": "@pipeline()?.TriggeredByPipelineRunId",
										"type": "Expression"
									},
									"ActivityType": "Pipeline"
								}
							}
						}
					]
				}
			},
			{
				"name": "Appeal Document metadata",
				"type": "IfCondition",
				"dependsOn": [
					{
						"activity": "Random wait to allow parallelism",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@contains(pipeline().parameters.horizon_feed, 'Appeal Document Metadata')",
						"type": "Expression"
					},
					"ifFalseActivities": [
						{
							"name": "Record Appeal Document metadata warning",
							"type": "SynapseNotebook",
							"dependsOn": [
								{
									"activity": "Send Appeal Document metadata disabled warning",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"notebook": {
									"referenceName": "py_utils_log_stage",
									"type": "NotebookReference"
								},
								"parameters": {
									"Stage": {
										"value": "Warning",
										"type": "string"
									},
									"PipelineName": {
										"value": {
											"value": "@pipeline().Pipeline",
											"type": "Expression"
										},
										"type": "string"
									},
									"PipelineRunID": {
										"value": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										},
										"type": "string"
									},
									"Inserts": {
										"value": "0",
										"type": "int"
									},
									"Updates": {
										"value": "0",
										"type": "int"
									},
									"Deletes": {
										"value": "0",
										"type": "int"
									},
									"ErrorMessage": {
										"value": "Horizon - Appeal Document metadata disabled",
										"type": "string"
									},
									"StatusMessage": {
										"value": "Warning",
										"type": "string"
									},
									"PipelineTriggerID": {
										"value": {
											"value": "@pipeline().TriggerId",
											"type": "Expression"
										},
										"type": "string"
									},
									"PipelineTriggerName": {
										"value": {
											"value": "@pipeline().TriggerName",
											"type": "Expression"
										},
										"type": "string"
									},
									"PipelineTriggerType": {
										"value": {
											"value": "@pipeline().TriggerType",
											"type": "Expression"
										},
										"type": "string"
									},
									"PipelineTriggeredbyPipelineName": {
										"value": {
											"value": "@pipeline()?.TriggeredByPipelineName",
											"type": "Expression"
										},
										"type": "string"
									},
									"PipelineTriggeredbyPipelineRunID": {
										"value": {
											"value": "@pipeline()?.TriggeredByPipelineRunId",
											"type": "Expression"
										},
										"type": "string"
									},
									"ActivityType": {
										"value": "Pipeline",
										"type": "string"
									}
								},
								"snapshot": true,
								"sparkPool": {
									"referenceName": "pinssynspodw",
									"type": "BigDataPoolReference"
								},
								"conf": {
									"spark.dynamicAllocation.enabled": true,
									"spark.dynamicAllocation.minExecutors": null,
									"spark.dynamicAllocation.maxExecutors": null
								},
								"numExecutors": null
							}
						},
						{
							"name": "Send Appeal Document metadata disabled warning",
							"type": "ExecutePipeline",
							"dependsOn": [],
							"policy": {
								"secureInput": true
							},
							"userProperties": [],
							"typeProperties": {
								"pipeline": {
									"referenceName": "pln_utl_Send_Teams_Message",
									"type": "PipelineReference"
								},
								"waitOnCompletion": true,
								"parameters": {
									"dataFactorySubscription": {
										"value": "@pipeline().parameters.subscription_id",
										"type": "Expression"
									},
									"dataFactoryResourceGroup": {
										"value": "@pipeline().parameters.resource_group",
										"type": "Expression"
									},
									"pipelineRunId": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"teamsWebhookUrl": {
										"value": "@pipeline().parameters.webhook_url",
										"type": "Expression"
									},
									"activityName": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"activityMessage": "Loading Horizon data",
									"activityDuration": {
										"value": "@concat(string(div(div(sub(ticks(formatDateTime(utcNow(),'yyyy-MM-dd HH:mm:sss')),ticks(formatDateTime(pipeline().parameters.start_time,'yyyy-MM-dd HH:mm:sss'))),600000000),60)),'H:', \nstring(mod(div(sub(ticks(formatDateTime(utcNow(),'yyyy-MM-dd HH:mm:sss')),ticks(formatDateTime(pipeline().parameters.start_time,'yyyy-MM-dd HH:mm:sss'))),600000000),60)),'M:00s')",
										"type": "Expression"
									},
									"activityStatus": "On Progress",
									"Colour": {
										"value": "@pipeline().parameters.warning_colour",
										"type": "Expression"
									},
									"Image": {
										"value": "@pipeline().parameters.warning_image",
										"type": "Expression"
									},
									"Message_title": "ODW - Master pipeline warning",
									"Message_subtitle": "Horizon Appeal Document metadata data load disabled"
								}
							}
						}
					],
					"ifTrueActivities": [
						{
							"name": "Horizon Appeal Document metadata",
							"type": "ExecutePipeline",
							"dependsOn": [
								{
									"activity": "Record loading Appeal Document metadata",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"pipeline": {
									"referenceName": "pln_horizon_appeals_document_metadata",
									"type": "PipelineReference"
								},
								"waitOnCompletion": true
							}
						},
						{
							"name": "Record completed Appeal Document metadata",
							"type": "SynapseNotebook",
							"dependsOn": [
								{
									"activity": "Horizon Appeal Document metadata",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"notebook": {
									"referenceName": "py_utils_log_stage",
									"type": "NotebookReference"
								},
								"parameters": {
									"Stage": {
										"value": "Completion",
										"type": "string"
									},
									"PipelineName": {
										"value": {
											"value": "@pipeline().Pipeline",
											"type": "Expression"
										},
										"type": "string"
									},
									"PipelineRunID": {
										"value": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										},
										"type": "string"
									},
									"Inserts": {
										"value": "0",
										"type": "int"
									},
									"Updates": {
										"value": "0",
										"type": "int"
									},
									"Deletes": {
										"value": "0",
										"type": "int"
									},
									"ErrorMessage": {
										"value": "",
										"type": "string"
									},
									"StatusMessage": {
										"value": "Loading Appeal Document metadata",
										"type": "string"
									},
									"PipelineTriggerID": {
										"value": {
											"value": "@pipeline().TriggerId",
											"type": "Expression"
										},
										"type": "string"
									},
									"PipelineTriggerName": {
										"value": {
											"value": "@pipeline().TriggerName",
											"type": "Expression"
										},
										"type": "string"
									},
									"PipelineTriggerType": {
										"value": {
											"value": "@pipeline().TriggerType",
											"type": "Expression"
										},
										"type": "string"
									},
									"PipelineTriggeredbyPipelineName": {
										"value": {
											"value": "@pipeline()?.TriggeredByPipelineName",
											"type": "Expression"
										},
										"type": "string"
									},
									"PipelineTriggeredbyPipelineRunID": {
										"value": {
											"value": "@pipeline()?.TriggeredByPipelineRunId",
											"type": "Expression"
										},
										"type": "string"
									},
									"ActivityType": {
										"value": "Pipeline",
										"type": "string"
									}
								},
								"snapshot": true,
								"sparkPool": {
									"referenceName": "pinssynspodw",
									"type": "BigDataPoolReference"
								},
								"conf": {
									"spark.dynamicAllocation.enabled": true,
									"spark.dynamicAllocation.minExecutors": null,
									"spark.dynamicAllocation.maxExecutors": null
								},
								"numExecutors": null
							}
						},
						{
							"name": "Send Horizon failed",
							"type": "ExecutePipeline",
							"dependsOn": [
								{
									"activity": "Horizon Appeal Document metadata",
									"dependencyConditions": [
										"Failed"
									]
								}
							],
							"policy": {
								"secureInput": true
							},
							"userProperties": [],
							"typeProperties": {
								"pipeline": {
									"referenceName": "pln_utl_Send_Teams_Message",
									"type": "PipelineReference"
								},
								"waitOnCompletion": true,
								"parameters": {
									"dataFactorySubscription": {
										"value": "@pipeline().parameters.subscription_id",
										"type": "Expression"
									},
									"dataFactoryResourceGroup": {
										"value": "@pipeline().parameters.resource_group",
										"type": "Expression"
									},
									"pipelineRunId": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"teamsWebhookUrl": {
										"value": "@pipeline().parameters.webhook_url",
										"type": "Expression"
									},
									"activityName": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"activityMessage": "Horizon data failed",
									"activityDuration": {
										"value": "@concat(string(div(div(sub(ticks(formatDateTime(utcNow(),'yyyy-MM-dd HH:mm:sss')),ticks(formatDateTime(pipeline().parameters.start_time,'yyyy-MM-dd HH:mm:sss'))),600000000),60)),'H:', \nstring(mod(div(sub(ticks(formatDateTime(utcNow(),'yyyy-MM-dd HH:mm:sss')),ticks(formatDateTime(pipeline().parameters.start_time,'yyyy-MM-dd HH:mm:sss'))),600000000),60)),'M:00s')",
										"type": "Expression"
									},
									"activityStatus": "Failed",
									"Colour": {
										"value": "@pipeline().parameters.failed_colour",
										"type": "Expression"
									},
									"Image": {
										"value": "@pipeline().parameters.failed_image",
										"type": "Expression"
									},
									"Message_title": "ODW - Horizon data failed",
									"Message_subtitle": "Appeal Document metadata feed failed"
								}
							}
						},
						{
							"name": "Record loading Appeal Document metadata",
							"type": "ExecutePipeline",
							"dependsOn": [],
							"policy": {
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"pipeline": {
									"referenceName": "pln_log_to_storage",
									"type": "PipelineReference"
								},
								"waitOnCompletion": true,
								"parameters": {
									"Stage": "OnProgress",
									"PipelineName": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"PipelineRunID": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"StartTime": {
										"value": "@formatDateTime(utcnow(), 'yyyy-MM-ddTHH:mm:ssZ')",
										"type": "Expression"
									},
									"StatusMessage": "Loading Appeal Document metadata",
									"PipelineTriggerID": {
										"value": "@pipeline().TriggerId",
										"type": "Expression"
									},
									"PipelineTriggerName": {
										"value": "@pipeline().TriggerName",
										"type": "Expression"
									},
									"PipelineTriggerType": {
										"value": "@pipeline().TriggerType",
										"type": "Expression"
									},
									"PipelineTriggeredbyPipelineName": {
										"value": "@pipeline()?.TriggeredByPipelineName",
										"type": "Expression"
									},
									"PipelineTriggeredbyPipelineRunID": {
										"value": "@pipeline()?.TriggeredByPipelineRunId",
										"type": "Expression"
									},
									"ActivityType": "Pipeline"
								}
							}
						}
					]
				}
			},
			{
				"name": "s62a vc",
				"type": "IfCondition",
				"dependsOn": [
					{
						"activity": "Random wait to allow parallelism_copy4",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@contains(pipeline().parameters.horizon_feed, 's62a vc')",
						"type": "Expression"
					},
					"ifFalseActivities": [
						{
							"name": "Record s62a vc warning",
							"type": "SynapseNotebook",
							"dependsOn": [
								{
									"activity": "Send s62a vc disabled warning",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"notebook": {
									"referenceName": "py_utils_log_stage",
									"type": "NotebookReference"
								},
								"parameters": {
									"Stage": {
										"value": "Warning",
										"type": "string"
									},
									"PipelineName": {
										"value": {
											"value": "@pipeline().Pipeline",
											"type": "Expression"
										},
										"type": "string"
									},
									"PipelineRunID": {
										"value": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										},
										"type": "string"
									},
									"Inserts": {
										"value": "0",
										"type": "int"
									},
									"Updates": {
										"value": "0",
										"type": "int"
									},
									"Deletes": {
										"value": "0",
										"type": "int"
									},
									"ErrorMessage": {
										"value": "Horizon - s62a vc disabled",
										"type": "string"
									},
									"StatusMessage": {
										"value": "Warning",
										"type": "string"
									},
									"PipelineTriggerID": {
										"value": {
											"value": "@pipeline().TriggerId",
											"type": "Expression"
										},
										"type": "string"
									},
									"PipelineTriggerName": {
										"value": {
											"value": "@pipeline().TriggerName",
											"type": "Expression"
										},
										"type": "string"
									},
									"PipelineTriggerType": {
										"value": {
											"value": "@pipeline().TriggerType",
											"type": "Expression"
										},
										"type": "string"
									},
									"PipelineTriggeredbyPipelineName": {
										"value": {
											"value": "@pipeline()?.TriggeredByPipelineName",
											"type": "Expression"
										},
										"type": "string"
									},
									"PipelineTriggeredbyPipelineRunID": {
										"value": {
											"value": "@pipeline()?.TriggeredByPipelineRunId",
											"type": "Expression"
										},
										"type": "string"
									},
									"ActivityType": {
										"value": "Pipeline",
										"type": "string"
									}
								},
								"snapshot": true,
								"sparkPool": {
									"referenceName": "pinssynspodw",
									"type": "BigDataPoolReference"
								},
								"conf": {
									"spark.dynamicAllocation.enabled": true,
									"spark.dynamicAllocation.minExecutors": null,
									"spark.dynamicAllocation.maxExecutors": null
								},
								"numExecutors": null
							}
						},
						{
							"name": "Send s62a vc disabled warning",
							"type": "ExecutePipeline",
							"dependsOn": [],
							"policy": {
								"secureInput": true
							},
							"userProperties": [],
							"typeProperties": {
								"pipeline": {
									"referenceName": "pln_utl_Send_Teams_Message",
									"type": "PipelineReference"
								},
								"waitOnCompletion": true,
								"parameters": {
									"dataFactorySubscription": {
										"value": "@pipeline().parameters.subscription_id",
										"type": "Expression"
									},
									"dataFactoryResourceGroup": {
										"value": "@pipeline().parameters.resource_group",
										"type": "Expression"
									},
									"pipelineRunId": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"teamsWebhookUrl": {
										"value": "@pipeline().parameters.webhook_url",
										"type": "Expression"
									},
									"activityName": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"activityMessage": "Loading Horizon data",
									"activityDuration": {
										"value": "@concat(string(div(div(sub(ticks(formatDateTime(utcNow(),'yyyy-MM-dd HH:mm:sss')),ticks(formatDateTime(pipeline().parameters.start_time,'yyyy-MM-dd HH:mm:sss'))),600000000),60)),'H:', \nstring(mod(div(sub(ticks(formatDateTime(utcNow(),'yyyy-MM-dd HH:mm:sss')),ticks(formatDateTime(pipeline().parameters.start_time,'yyyy-MM-dd HH:mm:sss'))),600000000),60)),'M:00s')",
										"type": "Expression"
									},
									"activityStatus": "On Progress",
									"Colour": {
										"value": "@pipeline().parameters.warning_colour",
										"type": "Expression"
									},
									"Image": {
										"value": "@pipeline().parameters.warning_image",
										"type": "Expression"
									},
									"Message_title": "ODW - Master pipeline warning",
									"Message_subtitle": "Horizon s62a vc data load disabled"
								}
							}
						}
					],
					"ifTrueActivities": [
						{
							"name": "Horizon s62a view cases",
							"type": "ExecutePipeline",
							"dependsOn": [
								{
									"activity": "Record loading s62a vc data",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"pipeline": {
									"referenceName": "pln_horizon_s62a_view_cases",
									"type": "PipelineReference"
								},
								"waitOnCompletion": true
							}
						},
						{
							"name": "Record completed s62a vc data",
							"type": "SynapseNotebook",
							"dependsOn": [
								{
									"activity": "Horizon s62a view cases",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"notebook": {
									"referenceName": "py_utils_log_stage",
									"type": "NotebookReference"
								},
								"parameters": {
									"Stage": {
										"value": "Completion",
										"type": "string"
									},
									"PipelineName": {
										"value": {
											"value": "@pipeline().Pipeline",
											"type": "Expression"
										},
										"type": "string"
									},
									"PipelineRunID": {
										"value": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										},
										"type": "string"
									},
									"Inserts": {
										"value": "0",
										"type": "int"
									},
									"Updates": {
										"value": "0",
										"type": "int"
									},
									"Deletes": {
										"value": "0",
										"type": "int"
									},
									"ErrorMessage": {
										"value": "",
										"type": "string"
									},
									"StatusMessage": {
										"value": "Loading s62a vc",
										"type": "string"
									},
									"PipelineTriggerID": {
										"value": {
											"value": "@pipeline().TriggerId",
											"type": "Expression"
										},
										"type": "string"
									},
									"PipelineTriggerName": {
										"value": {
											"value": "@pipeline().TriggerName",
											"type": "Expression"
										},
										"type": "string"
									},
									"PipelineTriggerType": {
										"value": {
											"value": "@pipeline().TriggerType",
											"type": "Expression"
										},
										"type": "string"
									},
									"PipelineTriggeredbyPipelineName": {
										"value": {
											"value": "@pipeline()?.TriggeredByPipelineName",
											"type": "Expression"
										},
										"type": "string"
									},
									"PipelineTriggeredbyPipelineRunID": {
										"value": {
											"value": "@pipeline()?.TriggeredByPipelineRunId",
											"type": "Expression"
										},
										"type": "string"
									},
									"ActivityType": {
										"value": "Pipeline",
										"type": "string"
									}
								},
								"snapshot": true,
								"sparkPool": {
									"referenceName": "pinssynspodw",
									"type": "BigDataPoolReference"
								},
								"conf": {
									"spark.dynamicAllocation.enabled": true,
									"spark.dynamicAllocation.minExecutors": null,
									"spark.dynamicAllocation.maxExecutors": null
								},
								"numExecutors": null
							}
						},
						{
							"name": "Send Horizon failed copy1",
							"type": "ExecutePipeline",
							"dependsOn": [
								{
									"activity": "Horizon s62a view cases",
									"dependencyConditions": [
										"Failed"
									]
								}
							],
							"policy": {
								"secureInput": true
							},
							"userProperties": [],
							"typeProperties": {
								"pipeline": {
									"referenceName": "pln_utl_Send_Teams_Message",
									"type": "PipelineReference"
								},
								"waitOnCompletion": true,
								"parameters": {
									"dataFactorySubscription": {
										"value": "@pipeline().parameters.subscription_id",
										"type": "Expression"
									},
									"dataFactoryResourceGroup": {
										"value": "@pipeline().parameters.resource_group",
										"type": "Expression"
									},
									"pipelineRunId": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"teamsWebhookUrl": {
										"value": "@pipeline().parameters.webhook_url",
										"type": "Expression"
									},
									"activityName": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"activityMessage": "Horizon data failed",
									"activityDuration": {
										"value": "@concat(string(div(div(sub(ticks(formatDateTime(utcNow(),'yyyy-MM-dd HH:mm:sss')),ticks(formatDateTime(pipeline().parameters.start_time,'yyyy-MM-dd HH:mm:sss'))),600000000),60)),'H:', \nstring(mod(div(sub(ticks(formatDateTime(utcNow(),'yyyy-MM-dd HH:mm:sss')),ticks(formatDateTime(pipeline().parameters.start_time,'yyyy-MM-dd HH:mm:sss'))),600000000),60)),'M:00s')",
										"type": "Expression"
									},
									"activityStatus": "Failed",
									"Colour": {
										"value": "@pipeline().parameters.failed_colour",
										"type": "Expression"
									},
									"Image": {
										"value": "@pipeline().parameters.failed_image",
										"type": "Expression"
									},
									"Message_title": "ODW - Horizon data failed",
									"Message_subtitle": "s62a vc feed failed"
								}
							}
						},
						{
							"name": "Record loading s62a vc data",
							"type": "ExecutePipeline",
							"dependsOn": [],
							"policy": {
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"pipeline": {
									"referenceName": "pln_log_to_storage",
									"type": "PipelineReference"
								},
								"waitOnCompletion": true,
								"parameters": {
									"Stage": "OnProgress",
									"PipelineName": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"PipelineRunID": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"StartTime": {
										"value": "@formatDateTime(utcnow(), 'yyyy-MM-ddTHH:mm:ssZ')",
										"type": "Expression"
									},
									"StatusMessage": "Loading s62a vc",
									"PipelineTriggerID": {
										"value": "@pipeline().TriggerId",
										"type": "Expression"
									},
									"PipelineTriggerName": {
										"value": "@pipeline().TriggerName",
										"type": "Expression"
									},
									"PipelineTriggerType": {
										"value": "@pipeline().TriggerType",
										"type": "Expression"
									},
									"PipelineTriggeredbyPipelineName": {
										"value": "@pipeline()?.TriggeredByPipelineName",
										"type": "Expression"
									},
									"PipelineTriggeredbyPipelineRunID": {
										"value": "@pipeline()?.TriggeredByPipelineRunId",
										"type": "Expression"
									},
									"ActivityType": "Pipeline"
								}
							}
						}
					]
				}
			},
			{
				"name": "Appeals Folder",
				"type": "IfCondition",
				"dependsOn": [
					{
						"activity": "Random wait to allow parallelism_copy4_copy1",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@contains(pipeline().parameters.horizon_feed, 'Appeals Folder')",
						"type": "Expression"
					},
					"ifFalseActivities": [
						{
							"name": "Record Appeals Folder warning",
							"type": "SynapseNotebook",
							"dependsOn": [
								{
									"activity": "Send Appeals Folder disabled warning",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"notebook": {
									"referenceName": "py_utils_log_stage",
									"type": "NotebookReference"
								},
								"parameters": {
									"Stage": {
										"value": "Warning",
										"type": "string"
									},
									"PipelineName": {
										"value": {
											"value": "@pipeline().Pipeline",
											"type": "Expression"
										},
										"type": "string"
									},
									"PipelineRunID": {
										"value": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										},
										"type": "string"
									},
									"Inserts": {
										"value": "0",
										"type": "int"
									},
									"Updates": {
										"value": "0",
										"type": "int"
									},
									"Deletes": {
										"value": "0",
										"type": "int"
									},
									"ErrorMessage": {
										"value": "Horizon - Appeals Folder disabled",
										"type": "string"
									},
									"StatusMessage": {
										"value": "Warning",
										"type": "string"
									},
									"PipelineTriggerID": {
										"value": {
											"value": "@pipeline().TriggerId",
											"type": "Expression"
										},
										"type": "string"
									},
									"PipelineTriggerName": {
										"value": {
											"value": "@pipeline().TriggerName",
											"type": "Expression"
										},
										"type": "string"
									},
									"PipelineTriggerType": {
										"value": {
											"value": "@pipeline().TriggerType",
											"type": "Expression"
										},
										"type": "string"
									},
									"PipelineTriggeredbyPipelineName": {
										"value": {
											"value": "@pipeline()?.TriggeredByPipelineName",
											"type": "Expression"
										},
										"type": "string"
									},
									"PipelineTriggeredbyPipelineRunID": {
										"value": {
											"value": "@pipeline()?.TriggeredByPipelineRunId",
											"type": "Expression"
										},
										"type": "string"
									},
									"ActivityType": {
										"value": "Pipeline",
										"type": "string"
									}
								},
								"snapshot": true,
								"sparkPool": {
									"referenceName": "pinssynspodw",
									"type": "BigDataPoolReference"
								},
								"conf": {
									"spark.dynamicAllocation.enabled": true,
									"spark.dynamicAllocation.minExecutors": null,
									"spark.dynamicAllocation.maxExecutors": null
								},
								"numExecutors": null
							}
						},
						{
							"name": "Send Appeals Folder disabled warning",
							"type": "ExecutePipeline",
							"dependsOn": [],
							"policy": {
								"secureInput": true
							},
							"userProperties": [],
							"typeProperties": {
								"pipeline": {
									"referenceName": "pln_utl_Send_Teams_Message",
									"type": "PipelineReference"
								},
								"waitOnCompletion": true,
								"parameters": {
									"dataFactorySubscription": {
										"value": "@pipeline().parameters.subscription_id",
										"type": "Expression"
									},
									"dataFactoryResourceGroup": {
										"value": "@pipeline().parameters.resource_group",
										"type": "Expression"
									},
									"pipelineRunId": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"teamsWebhookUrl": {
										"value": "@pipeline().parameters.webhook_url",
										"type": "Expression"
									},
									"activityName": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"activityMessage": "Loading Horizon data",
									"activityDuration": {
										"value": "@concat(string(div(div(sub(ticks(formatDateTime(utcNow(),'yyyy-MM-dd HH:mm:sss')),ticks(formatDateTime(pipeline().parameters.start_time,'yyyy-MM-dd HH:mm:sss'))),600000000),60)),'H:', \nstring(mod(div(sub(ticks(formatDateTime(utcNow(),'yyyy-MM-dd HH:mm:sss')),ticks(formatDateTime(pipeline().parameters.start_time,'yyyy-MM-dd HH:mm:sss'))),600000000),60)),'M:00s')",
										"type": "Expression"
									},
									"activityStatus": "On Progress",
									"Colour": {
										"value": "@pipeline().parameters.warning_colour",
										"type": "Expression"
									},
									"Image": {
										"value": "@pipeline().parameters.warning_image",
										"type": "Expression"
									},
									"Message_title": "ODW - Master pipeline warning",
									"Message_subtitle": "Horizon Appeals Folder data load disabled"
								}
							}
						}
					],
					"ifTrueActivities": [
						{
							"name": "Horizon Appeals Folder",
							"type": "ExecutePipeline",
							"dependsOn": [
								{
									"activity": "Record loading Appeals Folder data",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"pipeline": {
									"referenceName": "pln_horizon_appeals_folder",
									"type": "PipelineReference"
								},
								"waitOnCompletion": true
							}
						},
						{
							"name": "Record completed Appeals Folder data",
							"type": "SynapseNotebook",
							"dependsOn": [
								{
									"activity": "Horizon Appeals Folder",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"notebook": {
									"referenceName": "py_utils_log_stage",
									"type": "NotebookReference"
								},
								"parameters": {
									"Stage": {
										"value": "Completion",
										"type": "string"
									},
									"PipelineName": {
										"value": {
											"value": "@pipeline().Pipeline",
											"type": "Expression"
										},
										"type": "string"
									},
									"PipelineRunID": {
										"value": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										},
										"type": "string"
									},
									"Inserts": {
										"value": "0",
										"type": "int"
									},
									"Updates": {
										"value": "0",
										"type": "int"
									},
									"Deletes": {
										"value": "0",
										"type": "int"
									},
									"ErrorMessage": {
										"value": "",
										"type": "string"
									},
									"StatusMessage": {
										"value": "Loading Appeals Folder",
										"type": "string"
									},
									"PipelineTriggerID": {
										"value": {
											"value": "@pipeline().TriggerId",
											"type": "Expression"
										},
										"type": "string"
									},
									"PipelineTriggerName": {
										"value": {
											"value": "@pipeline().TriggerName",
											"type": "Expression"
										},
										"type": "string"
									},
									"PipelineTriggerType": {
										"value": {
											"value": "@pipeline().TriggerType",
											"type": "Expression"
										},
										"type": "string"
									},
									"PipelineTriggeredbyPipelineName": {
										"value": {
											"value": "@pipeline()?.TriggeredByPipelineName",
											"type": "Expression"
										},
										"type": "string"
									},
									"PipelineTriggeredbyPipelineRunID": {
										"value": {
											"value": "@pipeline()?.TriggeredByPipelineRunId",
											"type": "Expression"
										},
										"type": "string"
									},
									"ActivityType": {
										"value": "Pipeline",
										"type": "string"
									}
								},
								"snapshot": true,
								"sparkPool": {
									"referenceName": "pinssynspodw",
									"type": "BigDataPoolReference"
								},
								"conf": {
									"spark.dynamicAllocation.enabled": true,
									"spark.dynamicAllocation.minExecutors": null,
									"spark.dynamicAllocation.maxExecutors": null
								},
								"numExecutors": null
							}
						},
						{
							"name": "Send Horizon failed copy1_copy2",
							"type": "ExecutePipeline",
							"dependsOn": [
								{
									"activity": "Horizon Appeals Folder",
									"dependencyConditions": [
										"Failed"
									]
								}
							],
							"policy": {
								"secureInput": true
							},
							"userProperties": [],
							"typeProperties": {
								"pipeline": {
									"referenceName": "pln_utl_Send_Teams_Message",
									"type": "PipelineReference"
								},
								"waitOnCompletion": true,
								"parameters": {
									"dataFactorySubscription": {
										"value": "@pipeline().parameters.subscription_id",
										"type": "Expression"
									},
									"dataFactoryResourceGroup": {
										"value": "@pipeline().parameters.resource_group",
										"type": "Expression"
									},
									"pipelineRunId": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"teamsWebhookUrl": {
										"value": "@pipeline().parameters.webhook_url",
										"type": "Expression"
									},
									"activityName": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"activityMessage": "Horizon data failed",
									"activityDuration": {
										"value": "@concat(string(div(div(sub(ticks(formatDateTime(utcNow(),'yyyy-MM-dd HH:mm:sss')),ticks(formatDateTime(pipeline().parameters.start_time,'yyyy-MM-dd HH:mm:sss'))),600000000),60)),'H:', \nstring(mod(div(sub(ticks(formatDateTime(utcNow(),'yyyy-MM-dd HH:mm:sss')),ticks(formatDateTime(pipeline().parameters.start_time,'yyyy-MM-dd HH:mm:sss'))),600000000),60)),'M:00s')",
										"type": "Expression"
									},
									"activityStatus": "Failed",
									"Colour": {
										"value": "@pipeline().parameters.failed_colour",
										"type": "Expression"
									},
									"Image": {
										"value": "@pipeline().parameters.failed_image",
										"type": "Expression"
									},
									"Message_title": "ODW - Horizon data failed",
									"Message_subtitle": "Appeals Folder feed failed"
								}
							}
						},
						{
							"name": "Record loading Appeals Folder data",
							"type": "ExecutePipeline",
							"dependsOn": [],
							"policy": {
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"pipeline": {
									"referenceName": "pln_log_to_storage",
									"type": "PipelineReference"
								},
								"waitOnCompletion": true,
								"parameters": {
									"Stage": "OnProgress",
									"PipelineName": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"PipelineRunID": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"StartTime": {
										"value": "@formatDateTime(utcnow(), 'yyyy-MM-ddTHH:mm:ssZ')",
										"type": "Expression"
									},
									"StatusMessage": "Loading Appeals Folder",
									"PipelineTriggerID": {
										"value": "@pipeline().TriggerId",
										"type": "Expression"
									},
									"PipelineTriggerName": {
										"value": "@pipeline().TriggerName",
										"type": "Expression"
									},
									"PipelineTriggerType": {
										"value": "@pipeline().TriggerType",
										"type": "Expression"
									},
									"PipelineTriggeredbyPipelineName": {
										"value": "@pipeline()?.TriggeredByPipelineName",
										"type": "Expression"
									},
									"PipelineTriggeredbyPipelineRunID": {
										"value": "@pipeline()?.TriggeredByPipelineRunId",
										"type": "Expression"
									},
									"ActivityType": "Pipeline"
								}
							}
						}
					]
				}
			},
			{
				"name": "Random wait to allow parallelism",
				"type": "Wait",
				"dependsOn": [],
				"userProperties": [],
				"typeProperties": {
					"waitTimeInSeconds": {
						"value": "@rand(1, 10)",
						"type": "Expression"
					}
				}
			},
			{
				"name": "Random wait to allow parallelism_copy4",
				"type": "Wait",
				"dependsOn": [],
				"userProperties": [],
				"typeProperties": {
					"waitTimeInSeconds": {
						"value": "@rand(1, 10)",
						"type": "Expression"
					}
				}
			},
			{
				"name": "Random wait to allow parallelism_copy4_copy1",
				"type": "Wait",
				"dependsOn": [],
				"userProperties": [],
				"typeProperties": {
					"waitTimeInSeconds": {
						"value": "@rand(1, 10)",
						"type": "Expression"
					}
				}
			},
			{
				"name": "Random wait to allow parallelism_copy4_copy2",
				"type": "Wait",
				"dependsOn": [],
				"userProperties": [],
				"typeProperties": {
					"waitTimeInSeconds": {
						"value": "@rand(1, 10)",
						"type": "Expression"
					}
				}
			}
		],
		"parameters": {
			"webhook_url": {
				"type": "string"
			},
			"subscription_id": {
				"type": "string"
			},
			"resource_group": {
				"type": "string"
			},
			"starting_colour": {
				"type": "string"
			},
			"on_progress_colour": {
				"type": "string"
			},
			"failed_colour": {
				"type": "string"
			},
			"start_time": {
				"type": "string"
			},
			"starting_image": {
				"type": "string"
			},
			"progress_image": {
				"type": "string"
			},
			"warning_image": {
				"type": "string"
			},
			"failed_image": {
				"type": "string"
			},
			"warning_colour": {
				"type": "string"
			},
			"horizon_feed": {
				"type": "string"
			}
		},
		"folder": {
			"name": "utils/Master"
		},
		"annotations": []
	}
}