{
	"name": "pln_application_run_stage_service_bus",
	"properties": {
		"description": "Used to execute specific parts of pipelines for applications. In order to execute, you need to set the following variables:\n\n- Stage. Set to one of the following {Src to Raw, Raw to Std, Std to Hrm, Hrm to Cur}\n- Pipeline. Set to the pipeline that you are wanting to run a specific stage for. For example, pln_service_bus_nsip_subscription.\n\nThe rest of the required variables will be set programmatically.\n\nNote: Variables are case sensitive. ",
		"activities": [
			{
				"name": "Process source to raw for service bus pipelines",
				"type": "IfCondition",
				"dependsOn": [
					{
						"activity": "Set specific_file",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@equals(variables('Stage'), 'Src to Raw')",
						"type": "Expression"
					},
					"ifTrueActivities": [
						{
							"name": "Src to raw",
							"type": "ExecutePipeline",
							"dependsOn": [],
							"userProperties": [],
							"typeProperties": {
								"pipeline": {
									"referenceName": "pln_trigger_function_app",
									"type": "PipelineReference"
								},
								"waitOnCompletion": true,
								"parameters": {
									"function_name": {
										"value": "@variables('entity_name')",
										"type": "Expression"
									}
								}
							}
						}
					]
				}
			},
			{
				"name": "Set properties needed for execution",
				"description": "We need to know which parts of the pipeline to run. Based on the configuration we will set variables accordingly",
				"type": "Switch",
				"dependsOn": [],
				"userProperties": [],
				"typeProperties": {
					"on": {
						"value": "@variables('Pipeline')",
						"type": "Expression"
					},
					"cases": [
						{
							"value": "pln_service_bus_nsip_subscription",
							"activities": [
								{
									"name": "set entity name 1",
									"description": "Set entity name to nsip-subscription",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "entity_name",
										"value": "nsip-subscription"
									}
								}
							]
						},
						{
							"value": "pln_service_bus_nsip_s51_advice",
							"activities": [
								{
									"name": "set entity name 2",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "entity_name",
										"value": "nsip-s51-advice"
									}
								}
							]
						},
						{
							"value": "pln_service_bus_nsip_exam_timetable",
							"activities": [
								{
									"name": "Set entity name 3",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "entity_name",
										"value": "nsip-exam-timetable"
									}
								}
							]
						},
						{
							"value": "pln_service_bus_nsip_project_update",
							"activities": [
								{
									"name": "Set entity name 4",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "entity_name",
										"value": "nsip-project-update"
									}
								}
							]
						},
						{
							"value": "pln_service_bus_nsip_project",
							"activities": [
								{
									"name": "Set entity name 5",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "entity_name",
										"value": "nsip-project"
									}
								}
							]
						}
					],
					"defaultActivities": [
						{
							"name": "No associate pipeline",
							"description": "Set to error to ensure that nothing happens",
							"type": "SetVariable",
							"dependsOn": [],
							"policy": {
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"variableName": "entity_name",
								"value": "error"
							}
						}
					]
				}
			},
			{
				"name": "Convert json to csv if we downloaded messages",
				"type": "IfCondition",
				"dependsOn": [
					{
						"activity": "Process source to raw for service bus pipelines",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@and(equals(variables('Stage'), 'Src to Raw'), greater(activity('Src to Raw').output.pipelineReturnValue.Messages, 0))",
						"type": "Expression"
					},
					"ifTrueActivities": [
						{
							"name": "Json to csv",
							"type": "SynapseNotebook",
							"dependsOn": [],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"notebook": {
									"referenceName": "py_service_bus_json_to_csv",
									"type": "NotebookReference"
								},
								"parameters": {
									"source_folder": {
										"value": {
											"value": "@variables('source_folder')",
											"type": "Expression"
										},
										"type": "string"
									},
									"source_frequency_folder": {
										"value": {
											"value": "@variables('entity_name')",
											"type": "Expression"
										},
										"type": "string"
									}
								},
								"snapshot": true,
								"conf": {
									"spark.dynamicAllocation.enabled": null,
									"spark.dynamicAllocation.minExecutors": null,
									"spark.dynamicAllocation.maxExecutors": null
								},
								"numExecutors": null
							}
						}
					]
				}
			},
			{
				"name": "Run raw to standard",
				"type": "IfCondition",
				"dependsOn": [
					{
						"activity": "Convert json to csv if we downloaded messages",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@equals(variables('Stage'), 'Raw to Std')",
						"type": "Expression"
					},
					"ifTrueActivities": [
						{
							"name": "Raw to std",
							"type": "SynapseNotebook",
							"dependsOn": [],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"notebook": {
									"referenceName": "py_raw_to_std",
									"type": "NotebookReference"
								},
								"parameters": {
									"source_folder": {
										"value": {
											"value": "@variables('source_folder')",
											"type": "Expression"
										},
										"type": "string"
									},
									"source_frequency_folder": {
										"value": {
											"value": "@variables('source_frequency_folder')",
											"type": "Expression"
										},
										"type": "string"
									},
									"specific_file": {
										"value": {
											"value": "@variables('entity_name')",
											"type": "Expression"
										},
										"type": "string"
									}
								},
								"snapshot": true,
								"conf": {
									"spark.dynamicAllocation.enabled": null,
									"spark.dynamicAllocation.minExecutors": null,
									"spark.dynamicAllocation.maxExecutors": null
								},
								"numExecutors": null
							}
						}
					]
				}
			},
			{
				"name": "Run standard to Harmonised",
				"type": "IfCondition",
				"dependsOn": [
					{
						"activity": "Run raw to standard",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@equals(variables('Stage'),'Std to Hrm')",
						"type": "Expression"
					},
					"ifTrueActivities": [
						{
							"name": "Std to Hrm",
							"type": "SynapseNotebook",
							"dependsOn": [],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"notebook": {
									"referenceName": "py_std_to_hrm",
									"type": "NotebookReference"
								},
								"parameters": {
									"entity_name": {
										"value": {
											"value": "@variables('entity_name')",
											"type": "Expression"
										},
										"type": "string"
									}
								},
								"snapshot": true,
								"conf": {
									"spark.dynamicAllocation.enabled": null,
									"spark.dynamicAllocation.minExecutors": null,
									"spark.dynamicAllocation.maxExecutors": null
								},
								"numExecutors": null
							}
						}
					]
				}
			},
			{
				"name": "Subscription - Hrm to cur",
				"type": "IfCondition",
				"dependsOn": [
					{
						"activity": "Run standard to Harmonised",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@and(equals(variables('Stage'), 'Hrm to Cur'), equals(variables('Pipeline'), 'pln_service_bus_nsip_subscription'))",
						"type": "Expression"
					},
					"ifTrueActivities": [
						{
							"name": "Hrm to Cur",
							"type": "SynapseNotebook",
							"dependsOn": [],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"notebook": {
									"referenceName": "nsip_subscription",
									"type": "NotebookReference"
								},
								"snapshot": true,
								"conf": {
									"spark.dynamicAllocation.enabled": null,
									"spark.dynamicAllocation.minExecutors": null,
									"spark.dynamicAllocation.maxExecutors": null
								},
								"numExecutors": null
							}
						}
					]
				}
			},
			{
				"name": "nsip_s51_advice - hrm to Cur",
				"type": "IfCondition",
				"dependsOn": [
					{
						"activity": "Run standard to Harmonised",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@and(equals(variables('Stage'), 'Hrm to Cur'), equals(variables('Pipeline'), 'pln_service_bus_nsip_s51_advice'))",
						"type": "Expression"
					},
					"ifTrueActivities": [
						{
							"name": "nsp_s51_advice",
							"type": "SynapseNotebook",
							"dependsOn": [],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"notebook": {
									"referenceName": "nsip_s51_advice",
									"type": "NotebookReference"
								},
								"snapshot": true,
								"conf": {
									"spark.dynamicAllocation.enabled": null,
									"spark.dynamicAllocation.minExecutors": null,
									"spark.dynamicAllocation.maxExecutors": null
								},
								"numExecutors": null
							}
						}
					]
				}
			},
			{
				"name": "nsip_exam_timetable - hrm to Cur",
				"type": "IfCondition",
				"dependsOn": [
					{
						"activity": "Run standard to Harmonised",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@and(equals(variables('Stage'), 'Hrm to Cur'), equals(variables('Pipeline'), 'pln_service_bus_nsip_exam_timetable'))",
						"type": "Expression"
					},
					"ifTrueActivities": [
						{
							"name": "exam timetable",
							"type": "SynapseNotebook",
							"dependsOn": [],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"notebook": {
									"referenceName": "examination_timetable",
									"type": "NotebookReference"
								},
								"snapshot": true,
								"conf": {
									"spark.dynamicAllocation.enabled": null,
									"spark.dynamicAllocation.minExecutors": null,
									"spark.dynamicAllocation.maxExecutors": null
								},
								"numExecutors": null
							}
						}
					]
				}
			},
			{
				"name": "Set specific_file",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "Set source_frequency_folder",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"variableName": "specific_file",
					"value": {
						"value": "@variables('entity_name')",
						"type": "Expression"
					}
				}
			},
			{
				"name": "Set source_frequency_folder",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "Set properties needed for execution",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"variableName": "source_frequency_folder",
					"value": {
						"value": "@variables('entity_name')",
						"type": "Expression"
					}
				}
			},
			{
				"name": "Project update - hrm to cur",
				"type": "IfCondition",
				"dependsOn": [
					{
						"activity": "Run standard to Harmonised",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@and(equals(variables('Stage'), 'Hrm to Cur'), equals(variables('Pipeline'), 'pln_service_bus_nsip_project_update'))",
						"type": "Expression"
					},
					"ifTrueActivities": [
						{
							"name": "nisp_project_update",
							"type": "SynapseNotebook",
							"dependsOn": [],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"notebook": {
									"referenceName": "nsip_project_update",
									"type": "NotebookReference"
								},
								"snapshot": true,
								"conf": {
									"spark.dynamicAllocation.enabled": null,
									"spark.dynamicAllocation.minExecutors": null,
									"spark.dynamicAllocation.maxExecutors": null
								},
								"numExecutors": null
							}
						}
					]
				}
			}
		],
		"variables": {
			"Stage": {
				"type": "String",
				"defaultValue": "Raw to Std"
			},
			"Pipeline": {
				"type": "String",
				"defaultValue": "pln_service_bus_nsip_project"
			},
			"entity_name": {
				"type": "String"
			},
			"source_folder": {
				"type": "String",
				"defaultValue": "ServiceBus"
			},
			"source_frequency_folder": {
				"type": "String"
			},
			"specific_file": {
				"type": "String"
			}
		},
		"folder": {
			"name": "utils/application"
		},
		"annotations": []
	}
}