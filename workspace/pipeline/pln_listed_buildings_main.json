{
	"name": "pln_listed_buildings_main",
	"properties": {
		"activities": [
			{
				"name": "Src to Raw",
				"description": "Source to Raw",
				"type": "ExecutePipeline",
				"dependsOn": [],
				"policy": {
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "0_Listed_Buildings_API_to_RAW",
						"type": "PipelineReference"
					},
					"waitOnCompletion": true
				}
			},
			{
				"name": "Raw to Std",
				"type": "SynapseNotebook",
				"dependsOn": [
					{
						"activity": "Src to Raw",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "pln_listed_building_starttime",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
			"policy": {
				"timeout": "1:00:00",
				"retry": 3,
				"retryIntervalInSeconds": 30,
				"secureOutput": false,
				"secureInput": false
			},
				"userProperties": [],
				"typeProperties": {
					"notebook": {
						"referenceName": "py_load_listed_buildings_to_standardised",
						"type": "NotebookReference"
					},
					"parameters": {
						"date_folder": {
							"value": {
								"value": "@formatDateTime(utcNow(), 'yyyy-MM-dd')",
								"type": "Expression"
							},
							"type": "string"
						}
					},
					"snapshot": true,
					"conf": {
						"spark.dynamicAllocation.enabled": null,
						"spark.dynamicAllocation.minExecutors": null,
						"spark.dynamicAllocation.maxExecutors": null
					},
					"numExecutors": null
				}
			},
			{
				"name": "Std to Hrm",
				"type": "SynapseNotebook",
				"dependsOn": [
					{
						"activity": "Raw to Std",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.1:00:00",
					"retry": 3,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"notebook": {
						"referenceName": "py_load_listed_buildings_to_harmonised",
						"type": "NotebookReference"
					},
					"snapshot": true,
					"conf": {
						"spark.dynamicAllocation.enabled": null,
						"spark.dynamicAllocation.minExecutors": null,
						"spark.dynamicAllocation.maxExecutors": null
					},
					"numExecutors": null
				}
			},
			{
				"name": "Record ListedBuilding Failure",
				"type": "ExecutePipeline",
				"state": "Inactive",
				"onInactiveMarkAs": "Succeeded",
				"dependsOn": [],
				"policy": {
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "pln_log_to_appins",
						"type": "PipelineReference"
					},
					"waitOnCompletion": true,
					"parameters": {
						"Stage": "Fail",
						"PipelineName": {
							"value": "@activity('Src to Raw').Output.pipelineName",
							"type": "Expression"
						},
						"PipelineRunID": {
							"value": "@activity('Src to Raw').Output.pipelineRunId",
							"type": "Expression"
						},
						"StartTime": {
							"value": "@activity('Src to Raw').ExecutionStartTime",
							"type": "Expression"
						},
						"EndTime": {
							"value": "@activity('Src to Raw').ExecutionEndTime",
							"type": "Expression"
						},
						"ErrorMessage": {
							"value": "@activity('Src to Raw').Error.message",
							"type": "Expression"
						},
						"StatusMessage": {
							"value": "@activity('Src to Raw').Status",
							"type": "Expression"
						},
						"PipelineTriggeredbyPipelineName": {
							"value": "@activity('Src to Raw').PipelineName",
							"type": "Expression"
						},
						"PipelineTriggeredbyPipelineRunID": {
							"value": "@activity('Src to Raw').PipelineRunId",
							"type": "Expression"
						},
						"PipelineExecutionTimeInSec": {
							"value": "@activity('Src to Raw').Duration",
							"type": "Expression"
						},
						"ActivityType": {
							"value": "@activity('Src to Raw').ActivityType",
							"type": "Expression"
						},
						"DurationSeconds": {
							"value": "@activity('Src to Raw').Duration",
							"type": "Expression"
						},
						"StatusCode": {
							"value": "@activity('Src to Raw').StatusCode",
							"type": "Expression"
						}
					}
				}
			},
			{
				"name": "record count Std to Hrm",
				"type": "SetVariable",
				"state": "Inactive",
				"onInactiveMarkAs": "Succeeded",
				"dependsOn": [
					{
						"activity": "Std to Hrm",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"variableName": "recordCount",
					"value": {
						"value": "@activity('Std to Hrm').output.status.output.result.exitValue\n",
						"type": "Expression"
					}
				}
			},
			{
				"name": "Record completed pln listed building main Std to Harm",
				"type": "ExecutePipeline",
				"state": "Inactive",
				"onInactiveMarkAs": "Succeeded",
				"dependsOn": [
					{
						"activity": "error message",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "pln_log_to_appins",
						"type": "PipelineReference"
					},
					"waitOnCompletion": true,
					"parameters": {
						"Stage": "Completion",
						"PipelineName": {
							"value": "@pipeline().Pipeline",
							"type": "Expression"
						},
						"PipelineRunID": {
							"value": "@pipeline().RunId",
							"type": "Expression"
						},
						"StartTime": {
							"value": "@variables('starttime')",
							"type": "Expression"
						},
						"EndTime": {
							"value": "@utcNow()",
							"type": "Expression"
						},
						"Inserts": {
							"value": "@variables('recordCount')",
							"type": "Expression"
						},
						"StatusMessage": "pln listed building main loaded",
						"PipelineTriggerID": {
							"value": "@pipeline().TriggerId",
							"type": "Expression"
						},
						"PipelineTriggerName": {
							"value": "@pipeline().TriggerName",
							"type": "Expression"
						},
						"PipelineTriggerType": {
							"value": "@pipeline().TriggerType",
							"type": "Expression"
						},
						"PipelineTriggeredbyPipelineName": {
							"value": "@pipeline()?.TriggeredByPipelineName",
							"type": "Expression"
						},
						"PipelineTriggeredbyPipelineRunID": {
							"value": "@pipeline()?.TriggeredByPipelineRunId",
							"type": "Expression"
						},
						"ActivityType": "Pipeline",
						"DurationSeconds": {
							"value": "@div(sub(ticks(utcNow()), ticks(variables('starttime'))), 10000000)",
							"type": "Expression"
						},
						"StatusCode": "200",
						"AppInsIKey": {
							"value": "@pipeline().parameters.apps_insights_ikey",
							"type": "Expression"
						}
					}
				}
			},
			{
				"name": "pln listed building main Std to Harmonised failed",
				"type": "ExecutePipeline",
				"state": "Inactive",
				"onInactiveMarkAs": "Succeeded",
				"dependsOn": [
					{
						"activity": "error message",
						"dependencyConditions": [
							"Failed"
						]
					}
				],
				"policy": {
					"secureInput": true
				},
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "pln_utl_Send_Teams_Message",
						"type": "PipelineReference"
					},
					"waitOnCompletion": true,
					"parameters": {
						"dataFactorySubscription": {
							"value": "@pipeline().parameters.subscription_id",
							"type": "Expression"
						},
						"dataFactoryResourceGroup": {
							"value": "@pipeline().parameters.resource_group",
							"type": "Expression"
						},
						"pipelineRunId": {
							"value": "@pipeline().RunId",
							"type": "Expression"
						},
						"teamsWebhookUrl": {
							"value": "@pipeline().parameters.webhook_url",
							"type": "Expression"
						},
						"activityName": {
							"value": "@pipeline().Pipeline",
							"type": "Expression"
						},
						"activityMessage": "pln listed building main Std to Harmonised Layer data load failed",
						"activityDuration": {
							"value": "@concat(string(div(div(sub(ticks(formatDateTime(utcNow(),'yyyy-MM-dd HH:mm:sss')),ticks(formatDateTime(pipeline().parameters.start_time,'yyyy-MM-dd HH:mm:sss'))),600000000),60)),'H:', \nstring(mod(div(sub(ticks(formatDateTime(utcNow(),'yyyy-MM-dd HH:mm:sss')),ticks(formatDateTime(pipeline().parameters.start_time,'yyyy-MM-dd HH:mm:sss'))),600000000),60)),'M:00s')",
							"type": "Expression"
						},
						"activityStatus": "Failed",
						"Colour": {
							"value": "@pipeline().parameters.failed_colour",
							"type": "Expression"
						},
						"Image": {
							"value": "@pipeline().parameters.failed_image",
							"type": "Expression"
						},
						"Message_title": "pln listed building main Std to Harmonised fsiled",
						"Message_subtitle": "pln listed building main Std to Harmonised fsiled"
					}
				}
			},
			{
				"name": "error message",
				"type": "SetVariable",
				"state": "Inactive",
				"onInactiveMarkAs": "Succeeded",
				"dependsOn": [
					{
						"activity": "record count Std to Hrm",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"variableName": "error_message",
					"value": {
						"value": "@if(\n  not(empty(activity('Std to Hrm')?['output']?['status']?['output']?['result']?['exitValue'])),\n  json(activity('Std to Hrm').output.status.output.result.exitValue).error_message,\n  'No error message'\n)\n\n",
						"type": "Expression"
					}
				}
			},
			{
				"name": "Record completed pln listed building main Std Harm data",
				"type": "ExecutePipeline",
				"state": "Inactive",
				"onInactiveMarkAs": "Succeeded",
				"dependsOn": [
					{
						"activity": "error message",
						"dependencyConditions": [
							"Failed"
						]
					}
				],
				"policy": {
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "pln_log_to_appins",
						"type": "PipelineReference"
					},
					"waitOnCompletion": true,
					"parameters": {
						"Stage": {
							"value": "Fail",
							"type": "Expression"
						},
						"PipelineName": {
							"value": "@pipeline().Pipeline",
							"type": "Expression"
						},
						"PipelineRunID": {
							"value": "@pipeline().RunId",
							"type": "Expression"
						},
						"StartTime": {
							"value": "@variables('starttime')",
							"type": "Expression"
						},
						"EndTime": {
							"value": "@utcNow()",
							"type": "Expression"
						},
						"ErrorMessage": {
							"value": "@variables('error_message')",
							"type": "Expression"
						},
						"StatusMessage": "pln listed building main Std to Harmonised Layer loaded",
						"PipelineTriggerID": {
							"value": "@pipeline().TriggerId",
							"type": "Expression"
						},
						"PipelineTriggerName": {
							"value": "@pipeline().TriggerName",
							"type": "Expression"
						},
						"PipelineTriggerType": {
							"value": "@pipeline().TriggerType",
							"type": "Expression"
						},
						"PipelineTriggeredbyPipelineName": {
							"value": "@pipeline()?.TriggeredByPipelineName",
							"type": "Expression"
						},
						"PipelineTriggeredbyPipelineRunID": {
							"value": "@pipeline()?.TriggeredByPipelineRunId",
							"type": "Expression"
						},
						"ActivityType": "Pipeline",
						"DurationSeconds": {
							"value": "@div(sub(ticks(utcNow()), ticks(variables('starttime'))), 10000000)",
							"type": "Expression"
						},
						"StatusCode": "400",
						"AppInsIKey": {
							"value": "@pipeline().parameters.apps_insights_ikey",
							"type": "Expression"
						}
					}
				}
			},
			{
				"name": "record count Raw to Std",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "Raw to Std",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"variableName": "recordCount",
					"value": {
						"value": "@activity('Raw to Std').output.status.output.result.exitValue",
						"type": "Expression"
					}
				}
			},
			{
				"name": "Record completed pln listed building main Raw to Std",
				"type": "ExecutePipeline",
				"dependsOn": [
					{
						"activity": "error message_Raw to Std",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "pln_log_to_appins",
						"type": "PipelineReference"
					},
					"waitOnCompletion": true,
					"parameters": {
						"Stage": "Completion",
						"PipelineName": {
							"value": "@pipeline().Pipeline",
							"type": "Expression"
						},
						"PipelineRunID": {
							"value": "@pipeline().RunId",
							"type": "Expression"
						},
						"StartTime": {
							"value": "@variables('starttime')",
							"type": "Expression"
						},
						"EndTime": {
							"value": "@utcNow()",
							"type": "Expression"
						},
						"Inserts": {
							"value": "@variables('recordCount')",
							"type": "Expression"
						},
						"StatusMessage": "pln listed building main loaded",
						"PipelineTriggerID": {
							"value": "@pipeline().TriggerId",
							"type": "Expression"
						},
						"PipelineTriggerName": {
							"value": "@pipeline().TriggerName",
							"type": "Expression"
						},
						"PipelineTriggerType": {
							"value": "@pipeline().TriggerType",
							"type": "Expression"
						},
						"PipelineTriggeredbyPipelineName": {
							"value": "@pipeline()?.TriggeredByPipelineName",
							"type": "Expression"
						},
						"PipelineTriggeredbyPipelineRunID": {
							"value": "@pipeline()?.TriggeredByPipelineRunId",
							"type": "Expression"
						},
						"ActivityType": "Pipeline",
						"DurationSeconds": {
							"value": "@div(sub(ticks(utcNow()), ticks(variables('starttime'))), 10000000)",
							"type": "Expression"
						},
						"StatusCode": "200",
						"AppInsIKey": {
							"value": "@pipeline().parameters.apps_insights_ikey",
							"type": "Expression"
						}
					}
				}
			},
			{
				"name": "pln listed building main Raw to Std failed",
				"type": "ExecutePipeline",
				"dependsOn": [
					{
						"activity": "error message_Raw to Std",
						"dependencyConditions": [
							"Failed"
						]
					}
				],
				"policy": {
					"secureInput": true
				},
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "pln_utl_Send_Teams_Message",
						"type": "PipelineReference"
					},
					"waitOnCompletion": true,
					"parameters": {
						"dataFactorySubscription": {
							"value": "@pipeline().parameters.subscription_id",
							"type": "Expression"
						},
						"dataFactoryResourceGroup": {
							"value": "@pipeline().parameters.resource_group",
							"type": "Expression"
						},
						"pipelineRunId": {
							"value": "@pipeline().RunId",
							"type": "Expression"
						},
						"teamsWebhookUrl": {
							"value": "@pipeline().parameters.webhook_url",
							"type": "Expression"
						},
						"activityName": {
							"value": "@pipeline().Pipeline",
							"type": "Expression"
						},
						"activityMessage": "pln listed building main data load failed",
						"activityDuration": {
							"value": "@concat(string(div(div(sub(ticks(formatDateTime(utcNow(),'yyyy-MM-dd HH:mm:sss')),ticks(formatDateTime(pipeline().parameters.start_time,'yyyy-MM-dd HH:mm:sss'))),600000000),60)),'H:', \nstring(mod(div(sub(ticks(formatDateTime(utcNow(),'yyyy-MM-dd HH:mm:sss')),ticks(formatDateTime(pipeline().parameters.start_time,'yyyy-MM-dd HH:mm:sss'))),600000000),60)),'M:00s')",
							"type": "Expression"
						},
						"activityStatus": "Failed",
						"Colour": {
							"value": "@pipeline().parameters.failed_colour",
							"type": "Expression"
						},
						"Image": {
							"value": "@pipeline().parameters.failed_image",
							"type": "Expression"
						},
						"Message_title": "pln listed building main loaded failed",
						"Message_subtitle": "pln listed building main feed failed"
					}
				}
			},
			{
				"name": "error message_Raw to Std",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "record count Raw to Std",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"variableName": "error_message",
					"value": {
						"value": "@if(\n  and(\n    not(empty(activity('Raw to Std')?['output']?['status']?['output']?['result']?['exitValue'])),\n    contains(string(activity('Raw to Std').output.status.output.result.exitValue), 'error_message')\n  ),\n  json(activity('Raw to Std').output.status.output.result.exitValue).error_message,\n  'No error message'\n)\n\n",
						"type": "Expression"
					}
				}
			},
			{
				"name": "Record compl pln listed building main Raw to Std data",
				"type": "ExecutePipeline",
				"dependsOn": [
					{
						"activity": "error message_Raw to Std",
						"dependencyConditions": [
							"Failed"
						]
					}
				],
				"policy": {
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "pln_log_to_appins",
						"type": "PipelineReference"
					},
					"waitOnCompletion": true,
					"parameters": {
						"Stage": {
							"value": "Fail",
							"type": "Expression"
						},
						"PipelineName": {
							"value": "@pipeline().Pipeline",
							"type": "Expression"
						},
						"PipelineRunID": {
							"value": "@pipeline().RunId",
							"type": "Expression"
						},
						"StartTime": {
							"value": "@variables('starttime')",
							"type": "Expression"
						},
						"EndTime": {
							"value": "@utcNow()",
							"type": "Expression"
						},
						"ErrorMessage": {
							"value": "@variables('error_message')",
							"type": "Expression"
						},
						"StatusMessage": "pln listed building Std Layer loaded",
						"PipelineTriggerID": {
							"value": "@pipeline().TriggerId",
							"type": "Expression"
						},
						"PipelineTriggerName": {
							"value": "@pipeline().TriggerName",
							"type": "Expression"
						},
						"PipelineTriggerType": {
							"value": "@pipeline().TriggerType",
							"type": "Expression"
						},
						"PipelineTriggeredbyPipelineName": {
							"value": "@pipeline()?.TriggeredByPipelineName",
							"type": "Expression"
						},
						"PipelineTriggeredbyPipelineRunID": {
							"value": "@pipeline()?.TriggeredByPipelineRunId",
							"type": "Expression"
						},
						"ActivityType": "Pipeline",
						"DurationSeconds": {
							"value": "@div(sub(ticks(utcNow()), ticks(variables('starttime'))), 10000000)",
							"type": "Expression"
						},
						"StatusCode": "400",
						"AppInsIKey": {
							"value": "@pipeline().parameters.apps_insights_ikey",
							"type": "Expression"
						}
					}
				}
			},
			{
				"name": "pln_listed_building_starttime",
				"type": "SetVariable",
				"dependsOn": [],
				"policy": {
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"variableName": "starttime",
					"value": {
						"value": "@utcNow()",
						"type": "Expression"
					}
				}
			}
		],
		"parameters": {
			"apps_insights_ikey": {
				"type": "string"
			},
			"subscription_id": {
				"type": "string"
			},
			"resource_group": {
				"type": "string"
			},
			"webhook_url": {
				"type": "string"
			},
			"start_time": {
				"type": "string"
			},
			"warning_colour": {
				"type": "string"
			},
			"failed_colour": {
				"type": "string"
			},
			"failed_image": {
				"type": "string"
			}
		},
		"variables": {
			"recordCount": {
				"type": "String",
				"defaultValue": "default value"
			},
			"error_message": {
				"type": "String"
			},
			"starttime": {
				"type": "String"
			}
		},
		"folder": {
			"name": "listed buildings"
		},
		"annotations": []
	}
}