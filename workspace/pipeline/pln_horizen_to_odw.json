{
	"name": "pln_horizen_to_odw",
	"properties": {
		"activities": [
			{
				"name": "Lookup_orchestration_file",
				"type": "Lookup",
				"dependsOn": [],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "JsonSource",
						"storeSettings": {
							"type": "AzureBlobFSReadSettings",
							"recursive": true,
							"enablePartitionDiscovery": false
						},
						"formatSettings": {
							"type": "JsonReadSettings"
						}
					},
					"dataset": {
						"referenceName": "Is_storage_config",
						"type": "DatasetReference",
						"parameters": {
							"folder": "orchestration_horizon",
							"file_name": "orchestration.json"
						}
					},
					"firstRowOnly": false
				}
			},
			{
				"name": "ForEach_horizen_files",
				"type": "ForEach",
				"state": "Inactive",
				"onInactiveMarkAs": "Succeeded",
				"dependsOn": [
					{
						"activity": "Filter_Horizon_Table",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('Filter_Horizon_Table').output.value",
						"type": "Expression"
					},
					"batchCount": 5,
					"activities": [
						{
							"name": "Copy horizen Files",
							"description": "Copies data from Horizon to odw-raw",
							"type": "Copy",
							"dependsOn": [],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "SqlServerSource",
									"queryTimeout": "02:00:00",
									"isolationLevel": "ReadCommitted",
									"partitionOption": "None"
								},
								"sink": {
									"type": "DelimitedTextSink",
									"storeSettings": {
										"type": "AzureBlobFSWriteSettings"
									},
									"formatSettings": {
										"type": "DelimitedTextWriteSettings",
										"quoteAllText": true,
										"fileExtension": ".txt"
									}
								},
								"enableStaging": false,
								"translator": {
									"type": "TabularTranslator",
									"typeConversion": true,
									"typeConversionSettings": {
										"allowDataTruncation": true,
										"treatBooleanAsNumber": false
									}
								}
							},
							"inputs": [
								{
									"referenceName": "ds_Horizon_Source_table",
									"type": "DatasetReference",
									"parameters": {
										"table_name": {
											"value": "@item().Horizon_Table_Name",
											"type": "Expression"
										}
									}
								}
							],
							"outputs": [
								{
									"referenceName": "ds_Horizon_odw_raw",
									"type": "DatasetReference",
									"parameters": {
										"FileName": {
											"value": "@item().Source_Filename_Format",
											"type": "Expression"
										}
									}
								}
							]
						}
					]
				}
			},
			{
				"name": "Filter_Horizon_Table",
				"type": "Filter",
				"dependsOn": [
					{
						"activity": "Lookup_orchestration_file",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('Lookup_orchestration_file').output.value[0].definitions ",
						"type": "Expression"
					},
					"condition": {
						"value": "@and(contains(item(), 'Horizon_Table_Name'), and(not(empty(item().Horizon_Table_Name)), equals(item().Source_Folder, 'Horizon')))",
						"type": "Expression"
					}
				}
			},
			{
				"name": "Horizon Raw to Std",
				"description": "Ingests the raw data into the standardised table",
				"type": "SynapseNotebook",
				"state": "Inactive",
				"onInactiveMarkAs": "Succeeded",
				"dependsOn": [
					{
						"activity": "ForEach_horizen_files",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 3,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"notebook": {
						"referenceName": "py_horizon_raw_to_std",
						"type": "NotebookReference"
					},
					"snapshot": true,
					"conf": {
						"spark.dynamicAllocation.enabled": null,
						"spark.dynamicAllocation.minExecutors": null,
						"spark.dynamicAllocation.maxExecutors": null
					},
					"numExecutors": null
				}
			},
			{
				"name": "rest API Data",
				"type": "ExecutePipeline",
				"dependsOn": [
					{
						"activity": "Horizon Raw to Std",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "pln_rest_api",
						"type": "PipelineReference"
					},
					"waitOnCompletion": true
				}
			},
			{
				"name": "ForEach_Harmonised_NoteBook",
				"type": "ForEach",
				"state": "Inactive",
				"onInactiveMarkAs": "Succeeded",
				"dependsOn": [
					{
						"activity": "Filter_Harmonised_NoteBook",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('Filter_Horizon_Table').output.value",
						"type": "Expression"
					},
					"batchCount": 3,
					"activities": [
						{
							"name": "Harmonised_NoteBook",
							"description": "Ingests the raw data into the standardised table",
							"type": "SynapseNotebook",
							"dependsOn": [],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 3,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"notebook": {
									"referenceName": {
										"value": "@item().Harmonised_NoteBook",
										"type": "Expression"
									},
									"type": "NotebookReference"
								},
								"snapshot": true,
								"conf": {
									"spark.dynamicAllocation.enabled": null,
									"spark.dynamicAllocation.minExecutors": null,
									"spark.dynamicAllocation.maxExecutors": null
								},
								"numExecutors": null
							}
						}
					]
				}
			},
			{
				"name": "Filter_Harmonised_NoteBook",
				"type": "Filter",
				"dependsOn": [
					{
						"activity": "rest API Data",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('Lookup_orchestration_file').output.value[0].definitions ",
						"type": "Expression"
					},
					"condition": {
						"value": "@and(contains(item(), 'Harmonised_NoteBook'), and(not(empty(item().Harmonised_NoteBook)), equals(item().Source_Folder, 'Horizon')))",
						"type": "Expression"
					}
				}
			}
		],
		"variables": {
			"Horizon_definitions": {
				"type": "String"
			},
			"Horizon": {
				"type": "Array"
			}
		},
		"folder": {
			"name": "utils/Master"
		},
		"annotations": []
	}
}