{
	"name": "mipins_vw_fact_absence_all",
	"properties": {
		"content": {
			"query": "IF NOT EXISTS ( SELECT  *\n                FROM    sys.schemas\n                WHERE   name = 'mipins' )\n    EXEC('CREATE SCHEMA [mipins]');\nGO\n\n--CREATE VIEW FOR PERSONNEL SUB AREA--\n\n-- CREATE OR ALTER VIEW mipins.vw_mipins_hr_personnel_sub_area\n-- AS\n\nSELECT fact.* \n,CASE WHEN [Attendance or Absence Type] = 'Sickness' THEN 'Sickness'\n      WHEN [Attendance or Absence Type] LIKE '%Annual%' THEN 'Annual'\n ELSE 'Other'\n END AS [Absence Group]\n,CONCAT(RIGHT([staff_number],6),'-',FORMAT(EOMONTH(absence_date,0),'yyyyMMdd')) AS PersonMonthEnd_Key\n,dt.year_int\n,dt.month_int\n,dt.month_name\n,dt.day_int\n,dt.day_of_week_int\n,dt.day_name\nFROM sap_hr.vw_fact_absence_all AS fact\nLEFT OUTER JOIN live.dim_date AS dt\nON FORMAT(fact.absence_date,'yyyyMMdd') = dt.dim_date_key\n;\n\n\n\nselect \n\tfaa.[absence_date]\n\t,faa.[absence_hours]\n\t,faa.[staff_number]\n\t,faa.[Work Schedule Rule]\n\t,faa.[Abs Type]\n\t,faa.[Sickness Group]\n\t,faa.[Attendance or Absence Type]\n\t,faa.[Leave]\n\t,case datepart(dw, absence_date)\n\t\twhen 2 then ws.Mo/7.4\n\t\twhen 3 then ws.Tu/7.4\n\t\twhen 4 then ws.We/7.4\n\t\twhen 5 then ws.Th/7.4\n\t\twhen 6 then ws.Fr/7.4\n\t\telse null\n\tend as [Leave_ONS]\n\t,faa.[PS Group]\n\t,faa.[Personnel Area]\n\t,faa.[Personnel Subarea]\n\t,fas.sickness_id\n\t,fas.[Days] as sickness_length\n\t,case\n\t\twhen fas.[Days] > 20.0 then 'long-term'\n\t\telse 'short-term'\n\tend as sickness_length_type\nfrom \n\t[sap_hr].[fact_absence_all] faa\n\t\tleft join sap_hr.fact_absence_sickness fas on faa.[staff_number] = fas.[Staff Number]\n\t\tleft join sap_hr.work_schedules ws on faa.[Work Schedule Rule] = ws.[Work Schedule Rule]\nwhere \n\tfaa.[Attendance or Absence Type] = 'Sickness'\n\tand \n\tfaa.absence_date between fas.sickness_start and fas.sickness_end\n\nunion\n\nselect \n\tfaa.[absence_date]\n\t,faa.[absence_hours]\n\t,faa.[staff_number]\n\t,faa.[Work Schedule Rule]\n\t,faa.[Abs Type]\n\t,faa.[Sickness Group]\n\t,faa.[Attendance or Absence Type]\n\t,faa.[Leave]\n\t,case datepart(dw, absence_date)\n\t\twhen 2 then ws.Mo/7.4\n\t\twhen 3 then ws.Tu/7.4\n\t\twhen 4 then ws.We/7.4\n\t\twhen 5 then ws.Th/7.4\n\t\twhen 6 then ws.Fr/7.4\n\t\telse null\n\tend as [Leave_ONS]\n\t,faa.[PS Group]\n\t,faa.[Personnel Area]\n\t,faa.[Personnel Subarea]\n\t,null as sickness_id\n\t,null as sickness_length\n\t,null as sickness_length_type\n from \n\t[sap_hr].[fact_absence_all] faa\n\t\tleft join sap_hr.work_schedules ws on faa.[Work Schedule Rule] = ws.[Work Schedule Rule]\nwhere \n\tfaa.[Attendance or Absence Type] <> 'Sickness'\n\ndeclare @sickness table ([row_num] int\n\t\t\t\t\t\t,[Staff Number] int\n\t\t\t\t\t\t,[Days] float\n\t\t\t\t\t\t,[Sickness Group] varchar(50)\n\t\t\t\t\t\t,contiguous_sickness uniqueidentifier\n\t\t\t\t\t\t,next_working_day_after_previous_sickness date\n\t\t\t\t\t\t,sickness_start date\n\t\t\t\t\t\t,sickness_end date\n\t\t\t\t\t\t,previous_sickness_start date\n\t\t\t\t\t\t,previous_sickness_end date\n\t\t\t\t\t\t,FY varchar(20)\n\t\t\t\t\t\t,financial_year varchar(11)\n\t\t\t\t\t\t,calendar_year varchar(11)\n\t\t\t\t\t\t,[Work Schedule Rule] nvarchar(255)\n\t\t\t\t\t\t,sickness_id int);\n\n/* grab all absence data with absence type of sickness */\nwith sickness as\n(\nselect \n\ta.[Staff Number]\n\t,ds.FY as FY_start\n\t,de.FY as FY_end\n\t,cast(d12.[date] as date) as CY1\n\t,cast(d24.[date] as date) as CY2\n    ,cast(a.[Start Date] as date) as sickness_start\n    ,cast(a.[End Date] as date) as sickness_end\n\t,[Days]\n\t,[Sickness Group]\n\t,[Work Schedule Rule]\nfrom\n\tsap_hr.absence_all a\n\t\tright outer join Live.dim_date ds on cast(a.[Start Date] as date) = cast(ds.[date] as date)\n\t\tright outer join Live.dim_date de on cast(a.[End Date] as date) = cast(de.[date] as date)\n\t\tright outer join Live.dim_date d12 on cast(dateadd(yyyy, -1, getDate()) as date) = cast(d12.[date] as date)\n\t\tright outer join Live.dim_date d24 on cast(dateadd(yyyy, -2, getDate()) as date) = cast(d24.[date] as date)\n\t\twhere\n\t[Attendance or Absence Type] = 'Sickness'\n)\n, sickness2 as\n(select\n\t\ts.[Staff Number]\n\t\t,s.[Days]\n\t\t,LEAD(s.sickness_start, 1, NULL) OVER (PARTITION BY [Staff Number] order by sickness_start DESC) AS prev_sickness_start\n\t\t,LEAD(s.sickness_end, 1, NULL) OVER (PARTITION BY [Staff Number] order by sickness_start DESC) AS prev_sickness_end\n\t\t,case\n\t\t\twhen cast([Live].[DATEADDNOWKNOBH] (LEAD(s.sickness_end, 1, NULL) OVER (PARTITION BY [Staff Number] order by sickness_start DESC), 1) as date) = s.sickness_start then NEWID()\n\t\t\twhen cast([Live].[DATEADDNOWKNOBH] (s.sickness_end, 1) as date) = LAG(s.sickness_start, 1, null) over (PARTITION BY [Staff Number] order by sickness_start DESC) then NEWID()\n\t\t\telse NULL\n\t\tend as contiguous_sickness\n\t\t,cast([Live].[DATEADDNOWKNOBH] (LEAD(s.sickness_end, 1, NULL) OVER (PARTITION BY [Staff Number] order by sickness_start DESC), 1) as date) as next_working_day_after_previous_sickness\n\t\t,cast([Live].[DATEADDNOWKNOBH] (s.sickness_end, 1) as date) as next_working_day_after_current_sickness\n\t\t,s.sickness_start\n\t\t,s.sickness_end\n\t\t,FY_start as FY\n\t\t,case\n\t\t\twhen (s.sickness_end >= (SELECT  dateadd(yyyy,-2, cast(cast(YEAR(getdate())-\n\t\t\t\t\t\t\t\t\t\t(case \n\t\t\t\t\t\t\t\t\t\t\twhen month(getDate()) between 1 and 3 then 1\n\t\t\t\t\t\t\t\t\t\t\telse 0\n\t\t\t\t\t\t\t\t\t\tend) as varchar)+'0401' as date)))) \n\t\t\t\tand\n\t\t\t\t(s.sickness_end < (SELECT  dateadd(yyyy,0, cast(cast(YEAR(getdate())-\n\t\t\t\t\t\t\t\t\t\t(case \n\t\t\t\t\t\t\t\t\t\t\twhen month(getDate()) between 1 and 3 then 1\n\t\t\t\t\t\t\t\t\t\t\telse 0\n\t\t\t\t\t\t\t\t\t\tend) as varchar)+'0401' as date))))\n\t\t\t\tthen 'Previous FY'\n\t\t\twhen \n\t\t\t\t(s.sickness_end < (SELECT  dateadd(yyyy,-1, cast(cast(YEAR(getdate())-\n\t\t\t\t\t\t\t\t\t\t(case \n\t\t\t\t\t\t\t\t\t\t\twhen month(getDate()) between 1 and 3 then 1\n\t\t\t\t\t\t\t\t\t\t\telse 0\n\t\t\t\t\t\t\t\t\t\tend) as varchar)+'0401' as date))))\n\t\t\t\tthen 'Older FY'\n\t\t\t\twhen \n\t\t\t\t(s.sickness_end >= (SELECT  dateadd(yyyy,-1, cast(cast(YEAR(getdate())-\n\t\t\t\t\t\t\t\t\t\t(case \n\t\t\t\t\t\t\t\t\t\t\twhen month(getDate()) between 1 and 3 then 1\n\t\t\t\t\t\t\t\t\t\t\telse 0\n\t\t\t\t\t\t\t\t\t\tend) as varchar)+'0401' as date))))\n\t\t\t\t\tand\n\t\t\t\t(s.sickness_end < (SELECT  dateadd(yyyy,+1, cast(cast(YEAR(getdate())-\n\t\t\t\t\t\t\t\t\t\t(case \n\t\t\t\t\t\t\t\t\t\t\twhen month(getDate()) between 1 and 3 then 1\n\t\t\t\t\t\t\t\t\t\t\telse 0\n\t\t\t\t\t\t\t\t\t\tend) as varchar)+'0401' as date))))\n\t\t\t\tthen 'Current FY'\n\t\t\telse 'Next FY'\n\t\t\tend as financial_year\n\n\t\t,case\n\t\t\twhen (s.sickness_end >= (SELECT  cast(dateadd(yyyy,-2, getDate()) as date)))\n\t\t\t\tand\n\t\t\t\t(s.sickness_end < (SELECT  cast(dateadd(yyyy,-1, getDate()) as date)))\n\t\t\tthen 'Previous CY'\n\t\t\twhen \n\t\t\t\t(s.sickness_end < (SELECT  cast(dateadd(yyyy,-2, getDate()) as date)))\n\t\t\t\tthen 'Older CY'\n\t\t\t\twhen \n\t\t\t\t(s.sickness_end >= (SELECT  cast(dateadd(yyyy,-1, getDate()) as date)))\n\t\t\t\t\tand\n\t\t\t\t(s.sickness_end < (cast(getDate() as date)))\n\t\t\t\tthen 'Current CY'\n\t\t\telse 'Future CY'\n\t\t\tend as calendar_year\n\t\t\t,[Sickness Group]\n\t\t\t,[Work Schedule Rule]\nfrom\t\t\t\t\n\tsickness s\n\t)\n,sickness3 as\n(\nselect \n\t\tROW_NUMBER() OVER(ORDER BY [Staff Number], sickness_start) row_num\n\t\t,null as suid\n\t\t,[Staff Number]\n\t\t,[Days]\n\t\t,[Sickness Group]\n\t\t,contiguous_sickness\n\t\t,next_working_day_after_previous_sickness\n\t\t,sickness_start\n\t\t,sickness_end\n\t\t,prev_sickness_start\n\t\t,prev_sickness_end\n\t\t,FY\n\t\t,financial_year\n\t\t,calendar_year\n\t\t,[Work Schedule Rule]\n from sickness2 s2\n )\ninsert into @sickness ([row_num],[Staff Number],[Days],[Sickness Group],contiguous_sickness,next_working_day_after_previous_sickness,sickness_start,sickness_end,previous_sickness_start,previous_sickness_end,FY,financial_year,calendar_year,[Work Schedule Rule],sickness_id)\nselect \n\ts3.row_num\n\t,s3.[Staff Number]\n\t,s3.[Days]\n\t,s3.[Sickness Group]\n\t,s3.contiguous_sickness\n\t,s3.next_working_day_after_previous_sickness\n\t,s3.sickness_start\n\t,s3.sickness_end\n\t,s3.prev_sickness_start\n\t,s3.prev_sickness_end\n\t,s3.FY\n\t,s3.financial_year\n\t,s3.calendar_year\n\t,s3.[Work Schedule Rule]\n\t,NULL as sickness_id\nfrom \n\tsickness3 s3 \norder by \n\ts3.[Staff Number],s3.sickness_end;\n\n/*Assign sickness id, grouping contiguous periods of sickness*/\ndeclare @maxloop int\nset @maxloop = (select max(row_num) from @sickness)\n\ndeclare @loopid int\nset @loopid = 1\n\ndeclare @sickness_id int\nset @sickness_id = 1\n\nupdate @sickness set sickness_id = @sickness_id where row_num = 1\nset @loopid = 2\n\n\nwhile @loopid < @maxloop + 1\n\tbegin\n\t\tdeclare @cs uniqueidentifier = (select contiguous_sickness from @sickness where row_num = @loopid)\n\t\tdeclare @sick_start date = (select sickness_start from @sickness where row_num = @loopid)\n\t\tdeclare @prev_date date = (select next_working_day_after_previous_sickness from @sickness where row_num = @loopid)\n\n\t\tif @cs = null\n\t\t\tbegin\n\t\t\t\tset @sickness_id = @sickness_id + 1\n\t\t\t\tupdate @sickness set sickness_id = @sickness_id where row_num = @loopid \n\t\t\tend\n\t\telse\n\t\t\tif @sick_start = @prev_date\n\t\t\t\tbegin\n\t\t\t\t\tupdate @sickness set sickness_id = @sickness_id where row_num = @loopid\n\t\t\t\tend\n\t\t\telse\n\t\t\t\tbegin\n\t\t\t\t\tset @sickness_id = @sickness_id + 1\n\t\t\t\t\tupdate @sickness set sickness_id = @sickness_id where row_num = @loopid\n\t\t\t\tend\n\t\tset @loopid = @loopid + 1\n\tend\n\n/*Group by staff_number and sickness_id*/\ninsert into sap_hr.fact_absence_sickness\nselect \n\tsickness_id\n\t--,s3.[Staff Number]\n\t,case left(cast(s3.[Staff Number] as varchar(10)), 1)\n\t\t\t\t\twhen '4' then '50' + cast(s3.[Staff Number] as varchar(10))\n\t\t\t\t\twhen '5' then '00' + cast(s3.[Staff Number] as varchar(10))\n\t\t\t\t\tend as [Staff Number]\n\t,sum(s3.[Days]) as [Days]\n\t,min(s3.sickness_start) as [sickness_start]\n\t,max(s3.sickness_end) as [sickness_end]\n\t,max(s3.FY) as FY\n\t,max(s3.financial_year) as financial_year\n\t,max(s3.calendar_year) as calendar_year\nfrom @sickness s3\n\tgroup by \n\t\ts3.[Staff Number],\n\t\tsickness_id\n\nGO\n\n\n\n\n\n\n\n",
			"metadata": {
				"language": "sql"
			},
			"currentConnection": {
				"databaseName": "master",
				"poolName": "Built-in"
			},
			"resultLimit": 5000
		},
		"type": "SqlQuery"
	}
}