{
	"name": "df_unit_test_framework",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"name": "StandardisedSource"
				},
				{
					"name": "HarmonisedSource"
				},
				{
					"name": "CuratedSource"
				}
			],
			"sinks": [
				{
					"name": "TestResultOutput",
					"rejectedDataLinkedService": {
						"referenceName": "ls_storage",
						"type": "LinkedServiceReference"
					}
				}
			],
			"transformations": [
				{
					"name": "StandardisedCount"
				},
				{
					"name": "HarmonisedCount"
				},
				{
					"name": "CuratedCount"
				},
				{
					"name": "StdHrmJoin"
				},
				{
					"name": "JoinedData"
				},
				{
					"name": "RowCountComparison"
				},
				{
					"name": "TestResults"
				},
				{
					"name": "StandardisedFilter"
				}
			],
			"scriptLines": [
				"parameters{",
				"     entity_name as string ('appeal-has'),",
				"     std_db as string ('odw_standardised_db'),",
				"     hrm_db as string ('odw_harmonised_db'),",
				"     cur_db as string ('odw_curated_db'),",
				"     std_table as string ('sb_appeal_has'),",
				"     hrm_table as string ('sb_appeal_has'),",
				"     cur_table as string ('appeal_has'),",
				"     primary_key as string (caseReference)",
				"}",
				"source(output(",
				"          caseId as long,",
				"          caseReference as string,",
				"          projectName as string,",
				"          projectNameWelsh as string,",
				"          projectDescription as string,",
				"          projectDescriptionWelsh as string,",
				"          decision as string,",
				"          publishStatus as string,",
				"          sector as string,",
				"          projectType as string,",
				"          sourceSystem as string,",
				"          stage as string,",
				"          projectLocation as string,",
				"          projectLocationWelsh as string,",
				"          projectEmailAddress as string,",
				"          regions as string[],",
				"          transboundary as boolean,",
				"          easting as long,",
				"          northing as long,",
				"          welshLanguage as boolean,",
				"          mapZoomLevel as string,",
				"          secretaryOfState as string,",
				"          datePINSFirstNotifiedOfProject as string,",
				"          dateProjectAppearsOnWebsite as string,",
				"          anticipatedSubmissionDateNonSpecific as string,",
				"          anticipatedDateOfSubmission as string,",
				"          screeningOpinionSought as string,",
				"          screeningOpinionIssued as string,",
				"          scopingOpinionSought as string,",
				"          scopingOpinionIssued as string,",
				"          section46Notification as string,",
				"          dateOfDCOSubmission as string,",
				"          deadlineForAcceptanceDecision as string,",
				"          dateOfDCOAcceptance as string,",
				"          dateOfNonAcceptance as string,",
				"          dateOfRepresentationPeriodOpen as string,",
				"          dateOfRelevantRepresentationClose as string,",
				"          extensionToDateRelevantRepresentationsClose as string,",
				"          dateRRepAppearOnWebsite as string,",
				"          dateIAPIDue as string,",
				"          rule6LetterPublishDate as string,",
				"          preliminaryMeetingStartDate as string,",
				"          notificationDateForPMAndEventsDirectlyFollowingPM as string,",
				"          notificationDateForEventsDeveloper as string,",
				"          dateSection58NoticeReceived as string,",
				"          confirmedStartOfExamination as string,",
				"          rule8LetterPublishDate as string,",
				"          deadlineForCloseOfExamination as string,",
				"          dateTimeExaminationEnds as string,",
				"          stage4ExtensionToExamCloseDate as string,",
				"          deadlineForSubmissionOfRecommendation as string,",
				"          dateOfRecommendations as string,",
				"          stage5ExtensionToRecommendationDeadline as string,",
				"          deadlineForDecision as string,",
				"          confirmedDateOfDecision as string,",
				"          stage5ExtensionToDecisionDeadline as string,",
				"          jRPeriodEndDate as string,",
				"          dateProjectWithdrawn as string,",
				"          operationsLeadId as string,",
				"          operationsManagerId as string,",
				"          caseManagerId as string,",
				"          nsipOfficerIds as string[],",
				"          nsipAdministrationOfficerIds as string[],",
				"          leadInspectorId as string,",
				"          inspectorIds as string[],",
				"          environmentalServicesOfficerId as string,",
				"          legalOfficerId as string,",
				"          applicantId as string,",
				"          migrationStatus as boolean,",
				"          dateOfReOpenRelevantRepresentationStart as string,",
				"          dateOfReOpenRelevantRepresentationClose as string,",
				"          isMaterialChange as boolean,",
				"          ingested_datetime as timestamp,",
				"          expected_from as timestamp,",
				"          expected_to as timestamp,",
				"          message_id as string,",
				"          message_type as string,",
				"          message_enqueued_time_utc as string,",
				"          input_file as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     store: 'synapse',",
				"     databaseType: 'spark',",
				"     format: 'table',",
				"     database: ($std_db),",
				"     tableName: ($std_table)) ~> StandardisedSource",
				"source(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     store: 'synapse',",
				"     databaseType: 'spark',",
				"     format: 'table',",
				"     database: ($hrm_db),",
				"     tableName: ($hrm_table)) ~> HarmonisedSource",
				"source(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     store: 'synapse',",
				"     databaseType: 'spark',",
				"     format: 'table',",
				"     database: ($cur_db),",
				"     tableName: ($cur_table)) ~> CuratedSource",
				"StandardisedFilter aggregate(std_count = count(1)) ~> StandardisedCount",
				"HarmonisedSource aggregate(hrm_count = count(1),",
				"          hrm_active_count = sum(iif(toString(byName('IsActive')) == 'Y', 1, 0))) ~> HarmonisedCount",
				"CuratedSource aggregate(cur_count = count(1),",
				"          cur_distinct_count = countDistinct(toString(byName($primary_key)))) ~> CuratedCount",
				"StandardisedCount, HarmonisedCount join(1 == 1,",
				"     joinType:'cross',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> StdHrmJoin",
				"StdHrmJoin, CuratedCount join(1 == 1,",
				"     joinType:'cross',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinedData",
				"JoinedData select(mapColumn(",
				"          std_count,",
				"          hrm_count,",
				"          hrm_active_count,",
				"          cur_count,",
				"          cur_distinct_count",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> RowCountComparison",
				"RowCountComparison derive(entity = $entity_name,",
				"          std_to_hrm_match = std_count == hrm_count,",
				"          hrm_to_cur_match = hrm_active_count == cur_count,",
				"          cur_unique_check = cur_count == cur_distinct_count,",
				"          std_hrm_diff = std_count - hrm_count,",
				"          hrm_cur_diff = hrm_active_count - cur_count,",
				"          test_timestamp = currentTimestamp()) ~> TestResults",
				"StandardisedSource filter(!isNull('message_type') && !isNull('message_id')) ~> StandardisedFilter",
				"TestResults sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     store: 'synapse',",
				"     databaseType: 'spark',",
				"     format: 'table',",
				"     database: 'logging',",
				"     tableName: 'unit_test_results') ~> TestResultOutput"
			]
		}
	}
}