parameters:
  - name: environment
    displayName: Environment
    type: string
    default: Test
    values:
    - Test
    - Prod
  - name: failover_deployment
    displayName: 'Failover Deployment'
    type: boolean
    default: false
  - name: source_workspace
    displayName: 'Published Artifact Source'
    type: string
    default: Primary
    values:
    - Primary
    - Secondary

variables:
- group: Terraform ${{ parameters.environment }}
- name: armServiceConnectionName
  value: ${{ replace(format('ODW {0}', parameters.environment), 'Test', 'PreProd') }}
- name: artifactName
  value: synapse-release
- name: createLakeDatabasesPipeline
  value: pln_create_lake_databases
- name: devDataLakeName
  value: pinsstodwdevuks9h80mb
- name: environment
  value: ${{ lower(parameters.environment) }}
- name: failoverDeployment
  value: ${{ lower(parameters.failover_deployment) }}
- name: firewallRulesSecureFileName
  value: allowed_ip_addresses.yaml
- name: outputsFileName
  value: tfoutputs.json
- name: overridesFileName
  value: TemplateParametersForWorkspace.json
- name: planFileName
  value: tfplan
- name: poolName
  ${{ if eq(parameters.failover_deployment, false) }}:
    value: ${{ format('pins-agent-pool-odw-{0}-uks', lower(parameters.environment)) }}
  ${{ if eq(parameters.failover_deployment, true) }}:
    value: ${{ format('pins-agent-pool-odw-{0}-ukw', lower(parameters.environment)) }}
- name: postDeploymentDelaySeconds
  value: 180
- name: publishBranchName
  value: 'workspace_publish'
- name: sourceEnvironment
  value: 'dev'
- name: sourceWorkspaceName
  ${{ if eq(parameters.source_workspace, 'Primary') }}:
    value: 'pins-synw-odw-dev-uks'
  ${{ if eq(parameters.source_workspace, 'Secondary') }}:
    value: 'pins-synw-odw-dev-ukw'

pr: none

trigger:
  branches:
    include:
    - workspace_publish

stages:
  - stage: Output
    displayName: Terraform Output ${{ parameters.environment }}
    jobs:
    - job: Output
      displayName: Terraform Output
      pool: ${{ variables.poolName }}
      steps:
      # Checkout repo
      - checkout: self
        displayName: 'Checkout'

      # Download firewall rule configuration file
      - template: steps/download-secure-file.yaml
        parameters:
          secureFileName: ${{ variables.firewallRulesSecureFileName }}
          workingDirectory: infrastructure/configuration/firewall-rules

      # Login to Azure using Terraform service principal
      - template: steps/azure-login.yaml

      # Run Terraform init
      - template: steps/terraform-init.yaml
        parameters:
          environment: ${{ variables.environment }}
          workingDirectory: infrastructure

      # Get Terraform outputs
      - template: steps/terraform-outputs.yaml
        parameters:
          outputsFileName: ${{ variables.outputsFileName }}
          workingDirectory: infrastructure

      # Run Terraform plan
      - template: steps/terraform-plan.yaml
        parameters:
          environment: ${{ variables.environment }}
          failoverDeployment: ${{ variables.failoverDeployment }}
          planFileName: ${{ variables.planFileName }}
          workingDirectory: infrastructure

      # Convert Terraform outputs to global pipeline variables
      - template: steps/terraform-outputs-to-variables.yaml
        parameters:
          multiStageVariables: true
          outputsFileName: ${{ variables.outputsFileName }}
          workingDirectory: infrastructure

  - stage: Prep
    dependsOn: Output
    displayName: Pre-Release ${{ parameters.environment }}
    jobs:
    - job: Prep
      displayName: Override Parameters
      pool: ${{ variables.poolName }}
      steps:
      # Checkout repo
      - checkout: self
        displayName: 'Checkout'

      # Set source branch
      - template: steps/branch-set-source.yaml
        parameters:
          branchName: $(Build.SourceBranch)

      # Switch to the Synapse Workspace publish branch
      - template: steps/branch-switch.yaml
        parameters:
          branchName: ${{ variables.publishBranchName }}
          showDirectory: $(Build.SourcesDirectory)/${{ variables.sourceWorkspaceName }}

      # Copy Synapse Workspace ARM template files to artifact directory
      - task: CopyFiles@2
        displayName: 'Create Release Artifacts'
        inputs:
          sourceFolder: $(Build.SourcesDirectory)/${{ variables.sourceWorkspaceName }}
          contents: |
            TemplateForWorkspace.json
            TemplateParametersForWorkspace.json
          targetFolder: $(Build.ArtifactStagingDirectory)

     # Switch back to the source branch
      - template: steps/branch-switch.yaml
        parameters:
          branchName: $(source_branch)
          showDirectory: $(Build.SourcesDirectory)

      # Pre-Override Replacement
      - template: steps/synapse-parameters-override.yaml
        parameters:
          overrideFind: ${{ variables.devDataLakeName }}
          overrideReplace: $(data_lake_account_name)
          templateParametersOverridesFileName: ${{ variables.overridesFileName }}
          workingDirectory: $(Build.ArtifactStagingDirectory)

      # Publish pipeline artifacts
      - publish: $(Build.ArtifactStagingDirectory)
        artifact: ${{ variables.artifactName }}
        displayName: 'Publish Artifacts'

      variables:
        data_lake_account_name: $[ stageDependencies.Output.Output.outputs['SetVariables.data_lake_account_name'] ]

  - stage: Release
    dependsOn: [ Output, Prep ]
    displayName: Synapse Release ${{ parameters.environment }}
    jobs:
    - deployment: Release
      displayName: Synapse Release
      environment: ${{ parameters.environment }}
      pool: ${{ variables.poolName }}
      strategy:
        runOnce:
          deploy:
            steps:
            # Checkout repo
            - checkout: self
              clean: true
              displayName: 'Checkout'
              persistCredentials: true

            # Download firewall rule configuration file
            - template: steps/download-secure-file.yaml
              parameters:
                secureFileName: ${{ variables.firewallRulesSecureFileName }}
                workingDirectory: infrastructure/configuration/firewall-rules

            # Download pipeline artifacts
            - download: current
              artifact: ${{ variables.artifactName }}
              displayName: 'Download Artifact'

            # Verify terraform plan file
            - template: steps/verify-artifact.yaml
              parameters:
                artifactFileName: ${{ variables.overridesFileName }}
                artifactFilePath: $(Pipeline.Workspace)/${{ variables.artifactName }}

            # Login to Azure using Terraform service principal
            - template: steps/azure-login.yaml

            # Unlock resources
            - template: steps/azure-resource-unlock.yaml
              parameters:
                armServiceConnectionName: ${{ variables.armServiceConnectionName }}

            # Check if the dedicated SQL pool is currently paused
            - template: steps/synapse-sql-pool-check.yaml
              parameters:
                armServiceConnectionName: ${{ variables.armServiceConnectionName }}
                synapseWorkspaceName: $(synapse_workspace_name)

            # Disable triggers in the target Synapse Workspace
            - task: AzureSynapseWorkspace.synapsecicd-deploy.toggle-trigger.toggle-triggers-dev@2
              displayName: 'Disable Synapse Triggers'
              inputs:
                azureSubscription: ${{ variables.armServiceConnectionName }}
                ResourceGroupName: $(data_resource_group_name)
                WorkspaceName: $(synapse_workspace_name)
                ToggleOn: false

            # Resume the dedicated SQL pool if it was in a paused state
            - template: steps/synapse-sql-pool-resume.yaml
              parameters:
                armServiceConnectionName: ${{ variables.armServiceConnectionName }}
                synapseWorkspaceName: $(synapse_workspace_name)

            # Deploy Synapse Workspace artifacts from the source Workspace to the target Workspace
            - task: Synapse workspace deployment@2
              continueOnError: true
              displayName: 'Deploy Workspace'
              inputs:
                AzureResourceManagerConnection: ${{ replace(format('ODW {0}', parameters.environment), 'Test', 'PreProd') }} # Using "${{ variables.armServiceConnection }}" causes step to fail
                DeleteArtifactsNotInTemplate: true
                Environment: 'prod'
                operation: 'deploy'
                OverrideArmParameters: |
                  workspaceName: $(synapse_workspace_name)
                  ls_dsql_connectionString: Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=$(synapse_dsql_endpoint);Initial Catalog=@{linkedService().db_name}
                  ls_ssql_builtin_connectionString: Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=$(synapse_ssql_endpoint);Initial Catalog=@{linkedService().db_name}
                  ls_backup_destination_properties_typeProperties_url: $(data_lake_dfs_endpoint_failover)
                  ls_backup_source_properties_typeProperties_url: $(data_lake_dfs_endpoint)
                  ls_kv_properties_typeProperties_baseUrl: $(key_vault_uri)
                  ls_servicebus_properties_typeProperties_url: $(service_bus_namespace_name).servicebus.windows.net
                  ls_servicebus_properties_typeProperties_aadResourceId: https://servicebus.azure.net
                  ls_storage_properties_typeProperties_url: $(data_lake_dfs_endpoint)
                ParametersFile: '$(Pipeline.Workspace)/${{ variables.artifactName }}/${{ variables.overridesFileName }}'
                ResourceGroupName: $(data_resource_group_name)
                TargetWorkspaceName: $(synapse_workspace_name)
                TemplateFile: '$(Pipeline.Workspace)/${{ variables.artifactName }}/TemplateForWorkspace.json'

            # Pause pipeline after Synapse Workspace deployment
            - template: steps/pause.yaml
              parameters:
                delayInSeconds: ${{ variables.postDeploymentDelaySeconds }}

            # Run terraform init
            - template: steps/terraform-init.yaml
              parameters:
                environment: ${{ variables.environment }}
                workingDirectory: infrastructure

            # Run Terraform plan
            - template: steps/terraform-plan.yaml
              parameters:
                environment: ${{ variables.environment }}
                failoverDeployment: ${{ variables.failoverDeployment }}
                planFileName: ${{ variables.planFileName }}
                workingDirectory: infrastructure

            # Run Terraform apply
            - template: steps/terraform-apply.yaml
              parameters:
                environment: ${{ variables.environment }}
                planFilePath: ${{ variables.planFileName }}
                workingDirectory: infrastructure

            # Pause pipeline after Terraform deployment
            - template: steps/pause.yaml
              parameters:
                delayInSeconds: ${{ variables.postDeploymentDelaySeconds }}

            # Approve the data lake managed private endpoint if it has been reinstated
            - template: steps/azure-private-endpoint-approval.yaml
              parameters:
                armServiceConnectionName: ${{ variables.armServiceConnectionName }}
                resourceIds:
                - $(data_lake_account_id)
                - $(data_lake_account_id_failover)

            # Pause the dedicated SQL pool if it was previously resumed
            - template: steps/synapse-sql-pool-pause.yaml
              parameters:
                armServiceConnectionName: ${{ variables.armServiceConnectionName }}
                synapseWorkspaceName: $(synapse_workspace_name)

            # Re-enable triggers in the target Synapse Workspace
            - task: AzureSynapseWorkspace.synapsecicd-deploy.toggle-trigger.toggle-triggers-dev@2
              condition: succeededOrFailed()
              displayName: 'Enable Synapse Triggers'
              inputs:
                azureSubscription: ${{ variables.armServiceConnectionName }}
                ResourceGroupName: $(data_resource_group_name)
                WorkspaceName: $(synapse_workspace_name)

            # Run an internal Synapse pipeline to create data lake databases
            - task: liprec.vsts-publish-adf.trigger-adf-pipeline.trigger-adf-pipeline@2
              displayName: 'Create Lake Databases'
              inputs:
                azureSubscription: ${{ variables.armServiceConnectionName }}
                DatafactoryType: synapse
                WorkspaceUrl: $(synapse_dev_endpoint)
                PipelineFilter: ${{ variables.createLakeDatabasesPipeline }}

            # Lock resources
            - template: steps/azure-resource-lock.yaml
              parameters:
                armServiceConnectionName: ${{ variables.armServiceConnectionName }}
                resourceIds:
                - $(data_lake_account_id)
                - $(data_lake_account_id_failover)

      variables:
        data_lake_account_id: $[ stageDependencies.Output.Output.outputs['SetVariables.data_lake_account_id'] ]
        data_lake_account_id_failover: $[ stageDependencies.Output.Output.outputs['SetVariables.data_lake_account_id_failover'] ]
        data_lake_account_name: $[ stageDependencies.Output.Output.outputs['SetVariables.data_lake_account_name'] ]
        data_lake_dfs_endpoint: $[ stageDependencies.Output.Output.outputs['SetVariables.data_lake_dfs_endpoint'] ]
        data_lake_dfs_endpoint_failover: $[ stageDependencies.Output.Output.outputs['SetVariables.data_lake_dfs_endpoint_failover'] ]
        data_resource_group_name: $[ stageDependencies.Output.Output.outputs['SetVariables.data_resource_group_name'] ]
        key_vault_uri: $[ stageDependencies.Output.Output.outputs['SetVariables.key_vault_uri'] ]
        service_bus_namespace_name: $[ stageDependencies.Output.Output.outputs['SetVariables.service_bus_namespace_name'] ]
        synapse_dev_endpoint: $[ stageDependencies.Output.Output.outputs['SetVariables.synapse_dev_endpoint'] ]
        synapse_dsql_endpoint: $[ stageDependencies.Output.Output.outputs['SetVariables.synapse_dsql_endpoint'] ]
        synapse_ssql_endpoint: $[ stageDependencies.Output.Output.outputs['SetVariables.synapse_ssql_endpoint'] ]
        synapse_workspace_name: $[ stageDependencies.Output.Output.outputs['SetVariables.synapse_workspace_name'] ]
