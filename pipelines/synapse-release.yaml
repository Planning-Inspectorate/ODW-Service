parameters:
  - name: environment
    displayName: Environment
    type: string
    default: Test
    values:
    - Test
    - Prod

variables:
- group: Terraform ${{ parameters.environment }}
- name: artifactName
  value: synapse-arm
- name: environment
  value: ${{ lower(parameters.environment) }}
- name: outputFileName
  value: outputs.json
- name: publishBranchName
  value: 'workspace_publish'
- name: sourceEnvironment
  value: 'dev'

pr: none

trigger: none

pool:
  vmImage: ubuntu-22.04

stages:
  - stage: Output
    displayName: Terraform Output ${{ parameters.environment }}
    jobs:
    - job: Output
      displayName: Terraform Output
      steps:
      - checkout: self
        displayName: 'Checkout'

      - script: |
          echo "Authenticating with service principal: $(AZURE_SERVICE_PRINCIPAL_ID)"
          echo "##[command]az login && az account set"
          az login \
            --service-principal \
            --username $(AZURE_SERVICE_PRINCIPAL_ID) \
            --password $(AZURE_SERVICE_PRINCIPAL_SECRET) \
            --tenant $(AZURE_TENANT_ID) \
          && az account set \
            --subscription $(SUBSCRIPTION_ID)
          echo "Subscription scope set to: $(SUBSCRIPTION_ID)"
          echo "##[command]az account show"
          az account show
        displayName: 'Azure Login'

      - script: |
          echo "Initialising Terraform..."
          terraform init -backend-config=./environments/${{ variables.environment }}.tfbackend -input=false

          echo "Retieving Terraform outputs from state file..."
          echo "##[command]terraform output -json -no-color > ${{ variables.outputFileName }}"
          terraform output -json -no-color > ${{ variables.outputFileName }}
          ls -l ${{ variables.outputFileName }}
        displayName: 'Terraform Output'
        workingDirectory: infrastructure
        env:
          ARM_CLIENT_ID: $(AZURE_SERVICE_PRINCIPAL_ID)
          ARM_CLIENT_SECRET: $(AZURE_SERVICE_PRINCIPAL_SECRET)
          ARM_SUBSCRIPTION_ID: $(SUBSCRIPTION_ID)
          ARM_TENANT_ID: $(AZURE_TENANT_ID)

      - powershell: |
          Write-Host "Parsing Terraform outputs..."
          Write-Host "##[command]Get-Content ${{ variables.outputFileName }} | ConvertFrom-Json"
          $Output = Get-Content ${{ variables.outputFileName }} | ConvertFrom-Json

          Write-Host "Setting variables..."
          $Output | Get-Member -MemberType 'NoteProperty' | ForEach-Object { $Var = $Output.($_.Name); Write-Host "##[command][task.setvariable variable=$($_.Name);isoutput=true;issecret=$($Var.Sensitive)]$($Var.Value)" }
          $Output | Get-Member -MemberType 'NoteProperty' | ForEach-Object { $Var = $Output.($_.Name); Write-Host "##vso[task.setvariable variable=$($_.Name);isoutput=true;issecret=$($Var.Sensitive)]$($Var.Value)" }
        displayName: 'Set Variables'
        name: SetVariables
        workingDirectory: infrastructure

  - stage: Release
    dependsOn: Output
    displayName: Synapse Release ${{ parameters.environment }}
    jobs:
    - job: Release
      displayName: Synapse Release
      steps:
      - checkout: self
        clean: true
        displayName: 'Checkout'
        persistCredentials: true

      - script: |
          git checkout ${{ variables.publishBranchName }}

          echo "Listing source Synapse Workspace directory..."
          echo "##[command]ls -l $(Build.SourcesDirectory)/$(source_workspace_name):"
          ls -l $(Build.SourcesDirectory)/$(source_workspace_name)
        displayName: 'Switch to ${{ variables.publishBranchName }}'

      - script: |
          echo "data_lake_dfs_endpoint: $(data_lake_dfs_endpoint)"
          echo "data_resource_group_name: $(data_resource_group_name)"
          echo "key_vault_uri: $(key_vault_uri)"
          echo "service_bus_namespace_name: $(service_bus_namespace_name)"
          echo "source_workspace_name: $(source_workspace_name)"
          echo "synapse_dsql_endpoint: $(synapse_dsql_endpoint)"
          echo "synapse_ssql_endpoint: $(synapse_ssql_endpoint)"
          echo "synapse_workspace_name: $(synapse_workspace_name)"
        displayName: 'Check Variables'

      - task: CopyFiles@2
        displayName: 'Create Artifact'
        inputs:
          sourceFolder: $(Build.SourcesDirectory)/$(source_workspace_name)
          contents: |
            TemplateForWorkspace.json
            TemplateParametersForWorkspace.json
          targetFolder: $(Build.ArtifactStagingDirectory)

      - publish: $(Build.ArtifactStagingDirectory)
        artifact: ${{ variables.artifactName }}
        displayName: 'Publish Artifact'

      - task: AzureSynapseWorkspace.synapsecicd-deploy.synapse-deploy.Synapse workspace deployment@1
        displayName: 'Validate Release'
        inputs:
          AzureResourceManagerConnection: 'ODW PreProd'
          azureSubscription: $(SUBSCRIPTION_ID)
          DeleteArtifactsNotInTemplate: true
          operation: 'validate'
          OverrideArmParameters: >-
            -workspaceName $(synapse_workspace_name)
            -ls_dsql_connectionString $(synapse_dsql_endpoint)
            -ls_ssql_builtin_connectionString $(synapse_ssql_endpoint)
            -ls_kv_properties_typeProperties_baseUrl $(key_vault_uri)
            -ls_servicebus_properties_typeProperties_url $(service_bus_namespace_name).servicebus.windows.net
            -ls_servicebus_properties_typeProperties_aadResourceId https://servicebus.azure.net
            -ls_storage_properties_typeProperties_url $(data_lake_dfs_endpoint)
          ParametersFile: '$(Build.SourcesDirectory)/$(source_workspace_name)/TemplateParametersForWorkspace.json'
          ResourceGroupName: $(data_resource_group_name)
          TargetWorkspaceName: $(synapse_workspace_name)
          TemplateFile: '$(Build.SourcesDirectory)/$(source_workspace_name)/TemplateForWorkspace.json'
      variables:
        data_lake_dfs_endpoint: $[ stageDependencies.Output.Output.outputs['SetVariables.data_lake_dfs_endpoint'] ]
        data_resource_group_name: $[ stageDependencies.Output.Output.outputs['SetVariables.data_resource_group_name'] ]
        key_vault_uri: $[ stageDependencies.Output.Output.outputs['SetVariables.key_vault_uri'] ]
        service_bus_namespace_name: $[ stageDependencies.Output.Output.outputs['SetVariables.service_bus_namespace_name'] ]
        source_workspace_name: $[ replace(stageDependencies.Output.Output.outputs['SetVariables.synapse_workspace_name'], '${{ variables.environment }}', '${{ variables.sourceEnvironment }}') ]
        synapse_dsql_endpoint: $[ stageDependencies.Output.Output.outputs['SetVariables.synapse_dsql_endpoint'] ]
        synapse_ssql_endpoint: $[ stageDependencies.Output.Output.outputs['SetVariables.synapse_ssql_endpoint'] ]
        synapse_workspace_name: $[ stageDependencies.Output.Output.outputs['SetVariables.synapse_workspace_name'] ]

  # - stage: Release
  #   dependsOn: Output
  #   displayName: Synapse Release ${{ parameters.environment }}
  #   jobs:
  #   - deployment: Release
  #     displayName: Synapse Release
  #     environment: ${{ parameters.environment }}
  #     strategy:
  #       runOnce:
  #         deploy:
  #           steps:
  #           - checkout: self
  #             clean: true
  #             displayName: 'Checkout'
  #             persistCredentials: true

  #           - script: |
  #               git checkout ${{ variables.publishBranchName }}
  #               echo "##[command]ls -l $(Build.SourcesDirectory):"
  #               ls -l $(Build.SourcesDirectory)
  #             displayName: 'Switch to ${{ variables.publishBranchName }}'

            # - task: AzureSynapseWorkspace.synapsecicd-deploy.toggle-trigger.toggle-triggers-dev@2
            #   displayName: 'Disable Synapse Triggers'
            #   inputs:
            #     azureSubscription: 'ODW PreProd'
            #     ResourceGroupName: 'pins-odw-data-preprod-rg'
            #     WorkspaceName: 'pins-odw-data-preprod-syn-ws'
            #     ToggleOn: false

            # steps:
            # - task: AzureSynapseWorkspace.synapsecicd-deploy.synapse-deploy.Synapse workspace deployment@1
            #   displayName: 'Synapse deployment task for workspace: pins-odw-data-preprod-syn-ws'
            #   inputs:
            #     TemplateFile: '$(System.DefaultWorkingDirectory)/_Planning-Inspectorate.ODW-Service/workspace_arm_templates/TemplateForWorkspace.json'
            #     ParametersFile: '$(System.DefaultWorkingDirectory)/_Planning-Inspectorate.ODW-Service/workspace_arm_templates/TemplateParametersForWorkspace.json'
            #     azureSubscription: 'ODW PreProd'
            #     ResourceGroupName: 'pins-odw-data-preprod-rg'
            #     TargetWorkspaceName: 'pins-odw-data-preprod-syn-ws'
            #     DeleteArtifactsNotInTemplate: true
            #     OverrideArmParameters: '-workspaceName $(synapse_workspace_name) -ls_kv_properties_typeProperties_baseUrl https://$(synapse_workspace_name).vault.azure.net/ -pins-odw-data-dev-syn-ws-WorkspaceDefaultStorage_properties_typeProperties_url https://$(storage_account_name).dfs.core.windows.net -odw_curated_properties_0_NewEntity_Source_Location abfss://$(curated_lake_database_name)@$(storage_account_name).dfs.core.windows.net/ -odw_chris_test_properties_0_NewEntity_Source_Location abfss://$(christest_lake_database_name)@$(storage_account_name).dfs.core.windows.net/'

            # steps:
            # - task: AzureSynapseWorkspace.synapsecicd-deploy.toggle-trigger.toggle-triggers-dev@2
            #   displayName: 'Enable Synapse Triggers'
            #   inputs:
            #     azureSubscription: 'ODW PreProd'
            #     ResourceGroupName: 'pins-odw-data-preprod-rg'
            #     WorkspaceName: 'pins-odw-data-preprod-syn-ws'

            # steps:
            # - task: liprec.vsts-publish-adf.trigger-adf-pipeline.trigger-adf-pipeline@2
            #   displayName: 'Trigger pipeline run '
            #   inputs:
            #     azureSubscription: 'ODW PreProd'
            #     DatafactoryType: synapse
            #     WorkspaceUrl: 'https://pins-odw-data-preprod-syn-ws.dev.azuresynapse.net'
            #     PipelineFilter: 'pln_create_lake_databases'
