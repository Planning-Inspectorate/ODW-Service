parameters:
  - name: environment
    displayName: Environment
    type: string
    default: Dev
    values:
    - Dev
    - Test
    - Prod
  - name: failover_deployment
    displayName: 'Failover Deployment'
    type: boolean
    default: false

variables:
  - group: Terraform ${{ parameters.environment }}
  - name: agentPoolGroupName
    ${{ if eq(parameters.failover_deployment, false) }}:
      value: $(AGENT_POOL_GROUP_NAME)
    ${{ if eq(parameters.failover_deployment, true) }}:
      value: $(AGENT_POOL_GROUP_NAME_FAILOVER)
  - name: armServiceConnectionName
    value: ${{ format('Azure DevOps Pipelines - ODW {0} - Infrastructure', upper(parameters.environment)) }}
  - name: artifactName
    value: terraform-plan
  - name: environment
    value: ${{ lower(parameters.environment) }}
  - name: failoverDeployment
    value: ${{ lower(parameters.failover_deployment) }}
  - name: location
    ${{ if eq(parameters.failover_deployment, false) }}:
      value: "UK South"
    ${{ if eq(parameters.failover_deployment, true) }}:
      value: "UK West"
  - name: outputsFileName
    value: tfoutputs.json
  - name: planFileName
    value: tfplan
  - name: planTargetResourceName
    ${{ if eq(parameters.failover_deployment, false) }}:
      value: module.devops_agent_pool
    ${{ if eq(parameters.failover_deployment, true) }}:
      value: module.devops_agent_pool_failover

pr: none

trigger: none

pool:
  vmImage: ubuntu-latest

stages:
  - stage: Plan
    displayName: Underlay Plan ${{ parameters.environment }}
    jobs:
    - job: Plan
      displayName: Underlay Plan
      steps:
      # Checkout repo
      - checkout: self
        displayName: 'Checkout'

      # Login to Azure using Terraform service principal
      - template: steps/azure-login.yaml

      # Run Terraform init
      - template: steps/terraform-init.yaml
        parameters:
          environment: ${{ variables.environment }}
          workingDirectory: infrastructure

      # Run targetted Terraform plan to deploy VNET and resource group
      - template: steps/devops-agent-plan.yaml
        parameters:
          deployAgentPool: false
          environment: ${{ variables.environment }}
          failoverDeployment: ${{ variables.failoverDeployment }}
          planFileName: ${{ variables.planFileName }}
          planTargetResourceName: ${{ variables.planTargetResourceName }}
          workingDirectory: infrastructure

  - stage: Apply
    dependsOn: Plan
    displayName: Underlay Apply ${{ parameters.environment }}
    jobs:
    - deployment: Apply
      displayName: Underlay Apply
      environment: ${{ parameters.environment }}
      strategy:
        runOnce:
          deploy:
            steps:
            # Checkout repo
            - checkout: self
              displayName: 'Checkout'

            # Login to Azure using Terraform service principal
            - template: steps/azure-login.yaml

            # Run Terraform init
            - template: steps/terraform-init.yaml
              parameters:
                environment: ${{ variables.environment }}
                workingDirectory: infrastructure

            # Re-run Terraform plan to avoid managed agent version mismatch
            - template: steps/devops-agent-plan.yaml
              parameters:
                deployAgentPool: false
                environment: ${{ variables.environment }}
                failoverDeployment: ${{ variables.failoverDeployment }}
                planFileName: ${{ variables.planFileName }}
                planTargetResourceName: ${{ variables.planTargetResourceName }}
                workingDirectory: infrastructure

            # Run Terraform apply
            - template: steps/terraform-apply.yaml
              parameters:
                environment: ${{ variables.environment }}
                planFilePath: ${{ variables.planFileName }}
                workingDirectory: infrastructure

  - stage: Build
    dependsOn: Apply
    displayName: Image Build ${{ parameters.environment }}
    jobs:
    - job: Build
      displayName: Image Build
      steps:
      # Checkout repo
      - checkout: self
        displayName: 'Checkout'

      # Login to Azure using Terraform service principal
      - template: steps/azure-login.yaml

      # Build Azure DevOps agent image
      - template: steps/devops-agent-build.yaml
        parameters:
          location: ${{ variables.location }}
          resourceGroupName: ${{ variables.agentPoolGroupName }}
          workingDirectory: infrastructure/configuration/devops-agents

      # # Clean-up old images
      # - template: steps/azure-image-cleanup.yaml
      #   parameters:
      #     armServiceConnectionName: ${{ variables.armServiceConnectionName }}
      #     resourceGroupName: ${{ variables.agentPoolGroupName }}

  - stage: Pool_Plan
    dependsOn: Build
    displayName: Agent Pool Plan ${{ parameters.environment }}
    jobs:
    - job: Pool_Plan
      displayName: Agent Pool Plan
      steps:
      # Checkout repo
      - checkout: self
        displayName: 'Checkout'

      # Login to Azure using Terraform service principal
      - template: steps/azure-login.yaml

      # Run Terraform init
      - template: steps/terraform-init.yaml
        parameters:
          environment: ${{ variables.environment }}
          workingDirectory: infrastructure

      # Run targetted Terraform plan to deploy VNET and resource group
      - template: steps/devops-agent-plan.yaml
        parameters:
          deployAgentPool: true
          environment: ${{ variables.environment }}
          failoverDeployment: ${{ variables.failoverDeployment }}
          planFileName: ${{ variables.planFileName }}
          planTargetResourceName: ${{ variables.planTargetResourceName }}
          workingDirectory: infrastructure

  - stage: Pool_Apply
    dependsOn: Pool_Plan
    displayName: Agent Pool Apply ${{ parameters.environment }}
    jobs:
    - deployment: Pool_Apply
      displayName: Agent Pool Apply
      environment: ${{ parameters.environment }}
      strategy:
        runOnce:
          deploy:
            steps:
            # Checkout repo
            - checkout: self
              displayName: 'Checkout'

            # Login to Azure using Terraform service principal
            - template: steps/azure-login.yaml

            # Run Terraform init
            - template: steps/terraform-init.yaml
              parameters:
                environment: ${{ variables.environment }}
                workingDirectory: infrastructure

            # Re-run Terraform plan to avoid managed agent version mismatch
            - template: steps/devops-agent-plan.yaml
              parameters:
                deployAgentPool: true
                environment: ${{ variables.environment }}
                failoverDeployment: ${{ variables.failoverDeployment }}
                planFileName: ${{ variables.planFileName }}
                planTargetResourceName: ${{ variables.planTargetResourceName }}
                workingDirectory: infrastructure

            # Run Terraform apply
            - template: steps/terraform-apply.yaml
              parameters:
                environment: ${{ variables.environment }}
                planFilePath: ${{ variables.planFileName }}
                workingDirectory: infrastructure
