variables:
- name: sourceFolder
  value: '$(System.DefaultWorkingDirectory)/workspace'

- name: target_folder
  value: '$(Build.ArtifactStagingDirectory)'

- name: storage_account_name
  value: $(DATA_LAKE_STORAGE)

- name: storage_container
  value: 'test'

- name: target_workspace_name
  value: 'pins-synw-odw-dev-uks'

- name: resource_group
  value: 'pins-rg-data-odw-dev-uks'

pr: none

trigger: none

pool: 'pins-agent-pool-odw-dev-uks'

stages:
  - stage: Build
    displayName: Build Code

    jobs:
    - job: Build

      steps:
      - checkout: self

      - task: PowerShell@2
        inputs:
          targetType: 'inline'
          script: |
            # Check out the main branch
            git fetch origin

            # Get back to the original branch
            # git checkout $(Build.SourceBranchName)
            git checkout feat/ci-cd-testing

            # List added files compared to the main branch
            $createdFiles = git diff --name-only --diff-filter=A origin/main..origin/feat/ci-cd-testing -- workspace/ |
                          Where-Object { $_ -match '\.json$' }

            # List modified files compared to the main branch
            $modifiedFiles = git diff --name-only --diff-filter=M origin/main..origin/feat/ci-cd-testing -- workspace/ |
                          Where-Object { $_ -match '\.json$' }

            # List renamed files compared to the main branch
            $renamedFiles = git diff --name-only --diff-filter=R origin/main..origin/feat/ci-cd-testing -- workspace/ |
                          Where-Object { $_ -match '\.json$' }

            # List deleted files compared to the main branch
            $deletedFiles = git diff --name-only --diff-filter=D origin/main..origin/feat/ci-cd-testing -- workspace/ |
                          Where-Object { $_ -match '\.json$' }


            # Write to a file for archiving
            $createdFiles | Out-File created_files.txt
            $modifiedFiles | Out-File modified_files.txt
            $renamedFiles | Out-File renamed_files.txt
            $deletedFiles | Out-File deleted_files.txt

            # Show the contents of the file in the console
            Write-Output "Created files:"
            Get-Content created_files.txt

            Write-Output "Modified files:"
            Get-Content modified_files.txt

            Write-Output "Renamed files:"
            Get-Content renamed_files.txt

            Write-Output "Deleted files:"
            Get-Content deleted_files.txt

            foreach ($file in $modifiedFiles) {
              $sourcePath = "$(Build.SourcesDirectory)/$file"  # Correct source path relative to repository root
              $destinationPath = "$(Build.ArtifactStagingDirectory)/$file"
              
              # Ensure the destination directory exists
              New-Item -ItemType Directory -Path (Split-Path -Path $destinationPath) -Force -ErrorAction SilentlyContinue
              
              # Copy the file
              if (Test-Path $sourcePath) {
                  Copy-Item -Path $sourcePath -Destination $destinationPath -Force
              } else {
                  Write-Output "Source file not found: $sourcePath"
              }
            }

            # List the files in the artifact staging directory to confirm they've been copied
            Write-Output "Files in $(Build.ArtifactStagingDirectory):"
            Get-ChildItem -Recurse -Path "$(Build.ArtifactStagingDirectory)"

      # Task to archive the JSON files in the Artifact Staging Directory
      - task: ArchiveFiles@2
        inputs:
          rootFolderOrFile: '$(Build.ArtifactStagingDirectory)'  # Folder containing the JSON files
          includeRootFolder: false  # Optional: Set to false to avoid including the root directory in the archive
          archiveType: 'zip'  # Specify the archive type (zip)
          archiveFile: '$(Build.ArtifactStagingDirectory)/json_files.zip'  # Path for the resulting archive
          replaceExistingArchive: true  # Optional: Set to true to overwrite any existing archive

      # Task to publish the artifact
      - task: PublishBuildArtifacts@1
        inputs:
          artifactName: 'json-files'  # Name of the artifact
          publishLocation: 'Container'  # Specifies that the artifact is published to the pipeline
          targetPath: '$(Build.ArtifactStagingDirectory)'  # Folder containing the archived files


  - stage: Deploy
    displayName: Deploy
    dependsOn: Build
    jobs:
    - deployment: Deploy
      displayName: Deploy Synapse
      environment: Dev
      strategy:
        runOnce:
          deploy:
            steps:
            - task: ExtractFiles@1
              displayName: Extract Synapse files
              inputs: 
                archiveFilePatterns: '$(Pipeline.Workspace)/json-files/json_files.zip'
                destinationFolder: '$(Pipeline.Workspace)/extracted'
                cleanDestinationFolder: true
                overwriteExistingFiles: false

            - script: |
                echo 'Listing files...'
                ls -R '$(Pipeline.Workspace)/extracted'
              displayName: Listing extracted files

            - task: UseNode@1
              displayName: Install Node.js
              inputs:
                version: 22.x

            - task: Synapse workspace deployment@2
              displayName: Deploy Workspace
              continueOnError: false
              retryCountOnTaskFailure: '2'
              inputs:
                AzureResourceManagerConnection: 'ODW DEV - Infrastructure'
                operation: validateDeploy
                ArtifactsFolder: $(Pipeline.Workspace)/extracted/workspace
                ResourceGroupName: $(resource_group)
                TargetWorkspaceName: $(target_workspace_name)
                DeleteArtifactsNotInTemplate: false
                DeployManagedPrivateEndpoints: false
