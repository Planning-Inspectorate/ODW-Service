parameters:
  - name: environment
    displayName: Environment
    type: string
    default: Dev
    values:
    - Dev
    - Test
    - Prod
  - name: failover_deployment
    displayName: 'Failover Deployment'
    type: boolean
    default: false

variables:
  - group: Terraform ${{ parameters.environment }}
  - name: armServiceConnectionName
    value: ${{ replace(format('ODW {0}', parameters.environment), 'Test', 'PreProd') }}
  - name: artifactName
    value: terraform-plan
  - name: environment
    value: ${{ lower(parameters.environment) }}
  - name: failoverDeployment
    value: ${{ lower(parameters.failover_deployment) }}
  - name: outputsFileName
    value: tfoutputs.json
  - name: planFileName
    value: tfplan

pr: none

trigger: none

pool:
  vmImage: ubuntu-latest

stages:
  - stage: Plan
    displayName: Terraform Plan ${{ parameters.environment }}
    jobs:
    - job: Plan
      displayName: Terraform Plan
      steps:
      # Checkout repo
      - checkout: self
        displayName: 'Checkout'

      # Login to Azure using Terraform service principal
      - template: steps/azure-login.yaml

      # Run Terraform init
      - template: steps/terraform-init.yaml
        parameters:
          environment: ${{ variables.environment }}
          workingDirectory: infrastructure

      # Run targetted Terraform plan to deploy VNET and resource group
      - template: steps/devops-agent-plan.yaml
        parameters:
          deployAgentPool: false
          environment: ${{ variables.environment }}
          failoverDeployment: ${{ variables.failoverDeployment }}
          planFileName: ${{ variables.planFileName }}
          planTargetResourceName: module.devops_agent_pool
          workingDirectory: infrastructure

  - stage: Apply
    dependsOn: Plan
    displayName: Terraform Apply ${{ parameters.environment }}
    jobs:
    - deployment: Apply
      displayName: Terraform Apply
      environment: ${{ parameters.environment }}
      strategy:
        runOnce:
          deploy:
            steps:
            # Checkout repo
            - checkout: self
              displayName: 'Checkout'

            # Login to Azure using Terraform service principal
            - template: steps/azure-login.yaml

            # Run Terraform init
            - template: steps/terraform-init.yaml
              parameters:
                environment: ${{ variables.environment }}
                workingDirectory: infrastructure

            # Re-run Terraform plan to avoid managed agent version mismatch
            - template: steps/devops-agent-plan.yaml
              parameters:
                deployAgentPool: false
                environment: ${{ variables.environment }}
                failoverDeployment: ${{ variables.failoverDeployment }}
                planFileName: ${{ variables.planFileName }}
                planTargetResourceName: module.devops_agent_pool
                workingDirectory: infrastructure

            # Run Terraform apply
            - template: steps/terraform-apply.yaml
              parameters:
                environment: ${{ variables.environment }}
                planFilePath: ${{ variables.planFileName }}
                workingDirectory: infrastructure

            # Get Terraform outputs
            - template: steps/terraform-outputs.yaml
              parameters:
                outputsFileName: ${{ variables.outputsFileName }}
                workingDirectory: infrastructure

            # Convert Terraform outputs to global pipeline variables
            - template: steps/terraform-outputs-to-variables.yaml
              parameters:
                multiStageVariables: true
                outputsFileName: ${{ variables.outputsFileName }}
                workingDirectory: infrastructure

  - stage: Build
    dependsOn: Apply
    displayName: Packer Build ${{ parameters.environment }}
    jobs:
    - job: Build
      displayName: Packer Build
      steps:
      # Checkout repo
      - checkout: self
        displayName: 'Checkout'

      # Login to Azure using Terraform service principal
      - template: steps/azure-login.yaml

      # Build Azure DevOps agent image
      - template: steps/devops-agent-build.yaml
        parameters:
          resourceGroupName: $(devops_agent_pool_resource_group_name)
          workingDirectory: infrastructure/agents
