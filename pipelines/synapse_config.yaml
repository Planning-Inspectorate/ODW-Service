###
# Pipeline to copy Synapse data lake config files from the repo main branch 
# to the Azure Storage account
###

---

# Create parameters
parameters:
- name: environment
  displayName: Environment
  type: string
  default: Dev
  values:
  - Dev
  - Test
  - Prod
- name: failover_deployment
  displayName: 'Failover Deployment'
  type: boolean
  default: false

# Create variables
variables:
- group: Terraform ${{ parameters.environment }}

# Set service connection for the environment to deploy to, e.g. ODW Dev, ODW Test, ODW Prod
- name: armServiceConnectionName
  value: ${{ format('Azure DevOps Pipelines - ODW {0} - Infrastructure', upper(parameters.environment)) }}

- name: poolName
  value: ${{ format('pins-agent-pool-odw-{0}-uks', lower(parameters.environment)) }}

- name: source_folder
  value: '$(System.DefaultWorkingDirectory)/data-lake'

- name: target_folder
  value: '$(Build.ArtifactStagingDirectory)'

- name: storage_account_name
  value: $(DATA_LAKE_STORAGE)

- name: storage_container
  value: 'odw-config'

# Disable pull request triggers, i.e. it will not be triggered by any pull requests.
pr: none

# Specify the Microsoft hosted image we want to use.
pool: '$(poolName)'

resources:
  repositories:
  - repository: config
    type: github
    endpoint: Planning-Inspectorate
    name: Planning-Inspectorate/odw-config
    ref: main
    trigger:
      branches:
        include:
          - main
          
jobs:

- job: CopyFiles
  displayName: 'Copy Files'

  steps:

  # Checkout the Github repo, in this case ODW-Service.
  - checkout: config
    fetchDepth: '0'
    displayName: 'Checkout repo'

  # - script: |

  #     sourceFolder="$(source_folder)"
  #     targetFolder="$(target_folder)"
  #     changedFiles=$(git diff --name-only --relative=$sourceFolder HEAD HEAD~1)
  #     for file in $changedFiles; do
  #       mkdir -p "$(dirname $targetFolder/$file)"
  #       cp "$sourceFolder/$file" "$targetFolder/$file"
  #     done

  #     echo "Listing target folder files"
  #     ls -R "$targetFolder"

  #   displayName: 'Copy amended files to staging directory'

  - task: CopyFiles@2
    displayName: 'Copy files to staging directory'
    inputs:
      SourceFolder: '$(source_folder)'
      Contents: '**'
      TargetFolder: '$(target_folder)'

  - script: |
      echo 'Listing files...'
      ls -R '$(Build.ArtifactStagingDirectory)'

    displayName: 'Listing files...'

  - task: AzureCLI@2
    displayName: 'Send to Azure storage'
    inputs:
      azureSubscription: '$(armServiceConnectionName)'
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: |
        az storage blob upload-batch \
        --account-name $(storage_account_name) \
        --destination $(storage_container) \
        --source $(Build.ArtifactStagingDirectory) \
        --pattern '*' \
        --overwrite true \
        --auth-mode login