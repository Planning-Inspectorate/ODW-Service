parameters:
  - name: environment
    displayName: Environment
    type: string
    default: Dev
    values:
    - Dev
    - Test
    - Prod
  - name: failover_deployment
    displayName: 'Failover Deployment'
    type: boolean
    default: false

variables:
- group: Terraform ${{ parameters.environment }}
- name: armServiceConnectionName
  value: ${{ replace(format('ODW {0}', parameters.environment), 'Test', 'PreProd') }}
- name: artifactName
  value: terraform-plan
- name: environment
  value: ${{ lower(parameters.environment) }}
- name: failoverDeployment
  value: ${{ lower(parameters.failover_deployment) }}
- name: outputsFileName
  value: tfoutputs.json
- name: planFileName
  value: tfplan
- name: postDeploymentDelaySeconds
  value: 180
- name: tfOutputDataLakeAccountId
  value: data_lake_account_id
- name: tfOutputDataLakeAccountIdFailover
  value: data_lake_account_id_failover

pr: none

trigger: none

pool:
  vmImage: ubuntu-22.04

stages:
  - stage: Plan
    displayName: Terraform Plan ${{ parameters.environment }}
    jobs:
    - job: Plan
      displayName: Terraform Plan
      steps:
      # Checkout repo
      - checkout: self
        displayName: 'Checkout'

      # Login to Azure using Terraform service principal
      - template: steps/azure-login.yaml
        parameters:
          servicePrincipalId: $(AZURE_SERVICE_PRINCIPAL_ID)
          servicePrincipalSecret: $(AZURE_SERVICE_PRINCIPAL_SECRET)
          subscriptionId: $(SUBSCRIPTION_ID)
          tenantId: $(AZURE_TENANT_ID)

      # Run terraform init
      - template: steps/terraform-init.yaml
        parameters:
          armClientId: $(AZURE_SERVICE_PRINCIPAL_ID)
          armClientSecret: $(AZURE_SERVICE_PRINCIPAL_SECRET)
          armSubscriptionId: $(SUBSCRIPTION_ID)
          armTenantId: $(AZURE_TENANT_ID)
          environment: ${{ variables.environment }}
          workingDirectory: infrastructure

      # Run Terraform plan
      - template: steps/terraform-plan.yaml
        parameters:
          armClientId: $(AZURE_SERVICE_PRINCIPAL_ID)
          armClientSecret: $(AZURE_SERVICE_PRINCIPAL_SECRET)
          armSubscriptionId: $(SUBSCRIPTION_ID)
          armTenantId: $(AZURE_TENANT_ID)
          environment: ${{ variables.environment }}
          failoverDeployment: ${{ variables.failoverDeployment }}
          planFileName: ${{ variables.planFileName }}
          workingDirectory: infrastructure

      # Copy Terraform plan files to artifact directory
      - task: CopyFiles@2
        displayName: 'Create Artifact'
        inputs:
          sourceFolder: infrastructure
          contents: |
            .terraform/**
            .terraform.lock.hcl
            *.tftpl
            ${{ variables.planFileName }}
          targetFolder: $(Build.ArtifactStagingDirectory)

      # Publish pipeline artifacts
      - publish: $(Build.ArtifactStagingDirectory)
        artifact: ${{ variables.artifactName }}
        displayName: 'Publish Artifact'

  - stage: Apply
    dependsOn: Plan
    displayName: Terraform Apply ${{ parameters.environment }}
    jobs:
    - deployment: Apply
      displayName: Terraform Apply
      environment: ${{ parameters.environment }}
      strategy:
        runOnce:
          deploy:
            steps:
            # Checkout repo
            - checkout: self
              displayName: 'Checkout'

            # Download pipeline artifacts
            - download: current
              artifact: ${{ variables.artifactName }}
              displayName: 'Download Artifact'

            # Verify terraform plan file
            - template: steps/verify-artifact.yaml
              parameters:
                artifactFileName: ${{ variables.planFileName }}
                artifactFilePath: $(Pipeline.Workspace)/${{ variables.artifactName }}

            # Login to Azure using Terraform service principal
            - template: steps/azure-login.yaml
              parameters:
                servicePrincipalId: $(AZURE_SERVICE_PRINCIPAL_ID)
                servicePrincipalSecret: $(AZURE_SERVICE_PRINCIPAL_SECRET)
                subscriptionId: $(SUBSCRIPTION_ID)
                tenantId: $(AZURE_TENANT_ID)

            # Unlock resources
            - template: steps/azure-resource-unlock.yaml
              parameters:
                armServiceConnectionName: ${{ variables.armServiceConnectionName }}
                subscriptionId: $(SUBSCRIPTION_ID)

            # Run Terraform init
            - template: steps/terraform-init.yaml
              parameters:
                armClientId: $(AZURE_SERVICE_PRINCIPAL_ID)
                armClientSecret: $(AZURE_SERVICE_PRINCIPAL_SECRET)
                armSubscriptionId: $(SUBSCRIPTION_ID)
                armTenantId: $(AZURE_TENANT_ID)
                environment: ${{ variables.environment }}
                workingDirectory: infrastructure

            # Run Terraform apply
            - template: steps/terraform-apply.yaml
              parameters:
                armClientId: $(AZURE_SERVICE_PRINCIPAL_ID)
                armClientSecret: $(AZURE_SERVICE_PRINCIPAL_SECRET)
                armSubscriptionId: $(SUBSCRIPTION_ID)
                armTenantId: $(AZURE_TENANT_ID)
                environment: ${{ variables.environment }}
                planFilePath: $(Pipeline.Workspace)/${{ variables.artifactName }}/${{ variables.planFileName }}
                workingDirectory: infrastructure

            # Pause pipeline after Terraform deployment
            - template: steps/pause.yaml
              parameters:
                delayInSeconds: ${{ variables.postDeploymentDelaySeconds }}

            # Get Terraform outputs
            - template: steps/terraform-outputs.yaml
              parameters:
                armClientId: $(AZURE_SERVICE_PRINCIPAL_ID)
                armClientSecret: $(AZURE_SERVICE_PRINCIPAL_SECRET)
                armSubscriptionId: $(SUBSCRIPTION_ID)
                armTenantId: $(AZURE_TENANT_ID)
                outputsFileName: ${{ variables.outputsFileName }}
                workingDirectory: infrastructure

            # Convert Terraform outputs to local pipeline variables
            - template: steps/terraform-outputs-to-variables.yaml
              parameters:
                multiStageVariables: false
                outputsFileName: ${{ variables.outputsFileName }}
                workingDirectory: infrastructure

            # Approve the data lake managed private endpoint if it has been reinstated
            - template: steps/azure-private-endpoint-approval.yaml
              parameters:
                armServiceConnectionName: ${{ variables.armServiceConnectionName }}
                resourceIds:
                - $(data_lake_account_id)
                - $(data_lake_account_id_failover)

            # Lock resources
            - template: steps/azure-resource-lock.yaml
              parameters:
                armServiceConnectionName: ${{ variables.armServiceConnectionName }}
                resourceIds:
                - $(data_lake_account_id)
                - $(data_lake_account_id_failover)
