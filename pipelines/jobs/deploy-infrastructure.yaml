parameters:
  agentPool: ''
  env: ''
  armServiceConnectionName: ''
  failoverDeployment: false
  outputsFileName: ''


##
# Deploy Infrastructure
##
jobs:
- job: DeployInfrastructureJob
  pool: ${{ parameters.agentPool }}
  timeoutInMinutes: 0 # Max timeout
  steps:
  ###
  # Validation phase
  ###

  # Checkout repo
  - checkout: self
    displayName: 'Checkout Repo'

  # Download firewall rule configuration file
  - template: ${{variables['System.DefaultWorkingDirectory']}}/pipelines/steps/download-secure-file.yaml
    parameters:
      secureFileName: allowed_ip_addresses.yaml
      workingDirectory: infrastructure/configuration/firewall-rules
  
  # Login to Azure using Terraform service principal
  - template: ${{variables['System.DefaultWorkingDirectory']}}/pipelines/steps/azure-login.yaml

  # Run terraform init
  - template: ${{variables['System.DefaultWorkingDirectory']}}/pipelines/steps/terraform-init.yaml
    parameters:
      environment: ${{ parameters.env }}
      workingDirectory: infrastructure

  # Run Terraform format
  - template: ${{variables['System.DefaultWorkingDirectory']}}/pipelines/steps/terraform-format.yaml
    parameters:
      workingDirectory: infrastructure

  # Run Terraform validate
  - template: ${{variables['System.DefaultWorkingDirectory']}}/pipelines/steps/terraform-validate.yaml
    parameters:
      workingDirectory: infrastructure

  # Run TFLint
  - template: ${{variables['System.DefaultWorkingDirectory']}}/pipelines/steps/tflint-validate.yaml
    parameters:
      configFilePath: $(Build.Repository.LocalPath)/.tflint.hcl
      workingDirectory: infrastructure

  # Run Checkov
  - template: ${{variables['System.DefaultWorkingDirectory']}}/pipelines/steps/checkov-validate.yaml
    parameters:
      workingDirectory: infrastructure
  
  ###
  ## Terraform deployment phase
  ###
  # Run Terraform plan
  - template: ${{variables['System.DefaultWorkingDirectory']}}/pipelines/steps/terraform-plan.yaml
    parameters:
      environment: ${{ parameters.env }}
      failoverDeployment: ${{ parameters.failoverDeployment }}
      planFileName: tfplan
      workingDirectory: infrastructure
  
  # Copy Terraform plan files to artifact directory
  - task: CopyFiles@2
    displayName: 'Create Artifact'
    inputs:
      sourceFolder: infrastructure
      contents: |
        .terraform/**
        .terraform.lock.hcl
        *.tftpl
        tfplan
      targetFolder: $(Build.ArtifactStagingDirectory)

  # Publish pipeline artifacts
  - publish: $(Build.ArtifactStagingDirectory)
    artifact: terraform-plan
    displayName: 'Publish Artifact'
  
  # Unlock resources
  - template: ${{variables['System.DefaultWorkingDirectory']}}/pipelines/steps/azure-resource-unlock.yaml
    parameters:
      armServiceConnectionName: ${{ parameters.armServiceConnectionName }}
  
  # Run Terraform apply
  - template: ${{variables['System.DefaultWorkingDirectory']}}/pipelines/steps/terraform-apply.yaml
    parameters:
      environment: ${{ parameters.env }}
      planFilePath: tfplan
      workingDirectory: infrastructure
  
  # Get Terraform outputs
  - template: ${{variables['System.DefaultWorkingDirectory']}}/pipelines/steps/terraform-outputs.yaml
    parameters:
      outputsFileName: ${{ parameters.outputsFileName }}
      workingDirectory: infrastructure

  # Convert Terraform outputs to local pipeline variables
  - template: ${{variables['System.DefaultWorkingDirectory']}}/pipelines/steps/terraform-outputs-to-variables.yaml
    parameters:
      multiStageVariables: false
      outputsFileName: ${{ parameters.outputsFileName }}
      workingDirectory: infrastructure

  # Approve the data lake managed private endpoint if it has been reinstated
  - template: ${{variables['System.DefaultWorkingDirectory']}}/pipelines/steps/azure-private-endpoint-approval.yaml
    parameters:
      armServiceConnectionName: ${{ parameters.armServiceConnectionName }}
      resourceIds:
      - $(data_lake_account_id)
      - $(data_lake_account_id_failover)

  # Lock resources
  - template: ${{variables['System.DefaultWorkingDirectory']}}/pipelines/steps/azure-resource-lock.yaml
    parameters:
      armServiceConnectionName: ${{ parameters.armServiceConnectionName }}
      resourceIds:
      - $(data_lake_account_id)
      - $(data_lake_account_id_failover)
