parameters:
  agentPool: ''
  env: ''
  armServiceConnectionName: ''
  activateTriggers: false
  primaryWorkspace: true
  fullDeployment: false
  adoEnvName: ''

##
# Deploy Azure Synapse
##
jobs:
- deployment: DeploySynapseJob
  pool: ${{ parameters.agentPool }}
  timeoutInMinutes: 0 # Max timeout
  variables:
  - name: overridesFileName
    value: 'TemplateParametersForWorkspace.json'
  - name: artifactName
    value: 'synapse-release'
  - name: synapseTriggers 
    ${{ if eq(parameters.env , 'build') }}: 
      value: ''
    ${{ if eq(parameters.env , 'dev') }}: 
      value: 'tr_daily_weekdays_1500,tr_weekly'
    ${{ if eq(parameters.env , 'test') }}:
      value: 'tr_daily_weekdays_1500,tr_weekly,tr_saphr_daily_800'
    ${{ if eq(parameters.env , 'prod') }}: 
      value: 'tr_daily_7days_1800,tr_backup_daily,tr_weekly,tr_saphr_daily_800'
  environment: ${{ parameters.adoEnvName }}
  strategy:
    runOnce:
      deploy:
        steps:
        # Checkout repo
        - checkout: self
          displayName: 'Checkout'
          persistCredentials: true
          fetchDepth: 0
        # Login to Azure using Terraform service principal
        - template: ${{variables['System.DefaultWorkingDirectory']}}/pipelines/steps/azure-login.yaml@odw-common
        - template: ${{variables['System.DefaultWorkingDirectory']}}/pipelines/steps/get-synapse-details.yaml
          parameters:
            env: ${{ parameters.env }}
            pythonVersion: 3
            failoverDeployment: false
        
        # Check if the dedicated SQL pool is currently paused
        - template: ${{variables['System.DefaultWorkingDirectory']}}/pipelines/steps/synapse-sql-pool-check.yaml
          parameters:
            armServiceConnectionName: ${{ parameters.armServiceConnectionName }}
            synapseWorkspaceName: $(synapse_workspace_name)
        
        # Disable triggers in the target Synapse Workspace
        - task: AzureSynapseWorkspace.synapsecicd-deploy.toggle-trigger.toggle-triggers-dev@2
          displayName: 'Disable Synapse Triggers'
          inputs:
            azureSubscription: ${{ parameters.armServiceConnectionName }}
            ResourceGroupName: $(data_resource_group_name)
            WorkspaceName: $(synapse_workspace_name)
            ToggleOn: false
        
        # Resume the dedicated SQL pool if it was in a paused state
        - template: ${{variables['System.DefaultWorkingDirectory']}}/pipelines/steps/synapse-sql-pool-resume.yaml
          parameters:
            armServiceConnectionName: ${{ parameters.armServiceConnectionName }}
            synapseWorkspaceName: $(synapse_workspace_name)
        
        - ${{ if ne(lower(parameters.fullDeployment), true) }}:
          # Delete local Synapse workspace files to optimise the Synapse deployment
          - template: ${{variables['System.DefaultWorkingDirectory']}}/pipelines/steps/delete-unmodified-synapse-workspace-files.yaml
            parameters:
              env: ${{ parameters.env }}
              pythonVersion: 3
        
        # Deploy Synapse Workspace artifacts from the source Workspace to the target Workspace
        - task: Synapse workspace deployment@2
          continueOnError: false
          retryCountOnTaskFailure: '2'
          displayName: 'Deploy Workspace'
          inputs:
            AzureResourceManagerConnection: ${{ parameters.armServiceConnectionName }}
            DeleteArtifactsNotInTemplate: ${{ lower(parameters.fullDeployment) }}
            DeployManagedPrivateEndpoints: false
            Environment: 'prod'
            operation: 'validateDeploy'
            ArtifactsFolder: 'workspace'
            OverrideArmParameters: |
              workspaceName: $(synapse_workspace_name)
              ls_dsql_connectionString: Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=$(synapse_dsql_endpoint);Initial Catalog=@{linkedService().db_name}
              ls_ssql_builtin_connectionString: Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=$(synapse_ssql_endpoint);Initial Catalog=@{linkedService().db_name}
              ls_backup_destination_properties_typeProperties_url: $(data_lake_dfs_endpoint_failover)
              ls_backup_source_properties_typeProperties_url: $(data_lake_dfs_endpoint)
              ls_kv_properties_typeProperties_baseUrl: $(key_vault_uri)
              ls_servicebus_properties_typeProperties_url: $(service_bus_namespace_name).servicebus.windows.net
              ls_servicebus_properties_typeProperties_aadResourceId: https://servicebus.azure.net
              ls_storage_properties_typeProperties_url: $(data_lake_dfs_endpoint)
            ResourceGroupName: $(data_resource_group_name)
            TargetWorkspaceName: $(synapse_workspace_name)
        
        # Pause the dedicated SQL pool if it was previously resumed
        - template: ${{variables['System.DefaultWorkingDirectory']}}/pipelines/steps/synapse-sql-pool-pause.yaml
          parameters:
            armServiceConnectionName: ${{ parameters.armServiceConnectionName }}
            synapseWorkspaceName: $(synapse_workspace_name)
        
        # Re-enable triggers in the target Synapse Workspace
        - task: AzureSynapseWorkspace.synapsecicd-deploy.toggle-trigger.toggle-triggers-dev@2
          condition: and(succeededOrFailed(), ne(variables.synapseTriggers, ''))
          displayName: 'Enable Synapse Triggers'
          inputs:
            azureSubscription: ${{ parameters.armServiceConnectionName }}
            ResourceGroupName: $(data_resource_group_name)
            WorkspaceName: $(synapse_workspace_name)
            Triggers: ${{ variables.synapseTriggers }}
- deployment: BuildDeployODWPackageJob
  pool: ${{ parameters.agentPool }}
  environment: ${{ parameters.adoEnvName }}
  strategy:
    runOnce:
      deploy:
        steps:
        - checkout: self
          clean: true
        - template: ${{variables['System.DefaultWorkingDirectory']}}/pipelines/steps/azure-login.yaml@odw-common
        - template: ${{variables['System.DefaultWorkingDirectory']}}/pipelines/steps/build-and-deploy-odw-package.yaml
          parameters:
            armServiceConnectionName: ${{ parameters.armServiceConnectionName }}
            env: ${{ lower(parameters.env) }}
