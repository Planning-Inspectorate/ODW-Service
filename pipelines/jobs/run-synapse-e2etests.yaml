parameters:
  agentPool: ''
  env: ''

##
# Run Synapse E2E tests
##
jobs:
- job: RunSynapseE2ETestsJob
  pool: ${{ parameters.agentPool }}
  timeoutInMinutes: 0 # Max timeout
  steps:
  - checkout: self
    clean: true
  - template: ${{variables['System.DefaultWorkingDirectory']}}/pipelines/steps/azure-login.yaml@odw-common
  - script: |
      export PATH="$PATH:/home/AzDevOps/.local/bin/"
      export SYNAPSE_ENDPOINT="${{ format('https://pins-synw-odw-{0}-uks.dev.azuresynapse.net/', lower(parameters.env)) }}"
      export CREDENTIAL_NAME="${{ format('https://dev.azuresynapse.net/.default', lower(parameters.env)) }}"
      echo $SYNAPSE_ENDPOINT
      echo $CREDENTIAL_NAME
      python3 -m pytest $(Build.SourcesDirectory)/tests/e2e_test/test_e2e_pln_master_test.py::TestE2EPlnMasterTest::test_pln_master_test_pipeline -vv -rP --junitxml=e2e-test-results.xml --client_id="$servicePrincipalId" --client_secret="$servicePrincipalKey" --tenant="$tenantId"
    displayName: 'Run E2E Tests with pytest'
  
  - task: PublishTestResults@2
    displayName: 'Publish E2E Test Results'
    condition: always()
    inputs:
      testResultsFiles: 'e2e-test-results.xml'
      testRunTitle: 'E2E Master Pipeline Tests'
      failTaskOnFailedTests: true
  
  - script: |
      # Install Python dependencies
      python3 -m pip install --upgrade pip
      python3 -m pip install -r $(Build.SourcesDirectory)/scripts/requirements.txt
      
      # Fix any broken packages first
      sudo apt --fix-broken install -y
      
      # Update package lists
      sudo apt-get update
      
      # Remove any existing ODBC packages that might conflict
      sudo apt-get remove -y unixodbc unixodbc-dev msodbcsql17 || true
      
      # Install ODBC dependencies in correct order
      sudo apt-get install -y curl apt-transport-https gnupg lsb-release
      
      # Add Microsoft repository
      curl -sSL https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -
      
      # Determine Ubuntu version and add appropriate repository
      UBUNTU_VERSION=$(lsb_release -rs)
      echo "Ubuntu version: $UBUNTU_VERSION"
      
      if [[ "$UBUNTU_VERSION" == "18.04" ]]; then
        curl -sSL https://packages.microsoft.com/config/ubuntu/18.04/prod.list | sudo tee /etc/apt/sources.list.d/msprod.list
      elif [[ "$UBUNTU_VERSION" == "20.04" ]]; then
        curl -sSL https://packages.microsoft.com/config/ubuntu/20.04/prod.list | sudo tee /etc/apt/sources.list.d/msprod.list
      elif [[ "$UBUNTU_VERSION" == "22.04" ]]; then
        curl -sSL https://packages.microsoft.com/config/ubuntu/22.04/prod.list | sudo tee /etc/apt/sources.list.d/msprod.list
      else
        echo "Unsupported Ubuntu version: $UBUNTU_VERSION, trying 20.04 repository"
        curl -sSL https://packages.microsoft.com/config/ubuntu/20.04/prod.list | sudo tee /etc/apt/sources.list.d/msprod.list
      fi
      
      # Update package lists after adding Microsoft repository
      sudo apt-get update
      
      # Install unixODBC first (this provides the base ODBC functionality)
      sudo apt-get install -y unixodbc unixodbc-dev
      
      # Install Microsoft ODBC Driver 17 for SQL Server
      sudo ACCEPT_EULA=Y apt-get install -y msodbcsql17
      
      # Verify installation
      odbcinst -j
      echo "ODBC drivers installed:"
      odbcinst -q -d
    displayName: 'Install dependencies for E2E verification'
    
  - task: AzureCLI@2
    displayName: 'Verify E2E Test Results'
    inputs:
      azureSubscription: 'ODW ${{ upper(parameters.env) }} - Infrastructure'
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: |
        set -e  # Exit immediately if any command fails
        
        echo "Starting automated E2E test results verification..."
        echo "===================================================="
        
        # Set environment variables for authentication
        export AZURE_CLIENT_ID="$servicePrincipalId"
        export AZURE_CLIENT_SECRET="$servicePrincipalKey"
        export AZURE_TENANT_ID="$tenantId"
        
        # Define Synapse endpoint based on environment
        SYNAPSE_ENDPOINT="${{ format('https://pins-synw-odw-{0}-uks.dev.azuresynapse.net/', lower(parameters.env)) }}"
        
        echo "Environment: ${{ parameters.env }}"
        echo "Synapse Endpoint: $SYNAPSE_ENDPOINT"
        echo ""
        
        # Run the verification script
        python3 $(Build.SourcesDirectory)/scripts/verify-e2e-test-results.py \
          --synapse-endpoint "$SYNAPSE_ENDPOINT" \
          --hours-back 2 \
          --max-wait 10
        
        echo ""
        echo "E2E test verification completed successfully!"
        echo "All tests passed - pipeline can proceed."
