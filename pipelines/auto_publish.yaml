variables:
- name: sourceFolder
  value: '$(System.DefaultWorkingDirectory)/workspace'

- name: target_folder
  value: '$(Build.ArtifactStagingDirectory)'

- name: target_workspace_name
  value: 'pins-synw-odw-dev-uks'

- name: resource_group
  value: 'pins-rg-data-odw-dev-uks'

- name: armServiceConnectionName
  value: 'ODW DEV - Infrastructure'

- name: source_branch
  value: 'feat/ci-cd-testing'

- name: target_branch
  value: 'main'

pr: none

trigger: none

pool: 'pins-agent-pool-odw-dev-uks'

resources:
  repositories:
  - repository: source
    type: github
    name: Planning-Inspectorate/ODW-Service
    endpoint: Planning-Inspectorate
    ref: refs/heads/$(source_branch)
  - repository: target
    type: github
    name: Planning-Inspectorate/ODW-Service
    endpoint: Planning-Inspectorate
    ref: refs/heads/$(target_branch)

stages:
  - stage: Build
    displayName: Build Code

    jobs:
    - job: Build

      steps:
      - checkout: self
        fetchDepth: 0

      - task: PowerShell@2
        inputs:
          targetType: 'inline'
          script: |
            # Get all remote branches
            git fetch origin
            
            git checkout '$(source_branch)'
            
            # List added files compared to the main branch
            $createdFiles = git diff --name-only --diff-filter=A '$(target_branch)'..'$(source_branch)' -- workspace/ |
                          Where-Object { $_ -match '\.json$' }

            # List modified files compared to the main branch
            $modifiedFiles = git diff --name-only --diff-filter=M '$(target_branch)'..'$(source_branch)' -- workspace/ |
                          Where-Object { $_ -match '\.json$' }

            # List renamed files compared to the main branch
            $renamedFiles = git diff --name-only --diff-filter=R '$(target_branch)'..'$(source_branch)' -- workspace/ |
                          Where-Object { $_ -match '\.json$' }

            # List deleted files compared to the main branch
            $deletedFiles = git diff --name-only --diff-filter=D '$(target_branch)'..'$(source_branch)' -- workspace/ |
                          Where-Object { $_ -match '\.json$' }


            # Write to a file for archiving
            $createdFiles | Out-File created_files.txt
            $modifiedFiles | Out-File modified_files.txt
            $renamedFiles | Out-File renamed_files.txt
            $deletedFiles | Out-File deleted_files.txt

            $createdAndModifiedFiles = $createdFiles + $modifiedFiles
            $createdAndModifiedFiles | Out-File createdAndModifiedFiles.txt

            # Show the contents of the file in the console
            Write-Output "Created files:"
            Get-Content created_files.txt

            Write-Output "Modified files:"
            Get-Content modified_files.txt

            Write-Output "Renamed files:"
            Get-Content renamed_files.txt

            Write-Output "Deleted files:"
            Get-Content deleted_files.txt

            Write-Output "All created and modified files:"
            Get-Content createdAndModifiedFiles.txt

            if ($renamedFiles) {
              Write-Error "Pipeline failed due to renamed files detected. Renamed files:"
              $renamedFiles | ForEach-Object { Write-Error $_ }
              exit 1
            }

            foreach ($file in $createdAndModifiedFiles) {
              $sourcePath = "$(Build.SourcesDirectory)/$file"  # Correct source path relative to repository root
              $destinationPath = "$(Build.ArtifactStagingDirectory)/$file"
              
              # Ensure the destination directory exists
              New-Item -ItemType Directory -Path (Split-Path -Path $destinationPath) -Force -ErrorAction SilentlyContinue
              
              # Copy the file
              if (Test-Path $sourcePath) {
                  Copy-Item -Path $sourcePath -Destination $destinationPath -Force
              } else {
                  Write-Output "Source file not found: $sourcePath"
              }
            }

            # List the files in the artifact staging directory to confirm they've been copied
            Write-Output "Files in $(Build.ArtifactStagingDirectory):"
            Get-ChildItem -Recurse -Path "$(Build.ArtifactStagingDirectory)"

      # Task to archive the JSON files in the Artifact Staging Directory
      - task: ArchiveFiles@2
        inputs:
          rootFolderOrFile: '$(Build.ArtifactStagingDirectory)'  # Folder containing the JSON files
          includeRootFolder: false  # Optional: Set to false to avoid including the root directory in the archive
          archiveType: 'zip'  # Specify the archive type (zip)
          archiveFile: '$(Build.ArtifactStagingDirectory)/json_files.zip'  # Path for the resulting archive
          replaceExistingArchive: true  # Optional: Set to true to overwrite any existing archive

      # Task to publish the artifact
      - task: PublishBuildArtifacts@1
        inputs:
          artifactName: 'json_files'  # Name of the artifact
          publishLocation: 'Container'  # Specifies that the artifact is published to the pipeline
          targetPath: '$(Build.ArtifactStagingDirectory)'  # Folder containing the archived files

  - stage: Deploy
    displayName: Deploy
    dependsOn: Build
    jobs:
    - deployment: Deploy
      displayName: Deploy Synapse
      environment: Dev
      strategy:
        runOnce:
          deploy:
            steps:
            - task: ExtractFiles@1
              displayName: Extract Synapse files
              inputs: 
                archiveFilePatterns: '$(Pipeline.Workspace)/json-files/json_files.zip'
                destinationFolder: '$(Pipeline.Workspace)/extracted'
                cleanDestinationFolder: true
                overwriteExistingFiles: false

            - script: |
                echo 'Listing files...'
                ls -R '$(Pipeline.Workspace)/extracted'
              displayName: Listing extracted files

            - task: UseNode@1
              displayName: Install Node.js
              inputs:
                version: 22.x

            - task: Synapse workspace deployment@2
              displayName: Deploy Workspace
              continueOnError: false
              retryCountOnTaskFailure: '2'
              inputs:
                AzureResourceManagerConnection: '$(armServiceConnectionName)'
                operation: validateDeploy
                ArtifactsFolder: $(Pipeline.Workspace)/extracted/workspace
                ResourceGroupName: $(resource_group)
                TargetWorkspaceName: $(target_workspace_name)
                DeleteArtifactsNotInTemplate: false
                DeployManagedPrivateEndpoints: false
