variables:
- name: sourceFolder
  value: '$(System.DefaultWorkingDirectory)/workspace'

- name: target_folder
  value: '$(Build.ArtifactStagingDirectory)'

- name: target_workspace_name
  value: 'pins-synw-odw-dev-uks'

- name: resource_group
  value: 'pins-rg-data-odw-dev-uks'

- name: armServiceConnectionName
  value: 'ODW DEV - Infrastructure'

- name: source_branch
  value: $(System.PullRequest.SourceBranch)

- name: target_branch
  value: $(System.PullRequest.TargetBranch)

- name: pull_request_id
  value: $(System.PullRequest.PullRequestId)

# removing pr trigger for now until we decide how the process will work

# pr:
#   branches:
#     include:
#       - main

# trigger:
#   branches:
#     exclude:
#       - "*"

pr: none

trigger: none 

pool: 'pins-agent-pool-odw-dev-uks'

resources:
  repositories:
  - repository: source
    type: github
    name: Planning-Inspectorate/ODW-Service
    endpoint: Planning-Inspectorate
    ref: refs/heads/$(source_branch)
  - repository: target
    type: github
    name: Planning-Inspectorate/ODW-Service
    endpoint: Planning-Inspectorate
    ref: refs/heads/$(target_branch)

stages:

  - stage: Build
    displayName: Build Code

    jobs:

    - job: Build

      steps:
      
      - script: |
          echo "Source branch: $(source_branch)"
          echo "Target branch: $(target_branch)"
          echo "Pull request id: $(pull_request_id)"
          
        displayName: Print variables
        
      - checkout: source
        fetchDepth: 0
        displayName: Checkout source branch

      - task: PowerShell@2
        displayName: Git diff and copy to target folder
        inputs:
          targetType: 'inline'
          script: |

            Write-Output "Fetching origin main..."
            git fetch origin main
            
            Write-Output "Doing the git diff..."
            $createdOrModifiedFiles = git diff --name-only --diff-filter=AM origin/$(target_branch)...origin/$(source_branch) -- workspace/ |
                          Where-Object { $_ -match '\.json$' }

            $renamedFiles = git diff --name-only --diff-filter=R origin/$(target_branch)...origin/$(source_branch) -- workspace/ |
                          Where-Object { $_ -match '\.json$' }

            $deletedFiles = git diff --name-only --diff-filter=D origin/$(target_branch)...origin/$(source_branch) -- workspace/ |
                          Where-Object { $_ -match '\.json$' }

            $allFiles = git diff --name-only origin/$(target_branch)...origin/$(source_branch) -- workspace/ |
                          Where-Object { $_ -match '\.json$' }


            # Write to a file for archiving
            $createdOrModifiedFiles | Out-File created_modified_files.txt
            $renamedFiles | Out-File renamed_files.txt
            $deletedFiles | Out-File deleted_files.txt
            $allFiles | Out-File all_files.txt

            # Show the contents of the file in the console
            Write-Output "Created or modified files:"
            Get-Content created_modified_files.txt

            Write-Output "Renamed files:"
            Get-Content renamed_files.txt

            Write-Output "Deleted files:"
            Get-Content deleted_files.txt

            Write-Output "All files"
            Get-Content all_files.txt

            foreach ($file in $allFiles) {
                $sourcePath = "$(Build.SourcesDirectory)/$file"
                $destinationPath = "$(Build.ArtifactStagingDirectory)/$file"
                
                Write-Output "Source Path: $sourcePath"
                Write-Output "Destination Path: $destinationPath"
                
                New-Item -ItemType Directory -Path (Split-Path -Path $destinationPath) -Force -ErrorAction SilentlyContinue
                
                if (Test-Path $sourcePath) {
                    Copy-Item -Path $sourcePath -Destination $destinationPath -Force
                    Write-Output "Copied: $file"}
                else {
                    Write-Warning "Source file not found: $sourcePath"}}

      - task: PowerShell@2
        displayName: Check if artifact staging directory is empty
        inputs:
          targetType: 'inline'
          script: |

            $files = Get-ChildItem -Path "$(Build.ArtifactStagingDirectory)" -Recurse
            if ($files) {
              Write-Host "##vso[task.setvariable variable=IsDirectoryNotEmpty]true"} 
              else {
            Write-Host "##vso[task.setvariable variable=IsDirectoryNotEmpty]false"}

      - task: ArchiveFiles@2
        displayName: Zip the files
        condition: and(succeeded(), eq(variables['IsDirectoryNotEmpty'], 'true'))
        inputs:
          rootFolderOrFile: '$(Build.ArtifactStagingDirectory)'
          includeRootFolder: false
          archiveType: 'zip'
          archiveFile: '$(Build.ArtifactStagingDirectory)/json_files.zip'
          replaceExistingArchive: true 

      - task: PublishBuildArtifacts@1
        displayName: Publish artifact
        condition: and(succeeded(), eq(variables['IsDirectoryNotEmpty'], 'true'))
        inputs:
          artifactName: 'synapse_changes'  
          publishLocation: 'Container'
          targetPath: '$(Build.ArtifactStagingDirectory)'

  - stage: Deploy
    displayName: Deploy
    dependsOn: Build
    jobs:
    - deployment: Deploy
      displayName: Deploy Synapse Changes
      environment: Dev
      strategy:
        runOnce:
          deploy:
            steps:
            - task: ExtractFiles@1
              displayName: Extract Synapse files
              inputs: 
                archiveFilePatterns: '$(Pipeline.Workspace)/synapse_changes/json_files.zip'
                destinationFolder: '$(Pipeline.Workspace)/extracted'
                cleanDestinationFolder: true
                overwriteExistingFiles: false

            - script: |
                echo 'Listing files...'
                ls -R '$(Pipeline.Workspace)/extracted'
              displayName: Listing extracted files

            - task: Synapse workspace deployment@2
              displayName: Deploy Workspace
              continueOnError: false
              retryCountOnTaskFailure: '2'
              inputs:
                AzureResourceManagerConnection: '$(armServiceConnectionName)'
                operation: validateDeploy
                ArtifactsFolder: $(Pipeline.Workspace)/extracted/workspace
                ResourceGroupName: $(resource_group)
                TargetWorkspaceName: $(target_workspace_name)
                DeleteArtifactsNotInTemplate: false
                DeployManagedPrivateEndpoints: false
