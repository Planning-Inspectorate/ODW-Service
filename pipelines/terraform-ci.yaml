parameters:
  - name: environment
    displayName: Environment
    type: string
    default: Dev
    values:
    - Dev
    - Test
    - Prod

variables:
- group: Terraform ${{ parameters.environment }}
- name: environment
  value: ${{ lower(parameters.environment) }}
- name: tfLintLogLevel
  value: warn

pr: none

trigger:
  branches:
    include:
    - '*'
  paths:
    include:
    - infrastructure
    exclude:
    - '**/README.md'

pool:
  vmImage: ubuntu-22.04

stages:
  - stage: Validate
    jobs:
    - job: Validate
      steps:
      # Checkout repo
      - checkout: self
        displayName: 'Checkout Repo'

      # Install required packages
      - template: steps/install-tflint.yaml
      - template: steps/install-checkov.yaml

      # Login to Azure using Terraform service principal
      - template: steps/azure-login.yaml
        parameters:
          servicePrincipalId: $(AZURE_SERVICE_PRINCIPAL_ID)
          servicePrincipalSecret: $(AZURE_SERVICE_PRINCIPAL_SECRET)
          subscriptionId: $(SUBSCRIPTION_ID)
          tenantId: $(AZURE_TENANT_ID)

      # Run terraform init
      - script: |
          echo "Initialising Terraform using state file ${{ variables.environment }}.tfstate..."
          echo "##[command]terraform init -backend-config="key=${{ variables.environment }}.tfstate" -input=false"
          terraform init \
            -backend-config="key=${{ variables.environment }}.tfstate" \
            -input=false
        displayName: 'Terraform Init'
        workingDirectory: infrastructure
        env:
          ARM_CLIENT_ID: $(AZURE_SERVICE_PRINCIPAL_ID)
          ARM_CLIENT_SECRET: $(AZURE_SERVICE_PRINCIPAL_SECRET)
          ARM_SUBSCRIPTION_ID: $(SUBSCRIPTION_ID)
          ARM_TENANT_ID: $(AZURE_TENANT_ID)

      # Run terraform format
      - script: |
          echo "Checking Terraform file formatting..."
          echo "##[command]terraform fmt -check -recursive"
          terraform fmt -check -recursive
        displayName: 'Terraform Format'
        workingDirectory: infrastructure

      # Run terraform validate
      - script: |
          echo "Validating Terraform files..."
          echo "##[command]terraform validate -no-color"
          terraform validate -no-color
        displayName: 'Terraform Validate'
        workingDirectory: infrastructure

      # Run TFLint
      - script: |
          TFLINT_LOG=${{ variables.tfLintLogLevel }}

          echo "Initialising TFLint..."
          echo "##[command]tflint --init --config $(Build.Repository.LocalPath)/.tflint.hcl --no-color"
          tflint \
            --init \
            --config $(Build.Repository.LocalPath)/.tflint.hcl \
            --no-color

          echo "Running TFLint..."
          echo "##[command]tflint --config $(Build.Repository.LocalPath)/.tflint.hcl --format compact --module --no-color"
          tflint \
            --config $(Build.Repository.LocalPath)/.tflint.hcl \
            --format compact \
            --module \
            --no-color

          if [[ $? -ne 0 ]]; then
            echo "##vso[task.logissue type=error]TFLint reported failures"
          fi
        displayName: 'TFLint Validate'
        workingDirectory: infrastructure

      - script: |
          echo "Running Checkov..."
          echo "##[command]checkov --directory . --framework terraform"
          checkov \
            --directory . \
            --framework terraform \

          if [[ $? -ne 0 ]]; then
            echo "##vso[task.logissue type=error]Checkov reported failures"
          fi
        displayName: 'Checkov Validate'
        workingDirectory: infrastructure
